
ADCnTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d20  08004d20  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d28  08004d28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000010c  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1a4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc6  00000000  00000000  0002c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b38  00000000  00000000  0002eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021619  00000000  00000000  0002f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf54  00000000  00000000  00050c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f7b  00000000  00000000  0005db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012fae0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003364  00000000  00000000  0012fb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cd8 	.word	0x08004cd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004cd8 	.word	0x08004cd8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <lcd10usDelay>:
#endif /* USE_BUSY_FLAG */

#ifndef USE_I2C_BUS
/*!	\brief	Creates delay multiples of 10us. */
static void lcd10usDelay(volatile uint32_t us)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	/* �onversion to us */
	us *= MCU_FREQ_VALUE;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <lcd10usDelay+0x38>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <lcd10usDelay+0x3c>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	0c9b      	lsrs	r3, r3, #18
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	607b      	str	r3, [r7, #4]
	/* Wait */
	while (us > 0u)
 8000d18:	e002      	b.n	8000d20 <lcd10usDelay+0x24>
	{
		us--;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
	while (us > 0u)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f9      	bne.n	8000d1a <lcd10usDelay+0x1e>
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	20000008 	.word	0x20000008
 8000d38:	431bde83 	.word	0x431bde83

08000d3c <lcdWrite>:

/*!	\brief	Send data/commands to the display. */
static void lcdWrite(uint8_t data)
{/* Low level function. */
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
#if (USE_BUSY_FLAG)
	/* Write data/commands to LCD. */
	CLR(LCD_RW_OUT, LCD_RW);
#endif /* USE_BUSY_FLAG */

	lcdHigh(data);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f825 	bl	8000d98 <lcdHigh>
	lcdStrobe();
 8000d4e:	f000 f80d 	bl	8000d6c <lcdStrobe>
	lcdLow(data);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f873 	bl	8000e40 <lcdLow>
	lcdStrobe();
 8000d5a:	f000 f807 	bl	8000d6c <lcdStrobe>
	/* The busy flag must be checked after the 4-bit data has been transferred twice. */
#if (USE_BUSY_FLAG)
	lcd_busy_delay();
#else
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f7ff ffcc 	bl	8000cfc <lcd10usDelay>
#endif /* USE_BUSY_FLAG */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <lcdStrobe>:
}
#else

/*!	\brief	Initiate the transfer of data/commands to LCD. */
static void lcdStrobe(void)
{/* Low level function. */
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	SET(LCD_E_OUT, LCD_E);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <lcdStrobe+0x28>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <lcdStrobe+0x28>)
 8000d76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7a:	6153      	str	r3, [r2, #20]
	lcd10usDelay(ENABLE_CYCLE_TIME);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ffbd 	bl	8000cfc <lcd10usDelay>
	CLR(LCD_E_OUT, LCD_E);	/* Enable strobe */
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <lcdStrobe+0x28>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <lcdStrobe+0x28>)
 8000d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d8c:	6153      	str	r3, [r2, #20]
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <lcdHigh>:

/*!	\brief	Send the msb nibble of the data / command to LCD. */
static void lcdHigh(uint8_t data)
{/* Low level function. */
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if(data & LCD_D7_MASK) SET(LCD_D7_OUT, LCD_D7); else CLR(LCD_D7_OUT, LCD_D7);
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	da06      	bge.n	8000db8 <lcdHigh+0x20>
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <lcdHigh+0xa4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <lcdHigh+0xa4>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	e005      	b.n	8000dc4 <lcdHigh+0x2c>
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <lcdHigh+0xa4>)
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <lcdHigh+0xa4>)
 8000dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dc2:	6153      	str	r3, [r2, #20]
	if(data & LCD_D6_MASK) SET(LCD_D6_OUT, LCD_D6); else CLR(LCD_D6_OUT, LCD_D6);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <lcdHigh+0x44>
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <lcdHigh+0xa4>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <lcdHigh+0xa4>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	e005      	b.n	8000de8 <lcdHigh+0x50>
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <lcdHigh+0xa4>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <lcdHigh+0xa4>)
 8000de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000de6:	6153      	str	r3, [r2, #20]
	if(data & LCD_D5_MASK) SET(LCD_D5_OUT, LCD_D5); else CLR(LCD_D5_OUT, LCD_D5);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <lcdHigh+0x68>
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <lcdHigh+0xa4>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <lcdHigh+0xa4>)
 8000df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	e005      	b.n	8000e0c <lcdHigh+0x74>
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <lcdHigh+0xa4>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <lcdHigh+0xa4>)
 8000e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e0a:	6153      	str	r3, [r2, #20]
	if(data & LCD_D4_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <lcdHigh+0x8c>
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <lcdHigh+0xa4>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <lcdHigh+0xa4>)
 8000e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e20:	6153      	str	r3, [r2, #20]
}
 8000e22:	e005      	b.n	8000e30 <lcdHigh+0x98>
	if(data & LCD_D4_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <lcdHigh+0xa4>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <lcdHigh+0xa4>)
 8000e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e2e:	6153      	str	r3, [r2, #20]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000

08000e40 <lcdLow>:

/*!	\brief	Send the lsb nibble of the data / command to LCD. */
static void lcdLow(uint8_t data)
{/* Low level function. */
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	if(data & LCD_D3_MASK) SET(LCD_D7_OUT, LCD_D7); else CLR(LCD_D7_OUT, LCD_D7);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <lcdLow+0x22>
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <lcdLow+0xa8>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <lcdLow+0xa8>)
 8000e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5e:	6153      	str	r3, [r2, #20]
 8000e60:	e005      	b.n	8000e6e <lcdLow+0x2e>
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <lcdLow+0xa8>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <lcdLow+0xa8>)
 8000e68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e6c:	6153      	str	r3, [r2, #20]
	if(data & LCD_D2_MASK) SET(LCD_D6_OUT, LCD_D6); else CLR(LCD_D6_OUT, LCD_D6);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <lcdLow+0x46>
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <lcdLow+0xa8>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <lcdLow+0xa8>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6153      	str	r3, [r2, #20]
 8000e84:	e005      	b.n	8000e92 <lcdLow+0x52>
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <lcdLow+0xa8>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <lcdLow+0xa8>)
 8000e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e90:	6153      	str	r3, [r2, #20]
	if(data & LCD_D1_MASK) SET(LCD_D5_OUT, LCD_D5); else CLR(LCD_D5_OUT, LCD_D5);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <lcdLow+0x6a>
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <lcdLow+0xa8>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <lcdLow+0xa8>)
 8000ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ea6:	6153      	str	r3, [r2, #20]
 8000ea8:	e005      	b.n	8000eb6 <lcdLow+0x76>
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <lcdLow+0xa8>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <lcdLow+0xa8>)
 8000eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000eb4:	6153      	str	r3, [r2, #20]
	if(data & LCD_D0_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <lcdLow+0x8e>
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <lcdLow+0xa8>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <lcdLow+0xa8>)
 8000ec6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eca:	6153      	str	r3, [r2, #20]
}
 8000ecc:	e005      	b.n	8000eda <lcdLow+0x9a>
	if(data & LCD_D0_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <lcdLow+0xa8>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <lcdLow+0xa8>)
 8000ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ed8:	6153      	str	r3, [r2, #20]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <lcdConfig>:
#endif

/*!	\brief	Initializing by instruction. 4-bit interface initialization. */
static void lcdConfig(uint8_t param)
{/* Low level function. */
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, param, 0);
#else
	/* Send commands to LCD. */
	CLR(LCD_RS_OUT, LCD_RS);
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <lcdConfig+0x4c>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <lcdConfig+0x4c>)
 8000efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f00:	6153      	str	r3, [r2, #20]
#if (USE_BUSY_FLAG)
	/* Write data/commands to LCD. */
	CLR(LCD_RW_OUT, LCD_RW);
#endif /* USE_BUSY_FLAG */

	lcdHigh(param);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff47 	bl	8000d98 <lcdHigh>
	lcdStrobe();		// Change 8-bit interface to 4-bit interface
 8000f0a:	f7ff ff2f 	bl	8000d6c <lcdStrobe>
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f7ff fef4 	bl	8000cfc <lcd10usDelay>
	lcdStrobe();		/* DB7 to DB4 of the "Function set" instruction is written twice. */
 8000f14:	f7ff ff2a 	bl	8000d6c <lcdStrobe>
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000f18:	2005      	movs	r0, #5
 8000f1a:	f7ff feef 	bl	8000cfc <lcd10usDelay>
	lcdLow(param);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff8d 	bl	8000e40 <lcdLow>
	lcdStrobe();		// 4-bit, two lines, 5x8 pixel
 8000f26:	f7ff ff21 	bl	8000d6c <lcdStrobe>
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000f2a:	2005      	movs	r0, #5
 8000f2c:	f7ff fee6 	bl	8000cfc <lcd10usDelay>
	/* Note: The number of display lines and character font cannot be changed after this point. */
#endif
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000

08000f3c <lcdClrScr>:
 * 				and returns the display to its original status if it was shifted.
 * 				In other words, the display disappears and the cursor
 * 				or blinking goes to the left edge of the display (in the first line if 2 lines are displayed).
 * 				It also sets I/D to 1 (increment mode) in entry mode (S of entry mode does not change). */
void lcdClrScr(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, 0x01u, 0);
#else
	CLR(LCD_RS_OUT, LCD_RS);
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <lcdClrScr+0x20>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <lcdClrScr+0x20>)
 8000f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f4a:	6153      	str	r3, [r2, #20]
	/* Clear screen */
	lcdWrite(0x01u);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fef5 	bl	8000d3c <lcdWrite>
	/* Busy delay */
#if (USE_BUSY_FLAG)
	lcd_busy_delay();
#else
	lcd10usDelay(CLRSCR_CYCLE_TIME);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f7ff fed2 	bl	8000cfc <lcd10usDelay>
#endif /* USE_BUSY_FLAG */
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000

08000f60 <lcdReturn>:
 * 				and returns the display to its original status if it was shifted.
 * 				The DDRAM contents do not change.
 * 				The cursor or blinking go to the left edge of the display
 * 				(in the first line if 2 lines are displayed). */
void lcdReturn(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, 0x02u, 0);
#else
	CLR(LCD_RS_OUT, LCD_RS);
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <lcdReturn+0x20>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <lcdReturn+0x20>)
 8000f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f6e:	6153      	str	r3, [r2, #20]
	/* Return home */
	lcdWrite(0x02u);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f7ff fee3 	bl	8000d3c <lcdWrite>
	/* Busy delay */
#if (USE_BUSY_FLAG)
	lcd_busy_delay();
#else
	lcd10usDelay(RETHOME_CYCLE_TIME);
 8000f76:	20c8      	movs	r0, #200	; 0xc8
 8000f78:	f7ff fec0 	bl	8000cfc <lcd10usDelay>
#endif /* USE_BUSY_FLAG */
#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000

08000f84 <cursorShift>:
 * 				without writing or reading display data.
 * 				This function is used to correct or search the display.
 * 				In a 2-line display, the cursor moves to the second line
 * 				when it passes the 40th digit of the first line. */
void cursorShift(uint8_t direction)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
			/* Ignore this command */
			break;
	}

#else
	CLR(LCD_RS_OUT, LCD_RS);
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <cursorShift+0x3c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <cursorShift+0x3c>)
 8000f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f98:	6153      	str	r3, [r2, #20]
	/* Shift cursor */
	switch (direction)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b3c      	cmp	r3, #60	; 0x3c
 8000f9e:	d002      	beq.n	8000fa6 <cursorShift+0x22>
 8000fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8000fa2:	d004      	beq.n	8000fae <cursorShift+0x2a>
			lcdWrite(0x14u);
			break;

		default:
			/* Ignore this command */
			break;
 8000fa4:	e007      	b.n	8000fb6 <cursorShift+0x32>
			lcdWrite(0x10u);
 8000fa6:	2010      	movs	r0, #16
 8000fa8:	f7ff fec8 	bl	8000d3c <lcdWrite>
			break;
 8000fac:	e003      	b.n	8000fb6 <cursorShift+0x32>
			lcdWrite(0x14u);
 8000fae:	2014      	movs	r0, #20
 8000fb0:	f7ff fec4 	bl	8000d3c <lcdWrite>
			break;
 8000fb4:	bf00      	nop
	}
#endif
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <lcdGoto>:

/*!	\details	Go to the specified (DDRAM/CGRAM) memory address.*/
void lcdGoto(uint8_t line, uint8_t address)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
		default:
			/* Ignore this command */
			break;
	}
#else
	CLR(LCD_RS_OUT, LCD_RS);
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <lcdGoto+0x9c>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <lcdGoto+0x9c>)
 8000fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fde:	6153      	str	r3, [r2, #20]
	/* Set DDRAM/CGRAM address. */
	switch (line)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d835      	bhi.n	8001054 <lcdGoto+0x90>
 8000fe8:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <lcdGoto+0x2c>)
 8000fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fee:	bf00      	nop
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08001015 	.word	0x08001015
 8000ff8:	08001025 	.word	0x08001025
 8000ffc:	08001035 	.word	0x08001035
 8001000:	08001045 	.word	0x08001045
	{
		/* Set DDRAM address. */
		case LCD_1st_LINE: lcdWrite(0x80u | START_ADDRESS_1st_LINE | address); break;
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe95 	bl	8000d3c <lcdWrite>
 8001012:	e020      	b.n	8001056 <lcdGoto+0x92>
		case LCD_2nd_LINE: lcdWrite(0x80u | START_ADDRESS_2nd_LINE | address); break;
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fe8d 	bl	8000d3c <lcdWrite>
 8001022:	e018      	b.n	8001056 <lcdGoto+0x92>
		case LCD_3rd_LINE: lcdWrite(0x80u | START_ADDRESS_3rd_LINE | address); break;
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe85 	bl	8000d3c <lcdWrite>
 8001032:	e010      	b.n	8001056 <lcdGoto+0x92>
		case LCD_4th_LINE: lcdWrite(0x80u | START_ADDRESS_4th_LINE | address); break;
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe7d 	bl	8000d3c <lcdWrite>
 8001042:	e008      	b.n	8001056 <lcdGoto+0x92>
		/* Set CGRAM address. */
		case CGRAM : lcdWrite(0x40u | address); break;
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe75 	bl	8000d3c <lcdWrite>
 8001052:	e000      	b.n	8001056 <lcdGoto+0x92>

		default:
			/* Ignore this command */
			break;
 8001054:	bf00      	nop
	}
#endif
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <lcdSetMode>:

/*!	\details	Change LCD settings. */
void lcdSetMode(uint8_t param)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, param, 0);
#else
	CLR(LCD_RS_OUT, LCD_RS);
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <lcdSetMode+0x28>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <lcdSetMode+0x28>)
 8001074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001078:	6153      	str	r3, [r2, #20]
	lcdWrite(param);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe5d 	bl	8000d3c <lcdWrite>
#endif
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <lcdPutc>:

/*!	\details	Write a single char to the current memory space (DDRAM/CGRAM). */
void lcdPutc(uint8_t data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	/* Send data to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, data, PIN_RS);
#else
	SET(LCD_RS_OUT, LCD_RS);
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <lcdPutc+0x2c>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <lcdPutc+0x2c>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	6153      	str	r3, [r2, #20]
	lcdWrite(data);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe47 	bl	8000d3c <lcdWrite>
	/* Note:
	 * After execution of the CGRAM/DDRAM data write/read instruction, the RAM address counter is incremented
	 * or decremented by 1. The RAM address counter is updated after the busy flag turns off.
	 * tADD is the time elapsed after the busy flag turns off until the address counter is updated. */
	lcd10usDelay(AC_UPDATE_TIME);	/* Update RAM address counter delay. */
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff fe24 	bl	8000cfc <lcd10usDelay>
#endif
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000

080010c0 <lcdPuts>:

/*!	\details	Writes ANSI-C string to LCD (DDRAM memory space). */
//void lcdPuts(const uint8_t *str)
void lcdPuts(const char *str)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	/* Send a ANSI-C string to LCD. */
	while ('\0' != *str)
 80010c8:	e028      	b.n	800111c <lcdPuts+0x5c>
	{
#if ( USE_FORMATTED_OUTPUT )
		if(('\n' == *str))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d104      	bne.n	80010dc <lcdPuts+0x1c>
		{/*New line */
			lcdGoto(LCD_2nd_LINE, 0u);
 80010d2:	2100      	movs	r1, #0
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ff75 	bl	8000fc4 <lcdGoto>
 80010da:	e01c      	b.n	8001116 <lcdPuts+0x56>
		}
		else if(('\r' == *str))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b0d      	cmp	r3, #13
 80010e2:	d102      	bne.n	80010ea <lcdPuts+0x2a>
		{/* Return home */
			lcdReturn();
 80010e4:	f7ff ff3c 	bl	8000f60 <lcdReturn>
 80010e8:	e015      	b.n	8001116 <lcdPuts+0x56>
		}
		else if(('\t' == *str))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b09      	cmp	r3, #9
 80010f0:	d10c      	bne.n	800110c <lcdPuts+0x4c>
		{/* Tab space */
			uint8_t i;

			for(i=0u; i<TAB_SPACE; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e005      	b.n	8001104 <lcdPuts+0x44>
			{/* Shift cursor to the right. */
				cursorShift(RIGHT);
 80010f8:	203e      	movs	r0, #62	; 0x3e
 80010fa:	f7ff ff43 	bl	8000f84 <cursorShift>
			for(i=0u; i<TAB_SPACE; i++)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d9f6      	bls.n	80010f8 <lcdPuts+0x38>
 800110a:	e004      	b.n	8001116 <lcdPuts+0x56>
		}
		else
#endif
		{
			/* Display a symbol. */
			lcdPutc(*str);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffbd 	bl	8001090 <lcdPutc>
		}
		/* Get the next symbol. */
		str++;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
	while ('\0' != *str)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1d2      	bne.n	80010ca <lcdPuts+0xa>
	}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <lcdLoadChar>:

/*!	\details	Load the user-defined symbol into the CGRAM memory. */
void lcdLoadChar(uint8_t* vector, uint8_t position)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	/* Go to the CGRAM memory space: 0 to 7 */
	lcdGoto(CGRAM, (position * FONT_HEIGHT));
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	2005      	movs	r0, #5
 8001144:	f7ff ff3e 	bl	8000fc4 <lcdGoto>

	for(i = 0u; i < FONT_HEIGHT; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e009      	b.n	8001162 <lcdLoadChar+0x34>
	{/* Load one row of pixels into the CGRAM register. */
		lcdPutc(vector[i]);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff9a 	bl	8001090 <lcdPutc>
	for(i = 0u; i < FONT_HEIGHT; i++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b07      	cmp	r3, #7
 8001166:	d9f2      	bls.n	800114e <lcdLoadChar+0x20>
	}

	/* Return to the DDRAM memory space. */
	lcdGoto(LCD_1st_LINE, 0u);
 8001168:	2100      	movs	r1, #0
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff ff2a 	bl	8000fc4 <lcdGoto>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <lcdPow10>:
	cursorShift(LEFT);		// ������ ������ �� ���� ������� ����
}

/*!	\brief	Returns 10^n value. */
static uint32_t lcdPow10(uint8_t n)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	uint32_t retval = 1u;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 8001186:	e008      	b.n	800119a <lcdPow10+0x22>
	{
		retval *= 10u;
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
		n--;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	3b01      	subs	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
	while (n > 0u)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f3      	bne.n	8001188 <lcdPow10+0x10>
	}

	return retval;
 80011a0:	68fb      	ldr	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <lcdItos>:

/*!	\brief	Display a integer number: +/- 2147483647. */
void lcdItos(int32_t value)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	int32_t i;

	if (value < 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da05      	bge.n	80011ca <lcdItos+0x1a>
	{
		lcdPutc('-');
 80011be:	202d      	movs	r0, #45	; 0x2d
 80011c0:	f7ff ff66 	bl	8001090 <lcdPutc>
		value = -value;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	425b      	negs	r3, r3
 80011c8:	607b      	str	r3, [r7, #4]
	}

	i = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 80011ce:	e005      	b.n	80011dc <lcdItos+0x2c>
	{
		i *= 10;
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	dcf3      	bgt.n	80011d0 <lcdItos+0x20>
	}

	lcdPutc(value/i + '0');	/* Display at least one symbol */
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	3330      	adds	r3, #48	; 0x30
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff4a 	bl	8001090 <lcdPutc>
	i /= 10;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <lcdItos+0xa8>)
 8001200:	fb82 1203 	smull	r1, r2, r2, r3
 8001204:	1092      	asrs	r2, r2, #2
 8001206:	17db      	asrs	r3, r3, #31
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 800120c:	e01c      	b.n	8001248 <lcdItos+0x98>
	{
		lcdPutc('0' + ((value % (i*10)) / i));
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001220:	fb02 f201 	mul.w	r2, r2, r1
 8001224:	1a9a      	subs	r2, r3, r2
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	fb92 f3f3 	sdiv	r3, r2, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3330      	adds	r3, #48	; 0x30
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff2c 	bl	8001090 <lcdPutc>
		i /= 10;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <lcdItos+0xa8>)
 800123c:	fb82 1203 	smull	r1, r2, r2, r3
 8001240:	1092      	asrs	r2, r2, #2
 8001242:	17db      	asrs	r3, r3, #31
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	dcdf      	bgt.n	800120e <lcdItos+0x5e>
	}
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	66666667 	.word	0x66666667

0800125c <lcdFtos>:

/*!	\brief	Display a floating point number. */
void lcdFtos(float value, uint8_t n)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	ed87 0a01 	vstr	s0, [r7, #4]
 8001266:	4603      	mov	r3, r0
 8001268:	70fb      	strb	r3, [r7, #3]
	if (value < 0.0)
 800126a:	edd7 7a01 	vldr	s15, [r7, #4]
 800126e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d508      	bpl.n	800128a <lcdFtos+0x2e>
	{
		lcdPutc('-');
 8001278:	202d      	movs	r0, #45	; 0x2d
 800127a:	f7ff ff09 	bl	8001090 <lcdPutc>
		value = -value;
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	eef1 7a67 	vneg.f32	s15, s15
 8001286:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	lcdItos((int32_t)value); // ���� ���� �������
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	ee17 0a90 	vmov	r0, s15
 8001296:	f7ff ff8b 	bl	80011b0 <lcdItos>

	if (n > 0u)
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d016      	beq.n	80012ce <lcdFtos+0x72>
	{
		lcdPutc('.'); // ������
 80012a0:	202e      	movs	r0, #46	; 0x2e
 80012a2:	f7ff fef5 	bl	8001090 <lcdPutc>

		lcdNtos((uint32_t)(value * (float)lcdPow10(n)), n); // ���� ������� �������
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff65 	bl	8001178 <lcdPow10>
 80012ae:	ee07 0a90 	vmov	s15, r0
 80012b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	4619      	mov	r1, r3
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f000 f805 	bl	80012d8 <lcdNtos>
	}
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <lcdNtos>:

/*!	\brief	Display "n" right digits of "value". */
void lcdNtos(uint32_t value, uint8_t n)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	if (n > 0u)
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d023      	beq.n	8001332 <lcdNtos+0x5a>
	{
		uint32_t i = lcdPow10(n - 1u);
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff41 	bl	8001178 <lcdPow10>
 80012f6:	60f8      	str	r0, [r7, #12]

		while (i > 0u)	/* Display at least one symbol */
 80012f8:	e018      	b.n	800132c <lcdNtos+0x54>
		{
			lcdPutc('0' + ((value/i) % 10u));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <lcdNtos+0x64>)
 8001304:	fba3 2301 	umull	r2, r3, r3, r1
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	1aca      	subs	r2, r1, r3
 8001314:	b2d3      	uxtb	r3, r2
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff feb8 	bl	8001090 <lcdPutc>

			i /= 10u;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <lcdNtos+0x64>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	60fb      	str	r3, [r7, #12]
		while (i > 0u)	/* Display at least one symbol */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e3      	bne.n	80012fa <lcdNtos+0x22>
		}
	}
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	cccccccd 	.word	0xcccccccd

08001340 <lcdInitBar>:

#if ( USE_PROGRESS_BAR )
/*!	\brief	Initialize the progress bar
 * 			(i.e. preload elements of the progress bar into CGRAM and reset all variables). */
static void lcdInitBar(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for (i = 0u; i < CGROM_PROGRESS_BAR_SIZE; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	e01f      	b.n	800138c <lcdInitBar+0x4c>
	{
		lcdGoto(CGRAM, (i * FONT_HEIGHT));
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	2005      	movs	r0, #5
 8001356:	f7ff fe35 	bl	8000fc4 <lcdGoto>

		for (j = 0u; j < FONT_HEIGHT; j++)
 800135a:	2300      	movs	r3, #0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	e00f      	b.n	8001380 <lcdInitBar+0x40>
		{
			if (j < PROGRESS_BAR_HEIGHT)
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b04      	cmp	r3, #4
 8001364:	d806      	bhi.n	8001374 <lcdInitBar+0x34>
			{
				lcdPutc(progress_bar[i]);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <lcdInitBar+0x60>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe8f 	bl	8001090 <lcdPutc>
 8001372:	e002      	b.n	800137a <lcdInitBar+0x3a>
			}
			else
			{/* Load an empty row of pixels in CGRAM. */
				lcdPutc(EMPTY_ROW);
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fe8b 	bl	8001090 <lcdPutc>
		for (j = 0u; j < FONT_HEIGHT; j++)
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	3301      	adds	r3, #1
 800137e:	71bb      	strb	r3, [r7, #6]
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	2b07      	cmp	r3, #7
 8001384:	d9ec      	bls.n	8001360 <lcdInitBar+0x20>
	for (i = 0u; i < CGROM_PROGRESS_BAR_SIZE; i++)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	3301      	adds	r3, #1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d9dc      	bls.n	800134c <lcdInitBar+0xc>
			}
		}
	}

	/* Clear the entire bar and initialize all variables. */
	lcdClrBar();
 8001392:	f000 f807 	bl	80013a4 <lcdClrBar>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08004d08 	.word	0x08004d08

080013a4 <lcdClrBar>:
	lcdGoto(LCD_1st_LINE, 0u);
}

/*!	\brief	Clear the entire progress bar. */
void lcdClrBar(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* Go to the last cell in the progress bar. */
	lcdGoto(PROGRESS_BAR_LINE, (PROGRESS_BAR_WIDTH - 1u));
 80013aa:	2109      	movs	r1, #9
 80013ac:	2002      	movs	r0, #2
 80013ae:	f7ff fe09 	bl	8000fc4 <lcdGoto>
	/* Set the decrement mode. */
	lcdSetMode(ENTRY_MODE_DEC_NO_SHIFT);
 80013b2:	2004      	movs	r0, #4
 80013b4:	f7ff fe56 	bl	8001064 <lcdSetMode>

	for(i = 0u; i < PROGRESS_BAR_WIDTH; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	e005      	b.n	80013ca <lcdClrBar+0x26>
	{/* Display the "empty cell" symbol (i.e. clear the LCD cell). */
		lcdPutc(EMPTY_LOAD);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fe66 	bl	8001090 <lcdPutc>
	for(i = 0u; i < PROGRESS_BAR_WIDTH; i++)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	3301      	adds	r3, #1
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d9f6      	bls.n	80013be <lcdClrBar+0x1a>
	}

	/* Reset the progress bar variables. */
	current_bar_pixel = 0u;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <lcdClrBar+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	current_cell_load = EMPTY_LOAD;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <lcdClrBar+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]

	/* Restore the default entry mode. */
	lcdSetMode(DEFAULT_ENTRY_MODE);
 80013dc:	2006      	movs	r0, #6
 80013de:	f7ff fe41 	bl	8001064 <lcdSetMode>
	/* Return home. */
	lcdGoto(LCD_1st_LINE, 0u);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fded 	bl	8000fc4 <lcdGoto>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000034 	.word	0x20000034
 80013f8:	20000035 	.word	0x20000035

080013fc <lcdInit>:
#endif

/*!	\brief	Initialize the LCD.
 * 	\note	This library use the 4-bit interface. */
void lcdInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
#ifndef USE_I2C_BUS
	/* GPIO initialization. */
	setAllPinsAsOutputs();
 8001400:	f000 f81f 	bl	8001442 <lcdGpioInit>
	/* LCD initialization. */
	lcdWrite(0x30);
 8001404:	2030      	movs	r0, #48	; 0x30
 8001406:	f7ff fc99 	bl	8000d3c <lcdWrite>
	lcd10usDelay(INIT_CYCLE_TIME);
 800140a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800140e:	f7ff fc75 	bl	8000cfc <lcd10usDelay>
	lcdWrite(0x30);
 8001412:	2030      	movs	r0, #48	; 0x30
 8001414:	f7ff fc92 	bl	8000d3c <lcdWrite>
	lcd10usDelay(INIT_CYCLE_TIME);
 8001418:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800141c:	f7ff fc6e 	bl	8000cfc <lcd10usDelay>
	HAL_Delay(1);
	lcdConfig(0x02);
	HAL_Delay(1);
#endif
#endif
	lcdConfig(DEFAULT_DISPLAY_CONFIG);
 8001420:	2028      	movs	r0, #40	; 0x28
 8001422:	f7ff fd63 	bl	8000eec <lcdConfig>
	lcdSetMode(DEFAULT_VIEW_MODE);
 8001426:	200c      	movs	r0, #12
 8001428:	f7ff fe1c 	bl	8001064 <lcdSetMode>
	lcdSetMode(DEFAULT_ENTRY_MODE);
 800142c:	2006      	movs	r0, #6
 800142e:	f7ff fe19 	bl	8001064 <lcdSetMode>
	lcdClrScr();
 8001432:	f7ff fd83 	bl	8000f3c <lcdClrScr>
	lcdReturn();
 8001436:	f7ff fd93 	bl	8000f60 <lcdReturn>
	#if (USE_PROGRESS_BAR)
		lcdInitBar();
 800143a:	f7ff ff81 	bl	8001340 <lcdInitBar>
	#endif
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <lcdGpioInit>:
	current_status_backlight = (0 << 3);
	sendInternal(LCD_I2C_ADDRESS_8B, 0x0Fu, 0);
}
#else
void lcdGpioInit(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  	 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
	 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_ADC_ConvCpltCallback+0x28>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d106      	bne.n	8001470 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	/* Get the value from the potentiometer */
        adcPOT = HAL_ADC_GetValue(&hadc1);
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001464:	f001 f93d 	bl	80026e2 <HAL_ADC_GetValue>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_ADC_ConvCpltCallback+0x30>)
 800146e:	801a      	strh	r2, [r3, #0]
    }
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012000 	.word	0x40012000
 800147c:	200000d0 	.word	0x200000d0
 8001480:	20000038 	.word	0x20000038

08001484 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if (flag_emerency) {
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x24>
		if (htim->Instance==TIM3) //check if the interrupt comes from TIM1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d104      	bne.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x24>
			HAL_GPIO_TogglePin(GPIOD, ledRED_Pin); //Toggle the state of pin
 800149e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014a4:	f002 f911 	bl	80036ca <HAL_GPIO_TogglePin>
	}
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000036 	.word	0x20000036
 80014b4:	40000400 	.word	0x40000400
 80014b8:	40020c00 	.word	0x40020c00

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fd8c 	bl	8001fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f8ac 	bl	8001620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 fa58 	bl	800197c <MX_GPIO_Init>
  MX_TIM3_Init();
 80014cc:	f000 f98c 	bl	80017e8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80014d0:	f000 f902 	bl	80016d8 <MX_ADC1_Init>
  MX_TIM4_Init();
 80014d4:	f000 f9e2 	bl	800189c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80014d8:	4847      	ldr	r0, [pc, #284]	; (80015f8 <main+0x13c>)
 80014da:	f002 fd51 	bl	8003f80 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80014de:	4847      	ldr	r0, [pc, #284]	; (80015fc <main+0x140>)
 80014e0:	f000 fee0 	bl	80022a4 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	4846      	ldr	r0, [pc, #280]	; (8001600 <main+0x144>)
 80014e8:	f002 fe0a 	bl	8004100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014ec:	2104      	movs	r1, #4
 80014ee:	4844      	ldr	r0, [pc, #272]	; (8001600 <main+0x144>)
 80014f0:	f002 fe06 	bl	8004100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014f4:	210c      	movs	r1, #12
 80014f6:	4842      	ldr	r0, [pc, #264]	; (8001600 <main+0x144>)
 80014f8:	f002 fe02 	bl	8004100 <HAL_TIM_PWM_Start>
  //Initialization of the LCD display
  lcdInit();
 80014fc:	f7ff ff7e 	bl	80013fc <lcdInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* ADC, temp sensors and indication */
		  // Read the analog value from the internal and external temperature sensor
		  HAL_ADCEx_InjectedStart(&hadc1);
 8001500:	483e      	ldr	r0, [pc, #248]	; (80015fc <main+0x140>)
 8001502:	f001 fb2d 	bl	8002b60 <HAL_ADCEx_InjectedStart>
		  HAL_ADC_PollForConversion(&hadc1,100);
 8001506:	2164      	movs	r1, #100	; 0x64
 8001508:	483c      	ldr	r0, [pc, #240]	; (80015fc <main+0x140>)
 800150a:	f000 fe40 	bl	800218e <HAL_ADC_PollForConversion>
		  adcCPU = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800150e:	2101      	movs	r1, #1
 8001510:	483a      	ldr	r0, [pc, #232]	; (80015fc <main+0x140>)
 8001512:	f001 fc3b 	bl	8002d8c <HAL_ADCEx_InjectedGetValue>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <main+0x148>)
 800151c:	801a      	strh	r2, [r3, #0]
		  adcEXT = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800151e:	2102      	movs	r1, #2
 8001520:	4836      	ldr	r0, [pc, #216]	; (80015fc <main+0x140>)
 8001522:	f001 fc33 	bl	8002d8c <HAL_ADCEx_InjectedGetValue>
 8001526:	4603      	mov	r3, r0
 8001528:	4a37      	ldr	r2, [pc, #220]	; (8001608 <main+0x14c>)
 800152a:	6013      	str	r3, [r2, #0]
		  HAL_ADCEx_InjectedStop(&hadc1);
 800152c:	4833      	ldr	r0, [pc, #204]	; (80015fc <main+0x140>)
 800152e:	f001 fbe1 	bl	8002cf4 <HAL_ADCEx_InjectedStop>

		  // Set the calculated PWM value
		  ledORANGE_Tim = calcCPU(adcCPU);
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <main+0x148>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 faf8 	bl	8001b2c <calcCPU>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <main+0x150>)
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
		  // Max values ​​for PWM and max values ​​from ADC are equal.
		  // (No need to recalculate)
		  ledBLUE_Tim = adcPOT;
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <main+0x154>)
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <main+0x150>)
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
		  // Initially, the values of adc from lm335 are obtained with inversion.
		  // This must be corrected to set the PWM value.
		  ledGREEN_Tim = 4095 - adcEXT;
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <main+0x14c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2e      	ldr	r2, [pc, #184]	; (800160c <main+0x150>)
 8001552:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001556:	330f      	adds	r3, #15
 8001558:	6353      	str	r3, [r2, #52]	; 0x34

		  // Calculating the value of temperature in degrees Celsius.
		  tempEXT = calcTempEXT(adcEXT);
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <main+0x14c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fb0d 	bl	8001b80 <calcTempEXT>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
 800156a:	eef0 7a60 	vmov.f32	s15, s1
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <main+0x158>)
 8001570:	ed83 7b00 	vstr	d7, [r3]

	  /* Indication of an emergency situation */
		  if (calcCPU(adcCPU) > 3000)
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <main+0x148>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fad7 	bl	8001b2c <calcCPU>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001586:	429a      	cmp	r2, r3
 8001588:	d907      	bls.n	800159a <main+0xde>
		  {
			  flag_emerency = 1;
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <main+0x15c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
			  setTimARR(400-1);  // Period to 5Hz blinking
 8001590:	f240 108f 	movw	r0, #399	; 0x18f
 8001594:	f000 fb36 	bl	8001c04 <setTimARR>
 8001598:	e023      	b.n	80015e2 <main+0x126>
		  }
		  else if (adcEXT < 1800)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <main+0x14c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80015a2:	d207      	bcs.n	80015b4 <main+0xf8>
		  {
			  flag_emerency = 1;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <main+0x15c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
			  setTimARR(800-1);  // Period to 2.5Hz blinking
 80015aa:	f240 301f 	movw	r0, #799	; 0x31f
 80015ae:	f000 fb29 	bl	8001c04 <setTimARR>
 80015b2:	e016      	b.n	80015e2 <main+0x126>
		  }
		  else if (adcPOT > 3500)
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <main+0x154>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	f640 52ac 	movw	r2, #3500	; 0xdac
 80015bc:	4293      	cmp	r3, r2
 80015be:	d907      	bls.n	80015d0 <main+0x114>
		  {
			  flag_emerency = 1;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <main+0x15c>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
			  setTimARR(2000-1);  // Period to 1Hz blinking
 80015c6:	f240 70cf 	movw	r0, #1999	; 0x7cf
 80015ca:	f000 fb1b 	bl	8001c04 <setTimARR>
 80015ce:	e008      	b.n	80015e2 <main+0x126>
		  }
		  else
		  {
			  flag_emerency = 0;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <main+0x15c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD, ledRED_Pin, 0); // Turn off red led
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015dc:	480f      	ldr	r0, [pc, #60]	; (800161c <main+0x160>)
 80015de:	f002 f85b 	bl	8003698 <HAL_GPIO_WritePin>
		  }

	 /* Print values on the display. */
	   printTempLCD();
 80015e2:	f000 fa5f 	bl	8001aa4 <printTempLCD>

	   HAL_Delay(300);
 80015e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ea:	f000 fd69 	bl	80020c0 <HAL_Delay>
	   // Reactivation of the analog reading function.
	   HAL_ADC_Start_IT(&hadc1);
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <main+0x140>)
 80015f0:	f000 fe58 	bl	80022a4 <HAL_ADC_Start_IT>
		  HAL_ADCEx_InjectedStart(&hadc1);
 80015f4:	e784      	b.n	8001500 <main+0x44>
 80015f6:	bf00      	nop
 80015f8:	20000088 	.word	0x20000088
 80015fc:	200000d0 	.word	0x200000d0
 8001600:	20000040 	.word	0x20000040
 8001604:	2000003a 	.word	0x2000003a
 8001608:	2000003c 	.word	0x2000003c
 800160c:	40000800 	.word	0x40000800
 8001610:	20000038 	.word	0x20000038
 8001614:	20000118 	.word	0x20000118
 8001618:	20000036 	.word	0x20000036
 800161c:	40020c00 	.word	0x40020c00

08001620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b094      	sub	sp, #80	; 0x50
 8001624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	2230      	movs	r2, #48	; 0x30
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fb4a 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <SystemClock_Config+0xb0>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <SystemClock_Config+0xb0>)
 800164e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	; 0x40
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <SystemClock_Config+0xb0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <SystemClock_Config+0xb4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <SystemClock_Config+0xb4>)
 800166a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <SystemClock_Config+0xb4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800167c:	2301      	movs	r3, #1
 800167e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	4618      	mov	r0, r3
 8001690:	f002 f836 	bl	8003700 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800169a:	f000 facb 	bl	8001c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	230f      	movs	r3, #15
 80016a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fa99 	bl	8003bf0 <HAL_RCC_ClockConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80016c4:	f000 fab6 	bl	8001c34 <Error_Handler>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3750      	adds	r7, #80	; 0x50
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000

080016d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2220      	movs	r2, #32
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fae8 	bl	8004cc8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <MX_ADC1_Init+0x100>)
 80016fa:	4a38      	ldr	r2, [pc, #224]	; (80017dc <MX_ADC1_Init+0x104>)
 80016fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <MX_ADC1_Init+0x100>)
 800170c:	2201      	movs	r2, #1
 800170e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001710:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001712:	2200      	movs	r2, #0
 8001714:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001720:	2200      	movs	r2, #0
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001726:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <MX_ADC1_Init+0x108>)
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_ADC1_Init+0x100>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001732:	2201      	movs	r2, #1
 8001734:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001740:	2201      	movs	r2, #1
 8001742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001744:	4824      	ldr	r0, [pc, #144]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001746:	f000 fcdf 	bl	8002108 <HAL_ADC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001750:	f000 fa70 	bl	8001c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4619      	mov	r1, r3
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <MX_ADC1_Init+0x100>)
 8001768:	f000 ffdc 	bl	8002724 <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001772:	f000 fa5f 	bl	8001c34 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 8001776:	2310      	movs	r3, #16
 8001778:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800177e:	2302      	movs	r3, #2
 8001780:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001782:	2302      	movs	r3, #2
 8001784:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_ADC1_Init+0x10c>)
 800178c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	480e      	ldr	r0, [pc, #56]	; (80017d8 <MX_ADC1_Init+0x100>)
 80017a0:	f001 fb36 	bl	8002e10 <HAL_ADCEx_InjectedConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80017aa:	f000 fa43 	bl	8001c34 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 80017ae:	2309      	movs	r3, #9
 80017b0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017b6:	2307      	movs	r3, #7
 80017b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_ADC1_Init+0x100>)
 80017c0:	f001 fb26 	bl	8002e10 <HAL_ADCEx_InjectedConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80017ca:	f000 fa33 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000d0 	.word	0x200000d0
 80017dc:	40012000 	.word	0x40012000
 80017e0:	0f000001 	.word	0x0f000001
 80017e4:	000f0001 	.word	0x000f0001

080017e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_TIM3_Init+0xac>)
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <MX_TIM3_Init+0xb0>)
 800180e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <MX_TIM3_Init+0xac>)
 8001812:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_TIM3_Init+0xac>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_TIM3_Init+0xac>)
 8001820:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_TIM3_Init+0xac>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_TIM3_Init+0xac>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <MX_TIM3_Init+0xac>)
 8001834:	f002 fc14 	bl	8004060 <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800183e:	f000 f9f9 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	4619      	mov	r1, r3
 8001850:	4810      	ldr	r0, [pc, #64]	; (8001894 <MX_TIM3_Init+0xac>)
 8001852:	f003 f985 	bl	8004b60 <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800185c:	f000 f9ea 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	; 0x60
 8001862:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <MX_TIM3_Init+0xac>)
 8001878:	f002 fe12 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001882:	f000 f9d7 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <MX_TIM3_Init+0xac>)
 8001888:	f000 fab0 	bl	8001dec <HAL_TIM_MspPostInit>

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000088 	.word	0x20000088
 8001898:	40000400 	.word	0x40000400

0800189c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018c0:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <MX_TIM4_Init+0xdc>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096-1;
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <MX_TIM4_Init+0xd8>)
 80018e6:	f002 fbbb 	bl	8004060 <HAL_TIM_PWM_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80018f0:	f000 f9a0 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4619      	mov	r1, r3
 8001902:	481c      	ldr	r0, [pc, #112]	; (8001974 <MX_TIM4_Init+0xd8>)
 8001904:	f003 f92c 	bl	8004b60 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800190e:	f000 f991 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001912:	2360      	movs	r3, #96	; 0x60
 8001914:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	4812      	ldr	r0, [pc, #72]	; (8001974 <MX_TIM4_Init+0xd8>)
 800192a:	f002 fdb9 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001934:	f000 f97e 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2204      	movs	r2, #4
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_TIM4_Init+0xd8>)
 8001940:	f002 fdae 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800194a:	f000 f973 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	220c      	movs	r2, #12
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM4_Init+0xd8>)
 8001956:	f002 fda3 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001960:	f000 f968 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM4_Init+0xd8>)
 8001966:	f000 fa41 	bl	8001dec <HAL_TIM_MspPostInit>

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000040 	.word	0x20000040
 8001978:	40000800 	.word	0x40000800

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	; 0x30
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <MX_GPIO_Init+0x11c>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a2a      	ldr	r2, [pc, #168]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <MX_GPIO_Init+0x11c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_GPIO_Init+0x11c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D4_Pin
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8001a40:	4816      	ldr	r0, [pc, #88]	; (8001a9c <MX_GPIO_Init+0x120>)
 8001a42:	f001 fe29 	bl	8003698 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ledRED_GPIO_Port, ledRED_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4c:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <MX_GPIO_Init+0x124>)
 8001a4e:	f001 fe23 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_E_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D4_Pin
 8001a52:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8001a56:	61fb      	str	r3, [r7, #28]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <MX_GPIO_Init+0x120>)
 8001a6c:	f001 fc78 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ledRED_Pin */
  GPIO_InitStruct.Pin = ledRED_Pin;
 8001a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ledRED_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_GPIO_Init+0x124>)
 8001a8a:	f001 fc69 	bl	8003360 <HAL_GPIO_Init>

}
 8001a8e:	bf00      	nop
 8001a90:	3730      	adds	r7, #48	; 0x30
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40020c00 	.word	0x40020c00

08001aa4 <printTempLCD>:

/* USER CODE BEGIN 4 */

void printTempLCD()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	/* Function for displaying values. */
   lcdClrScr();	// Clear the display
 8001aa8:	f7ff fa48 	bl	8000f3c <lcdClrScr>

   lcdLoadChar(symbDegree,6); // Load the degree symbol into memory
 8001aac:	2106      	movs	r1, #6
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <printTempLCD+0x6c>)
 8001ab0:	f7ff fb3d 	bl	800112e <lcdLoadChar>

   lcdGoto(LCD_1st_LINE,0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff fa84 	bl	8000fc4 <lcdGoto>
   lcdPuts("adcPOT:");
 8001abc:	4815      	ldr	r0, [pc, #84]	; (8001b14 <printTempLCD+0x70>)
 8001abe:	f7ff faff 	bl	80010c0 <lcdPuts>
   lcdItos(adcPOT);
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <printTempLCD+0x74>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fb72 	bl	80011b0 <lcdItos>

   lcdGoto(LCD_1st_LINE,0);
 8001acc:	2100      	movs	r1, #0
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff fa78 	bl	8000fc4 <lcdGoto>
   lcdPuts("\naI:");
 8001ad4:	4811      	ldr	r0, [pc, #68]	; (8001b1c <printTempLCD+0x78>)
 8001ad6:	f7ff faf3 	bl	80010c0 <lcdPuts>
   lcdItos(adcCPU);
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <printTempLCD+0x7c>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fb66 	bl	80011b0 <lcdItos>

   lcdPuts(" tE:");
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <printTempLCD+0x80>)
 8001ae6:	f7ff faeb 	bl	80010c0 <lcdPuts>
   lcdFtos((float)tempEXT,1); // 1 decimal place
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <printTempLCD+0x84>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7fe ff36 	bl	8000964 <__aeabi_d2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2001      	movs	r0, #1
 8001afc:	ee00 3a10 	vmov	s0, r3
 8001b00:	f7ff fbac 	bl	800125c <lcdFtos>
   lcdPutc(6); // Print the degree symbol
 8001b04:	2006      	movs	r0, #6
 8001b06:	f7ff fac3 	bl	8001090 <lcdPutc>

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000
 8001b14:	08004cf0 	.word	0x08004cf0
 8001b18:	20000038 	.word	0x20000038
 8001b1c:	08004cf8 	.word	0x08004cf8
 8001b20:	2000003a 	.word	0x2000003a
 8001b24:	08004d00 	.word	0x08004d00
 8001b28:	20000118 	.word	0x20000118

08001b2c <calcCPU>:

uint16_t calcCPU(uint16_t inputADC_CPU)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
	 * were selected.
	 * The initial value of the ADC = 1035, while the normal values from
	 * the temperature sensor (at a room temperature of 25 degrees) = 1040.
	 * Accordingly, the step of increasing the PWM signal = 54.
	 * */
	uint16_t outputPWM = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	81fb      	strh	r3, [r7, #14]
	if (inputADC_CPU > 1035)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f240 420b 	movw	r2, #1035	; 0x40b
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d90e      	bls.n	8001b62 <calcCPU+0x36>
		outputPWM = (inputADC_CPU - 1035) * 54;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	461a      	mov	r2, r3
 8001b48:	0052      	lsls	r2, r2, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	00d1      	lsls	r1, r2, #3
 8001b50:	461a      	mov	r2, r3
 8001b52:	460b      	mov	r3, r1
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8001b5e:	332e      	adds	r3, #46	; 0x2e
 8001b60:	81fb      	strh	r3, [r7, #14]
	if (inputADC_CPU > 1110)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f240 4256 	movw	r2, #1110	; 0x456
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d902      	bls.n	8001b72 <calcCPU+0x46>
		outputPWM = 4095;
 8001b6c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b70:	81fb      	strh	r3, [r7, #14]
	return outputPWM;
 8001b72:	89fb      	ldrh	r3, [r7, #14]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <calcTempEXT>:
double calcTempEXT(uint16_t inputADC_EXT)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
	 *  => 1*C = 0.02v
	 * voltage = inputADC_EXT*2.98/4096;
	 * where 2.98 is voltage on the sensor;
	 * temp*C = (Vo - voltage) / 0.02
	 */
	return (2.02 - (inputADC_EXT*2.98/(double)4096)) / 0.02;
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc6d 	bl	800046c <__aeabi_i2d>
 8001b92:	a31a      	add	r3, pc, #104	; (adr r3, 8001bfc <calcTempEXT+0x7c>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fcd2 	bl	8000540 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <calcTempEXT+0x78>)
 8001baa:	f7fe fdf3 	bl	8000794 <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	a10d      	add	r1, pc, #52	; (adr r1, 8001be8 <calcTempEXT+0x68>)
 8001bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bb8:	f7fe fb0a 	bl	80001d0 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	a30a      	add	r3, pc, #40	; (adr r3, 8001bf0 <calcTempEXT+0x70>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fde3 	bl	8000794 <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bda:	eef0 0a67 	vmov.f32	s1, s15
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	f3af 8000 	nop.w
 8001be8:	c28f5c29 	.word	0xc28f5c29
 8001bec:	400028f5 	.word	0x400028f5
 8001bf0:	47ae147b 	.word	0x47ae147b
 8001bf4:	3f947ae1 	.word	0x3f947ae1
 8001bf8:	40b00000 	.word	0x40b00000
 8001bfc:	3d70a3d7 	.word	0x3d70a3d7
 8001c00:	4007d70a 	.word	0x4007d70a

08001c04 <setTimARR>:

void setTimARR(uint16_t valPeriod)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
	if (TIM3->ARR != valPeriod)
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <setTimARR+0x2c>)
 8001c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d005      	beq.n	8001c24 <setTimARR+0x20>
	{
		TIM3->ARR = valPeriod;  // Set period
 8001c18:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <setTimARR+0x2c>)
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->EGR = TIM_EGR_UG; // Reload the register
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <setTimARR+0x2c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	615a      	str	r2, [r3, #20]
	}
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40000400 	.word	0x40000400

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <Error_Handler+0x8>
	...

08001c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <HAL_ADC_MspInit+0xc0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d149      	bne.n	8001d46 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_ADC_MspInit+0xc4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001d06:	230a      	movs	r3, #10
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <HAL_ADC_MspInit+0xc8>)
 8001d1a:	f001 fb21 	bl	8003360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d22:	2303      	movs	r3, #3
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <HAL_ADC_MspInit+0xcc>)
 8001d32:	f001 fb15 	bl	8003360 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2012      	movs	r0, #18
 8001d3c:	f001 fad9 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d40:	2012      	movs	r0, #18
 8001d42:	f001 faf2 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40012000 	.word	0x40012000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400

08001d60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_TIM_PWM_MspInit+0x80>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d116      	bne.n	8001da0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_TIM_PWM_MspInit+0x84>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_TIM_PWM_MspInit+0x84>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_TIM_PWM_MspInit+0x84>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	201d      	movs	r0, #29
 8001d94:	f001 faad 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d98:	201d      	movs	r0, #29
 8001d9a:	f001 fac6 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d9e:	e01a      	b.n	8001dd6 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM4)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_TIM_PWM_MspInit+0x88>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d115      	bne.n	8001dd6 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_TIM_PWM_MspInit+0x84>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HAL_TIM_PWM_MspInit+0x84>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_TIM_PWM_MspInit+0x84>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201e      	movs	r0, #30
 8001dcc:	f001 fa91 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dd0:	201e      	movs	r0, #30
 8001dd2:	f001 faaa 	bl	800332a <HAL_NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40000800 	.word	0x40000800

08001dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_TIM_MspPostInit+0xd4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11e      	bne.n	8001e4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_TIM_MspPostInit+0xd8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <HAL_TIM_MspPostInit+0xd8>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_TIM_MspPostInit+0xd8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e2a:	2340      	movs	r3, #64	; 0x40
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4820      	ldr	r0, [pc, #128]	; (8001ec8 <HAL_TIM_MspPostInit+0xdc>)
 8001e46:	f001 fa8b 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e4a:	e034      	b.n	8001eb6 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_TIM_MspPostInit+0xe0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12f      	bne.n	8001eb6 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_TIM_MspPostInit+0xd8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_TIM_MspPostInit+0xd8>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_TIM_MspPostInit+0xd8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ledGREEN_Pin;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e84:	2302      	movs	r3, #2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ledGREEN_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <HAL_TIM_MspPostInit+0xe4>)
 8001e90:	f001 fa66 	bl	8003360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ledOrange_Pin|ledBLUE_Pin;
 8001e94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <HAL_TIM_MspPostInit+0xe4>)
 8001eb2:	f001 fa55 	bl	8003360 <HAL_GPIO_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40020c00 	.word	0x40020c00

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 f8ae 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <ADC_IRQHandler+0x10>)
 8001f2e:	f000 fa97 	bl	8002460 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200000d0 	.word	0x200000d0

08001f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM3_IRQHandler+0x10>)
 8001f42:	f002 f9a5 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000088 	.word	0x20000088

08001f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM4_IRQHandler+0x10>)
 8001f56:	f002 f99b 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000040 	.word	0x20000040

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fb2:	f7ff ffd7 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f002 fe63 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fba:	f7ff fa7f 	bl	80014bc <main>
  bx  lr    
 8001fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001fcc:	08004d30 	.word	0x08004d30
  ldr r2, =_sbss
 8001fd0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001fd4:	20000124 	.word	0x20000124

08001fd8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <CAN1_RX0_IRQHandler>
	...

08001fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <HAL_Init+0x40>)
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_Init+0x40>)
 8001ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_Init+0x40>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f001 f969 	bl	80032dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200a:	200f      	movs	r0, #15
 800200c:	f000 f808 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002010:	f7ff fe16 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f001 f981 	bl	8003346 <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205c:	f001 f949 	bl	80032f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000008 	.word	0x20000008
 8002078:	20000010 	.word	0x20000010
 800207c:	2000000c 	.word	0x2000000c

08002080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010
 80020a4:	20000120 	.word	0x20000120

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000120 	.word	0x20000120

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff ffee 	bl	80020a8 <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_Delay+0x44>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d8f7      	bhi.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010

08002108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e033      	b.n	8002186 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fdb2 	bl	8001c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800214e:	f023 0302 	bic.w	r3, r3, #2
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fc04 	bl	8002968 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
 8002176:	e001      	b.n	800217c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021aa:	d113      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e063      	b.n	800229c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021d4:	f7ff ff68 	bl	80020a8 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021da:	e021      	b.n	8002220 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e2:	d01d      	beq.n	8002220 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_ADC_PollForConversion+0x6c>
 80021ea:	f7ff ff5d 	bl	80020a8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d212      	bcs.n	8002220 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d00b      	beq.n	8002220 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03d      	b.n	800229c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d1d6      	bne.n	80021dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f06f 0212 	mvn.w	r2, #18
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d123      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11f      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	d111      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_Start_IT+0x1a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0bd      	b.n	800243a <HAL_ADC_Start_IT+0x196>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d018      	beq.n	8002306 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_ADC_Start_IT+0x1a4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_ADC_Start_IT+0x1a8>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9a      	lsrs	r2, r3, #18
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 8085 	bne.w	8002420 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002340:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002354:	d106      	bne.n	8002364 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f023 0206 	bic.w	r2, r3, #6
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
 8002362:	e002      	b.n	800236a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002372:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_ADC_Start_IT+0x1ac>)
 8002374:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800237e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2b00      	cmp	r3, #0
 800239e:	d12a      	bne.n	80023f6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <HAL_ADC_Start_IT+0x1b0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d015      	beq.n	80023d6 <HAL_ADC_Start_IT+0x132>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <HAL_ADC_Start_IT+0x1b4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d105      	bne.n	80023c0 <HAL_ADC_Start_IT+0x11c>
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_ADC_Start_IT+0x1ac>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_ADC_Start_IT+0x1b8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d136      	bne.n	8002438 <HAL_ADC_Start_IT+0x194>
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_ADC_Start_IT+0x1ac>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d130      	bne.n	8002438 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d129      	bne.n	8002438 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	e020      	b.n	8002438 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_ADC_Start_IT+0x1b0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d11b      	bne.n	8002438 <HAL_ADC_Start_IT+0x194>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d114      	bne.n	8002438 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	e00b      	b.n	8002438 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008
 800244c:	431bde83 	.word	0x431bde83
 8002450:	40012300 	.word	0x40012300
 8002454:	40012000 	.word	0x40012000
 8002458:	40012100 	.word	0x40012100
 800245c:	40012200 	.word	0x40012200

08002460 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d049      	beq.n	8002536 <HAL_ADC_IRQHandler+0xd6>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d046      	beq.n	8002536 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d12b      	bne.n	8002526 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d127      	bne.n	8002526 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d119      	bne.n	8002526 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0220 	bic.w	r2, r2, #32
 8002500:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe ff92 	bl	8001450 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0212 	mvn.w	r2, #18
 8002534:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	2b80      	cmp	r3, #128	; 0x80
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d057      	beq.n	8002618 <HAL_ADC_IRQHandler+0x1b8>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d054      	beq.n	8002618 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d139      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d12b      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d124      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d11d      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d119      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fbf7 	bl	8002dfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f06f 020c 	mvn.w	r2, #12
 8002616:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d017      	beq.n	800267a <HAL_ADC_IRQHandler+0x21a>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d10d      	bne.n	800267a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f846 	bl	80026fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0201 	mvn.w	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b20      	cmp	r3, #32
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800269a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d015      	beq.n	80026da <HAL_ADC_IRQHandler+0x27a>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0202 	orr.w	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0220 	mvn.w	r2, #32
 80026c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f820 	bl	8002710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0220 	mvn.w	r2, #32
 80026d8:	601a      	str	r2, [r3, #0]
  }
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1c>
 800273c:	2302      	movs	r3, #2
 800273e:	e105      	b.n	800294c <HAL_ADC_ConfigChannel+0x228>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b09      	cmp	r3, #9
 800274e:	d925      	bls.n	800279c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	3b1e      	subs	r3, #30
 8002766:	2207      	movs	r2, #7
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	4603      	mov	r3, r0
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4403      	add	r3, r0
 800278e:	3b1e      	subs	r3, #30
 8002790:	409a      	lsls	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e022      	b.n	80027e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6919      	ldr	r1, [r3, #16]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4403      	add	r3, r0
 80027d8:	409a      	lsls	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d824      	bhi.n	8002834 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b05      	subs	r3, #5
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
 8002832:	e04c      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d824      	bhi.n	8002886 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b23      	subs	r3, #35	; 0x23
 800284e:	221f      	movs	r2, #31
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b23      	subs	r3, #35	; 0x23
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
 8002884:	e023      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b41      	subs	r3, #65	; 0x41
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b41      	subs	r3, #65	; 0x41
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_ADC_ConfigChannel+0x234>)
 80028d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_ADC_ConfigChannel+0x238>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1cc>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_ADC_ConfigChannel+0x238>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d123      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x21e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d003      	beq.n	800290a <HAL_ADC_ConfigChannel+0x1e6>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b11      	cmp	r3, #17
 8002908:	d11b      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b10      	cmp	r3, #16
 800291c:	d111      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_ADC_ConfigChannel+0x23c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_ADC_ConfigChannel+0x240>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	0c9a      	lsrs	r2, r3, #18
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002934:	e002      	b.n	800293c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3b01      	subs	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f9      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40012300 	.word	0x40012300
 800295c:	40012000 	.word	0x40012000
 8002960:	20000008 	.word	0x20000008
 8002964:	431bde83 	.word	0x431bde83

08002968 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002970:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <ADC_Init+0x1f0>)
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	021a      	lsls	r2, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <ADC_Init+0x1f4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e00f      	b.n	8002a66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0202 	bic.w	r2, r2, #2
 8002a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7e1b      	ldrb	r3, [r3, #24]
 8002a80:	005a      	lsls	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	035a      	lsls	r2, r3, #13
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e007      	b.n	8002adc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	051a      	lsls	r2, r3, #20
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b1e:	025a      	lsls	r2, r3, #9
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	029a      	lsls	r2, r3, #10
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40012300 	.word	0x40012300
 8002b5c:	0f000001 	.word	0x0f000001

08002b60 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADCEx_InjectedStart+0x22>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0aa      	b.n	8002cd8 <HAL_ADCEx_InjectedStart+0x178>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d018      	beq.n	8002bca <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba8:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <HAL_ADCEx_InjectedStart+0x184>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a4e      	ldr	r2, [pc, #312]	; (8002ce8 <HAL_ADCEx_InjectedStart+0x188>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0c9a      	lsrs	r2, r3, #18
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bbc:	e002      	b.n	8002bc4 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f9      	bne.n	8002bbe <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d172      	bne.n	8002cbe <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0204 	mvn.w	r2, #4
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_ADCEx_InjectedStart+0x18c>)
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d124      	bne.n	8002c6a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d041      	beq.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03e      	beq.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e035      	b.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_ADCEx_InjectedStart+0x190>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d11a      	bne.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d014      	beq.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	40012300 	.word	0x40012300
 8002cf0:	40012000 	.word	0x40012000

08002cf4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ADCEx_InjectedStop+0x1a>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e037      	b.n	8002d7e <HAL_ADCEx_InjectedStop+0x8a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d120      	bne.n	8002d64 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d119      	bne.n	8002d64 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d112      	bne.n	8002d74 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d62:	e007      	b.n	8002d74 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f06f 0204 	mvn.w	r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d81f      	bhi.n	8002dec <HAL_ADCEx_InjectedGetValue+0x60>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_ADCEx_InjectedGetValue+0x28>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002dd9 	.word	0x08002dd9
 8002dbc:	08002dcf 	.word	0x08002dcf
 8002dc0:	08002dc5 	.word	0x08002dc5
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002dcc:	e00f      	b.n	8002dee <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002dd6:	e00a      	b.n	8002dee <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002de0:	e005      	b.n	8002dee <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002dea:	e000      	b.n	8002dee <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002dec:	bf00      	nop
  }
  return tmp;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e17d      	b.n	8003124 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	d925      	bls.n	8002e84 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68d9      	ldr	r1, [r3, #12]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b1e      	subs	r3, #30
 8002e4e:	2207      	movs	r2, #7
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43da      	mvns	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4403      	add	r3, r0
 8002e76:	3b1e      	subs	r3, #30
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	e022      	b.n	8002eca <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	2207      	movs	r2, #7
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4403      	add	r3, r0
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	051a      	lsls	r2, r3, #20
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3303      	adds	r3, #3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	221f      	movs	r2, #31
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	400a      	ands	r2, r1
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	3303      	adds	r3, #3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a74      	ldr	r2, [pc, #464]	; (8003130 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d022      	beq.n	8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	e00f      	b.n	8002fc8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002fc6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	7d5b      	ldrb	r3, [r3, #21]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	e007      	b.n	8002ff2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	7d1b      	ldrb	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	e007      	b.n	800301c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800301a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d02e      	beq.n	8003082 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8003024:	2b03      	cmp	r3, #3
 8003026:	d840      	bhi.n	80030aa <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8003028:	2b01      	cmp	r3, #1
 800302a:	d002      	beq.n	8003032 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800302c:	2b02      	cmp	r3, #2
 800302e:	d014      	beq.n	800305a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8003030:	e03b      	b.n	80030aa <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003040:	f023 030f 	bic.w	r3, r3, #15
 8003044:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6959      	ldr	r1, [r3, #20]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	615a      	str	r2, [r3, #20]
      break;
 8003058:	e03b      	b.n	80030d2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003068:	f023 030f 	bic.w	r3, r3, #15
 800306c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6999      	ldr	r1, [r3, #24]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	619a      	str	r2, [r3, #24]
      break;
 8003080:	e027      	b.n	80030d2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003090:	f023 030f 	bic.w	r3, r3, #15
 8003094:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	61da      	str	r2, [r3, #28]
      break;
 80030a8:	e013      	b.n	80030d2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80030b8:	f023 030f 	bic.w	r3, r3, #15
 80030bc:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a19      	ldr	r1, [r3, #32]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	621a      	str	r2, [r3, #32]
      break;
 80030d0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80030d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d109      	bne.n	80030f4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b12      	cmp	r3, #18
 80030e6:	d105      	bne.n	80030f4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10d      	bne.n	800311a <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d003      	beq.n	800310e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b11      	cmp	r3, #17
 800310c:	d105      	bne.n	800311a <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	000f0001 	.word	0x000f0001
 8003134:	40012300 	.word	0x40012300
 8003138:	40012000 	.word	0x40012000

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316e:	4a04      	ldr	r2, [pc, #16]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	60d3      	str	r3, [r2, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db0b      	blt.n	80031ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <__NVIC_EnableIRQ+0x38>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2001      	movs	r0, #1
 80031c2:	fa00 f202 	lsl.w	r2, r0, r2
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	; (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a8:	d301      	bcc.n	80032ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00f      	b.n	80032ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <SysTick_Config+0x40>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b6:	210f      	movs	r1, #15
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032bc:	f7ff ff8e 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <SysTick_Config+0x40>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <SysTick_Config+0x40>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000e010 	.word	0xe000e010

080032dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff29 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff3e 	bl	8003184 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff8e 	bl	8003230 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5d 	bl	80031dc <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff31 	bl	80031a0 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffa2 	bl	8003298 <SysTick_Config>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e16b      	b.n	8003654 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	f040 815a 	bne.w	800364e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d005      	beq.n	80033b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d130      	bne.n	8003414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0201 	and.w	r2, r3, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b03      	cmp	r3, #3
 800341e:	d017      	beq.n	8003450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d123      	bne.n	80034a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	220f      	movs	r2, #15
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	69b9      	ldr	r1, [r7, #24]
 80034a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0203 	and.w	r2, r3, #3
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80b4 	beq.w	800364e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b60      	ldr	r3, [pc, #384]	; (800366c <HAL_GPIO_Init+0x30c>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a5f      	ldr	r2, [pc, #380]	; (800366c <HAL_GPIO_Init+0x30c>)
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_GPIO_Init+0x30c>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003502:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <HAL_GPIO_Init+0x310>)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x314>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a51      	ldr	r2, [pc, #324]	; (8003678 <HAL_GPIO_Init+0x318>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d025      	beq.n	8003582 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a50      	ldr	r2, [pc, #320]	; (800367c <HAL_GPIO_Init+0x31c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_GPIO_Init+0x320>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d019      	beq.n	800357a <HAL_GPIO_Init+0x21a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4e      	ldr	r2, [pc, #312]	; (8003684 <HAL_GPIO_Init+0x324>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x216>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4d      	ldr	r2, [pc, #308]	; (8003688 <HAL_GPIO_Init+0x328>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x212>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4c      	ldr	r2, [pc, #304]	; (800368c <HAL_GPIO_Init+0x32c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x20e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <HAL_GPIO_Init+0x330>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x20a>
 8003566:	2307      	movs	r3, #7
 8003568:	e00e      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800356a:	2308      	movs	r3, #8
 800356c:	e00c      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800356e:	2306      	movs	r3, #6
 8003570:	e00a      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003572:	2305      	movs	r3, #5
 8003574:	e008      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003586:	2300      	movs	r3, #0
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003598:	4935      	ldr	r1, [pc, #212]	; (8003670 <HAL_GPIO_Init+0x310>)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_GPIO_Init+0x334>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ca:	4a32      	ldr	r2, [pc, #200]	; (8003694 <HAL_GPIO_Init+0x334>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_GPIO_Init+0x334>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_GPIO_Init+0x334>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_GPIO_Init+0x334>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361e:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_GPIO_Init+0x334>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_GPIO_Init+0x334>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_GPIO_Init+0x334>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	f67f ae90 	bls.w	800337c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	40013800 	.word	0x40013800
 8003674:	40020000 	.word	0x40020000
 8003678:	40020400 	.word	0x40020400
 800367c:	40020800 	.word	0x40020800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40021000 	.word	0x40021000
 8003688:	40021400 	.word	0x40021400
 800368c:	40021800 	.word	0x40021800
 8003690:	40021c00 	.word	0x40021c00
 8003694:	40013c00 	.word	0x40013c00

08003698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
 80036a4:	4613      	mov	r3, r2
 80036a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b4:	e003      	b.n	80036be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036dc:	887a      	ldrh	r2, [r7, #2]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4013      	ands	r3, r2
 80036e2:	041a      	lsls	r2, r3, #16
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	400b      	ands	r3, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e264      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d075      	beq.n	800380a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371e:	4ba3      	ldr	r3, [pc, #652]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b04      	cmp	r3, #4
 8003728:	d00c      	beq.n	8003744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4ba0      	ldr	r3, [pc, #640]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003732:	2b08      	cmp	r3, #8
 8003734:	d112      	bne.n	800375c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b9d      	ldr	r3, [pc, #628]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003742:	d10b      	bne.n	800375c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	4b99      	ldr	r3, [pc, #612]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05b      	beq.n	8003808 <HAL_RCC_OscConfig+0x108>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d157      	bne.n	8003808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e23f      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x74>
 8003766:	4b91      	ldr	r3, [pc, #580]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a90      	ldr	r2, [pc, #576]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e01d      	b.n	80037b0 <HAL_RCC_OscConfig+0xb0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x98>
 800377e:	4b8b      	ldr	r3, [pc, #556]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a8a      	ldr	r2, [pc, #552]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b88      	ldr	r3, [pc, #544]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a87      	ldr	r2, [pc, #540]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0xb0>
 8003798:	4b84      	ldr	r3, [pc, #528]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a83      	ldr	r2, [pc, #524]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b81      	ldr	r3, [pc, #516]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a80      	ldr	r2, [pc, #512]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d013      	beq.n	80037e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fc76 	bl	80020a8 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe fc72 	bl	80020a8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e204      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0xc0>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fc62 	bl	80020a8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fe fc5e 	bl	80020a8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1f0      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0xe8>
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003822:	4b62      	ldr	r3, [pc, #392]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382a:	2b08      	cmp	r3, #8
 800382c:	d11c      	bne.n	8003868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x152>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e1c4      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4952      	ldr	r1, [pc, #328]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	e03a      	b.n	80038de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003870:	4b4f      	ldr	r3, [pc, #316]	; (80039b0 <HAL_RCC_OscConfig+0x2b0>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fc17 	bl	80020a8 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fc13 	bl	80020a8 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1a5      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4940      	ldr	r1, [pc, #256]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_OscConfig+0x2b0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe fbf6 	bl	80020a8 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fe fbf2 	bl	80020a8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e184      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d030      	beq.n	800394c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <HAL_RCC_OscConfig+0x2b4>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fbd6 	bl	80020a8 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe fbd2 	bl	80020a8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e164      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x200>
 800391e:	e015      	b.n	800394c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003920:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCC_OscConfig+0x2b4>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fe fbbf 	bl	80020a8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe fbbb 	bl	80020a8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e14d      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003940:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a0 	beq.w	8003a9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_RCC_OscConfig+0x2ac>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_OscConfig+0x2b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d121      	bne.n	80039da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_RCC_OscConfig+0x2b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <HAL_RCC_OscConfig+0x2b8>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fe fb81 	bl	80020a8 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e011      	b.n	80039ce <HAL_RCC_OscConfig+0x2ce>
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	42470000 	.word	0x42470000
 80039b4:	42470e80 	.word	0x42470e80
 80039b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039bc:	f7fe fb74 	bl	80020a8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e106      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b85      	ldr	r3, [pc, #532]	; (8003be4 <HAL_RCC_OscConfig+0x4e4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a80      	ldr	r2, [pc, #512]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
 80039ee:	e01c      	b.n	8003a2a <HAL_RCC_OscConfig+0x32a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x312>
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a7a      	ldr	r2, [pc, #488]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
 8003a04:	4b78      	ldr	r3, [pc, #480]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a77      	ldr	r2, [pc, #476]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0x32a>
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a74      	ldr	r2, [pc, #464]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1e:	4b72      	ldr	r3, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a71      	ldr	r2, [pc, #452]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d015      	beq.n	8003a5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe fb39 	bl	80020a8 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fb35 	bl	80020a8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0c5      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ee      	beq.n	8003a3a <HAL_RCC_OscConfig+0x33a>
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fb23 	bl	80020a8 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe fb1f 	bl	80020a8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0af      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	4b5a      	ldr	r3, [pc, #360]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4a55      	ldr	r2, [pc, #340]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 809b 	beq.w	8003bda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa4:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d05c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d141      	bne.n	8003b3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0x4ec>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fe faf3 	bl	80020a8 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe faef 	bl	80020a8 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e081      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad8:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	019b      	lsls	r3, r3, #6
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	061b      	lsls	r3, r3, #24
 8003b08:	4937      	ldr	r1, [pc, #220]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCC_OscConfig+0x4ec>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fac8 	bl	80020a8 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe fac4 	bl	80020a8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e056      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x41c>
 8003b3a:	e04e      	b.n	8003bda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_OscConfig+0x4ec>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fe fab1 	bl	80020a8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fe faad 	bl	80020a8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e03f      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5c:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x44a>
 8003b68:	e037      	b.n	8003bda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e032      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCC_OscConfig+0x4e8>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d028      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d121      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d11a      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d111      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40007000 	.word	0x40007000
 8003be8:	40023800 	.word	0x40023800
 8003bec:	42470060 	.word	0x42470060

08003bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0cc      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d90c      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0b8      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a58      	ldr	r2, [pc, #352]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c5c:	4b53      	ldr	r3, [pc, #332]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b50      	ldr	r3, [pc, #320]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	494d      	ldr	r1, [pc, #308]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d044      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d119      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e067      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7fe f9e2 	bl	80020a8 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fe f9de 	bl	80020a8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d20c      	bcs.n	8003d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e032      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4916      	ldr	r1, [pc, #88]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	490e      	ldr	r1, [pc, #56]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d76:	f000 f821 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	490a      	ldr	r1, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	5ccb      	ldrb	r3, [r1, r3]
 8003d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe f942 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023c00 	.word	0x40023c00
 8003dac:	40023800 	.word	0x40023800
 8003db0:	08004d10 	.word	0x08004d10
 8003db4:	20000008 	.word	0x20000008
 8003db8:	2000000c 	.word	0x2000000c

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd4:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x40>
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	f200 80bd 	bhi.w	8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dee:	e0b7      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003df2:	60bb      	str	r3, [r7, #8]
       break;
 8003df4:	e0b7      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df6:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003df8:	60bb      	str	r3, [r7, #8]
      break;
 8003dfa:	e0b4      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dfc:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e06:	4b5b      	ldr	r3, [pc, #364]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04d      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	ea02 0800 	and.w	r8, r2, r0
 8003e2a:	ea03 0901 	and.w	r9, r3, r1
 8003e2e:	4640      	mov	r0, r8
 8003e30:	4649      	mov	r1, r9
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	014b      	lsls	r3, r1, #5
 8003e3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e40:	0142      	lsls	r2, r0, #5
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	ebb0 0008 	subs.w	r0, r0, r8
 8003e4a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	018b      	lsls	r3, r1, #6
 8003e58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e5c:	0182      	lsls	r2, r0, #6
 8003e5e:	1a12      	subs	r2, r2, r0
 8003e60:	eb63 0301 	sbc.w	r3, r3, r1
 8003e64:	f04f 0000 	mov.w	r0, #0
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	00d9      	lsls	r1, r3, #3
 8003e6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e72:	00d0      	lsls	r0, r2, #3
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	eb12 0208 	adds.w	r2, r2, r8
 8003e7c:	eb43 0309 	adc.w	r3, r3, r9
 8003e80:	f04f 0000 	mov.w	r0, #0
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	0259      	lsls	r1, r3, #9
 8003e8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e8e:	0250      	lsls	r0, r2, #9
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	f7fc fdb0 	bl	8000a04 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e04a      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	ea02 0400 	and.w	r4, r2, r0
 8003ec6:	ea03 0501 	and.w	r5, r3, r1
 8003eca:	4620      	mov	r0, r4
 8003ecc:	4629      	mov	r1, r5
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	014b      	lsls	r3, r1, #5
 8003ed8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003edc:	0142      	lsls	r2, r0, #5
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	1b00      	subs	r0, r0, r4
 8003ee4:	eb61 0105 	sbc.w	r1, r1, r5
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	018b      	lsls	r3, r1, #6
 8003ef2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ef6:	0182      	lsls	r2, r0, #6
 8003ef8:	1a12      	subs	r2, r2, r0
 8003efa:	eb63 0301 	sbc.w	r3, r3, r1
 8003efe:	f04f 0000 	mov.w	r0, #0
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	00d9      	lsls	r1, r3, #3
 8003f08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0c:	00d0      	lsls	r0, r2, #3
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	1912      	adds	r2, r2, r4
 8003f14:	eb45 0303 	adc.w	r3, r5, r3
 8003f18:	f04f 0000 	mov.w	r0, #0
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	0299      	lsls	r1, r3, #10
 8003f22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f26:	0290      	lsls	r0, r2, #10
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	f7fc fd64 	bl	8000a04 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	60bb      	str	r3, [r7, #8]
      break;
 8003f5e:	e002      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f62:	60bb      	str	r3, [r7, #8]
      break;
 8003f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f66:	68bb      	ldr	r3, [r7, #8]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	00f42400 	.word	0x00f42400
 8003f7c:	007a1200 	.word	0x007a1200

08003f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d001      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e04e      	b.n	8004036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a23      	ldr	r2, [pc, #140]	; (8004044 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d022      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d01d      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d018      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_TIM_Base_Start_IT+0xdc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d111      	bne.n	8004024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b06      	cmp	r3, #6
 8004010:	d010      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004022:	e007      	b.n	8004034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fe6a 	bl	8001d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fae8 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_TIM_PWM_Start+0x24>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e022      	b.n	800416a <HAL_TIM_PWM_Start+0x6a>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b04      	cmp	r3, #4
 8004128:	d109      	bne.n	800413e <HAL_TIM_PWM_Start+0x3e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	bf14      	ite	ne
 8004136:	2301      	movne	r3, #1
 8004138:	2300      	moveq	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e015      	b.n	800416a <HAL_TIM_PWM_Start+0x6a>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d109      	bne.n	8004158 <HAL_TIM_PWM_Start+0x58>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e008      	b.n	800416a <HAL_TIM_PWM_Start+0x6a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07c      	b.n	800426c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0x82>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	e013      	b.n	80041aa <HAL_TIM_PWM_Start+0xaa>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d104      	bne.n	8004192 <HAL_TIM_PWM_Start+0x92>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004190:	e00b      	b.n	80041aa <HAL_TIM_PWM_Start+0xaa>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_PWM_Start+0xa2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a0:	e003      	b.n	80041aa <HAL_TIM_PWM_Start+0xaa>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fcae 	bl	8004b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <HAL_TIM_PWM_Start+0x174>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_PWM_Start+0xcc>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <HAL_TIM_PWM_Start+0x178>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_PWM_Start+0xd0>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_PWM_Start+0xd2>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a22      	ldr	r2, [pc, #136]	; (8004274 <HAL_TIM_PWM_Start+0x174>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f8:	d01d      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1f      	ldr	r2, [pc, #124]	; (800427c <HAL_TIM_PWM_Start+0x17c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <HAL_TIM_PWM_Start+0x180>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_TIM_PWM_Start+0x184>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <HAL_TIM_PWM_Start+0x178>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIM_PWM_Start+0x188>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIM_PWM_Start+0x136>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_TIM_PWM_Start+0x18c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d111      	bne.n	800425a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b06      	cmp	r3, #6
 8004246:	d010      	beq.n	800426a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	e007      	b.n	800426a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40010000 	.word	0x40010000
 8004278:	40010400 	.word	0x40010400
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40014000 	.word	0x40014000
 800428c:	40001800 	.word	0x40001800

08004290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0202 	mvn.w	r2, #2
 80042bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9b0 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9a2 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f9b3 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0204 	mvn.w	r2, #4
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f986 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f978 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f989 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b08      	cmp	r3, #8
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b08      	cmp	r3, #8
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0208 	mvn.w	r2, #8
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2204      	movs	r2, #4
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f95c 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f94e 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f95f 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0210 	mvn.w	r2, #16
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2208      	movs	r2, #8
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f932 	bl	8004638 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f924 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f935 	bl	800464c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10e      	bne.n	8004414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d107      	bne.n	8004414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0201 	mvn.w	r2, #1
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f838 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d107      	bne.n	8004440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fc16 	bl	8004c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8fa 	bl	8004660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b20      	cmp	r3, #32
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0220 	mvn.w	r2, #32
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fbe0 	bl	8004c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0ae      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	f200 809f 	bhi.w	800460c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	0800460d 	.word	0x0800460d
 80044dc:	0800460d 	.word	0x0800460d
 80044e0:	0800460d 	.word	0x0800460d
 80044e4:	08004549 	.word	0x08004549
 80044e8:	0800460d 	.word	0x0800460d
 80044ec:	0800460d 	.word	0x0800460d
 80044f0:	0800460d 	.word	0x0800460d
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	0800460d 	.word	0x0800460d
 80044fc:	0800460d 	.word	0x0800460d
 8004500:	0800460d 	.word	0x0800460d
 8004504:	080045cb 	.word	0x080045cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f950 	bl	80047b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]
      break;
 8004546:	e064      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f9a0 	bl	8004894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	619a      	str	r2, [r3, #24]
      break;
 8004588:	e043      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f9f5 	bl	8004980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
      break;
 80045c8:	e023      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fa49 	bl	8004a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
      break;
 800460a:	e002      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a40      	ldr	r2, [pc, #256]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d00f      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <TIM_Base_SetConfig+0x118>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3c      	ldr	r2, [pc, #240]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <TIM_Base_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d027      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <TIM_Base_SetConfig+0x118>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d023      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <TIM_Base_SetConfig+0x128>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <TIM_Base_SetConfig+0x12c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <TIM_Base_SetConfig+0x130>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <TIM_Base_SetConfig+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <TIM_Base_SetConfig+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <TIM_Base_SetConfig+0x13c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0xf8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <TIM_Base_SetConfig+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d103      	bne.n	8004774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	615a      	str	r2, [r3, #20]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800
 80047a8:	40001800 	.word	0x40001800
 80047ac:	40001c00 	.word	0x40001c00
 80047b0:	40002000 	.word	0x40002000

080047b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 0302 	bic.w	r3, r3, #2
 80047fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <TIM_OC1_SetConfig+0xd8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_OC1_SetConfig+0x64>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <TIM_OC1_SetConfig+0xdc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10c      	bne.n	8004832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0308 	bic.w	r3, r3, #8
 800481e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 0304 	bic.w	r3, r3, #4
 8004830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC1_SetConfig+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC1_SetConfig+0x8e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <TIM_OC1_SetConfig+0xdc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d111      	bne.n	8004866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40010000 	.word	0x40010000
 8004890:	40010400 	.word	0x40010400

08004894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0320 	bic.w	r3, r3, #32
 80048de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a22      	ldr	r2, [pc, #136]	; (8004978 <TIM_OC2_SetConfig+0xe4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC2_SetConfig+0x68>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a21      	ldr	r2, [pc, #132]	; (800497c <TIM_OC2_SetConfig+0xe8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10d      	bne.n	8004918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <TIM_OC2_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC2_SetConfig+0x94>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <TIM_OC2_SetConfig+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d113      	bne.n	8004950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800492e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40010400 	.word	0x40010400

08004980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <TIM_OC3_SetConfig+0xe0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC3_SetConfig+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <TIM_OC3_SetConfig+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10d      	bne.n	8004a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <TIM_OC3_SetConfig+0xe0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC3_SetConfig+0x92>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <TIM_OC3_SetConfig+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d113      	bne.n	8004a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400

08004a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <TIM_OC4_SetConfig+0xa4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC4_SetConfig+0x68>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <TIM_OC4_SetConfig+0xa8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40010400 	.word	0x40010400

08004b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2201      	movs	r2, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e05a      	b.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d01d      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1a      	ldr	r2, [pc, #104]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10c      	bne.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40000c00 	.word	0x40000c00
 8004c4c:	40010400 	.word	0x40010400
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40001800 	.word	0x40001800

08004c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4d0d      	ldr	r5, [pc, #52]	; (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2600      	movs	r6, #0
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4d0b      	ldr	r5, [pc, #44]	; (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	; (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 f820 	bl	8004cd8 <_init>
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08004d28 	.word	0x08004d28
 8004cbc:	08004d28 	.word	0x08004d28
 8004cc0:	08004d28 	.word	0x08004d28
 8004cc4:	08004d2c 	.word	0x08004d2c

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
