
SPIflash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bfc  08002bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000158  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000164  20000164  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b721  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001845  00000000  00000000  0002b75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000838  00000000  00000000  0002d868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020701  00000000  00000000  0002e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a155  00000000  00000000  0004e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c44fa  00000000  00000000  000588f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011cdf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002364  00000000  00000000  0011ce44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002818 	.word	0x08002818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002818 	.word	0x08002818

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <sst25vfInitSPI>:
#include "SST25VF.h"

/* Initializes the SST25VF.
* param _hspi - SPI_Handler
* */
void sst25vfInitSPI(SPI_HandleTypeDef *_hspi){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    hspi = *_hspi;
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <sst25vfInitSPI+0x24>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4610      	mov	r0, r2
 80004ce:	4619      	mov	r1, r3
 80004d0:	2358      	movs	r3, #88	; 0x58
 80004d2:	461a      	mov	r2, r3
 80004d4:	f002 f98a 	bl	80027ec <memcpy>
    desel();
 80004d8:	f000 f824 	bl	8000524 <desel>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000006c 	.word	0x2000006c

080004e8 <sst25vfInitUART>:

/* Initializes the UART for SST25VF.
* param _huart - UART_Handler
* */
void sst25vfInitUART(UART_HandleTypeDef *_huart){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    huart = *_huart;
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <sst25vfInitUART+0x20>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4610      	mov	r0, r2
 80004f6:	4619      	mov	r1, r3
 80004f8:	2344      	movs	r3, #68	; 0x44
 80004fa:	461a      	mov	r2, r3
 80004fc:	f002 f976 	bl	80027ec <memcpy>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000028 	.word	0x20000028

0800050c <sel>:
/* Select the FLASH: Chip Select low */
void sel() {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPORT, CS_PIN, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <sel+0x14>)
 8000516:	f000 fec9 	bl	80012ac <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020c00 	.word	0x40020c00

08000524 <desel>:

/* Deselect the FLASH: Chip Select high */
void desel() {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPORT, CS_PIN, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <desel+0x14>)
 800052e:	f000 febd 	bl	80012ac <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020c00 	.word	0x40020c00

0800053c <prepareCommand>:

/* Convert an address to the desired format.
* param command - the text to be printed.
* param address for converting.
* */
void prepareCommand(char command, uint32_t address) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]

    sel();
 8000548:	f7ff ffe0 	bl	800050c <sel>
    sendBt(command);
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f816 	bl	8000580 <sendBt>
                /* Send WriteAddr high nibble address byte to write to */
    sendBt((address & 0xFF0000) >> 16);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	0c1b      	lsrs	r3, r3, #16
 8000558:	b2db      	uxtb	r3, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f810 	bl	8000580 <sendBt>
                /* Send WriteAddr medium nibble address byte to write to */
    sendBt((address & 0xFF00) >> 8);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f80a 	bl	8000580 <sendBt>
                /* Send WriteAddr low nibble address byte to write to */
    sendBt(address & 0xFF);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f805 	bl	8000580 <sendBt>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <sendBt>:
		status = sendBt(DUMMY_BYTE);
	} while ((status & 1) == 1); 	// Wait while write is in progress
	desel();
}
/* Byte sending to the param:address */
uint8_t sendBt(uint32_t address) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t tx = address;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60fb      	str	r3, [r7, #12]
	uint32_t res = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
	while (HAL_SPI_GetState(&hspi) == HAL_SPI_STATE_RESET){};
 8000590:	bf00      	nop
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <sendBt+0x54>)
 8000594:	f001 fd17 	bl	8001fc6 <HAL_SPI_GetState>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <sendBt+0x12>
    HAL_SPI_TransmitReceive(&hspi, &tx, &res, 1, 50);
 800059e:	f107 0208 	add.w	r2, r7, #8
 80005a2:	f107 010c 	add.w	r1, r7, #12
 80005a6:	2332      	movs	r3, #50	; 0x32
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <sendBt+0x54>)
 80005ae:	f001 fb68 	bl	8001c82 <HAL_SPI_TransmitReceive>
    while (HAL_SPI_GetState(&hspi) == HAL_SPI_STATE_RESET){};
 80005b2:	bf00      	nop
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <sendBt+0x54>)
 80005b6:	f001 fd06 	bl	8001fc6 <HAL_SPI_GetState>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0f9      	beq.n	80005b4 <sendBt+0x34>
    HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 fbcd 	bl	8000d60 <HAL_Delay>
    return res;
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000006c 	.word	0x2000006c

080005d8 <searchMemToUart>:
        desel();
    }
}
/* Function search and read lines of time capsule from memory*/
void searchMemToUart()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
	// Search line length. I thought it usually wouldn't exceed 150 characters,
	// but if that happens, just increase the value.
	int searchCount = 150;
 80005e2:	2396      	movs	r3, #150	; 0x96
 80005e4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80005e8:	f102 0204 	add.w	r2, r2, #4
 80005ec:	6013      	str	r3, [r2, #0]
	char buffer[PAGE_SIZE] = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	3b0c      	subs	r3, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	3304      	adds	r3, #4
 80005fa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f901 	bl	8002808 <memset>
	for (uint32_t addr = 0; addr < MAXSIZEMEM; addr += PAGE_SIZE)
 8000606:	2300      	movs	r3, #0
 8000608:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800060c:	f102 020c 	add.w	r2, r2, #12
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	e07a      	b.n	800070a <searchMemToUart+0x132>
	{
		readFlash(buffer, addr, searchCount);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	3b0c      	subs	r3, #12
 800061a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800061e:	f102 0204 	add.w	r2, r2, #4
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000628:	f101 010c 	add.w	r1, r1, #12
 800062c:	6809      	ldr	r1, [r1, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f882 	bl	8000738 <readFlash>
		HAL_Delay(50);
 8000634:	2032      	movs	r0, #50	; 0x32
 8000636:	f000 fb93 	bl	8000d60 <HAL_Delay>
		for (int j = 0; j < searchCount; j++){
 800063a:	2300      	movs	r3, #0
 800063c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000640:	f102 0208 	add.w	r2, r2, #8
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e03c      	b.n	80006c2 <searchMemToUart+0xea>
			if (buffer[j] == '\n' || buffer[j] == '\0' || buffer[j] == 255)
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	3b0c      	subs	r3, #12
 800064e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000652:	f102 0208 	add.w	r2, r2, #8
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d03c      	beq.n	80006da <searchMemToUart+0x102>
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	3b0c      	subs	r3, #12
 8000666:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800066a:	f102 0208 	add.w	r2, r2, #8
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d030      	beq.n	80006da <searchMemToUart+0x102>
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	3b0c      	subs	r3, #12
 800067e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000682:	f102 0208 	add.w	r2, r2, #8
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2bff      	cmp	r3, #255	; 0xff
 800068e:	d024      	beq.n	80006da <searchMemToUart+0x102>
		  		break;
		  	HAL_UART_Transmit(&huart, &buffer[j], 1, 100);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	3b0c      	subs	r3, #12
 8000696:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800069a:	f102 0208 	add.w	r2, r2, #8
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	1899      	adds	r1, r3, r2
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	2201      	movs	r2, #1
 80006a6:	4821      	ldr	r0, [pc, #132]	; (800072c <searchMemToUart+0x154>)
 80006a8:	f001 fdb3 	bl	8002212 <HAL_UART_Transmit>
		for (int j = 0; j < searchCount; j++){
 80006ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80006b0:	f103 0308 	add.w	r3, r3, #8
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80006bc:	f102 0208 	add.w	r2, r2, #8
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80006c6:	f103 0308 	add.w	r3, r3, #8
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80006d0:	f103 0304 	add.w	r3, r3, #4
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dbb6      	blt.n	8000648 <searchMemToUart+0x70>
		}
		if (buffer[0] == 255)
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	3b0c      	subs	r3, #12
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2bff      	cmp	r3, #255	; 0xff
 80006e4:	d01b      	beq.n	800071e <searchMemToUart+0x146>
			return;
		HAL_UART_Transmit(&huart, "\r\n", 2, 100);
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	2202      	movs	r2, #2
 80006ea:	4911      	ldr	r1, [pc, #68]	; (8000730 <searchMemToUart+0x158>)
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <searchMemToUart+0x154>)
 80006ee:	f001 fd90 	bl	8002212 <HAL_UART_Transmit>
	for (uint32_t addr = 0; addr < MAXSIZEMEM; addr += PAGE_SIZE)
 80006f2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80006f6:	f103 030c 	add.w	r3, r3, #12
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000700:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000704:	f102 020c 	add.w	r2, r2, #12
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800070e:	f103 030c 	add.w	r3, r3, #12
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <searchMemToUart+0x15c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	f67f af7c 	bls.w	8000614 <searchMemToUart+0x3c>
 800071c:	e000      	b.n	8000720 <searchMemToUart+0x148>
			return;
 800071e:	bf00      	nop
	}
}
 8000720:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	08002830 	.word	0x08002830
 8000734:	001ffffe 	.word	0x001ffffe

08000738 <readFlash>:
/* Reading flash into param:buff, from param:addr
 * with size param:len*/
void readFlash(uint8_t *buff, uint32_t addr, uint16_t len)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	4613      	mov	r3, r2
 8000744:	80fb      	strh	r3, [r7, #6]
	prepareCommand(READ, addr);
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	2003      	movs	r0, #3
 800074a:	f7ff fef7 	bl	800053c <prepareCommand>
	while(len--)
 800074e:	e007      	b.n	8000760 <readFlash+0x28>
		*buff++ = sendBt(DUMMY_BYTE);
 8000750:	68fc      	ldr	r4, [r7, #12]
 8000752:	1c63      	adds	r3, r4, #1
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	20a5      	movs	r0, #165	; 0xa5
 8000758:	f7ff ff12 	bl	8000580 <sendBt>
 800075c:	4603      	mov	r3, r0
 800075e:	7023      	strb	r3, [r4, #0]
	while(len--)
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	80fa      	strh	r2, [r7, #6]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f2      	bne.n	8000750 <readFlash+0x18>
	desel();
 800076a:	f7ff fedb 	bl	8000524 <desel>
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
	...

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fa7c 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f826 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 f8e2 	bl	8000950 <MX_GPIO_Init>
  MX_SPI1_Init();
 800078c:	f000 f880 	bl	8000890 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000790:	f000 f8b4 	bl	80008fc <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Init sst25 with spi and uart */
  sst25vfInitSPI(&hspi1);
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <main+0x4c>)
 8000796:	f7ff fe93 	bl	80004c0 <sst25vfInitSPI>
  sst25vfInitUART(&huart3);
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <main+0x50>)
 800079c:	f7ff fea4 	bl	80004e8 <sst25vfInitUART>
  /* Time capsule message */
  char capsule[COUNT_LINES][COUNT_LEN] =
 80007a0:	463b      	mov	r3, r7
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <main+0x54>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	4611      	mov	r1, r2
 80007a8:	f240 33a7 	movw	r3, #935	; 0x3a7
 80007ac:	461a      	mov	r2, r3
 80007ae:	f002 f81d 	bl	80027ec <memcpy>
  		  	writePage(capsule[i], addr, COUNT_LEN);
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);

  #endif
  /* Searches and reads the time capsule every 4096 bytes. */
  searchMemToUart();
 80007b2:	f7ff ff11 	bl	80005d8 <searchMemToUart>

  while (1)
  {
	 /* When the read (and optionally write) operations
	  * are completed, the red LED will light up. */
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <main+0x58>)
 80007be:	f000 fd75 	bl	80012ac <HAL_GPIO_WritePin>
 80007c2:	e7f8      	b.n	80007b6 <main+0x3e>
 80007c4:	20000108 	.word	0x20000108
 80007c8:	200000c4 	.word	0x200000c4
 80007cc:	08002834 	.word	0x08002834
 80007d0:	40020c00 	.word	0x40020c00

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f810 	bl	8002808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <SystemClock_Config+0xb4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <SystemClock_Config+0xb4>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SystemClock_Config+0xb4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <SystemClock_Config+0xb8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <SystemClock_Config+0xb8>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <SystemClock_Config+0xb8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fd4b 	bl	80012e0 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000850:	f000 f8d0 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f000 ffae 	bl	80017d0 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800087a:	f000 f8bb 	bl	80009f4 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	; 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI1_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008e2:	f001 f945 	bl	8001b70 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 f882 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000108 	.word	0x20000108
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART3_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART3_UART_Init+0x4c>)
 8000934:	f001 fc20 	bl	8002178 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f859 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000c4 	.word	0x200000c4
 800094c:	40004800 	.word	0x40004800

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_GPIO_Init+0x9c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0x9c>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0x9c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_GPIO_Init+0x9c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <MX_GPIO_Init+0x9c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_GPIO_Init+0x9c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f24c 0180 	movw	r1, #49280	; 0xc080
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0xa0>)
 80009c2:	f000 fc73 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
 80009c6:	f24c 0380 	movw	r3, #49280	; 0xc080
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xa0>)
 80009e0:	f000 fac8 	bl	8000f74 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_SPI_MspInit+0xc0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d149      	bne.n	8000b06 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_SPI_MspInit+0xc4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <HAL_SPI_MspInit+0xc8>)
 8000ae2:	f000 fa47 	bl	8000f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ae6:	2330      	movs	r3, #48	; 0x30
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af6:	2305      	movs	r3, #5
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_SPI_MspInit+0xcc>)
 8000b02:	f000 fa37 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12c      	bne.n	8000b9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_UART_MspInit+0x8c>)
 8000b98:	f000 f9ec 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40004800 	.word	0x40004800
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f890 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f001 fda5 	bl	80027a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fd8d 	bl	8000778 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c6c:	08002c04 	.word	0x08002c04
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c74:	20000164 	.word	0x20000164

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f931 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fea6 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f93b 	bl	8000f5a <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 f911 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000160 	.word	0x20000160

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000160 	.word	0x20000160

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff47 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff5c 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffb0 	bl	8000ec8 <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e16b      	b.n	8001268 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 815a 	bne.w	8001262 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d130      	bne.n	8001028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	69b9      	ldr	r1, [r7, #24]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80b4 	beq.w	8001262 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b60      	ldr	r3, [pc, #384]	; (8001280 <HAL_GPIO_Init+0x30c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <HAL_GPIO_Init+0x30c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_GPIO_Init+0x30c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001116:	4a5b      	ldr	r2, [pc, #364]	; (8001284 <HAL_GPIO_Init+0x310>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x314>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d02b      	beq.n	800119a <HAL_GPIO_Init+0x226>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x318>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x222>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x31c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x21e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x320>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x21a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_GPIO_Init+0x324>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x216>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4d      	ldr	r2, [pc, #308]	; (800129c <HAL_GPIO_Init+0x328>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x212>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <HAL_GPIO_Init+0x32c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x20e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <HAL_GPIO_Init+0x330>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x20a>
 800117a:	2307      	movs	r3, #7
 800117c:	e00e      	b.n	800119c <HAL_GPIO_Init+0x228>
 800117e:	2308      	movs	r3, #8
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x228>
 8001182:	2306      	movs	r3, #6
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x228>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x228>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x228>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x228>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x228>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x228>
 800119a:	2300      	movs	r3, #0
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ac:	4935      	ldr	r1, [pc, #212]	; (8001284 <HAL_GPIO_Init+0x310>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_GPIO_Init+0x334>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011de:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <HAL_GPIO_Init+0x334>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_GPIO_Init+0x334>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001208:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <HAL_GPIO_Init+0x334>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_GPIO_Init+0x334>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_GPIO_Init+0x334>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_GPIO_Init+0x334>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <HAL_GPIO_Init+0x334>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	f67f ae90 	bls.w	8000f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40013800 	.word	0x40013800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021000 	.word	0x40021000
 800129c:	40021400 	.word	0x40021400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40021c00 	.word	0x40021c00
 80012a8:	40013c00 	.word	0x40013c00

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e264      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d075      	beq.n	80013ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	4ba3      	ldr	r3, [pc, #652]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d00c      	beq.n	8001324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4ba0      	ldr	r3, [pc, #640]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b9d      	ldr	r3, [pc, #628]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001322:	d10b      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	4b99      	ldr	r3, [pc, #612]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d157      	bne.n	80013e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e23f      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x74>
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a90      	ldr	r2, [pc, #576]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a8a      	ldr	r2, [pc, #552]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a83      	ldr	r2, [pc, #524]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b81      	ldr	r3, [pc, #516]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a80      	ldr	r2, [pc, #512]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcd6 	bl	8000d48 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fcd2 	bl	8000d48 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e204      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xc0>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fcc2 	bl	8000d48 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fcbe 	bl	8000d48 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1f0      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0xe8>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1c4      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4952      	ldr	r1, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fc77 	bl	8000d48 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc73 	bl	8000d48 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1a5      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4940      	ldr	r1, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc56 	bl	8000d48 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc52 	bl	8000d48 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e184      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d030      	beq.n	800152c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d016      	beq.n	8001500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fc36 	bl	8000d48 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc32 	bl	8000d48 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e164      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x200>
 80014fe:	e015      	b.n	800152c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fc1f 	bl	8000d48 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fc1b 	bl	8000d48 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e14d      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a0 	beq.w	800167a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d121      	bne.n	80015ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fbe1 	bl	8000d48 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x2ce>
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
 8001598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff fbd4 	bl	8000d48 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e106      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x4e4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a80      	ldr	r2, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e01c      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015d8:	4b7b      	ldr	r3, [pc, #492]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a7a      	ldr	r2, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015f2:	4b75      	ldr	r3, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a74      	ldr	r2, [pc, #464]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	4a71      	ldr	r2, [pc, #452]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fb99 	bl	8000d48 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb95 	bl	8000d48 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0c5      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCC_OscConfig+0x33a>
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb83 	bl	8000d48 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fb7f 	bl	8000d48 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0af      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a55      	ldr	r2, [pc, #340]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 809b 	beq.w	80017ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d05c      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d141      	bne.n	800171c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_RCC_OscConfig+0x4ec>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fb53 	bl	8000d48 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fb4f 	bl	8000d48 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e081      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	3b01      	subs	r3, #1
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	061b      	lsls	r3, r3, #24
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x4ec>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb28 	bl	8000d48 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb24 	bl	8000d48 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e056      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x41c>
 800171a:	e04e      	b.n	80017ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_OscConfig+0x4ec>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fb11 	bl	8000d48 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fb0d 	bl	8000d48 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e03f      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x44a>
 8001748:	e037      	b.n	80017ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e032      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_RCC_OscConfig+0x4e8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d028      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d121      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d11a      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800178c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178e:	4293      	cmp	r3, r2
 8001790:	d111      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40007000 	.word	0x40007000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470060 	.word	0x42470060

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0cc      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d90c      	bls.n	800180c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0b8      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001824:	4b59      	ldr	r3, [pc, #356]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800182e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800183c:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a52      	ldr	r2, [pc, #328]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	494d      	ldr	r1, [pc, #308]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d044      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d119      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e07f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d003      	beq.n	800188e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	2b03      	cmp	r3, #3
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b3f      	ldr	r3, [pc, #252]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e067      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4934      	ldr	r1, [pc, #208]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa42 	bl	8000d48 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff fa3e 	bl	8000d48 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e04f      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d20c      	bcs.n	8001918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e032      	b.n	800197e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4916      	ldr	r1, [pc, #88]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	490e      	ldr	r1, [pc, #56]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001956:	f000 f821 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800195a:	4602      	mov	r2, r0
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	490a      	ldr	r1, [pc, #40]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	5ccb      	ldrb	r3, [r1, r3]
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f9a2 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00
 800198c:	40023800 	.word	0x40023800
 8001990:	08002bdc 	.word	0x08002bdc
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019a2:	2100      	movs	r1, #0
 80019a4:	6079      	str	r1, [r7, #4]
 80019a6:	2100      	movs	r1, #0
 80019a8:	60f9      	str	r1, [r7, #12]
 80019aa:	2100      	movs	r1, #0
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019ae:	2100      	movs	r1, #0
 80019b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b2:	4952      	ldr	r1, [pc, #328]	; (8001afc <HAL_RCC_GetSysClockFreq+0x160>)
 80019b4:	6889      	ldr	r1, [r1, #8]
 80019b6:	f001 010c 	and.w	r1, r1, #12
 80019ba:	2908      	cmp	r1, #8
 80019bc:	d00d      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x3e>
 80019be:	2908      	cmp	r1, #8
 80019c0:	f200 8094 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x150>
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d002      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x32>
 80019c8:	2904      	cmp	r1, #4
 80019ca:	d003      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x38>
 80019cc:	e08e      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ce:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x164>)
 80019d0:	60bb      	str	r3, [r7, #8]
       break;
 80019d2:	e08e      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x168>)
 80019d6:	60bb      	str	r3, [r7, #8]
      break;
 80019d8:	e08b      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019da:	4948      	ldr	r1, [pc, #288]	; (8001afc <HAL_RCC_GetSysClockFreq+0x160>)
 80019dc:	6849      	ldr	r1, [r1, #4]
 80019de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80019e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e4:	4945      	ldr	r1, [pc, #276]	; (8001afc <HAL_RCC_GetSysClockFreq+0x160>)
 80019e6:	6849      	ldr	r1, [r1, #4]
 80019e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80019ec:	2900      	cmp	r1, #0
 80019ee:	d024      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	4942      	ldr	r1, [pc, #264]	; (8001afc <HAL_RCC_GetSysClockFreq+0x160>)
 80019f2:	6849      	ldr	r1, [r1, #4]
 80019f4:	0989      	lsrs	r1, r1, #6
 80019f6:	4608      	mov	r0, r1
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001a00:	f04f 0500 	mov.w	r5, #0
 8001a04:	ea00 0204 	and.w	r2, r0, r4
 8001a08:	ea01 0305 	and.w	r3, r1, r5
 8001a0c:	493d      	ldr	r1, [pc, #244]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a0e:	fb01 f003 	mul.w	r0, r1, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	fb01 f102 	mul.w	r1, r1, r2
 8001a18:	1844      	adds	r4, r0, r1
 8001a1a:	493a      	ldr	r1, [pc, #232]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a1c:	fba2 0101 	umull	r0, r1, r2, r1
 8001a20:	1863      	adds	r3, r4, r1
 8001a22:	4619      	mov	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	f7fe fbcc 	bl	80001c8 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e04a      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_RCC_GetSysClockFreq+0x160>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	461a      	mov	r2, r3
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	ea02 0400 	and.w	r4, r2, r0
 8001a52:	ea03 0501 	and.w	r5, r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	014b      	lsls	r3, r1, #5
 8001a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a68:	0142      	lsls	r2, r0, #5
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	1b00      	subs	r0, r0, r4
 8001a70:	eb61 0105 	sbc.w	r1, r1, r5
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	018b      	lsls	r3, r1, #6
 8001a7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a82:	0182      	lsls	r2, r0, #6
 8001a84:	1a12      	subs	r2, r2, r0
 8001a86:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	00d9      	lsls	r1, r3, #3
 8001a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a98:	00d0      	lsls	r0, r2, #3
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	1912      	adds	r2, r2, r4
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0299      	lsls	r1, r3, #10
 8001aae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ab2:	0290      	lsls	r0, r2, #10
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f7fe fb80 	bl	80001c8 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_GetSysClockFreq+0x160>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	60bb      	str	r3, [r7, #8]
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x164>)
 8001aee:	60bb      	str	r3, [r7, #8]
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	68bb      	ldr	r3, [r7, #8]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	017d7840 	.word	0x017d7840

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	08002bec 	.word	0x08002bec

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	f7ff ffdc 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08002bec 	.word	0x08002bec

08001b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07b      	b.n	8001c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d108      	bne.n	8001b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b92:	d009      	beq.n	8001ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
 8001b9a:	e005      	b.n	8001ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe ff44 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	ea42 0103 	orr.w	r1, r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0104 	and.w	r1, r3, #4
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f003 0210 	and.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08c      	sub	sp, #48	; 0x30
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c90:	2301      	movs	r3, #1
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_SPI_TransmitReceive+0x26>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e18a      	b.n	8001fbe <HAL_SPI_TransmitReceive+0x33c>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cb0:	f7ff f84a 	bl	8000d48 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d00f      	beq.n	8001cf2 <HAL_SPI_TransmitReceive+0x70>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd8:	d107      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x68>
 8001ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d003      	beq.n	8001cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cf0:	e15b      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_SPI_TransmitReceive+0x82>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_SPI_TransmitReceive+0x82>
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d0a:	e14e      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d003      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d007      	beq.n	8001d74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d7c:	d178      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_TransmitReceive+0x10a>
 8001d86:	8b7b      	ldrh	r3, [r7, #26]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d166      	bne.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db0:	e053      	b.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d11b      	bne.n	8001df8 <HAL_SPI_TransmitReceive+0x176>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d016      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x176>
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d113      	bne.n	8001df8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	881a      	ldrh	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	1c9a      	adds	r2, r3, #2
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d119      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x1b8>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	1c9a      	adds	r2, r3, #2
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e36:	2301      	movs	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e3a:	f7fe ff85 	bl	8000d48 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d807      	bhi.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e50:	d003      	beq.n	8001e5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e58:	e0a7      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1a6      	bne.n	8001db2 <HAL_SPI_TransmitReceive+0x130>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1a1      	bne.n	8001db2 <HAL_SPI_TransmitReceive+0x130>
 8001e6e:	e07c      	b.n	8001f6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_TransmitReceive+0x1fc>
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d16b      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	330c      	adds	r3, #12
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ea4:	e057      	b.n	8001f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d11c      	bne.n	8001eee <HAL_SPI_TransmitReceive+0x26c>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d017      	beq.n	8001eee <HAL_SPI_TransmitReceive+0x26c>
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d114      	bne.n	8001eee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	7812      	ldrb	r2, [r2, #0]
 8001ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d119      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x2ae>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d014      	beq.n	8001f30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f30:	f7fe ff0a 	bl	8000d48 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d803      	bhi.n	8001f48 <HAL_SPI_TransmitReceive+0x2c6>
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f46:	d102      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x2cc>
 8001f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f54:	e029      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1a2      	bne.n	8001ea6 <HAL_SPI_TransmitReceive+0x224>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d19d      	bne.n	8001ea6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f8c0 	bl	80020f4 <SPI_EndRxTxTransaction>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f86:	e010      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	e000      	b.n	8001faa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3730      	adds	r7, #48	; 0x30
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fd4:	b2db      	uxtb	r3, r3
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ff4:	f7fe fea8 	bl	8000d48 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002004:	f7fe fea0 	bl	8000d48 <HAL_GetTick>
 8002008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800201a:	e054      	b.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002022:	d050      	beq.n	80020c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002024:	f7fe fe90 	bl	8000d48 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	d902      	bls.n	800203a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d13d      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002052:	d111      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d004      	beq.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002066:	d107      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d10f      	bne.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e017      	b.n	80020e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d19b      	bne.n	800201c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000

080020f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <SPI_EndRxTxTransaction+0x7c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <SPI_EndRxTxTransaction+0x80>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211e:	d112      	bne.n	8002146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff ff5a 	bl	8001fe4 <SPI_WaitFlagStateUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00f      	b.n	8002166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3b01      	subs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d0f2      	beq.n	8002146 <SPI_EndRxTxTransaction+0x52>
 8002160:	e000      	b.n	8002164 <SPI_EndRxTxTransaction+0x70>
        break;
 8002162:	bf00      	nop
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000
 8002174:	165e9f81 	.word	0x165e9f81

08002178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e03f      	b.n	800220a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fcbe 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f929 	bl	8002414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b08a      	sub	sp, #40	; 0x28
 8002216:	af02      	add	r7, sp, #8
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d17c      	bne.n	800232c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Transmit+0x2c>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e075      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_UART_Transmit+0x3e>
 800224c:	2302      	movs	r3, #2
 800224e:	e06e      	b.n	800232e <HAL_UART_Transmit+0x11c>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fd6f 	bl	8000d48 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x82>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022a4:	e02a      	b.n	80022fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f840 	bl	8002336 <UART_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e036      	b.n	800232e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cf      	bne.n	80022a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2140      	movs	r1, #64	; 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f810 	bl	8002336 <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e006      	b.n	800232e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b090      	sub	sp, #64	; 0x40
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002346:	e050      	b.n	80023ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800234e:	d04c      	beq.n	80023ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0x30>
 8002356:	f7fe fcf7 	bl	8000d48 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002362:	429a      	cmp	r2, r3
 8002364:	d241      	bcs.n	80023ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	330c      	adds	r3, #12
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	e853 3f00 	ldrex	r3, [r3]
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002386:	637a      	str	r2, [r7, #52]	; 0x34
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800238c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e5      	bne.n	8002366 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3314      	adds	r3, #20
 80023a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	e853 3f00 	ldrex	r3, [r3]
 80023a8:	613b      	str	r3, [r7, #16]
   return(result);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ba:	623a      	str	r2, [r7, #32]
 80023bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	69f9      	ldr	r1, [r7, #28]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e5      	bne.n	800239a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e00f      	b.n	800240a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	429a      	cmp	r2, r3
 8002406:	d09f      	beq.n	8002348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3740      	adds	r7, #64	; 0x40
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002418:	b09f      	sub	sp, #124	; 0x7c
 800241a:	af00      	add	r7, sp, #0
 800241c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	68d9      	ldr	r1, [r3, #12]
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	ea40 0301 	orr.w	r3, r0, r1
 8002434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	431a      	orrs	r2, r3
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	431a      	orrs	r2, r3
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4313      	orrs	r3, r2
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002458:	f021 010c 	bic.w	r1, r1, #12
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002462:	430b      	orrs	r3, r1
 8002464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	6999      	ldr	r1, [r3, #24]
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	ea40 0301 	orr.w	r3, r0, r1
 800247c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4bc5      	ldr	r3, [pc, #788]	; (8002798 <UART_SetConfig+0x384>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d004      	beq.n	8002492 <UART_SetConfig+0x7e>
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4bc3      	ldr	r3, [pc, #780]	; (800279c <UART_SetConfig+0x388>)
 800248e:	429a      	cmp	r2, r3
 8002490:	d103      	bne.n	800249a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002492:	f7ff fb59 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 8002496:	6778      	str	r0, [r7, #116]	; 0x74
 8002498:	e002      	b.n	80024a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249a:	f7ff fb41 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 800249e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a8:	f040 80b6 	bne.w	8002618 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	461c      	mov	r4, r3
 80024b0:	f04f 0500 	mov.w	r5, #0
 80024b4:	4622      	mov	r2, r4
 80024b6:	462b      	mov	r3, r5
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	6439      	str	r1, [r7, #64]	; 0x40
 80024bc:	415b      	adcs	r3, r3
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
 80024c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024c4:	1912      	adds	r2, r2, r4
 80024c6:	eb45 0303 	adc.w	r3, r5, r3
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	00d9      	lsls	r1, r3, #3
 80024d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024d8:	00d0      	lsls	r0, r2, #3
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	1911      	adds	r1, r2, r4
 80024e0:	6639      	str	r1, [r7, #96]	; 0x60
 80024e2:	416b      	adcs	r3, r5
 80024e4:	667b      	str	r3, [r7, #100]	; 0x64
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024f4:	415b      	adcs	r3, r3
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002500:	f7fd fe62 	bl	80001c8 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4ba5      	ldr	r3, [pc, #660]	; (80027a0 <UART_SetConfig+0x38c>)
 800250a:	fba3 2302 	umull	r2, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	011e      	lsls	r6, r3, #4
 8002512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002514:	461c      	mov	r4, r3
 8002516:	f04f 0500 	mov.w	r5, #0
 800251a:	4622      	mov	r2, r4
 800251c:	462b      	mov	r3, r5
 800251e:	1891      	adds	r1, r2, r2
 8002520:	6339      	str	r1, [r7, #48]	; 0x30
 8002522:	415b      	adcs	r3, r3
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
 8002526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800252a:	1912      	adds	r2, r2, r4
 800252c:	eb45 0303 	adc.w	r3, r5, r3
 8002530:	f04f 0000 	mov.w	r0, #0
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	00d9      	lsls	r1, r3, #3
 800253a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800253e:	00d0      	lsls	r0, r2, #3
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	1911      	adds	r1, r2, r4
 8002546:	65b9      	str	r1, [r7, #88]	; 0x58
 8002548:	416b      	adcs	r3, r5
 800254a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	1891      	adds	r1, r2, r2
 8002558:	62b9      	str	r1, [r7, #40]	; 0x28
 800255a:	415b      	adcs	r3, r3
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002562:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002566:	f7fd fe2f 	bl	80001c8 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4b8c      	ldr	r3, [pc, #560]	; (80027a0 <UART_SetConfig+0x38c>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	2164      	movs	r1, #100	; 0x64
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	3332      	adds	r3, #50	; 0x32
 8002582:	4a87      	ldr	r2, [pc, #540]	; (80027a0 <UART_SetConfig+0x38c>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002590:	441e      	add	r6, r3
 8002592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002594:	4618      	mov	r0, r3
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	1894      	adds	r4, r2, r2
 80025a0:	623c      	str	r4, [r7, #32]
 80025a2:	415b      	adcs	r3, r3
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025aa:	1812      	adds	r2, r2, r0
 80025ac:	eb41 0303 	adc.w	r3, r1, r3
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	f04f 0500 	mov.w	r5, #0
 80025b8:	00dd      	lsls	r5, r3, #3
 80025ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025be:	00d4      	lsls	r4, r2, #3
 80025c0:	4622      	mov	r2, r4
 80025c2:	462b      	mov	r3, r5
 80025c4:	1814      	adds	r4, r2, r0
 80025c6:	653c      	str	r4, [r7, #80]	; 0x50
 80025c8:	414b      	adcs	r3, r1
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	461a      	mov	r2, r3
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	1891      	adds	r1, r2, r2
 80025d8:	61b9      	str	r1, [r7, #24]
 80025da:	415b      	adcs	r3, r3
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025e6:	f7fd fdef 	bl	80001c8 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <UART_SetConfig+0x38c>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2164      	movs	r1, #100	; 0x64
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	3332      	adds	r3, #50	; 0x32
 8002602:	4a67      	ldr	r2, [pc, #412]	; (80027a0 <UART_SetConfig+0x38c>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4432      	add	r2, r6
 8002614:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002616:	e0b9      	b.n	800278c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261a:	461c      	mov	r4, r3
 800261c:	f04f 0500 	mov.w	r5, #0
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	1891      	adds	r1, r2, r2
 8002626:	6139      	str	r1, [r7, #16]
 8002628:	415b      	adcs	r3, r3
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002630:	1912      	adds	r2, r2, r4
 8002632:	eb45 0303 	adc.w	r3, r5, r3
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	00d9      	lsls	r1, r3, #3
 8002640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002644:	00d0      	lsls	r0, r2, #3
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	eb12 0804 	adds.w	r8, r2, r4
 800264e:	eb43 0905 	adc.w	r9, r3, r5
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	008b      	lsls	r3, r1, #2
 8002666:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800266a:	0082      	lsls	r2, r0, #2
 800266c:	4640      	mov	r0, r8
 800266e:	4649      	mov	r1, r9
 8002670:	f7fd fdaa 	bl	80001c8 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <UART_SetConfig+0x38c>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	011e      	lsls	r6, r3, #4
 8002682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002684:	4618      	mov	r0, r3
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	1894      	adds	r4, r2, r2
 8002690:	60bc      	str	r4, [r7, #8]
 8002692:	415b      	adcs	r3, r3
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800269a:	1812      	adds	r2, r2, r0
 800269c:	eb41 0303 	adc.w	r3, r1, r3
 80026a0:	f04f 0400 	mov.w	r4, #0
 80026a4:	f04f 0500 	mov.w	r5, #0
 80026a8:	00dd      	lsls	r5, r3, #3
 80026aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026ae:	00d4      	lsls	r4, r2, #3
 80026b0:	4622      	mov	r2, r4
 80026b2:	462b      	mov	r3, r5
 80026b4:	1814      	adds	r4, r2, r0
 80026b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80026b8:	414b      	adcs	r3, r1
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	008b      	lsls	r3, r1, #2
 80026d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026d4:	0082      	lsls	r2, r0, #2
 80026d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026da:	f7fd fd75 	bl	80001c8 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <UART_SetConfig+0x38c>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <UART_SetConfig+0x38c>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002702:	441e      	add	r6, r3
 8002704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002706:	4618      	mov	r0, r3
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	1894      	adds	r4, r2, r2
 8002712:	603c      	str	r4, [r7, #0]
 8002714:	415b      	adcs	r3, r3
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800271c:	1812      	adds	r2, r2, r0
 800271e:	eb41 0303 	adc.w	r3, r1, r3
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	f04f 0500 	mov.w	r5, #0
 800272a:	00dd      	lsls	r5, r3, #3
 800272c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002730:	00d4      	lsls	r4, r2, #3
 8002732:	4622      	mov	r2, r4
 8002734:	462b      	mov	r3, r5
 8002736:	eb12 0a00 	adds.w	sl, r2, r0
 800273a:	eb43 0b01 	adc.w	fp, r3, r1
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	008b      	lsls	r3, r1, #2
 8002752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002756:	0082      	lsls	r2, r0, #2
 8002758:	4650      	mov	r0, sl
 800275a:	4659      	mov	r1, fp
 800275c:	f7fd fd34 	bl	80001c8 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <UART_SetConfig+0x38c>)
 8002766:	fba3 1302 	umull	r1, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2164      	movs	r1, #100	; 0x64
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	3332      	adds	r3, #50	; 0x32
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <UART_SetConfig+0x38c>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4432      	add	r2, r6
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	377c      	adds	r7, #124	; 0x7c
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	51eb851f 	.word	0x51eb851f

080027a4 <__libc_init_array>:
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	4d0d      	ldr	r5, [pc, #52]	; (80027dc <__libc_init_array+0x38>)
 80027a8:	4c0d      	ldr	r4, [pc, #52]	; (80027e0 <__libc_init_array+0x3c>)
 80027aa:	1b64      	subs	r4, r4, r5
 80027ac:	10a4      	asrs	r4, r4, #2
 80027ae:	2600      	movs	r6, #0
 80027b0:	42a6      	cmp	r6, r4
 80027b2:	d109      	bne.n	80027c8 <__libc_init_array+0x24>
 80027b4:	4d0b      	ldr	r5, [pc, #44]	; (80027e4 <__libc_init_array+0x40>)
 80027b6:	4c0c      	ldr	r4, [pc, #48]	; (80027e8 <__libc_init_array+0x44>)
 80027b8:	f000 f82e 	bl	8002818 <_init>
 80027bc:	1b64      	subs	r4, r4, r5
 80027be:	10a4      	asrs	r4, r4, #2
 80027c0:	2600      	movs	r6, #0
 80027c2:	42a6      	cmp	r6, r4
 80027c4:	d105      	bne.n	80027d2 <__libc_init_array+0x2e>
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027cc:	4798      	blx	r3
 80027ce:	3601      	adds	r6, #1
 80027d0:	e7ee      	b.n	80027b0 <__libc_init_array+0xc>
 80027d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d6:	4798      	blx	r3
 80027d8:	3601      	adds	r6, #1
 80027da:	e7f2      	b.n	80027c2 <__libc_init_array+0x1e>
 80027dc:	08002bfc 	.word	0x08002bfc
 80027e0:	08002bfc 	.word	0x08002bfc
 80027e4:	08002bfc 	.word	0x08002bfc
 80027e8:	08002c00 	.word	0x08002c00

080027ec <memcpy>:
 80027ec:	440a      	add	r2, r1
 80027ee:	4291      	cmp	r1, r2
 80027f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80027f4:	d100      	bne.n	80027f8 <memcpy+0xc>
 80027f6:	4770      	bx	lr
 80027f8:	b510      	push	{r4, lr}
 80027fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002802:	4291      	cmp	r1, r2
 8002804:	d1f9      	bne.n	80027fa <memcpy+0xe>
 8002806:	bd10      	pop	{r4, pc}

08002808 <memset>:
 8002808:	4402      	add	r2, r0
 800280a:	4603      	mov	r3, r0
 800280c:	4293      	cmp	r3, r2
 800280e:	d100      	bne.n	8002812 <memset+0xa>
 8002810:	4770      	bx	lr
 8002812:	f803 1b01 	strb.w	r1, [r3], #1
 8002816:	e7f9      	b.n	800280c <memset+0x4>

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
