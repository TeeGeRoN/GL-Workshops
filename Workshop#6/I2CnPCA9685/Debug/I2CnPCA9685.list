
I2CnPCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005748  08005748  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005750  08005750  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000138  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e000  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001caf  00000000  00000000  0002e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a00  00000000  00000000  00031178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd1f  00000000  00000000  00052b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c703f  00000000  00000000  0005f897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001268d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003578  00000000  00000000  0012692c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005560 	.word	0x08005560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005560 	.word	0x08005560

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 b96e 	b.w	8000df0 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468c      	mov	ip, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8083 	bne.w	8000c42 <__udivmoddi4+0x116>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d947      	bls.n	8000bd2 <__udivmoddi4+0xa6>
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b142      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	f1c2 0020 	rsb	r0, r2, #32
 8000b4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b50:	4091      	lsls	r1, r2
 8000b52:	4097      	lsls	r7, r2
 8000b54:	ea40 0c01 	orr.w	ip, r0, r1
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbbc f6f8 	udiv	r6, ip, r8
 8000b64:	fa1f fe87 	uxth.w	lr, r7
 8000b68:	fb08 c116 	mls	r1, r8, r6, ip
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f10e 	mul.w	r1, r6, lr
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b7e:	f080 8119 	bcs.w	8000db4 <__udivmoddi4+0x288>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8116 	bls.w	8000db4 <__udivmoddi4+0x288>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	443b      	add	r3, r7
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	45a6      	cmp	lr, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000baa:	f080 8105 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000bae:	45a6      	cmp	lr, r4
 8000bb0:	f240 8102 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	443c      	add	r4, r7
 8000bb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbc:	eba4 040e 	sub.w	r4, r4, lr
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	b902      	cbnz	r2, 8000bd6 <__udivmoddi4+0xaa>
 8000bd4:	deff      	udf	#255	; 0xff
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d150      	bne.n	8000c80 <__udivmoddi4+0x154>
 8000bde:	1bcb      	subs	r3, r1, r7
 8000be0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	2601      	movs	r6, #1
 8000bea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000c00:	1879      	adds	r1, r7, r1
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0xe2>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	f200 80e9 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1ac9      	subs	r1, r1, r3
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x10c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x10a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80d9 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e7bf      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x12e>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f000 80b1 	beq.w	8000dae <__udivmoddi4+0x282>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	4630      	mov	r0, r6
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f683 	clz	r6, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d14a      	bne.n	8000cf8 <__udivmoddi4+0x1cc>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0x140>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80b8 	bhi.w	8000ddc <__udivmoddi4+0x2b0>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	468c      	mov	ip, r1
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0a8      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f603 	lsr.w	r6, r0, r3
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c92:	40d9      	lsrs	r1, r3
 8000c94:	4330      	orrs	r0, r6
 8000c96:	0c03      	lsrs	r3, r0, #16
 8000c98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c9c:	fa1f f887 	uxth.w	r8, r7
 8000ca0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca8:	fb06 f108 	mul.w	r1, r6, r8
 8000cac:	4299      	cmp	r1, r3
 8000cae:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x19c>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cba:	f080 808d 	bcs.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 808a 	bls.w	8000dd8 <__udivmoddi4+0x2ac>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b281      	uxth	r1, r0
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd8:	fb00 f308 	mul.w	r3, r0, r8
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x1c4>
 8000ce0:	1879      	adds	r1, r7, r1
 8000ce2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ce6:	d273      	bcs.n	8000dd0 <__udivmoddi4+0x2a4>
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d971      	bls.n	8000dd0 <__udivmoddi4+0x2a4>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4439      	add	r1, r7
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cf6:	e778      	b.n	8000bea <__udivmoddi4+0xbe>
 8000cf8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000d00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d04:	431c      	orrs	r4, r3
 8000d06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d16:	431f      	orrs	r7, r3
 8000d18:	0c3b      	lsrs	r3, r7, #16
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fa1f f884 	uxth.w	r8, r4
 8000d22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	fa02 f206 	lsl.w	r2, r2, r6
 8000d34:	fa00 f306 	lsl.w	r3, r0, r6
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x220>
 8000d3a:	1861      	adds	r1, r4, r1
 8000d3c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d40:	d248      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d42:	458a      	cmp	sl, r1
 8000d44:	d946      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d46:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4a:	4421      	add	r1, r4
 8000d4c:	eba1 010a 	sub.w	r1, r1, sl
 8000d50:	b2bf      	uxth	r7, r7
 8000d52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d5e:	fb00 f808 	mul.w	r8, r0, r8
 8000d62:	45b8      	cmp	r8, r7
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x24a>
 8000d66:	19e7      	adds	r7, r4, r7
 8000d68:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d6c:	d22e      	bcs.n	8000dcc <__udivmoddi4+0x2a0>
 8000d6e:	45b8      	cmp	r8, r7
 8000d70:	d92c      	bls.n	8000dcc <__udivmoddi4+0x2a0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4427      	add	r7, r4
 8000d76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7a:	eba7 0708 	sub.w	r7, r7, r8
 8000d7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d82:	454f      	cmp	r7, r9
 8000d84:	46c6      	mov	lr, r8
 8000d86:	4649      	mov	r1, r9
 8000d88:	d31a      	bcc.n	8000dc0 <__udivmoddi4+0x294>
 8000d8a:	d017      	beq.n	8000dbc <__udivmoddi4+0x290>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x27a>
 8000d8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d92:	eb67 0701 	sbc.w	r7, r7, r1
 8000d96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9a:	40f2      	lsrs	r2, r6
 8000d9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000da0:	40f7      	lsrs	r7, r6
 8000da2:	e9c5 2700 	strd	r2, r7, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e70b      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0x60>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6fd      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dbc:	4543      	cmp	r3, r8
 8000dbe:	d2e5      	bcs.n	8000d8c <__udivmoddi4+0x260>
 8000dc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7df      	b.n	8000d8c <__udivmoddi4+0x260>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e7d2      	b.n	8000d76 <__udivmoddi4+0x24a>
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	e78d      	b.n	8000cf0 <__udivmoddi4+0x1c4>
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	e7b9      	b.n	8000d4c <__udivmoddi4+0x220>
 8000dd8:	4666      	mov	r6, ip
 8000dda:	e775      	b.n	8000cc8 <__udivmoddi4+0x19c>
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e74a      	b.n	8000c76 <__udivmoddi4+0x14a>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	4439      	add	r1, r7
 8000de6:	e713      	b.n	8000c10 <__udivmoddi4+0xe4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	e724      	b.n	8000c38 <__udivmoddi4+0x10c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <writeRegister>:
#include "PCA9685lib.h"


void writeRegister(uint8_t regAddress, uint8_t value)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	/* Writes in the register.
	 * param regAddress - where (at what address) to write
	 * param value - value to write
	 * */
	HAL_Delay(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f000 ff69 	bl	8001cdc <HAL_Delay>
	uint8_t TxBuffer[8];
	TxBuffer[0] = regAddress;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	723b      	strb	r3, [r7, #8]
	TxBuffer[1] = value;
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&_hi2c, _i2cAddress, (uint8_t *) &TxBuffer, 2, 1000);
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <writeRegister+0x3c>)
 8000e14:	8819      	ldrh	r1, [r3, #0]
 8000e16:	f107 0208 	add.w	r2, r7, #8
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2302      	movs	r3, #2
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <writeRegister+0x40>)
 8000e24:	f001 fb5e 	bl	80024e4 <HAL_I2C_Master_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000108 	.word	0x20000108
 8000e34:	200000b4 	.word	0x200000b4

08000e38 <readRegister>:

uint8_t readRegister(uint8_t regAddress)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	/* Reads the register.
	 * param regAddress - from which register to read (his address)
	 * */
	uint8_t RxBuffer;
	uint8_t Addr = regAddress;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&_hi2c, _i2cAddress, &Addr, sizeof(Addr), 1000);
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <readRegister+0x44>)
 8000e48:	8819      	ldrh	r1, [r3, #0]
 8000e4a:	f107 020e 	add.w	r2, r7, #14
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <readRegister+0x48>)
 8000e58:	f001 fb44 	bl	80024e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_hi2c, _i2cAddress, &RxBuffer, sizeof(RxBuffer), 1000);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <readRegister+0x44>)
 8000e5e:	8819      	ldrh	r1, [r3, #0]
 8000e60:	f107 020f 	add.w	r2, r7, #15
 8000e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <readRegister+0x48>)
 8000e6e:	f001 fc37 	bl	80026e0 <HAL_I2C_Master_Receive>
	return RxBuffer;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000108 	.word	0x20000108
 8000e80:	200000b4 	.word	0x200000b4

08000e84 <initPCA>:


void initPCA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
	/* Initializes the PCA9685, sets the default frequency (can be disabled).
	 * param hi2c - I2C_Handler
	 * param DevAddress - PCA9685 address
	 * */
	HAL_Delay(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f000 ff23 	bl	8001cdc <HAL_Delay>
    _i2cAddress = DevAddress;
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <initPCA+0x54>)
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	8013      	strh	r3, [r2, #0]
    _hi2c = *hi2c;
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <initPCA+0x58>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2354      	movs	r3, #84	; 0x54
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f003 f99c 	bl	80041e4 <memcpy>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <initPCA+0x5c>)
 8000eb2:	f001 f9b9 	bl	8002228 <HAL_GPIO_WritePin>
    writeRegister(PCA9685_MODE1_REG, PCA9685_MODE1_ALLCALL);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff ff9b 	bl	8000df4 <writeRegister>
    resetDevice();
 8000ebe:	f000 f825 	bl	8000f0c <resetDevice>
    // set the default internal frequency
    setOscillatorFrequency(FREQUENCY_OSCILLATOR);
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <initPCA+0x60>)
 8000ec4:	f000 f812 	bl	8000eec <setOscillatorFrequency>
    // set a default frequency
    setPWMFrequency(1000);
 8000ec8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8000ee8 <initPCA+0x64>
 8000ecc:	f000 f856 	bl	8000f7c <setPWMFrequency>

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000108 	.word	0x20000108
 8000edc:	200000b4 	.word	0x200000b4
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	017d7840 	.word	0x017d7840
 8000ee8:	447a0000 	.word	0x447a0000

08000eec <setOscillatorFrequency>:

void setOscillatorFrequency(uint32_t Freq)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	/* Setter for the internally tracked oscillator used for
	 * frequency calculations
	 * */
	  oscillator_freq = Freq;
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <setOscillatorFrequency+0x1c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000010c 	.word	0x2000010c

08000f0c <resetDevice>:
	 * frequency calculations
	 * */
	return oscillator_freq;
}
void resetDevice() 
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	/* Sends a reset command to the PCA9685 */
    writeRegister(PCA9685_MODE1_REG, PCA9685_MODE1_RESTART);
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ff6e 	bl	8000df4 <writeRegister>
    HAL_Delay(10);
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f000 fedf 	bl	8001cdc <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <sleepPCA>:
void sleepPCA()
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
	/* Puts board into sleep mode */
  uint8_t awake = readRegister(PCA9685_MODE1_REG);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ff85 	bl	8000e38 <readRegister>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  uint8_t sleep = awake | PCA9685_MODE1_SLEEP; // set sleep bit high
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	71bb      	strb	r3, [r7, #6]
  writeRegister(PCA9685_MODE1_REG, sleep);
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff58 	bl	8000df4 <writeRegister>
  HAL_Delay(5); // wait until cycle ends for sleep to be active
 8000f44:	2005      	movs	r0, #5
 8000f46:	f000 fec9 	bl	8001cdc <HAL_Delay>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <wakeupPCA>:

void wakeupPCA()
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
	/* Wakes board from sleep */
	uint8_t sleep = readRegister(PCA9685_MODE1_REG);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff ff6d 	bl	8000e38 <readRegister>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint8_t wakeup = sleep & ~PCA9685_MODE1_SLEEP; // set sleep bit low
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f023 0310 	bic.w	r3, r3, #16
 8000f68:	71bb      	strb	r3, [r7, #6]
	writeRegister(PCA9685_MODE1_REG, wakeup);
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ff40 	bl	8000df4 <writeRegister>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <setPWMFrequency>:

void setPWMFrequency(float Frequency)
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Setter for the frequency, uses the prescaler calculation.
	 * This is why this function sets the approximate value.
	 * param Frequency(0-4095) to set desirable frequency
	 * */
	 if (Frequency < 1)
 8000f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	d502      	bpl.n	8000f9e <setPWMFrequency+0x22>
		 Frequency = 1;
 8000f98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f9c:	607b      	str	r3, [r7, #4]
	 if (Frequency > 3500)
 8000f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010a8 <setPWMFrequency+0x12c>
 8000fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	dd01      	ble.n	8000fb4 <setPWMFrequency+0x38>
		 Frequency = 3500; // Datasheet limit
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <setPWMFrequency+0x130>)
 8000fb2:	607b      	str	r3, [r7, #4]

	 float prescaleval = ((oscillator_freq / (Frequency * 4096.0)) + 0.5) - 1;;
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <setPWMFrequency+0x134>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff faa3 	bl	8000504 <__aeabi_ui2d>
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	460d      	mov	r5, r1
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fac0 	bl	8000548 <__aeabi_f2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <setPWMFrequency+0x138>)
 8000fce:	f7ff fb13 	bl	80005f8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff fc37 	bl	800084c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <setPWMFrequency+0x13c>)
 8000fec:	f7ff f94e 	bl	800028c <__adddf3>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <setPWMFrequency+0x140>)
 8000ffe:	f7ff f943 	bl	8000288 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fd27 	bl	8000a5c <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	60fb      	str	r3, [r7, #12]
	 if (prescaleval < 3)
 8001012:	edd7 7a03 	vldr	s15, [r7, #12]
 8001016:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800101a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d501      	bpl.n	8001028 <setPWMFrequency+0xac>
		 prescaleval = 3;
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <setPWMFrequency+0x144>)
 8001026:	60fb      	str	r3, [r7, #12]
	 if (prescaleval > 255)
 8001028:	edd7 7a03 	vldr	s15, [r7, #12]
 800102c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80010c4 <setPWMFrequency+0x148>
 8001030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	dd01      	ble.n	800103e <setPWMFrequency+0xc2>
		 prescaleval = 255;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <setPWMFrequency+0x14c>)
 800103c:	60fb      	str	r3, [r7, #12]

	  uint8_t prescale = (uint8_t)prescaleval;
 800103e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	edc7 7a00 	vstr	s15, [r7]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	72fb      	strb	r3, [r7, #11]
	  uint8_t oldmode = readRegister(PCA9685_MODE1_REG);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fef2 	bl	8000e38 <readRegister>
 8001054:	4603      	mov	r3, r0
 8001056:	72bb      	strb	r3, [r7, #10]
	  uint8_t newmode = (oldmode & ~PCA9685_MODE1_RESTART) | PCA9685_MODE1_SLEEP; // sleep
 8001058:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800105c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	b25b      	sxtb	r3, r3
 8001068:	727b      	strb	r3, [r7, #9]
	  writeRegister(PCA9685_MODE1_REG, newmode);                             // go to sleep
 800106a:	7a7b      	ldrb	r3, [r7, #9]
 800106c:	4619      	mov	r1, r3
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fec0 	bl	8000df4 <writeRegister>
	  writeRegister(PCA9685_PRESCALE_REG, prescale); // set the prescaler
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	4619      	mov	r1, r3
 8001078:	20fe      	movs	r0, #254	; 0xfe
 800107a:	f7ff febb 	bl	8000df4 <writeRegister>
	  writeRegister(PCA9685_MODE1_REG, oldmode);
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	4619      	mov	r1, r3
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff feb6 	bl	8000df4 <writeRegister>
	  HAL_Delay(5);
 8001088:	2005      	movs	r0, #5
 800108a:	f000 fe27 	bl	8001cdc <HAL_Delay>
	  // This sets the MODE1 register to turn on auto increment.
	  writeRegister(PCA9685_MODE1_REG, oldmode | PCA9685_MODE1_RESTART | PCA9685_MODE1_AUTOINC);
 800108e:	7abb      	ldrb	r3, [r7, #10]
 8001090:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff feab 	bl	8000df4 <writeRegister>

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	455ac000 	.word	0x455ac000
 80010ac:	455ac000 	.word	0x455ac000
 80010b0:	2000010c 	.word	0x2000010c
 80010b4:	40b00000 	.word	0x40b00000
 80010b8:	3fe00000 	.word	0x3fe00000
 80010bc:	3ff00000 	.word	0x3ff00000
 80010c0:	40400000 	.word	0x40400000
 80010c4:	437f0000 	.word	0x437f0000
 80010c8:	437f0000 	.word	0x437f0000

080010cc <getPWMFrequency>:
uint16_t getPWMFrequency()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	/* Getter for the frequency, that is set to the PCA9685
	 * Returns the approximate value.
	 * */
	uint8_t presc = readRegister(PCA9685_PRESCALE_REG); // set the prescaler
 80010d2:	20fe      	movs	r0, #254	; 0xfe
 80010d4:	f7ff feb0 	bl	8000e38 <readRegister>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
	uint16_t Frequency = (oscillator_freq/((float)(presc + 1))-0.5) / (float)4096;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <getPWMFrequency+0x6c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3301      	adds	r3, #1
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010f8:	ee16 0a90 	vmov	r0, s13
 80010fc:	f7ff fa24 	bl	8000548 <__aeabi_f2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <getPWMFrequency+0x70>)
 8001106:	f7ff f8bf 	bl	8000288 <__aeabi_dsub>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <getPWMFrequency+0x74>)
 8001118:	f7ff fb98 	bl	800084c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fc7a 	bl	8000a1c <__aeabi_d2uiz>
 8001128:	4603      	mov	r3, r0
 800112a:	80bb      	strh	r3, [r7, #4]
	return Frequency;
 800112c:	88bb      	ldrh	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000010c 	.word	0x2000010c
 800113c:	3fe00000 	.word	0x3fe00000
 8001140:	40b00000 	.word	0x40b00000

08001144 <setLedPWM>:

void setLedPWM(uint8_t led, int value)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
	/* PWM a single channel
	 * param led channel (1-16) to set PWM value for
	 * param on_value 0-4095 value to turn on the pulse
	 * Using setPWM() function.
	 * */
	setPWM(led, 0, value);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f804 	bl	8001164 <setPWM>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <setPWM>:

void setPWM(uint8_t led, int on_value, int off_value) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	73fb      	strb	r3, [r7, #15]
	/* PWM a single channel
	 * param led channel (1-16) to set PWM value for
	 * param on_value 0-4095 value to turn on the pulse
	 * param off_value 0-4095 value to turn off the pulse
	 * */
	writeRegister(PCA9685_LED0_REG_ON_L + LED_MULTIPLYER * (led - 1), on_value & 0xFF);
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	3b01      	subs	r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3306      	adds	r3, #6
 800117e:	b2db      	uxtb	r3, r3
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fe34 	bl	8000df4 <writeRegister>
	writeRegister(PCA9685_LED0_REG_ON_H + LED_MULTIPLYER * (led - 1), on_value >> 8);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3b01      	subs	r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3307      	adds	r3, #7
 8001198:	b2da      	uxtb	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	121b      	asrs	r3, r3, #8
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f7ff fe26 	bl	8000df4 <writeRegister>
	writeRegister(PCA9685_LED0_REG_OFF_L + LED_MULTIPLYER * (led - 1), off_value & 0xFF);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe1b 	bl	8000df4 <writeRegister>
	writeRegister(PCA9685_LED0_REG_OFF_H + LED_MULTIPLYER * (led - 1), off_value >> 8);
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	3309      	adds	r3, #9
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	121b      	asrs	r3, r3, #8
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f7ff fe0d 	bl	8000df4 <writeRegister>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <setAllLedPWM>:

void setAllLedPWM(int value)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	/* Sets PWM for all channels
	 * param on_value 0-4095 value to turn on the pulse
	 * */
	setAllPWM(0, value);
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f804 	bl	80011fa <setAllPWM>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <setAllPWM>:

void setAllPWM(int on_value, int off_value) 
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
	/* Sets PWM for all channels
	 * param on_value 0-4095 value to turn on the pulse
	 * param off_value 0-4095 value to turn off the pulse
	 * */
	writeRegister(PCA9685_ALLLED_REG_ON_L, on_value & 0xFF);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4619      	mov	r1, r3
 800120a:	20fa      	movs	r0, #250	; 0xfa
 800120c:	f7ff fdf2 	bl	8000df4 <writeRegister>
	writeRegister(PCA9685_ALLLED_REG_ON_H, on_value >> 8);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	121b      	asrs	r3, r3, #8
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	20fb      	movs	r0, #251	; 0xfb
 800121a:	f7ff fdeb 	bl	8000df4 <writeRegister>
	writeRegister(PCA9685_ALLLED_OFF_L, off_value & 0xFF);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	20fc      	movs	r0, #252	; 0xfc
 8001226:	f7ff fde5 	bl	8000df4 <writeRegister>
	writeRegister(PCA9685_ALLLED_OFF_H, off_value >> 8);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	121b      	asrs	r3, r3, #8
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
 8001232:	20fd      	movs	r0, #253	; 0xfd
 8001234:	f7ff fdde 	bl	8000df4 <writeRegister>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <getPWM>:
uint16_t getPWM(uint8_t led)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	/* Getter for the PWM of a single channel value
	 * */
	int ledval = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
	ledval = readRegister(PCA9685_LED0_REG_OFF_H + LED_MULTIPLYER * (led-1));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	3b01      	subs	r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	3309      	adds	r3, #9
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fdeb 	bl	8000e38 <readRegister>
 8001262:	4603      	mov	r3, r0
 8001264:	60fb      	str	r3, [r7, #12]
	ledval = ledval & 0xf;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	60fb      	str	r3, [r7, #12]
	ledval <<= 8;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
	ledval += readRegister(PCA9685_LED0_REG_OFF_L + LED_MULTIPLYER * (led-1));
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3301      	adds	r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fdda 	bl	8000e38 <readRegister>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
	return ledval;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	b29b      	uxth	r3, r3
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <setAllLedOn>:
	 * */
	setPWM(led, 0, 0);
}

void setAllLedOn()
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
	/* Setter all channels to the max value(on)
	 * */
	setAllPWM(0, 4095);
 800129e:	f640 71ff 	movw	r1, #4095	; 0xfff
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ffa9 	bl	80011fa <setAllPWM>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <setAllLedOff>:

void setAllLedOff()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	/* Setter all channels to the min value(off)
	 * */
	setAllPWM(0, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ffa1 	bl	80011fa <setAllPWM>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c2:	f000 fc99 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c6:	f000 f947 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ca:	f000 f9fb 	bl	80016c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ce:	f000 f9a1 	bl	8001614 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80012d2:	f000 f9cd 	bl	8001670 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  initPCA(&hi2c1, 0x80);
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	4895      	ldr	r0, [pc, #596]	; (8001530 <main+0x274>)
 80012da:	f7ff fdd3 	bl	8000e84 <initPCA>
  setAllLedOff();
 80012de:	f7ff ffe5 	bl	80012ac <setAllLedOff>
  setPWMFrequency(500);
 80012e2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8001534 <main+0x278>
 80012e6:	f7ff fe49 	bl	8000f7c <setPWMFrequency>
  sendState();
 80012ea:	f000 fa3b 	bl	8001764 <sendState>
  while (1)
  {
	  // UART poll
	  uint8_t rcvBuf[1];
	  HAL_StatusTypeDef result;
	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 80012ee:	f107 0114 	add.w	r1, r7, #20
 80012f2:	230a      	movs	r3, #10
 80012f4:	2201      	movs	r2, #1
 80012f6:	4890      	ldr	r0, [pc, #576]	; (8001538 <main+0x27c>)
 80012f8:	f002 fc6d 	bl	8003bd6 <HAL_UART_Receive>
 80012fc:	4603      	mov	r3, r0
 80012fe:	75fb      	strb	r3, [r7, #23]

	  if (result == HAL_OK)
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f3      	bne.n	80012ee <main+0x32>
	  {
		  // If uppercase character
		  if (isupper(rcvBuf[0]))
 8001306:	7d3b      	ldrb	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	4a8c      	ldr	r2, [pc, #560]	; (800153c <main+0x280>)
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d14c      	bne.n	80013b2 <main+0xf6>
		  {
			  for (int i = 0; i < ledCount; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800131c:	e043      	b.n	80013a6 <main+0xea>
			  {
				  if (toupper(ledCMD[i]) == rcvBuf[0])
 800131e:	4a88      	ldr	r2, [pc, #544]	; (8001540 <main+0x284>)
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	75bb      	strb	r3, [r7, #22]
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	3301      	adds	r3, #1
 800132c:	4a83      	ldr	r2, [pc, #524]	; (800153c <main+0x280>)
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d102      	bne.n	8001340 <main+0x84>
 800133a:	7dbb      	ldrb	r3, [r7, #22]
 800133c:	3b20      	subs	r3, #32
 800133e:	e000      	b.n	8001342 <main+0x86>
 8001340:	7dbb      	ldrb	r3, [r7, #22]
 8001342:	7d3a      	ldrb	r2, [r7, #20]
 8001344:	4293      	cmp	r3, r2
 8001346:	d12b      	bne.n	80013a0 <main+0xe4>
				  {
					  // Get the PWM value from the desired channel
					  // and subtract 25% from it
					  int val = getPWM(i+1);
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff75 	bl	8001240 <getPWM>
 8001356:	4603      	mov	r3, r0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
					  val = val - (4096/4);
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
					  if (val < 0)
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	2b00      	cmp	r3, #0
 8001366:	da01      	bge.n	800136c <main+0xb0>
						  val = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
					  if (val == 0)
 800136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136e:	2b00      	cmp	r3, #0
 8001370:	d108      	bne.n	8001384 <main+0xc8>
						  setLedPWM(i+1, val);
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fee1 	bl	8001144 <setLedPWM>
 8001382:	e009      	b.n	8001398 <main+0xdc>
					  else
						  setLedPWM(i+1, (val-1));
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	3b01      	subs	r3, #1
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff fed6 	bl	8001144 <setLedPWM>
					  allDutyFlag = 0;
 8001398:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <main+0x288>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
				  	  break;
 800139e:	e0b4      	b.n	800150a <main+0x24e>
			  for (int i = 0; i < ledCount; i++)
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	3301      	adds	r3, #1
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a6:	4b68      	ldr	r3, [pc, #416]	; (8001548 <main+0x28c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbb6      	blt.n	800131e <main+0x62>
 80013b0:	e0ab      	b.n	800150a <main+0x24e>
				  }
			  }
		  }
		  else
		  {
			  if (rcvBuf[0] == '&')
 80013b2:	7d3b      	ldrb	r3, [r7, #20]
 80013b4:	2b26      	cmp	r3, #38	; 0x26
 80013b6:	d122      	bne.n	80013fe <main+0x142>
			  {
				  // Accept, convert to an integer value and set the frequency
		  		  char freqBuf[6];
		  		  HAL_UART_Receive(&huart3, freqBuf, 6, 50);
 80013b8:	f107 010c 	add.w	r1, r7, #12
 80013bc:	2332      	movs	r3, #50	; 0x32
 80013be:	2206      	movs	r2, #6
 80013c0:	485d      	ldr	r0, [pc, #372]	; (8001538 <main+0x27c>)
 80013c2:	f002 fc08 	bl	8003bd6 <HAL_UART_Receive>
			  	  setPWMFrequency(atoi(freqBuf));
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fedc 	bl	8004188 <atoi>
 80013d0:	ee07 0a90 	vmov	s15, r0
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	f7ff fdce 	bl	8000f7c <setPWMFrequency>
			  	  // clear buff
			  	  for (int i = 0; i < sizeof(freqBuf)/sizeof(freqBuf[0]); i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	e008      	b.n	80013f8 <main+0x13c>
			  		  freqBuf[i] = 0;
 80013e6:	f107 020c 	add.w	r2, r7, #12
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	4413      	add	r3, r2
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
			  	  for (int i = 0; i < sizeof(freqBuf)/sizeof(freqBuf[0]); i++)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3301      	adds	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d9f3      	bls.n	80013e6 <main+0x12a>
			  }
			  if (rcvBuf[0] == '$')
 80013fe:	7d3b      	ldrb	r3, [r7, #20]
 8001400:	2b24      	cmp	r3, #36	; 0x24
 8001402:	d11e      	bne.n	8001442 <main+0x186>
			  {
				  // Accept, convert to an integer value and set the duty cycle
			  	  char pwmBuf[6];
			  	  HAL_UART_Receive(&huart3, pwmBuf, 6, 50);
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	2332      	movs	r3, #50	; 0x32
 8001408:	2206      	movs	r2, #6
 800140a:	484b      	ldr	r0, [pc, #300]	; (8001538 <main+0x27c>)
 800140c:	f002 fbe3 	bl	8003bd6 <HAL_UART_Receive>
			  	  setAllLedPWM(atoi(pwmBuf));
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f002 feb8 	bl	8004188 <atoi>
 8001418:	4603      	mov	r3, r0
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fee1 	bl	80011e2 <setAllLedPWM>
			  	  allDutyFlag = 1;
 8001420:	4b48      	ldr	r3, [pc, #288]	; (8001544 <main+0x288>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
			  	  // clear buff
			  	  for (int i = 0; i < sizeof(pwmBuf)/sizeof(pwmBuf[0]); i++)
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	e007      	b.n	800143c <main+0x180>
			  		  pwmBuf[i] = 0;
 800142c:	1d3a      	adds	r2, r7, #4
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	4413      	add	r3, r2
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
			  	  for (int i = 0; i < sizeof(pwmBuf)/sizeof(pwmBuf[0]); i++)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	3301      	adds	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d9f4      	bls.n	800142c <main+0x170>
			  }
			  if (rcvBuf[0] == '*')
 8001442:	7d3b      	ldrb	r3, [r7, #20]
 8001444:	2b2a      	cmp	r3, #42	; 0x2a
 8001446:	d104      	bne.n	8001452 <main+0x196>
			  {
			  	  sleepPCA();
 8001448:	f7ff fd6b 	bl	8000f22 <sleepPCA>
			  	  sleepFlag = 1;
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <main+0x290>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
			  }
			  if (rcvBuf[0] == '+')
 8001452:	7d3b      	ldrb	r3, [r7, #20]
 8001454:	2b2b      	cmp	r3, #43	; 0x2b
 8001456:	d104      	bne.n	8001462 <main+0x1a6>
			  {
			  	  wakeupPCA();
 8001458:	f7ff fd7b 	bl	8000f52 <wakeupPCA>
			  	  sleepFlag = 0;
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <main+0x290>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
		  	  }
			  if (rcvBuf[0] == '5')
 8001462:	7d3b      	ldrb	r3, [r7, #20]
 8001464:	2b35      	cmp	r3, #53	; 0x35
 8001466:	d117      	bne.n	8001498 <main+0x1dc>
			  {
				  allLedOffFlag = !allLedOffFlag;
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <main+0x294>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <main+0x294>)
 8001484:	701a      	strb	r2, [r3, #0]
				  if (allLedOffFlag)
 8001486:	4b32      	ldr	r3, [pc, #200]	; (8001550 <main+0x294>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <main+0x1d8>
					  setAllLedOff();
 800148e:	f7ff ff0d 	bl	80012ac <setAllLedOff>
 8001492:	e001      	b.n	8001498 <main+0x1dc>
				  else
					  setAllLedOn();
 8001494:	f7ff ff01 	bl	800129a <setAllLedOn>
			  }
			  if (rcvBuf[0] == '0')
 8001498:	7d3b      	ldrb	r3, [r7, #20]
 800149a:	2b30      	cmp	r3, #48	; 0x30
 800149c:	d101      	bne.n	80014a2 <main+0x1e6>
				  resetDevice();
 800149e:	f7ff fd35 	bl	8000f0c <resetDevice>

			  for (int i = 0; i < ledCount; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e02b      	b.n	8001500 <main+0x244>
			  {


				  if (ledCMD[i] == rcvBuf[0])
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <main+0x284>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	7d3b      	ldrb	r3, [r7, #20]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d121      	bne.n	80014fa <main+0x23e>
				  {
					  // Get the PWM value from the desired channel
					  // and add 25% to it
					  int val = getPWM(i+1);
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff febe 	bl	8001240 <getPWM>
 80014c4:	4603      	mov	r3, r0
 80014c6:	61bb      	str	r3, [r7, #24]
				  	  val = val + (4096/4);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014ce:	61bb      	str	r3, [r7, #24]
				  	  if (val > 4096)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d6:	dd02      	ble.n	80014de <main+0x222>
				  		  val = 4096;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	61bb      	str	r3, [r7, #24]
				  	  setLedPWM(i+1, (val-1));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f7ff fe29 	bl	8001144 <setLedPWM>
				  	  allDutyFlag = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <main+0x288>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			  		  break;
 80014f8:	e007      	b.n	800150a <main+0x24e>
			  for (int i = 0; i < ledCount; i++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <main+0x28c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbce      	blt.n	80014a8 <main+0x1ec>
				  }
			  }
		  }
		  // Anti-rattle protection
		  if((HAL_GetTick() - sendTimer) > 300)
 800150a:	f000 fbdb 	bl	8001cc4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <main+0x298>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800151a:	d906      	bls.n	800152a <main+0x26e>
		  {
			  sendState();
 800151c:	f000 f922 	bl	8001764 <sendState>
			  sendTimer = HAL_GetTick();
 8001520:	f000 fbd0 	bl	8001cc4 <HAL_GetTick>
 8001524:	4603      	mov	r3, r0
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <main+0x298>)
 8001528:	6013      	str	r3, [r2, #0]
		  }
		  // clear buff
	  	  rcvBuf[0] = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	753b      	strb	r3, [r7, #20]
  {
 800152e:	e6de      	b.n	80012ee <main+0x32>
 8001530:	20000154 	.word	0x20000154
 8001534:	43fa0000 	.word	0x43fa0000
 8001538:	20000110 	.word	0x20000110
 800153c:	080055ac 	.word	0x080055ac
 8001540:	20000004 	.word	0x20000004
 8001544:	200000a0 	.word	0x200000a0
 8001548:	20000000 	.word	0x20000000
 800154c:	200000a1 	.word	0x200000a1
 8001550:	200000a2 	.word	0x200000a2
 8001554:	200000a4 	.word	0x200000a4

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b094      	sub	sp, #80	; 0x50
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fe4a 	bl	8004200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <SystemClock_Config+0xb4>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <SystemClock_Config+0xb4>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <SystemClock_Config+0xb4>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <SystemClock_Config+0xb8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <SystemClock_Config+0xb8>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <SystemClock_Config+0xb8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015bc:	2310      	movs	r3, #16
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fddd 	bl	8003188 <HAL_RCC_OscConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015d4:	f000 f948 	bl	8001868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f840 	bl	8003678 <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015fe:	f000 f933 	bl	8001868 <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3750      	adds	r7, #80	; 0x50
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C1_Init+0x50>)
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_I2C1_Init+0x54>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C1_Init+0x50>)
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_I2C1_Init+0x58>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_I2C1_Init+0x50>)
 8001632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_I2C1_Init+0x50>)
 8001652:	f000 fe03 	bl	800225c <HAL_I2C_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800165c:	f000 f904 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000154 	.word	0x20000154
 8001668:	40005400 	.word	0x40005400
 800166c:	000186a0 	.word	0x000186a0

08001670 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART3_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 80016a8:	f002 f9b6 	bl	8003a18 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f8d9 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000110 	.word	0x20000110
 80016c0:	40004800 	.word	0x40004800

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_GPIO_Init+0x98>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <MX_GPIO_Init+0x98>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_GPIO_Init+0x98>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_GPIO_Init+0x98>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <MX_GPIO_Init+0x98>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_GPIO_Init+0x98>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_GPIO_Init+0x98>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <MX_GPIO_Init+0x98>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_GPIO_Init+0x98>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <MX_GPIO_Init+0x9c>)
 8001734:	f000 fd78 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4619      	mov	r1, r3
 800174e:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_GPIO_Init+0x9c>)
 8001750:	f000 fbce 	bl	8001ef0 <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40020400 	.word	0x40020400

08001764 <sendState>:

/* USER CODE BEGIN 4 */

void sendState()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0a2      	sub	sp, #136	; 0x88
 8001768:	af02      	add	r7, sp, #8
	char str[76];
	str[0] = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3020 	strb.w	r3, [r7, #32]
	int freq;
	int dutyCycle;;
	int sleepMode;

	freq = getPWMFrequency();
 8001770:	f7ff fcac 	bl	80010cc <getPWMFrequency>
 8001774:	4603      	mov	r3, r0
 8001776:	673b      	str	r3, [r7, #112]	; 0x70
	if (allDutyFlag)
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <sendState+0xec>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <sendState+0x28>
		dutyCycle = getPWM(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fd5d 	bl	8001240 <getPWM>
 8001786:	4603      	mov	r3, r0
 8001788:	67fb      	str	r3, [r7, #124]	; 0x7c
 800178a:	e002      	b.n	8001792 <sendState+0x2e>
	else
		// show that dutyCycle is not equal for all channels
		dutyCycle = 9999;
 800178c:	f242 730f 	movw	r3, #9999	; 0x270f
 8001790:	67fb      	str	r3, [r7, #124]	; 0x7c
	sleepMode = sleepFlag;
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <sendState+0xf0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	66fb      	str	r3, [r7, #108]	; 0x6c
	// Get the PWM value
	uint16_t ledPWM[16];
	for (int i = 0; i < sizeof(ledPWM) / sizeof(ledPWM[0]); i++)
 8001798:	2300      	movs	r3, #0
 800179a:	67bb      	str	r3, [r7, #120]	; 0x78
 800179c:	e012      	b.n	80017c4 <sendState+0x60>
		ledPWM[i] = getPWM(i+1);
 800179e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fd4a 	bl	8001240 <getPWM>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80017b8:	440b      	add	r3, r1
 80017ba:	f823 2c80 	strh.w	r2, [r3, #-128]
	for (int i = 0; i < sizeof(ledPWM) / sizeof(ledPWM[0]); i++)
 80017be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c0:	3301      	adds	r3, #1
 80017c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80017c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d9e9      	bls.n	800179e <sendState+0x3a>
	// Form a string
	for(int i = 0; i < sizeof(ledPWM) / sizeof(ledPWM[0]); ++i)
 80017ca:	2300      	movs	r3, #0
 80017cc:	677b      	str	r3, [r7, #116]	; 0x74
 80017ce:	e016      	b.n	80017fe <sendState+0x9a>
	{
			  sprintf(str + strlen(str), "%04d", ledPWM[i]);
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fcfb 	bl	80001d0 <strlen>
 80017da:	4602      	mov	r2, r0
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	1898      	adds	r0, r3, r2
 80017e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80017ea:	4413      	add	r3, r2
 80017ec:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4919      	ldr	r1, [pc, #100]	; (8001858 <sendState+0xf4>)
 80017f4:	f002 fd24 	bl	8004240 <siprintf>
	for(int i = 0; i < sizeof(ledPWM) / sizeof(ledPWM[0]); ++i)
 80017f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017fa:	3301      	adds	r3, #1
 80017fc:	677b      	str	r3, [r7, #116]	; 0x74
 80017fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d9e5      	bls.n	80017d0 <sendState+0x6c>
	}

	sprintf(str + strlen(str), "%04d%04d%04d",freq,dutyCycle,sleepMode);
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fce1 	bl	80001d0 <strlen>
 800180e:	4602      	mov	r2, r0
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	1898      	adds	r0, r3, r2
 8001816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800181c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800181e:	490f      	ldr	r1, [pc, #60]	; (800185c <sendState+0xf8>)
 8001820:	f002 fd0e 	bl	8004240 <siprintf>
	printf("%i\n", strlen(str));
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcd1 	bl	80001d0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	480b      	ldr	r0, [pc, #44]	; (8001860 <sendState+0xfc>)
 8001834:	f002 fcec 	bl	8004210 <iprintf>
	// Send by UART
	HAL_UART_Transmit(&huart3, (uint8_t *)&str, sizeof(str), 10);
 8001838:	f107 0120 	add.w	r1, r7, #32
 800183c:	230a      	movs	r3, #10
 800183e:	224c      	movs	r2, #76	; 0x4c
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <sendState+0x100>)
 8001842:	f002 f936 	bl	8003ab2 <HAL_UART_Transmit>


}
 8001846:	bf00      	nop
 8001848:	3780      	adds	r7, #128	; 0x80
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200000a0 	.word	0x200000a0
 8001854:	200000a1 	.word	0x200000a1
 8001858:	08005578 	.word	0x08005578
 800185c:	08005580 	.word	0x08005580
 8001860:	08005590 	.word	0x08005590
 8001864:	20000110 	.word	0x20000110

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_MspInit+0x4c>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_I2C_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12c      	bne.n	8001940 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_I2C_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_I2C_MspInit+0x88>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_I2C_MspInit+0x88>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001902:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001908:	2312      	movs	r3, #18
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001914:	2304      	movs	r3, #4
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <HAL_I2C_MspInit+0x8c>)
 8001920:	f000 fae6 	bl	8001ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_I2C_MspInit+0x88>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_I2C_MspInit+0x88>)
 800192e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_I2C_MspInit+0x88>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40005400 	.word	0x40005400
 800194c:	40023800 	.word	0x40023800
 8001950:	40020400 	.word	0x40020400

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0x84>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12c      	bne.n	80019d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_UART_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x88>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c0:	2307      	movs	r3, #7
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x8c>)
 80019cc:	f000 fa90 	bl	8001ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40004800 	.word	0x40004800
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f934 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e00a      	b.n	8001a60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a4a:	f3af 8000 	nop.w
 8001a4e:	4601      	mov	r1, r0
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	b2ca      	uxtb	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf0      	blt.n	8001a4a <_read+0x12>
	}

return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e009      	b.n	8001a98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	60ba      	str	r2, [r7, #8]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbf1      	blt.n	8001a84 <_write+0x12>
	}
	return len;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_close>:

int _close(int file)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_isatty>:

int _isatty(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	return 0;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f002 fb24 	bl	8004190 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20020000 	.word	0x20020000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	200000a8 	.word	0x200000a8
 8001b7c:	200001c0 	.word	0x200001c0

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001baa:	490e      	ldr	r1, [pc, #56]	; (8001be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bac:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc0:	4c0b      	ldr	r4, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bce:	f7ff ffd7 	bl	8001b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 fae3 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7ff fb71 	bl	80012bc <main>
  bx  lr    
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001be8:	08005758 	.word	0x08005758
  ldr r2, =_sbss
 8001bec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001bf0:	200001bc 	.word	0x200001bc

08001bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_Init+0x40>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_Init+0x40>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x40>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f931 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fe22 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f93b 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f000 f911 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000014 	.word	0x20000014
 8001c94:	2000001c 	.word	0x2000001c
 8001c98:	20000018 	.word	0x20000018

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000001c 	.word	0x2000001c
 8001cc0:	200001a8 	.word	0x200001a8

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200001a8 	.word	0x200001a8

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000001c 	.word	0x2000001c

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e68:	f7ff ff8e 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff47 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff5c 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff8e 	bl	8001ddc <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5d 	bl	8001d88 <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffb0 	bl	8001e44 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e16b      	b.n	80021e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 815a 	bne.w	80021de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d123      	bne.n	8002034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80b4 	beq.w	80021de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b60      	ldr	r3, [pc, #384]	; (80021fc <HAL_GPIO_Init+0x30c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a5f      	ldr	r2, [pc, #380]	; (80021fc <HAL_GPIO_Init+0x30c>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <HAL_GPIO_Init+0x30c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a5b      	ldr	r2, [pc, #364]	; (8002200 <HAL_GPIO_Init+0x310>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_GPIO_Init+0x314>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_Init+0x226>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a51      	ldr	r2, [pc, #324]	; (8002208 <HAL_GPIO_Init+0x318>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_Init+0x222>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a50      	ldr	r2, [pc, #320]	; (800220c <HAL_GPIO_Init+0x31c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_Init+0x21e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <HAL_GPIO_Init+0x320>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_GPIO_Init+0x324>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4d      	ldr	r2, [pc, #308]	; (8002218 <HAL_GPIO_Init+0x328>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_GPIO_Init+0x32c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_Init+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_GPIO_Init+0x330>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_Init+0x20a>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00e      	b.n	8002118 <HAL_GPIO_Init+0x228>
 80020fa:	2308      	movs	r3, #8
 80020fc:	e00c      	b.n	8002118 <HAL_GPIO_Init+0x228>
 80020fe:	2306      	movs	r3, #6
 8002100:	e00a      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002102:	2305      	movs	r3, #5
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002106:	2304      	movs	r3, #4
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x228>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x228>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002116:	2300      	movs	r3, #0
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002128:	4935      	ldr	r1, [pc, #212]	; (8002200 <HAL_GPIO_Init+0x310>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_GPIO_Init+0x334>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215a:	4a32      	ldr	r2, [pc, #200]	; (8002224 <HAL_GPIO_Init+0x334>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_GPIO_Init+0x334>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_GPIO_Init+0x334>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_GPIO_Init+0x334>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_GPIO_Init+0x334>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_GPIO_Init+0x334>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_GPIO_Init+0x334>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	f67f ae90 	bls.w	8001f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40021400 	.word	0x40021400
 800221c:	40021800 	.word	0x40021800
 8002220:	40021c00 	.word	0x40021c00
 8002224:	40013c00 	.word	0x40013c00

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e12b      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fb1e 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c0:	f001 fb82 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 80022c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a81      	ldr	r2, [pc, #516]	; (80024d0 <HAL_I2C_Init+0x274>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d807      	bhi.n	80022e0 <HAL_I2C_Init+0x84>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_I2C_Init+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e006      	b.n	80022ee <HAL_I2C_Init+0x92>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a7d      	ldr	r2, [pc, #500]	; (80024d8 <HAL_I2C_Init+0x27c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0e7      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a78      	ldr	r2, [pc, #480]	; (80024dc <HAL_I2C_Init+0x280>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_I2C_Init+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d802      	bhi.n	8002330 <HAL_I2C_Init+0xd4>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3301      	adds	r3, #1
 800232e:	e009      	b.n	8002344 <HAL_I2C_Init+0xe8>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a69      	ldr	r2, [pc, #420]	; (80024e0 <HAL_I2C_Init+0x284>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	3301      	adds	r3, #1
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	495c      	ldr	r1, [pc, #368]	; (80024d0 <HAL_I2C_Init+0x274>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d819      	bhi.n	8002398 <HAL_I2C_Init+0x13c>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e59      	subs	r1, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002378:	400b      	ands	r3, r1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_I2C_Init+0x138>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e59      	subs	r1, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fbb1 f3f3 	udiv	r3, r1, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	e051      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002394:	2304      	movs	r3, #4
 8002396:	e04f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_I2C_Init+0x168>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Init+0x18e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x196>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <HAL_I2C_Init+0x1bc>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e58      	subs	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	6809      	ldr	r1, [r1, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6911      	ldr	r1, [r2, #16]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff fbe4 	bl	8001cc4 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80e0 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4970      	ldr	r1, [pc, #448]	; (80026d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fc58 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e0d3      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x50>
 8002530:	2302      	movs	r3, #2
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d007      	beq.n	800255a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2210      	movs	r2, #16
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_I2C_Master_Transmit+0x1f8>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fac2 	bl	8002b2c <I2C_MasterRequestWrite>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025c8:	e066      	b.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fcd2 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_I2C_Master_Transmit+0x188>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fcc2 	bl	8002ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d194      	bne.n	80025ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
 80026f0:	4613      	mov	r3, r2
 80026f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fae6 	bl	8001cc4 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f040 820b 	bne.w	8002b1e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2319      	movs	r3, #25
 800270e:	2201      	movs	r2, #1
 8002710:	497c      	ldr	r1, [pc, #496]	; (8002904 <HAL_I2C_Master_Receive+0x224>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fb5a 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e1fe      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_Master_Receive+0x50>
 800272c:	2302      	movs	r3, #2
 800272e:	e1f7      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d007      	beq.n	8002756 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2222      	movs	r2, #34	; 0x22
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2210      	movs	r2, #16
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a5c      	ldr	r2, [pc, #368]	; (8002908 <HAL_I2C_Master_Receive+0x228>)
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fa46 	bl	8002c30 <I2C_MasterRequestRead>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1b8      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d113      	bne.n	80027de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	623b      	str	r3, [r7, #32]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e18c      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d11b      	bne.n	800281e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e16c      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11b      	bne.n	800285e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	e14c      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002884:	e138      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b03      	cmp	r3, #3
 800288c:	f200 80f1 	bhi.w	8002a72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002894:	2b01      	cmp	r3, #1
 8002896:	d123      	bne.n	80028e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fbed 	bl	800307c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e139      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028de:	e10b      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d14e      	bne.n	8002986 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	2200      	movs	r2, #0
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <HAL_I2C_Master_Receive+0x22c>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fa6a 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e10e      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000
 800290c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002984:	e0b8      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	2200      	movs	r2, #0
 800298e:	4966      	ldr	r1, [pc, #408]	; (8002b28 <HAL_I2C_Master_Receive+0x448>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fa1b 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0bf      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	2200      	movs	r2, #0
 80029ea:	494f      	ldr	r1, [pc, #316]	; (8002b28 <HAL_I2C_Master_Receive+0x448>)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f9ed 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e091      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a70:	e042      	b.n	8002af8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fb00 	bl	800307c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e04c      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d118      	bne.n	8002af8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f aec2 	bne.w	8002886 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010004 	.word	0x00010004

08002b2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d006      	beq.n	8002b56 <I2C_MasterRequestWrite+0x2a>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d003      	beq.n	8002b56 <I2C_MasterRequestWrite+0x2a>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b54:	d108      	bne.n	8002b68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e00b      	b.n	8002b80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	2b12      	cmp	r3, #18
 8002b6e:	d107      	bne.n	8002b80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f91d 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00d      	beq.n	8002bb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba6:	d103      	bne.n	8002bb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e035      	b.n	8002c20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bbc:	d108      	bne.n	8002bd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bcc:	611a      	str	r2, [r3, #16]
 8002bce:	e01b      	b.n	8002c08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	11db      	asrs	r3, r3, #7
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0306 	and.w	r3, r3, #6
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f063 030f 	orn	r3, r3, #15
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	490e      	ldr	r1, [pc, #56]	; (8002c28 <I2C_MasterRequestWrite+0xfc>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f943 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e010      	b.n	8002c20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bfe:	897b      	ldrh	r3, [r7, #10]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <I2C_MasterRequestWrite+0x100>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f933 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00010008 	.word	0x00010008
 8002c2c:	00010002 	.word	0x00010002

08002c30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d006      	beq.n	8002c6a <I2C_MasterRequestRead+0x3a>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d003      	beq.n	8002c6a <I2C_MasterRequestRead+0x3a>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c68:	d108      	bne.n	8002c7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00b      	b.n	8002c94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	2b11      	cmp	r3, #17
 8002c82:	d107      	bne.n	8002c94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f893 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d103      	bne.n	8002cc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e079      	b.n	8002dbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd0:	d108      	bne.n	8002ce4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	e05f      	b.n	8002da4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	11db      	asrs	r3, r3, #7
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 0306 	and.w	r3, r3, #6
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f063 030f 	orn	r3, r3, #15
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4930      	ldr	r1, [pc, #192]	; (8002dc4 <I2C_MasterRequestRead+0x194>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f8b9 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e054      	b.n	8002dbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4929      	ldr	r1, [pc, #164]	; (8002dc8 <I2C_MasterRequestRead+0x198>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8a9 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e044      	b.n	8002dbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f831 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7e:	d103      	bne.n	8002d88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e017      	b.n	8002dbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d8c:	897b      	ldrh	r3, [r7, #10]
 8002d8e:	11db      	asrs	r3, r3, #7
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 0306 	and.w	r3, r3, #6
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f063 030e 	orn	r3, r3, #14
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <I2C_MasterRequestRead+0x198>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f865 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010008 	.word	0x00010008
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e025      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe ff6d 	bl	8001cc4 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e023      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	e00c      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0b6      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	e051      	b.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d123      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e046      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe feeb 	bl	8001cc4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e00b      	b.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d18d      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8ce 	bl	8003128 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02d      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f9c:	d021      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fe91 	bl	8001cc4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d1ca      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003006:	e02d      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f88d 	bl	8003128 <I2C_IsAcknowledgeFailed>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02d      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800301e:	d021      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe fe50 	bl	8001cc4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ca      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003088:	e042      	b.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b10      	cmp	r3, #16
 8003096:	d119      	bne.n	80030cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0210 	mvn.w	r2, #16
 80030a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e029      	b.n	8003120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7fe fdfa 	bl	8001cc4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d1b5      	bne.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d11b      	bne.n	8003178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e264      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d075      	beq.n	8003292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	4ba3      	ldr	r3, [pc, #652]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00c      	beq.n	80031cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b9d      	ldr	r3, [pc, #628]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b99      	ldr	r3, [pc, #612]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05b      	beq.n	8003290 <HAL_RCC_OscConfig+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d157      	bne.n	8003290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e23f      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x74>
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a90      	ldr	r2, [pc, #576]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a8a      	ldr	r2, [pc, #552]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a83      	ldr	r2, [pc, #524]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b81      	ldr	r3, [pc, #516]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fd40 	bl	8001cc4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fd3c 	bl	8001cc4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e204      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fd2c 	bl	8001cc4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fd28 	bl	8001cc4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1f0      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xe8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1c4      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4952      	ldr	r1, [pc, #328]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <HAL_RCC_OscConfig+0x2b0>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fce1 	bl	8001cc4 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003306:	f7fe fcdd 	bl	8001cc4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1a5      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4940      	ldr	r1, [pc, #256]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_OscConfig+0x2b0>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fcc0 	bl	8001cc4 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fe fcbc 	bl	8001cc4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e184      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_OscConfig+0x2b4>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe fca0 	bl	8001cc4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe fc9c 	bl	8001cc4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e164      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x200>
 80033a6:	e015      	b.n	80033d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_OscConfig+0x2b4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fc89 	bl	8001cc4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe fc85 	bl	8001cc4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e14d      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a0 	beq.w	8003522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d121      	bne.n	8003462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe fc4b 	bl	8001cc4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e011      	b.n	8003456 <HAL_RCC_OscConfig+0x2ce>
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	42470000 	.word	0x42470000
 800343c:	42470e80 	.word	0x42470e80
 8003440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fe fc3e 	bl	8001cc4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e106      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCC_OscConfig+0x4e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x2f0>
 800346a:	4b81      	ldr	r3, [pc, #516]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a80      	ldr	r2, [pc, #512]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x32a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x312>
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a77      	ldr	r2, [pc, #476]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x32a>
 800349a:	4b75      	ldr	r3, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a74      	ldr	r2, [pc, #464]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a71      	ldr	r2, [pc, #452]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fe fc03 	bl	8001cc4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe fbff 	bl	8001cc4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0c5      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x33a>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fbed 	bl	8001cc4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fbe9 	bl	8001cc4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0af      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b56      	ldr	r3, [pc, #344]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a55      	ldr	r2, [pc, #340]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 809b 	beq.w	8003662 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d05c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d141      	bne.n	80035c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fbbd 	bl	8001cc4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fbb9 	bl	8001cc4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e081      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	4937      	ldr	r1, [pc, #220]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fb92 	bl	8001cc4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fb8e 	bl	8001cc4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e056      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x41c>
 80035c2:	e04e      	b.n	8003662 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_OscConfig+0x4ec>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fb7b 	bl	8001cc4 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe fb77 	bl	8001cc4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e03f      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x44a>
 80035f0:	e037      	b.n	8003662 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e032      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d028      	beq.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d121      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d11a      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003634:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d107      	bne.n	800365e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40007000 	.word	0x40007000
 8003670:	40023800 	.word	0x40023800
 8003674:	42470060 	.word	0x42470060

08003678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0cc      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d90c      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d044      	beq.n	8003798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d119      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	2b03      	cmp	r3, #3
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e067      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4934      	ldr	r1, [pc, #208]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003768:	f7fe faac 	bl	8001cc4 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fe faa8 	bl	8001cc4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e04f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d20c      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fa0c 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00
 8003834:	40023800 	.word	0x40023800
 8003838:	08005594 	.word	0x08005594
 800383c:	20000014 	.word	0x20000014
 8003840:	20000018 	.word	0x20000018

08003844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800384a:	2100      	movs	r1, #0
 800384c:	6079      	str	r1, [r7, #4]
 800384e:	2100      	movs	r1, #0
 8003850:	60f9      	str	r1, [r7, #12]
 8003852:	2100      	movs	r1, #0
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003856:	2100      	movs	r1, #0
 8003858:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385a:	4952      	ldr	r1, [pc, #328]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800385c:	6889      	ldr	r1, [r1, #8]
 800385e:	f001 010c 	and.w	r1, r1, #12
 8003862:	2908      	cmp	r1, #8
 8003864:	d00d      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x3e>
 8003866:	2908      	cmp	r1, #8
 8003868:	f200 8094 	bhi.w	8003994 <HAL_RCC_GetSysClockFreq+0x150>
 800386c:	2900      	cmp	r1, #0
 800386e:	d002      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x32>
 8003870:	2904      	cmp	r1, #4
 8003872:	d003      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x38>
 8003874:	e08e      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003876:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003878:	60bb      	str	r3, [r7, #8]
       break;
 800387a:	e08e      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCC_GetSysClockFreq+0x168>)
 800387e:	60bb      	str	r3, [r7, #8]
      break;
 8003880:	e08b      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003882:	4948      	ldr	r1, [pc, #288]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003884:	6849      	ldr	r1, [r1, #4]
 8003886:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800388a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800388c:	4945      	ldr	r1, [pc, #276]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800388e:	6849      	ldr	r1, [r1, #4]
 8003890:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003894:	2900      	cmp	r1, #0
 8003896:	d024      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003898:	4942      	ldr	r1, [pc, #264]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800389a:	6849      	ldr	r1, [r1, #4]
 800389c:	0989      	lsrs	r1, r1, #6
 800389e:	4608      	mov	r0, r1
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038a8:	f04f 0500 	mov.w	r5, #0
 80038ac:	ea00 0204 	and.w	r2, r0, r4
 80038b0:	ea01 0305 	and.w	r3, r1, r5
 80038b4:	493d      	ldr	r1, [pc, #244]	; (80039ac <HAL_RCC_GetSysClockFreq+0x168>)
 80038b6:	fb01 f003 	mul.w	r0, r1, r3
 80038ba:	2100      	movs	r1, #0
 80038bc:	fb01 f102 	mul.w	r1, r1, r2
 80038c0:	1844      	adds	r4, r0, r1
 80038c2:	493a      	ldr	r1, [pc, #232]	; (80039ac <HAL_RCC_GetSysClockFreq+0x168>)
 80038c4:	fba2 0101 	umull	r0, r1, r2, r1
 80038c8:	1863      	adds	r3, r4, r1
 80038ca:	4619      	mov	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f7fd f912 	bl	8000afc <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e04a      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	ea02 0400 	and.w	r4, r2, r0
 80038fa:	ea03 0501 	and.w	r5, r3, r1
 80038fe:	4620      	mov	r0, r4
 8003900:	4629      	mov	r1, r5
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	014b      	lsls	r3, r1, #5
 800390c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003910:	0142      	lsls	r2, r0, #5
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	1b00      	subs	r0, r0, r4
 8003918:	eb61 0105 	sbc.w	r1, r1, r5
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	018b      	lsls	r3, r1, #6
 8003926:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800392a:	0182      	lsls	r2, r0, #6
 800392c:	1a12      	subs	r2, r2, r0
 800392e:	eb63 0301 	sbc.w	r3, r3, r1
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	00d9      	lsls	r1, r3, #3
 800393c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003940:	00d0      	lsls	r0, r2, #3
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	1912      	adds	r2, r2, r4
 8003948:	eb45 0303 	adc.w	r3, r5, r3
 800394c:	f04f 0000 	mov.w	r0, #0
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	0299      	lsls	r1, r3, #10
 8003956:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800395a:	0290      	lsls	r0, r2, #10
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	461a      	mov	r2, r3
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	f7fd f8c6 	bl	8000afc <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	3301      	adds	r3, #1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	60bb      	str	r3, [r7, #8]
      break;
 8003992:	e002      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003996:	60bb      	str	r3, [r7, #8]
      break;
 8003998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399a:	68bb      	ldr	r3, [r7, #8]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bdb0      	pop	{r4, r5, r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	017d7840 	.word	0x017d7840

080039b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000014 	.word	0x20000014

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039cc:	f7ff fff0 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	080055a4 	.word	0x080055a4

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039f4:	f7ff ffdc 	bl	80039b0 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0b5b      	lsrs	r3, r3, #13
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	080055a4 	.word	0x080055a4

08003a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e03f      	b.n	8003aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd ff88 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f9cb 	bl	8003df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b08a      	sub	sp, #40	; 0x28
 8003ab6:	af02      	add	r7, sp, #8
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d17c      	bne.n	8003bcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_Transmit+0x2c>
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e075      	b.n	8003bce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x3e>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e06e      	b.n	8003bce <HAL_UART_Transmit+0x11c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2221      	movs	r2, #33	; 0x21
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b06:	f7fe f8dd 	bl	8001cc4 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	88fa      	ldrh	r2, [r7, #6]
 8003b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d108      	bne.n	8003b34 <HAL_UART_Transmit+0x82>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e003      	b.n	8003b3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b44:	e02a      	b.n	8003b9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f8e2 	bl	8003d1a <UART_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e036      	b.n	8003bce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3302      	adds	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e007      	b.n	8003b8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1cf      	bne.n	8003b46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2140      	movs	r1, #64	; 0x40
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f8b2 	bl	8003d1a <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b08a      	sub	sp, #40	; 0x28
 8003bda:	af02      	add	r7, sp, #8
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 808c 	bne.w	8003d10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_UART_Receive+0x2e>
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e084      	b.n	8003d12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Receive+0x40>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e07d      	b.n	8003d12 <HAL_UART_Receive+0x13c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2222      	movs	r2, #34	; 0x22
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c32:	f7fe f847 	bl	8001cc4 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d108      	bne.n	8003c60 <HAL_UART_Receive+0x8a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e003      	b.n	8003c68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c70:	e043      	b.n	8003cfa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f84c 	bl	8003d1a <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e042      	b.n	8003d12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e01f      	b.n	8003cec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <HAL_UART_Receive+0xf0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_UART_Receive+0xfe>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e008      	b.n	8003ce6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1b6      	bne.n	8003c72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b090      	sub	sp, #64	; 0x40
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2a:	e050      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d32:	d04c      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3a:	f7fd ffc3 	bl	8001cc4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d241      	bcs.n	8003dce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d6a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d9e:	623a      	str	r2, [r7, #32]
 8003da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	69f9      	ldr	r1, [r7, #28]
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e5      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e00f      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d09f      	beq.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3740      	adds	r7, #64	; 0x40
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	b09f      	sub	sp, #124	; 0x7c
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	68d9      	ldr	r1, [r3, #12]
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	ea40 0301 	orr.w	r3, r0, r1
 8003e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e3c:	f021 010c 	bic.w	r1, r1, #12
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e46:	430b      	orrs	r3, r1
 8003e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	6999      	ldr	r1, [r3, #24]
 8003e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	ea40 0301 	orr.w	r3, r0, r1
 8003e60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4bc5      	ldr	r3, [pc, #788]	; (800417c <UART_SetConfig+0x384>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d004      	beq.n	8003e76 <UART_SetConfig+0x7e>
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4bc3      	ldr	r3, [pc, #780]	; (8004180 <UART_SetConfig+0x388>)
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d103      	bne.n	8003e7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e76:	f7ff fdbb 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8003e7a:	6778      	str	r0, [r7, #116]	; 0x74
 8003e7c:	e002      	b.n	8003e84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e7e:	f7ff fda3 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8003e82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8c:	f040 80b6 	bne.w	8003ffc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e92:	461c      	mov	r4, r3
 8003e94:	f04f 0500 	mov.w	r5, #0
 8003e98:	4622      	mov	r2, r4
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	1891      	adds	r1, r2, r2
 8003e9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003ea0:	415b      	adcs	r3, r3
 8003ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ea8:	1912      	adds	r2, r2, r4
 8003eaa:	eb45 0303 	adc.w	r3, r5, r3
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	00d9      	lsls	r1, r3, #3
 8003eb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ebc:	00d0      	lsls	r0, r2, #3
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	1911      	adds	r1, r2, r4
 8003ec4:	6639      	str	r1, [r7, #96]	; 0x60
 8003ec6:	416b      	adcs	r3, r5
 8003ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ee0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ee4:	f7fc fe0a 	bl	8000afc <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4ba5      	ldr	r3, [pc, #660]	; (8004184 <UART_SetConfig+0x38c>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	011e      	lsls	r6, r3, #4
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	461c      	mov	r4, r3
 8003efa:	f04f 0500 	mov.w	r5, #0
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	1891      	adds	r1, r2, r2
 8003f04:	6339      	str	r1, [r7, #48]	; 0x30
 8003f06:	415b      	adcs	r3, r3
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f0e:	1912      	adds	r2, r2, r4
 8003f10:	eb45 0303 	adc.w	r3, r5, r3
 8003f14:	f04f 0000 	mov.w	r0, #0
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	00d9      	lsls	r1, r3, #3
 8003f1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f22:	00d0      	lsls	r0, r2, #3
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	1911      	adds	r1, r2, r4
 8003f2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f2c:	416b      	adcs	r3, r5
 8003f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f4a:	f7fc fdd7 	bl	8000afc <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4b8c      	ldr	r3, [pc, #560]	; (8004184 <UART_SetConfig+0x38c>)
 8003f54:	fba3 1302 	umull	r1, r3, r3, r2
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	2164      	movs	r1, #100	; 0x64
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	3332      	adds	r3, #50	; 0x32
 8003f66:	4a87      	ldr	r2, [pc, #540]	; (8004184 <UART_SetConfig+0x38c>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f74:	441e      	add	r6, r3
 8003f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	1894      	adds	r4, r2, r2
 8003f84:	623c      	str	r4, [r7, #32]
 8003f86:	415b      	adcs	r3, r3
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f8e:	1812      	adds	r2, r2, r0
 8003f90:	eb41 0303 	adc.w	r3, r1, r3
 8003f94:	f04f 0400 	mov.w	r4, #0
 8003f98:	f04f 0500 	mov.w	r5, #0
 8003f9c:	00dd      	lsls	r5, r3, #3
 8003f9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fa2:	00d4      	lsls	r4, r2, #3
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	1814      	adds	r4, r2, r0
 8003faa:	653c      	str	r4, [r7, #80]	; 0x50
 8003fac:	414b      	adcs	r3, r1
 8003fae:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	1891      	adds	r1, r2, r2
 8003fbc:	61b9      	str	r1, [r7, #24]
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fca:	f7fc fd97 	bl	8000afc <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <UART_SetConfig+0x38c>)
 8003fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2164      	movs	r1, #100	; 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	3332      	adds	r3, #50	; 0x32
 8003fe6:	4a67      	ldr	r2, [pc, #412]	; (8004184 <UART_SetConfig+0x38c>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	f003 0207 	and.w	r2, r3, #7
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4432      	add	r2, r6
 8003ff8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ffa:	e0b9      	b.n	8004170 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffe:	461c      	mov	r4, r3
 8004000:	f04f 0500 	mov.w	r5, #0
 8004004:	4622      	mov	r2, r4
 8004006:	462b      	mov	r3, r5
 8004008:	1891      	adds	r1, r2, r2
 800400a:	6139      	str	r1, [r7, #16]
 800400c:	415b      	adcs	r3, r3
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004014:	1912      	adds	r2, r2, r4
 8004016:	eb45 0303 	adc.w	r3, r5, r3
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	00d9      	lsls	r1, r3, #3
 8004024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004028:	00d0      	lsls	r0, r2, #3
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	eb12 0804 	adds.w	r8, r2, r4
 8004032:	eb43 0905 	adc.w	r9, r3, r5
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800404e:	0082      	lsls	r2, r0, #2
 8004050:	4640      	mov	r0, r8
 8004052:	4649      	mov	r1, r9
 8004054:	f7fc fd52 	bl	8000afc <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b49      	ldr	r3, [pc, #292]	; (8004184 <UART_SetConfig+0x38c>)
 800405e:	fba3 2302 	umull	r2, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	011e      	lsls	r6, r3, #4
 8004066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004068:	4618      	mov	r0, r3
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	1894      	adds	r4, r2, r2
 8004074:	60bc      	str	r4, [r7, #8]
 8004076:	415b      	adcs	r3, r3
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800407e:	1812      	adds	r2, r2, r0
 8004080:	eb41 0303 	adc.w	r3, r1, r3
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	f04f 0500 	mov.w	r5, #0
 800408c:	00dd      	lsls	r5, r3, #3
 800408e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004092:	00d4      	lsls	r4, r2, #3
 8004094:	4622      	mov	r2, r4
 8004096:	462b      	mov	r3, r5
 8004098:	1814      	adds	r4, r2, r0
 800409a:	64bc      	str	r4, [r7, #72]	; 0x48
 800409c:	414b      	adcs	r3, r1
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040b8:	0082      	lsls	r2, r0, #2
 80040ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040be:	f7fc fd1d 	bl	8000afc <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <UART_SetConfig+0x38c>)
 80040c8:	fba3 1302 	umull	r1, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	2164      	movs	r1, #100	; 0x64
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	3332      	adds	r3, #50	; 0x32
 80040da:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <UART_SetConfig+0x38c>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e6:	441e      	add	r6, r3
 80040e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ea:	4618      	mov	r0, r3
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	1894      	adds	r4, r2, r2
 80040f6:	603c      	str	r4, [r7, #0]
 80040f8:	415b      	adcs	r3, r3
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004100:	1812      	adds	r2, r2, r0
 8004102:	eb41 0303 	adc.w	r3, r1, r3
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	f04f 0500 	mov.w	r5, #0
 800410e:	00dd      	lsls	r5, r3, #3
 8004110:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004114:	00d4      	lsls	r4, r2, #3
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	eb12 0a00 	adds.w	sl, r2, r0
 800411e:	eb43 0b01 	adc.w	fp, r3, r1
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	008b      	lsls	r3, r1, #2
 8004136:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800413a:	0082      	lsls	r2, r0, #2
 800413c:	4650      	mov	r0, sl
 800413e:	4659      	mov	r1, fp
 8004140:	f7fc fcdc 	bl	8000afc <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <UART_SetConfig+0x38c>)
 800414a:	fba3 1302 	umull	r1, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2164      	movs	r1, #100	; 0x64
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a09      	ldr	r2, [pc, #36]	; (8004184 <UART_SetConfig+0x38c>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4432      	add	r2, r6
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	377c      	adds	r7, #124	; 0x7c
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417a:	bf00      	nop
 800417c:	40011000 	.word	0x40011000
 8004180:	40011400 	.word	0x40011400
 8004184:	51eb851f 	.word	0x51eb851f

08004188 <atoi>:
 8004188:	220a      	movs	r2, #10
 800418a:	2100      	movs	r1, #0
 800418c:	f000 b8fc 	b.w	8004388 <strtol>

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000020 	.word	0x20000020

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	; (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	; (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	; (80041e0 <__libc_init_array+0x44>)
 80041b0:	f001 f9d6 	bl	8005560 <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08005750 	.word	0x08005750
 80041d8:	08005750 	.word	0x08005750
 80041dc:	08005750 	.word	0x08005750
 80041e0:	08005754 	.word	0x08005754

080041e4 <memcpy>:
 80041e4:	440a      	add	r2, r1
 80041e6:	4291      	cmp	r1, r2
 80041e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041ec:	d100      	bne.n	80041f0 <memcpy+0xc>
 80041ee:	4770      	bx	lr
 80041f0:	b510      	push	{r4, lr}
 80041f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041fa:	4291      	cmp	r1, r2
 80041fc:	d1f9      	bne.n	80041f2 <memcpy+0xe>
 80041fe:	bd10      	pop	{r4, pc}

08004200 <memset>:
 8004200:	4402      	add	r2, r0
 8004202:	4603      	mov	r3, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	d100      	bne.n	800420a <memset+0xa>
 8004208:	4770      	bx	lr
 800420a:	f803 1b01 	strb.w	r1, [r3], #1
 800420e:	e7f9      	b.n	8004204 <memset+0x4>

08004210 <iprintf>:
 8004210:	b40f      	push	{r0, r1, r2, r3}
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <iprintf+0x2c>)
 8004214:	b513      	push	{r0, r1, r4, lr}
 8004216:	681c      	ldr	r4, [r3, #0]
 8004218:	b124      	cbz	r4, 8004224 <iprintf+0x14>
 800421a:	69a3      	ldr	r3, [r4, #24]
 800421c:	b913      	cbnz	r3, 8004224 <iprintf+0x14>
 800421e:	4620      	mov	r0, r4
 8004220:	f000 f914 	bl	800444c <__sinit>
 8004224:	ab05      	add	r3, sp, #20
 8004226:	9a04      	ldr	r2, [sp, #16]
 8004228:	68a1      	ldr	r1, [r4, #8]
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	4620      	mov	r0, r4
 800422e:	f000 fb8d 	bl	800494c <_vfiprintf_r>
 8004232:	b002      	add	sp, #8
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	b004      	add	sp, #16
 800423a:	4770      	bx	lr
 800423c:	20000020 	.word	0x20000020

08004240 <siprintf>:
 8004240:	b40e      	push	{r1, r2, r3}
 8004242:	b500      	push	{lr}
 8004244:	b09c      	sub	sp, #112	; 0x70
 8004246:	ab1d      	add	r3, sp, #116	; 0x74
 8004248:	9002      	str	r0, [sp, #8]
 800424a:	9006      	str	r0, [sp, #24]
 800424c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004250:	4809      	ldr	r0, [pc, #36]	; (8004278 <siprintf+0x38>)
 8004252:	9107      	str	r1, [sp, #28]
 8004254:	9104      	str	r1, [sp, #16]
 8004256:	4909      	ldr	r1, [pc, #36]	; (800427c <siprintf+0x3c>)
 8004258:	f853 2b04 	ldr.w	r2, [r3], #4
 800425c:	9105      	str	r1, [sp, #20]
 800425e:	6800      	ldr	r0, [r0, #0]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	a902      	add	r1, sp, #8
 8004264:	f000 fa48 	bl	80046f8 <_svfiprintf_r>
 8004268:	9b02      	ldr	r3, [sp, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	b01c      	add	sp, #112	; 0x70
 8004270:	f85d eb04 	ldr.w	lr, [sp], #4
 8004274:	b003      	add	sp, #12
 8004276:	4770      	bx	lr
 8004278:	20000020 	.word	0x20000020
 800427c:	ffff0208 	.word	0xffff0208

08004280 <_strtol_l.isra.0>:
 8004280:	2b01      	cmp	r3, #1
 8004282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004286:	d001      	beq.n	800428c <_strtol_l.isra.0+0xc>
 8004288:	2b24      	cmp	r3, #36	; 0x24
 800428a:	d906      	bls.n	800429a <_strtol_l.isra.0+0x1a>
 800428c:	f7ff ff80 	bl	8004190 <__errno>
 8004290:	2316      	movs	r3, #22
 8004292:	6003      	str	r3, [r0, #0]
 8004294:	2000      	movs	r0, #0
 8004296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429a:	4f3a      	ldr	r7, [pc, #232]	; (8004384 <_strtol_l.isra.0+0x104>)
 800429c:	468e      	mov	lr, r1
 800429e:	4676      	mov	r6, lr
 80042a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80042a4:	5de5      	ldrb	r5, [r4, r7]
 80042a6:	f015 0508 	ands.w	r5, r5, #8
 80042aa:	d1f8      	bne.n	800429e <_strtol_l.isra.0+0x1e>
 80042ac:	2c2d      	cmp	r4, #45	; 0x2d
 80042ae:	d134      	bne.n	800431a <_strtol_l.isra.0+0x9a>
 80042b0:	f89e 4000 	ldrb.w	r4, [lr]
 80042b4:	f04f 0801 	mov.w	r8, #1
 80042b8:	f106 0e02 	add.w	lr, r6, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <_strtol_l.isra.0+0xfa>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d10c      	bne.n	80042de <_strtol_l.isra.0+0x5e>
 80042c4:	2c30      	cmp	r4, #48	; 0x30
 80042c6:	d10a      	bne.n	80042de <_strtol_l.isra.0+0x5e>
 80042c8:	f89e 4000 	ldrb.w	r4, [lr]
 80042cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80042d0:	2c58      	cmp	r4, #88	; 0x58
 80042d2:	d14d      	bne.n	8004370 <_strtol_l.isra.0+0xf0>
 80042d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80042d8:	2310      	movs	r3, #16
 80042da:	f10e 0e02 	add.w	lr, lr, #2
 80042de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80042e2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80042e6:	2600      	movs	r6, #0
 80042e8:	fbbc f9f3 	udiv	r9, ip, r3
 80042ec:	4635      	mov	r5, r6
 80042ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80042f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80042f6:	2f09      	cmp	r7, #9
 80042f8:	d818      	bhi.n	800432c <_strtol_l.isra.0+0xac>
 80042fa:	463c      	mov	r4, r7
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	dd24      	ble.n	800434a <_strtol_l.isra.0+0xca>
 8004300:	2e00      	cmp	r6, #0
 8004302:	db1f      	blt.n	8004344 <_strtol_l.isra.0+0xc4>
 8004304:	45a9      	cmp	r9, r5
 8004306:	d31d      	bcc.n	8004344 <_strtol_l.isra.0+0xc4>
 8004308:	d101      	bne.n	800430e <_strtol_l.isra.0+0x8e>
 800430a:	45a2      	cmp	sl, r4
 800430c:	db1a      	blt.n	8004344 <_strtol_l.isra.0+0xc4>
 800430e:	fb05 4503 	mla	r5, r5, r3, r4
 8004312:	2601      	movs	r6, #1
 8004314:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004318:	e7eb      	b.n	80042f2 <_strtol_l.isra.0+0x72>
 800431a:	2c2b      	cmp	r4, #43	; 0x2b
 800431c:	bf08      	it	eq
 800431e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004322:	46a8      	mov	r8, r5
 8004324:	bf08      	it	eq
 8004326:	f106 0e02 	addeq.w	lr, r6, #2
 800432a:	e7c7      	b.n	80042bc <_strtol_l.isra.0+0x3c>
 800432c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004330:	2f19      	cmp	r7, #25
 8004332:	d801      	bhi.n	8004338 <_strtol_l.isra.0+0xb8>
 8004334:	3c37      	subs	r4, #55	; 0x37
 8004336:	e7e1      	b.n	80042fc <_strtol_l.isra.0+0x7c>
 8004338:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800433c:	2f19      	cmp	r7, #25
 800433e:	d804      	bhi.n	800434a <_strtol_l.isra.0+0xca>
 8004340:	3c57      	subs	r4, #87	; 0x57
 8004342:	e7db      	b.n	80042fc <_strtol_l.isra.0+0x7c>
 8004344:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004348:	e7e4      	b.n	8004314 <_strtol_l.isra.0+0x94>
 800434a:	2e00      	cmp	r6, #0
 800434c:	da05      	bge.n	800435a <_strtol_l.isra.0+0xda>
 800434e:	2322      	movs	r3, #34	; 0x22
 8004350:	6003      	str	r3, [r0, #0]
 8004352:	4665      	mov	r5, ip
 8004354:	b942      	cbnz	r2, 8004368 <_strtol_l.isra.0+0xe8>
 8004356:	4628      	mov	r0, r5
 8004358:	e79d      	b.n	8004296 <_strtol_l.isra.0+0x16>
 800435a:	f1b8 0f00 	cmp.w	r8, #0
 800435e:	d000      	beq.n	8004362 <_strtol_l.isra.0+0xe2>
 8004360:	426d      	negs	r5, r5
 8004362:	2a00      	cmp	r2, #0
 8004364:	d0f7      	beq.n	8004356 <_strtol_l.isra.0+0xd6>
 8004366:	b10e      	cbz	r6, 800436c <_strtol_l.isra.0+0xec>
 8004368:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	e7f2      	b.n	8004356 <_strtol_l.isra.0+0xd6>
 8004370:	2430      	movs	r4, #48	; 0x30
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1b3      	bne.n	80042de <_strtol_l.isra.0+0x5e>
 8004376:	2308      	movs	r3, #8
 8004378:	e7b1      	b.n	80042de <_strtol_l.isra.0+0x5e>
 800437a:	2c30      	cmp	r4, #48	; 0x30
 800437c:	d0a4      	beq.n	80042c8 <_strtol_l.isra.0+0x48>
 800437e:	230a      	movs	r3, #10
 8004380:	e7ad      	b.n	80042de <_strtol_l.isra.0+0x5e>
 8004382:	bf00      	nop
 8004384:	080055ad 	.word	0x080055ad

08004388 <strtol>:
 8004388:	4613      	mov	r3, r2
 800438a:	460a      	mov	r2, r1
 800438c:	4601      	mov	r1, r0
 800438e:	4802      	ldr	r0, [pc, #8]	; (8004398 <strtol+0x10>)
 8004390:	6800      	ldr	r0, [r0, #0]
 8004392:	f7ff bf75 	b.w	8004280 <_strtol_l.isra.0>
 8004396:	bf00      	nop
 8004398:	20000020 	.word	0x20000020

0800439c <std>:
 800439c:	2300      	movs	r3, #0
 800439e:	b510      	push	{r4, lr}
 80043a0:	4604      	mov	r4, r0
 80043a2:	e9c0 3300 	strd	r3, r3, [r0]
 80043a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043aa:	6083      	str	r3, [r0, #8]
 80043ac:	8181      	strh	r1, [r0, #12]
 80043ae:	6643      	str	r3, [r0, #100]	; 0x64
 80043b0:	81c2      	strh	r2, [r0, #14]
 80043b2:	6183      	str	r3, [r0, #24]
 80043b4:	4619      	mov	r1, r3
 80043b6:	2208      	movs	r2, #8
 80043b8:	305c      	adds	r0, #92	; 0x5c
 80043ba:	f7ff ff21 	bl	8004200 <memset>
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <std+0x38>)
 80043c0:	6263      	str	r3, [r4, #36]	; 0x24
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <std+0x3c>)
 80043c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <std+0x40>)
 80043c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <std+0x44>)
 80043cc:	6224      	str	r4, [r4, #32]
 80043ce:	6323      	str	r3, [r4, #48]	; 0x30
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	08004ef5 	.word	0x08004ef5
 80043d8:	08004f17 	.word	0x08004f17
 80043dc:	08004f4f 	.word	0x08004f4f
 80043e0:	08004f73 	.word	0x08004f73

080043e4 <_cleanup_r>:
 80043e4:	4901      	ldr	r1, [pc, #4]	; (80043ec <_cleanup_r+0x8>)
 80043e6:	f000 b8af 	b.w	8004548 <_fwalk_reent>
 80043ea:	bf00      	nop
 80043ec:	0800524d 	.word	0x0800524d

080043f0 <__sfmoreglue>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	1e4a      	subs	r2, r1, #1
 80043f4:	2568      	movs	r5, #104	; 0x68
 80043f6:	4355      	muls	r5, r2
 80043f8:	460e      	mov	r6, r1
 80043fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043fe:	f000 f8c5 	bl	800458c <_malloc_r>
 8004402:	4604      	mov	r4, r0
 8004404:	b140      	cbz	r0, 8004418 <__sfmoreglue+0x28>
 8004406:	2100      	movs	r1, #0
 8004408:	e9c0 1600 	strd	r1, r6, [r0]
 800440c:	300c      	adds	r0, #12
 800440e:	60a0      	str	r0, [r4, #8]
 8004410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004414:	f7ff fef4 	bl	8004200 <memset>
 8004418:	4620      	mov	r0, r4
 800441a:	bd70      	pop	{r4, r5, r6, pc}

0800441c <__sfp_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sfp_lock_acquire+0x8>)
 800441e:	f000 b8b3 	b.w	8004588 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	200001b4 	.word	0x200001b4

08004428 <__sfp_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__sfp_lock_release+0x8>)
 800442a:	f000 b8ae 	b.w	800458a <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	200001b4 	.word	0x200001b4

08004434 <__sinit_lock_acquire>:
 8004434:	4801      	ldr	r0, [pc, #4]	; (800443c <__sinit_lock_acquire+0x8>)
 8004436:	f000 b8a7 	b.w	8004588 <__retarget_lock_acquire_recursive>
 800443a:	bf00      	nop
 800443c:	200001af 	.word	0x200001af

08004440 <__sinit_lock_release>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__sinit_lock_release+0x8>)
 8004442:	f000 b8a2 	b.w	800458a <__retarget_lock_release_recursive>
 8004446:	bf00      	nop
 8004448:	200001af 	.word	0x200001af

0800444c <__sinit>:
 800444c:	b510      	push	{r4, lr}
 800444e:	4604      	mov	r4, r0
 8004450:	f7ff fff0 	bl	8004434 <__sinit_lock_acquire>
 8004454:	69a3      	ldr	r3, [r4, #24]
 8004456:	b11b      	cbz	r3, 8004460 <__sinit+0x14>
 8004458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445c:	f7ff bff0 	b.w	8004440 <__sinit_lock_release>
 8004460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004464:	6523      	str	r3, [r4, #80]	; 0x50
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <__sinit+0x68>)
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <__sinit+0x6c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	62a2      	str	r2, [r4, #40]	; 0x28
 800446e:	42a3      	cmp	r3, r4
 8004470:	bf04      	itt	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	61a3      	streq	r3, [r4, #24]
 8004476:	4620      	mov	r0, r4
 8004478:	f000 f820 	bl	80044bc <__sfp>
 800447c:	6060      	str	r0, [r4, #4]
 800447e:	4620      	mov	r0, r4
 8004480:	f000 f81c 	bl	80044bc <__sfp>
 8004484:	60a0      	str	r0, [r4, #8]
 8004486:	4620      	mov	r0, r4
 8004488:	f000 f818 	bl	80044bc <__sfp>
 800448c:	2200      	movs	r2, #0
 800448e:	60e0      	str	r0, [r4, #12]
 8004490:	2104      	movs	r1, #4
 8004492:	6860      	ldr	r0, [r4, #4]
 8004494:	f7ff ff82 	bl	800439c <std>
 8004498:	68a0      	ldr	r0, [r4, #8]
 800449a:	2201      	movs	r2, #1
 800449c:	2109      	movs	r1, #9
 800449e:	f7ff ff7d 	bl	800439c <std>
 80044a2:	68e0      	ldr	r0, [r4, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	2112      	movs	r1, #18
 80044a8:	f7ff ff78 	bl	800439c <std>
 80044ac:	2301      	movs	r3, #1
 80044ae:	61a3      	str	r3, [r4, #24]
 80044b0:	e7d2      	b.n	8004458 <__sinit+0xc>
 80044b2:	bf00      	nop
 80044b4:	080056b0 	.word	0x080056b0
 80044b8:	080043e5 	.word	0x080043e5

080044bc <__sfp>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	4607      	mov	r7, r0
 80044c0:	f7ff ffac 	bl	800441c <__sfp_lock_acquire>
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <__sfp+0x84>)
 80044c6:	681e      	ldr	r6, [r3, #0]
 80044c8:	69b3      	ldr	r3, [r6, #24]
 80044ca:	b913      	cbnz	r3, 80044d2 <__sfp+0x16>
 80044cc:	4630      	mov	r0, r6
 80044ce:	f7ff ffbd 	bl	800444c <__sinit>
 80044d2:	3648      	adds	r6, #72	; 0x48
 80044d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044d8:	3b01      	subs	r3, #1
 80044da:	d503      	bpl.n	80044e4 <__sfp+0x28>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	b30b      	cbz	r3, 8004524 <__sfp+0x68>
 80044e0:	6836      	ldr	r6, [r6, #0]
 80044e2:	e7f7      	b.n	80044d4 <__sfp+0x18>
 80044e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044e8:	b9d5      	cbnz	r5, 8004520 <__sfp+0x64>
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <__sfp+0x88>)
 80044ec:	60e3      	str	r3, [r4, #12]
 80044ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044f2:	6665      	str	r5, [r4, #100]	; 0x64
 80044f4:	f000 f847 	bl	8004586 <__retarget_lock_init_recursive>
 80044f8:	f7ff ff96 	bl	8004428 <__sfp_lock_release>
 80044fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004504:	6025      	str	r5, [r4, #0]
 8004506:	61a5      	str	r5, [r4, #24]
 8004508:	2208      	movs	r2, #8
 800450a:	4629      	mov	r1, r5
 800450c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004510:	f7ff fe76 	bl	8004200 <memset>
 8004514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800451c:	4620      	mov	r0, r4
 800451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004520:	3468      	adds	r4, #104	; 0x68
 8004522:	e7d9      	b.n	80044d8 <__sfp+0x1c>
 8004524:	2104      	movs	r1, #4
 8004526:	4638      	mov	r0, r7
 8004528:	f7ff ff62 	bl	80043f0 <__sfmoreglue>
 800452c:	4604      	mov	r4, r0
 800452e:	6030      	str	r0, [r6, #0]
 8004530:	2800      	cmp	r0, #0
 8004532:	d1d5      	bne.n	80044e0 <__sfp+0x24>
 8004534:	f7ff ff78 	bl	8004428 <__sfp_lock_release>
 8004538:	230c      	movs	r3, #12
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	e7ee      	b.n	800451c <__sfp+0x60>
 800453e:	bf00      	nop
 8004540:	080056b0 	.word	0x080056b0
 8004544:	ffff0001 	.word	0xffff0001

08004548 <_fwalk_reent>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4606      	mov	r6, r0
 800454e:	4688      	mov	r8, r1
 8004550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004554:	2700      	movs	r7, #0
 8004556:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800455a:	f1b9 0901 	subs.w	r9, r9, #1
 800455e:	d505      	bpl.n	800456c <_fwalk_reent+0x24>
 8004560:	6824      	ldr	r4, [r4, #0]
 8004562:	2c00      	cmp	r4, #0
 8004564:	d1f7      	bne.n	8004556 <_fwalk_reent+0xe>
 8004566:	4638      	mov	r0, r7
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456c:	89ab      	ldrh	r3, [r5, #12]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d907      	bls.n	8004582 <_fwalk_reent+0x3a>
 8004572:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004576:	3301      	adds	r3, #1
 8004578:	d003      	beq.n	8004582 <_fwalk_reent+0x3a>
 800457a:	4629      	mov	r1, r5
 800457c:	4630      	mov	r0, r6
 800457e:	47c0      	blx	r8
 8004580:	4307      	orrs	r7, r0
 8004582:	3568      	adds	r5, #104	; 0x68
 8004584:	e7e9      	b.n	800455a <_fwalk_reent+0x12>

08004586 <__retarget_lock_init_recursive>:
 8004586:	4770      	bx	lr

08004588 <__retarget_lock_acquire_recursive>:
 8004588:	4770      	bx	lr

0800458a <__retarget_lock_release_recursive>:
 800458a:	4770      	bx	lr

0800458c <_malloc_r>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	1ccd      	adds	r5, r1, #3
 8004590:	f025 0503 	bic.w	r5, r5, #3
 8004594:	3508      	adds	r5, #8
 8004596:	2d0c      	cmp	r5, #12
 8004598:	bf38      	it	cc
 800459a:	250c      	movcc	r5, #12
 800459c:	2d00      	cmp	r5, #0
 800459e:	4606      	mov	r6, r0
 80045a0:	db01      	blt.n	80045a6 <_malloc_r+0x1a>
 80045a2:	42a9      	cmp	r1, r5
 80045a4:	d903      	bls.n	80045ae <_malloc_r+0x22>
 80045a6:	230c      	movs	r3, #12
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	2000      	movs	r0, #0
 80045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ae:	f000 ff19 	bl	80053e4 <__malloc_lock>
 80045b2:	4921      	ldr	r1, [pc, #132]	; (8004638 <_malloc_r+0xac>)
 80045b4:	680a      	ldr	r2, [r1, #0]
 80045b6:	4614      	mov	r4, r2
 80045b8:	b99c      	cbnz	r4, 80045e2 <_malloc_r+0x56>
 80045ba:	4f20      	ldr	r7, [pc, #128]	; (800463c <_malloc_r+0xb0>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b923      	cbnz	r3, 80045ca <_malloc_r+0x3e>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4630      	mov	r0, r6
 80045c4:	f000 fc86 	bl	8004ed4 <_sbrk_r>
 80045c8:	6038      	str	r0, [r7, #0]
 80045ca:	4629      	mov	r1, r5
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 fc81 	bl	8004ed4 <_sbrk_r>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d123      	bne.n	800461e <_malloc_r+0x92>
 80045d6:	230c      	movs	r3, #12
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 ff08 	bl	80053f0 <__malloc_unlock>
 80045e0:	e7e3      	b.n	80045aa <_malloc_r+0x1e>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	1b5b      	subs	r3, r3, r5
 80045e6:	d417      	bmi.n	8004618 <_malloc_r+0x8c>
 80045e8:	2b0b      	cmp	r3, #11
 80045ea:	d903      	bls.n	80045f4 <_malloc_r+0x68>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	441c      	add	r4, r3
 80045f0:	6025      	str	r5, [r4, #0]
 80045f2:	e004      	b.n	80045fe <_malloc_r+0x72>
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	42a2      	cmp	r2, r4
 80045f8:	bf0c      	ite	eq
 80045fa:	600b      	streq	r3, [r1, #0]
 80045fc:	6053      	strne	r3, [r2, #4]
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 fef6 	bl	80053f0 <__malloc_unlock>
 8004604:	f104 000b 	add.w	r0, r4, #11
 8004608:	1d23      	adds	r3, r4, #4
 800460a:	f020 0007 	bic.w	r0, r0, #7
 800460e:	1ac2      	subs	r2, r0, r3
 8004610:	d0cc      	beq.n	80045ac <_malloc_r+0x20>
 8004612:	1a1b      	subs	r3, r3, r0
 8004614:	50a3      	str	r3, [r4, r2]
 8004616:	e7c9      	b.n	80045ac <_malloc_r+0x20>
 8004618:	4622      	mov	r2, r4
 800461a:	6864      	ldr	r4, [r4, #4]
 800461c:	e7cc      	b.n	80045b8 <_malloc_r+0x2c>
 800461e:	1cc4      	adds	r4, r0, #3
 8004620:	f024 0403 	bic.w	r4, r4, #3
 8004624:	42a0      	cmp	r0, r4
 8004626:	d0e3      	beq.n	80045f0 <_malloc_r+0x64>
 8004628:	1a21      	subs	r1, r4, r0
 800462a:	4630      	mov	r0, r6
 800462c:	f000 fc52 	bl	8004ed4 <_sbrk_r>
 8004630:	3001      	adds	r0, #1
 8004632:	d1dd      	bne.n	80045f0 <_malloc_r+0x64>
 8004634:	e7cf      	b.n	80045d6 <_malloc_r+0x4a>
 8004636:	bf00      	nop
 8004638:	200000ac 	.word	0x200000ac
 800463c:	200000b0 	.word	0x200000b0

08004640 <__ssputs_r>:
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	688e      	ldr	r6, [r1, #8]
 8004646:	429e      	cmp	r6, r3
 8004648:	4682      	mov	sl, r0
 800464a:	460c      	mov	r4, r1
 800464c:	4690      	mov	r8, r2
 800464e:	461f      	mov	r7, r3
 8004650:	d838      	bhi.n	80046c4 <__ssputs_r+0x84>
 8004652:	898a      	ldrh	r2, [r1, #12]
 8004654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004658:	d032      	beq.n	80046c0 <__ssputs_r+0x80>
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	6909      	ldr	r1, [r1, #16]
 800465e:	eba5 0901 	sub.w	r9, r5, r1
 8004662:	6965      	ldr	r5, [r4, #20]
 8004664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800466c:	3301      	adds	r3, #1
 800466e:	444b      	add	r3, r9
 8004670:	106d      	asrs	r5, r5, #1
 8004672:	429d      	cmp	r5, r3
 8004674:	bf38      	it	cc
 8004676:	461d      	movcc	r5, r3
 8004678:	0553      	lsls	r3, r2, #21
 800467a:	d531      	bpl.n	80046e0 <__ssputs_r+0xa0>
 800467c:	4629      	mov	r1, r5
 800467e:	f7ff ff85 	bl	800458c <_malloc_r>
 8004682:	4606      	mov	r6, r0
 8004684:	b950      	cbnz	r0, 800469c <__ssputs_r+0x5c>
 8004686:	230c      	movs	r3, #12
 8004688:	f8ca 3000 	str.w	r3, [sl]
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469c:	6921      	ldr	r1, [r4, #16]
 800469e:	464a      	mov	r2, r9
 80046a0:	f7ff fda0 	bl	80041e4 <memcpy>
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ae:	81a3      	strh	r3, [r4, #12]
 80046b0:	6126      	str	r6, [r4, #16]
 80046b2:	6165      	str	r5, [r4, #20]
 80046b4:	444e      	add	r6, r9
 80046b6:	eba5 0509 	sub.w	r5, r5, r9
 80046ba:	6026      	str	r6, [r4, #0]
 80046bc:	60a5      	str	r5, [r4, #8]
 80046be:	463e      	mov	r6, r7
 80046c0:	42be      	cmp	r6, r7
 80046c2:	d900      	bls.n	80046c6 <__ssputs_r+0x86>
 80046c4:	463e      	mov	r6, r7
 80046c6:	4632      	mov	r2, r6
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	4641      	mov	r1, r8
 80046cc:	f000 fe70 	bl	80053b0 <memmove>
 80046d0:	68a3      	ldr	r3, [r4, #8]
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	1b9b      	subs	r3, r3, r6
 80046d6:	4432      	add	r2, r6
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	2000      	movs	r0, #0
 80046de:	e7db      	b.n	8004698 <__ssputs_r+0x58>
 80046e0:	462a      	mov	r2, r5
 80046e2:	f000 fedb 	bl	800549c <_realloc_r>
 80046e6:	4606      	mov	r6, r0
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d1e1      	bne.n	80046b0 <__ssputs_r+0x70>
 80046ec:	6921      	ldr	r1, [r4, #16]
 80046ee:	4650      	mov	r0, sl
 80046f0:	f000 fe84 	bl	80053fc <_free_r>
 80046f4:	e7c7      	b.n	8004686 <__ssputs_r+0x46>
	...

080046f8 <_svfiprintf_r>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	4698      	mov	r8, r3
 80046fe:	898b      	ldrh	r3, [r1, #12]
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	b09d      	sub	sp, #116	; 0x74
 8004704:	4607      	mov	r7, r0
 8004706:	460d      	mov	r5, r1
 8004708:	4614      	mov	r4, r2
 800470a:	d50e      	bpl.n	800472a <_svfiprintf_r+0x32>
 800470c:	690b      	ldr	r3, [r1, #16]
 800470e:	b963      	cbnz	r3, 800472a <_svfiprintf_r+0x32>
 8004710:	2140      	movs	r1, #64	; 0x40
 8004712:	f7ff ff3b 	bl	800458c <_malloc_r>
 8004716:	6028      	str	r0, [r5, #0]
 8004718:	6128      	str	r0, [r5, #16]
 800471a:	b920      	cbnz	r0, 8004726 <_svfiprintf_r+0x2e>
 800471c:	230c      	movs	r3, #12
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004724:	e0d1      	b.n	80048ca <_svfiprintf_r+0x1d2>
 8004726:	2340      	movs	r3, #64	; 0x40
 8004728:	616b      	str	r3, [r5, #20]
 800472a:	2300      	movs	r3, #0
 800472c:	9309      	str	r3, [sp, #36]	; 0x24
 800472e:	2320      	movs	r3, #32
 8004730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004734:	f8cd 800c 	str.w	r8, [sp, #12]
 8004738:	2330      	movs	r3, #48	; 0x30
 800473a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048e4 <_svfiprintf_r+0x1ec>
 800473e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004742:	f04f 0901 	mov.w	r9, #1
 8004746:	4623      	mov	r3, r4
 8004748:	469a      	mov	sl, r3
 800474a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800474e:	b10a      	cbz	r2, 8004754 <_svfiprintf_r+0x5c>
 8004750:	2a25      	cmp	r2, #37	; 0x25
 8004752:	d1f9      	bne.n	8004748 <_svfiprintf_r+0x50>
 8004754:	ebba 0b04 	subs.w	fp, sl, r4
 8004758:	d00b      	beq.n	8004772 <_svfiprintf_r+0x7a>
 800475a:	465b      	mov	r3, fp
 800475c:	4622      	mov	r2, r4
 800475e:	4629      	mov	r1, r5
 8004760:	4638      	mov	r0, r7
 8004762:	f7ff ff6d 	bl	8004640 <__ssputs_r>
 8004766:	3001      	adds	r0, #1
 8004768:	f000 80aa 	beq.w	80048c0 <_svfiprintf_r+0x1c8>
 800476c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476e:	445a      	add	r2, fp
 8004770:	9209      	str	r2, [sp, #36]	; 0x24
 8004772:	f89a 3000 	ldrb.w	r3, [sl]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80a2 	beq.w	80048c0 <_svfiprintf_r+0x1c8>
 800477c:	2300      	movs	r3, #0
 800477e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004786:	f10a 0a01 	add.w	sl, sl, #1
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	9307      	str	r3, [sp, #28]
 800478e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004792:	931a      	str	r3, [sp, #104]	; 0x68
 8004794:	4654      	mov	r4, sl
 8004796:	2205      	movs	r2, #5
 8004798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800479c:	4851      	ldr	r0, [pc, #324]	; (80048e4 <_svfiprintf_r+0x1ec>)
 800479e:	f7fb fd1f 	bl	80001e0 <memchr>
 80047a2:	9a04      	ldr	r2, [sp, #16]
 80047a4:	b9d8      	cbnz	r0, 80047de <_svfiprintf_r+0xe6>
 80047a6:	06d0      	lsls	r0, r2, #27
 80047a8:	bf44      	itt	mi
 80047aa:	2320      	movmi	r3, #32
 80047ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b0:	0711      	lsls	r1, r2, #28
 80047b2:	bf44      	itt	mi
 80047b4:	232b      	movmi	r3, #43	; 0x2b
 80047b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ba:	f89a 3000 	ldrb.w	r3, [sl]
 80047be:	2b2a      	cmp	r3, #42	; 0x2a
 80047c0:	d015      	beq.n	80047ee <_svfiprintf_r+0xf6>
 80047c2:	9a07      	ldr	r2, [sp, #28]
 80047c4:	4654      	mov	r4, sl
 80047c6:	2000      	movs	r0, #0
 80047c8:	f04f 0c0a 	mov.w	ip, #10
 80047cc:	4621      	mov	r1, r4
 80047ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047d2:	3b30      	subs	r3, #48	; 0x30
 80047d4:	2b09      	cmp	r3, #9
 80047d6:	d94e      	bls.n	8004876 <_svfiprintf_r+0x17e>
 80047d8:	b1b0      	cbz	r0, 8004808 <_svfiprintf_r+0x110>
 80047da:	9207      	str	r2, [sp, #28]
 80047dc:	e014      	b.n	8004808 <_svfiprintf_r+0x110>
 80047de:	eba0 0308 	sub.w	r3, r0, r8
 80047e2:	fa09 f303 	lsl.w	r3, r9, r3
 80047e6:	4313      	orrs	r3, r2
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	46a2      	mov	sl, r4
 80047ec:	e7d2      	b.n	8004794 <_svfiprintf_r+0x9c>
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	1d19      	adds	r1, r3, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	9103      	str	r1, [sp, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfbb      	ittet	lt
 80047fa:	425b      	neglt	r3, r3
 80047fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004800:	9307      	strge	r3, [sp, #28]
 8004802:	9307      	strlt	r3, [sp, #28]
 8004804:	bfb8      	it	lt
 8004806:	9204      	strlt	r2, [sp, #16]
 8004808:	7823      	ldrb	r3, [r4, #0]
 800480a:	2b2e      	cmp	r3, #46	; 0x2e
 800480c:	d10c      	bne.n	8004828 <_svfiprintf_r+0x130>
 800480e:	7863      	ldrb	r3, [r4, #1]
 8004810:	2b2a      	cmp	r3, #42	; 0x2a
 8004812:	d135      	bne.n	8004880 <_svfiprintf_r+0x188>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	9203      	str	r2, [sp, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	bfb8      	it	lt
 8004820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004824:	3402      	adds	r4, #2
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048f4 <_svfiprintf_r+0x1fc>
 800482c:	7821      	ldrb	r1, [r4, #0]
 800482e:	2203      	movs	r2, #3
 8004830:	4650      	mov	r0, sl
 8004832:	f7fb fcd5 	bl	80001e0 <memchr>
 8004836:	b140      	cbz	r0, 800484a <_svfiprintf_r+0x152>
 8004838:	2340      	movs	r3, #64	; 0x40
 800483a:	eba0 000a 	sub.w	r0, r0, sl
 800483e:	fa03 f000 	lsl.w	r0, r3, r0
 8004842:	9b04      	ldr	r3, [sp, #16]
 8004844:	4303      	orrs	r3, r0
 8004846:	3401      	adds	r4, #1
 8004848:	9304      	str	r3, [sp, #16]
 800484a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484e:	4826      	ldr	r0, [pc, #152]	; (80048e8 <_svfiprintf_r+0x1f0>)
 8004850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004854:	2206      	movs	r2, #6
 8004856:	f7fb fcc3 	bl	80001e0 <memchr>
 800485a:	2800      	cmp	r0, #0
 800485c:	d038      	beq.n	80048d0 <_svfiprintf_r+0x1d8>
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <_svfiprintf_r+0x1f4>)
 8004860:	bb1b      	cbnz	r3, 80048aa <_svfiprintf_r+0x1b2>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	3307      	adds	r3, #7
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	3308      	adds	r3, #8
 800486c:	9303      	str	r3, [sp, #12]
 800486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004870:	4433      	add	r3, r6
 8004872:	9309      	str	r3, [sp, #36]	; 0x24
 8004874:	e767      	b.n	8004746 <_svfiprintf_r+0x4e>
 8004876:	fb0c 3202 	mla	r2, ip, r2, r3
 800487a:	460c      	mov	r4, r1
 800487c:	2001      	movs	r0, #1
 800487e:	e7a5      	b.n	80047cc <_svfiprintf_r+0xd4>
 8004880:	2300      	movs	r3, #0
 8004882:	3401      	adds	r4, #1
 8004884:	9305      	str	r3, [sp, #20]
 8004886:	4619      	mov	r1, r3
 8004888:	f04f 0c0a 	mov.w	ip, #10
 800488c:	4620      	mov	r0, r4
 800488e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004892:	3a30      	subs	r2, #48	; 0x30
 8004894:	2a09      	cmp	r2, #9
 8004896:	d903      	bls.n	80048a0 <_svfiprintf_r+0x1a8>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0c5      	beq.n	8004828 <_svfiprintf_r+0x130>
 800489c:	9105      	str	r1, [sp, #20]
 800489e:	e7c3      	b.n	8004828 <_svfiprintf_r+0x130>
 80048a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048a4:	4604      	mov	r4, r0
 80048a6:	2301      	movs	r3, #1
 80048a8:	e7f0      	b.n	800488c <_svfiprintf_r+0x194>
 80048aa:	ab03      	add	r3, sp, #12
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	462a      	mov	r2, r5
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <_svfiprintf_r+0x1f8>)
 80048b2:	a904      	add	r1, sp, #16
 80048b4:	4638      	mov	r0, r7
 80048b6:	f3af 8000 	nop.w
 80048ba:	1c42      	adds	r2, r0, #1
 80048bc:	4606      	mov	r6, r0
 80048be:	d1d6      	bne.n	800486e <_svfiprintf_r+0x176>
 80048c0:	89ab      	ldrh	r3, [r5, #12]
 80048c2:	065b      	lsls	r3, r3, #25
 80048c4:	f53f af2c 	bmi.w	8004720 <_svfiprintf_r+0x28>
 80048c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ca:	b01d      	add	sp, #116	; 0x74
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d0:	ab03      	add	r3, sp, #12
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	462a      	mov	r2, r5
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <_svfiprintf_r+0x1f8>)
 80048d8:	a904      	add	r1, sp, #16
 80048da:	4638      	mov	r0, r7
 80048dc:	f000 f9d4 	bl	8004c88 <_printf_i>
 80048e0:	e7eb      	b.n	80048ba <_svfiprintf_r+0x1c2>
 80048e2:	bf00      	nop
 80048e4:	08005714 	.word	0x08005714
 80048e8:	0800571e 	.word	0x0800571e
 80048ec:	00000000 	.word	0x00000000
 80048f0:	08004641 	.word	0x08004641
 80048f4:	0800571a 	.word	0x0800571a

080048f8 <__sfputc_r>:
 80048f8:	6893      	ldr	r3, [r2, #8]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	b410      	push	{r4}
 8004900:	6093      	str	r3, [r2, #8]
 8004902:	da08      	bge.n	8004916 <__sfputc_r+0x1e>
 8004904:	6994      	ldr	r4, [r2, #24]
 8004906:	42a3      	cmp	r3, r4
 8004908:	db01      	blt.n	800490e <__sfputc_r+0x16>
 800490a:	290a      	cmp	r1, #10
 800490c:	d103      	bne.n	8004916 <__sfputc_r+0x1e>
 800490e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004912:	f000 bb33 	b.w	8004f7c <__swbuf_r>
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	1c58      	adds	r0, r3, #1
 800491a:	6010      	str	r0, [r2, #0]
 800491c:	7019      	strb	r1, [r3, #0]
 800491e:	4608      	mov	r0, r1
 8004920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004924:	4770      	bx	lr

08004926 <__sfputs_r>:
 8004926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004928:	4606      	mov	r6, r0
 800492a:	460f      	mov	r7, r1
 800492c:	4614      	mov	r4, r2
 800492e:	18d5      	adds	r5, r2, r3
 8004930:	42ac      	cmp	r4, r5
 8004932:	d101      	bne.n	8004938 <__sfputs_r+0x12>
 8004934:	2000      	movs	r0, #0
 8004936:	e007      	b.n	8004948 <__sfputs_r+0x22>
 8004938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493c:	463a      	mov	r2, r7
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff ffda 	bl	80048f8 <__sfputc_r>
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	d1f3      	bne.n	8004930 <__sfputs_r+0xa>
 8004948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800494c <_vfiprintf_r>:
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	460d      	mov	r5, r1
 8004952:	b09d      	sub	sp, #116	; 0x74
 8004954:	4614      	mov	r4, r2
 8004956:	4698      	mov	r8, r3
 8004958:	4606      	mov	r6, r0
 800495a:	b118      	cbz	r0, 8004964 <_vfiprintf_r+0x18>
 800495c:	6983      	ldr	r3, [r0, #24]
 800495e:	b90b      	cbnz	r3, 8004964 <_vfiprintf_r+0x18>
 8004960:	f7ff fd74 	bl	800444c <__sinit>
 8004964:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <_vfiprintf_r+0x240>)
 8004966:	429d      	cmp	r5, r3
 8004968:	d11b      	bne.n	80049a2 <_vfiprintf_r+0x56>
 800496a:	6875      	ldr	r5, [r6, #4]
 800496c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800496e:	07d9      	lsls	r1, r3, #31
 8004970:	d405      	bmi.n	800497e <_vfiprintf_r+0x32>
 8004972:	89ab      	ldrh	r3, [r5, #12]
 8004974:	059a      	lsls	r2, r3, #22
 8004976:	d402      	bmi.n	800497e <_vfiprintf_r+0x32>
 8004978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800497a:	f7ff fe05 	bl	8004588 <__retarget_lock_acquire_recursive>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	071b      	lsls	r3, r3, #28
 8004982:	d501      	bpl.n	8004988 <_vfiprintf_r+0x3c>
 8004984:	692b      	ldr	r3, [r5, #16]
 8004986:	b9eb      	cbnz	r3, 80049c4 <_vfiprintf_r+0x78>
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f000 fb5a 	bl	8005044 <__swsetup_r>
 8004990:	b1c0      	cbz	r0, 80049c4 <_vfiprintf_r+0x78>
 8004992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004994:	07dc      	lsls	r4, r3, #31
 8004996:	d50e      	bpl.n	80049b6 <_vfiprintf_r+0x6a>
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499c:	b01d      	add	sp, #116	; 0x74
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a2:	4b7b      	ldr	r3, [pc, #492]	; (8004b90 <_vfiprintf_r+0x244>)
 80049a4:	429d      	cmp	r5, r3
 80049a6:	d101      	bne.n	80049ac <_vfiprintf_r+0x60>
 80049a8:	68b5      	ldr	r5, [r6, #8]
 80049aa:	e7df      	b.n	800496c <_vfiprintf_r+0x20>
 80049ac:	4b79      	ldr	r3, [pc, #484]	; (8004b94 <_vfiprintf_r+0x248>)
 80049ae:	429d      	cmp	r5, r3
 80049b0:	bf08      	it	eq
 80049b2:	68f5      	ldreq	r5, [r6, #12]
 80049b4:	e7da      	b.n	800496c <_vfiprintf_r+0x20>
 80049b6:	89ab      	ldrh	r3, [r5, #12]
 80049b8:	0598      	lsls	r0, r3, #22
 80049ba:	d4ed      	bmi.n	8004998 <_vfiprintf_r+0x4c>
 80049bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049be:	f7ff fde4 	bl	800458a <__retarget_lock_release_recursive>
 80049c2:	e7e9      	b.n	8004998 <_vfiprintf_r+0x4c>
 80049c4:	2300      	movs	r3, #0
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	2320      	movs	r3, #32
 80049ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d2:	2330      	movs	r3, #48	; 0x30
 80049d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b98 <_vfiprintf_r+0x24c>
 80049d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049dc:	f04f 0901 	mov.w	r9, #1
 80049e0:	4623      	mov	r3, r4
 80049e2:	469a      	mov	sl, r3
 80049e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049e8:	b10a      	cbz	r2, 80049ee <_vfiprintf_r+0xa2>
 80049ea:	2a25      	cmp	r2, #37	; 0x25
 80049ec:	d1f9      	bne.n	80049e2 <_vfiprintf_r+0x96>
 80049ee:	ebba 0b04 	subs.w	fp, sl, r4
 80049f2:	d00b      	beq.n	8004a0c <_vfiprintf_r+0xc0>
 80049f4:	465b      	mov	r3, fp
 80049f6:	4622      	mov	r2, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7ff ff93 	bl	8004926 <__sfputs_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	f000 80aa 	beq.w	8004b5a <_vfiprintf_r+0x20e>
 8004a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a08:	445a      	add	r2, fp
 8004a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80a2 	beq.w	8004b5a <_vfiprintf_r+0x20e>
 8004a16:	2300      	movs	r3, #0
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a20:	f10a 0a01 	add.w	sl, sl, #1
 8004a24:	9304      	str	r3, [sp, #16]
 8004a26:	9307      	str	r3, [sp, #28]
 8004a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a2e:	4654      	mov	r4, sl
 8004a30:	2205      	movs	r2, #5
 8004a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a36:	4858      	ldr	r0, [pc, #352]	; (8004b98 <_vfiprintf_r+0x24c>)
 8004a38:	f7fb fbd2 	bl	80001e0 <memchr>
 8004a3c:	9a04      	ldr	r2, [sp, #16]
 8004a3e:	b9d8      	cbnz	r0, 8004a78 <_vfiprintf_r+0x12c>
 8004a40:	06d1      	lsls	r1, r2, #27
 8004a42:	bf44      	itt	mi
 8004a44:	2320      	movmi	r3, #32
 8004a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a4a:	0713      	lsls	r3, r2, #28
 8004a4c:	bf44      	itt	mi
 8004a4e:	232b      	movmi	r3, #43	; 0x2b
 8004a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a54:	f89a 3000 	ldrb.w	r3, [sl]
 8004a58:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5a:	d015      	beq.n	8004a88 <_vfiprintf_r+0x13c>
 8004a5c:	9a07      	ldr	r2, [sp, #28]
 8004a5e:	4654      	mov	r4, sl
 8004a60:	2000      	movs	r0, #0
 8004a62:	f04f 0c0a 	mov.w	ip, #10
 8004a66:	4621      	mov	r1, r4
 8004a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a6c:	3b30      	subs	r3, #48	; 0x30
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	d94e      	bls.n	8004b10 <_vfiprintf_r+0x1c4>
 8004a72:	b1b0      	cbz	r0, 8004aa2 <_vfiprintf_r+0x156>
 8004a74:	9207      	str	r2, [sp, #28]
 8004a76:	e014      	b.n	8004aa2 <_vfiprintf_r+0x156>
 8004a78:	eba0 0308 	sub.w	r3, r0, r8
 8004a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a80:	4313      	orrs	r3, r2
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	46a2      	mov	sl, r4
 8004a86:	e7d2      	b.n	8004a2e <_vfiprintf_r+0xe2>
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	1d19      	adds	r1, r3, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	9103      	str	r1, [sp, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bfbb      	ittet	lt
 8004a94:	425b      	neglt	r3, r3
 8004a96:	f042 0202 	orrlt.w	r2, r2, #2
 8004a9a:	9307      	strge	r3, [sp, #28]
 8004a9c:	9307      	strlt	r3, [sp, #28]
 8004a9e:	bfb8      	it	lt
 8004aa0:	9204      	strlt	r2, [sp, #16]
 8004aa2:	7823      	ldrb	r3, [r4, #0]
 8004aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8004aa6:	d10c      	bne.n	8004ac2 <_vfiprintf_r+0x176>
 8004aa8:	7863      	ldrb	r3, [r4, #1]
 8004aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004aac:	d135      	bne.n	8004b1a <_vfiprintf_r+0x1ce>
 8004aae:	9b03      	ldr	r3, [sp, #12]
 8004ab0:	1d1a      	adds	r2, r3, #4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	9203      	str	r2, [sp, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfb8      	it	lt
 8004aba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004abe:	3402      	adds	r4, #2
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ba8 <_vfiprintf_r+0x25c>
 8004ac6:	7821      	ldrb	r1, [r4, #0]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	4650      	mov	r0, sl
 8004acc:	f7fb fb88 	bl	80001e0 <memchr>
 8004ad0:	b140      	cbz	r0, 8004ae4 <_vfiprintf_r+0x198>
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	eba0 000a 	sub.w	r0, r0, sl
 8004ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	4303      	orrs	r3, r0
 8004ae0:	3401      	adds	r4, #1
 8004ae2:	9304      	str	r3, [sp, #16]
 8004ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae8:	482c      	ldr	r0, [pc, #176]	; (8004b9c <_vfiprintf_r+0x250>)
 8004aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aee:	2206      	movs	r2, #6
 8004af0:	f7fb fb76 	bl	80001e0 <memchr>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d03f      	beq.n	8004b78 <_vfiprintf_r+0x22c>
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <_vfiprintf_r+0x254>)
 8004afa:	bb1b      	cbnz	r3, 8004b44 <_vfiprintf_r+0x1f8>
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	3307      	adds	r3, #7
 8004b00:	f023 0307 	bic.w	r3, r3, #7
 8004b04:	3308      	adds	r3, #8
 8004b06:	9303      	str	r3, [sp, #12]
 8004b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0a:	443b      	add	r3, r7
 8004b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0e:	e767      	b.n	80049e0 <_vfiprintf_r+0x94>
 8004b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b14:	460c      	mov	r4, r1
 8004b16:	2001      	movs	r0, #1
 8004b18:	e7a5      	b.n	8004a66 <_vfiprintf_r+0x11a>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	3401      	adds	r4, #1
 8004b1e:	9305      	str	r3, [sp, #20]
 8004b20:	4619      	mov	r1, r3
 8004b22:	f04f 0c0a 	mov.w	ip, #10
 8004b26:	4620      	mov	r0, r4
 8004b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b2c:	3a30      	subs	r2, #48	; 0x30
 8004b2e:	2a09      	cmp	r2, #9
 8004b30:	d903      	bls.n	8004b3a <_vfiprintf_r+0x1ee>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0c5      	beq.n	8004ac2 <_vfiprintf_r+0x176>
 8004b36:	9105      	str	r1, [sp, #20]
 8004b38:	e7c3      	b.n	8004ac2 <_vfiprintf_r+0x176>
 8004b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b3e:	4604      	mov	r4, r0
 8004b40:	2301      	movs	r3, #1
 8004b42:	e7f0      	b.n	8004b26 <_vfiprintf_r+0x1da>
 8004b44:	ab03      	add	r3, sp, #12
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <_vfiprintf_r+0x258>)
 8004b4c:	a904      	add	r1, sp, #16
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f3af 8000 	nop.w
 8004b54:	4607      	mov	r7, r0
 8004b56:	1c78      	adds	r0, r7, #1
 8004b58:	d1d6      	bne.n	8004b08 <_vfiprintf_r+0x1bc>
 8004b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b5c:	07d9      	lsls	r1, r3, #31
 8004b5e:	d405      	bmi.n	8004b6c <_vfiprintf_r+0x220>
 8004b60:	89ab      	ldrh	r3, [r5, #12]
 8004b62:	059a      	lsls	r2, r3, #22
 8004b64:	d402      	bmi.n	8004b6c <_vfiprintf_r+0x220>
 8004b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b68:	f7ff fd0f 	bl	800458a <__retarget_lock_release_recursive>
 8004b6c:	89ab      	ldrh	r3, [r5, #12]
 8004b6e:	065b      	lsls	r3, r3, #25
 8004b70:	f53f af12 	bmi.w	8004998 <_vfiprintf_r+0x4c>
 8004b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b76:	e711      	b.n	800499c <_vfiprintf_r+0x50>
 8004b78:	ab03      	add	r3, sp, #12
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	462a      	mov	r2, r5
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <_vfiprintf_r+0x258>)
 8004b80:	a904      	add	r1, sp, #16
 8004b82:	4630      	mov	r0, r6
 8004b84:	f000 f880 	bl	8004c88 <_printf_i>
 8004b88:	e7e4      	b.n	8004b54 <_vfiprintf_r+0x208>
 8004b8a:	bf00      	nop
 8004b8c:	080056d4 	.word	0x080056d4
 8004b90:	080056f4 	.word	0x080056f4
 8004b94:	080056b4 	.word	0x080056b4
 8004b98:	08005714 	.word	0x08005714
 8004b9c:	0800571e 	.word	0x0800571e
 8004ba0:	00000000 	.word	0x00000000
 8004ba4:	08004927 	.word	0x08004927
 8004ba8:	0800571a 	.word	0x0800571a

08004bac <_printf_common>:
 8004bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	688a      	ldr	r2, [r1, #8]
 8004bb6:	690b      	ldr	r3, [r1, #16]
 8004bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bfb8      	it	lt
 8004bc0:	4613      	movlt	r3, r2
 8004bc2:	6033      	str	r3, [r6, #0]
 8004bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bc8:	4607      	mov	r7, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	b10a      	cbz	r2, 8004bd2 <_printf_common+0x26>
 8004bce:	3301      	adds	r3, #1
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	0699      	lsls	r1, r3, #26
 8004bd6:	bf42      	ittt	mi
 8004bd8:	6833      	ldrmi	r3, [r6, #0]
 8004bda:	3302      	addmi	r3, #2
 8004bdc:	6033      	strmi	r3, [r6, #0]
 8004bde:	6825      	ldr	r5, [r4, #0]
 8004be0:	f015 0506 	ands.w	r5, r5, #6
 8004be4:	d106      	bne.n	8004bf4 <_printf_common+0x48>
 8004be6:	f104 0a19 	add.w	sl, r4, #25
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	6832      	ldr	r2, [r6, #0]
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	dc26      	bgt.n	8004c42 <_printf_common+0x96>
 8004bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bf8:	1e13      	subs	r3, r2, #0
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	bf18      	it	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	0692      	lsls	r2, r2, #26
 8004c02:	d42b      	bmi.n	8004c5c <_printf_common+0xb0>
 8004c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	47c0      	blx	r8
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d01e      	beq.n	8004c50 <_printf_common+0xa4>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	68e5      	ldr	r5, [r4, #12]
 8004c16:	6832      	ldr	r2, [r6, #0]
 8004c18:	f003 0306 	and.w	r3, r3, #6
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	bf08      	it	eq
 8004c20:	1aad      	subeq	r5, r5, r2
 8004c22:	68a3      	ldr	r3, [r4, #8]
 8004c24:	6922      	ldr	r2, [r4, #16]
 8004c26:	bf0c      	ite	eq
 8004c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c2c:	2500      	movne	r5, #0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bfc4      	itt	gt
 8004c32:	1a9b      	subgt	r3, r3, r2
 8004c34:	18ed      	addgt	r5, r5, r3
 8004c36:	2600      	movs	r6, #0
 8004c38:	341a      	adds	r4, #26
 8004c3a:	42b5      	cmp	r5, r6
 8004c3c:	d11a      	bne.n	8004c74 <_printf_common+0xc8>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e008      	b.n	8004c54 <_printf_common+0xa8>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4652      	mov	r2, sl
 8004c46:	4649      	mov	r1, r9
 8004c48:	4638      	mov	r0, r7
 8004c4a:	47c0      	blx	r8
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d103      	bne.n	8004c58 <_printf_common+0xac>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	3501      	adds	r5, #1
 8004c5a:	e7c6      	b.n	8004bea <_printf_common+0x3e>
 8004c5c:	18e1      	adds	r1, r4, r3
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	2030      	movs	r0, #48	; 0x30
 8004c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c66:	4422      	add	r2, r4
 8004c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c70:	3302      	adds	r3, #2
 8004c72:	e7c7      	b.n	8004c04 <_printf_common+0x58>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4622      	mov	r2, r4
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	47c0      	blx	r8
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0e6      	beq.n	8004c50 <_printf_common+0xa4>
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7d9      	b.n	8004c3a <_printf_common+0x8e>
	...

08004c88 <_printf_i>:
 8004c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	4691      	mov	r9, r2
 8004c90:	7e27      	ldrb	r7, [r4, #24]
 8004c92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c94:	2f78      	cmp	r7, #120	; 0x78
 8004c96:	4680      	mov	r8, r0
 8004c98:	469a      	mov	sl, r3
 8004c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c9e:	d807      	bhi.n	8004cb0 <_printf_i+0x28>
 8004ca0:	2f62      	cmp	r7, #98	; 0x62
 8004ca2:	d80a      	bhi.n	8004cba <_printf_i+0x32>
 8004ca4:	2f00      	cmp	r7, #0
 8004ca6:	f000 80d8 	beq.w	8004e5a <_printf_i+0x1d2>
 8004caa:	2f58      	cmp	r7, #88	; 0x58
 8004cac:	f000 80a3 	beq.w	8004df6 <_printf_i+0x16e>
 8004cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cb8:	e03a      	b.n	8004d30 <_printf_i+0xa8>
 8004cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cbe:	2b15      	cmp	r3, #21
 8004cc0:	d8f6      	bhi.n	8004cb0 <_printf_i+0x28>
 8004cc2:	a001      	add	r0, pc, #4	; (adr r0, 8004cc8 <_printf_i+0x40>)
 8004cc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d35 	.word	0x08004d35
 8004cd0:	08004cb1 	.word	0x08004cb1
 8004cd4:	08004cb1 	.word	0x08004cb1
 8004cd8:	08004cb1 	.word	0x08004cb1
 8004cdc:	08004cb1 	.word	0x08004cb1
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004cb1 	.word	0x08004cb1
 8004ce8:	08004cb1 	.word	0x08004cb1
 8004cec:	08004cb1 	.word	0x08004cb1
 8004cf0:	08004cb1 	.word	0x08004cb1
 8004cf4:	08004e41 	.word	0x08004e41
 8004cf8:	08004d65 	.word	0x08004d65
 8004cfc:	08004e23 	.word	0x08004e23
 8004d00:	08004cb1 	.word	0x08004cb1
 8004d04:	08004cb1 	.word	0x08004cb1
 8004d08:	08004e63 	.word	0x08004e63
 8004d0c:	08004cb1 	.word	0x08004cb1
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004cb1 	.word	0x08004cb1
 8004d18:	08004cb1 	.word	0x08004cb1
 8004d1c:	08004e2b 	.word	0x08004e2b
 8004d20:	680b      	ldr	r3, [r1, #0]
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	600a      	str	r2, [r1, #0]
 8004d28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0a3      	b.n	8004e7c <_printf_i+0x1f4>
 8004d34:	6825      	ldr	r5, [r4, #0]
 8004d36:	6808      	ldr	r0, [r1, #0]
 8004d38:	062e      	lsls	r6, r5, #24
 8004d3a:	f100 0304 	add.w	r3, r0, #4
 8004d3e:	d50a      	bpl.n	8004d56 <_printf_i+0xce>
 8004d40:	6805      	ldr	r5, [r0, #0]
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	da03      	bge.n	8004d50 <_printf_i+0xc8>
 8004d48:	232d      	movs	r3, #45	; 0x2d
 8004d4a:	426d      	negs	r5, r5
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d50:	485e      	ldr	r0, [pc, #376]	; (8004ecc <_printf_i+0x244>)
 8004d52:	230a      	movs	r3, #10
 8004d54:	e019      	b.n	8004d8a <_printf_i+0x102>
 8004d56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d5a:	6805      	ldr	r5, [r0, #0]
 8004d5c:	600b      	str	r3, [r1, #0]
 8004d5e:	bf18      	it	ne
 8004d60:	b22d      	sxthne	r5, r5
 8004d62:	e7ef      	b.n	8004d44 <_printf_i+0xbc>
 8004d64:	680b      	ldr	r3, [r1, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	1d18      	adds	r0, r3, #4
 8004d6a:	6008      	str	r0, [r1, #0]
 8004d6c:	0628      	lsls	r0, r5, #24
 8004d6e:	d501      	bpl.n	8004d74 <_printf_i+0xec>
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	e002      	b.n	8004d7a <_printf_i+0xf2>
 8004d74:	0669      	lsls	r1, r5, #25
 8004d76:	d5fb      	bpl.n	8004d70 <_printf_i+0xe8>
 8004d78:	881d      	ldrh	r5, [r3, #0]
 8004d7a:	4854      	ldr	r0, [pc, #336]	; (8004ecc <_printf_i+0x244>)
 8004d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d7e:	bf0c      	ite	eq
 8004d80:	2308      	moveq	r3, #8
 8004d82:	230a      	movne	r3, #10
 8004d84:	2100      	movs	r1, #0
 8004d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d8a:	6866      	ldr	r6, [r4, #4]
 8004d8c:	60a6      	str	r6, [r4, #8]
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	bfa2      	ittt	ge
 8004d92:	6821      	ldrge	r1, [r4, #0]
 8004d94:	f021 0104 	bicge.w	r1, r1, #4
 8004d98:	6021      	strge	r1, [r4, #0]
 8004d9a:	b90d      	cbnz	r5, 8004da0 <_printf_i+0x118>
 8004d9c:	2e00      	cmp	r6, #0
 8004d9e:	d04d      	beq.n	8004e3c <_printf_i+0x1b4>
 8004da0:	4616      	mov	r6, r2
 8004da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004da6:	fb03 5711 	mls	r7, r3, r1, r5
 8004daa:	5dc7      	ldrb	r7, [r0, r7]
 8004dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004db0:	462f      	mov	r7, r5
 8004db2:	42bb      	cmp	r3, r7
 8004db4:	460d      	mov	r5, r1
 8004db6:	d9f4      	bls.n	8004da2 <_printf_i+0x11a>
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d10b      	bne.n	8004dd4 <_printf_i+0x14c>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	07df      	lsls	r7, r3, #31
 8004dc0:	d508      	bpl.n	8004dd4 <_printf_i+0x14c>
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	6861      	ldr	r1, [r4, #4]
 8004dc6:	4299      	cmp	r1, r3
 8004dc8:	bfde      	ittt	le
 8004dca:	2330      	movle	r3, #48	; 0x30
 8004dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dd0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004dd4:	1b92      	subs	r2, r2, r6
 8004dd6:	6122      	str	r2, [r4, #16]
 8004dd8:	f8cd a000 	str.w	sl, [sp]
 8004ddc:	464b      	mov	r3, r9
 8004dde:	aa03      	add	r2, sp, #12
 8004de0:	4621      	mov	r1, r4
 8004de2:	4640      	mov	r0, r8
 8004de4:	f7ff fee2 	bl	8004bac <_printf_common>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d14c      	bne.n	8004e86 <_printf_i+0x1fe>
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df0:	b004      	add	sp, #16
 8004df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df6:	4835      	ldr	r0, [pc, #212]	; (8004ecc <_printf_i+0x244>)
 8004df8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	680e      	ldr	r6, [r1, #0]
 8004e00:	061f      	lsls	r7, r3, #24
 8004e02:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e06:	600e      	str	r6, [r1, #0]
 8004e08:	d514      	bpl.n	8004e34 <_printf_i+0x1ac>
 8004e0a:	07d9      	lsls	r1, r3, #31
 8004e0c:	bf44      	itt	mi
 8004e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e12:	6023      	strmi	r3, [r4, #0]
 8004e14:	b91d      	cbnz	r5, 8004e1e <_printf_i+0x196>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	f023 0320 	bic.w	r3, r3, #32
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	2310      	movs	r3, #16
 8004e20:	e7b0      	b.n	8004d84 <_printf_i+0xfc>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f043 0320 	orr.w	r3, r3, #32
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	2378      	movs	r3, #120	; 0x78
 8004e2c:	4828      	ldr	r0, [pc, #160]	; (8004ed0 <_printf_i+0x248>)
 8004e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e32:	e7e3      	b.n	8004dfc <_printf_i+0x174>
 8004e34:	065e      	lsls	r6, r3, #25
 8004e36:	bf48      	it	mi
 8004e38:	b2ad      	uxthmi	r5, r5
 8004e3a:	e7e6      	b.n	8004e0a <_printf_i+0x182>
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	e7bb      	b.n	8004db8 <_printf_i+0x130>
 8004e40:	680b      	ldr	r3, [r1, #0]
 8004e42:	6826      	ldr	r6, [r4, #0]
 8004e44:	6960      	ldr	r0, [r4, #20]
 8004e46:	1d1d      	adds	r5, r3, #4
 8004e48:	600d      	str	r5, [r1, #0]
 8004e4a:	0635      	lsls	r5, r6, #24
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0x1cc>
 8004e50:	6018      	str	r0, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <_printf_i+0x1d2>
 8004e54:	0671      	lsls	r1, r6, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0x1c8>
 8004e58:	8018      	strh	r0, [r3, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	4616      	mov	r6, r2
 8004e60:	e7ba      	b.n	8004dd8 <_printf_i+0x150>
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	1d1a      	adds	r2, r3, #4
 8004e66:	600a      	str	r2, [r1, #0]
 8004e68:	681e      	ldr	r6, [r3, #0]
 8004e6a:	6862      	ldr	r2, [r4, #4]
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7fb f9b6 	bl	80001e0 <memchr>
 8004e74:	b108      	cbz	r0, 8004e7a <_printf_i+0x1f2>
 8004e76:	1b80      	subs	r0, r0, r6
 8004e78:	6060      	str	r0, [r4, #4]
 8004e7a:	6863      	ldr	r3, [r4, #4]
 8004e7c:	6123      	str	r3, [r4, #16]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e84:	e7a8      	b.n	8004dd8 <_printf_i+0x150>
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	47d0      	blx	sl
 8004e90:	3001      	adds	r0, #1
 8004e92:	d0ab      	beq.n	8004dec <_printf_i+0x164>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	079b      	lsls	r3, r3, #30
 8004e98:	d413      	bmi.n	8004ec2 <_printf_i+0x23a>
 8004e9a:	68e0      	ldr	r0, [r4, #12]
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	4298      	cmp	r0, r3
 8004ea0:	bfb8      	it	lt
 8004ea2:	4618      	movlt	r0, r3
 8004ea4:	e7a4      	b.n	8004df0 <_printf_i+0x168>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	4649      	mov	r1, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	47d0      	blx	sl
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d09b      	beq.n	8004dec <_printf_i+0x164>
 8004eb4:	3501      	adds	r5, #1
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	9903      	ldr	r1, [sp, #12]
 8004eba:	1a5b      	subs	r3, r3, r1
 8004ebc:	42ab      	cmp	r3, r5
 8004ebe:	dcf2      	bgt.n	8004ea6 <_printf_i+0x21e>
 8004ec0:	e7eb      	b.n	8004e9a <_printf_i+0x212>
 8004ec2:	2500      	movs	r5, #0
 8004ec4:	f104 0619 	add.w	r6, r4, #25
 8004ec8:	e7f5      	b.n	8004eb6 <_printf_i+0x22e>
 8004eca:	bf00      	nop
 8004ecc:	08005725 	.word	0x08005725
 8004ed0:	08005736 	.word	0x08005736

08004ed4 <_sbrk_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d06      	ldr	r5, [pc, #24]	; (8004ef0 <_sbrk_r+0x1c>)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4604      	mov	r4, r0
 8004edc:	4608      	mov	r0, r1
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	f7fc fe18 	bl	8001b14 <_sbrk>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d102      	bne.n	8004eee <_sbrk_r+0x1a>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	b103      	cbz	r3, 8004eee <_sbrk_r+0x1a>
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	200001b8 	.word	0x200001b8

08004ef4 <__sread>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efc:	f000 faf4 	bl	80054e8 <_read_r>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	bfab      	itete	ge
 8004f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f06:	89a3      	ldrhlt	r3, [r4, #12]
 8004f08:	181b      	addge	r3, r3, r0
 8004f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f0e:	bfac      	ite	ge
 8004f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f12:	81a3      	strhlt	r3, [r4, #12]
 8004f14:	bd10      	pop	{r4, pc}

08004f16 <__swrite>:
 8004f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1a:	461f      	mov	r7, r3
 8004f1c:	898b      	ldrh	r3, [r1, #12]
 8004f1e:	05db      	lsls	r3, r3, #23
 8004f20:	4605      	mov	r5, r0
 8004f22:	460c      	mov	r4, r1
 8004f24:	4616      	mov	r6, r2
 8004f26:	d505      	bpl.n	8004f34 <__swrite+0x1e>
 8004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f000 f9c8 	bl	80052c4 <_lseek_r>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	4632      	mov	r2, r6
 8004f42:	463b      	mov	r3, r7
 8004f44:	4628      	mov	r0, r5
 8004f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4a:	f000 b869 	b.w	8005020 <_write_r>

08004f4e <__sseek>:
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	460c      	mov	r4, r1
 8004f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f56:	f000 f9b5 	bl	80052c4 <_lseek_r>
 8004f5a:	1c43      	adds	r3, r0, #1
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	bf15      	itete	ne
 8004f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f6a:	81a3      	strheq	r3, [r4, #12]
 8004f6c:	bf18      	it	ne
 8004f6e:	81a3      	strhne	r3, [r4, #12]
 8004f70:	bd10      	pop	{r4, pc}

08004f72 <__sclose>:
 8004f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f76:	f000 b8d3 	b.w	8005120 <_close_r>
	...

08004f7c <__swbuf_r>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	460e      	mov	r6, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	4605      	mov	r5, r0
 8004f84:	b118      	cbz	r0, 8004f8e <__swbuf_r+0x12>
 8004f86:	6983      	ldr	r3, [r0, #24]
 8004f88:	b90b      	cbnz	r3, 8004f8e <__swbuf_r+0x12>
 8004f8a:	f7ff fa5f 	bl	800444c <__sinit>
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <__swbuf_r+0x98>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d12b      	bne.n	8004fec <__swbuf_r+0x70>
 8004f94:	686c      	ldr	r4, [r5, #4]
 8004f96:	69a3      	ldr	r3, [r4, #24]
 8004f98:	60a3      	str	r3, [r4, #8]
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	071a      	lsls	r2, r3, #28
 8004f9e:	d52f      	bpl.n	8005000 <__swbuf_r+0x84>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	b36b      	cbz	r3, 8005000 <__swbuf_r+0x84>
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	6963      	ldr	r3, [r4, #20]
 8004fac:	b2f6      	uxtb	r6, r6
 8004fae:	4283      	cmp	r3, r0
 8004fb0:	4637      	mov	r7, r6
 8004fb2:	dc04      	bgt.n	8004fbe <__swbuf_r+0x42>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 f948 	bl	800524c <_fflush_r>
 8004fbc:	bb30      	cbnz	r0, 800500c <__swbuf_r+0x90>
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60a3      	str	r3, [r4, #8]
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	701e      	strb	r6, [r3, #0]
 8004fcc:	6963      	ldr	r3, [r4, #20]
 8004fce:	3001      	adds	r0, #1
 8004fd0:	4283      	cmp	r3, r0
 8004fd2:	d004      	beq.n	8004fde <__swbuf_r+0x62>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	07db      	lsls	r3, r3, #31
 8004fd8:	d506      	bpl.n	8004fe8 <__swbuf_r+0x6c>
 8004fda:	2e0a      	cmp	r6, #10
 8004fdc:	d104      	bne.n	8004fe8 <__swbuf_r+0x6c>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f933 	bl	800524c <_fflush_r>
 8004fe6:	b988      	cbnz	r0, 800500c <__swbuf_r+0x90>
 8004fe8:	4638      	mov	r0, r7
 8004fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <__swbuf_r+0x9c>)
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	d101      	bne.n	8004ff6 <__swbuf_r+0x7a>
 8004ff2:	68ac      	ldr	r4, [r5, #8]
 8004ff4:	e7cf      	b.n	8004f96 <__swbuf_r+0x1a>
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <__swbuf_r+0xa0>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	bf08      	it	eq
 8004ffc:	68ec      	ldreq	r4, [r5, #12]
 8004ffe:	e7ca      	b.n	8004f96 <__swbuf_r+0x1a>
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f000 f81e 	bl	8005044 <__swsetup_r>
 8005008:	2800      	cmp	r0, #0
 800500a:	d0cb      	beq.n	8004fa4 <__swbuf_r+0x28>
 800500c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005010:	e7ea      	b.n	8004fe8 <__swbuf_r+0x6c>
 8005012:	bf00      	nop
 8005014:	080056d4 	.word	0x080056d4
 8005018:	080056f4 	.word	0x080056f4
 800501c:	080056b4 	.word	0x080056b4

08005020 <_write_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d07      	ldr	r5, [pc, #28]	; (8005040 <_write_r+0x20>)
 8005024:	4604      	mov	r4, r0
 8005026:	4608      	mov	r0, r1
 8005028:	4611      	mov	r1, r2
 800502a:	2200      	movs	r2, #0
 800502c:	602a      	str	r2, [r5, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f7fc fd1f 	bl	8001a72 <_write>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_write_r+0x1e>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_write_r+0x1e>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	200001b8 	.word	0x200001b8

08005044 <__swsetup_r>:
 8005044:	4b32      	ldr	r3, [pc, #200]	; (8005110 <__swsetup_r+0xcc>)
 8005046:	b570      	push	{r4, r5, r6, lr}
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	4606      	mov	r6, r0
 800504c:	460c      	mov	r4, r1
 800504e:	b125      	cbz	r5, 800505a <__swsetup_r+0x16>
 8005050:	69ab      	ldr	r3, [r5, #24]
 8005052:	b913      	cbnz	r3, 800505a <__swsetup_r+0x16>
 8005054:	4628      	mov	r0, r5
 8005056:	f7ff f9f9 	bl	800444c <__sinit>
 800505a:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <__swsetup_r+0xd0>)
 800505c:	429c      	cmp	r4, r3
 800505e:	d10f      	bne.n	8005080 <__swsetup_r+0x3c>
 8005060:	686c      	ldr	r4, [r5, #4]
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005068:	0719      	lsls	r1, r3, #28
 800506a:	d42c      	bmi.n	80050c6 <__swsetup_r+0x82>
 800506c:	06dd      	lsls	r5, r3, #27
 800506e:	d411      	bmi.n	8005094 <__swsetup_r+0x50>
 8005070:	2309      	movs	r3, #9
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800507e:	e03e      	b.n	80050fe <__swsetup_r+0xba>
 8005080:	4b25      	ldr	r3, [pc, #148]	; (8005118 <__swsetup_r+0xd4>)
 8005082:	429c      	cmp	r4, r3
 8005084:	d101      	bne.n	800508a <__swsetup_r+0x46>
 8005086:	68ac      	ldr	r4, [r5, #8]
 8005088:	e7eb      	b.n	8005062 <__swsetup_r+0x1e>
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <__swsetup_r+0xd8>)
 800508c:	429c      	cmp	r4, r3
 800508e:	bf08      	it	eq
 8005090:	68ec      	ldreq	r4, [r5, #12]
 8005092:	e7e6      	b.n	8005062 <__swsetup_r+0x1e>
 8005094:	0758      	lsls	r0, r3, #29
 8005096:	d512      	bpl.n	80050be <__swsetup_r+0x7a>
 8005098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800509a:	b141      	cbz	r1, 80050ae <__swsetup_r+0x6a>
 800509c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050a0:	4299      	cmp	r1, r3
 80050a2:	d002      	beq.n	80050aa <__swsetup_r+0x66>
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 f9a9 	bl	80053fc <_free_r>
 80050aa:	2300      	movs	r3, #0
 80050ac:	6363      	str	r3, [r4, #52]	; 0x34
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050b4:	81a3      	strh	r3, [r4, #12]
 80050b6:	2300      	movs	r3, #0
 80050b8:	6063      	str	r3, [r4, #4]
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	f043 0308 	orr.w	r3, r3, #8
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	b94b      	cbnz	r3, 80050de <__swsetup_r+0x9a>
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d003      	beq.n	80050de <__swsetup_r+0x9a>
 80050d6:	4621      	mov	r1, r4
 80050d8:	4630      	mov	r0, r6
 80050da:	f000 f929 	bl	8005330 <__smakebuf_r>
 80050de:	89a0      	ldrh	r0, [r4, #12]
 80050e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050e4:	f010 0301 	ands.w	r3, r0, #1
 80050e8:	d00a      	beq.n	8005100 <__swsetup_r+0xbc>
 80050ea:	2300      	movs	r3, #0
 80050ec:	60a3      	str	r3, [r4, #8]
 80050ee:	6963      	ldr	r3, [r4, #20]
 80050f0:	425b      	negs	r3, r3
 80050f2:	61a3      	str	r3, [r4, #24]
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	b943      	cbnz	r3, 800510a <__swsetup_r+0xc6>
 80050f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050fc:	d1ba      	bne.n	8005074 <__swsetup_r+0x30>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	0781      	lsls	r1, r0, #30
 8005102:	bf58      	it	pl
 8005104:	6963      	ldrpl	r3, [r4, #20]
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	e7f4      	b.n	80050f4 <__swsetup_r+0xb0>
 800510a:	2000      	movs	r0, #0
 800510c:	e7f7      	b.n	80050fe <__swsetup_r+0xba>
 800510e:	bf00      	nop
 8005110:	20000020 	.word	0x20000020
 8005114:	080056d4 	.word	0x080056d4
 8005118:	080056f4 	.word	0x080056f4
 800511c:	080056b4 	.word	0x080056b4

08005120 <_close_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d06      	ldr	r5, [pc, #24]	; (800513c <_close_r+0x1c>)
 8005124:	2300      	movs	r3, #0
 8005126:	4604      	mov	r4, r0
 8005128:	4608      	mov	r0, r1
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	f7fc fcbd 	bl	8001aaa <_close>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_close_r+0x1a>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	b103      	cbz	r3, 800513a <_close_r+0x1a>
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	200001b8 	.word	0x200001b8

08005140 <__sflush_r>:
 8005140:	898a      	ldrh	r2, [r1, #12]
 8005142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005146:	4605      	mov	r5, r0
 8005148:	0710      	lsls	r0, r2, #28
 800514a:	460c      	mov	r4, r1
 800514c:	d458      	bmi.n	8005200 <__sflush_r+0xc0>
 800514e:	684b      	ldr	r3, [r1, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	dc05      	bgt.n	8005160 <__sflush_r+0x20>
 8005154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	dc02      	bgt.n	8005160 <__sflush_r+0x20>
 800515a:	2000      	movs	r0, #0
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005162:	2e00      	cmp	r6, #0
 8005164:	d0f9      	beq.n	800515a <__sflush_r+0x1a>
 8005166:	2300      	movs	r3, #0
 8005168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800516c:	682f      	ldr	r7, [r5, #0]
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	d032      	beq.n	80051d8 <__sflush_r+0x98>
 8005172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	075a      	lsls	r2, r3, #29
 8005178:	d505      	bpl.n	8005186 <__sflush_r+0x46>
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	1ac0      	subs	r0, r0, r3
 800517e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005180:	b10b      	cbz	r3, 8005186 <__sflush_r+0x46>
 8005182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005184:	1ac0      	subs	r0, r0, r3
 8005186:	2300      	movs	r3, #0
 8005188:	4602      	mov	r2, r0
 800518a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800518c:	6a21      	ldr	r1, [r4, #32]
 800518e:	4628      	mov	r0, r5
 8005190:	47b0      	blx	r6
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	d106      	bne.n	80051a6 <__sflush_r+0x66>
 8005198:	6829      	ldr	r1, [r5, #0]
 800519a:	291d      	cmp	r1, #29
 800519c:	d82c      	bhi.n	80051f8 <__sflush_r+0xb8>
 800519e:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <__sflush_r+0x108>)
 80051a0:	40ca      	lsrs	r2, r1
 80051a2:	07d6      	lsls	r6, r2, #31
 80051a4:	d528      	bpl.n	80051f8 <__sflush_r+0xb8>
 80051a6:	2200      	movs	r2, #0
 80051a8:	6062      	str	r2, [r4, #4]
 80051aa:	04d9      	lsls	r1, r3, #19
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	6022      	str	r2, [r4, #0]
 80051b0:	d504      	bpl.n	80051bc <__sflush_r+0x7c>
 80051b2:	1c42      	adds	r2, r0, #1
 80051b4:	d101      	bne.n	80051ba <__sflush_r+0x7a>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	b903      	cbnz	r3, 80051bc <__sflush_r+0x7c>
 80051ba:	6560      	str	r0, [r4, #84]	; 0x54
 80051bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051be:	602f      	str	r7, [r5, #0]
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d0ca      	beq.n	800515a <__sflush_r+0x1a>
 80051c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c8:	4299      	cmp	r1, r3
 80051ca:	d002      	beq.n	80051d2 <__sflush_r+0x92>
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 f915 	bl	80053fc <_free_r>
 80051d2:	2000      	movs	r0, #0
 80051d4:	6360      	str	r0, [r4, #52]	; 0x34
 80051d6:	e7c1      	b.n	800515c <__sflush_r+0x1c>
 80051d8:	6a21      	ldr	r1, [r4, #32]
 80051da:	2301      	movs	r3, #1
 80051dc:	4628      	mov	r0, r5
 80051de:	47b0      	blx	r6
 80051e0:	1c41      	adds	r1, r0, #1
 80051e2:	d1c7      	bne.n	8005174 <__sflush_r+0x34>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c4      	beq.n	8005174 <__sflush_r+0x34>
 80051ea:	2b1d      	cmp	r3, #29
 80051ec:	d001      	beq.n	80051f2 <__sflush_r+0xb2>
 80051ee:	2b16      	cmp	r3, #22
 80051f0:	d101      	bne.n	80051f6 <__sflush_r+0xb6>
 80051f2:	602f      	str	r7, [r5, #0]
 80051f4:	e7b1      	b.n	800515a <__sflush_r+0x1a>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	e7ad      	b.n	800515c <__sflush_r+0x1c>
 8005200:	690f      	ldr	r7, [r1, #16]
 8005202:	2f00      	cmp	r7, #0
 8005204:	d0a9      	beq.n	800515a <__sflush_r+0x1a>
 8005206:	0793      	lsls	r3, r2, #30
 8005208:	680e      	ldr	r6, [r1, #0]
 800520a:	bf08      	it	eq
 800520c:	694b      	ldreq	r3, [r1, #20]
 800520e:	600f      	str	r7, [r1, #0]
 8005210:	bf18      	it	ne
 8005212:	2300      	movne	r3, #0
 8005214:	eba6 0807 	sub.w	r8, r6, r7
 8005218:	608b      	str	r3, [r1, #8]
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	dd9c      	ble.n	800515a <__sflush_r+0x1a>
 8005220:	6a21      	ldr	r1, [r4, #32]
 8005222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005224:	4643      	mov	r3, r8
 8005226:	463a      	mov	r2, r7
 8005228:	4628      	mov	r0, r5
 800522a:	47b0      	blx	r6
 800522c:	2800      	cmp	r0, #0
 800522e:	dc06      	bgt.n	800523e <__sflush_r+0xfe>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800523c:	e78e      	b.n	800515c <__sflush_r+0x1c>
 800523e:	4407      	add	r7, r0
 8005240:	eba8 0800 	sub.w	r8, r8, r0
 8005244:	e7e9      	b.n	800521a <__sflush_r+0xda>
 8005246:	bf00      	nop
 8005248:	20400001 	.word	0x20400001

0800524c <_fflush_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	690b      	ldr	r3, [r1, #16]
 8005250:	4605      	mov	r5, r0
 8005252:	460c      	mov	r4, r1
 8005254:	b913      	cbnz	r3, 800525c <_fflush_r+0x10>
 8005256:	2500      	movs	r5, #0
 8005258:	4628      	mov	r0, r5
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	b118      	cbz	r0, 8005266 <_fflush_r+0x1a>
 800525e:	6983      	ldr	r3, [r0, #24]
 8005260:	b90b      	cbnz	r3, 8005266 <_fflush_r+0x1a>
 8005262:	f7ff f8f3 	bl	800444c <__sinit>
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <_fflush_r+0x6c>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d11b      	bne.n	80052a4 <_fflush_r+0x58>
 800526c:	686c      	ldr	r4, [r5, #4]
 800526e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <_fflush_r+0xa>
 8005276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005278:	07d0      	lsls	r0, r2, #31
 800527a:	d404      	bmi.n	8005286 <_fflush_r+0x3a>
 800527c:	0599      	lsls	r1, r3, #22
 800527e:	d402      	bmi.n	8005286 <_fflush_r+0x3a>
 8005280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005282:	f7ff f981 	bl	8004588 <__retarget_lock_acquire_recursive>
 8005286:	4628      	mov	r0, r5
 8005288:	4621      	mov	r1, r4
 800528a:	f7ff ff59 	bl	8005140 <__sflush_r>
 800528e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005290:	07da      	lsls	r2, r3, #31
 8005292:	4605      	mov	r5, r0
 8005294:	d4e0      	bmi.n	8005258 <_fflush_r+0xc>
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	059b      	lsls	r3, r3, #22
 800529a:	d4dd      	bmi.n	8005258 <_fflush_r+0xc>
 800529c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800529e:	f7ff f974 	bl	800458a <__retarget_lock_release_recursive>
 80052a2:	e7d9      	b.n	8005258 <_fflush_r+0xc>
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <_fflush_r+0x70>)
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d101      	bne.n	80052ae <_fflush_r+0x62>
 80052aa:	68ac      	ldr	r4, [r5, #8]
 80052ac:	e7df      	b.n	800526e <_fflush_r+0x22>
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <_fflush_r+0x74>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	bf08      	it	eq
 80052b4:	68ec      	ldreq	r4, [r5, #12]
 80052b6:	e7da      	b.n	800526e <_fflush_r+0x22>
 80052b8:	080056d4 	.word	0x080056d4
 80052bc:	080056f4 	.word	0x080056f4
 80052c0:	080056b4 	.word	0x080056b4

080052c4 <_lseek_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d07      	ldr	r5, [pc, #28]	; (80052e4 <_lseek_r+0x20>)
 80052c8:	4604      	mov	r4, r0
 80052ca:	4608      	mov	r0, r1
 80052cc:	4611      	mov	r1, r2
 80052ce:	2200      	movs	r2, #0
 80052d0:	602a      	str	r2, [r5, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f7fc fc10 	bl	8001af8 <_lseek>
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d102      	bne.n	80052e2 <_lseek_r+0x1e>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	b103      	cbz	r3, 80052e2 <_lseek_r+0x1e>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	200001b8 	.word	0x200001b8

080052e8 <__swhatbuf_r>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	460e      	mov	r6, r1
 80052ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f0:	2900      	cmp	r1, #0
 80052f2:	b096      	sub	sp, #88	; 0x58
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	da07      	bge.n	800530a <__swhatbuf_r+0x22>
 80052fa:	2300      	movs	r3, #0
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	89b3      	ldrh	r3, [r6, #12]
 8005300:	061a      	lsls	r2, r3, #24
 8005302:	d410      	bmi.n	8005326 <__swhatbuf_r+0x3e>
 8005304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005308:	e00e      	b.n	8005328 <__swhatbuf_r+0x40>
 800530a:	466a      	mov	r2, sp
 800530c:	f000 f8fe 	bl	800550c <_fstat_r>
 8005310:	2800      	cmp	r0, #0
 8005312:	dbf2      	blt.n	80052fa <__swhatbuf_r+0x12>
 8005314:	9a01      	ldr	r2, [sp, #4]
 8005316:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800531a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800531e:	425a      	negs	r2, r3
 8005320:	415a      	adcs	r2, r3
 8005322:	602a      	str	r2, [r5, #0]
 8005324:	e7ee      	b.n	8005304 <__swhatbuf_r+0x1c>
 8005326:	2340      	movs	r3, #64	; 0x40
 8005328:	2000      	movs	r0, #0
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	b016      	add	sp, #88	; 0x58
 800532e:	bd70      	pop	{r4, r5, r6, pc}

08005330 <__smakebuf_r>:
 8005330:	898b      	ldrh	r3, [r1, #12]
 8005332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005334:	079d      	lsls	r5, r3, #30
 8005336:	4606      	mov	r6, r0
 8005338:	460c      	mov	r4, r1
 800533a:	d507      	bpl.n	800534c <__smakebuf_r+0x1c>
 800533c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	6123      	str	r3, [r4, #16]
 8005344:	2301      	movs	r3, #1
 8005346:	6163      	str	r3, [r4, #20]
 8005348:	b002      	add	sp, #8
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	ab01      	add	r3, sp, #4
 800534e:	466a      	mov	r2, sp
 8005350:	f7ff ffca 	bl	80052e8 <__swhatbuf_r>
 8005354:	9900      	ldr	r1, [sp, #0]
 8005356:	4605      	mov	r5, r0
 8005358:	4630      	mov	r0, r6
 800535a:	f7ff f917 	bl	800458c <_malloc_r>
 800535e:	b948      	cbnz	r0, 8005374 <__smakebuf_r+0x44>
 8005360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005364:	059a      	lsls	r2, r3, #22
 8005366:	d4ef      	bmi.n	8005348 <__smakebuf_r+0x18>
 8005368:	f023 0303 	bic.w	r3, r3, #3
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	e7e3      	b.n	800533c <__smakebuf_r+0xc>
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <__smakebuf_r+0x7c>)
 8005376:	62b3      	str	r3, [r6, #40]	; 0x28
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	6020      	str	r0, [r4, #0]
 800537c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	9b00      	ldr	r3, [sp, #0]
 8005384:	6163      	str	r3, [r4, #20]
 8005386:	9b01      	ldr	r3, [sp, #4]
 8005388:	6120      	str	r0, [r4, #16]
 800538a:	b15b      	cbz	r3, 80053a4 <__smakebuf_r+0x74>
 800538c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005390:	4630      	mov	r0, r6
 8005392:	f000 f8cd 	bl	8005530 <_isatty_r>
 8005396:	b128      	cbz	r0, 80053a4 <__smakebuf_r+0x74>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	89a0      	ldrh	r0, [r4, #12]
 80053a6:	4305      	orrs	r5, r0
 80053a8:	81a5      	strh	r5, [r4, #12]
 80053aa:	e7cd      	b.n	8005348 <__smakebuf_r+0x18>
 80053ac:	080043e5 	.word	0x080043e5

080053b0 <memmove>:
 80053b0:	4288      	cmp	r0, r1
 80053b2:	b510      	push	{r4, lr}
 80053b4:	eb01 0402 	add.w	r4, r1, r2
 80053b8:	d902      	bls.n	80053c0 <memmove+0x10>
 80053ba:	4284      	cmp	r4, r0
 80053bc:	4623      	mov	r3, r4
 80053be:	d807      	bhi.n	80053d0 <memmove+0x20>
 80053c0:	1e43      	subs	r3, r0, #1
 80053c2:	42a1      	cmp	r1, r4
 80053c4:	d008      	beq.n	80053d8 <memmove+0x28>
 80053c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ce:	e7f8      	b.n	80053c2 <memmove+0x12>
 80053d0:	4402      	add	r2, r0
 80053d2:	4601      	mov	r1, r0
 80053d4:	428a      	cmp	r2, r1
 80053d6:	d100      	bne.n	80053da <memmove+0x2a>
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053e2:	e7f7      	b.n	80053d4 <memmove+0x24>

080053e4 <__malloc_lock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__malloc_lock+0x8>)
 80053e6:	f7ff b8cf 	b.w	8004588 <__retarget_lock_acquire_recursive>
 80053ea:	bf00      	nop
 80053ec:	200001b0 	.word	0x200001b0

080053f0 <__malloc_unlock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	; (80053f8 <__malloc_unlock+0x8>)
 80053f2:	f7ff b8ca 	b.w	800458a <__retarget_lock_release_recursive>
 80053f6:	bf00      	nop
 80053f8:	200001b0 	.word	0x200001b0

080053fc <_free_r>:
 80053fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053fe:	2900      	cmp	r1, #0
 8005400:	d048      	beq.n	8005494 <_free_r+0x98>
 8005402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005406:	9001      	str	r0, [sp, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f1a1 0404 	sub.w	r4, r1, #4
 800540e:	bfb8      	it	lt
 8005410:	18e4      	addlt	r4, r4, r3
 8005412:	f7ff ffe7 	bl	80053e4 <__malloc_lock>
 8005416:	4a20      	ldr	r2, [pc, #128]	; (8005498 <_free_r+0x9c>)
 8005418:	9801      	ldr	r0, [sp, #4]
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	4615      	mov	r5, r2
 800541e:	b933      	cbnz	r3, 800542e <_free_r+0x32>
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6014      	str	r4, [r2, #0]
 8005424:	b003      	add	sp, #12
 8005426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800542a:	f7ff bfe1 	b.w	80053f0 <__malloc_unlock>
 800542e:	42a3      	cmp	r3, r4
 8005430:	d90b      	bls.n	800544a <_free_r+0x4e>
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1862      	adds	r2, r4, r1
 8005436:	4293      	cmp	r3, r2
 8005438:	bf04      	itt	eq
 800543a:	681a      	ldreq	r2, [r3, #0]
 800543c:	685b      	ldreq	r3, [r3, #4]
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	bf04      	itt	eq
 8005442:	1852      	addeq	r2, r2, r1
 8005444:	6022      	streq	r2, [r4, #0]
 8005446:	602c      	str	r4, [r5, #0]
 8005448:	e7ec      	b.n	8005424 <_free_r+0x28>
 800544a:	461a      	mov	r2, r3
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b10b      	cbz	r3, 8005454 <_free_r+0x58>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d9fa      	bls.n	800544a <_free_r+0x4e>
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	1855      	adds	r5, r2, r1
 8005458:	42a5      	cmp	r5, r4
 800545a:	d10b      	bne.n	8005474 <_free_r+0x78>
 800545c:	6824      	ldr	r4, [r4, #0]
 800545e:	4421      	add	r1, r4
 8005460:	1854      	adds	r4, r2, r1
 8005462:	42a3      	cmp	r3, r4
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	d1dd      	bne.n	8005424 <_free_r+0x28>
 8005468:	681c      	ldr	r4, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	4421      	add	r1, r4
 8005470:	6011      	str	r1, [r2, #0]
 8005472:	e7d7      	b.n	8005424 <_free_r+0x28>
 8005474:	d902      	bls.n	800547c <_free_r+0x80>
 8005476:	230c      	movs	r3, #12
 8005478:	6003      	str	r3, [r0, #0]
 800547a:	e7d3      	b.n	8005424 <_free_r+0x28>
 800547c:	6825      	ldr	r5, [r4, #0]
 800547e:	1961      	adds	r1, r4, r5
 8005480:	428b      	cmp	r3, r1
 8005482:	bf04      	itt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	6063      	str	r3, [r4, #4]
 800548a:	bf04      	itt	eq
 800548c:	1949      	addeq	r1, r1, r5
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	6054      	str	r4, [r2, #4]
 8005492:	e7c7      	b.n	8005424 <_free_r+0x28>
 8005494:	b003      	add	sp, #12
 8005496:	bd30      	pop	{r4, r5, pc}
 8005498:	200000ac 	.word	0x200000ac

0800549c <_realloc_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	4607      	mov	r7, r0
 80054a0:	4614      	mov	r4, r2
 80054a2:	460e      	mov	r6, r1
 80054a4:	b921      	cbnz	r1, 80054b0 <_realloc_r+0x14>
 80054a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054aa:	4611      	mov	r1, r2
 80054ac:	f7ff b86e 	b.w	800458c <_malloc_r>
 80054b0:	b922      	cbnz	r2, 80054bc <_realloc_r+0x20>
 80054b2:	f7ff ffa3 	bl	80053fc <_free_r>
 80054b6:	4625      	mov	r5, r4
 80054b8:	4628      	mov	r0, r5
 80054ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054bc:	f000 f848 	bl	8005550 <_malloc_usable_size_r>
 80054c0:	42a0      	cmp	r0, r4
 80054c2:	d20f      	bcs.n	80054e4 <_realloc_r+0x48>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4638      	mov	r0, r7
 80054c8:	f7ff f860 	bl	800458c <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0f2      	beq.n	80054b8 <_realloc_r+0x1c>
 80054d2:	4631      	mov	r1, r6
 80054d4:	4622      	mov	r2, r4
 80054d6:	f7fe fe85 	bl	80041e4 <memcpy>
 80054da:	4631      	mov	r1, r6
 80054dc:	4638      	mov	r0, r7
 80054de:	f7ff ff8d 	bl	80053fc <_free_r>
 80054e2:	e7e9      	b.n	80054b8 <_realloc_r+0x1c>
 80054e4:	4635      	mov	r5, r6
 80054e6:	e7e7      	b.n	80054b8 <_realloc_r+0x1c>

080054e8 <_read_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_read_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fc fa9e 	bl	8001a38 <_read>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_read_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_read_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200001b8 	.word	0x200001b8

0800550c <_fstat_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_fstat_r+0x20>)
 8005510:	2300      	movs	r3, #0
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	f7fc fad2 	bl	8001ac2 <_fstat>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d102      	bne.n	8005528 <_fstat_r+0x1c>
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	b103      	cbz	r3, 8005528 <_fstat_r+0x1c>
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	bd38      	pop	{r3, r4, r5, pc}
 800552a:	bf00      	nop
 800552c:	200001b8 	.word	0x200001b8

08005530 <_isatty_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d06      	ldr	r5, [pc, #24]	; (800554c <_isatty_r+0x1c>)
 8005534:	2300      	movs	r3, #0
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fc fad1 	bl	8001ae2 <_isatty>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_isatty_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_isatty_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	200001b8 	.word	0x200001b8

08005550 <_malloc_usable_size_r>:
 8005550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005554:	1f18      	subs	r0, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfbc      	itt	lt
 800555a:	580b      	ldrlt	r3, [r1, r0]
 800555c:	18c0      	addlt	r0, r0, r3
 800555e:	4770      	bx	lr

08005560 <_init>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr

0800556c <_fini>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr
