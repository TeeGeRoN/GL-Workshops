
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c4  080059c4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080059cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000000dc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc4a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2e  00000000  00000000  0002ccf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021edc  00000000  00000000  0002fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd1f  00000000  00000000  00051d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0933  00000000  00000000  0005da4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012e37e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a98  00000000  00000000  0012e3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005924 	.word	0x08005924

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005924 	.word	0x08005924

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <lcd10usDelay>:
#endif /* USE_BUSY_FLAG */

#ifndef USE_I2C_BUS
/*!	\brief	Creates delay multiples of 10us. */
static void lcd10usDelay(volatile uint32_t us)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	/* �onversion to us */
	us *= MCU_FREQ_VALUE;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <lcd10usDelay+0x38>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <lcd10usDelay+0x3c>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9b      	lsrs	r3, r3, #18
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	607b      	str	r3, [r7, #4]
	/* Wait */
	while (us > 0u)
 8000dd0:	e002      	b.n	8000dd8 <lcd10usDelay+0x24>
	{
		us--;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
	while (us > 0u)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f9      	bne.n	8000dd2 <lcd10usDelay+0x1e>
	}
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	431bde83 	.word	0x431bde83

08000df4 <lcdWrite>:

/*!	\brief	Send data/commands to the display. */
static void lcdWrite(uint8_t data)
{/* Low level function. */
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
#if (USE_BUSY_FLAG)
	/* Write data/commands to LCD. */
	CLR(LCD_RW_OUT, LCD_RW);
#endif /* USE_BUSY_FLAG */

	lcdHigh(data);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f825 	bl	8000e50 <lcdHigh>
	lcdStrobe();
 8000e06:	f000 f80d 	bl	8000e24 <lcdStrobe>
	lcdLow(data);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f873 	bl	8000ef8 <lcdLow>
	lcdStrobe();
 8000e12:	f000 f807 	bl	8000e24 <lcdStrobe>
	/* The busy flag must be checked after the 4-bit data has been transferred twice. */
#if (USE_BUSY_FLAG)
	lcd_busy_delay();
#else
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000e16:	2005      	movs	r0, #5
 8000e18:	f7ff ffcc 	bl	8000db4 <lcd10usDelay>
#endif /* USE_BUSY_FLAG */
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <lcdStrobe>:
}
#else

/*!	\brief	Initiate the transfer of data/commands to LCD. */
static void lcdStrobe(void)
{/* Low level function. */
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	SET(LCD_E_OUT, LCD_E);
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <lcdStrobe+0x28>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <lcdStrobe+0x28>)
 8000e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e32:	6153      	str	r3, [r2, #20]
	lcd10usDelay(ENABLE_CYCLE_TIME);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff ffbd 	bl	8000db4 <lcd10usDelay>
	CLR(LCD_E_OUT, LCD_E);	/* Enable strobe */
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <lcdStrobe+0x28>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <lcdStrobe+0x28>)
 8000e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e44:	6153      	str	r3, [r2, #20]
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <lcdHigh>:

/*!	\brief	Send the msb nibble of the data / command to LCD. */
static void lcdHigh(uint8_t data)
{/* Low level function. */
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	if(data & LCD_D7_MASK) SET(LCD_D7_OUT, LCD_D7); else CLR(LCD_D7_OUT, LCD_D7);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da06      	bge.n	8000e70 <lcdHigh+0x20>
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <lcdHigh+0xa4>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <lcdHigh+0xa4>)
 8000e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6c:	6153      	str	r3, [r2, #20]
 8000e6e:	e005      	b.n	8000e7c <lcdHigh+0x2c>
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <lcdHigh+0xa4>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <lcdHigh+0xa4>)
 8000e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e7a:	6153      	str	r3, [r2, #20]
	if(data & LCD_D6_MASK) SET(LCD_D6_OUT, LCD_D6); else CLR(LCD_D6_OUT, LCD_D6);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <lcdHigh+0x44>
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <lcdHigh+0xa4>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <lcdHigh+0xa4>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	e005      	b.n	8000ea0 <lcdHigh+0x50>
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <lcdHigh+0xa4>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <lcdHigh+0xa4>)
 8000e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e9e:	6153      	str	r3, [r2, #20]
	if(data & LCD_D5_MASK) SET(LCD_D5_OUT, LCD_D5); else CLR(LCD_D5_OUT, LCD_D5);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <lcdHigh+0x68>
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <lcdHigh+0xa4>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <lcdHigh+0xa4>)
 8000eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	e005      	b.n	8000ec4 <lcdHigh+0x74>
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <lcdHigh+0xa4>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <lcdHigh+0xa4>)
 8000ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ec2:	6153      	str	r3, [r2, #20]
	if(data & LCD_D4_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <lcdHigh+0x8c>
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <lcdHigh+0xa4>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <lcdHigh+0xa4>)
 8000ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed8:	6153      	str	r3, [r2, #20]
}
 8000eda:	e005      	b.n	8000ee8 <lcdHigh+0x98>
	if(data & LCD_D4_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <lcdHigh+0xa4>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <lcdHigh+0xa4>)
 8000ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee6:	6153      	str	r3, [r2, #20]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <lcdLow>:

/*!	\brief	Send the lsb nibble of the data / command to LCD. */
static void lcdLow(uint8_t data)
{/* Low level function. */
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
	if(data & LCD_D3_MASK) SET(LCD_D7_OUT, LCD_D7); else CLR(LCD_D7_OUT, LCD_D7);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <lcdLow+0x22>
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <lcdLow+0xa8>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <lcdLow+0xa8>)
 8000f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f16:	6153      	str	r3, [r2, #20]
 8000f18:	e005      	b.n	8000f26 <lcdLow+0x2e>
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <lcdLow+0xa8>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <lcdLow+0xa8>)
 8000f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f24:	6153      	str	r3, [r2, #20]
	if(data & LCD_D2_MASK) SET(LCD_D6_OUT, LCD_D6); else CLR(LCD_D6_OUT, LCD_D6);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <lcdLow+0x46>
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <lcdLow+0xa8>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <lcdLow+0xa8>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6153      	str	r3, [r2, #20]
 8000f3c:	e005      	b.n	8000f4a <lcdLow+0x52>
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <lcdLow+0xa8>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <lcdLow+0xa8>)
 8000f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f48:	6153      	str	r3, [r2, #20]
	if(data & LCD_D1_MASK) SET(LCD_D5_OUT, LCD_D5); else CLR(LCD_D5_OUT, LCD_D5);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <lcdLow+0x6a>
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <lcdLow+0xa8>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <lcdLow+0xa8>)
 8000f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f5e:	6153      	str	r3, [r2, #20]
 8000f60:	e005      	b.n	8000f6e <lcdLow+0x76>
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <lcdLow+0xa8>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <lcdLow+0xa8>)
 8000f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f6c:	6153      	str	r3, [r2, #20]
	if(data & LCD_D0_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <lcdLow+0x8e>
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <lcdLow+0xa8>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <lcdLow+0xa8>)
 8000f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f82:	6153      	str	r3, [r2, #20]
}
 8000f84:	e005      	b.n	8000f92 <lcdLow+0x9a>
	if(data & LCD_D0_MASK) SET(LCD_D4_OUT, LCD_D4); else CLR(LCD_D4_OUT, LCD_D4);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <lcdLow+0xa8>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <lcdLow+0xa8>)
 8000f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f90:	6153      	str	r3, [r2, #20]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <lcdConfig>:
#endif

/*!	\brief	Initializing by instruction. 4-bit interface initialization. */
static void lcdConfig(uint8_t param)
{/* Low level function. */
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, param, 0);
#else
	/* Send commands to LCD. */
	CLR(LCD_RS_OUT, LCD_RS);
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <lcdConfig+0x4c>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <lcdConfig+0x4c>)
 8000fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fb8:	6153      	str	r3, [r2, #20]
#if (USE_BUSY_FLAG)
	/* Write data/commands to LCD. */
	CLR(LCD_RW_OUT, LCD_RW);
#endif /* USE_BUSY_FLAG */

	lcdHigh(param);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff47 	bl	8000e50 <lcdHigh>
	lcdStrobe();		// Change 8-bit interface to 4-bit interface
 8000fc2:	f7ff ff2f 	bl	8000e24 <lcdStrobe>
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f7ff fef4 	bl	8000db4 <lcd10usDelay>
	lcdStrobe();		/* DB7 to DB4 of the "Function set" instruction is written twice. */
 8000fcc:	f7ff ff2a 	bl	8000e24 <lcdStrobe>
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000fd0:	2005      	movs	r0, #5
 8000fd2:	f7ff feef 	bl	8000db4 <lcd10usDelay>
	lcdLow(param);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff8d 	bl	8000ef8 <lcdLow>
	lcdStrobe();		// 4-bit, two lines, 5x8 pixel
 8000fde:	f7ff ff21 	bl	8000e24 <lcdStrobe>
	lcd10usDelay(BUSY_CYCLE_TIME);
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f7ff fee6 	bl	8000db4 <lcd10usDelay>
	/* Note: The number of display lines and character font cannot be changed after this point. */
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <lcdClrScr>:
 * 				and returns the display to its original status if it was shifted.
 * 				In other words, the display disappears and the cursor
 * 				or blinking goes to the left edge of the display (in the first line if 2 lines are displayed).
 * 				It also sets I/D to 1 (increment mode) in entry mode (S of entry mode does not change). */
void lcdClrScr(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, 0x01u, 0);
#else
	CLR(LCD_RS_OUT, LCD_RS);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <lcdClrScr+0x20>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <lcdClrScr+0x20>)
 8000ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001002:	6153      	str	r3, [r2, #20]
	/* Clear screen */
	lcdWrite(0x01u);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fef5 	bl	8000df4 <lcdWrite>
	/* Busy delay */
#if (USE_BUSY_FLAG)
	lcd_busy_delay();
#else
	lcd10usDelay(CLRSCR_CYCLE_TIME);
 800100a:	20c8      	movs	r0, #200	; 0xc8
 800100c:	f7ff fed2 	bl	8000db4 <lcd10usDelay>
#endif /* USE_BUSY_FLAG */
#endif
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000

08001018 <lcdReturn>:
 * 				and returns the display to its original status if it was shifted.
 * 				The DDRAM contents do not change.
 * 				The cursor or blinking go to the left edge of the display
 * 				(in the first line if 2 lines are displayed). */
void lcdReturn(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, 0x02u, 0);
#else
	CLR(LCD_RS_OUT, LCD_RS);
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <lcdReturn+0x20>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <lcdReturn+0x20>)
 8001022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001026:	6153      	str	r3, [r2, #20]
	/* Return home */
	lcdWrite(0x02u);
 8001028:	2002      	movs	r0, #2
 800102a:	f7ff fee3 	bl	8000df4 <lcdWrite>
	/* Busy delay */
#if (USE_BUSY_FLAG)
	lcd_busy_delay();
#else
	lcd10usDelay(RETHOME_CYCLE_TIME);
 800102e:	20c8      	movs	r0, #200	; 0xc8
 8001030:	f7ff fec0 	bl	8000db4 <lcd10usDelay>
#endif /* USE_BUSY_FLAG */
#endif
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <cursorShift>:
 * 				without writing or reading display data.
 * 				This function is used to correct or search the display.
 * 				In a 2-line display, the cursor moves to the second line
 * 				when it passes the 40th digit of the first line. */
void cursorShift(uint8_t direction)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
			/* Ignore this command */
			break;
	}

#else
	CLR(LCD_RS_OUT, LCD_RS);
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <cursorShift+0x3c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <cursorShift+0x3c>)
 800104c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001050:	6153      	str	r3, [r2, #20]
	/* Shift cursor */
	switch (direction)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b3c      	cmp	r3, #60	; 0x3c
 8001056:	d002      	beq.n	800105e <cursorShift+0x22>
 8001058:	2b3e      	cmp	r3, #62	; 0x3e
 800105a:	d004      	beq.n	8001066 <cursorShift+0x2a>
			lcdWrite(0x14u);
			break;

		default:
			/* Ignore this command */
			break;
 800105c:	e007      	b.n	800106e <cursorShift+0x32>
			lcdWrite(0x10u);
 800105e:	2010      	movs	r0, #16
 8001060:	f7ff fec8 	bl	8000df4 <lcdWrite>
			break;
 8001064:	e003      	b.n	800106e <cursorShift+0x32>
			lcdWrite(0x14u);
 8001066:	2014      	movs	r0, #20
 8001068:	f7ff fec4 	bl	8000df4 <lcdWrite>
			break;
 800106c:	bf00      	nop
	}
#endif
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <lcdGoto>:

/*!	\details	Go to the specified (DDRAM/CGRAM) memory address.*/
void lcdGoto(uint8_t line, uint8_t address)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
		default:
			/* Ignore this command */
			break;
	}
#else
	CLR(LCD_RS_OUT, LCD_RS);
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <lcdGoto+0x9c>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <lcdGoto+0x9c>)
 8001092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001096:	6153      	str	r3, [r2, #20]
	/* Set DDRAM/CGRAM address. */
	switch (line)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3b01      	subs	r3, #1
 800109c:	2b04      	cmp	r3, #4
 800109e:	d835      	bhi.n	800110c <lcdGoto+0x90>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <lcdGoto+0x2c>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010bd 	.word	0x080010bd
 80010ac:	080010cd 	.word	0x080010cd
 80010b0:	080010dd 	.word	0x080010dd
 80010b4:	080010ed 	.word	0x080010ed
 80010b8:	080010fd 	.word	0x080010fd
	{
		/* Set DDRAM address. */
		case LCD_1st_LINE: lcdWrite(0x80u | START_ADDRESS_1st_LINE | address); break;
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe95 	bl	8000df4 <lcdWrite>
 80010ca:	e020      	b.n	800110e <lcdGoto+0x92>
		case LCD_2nd_LINE: lcdWrite(0x80u | START_ADDRESS_2nd_LINE | address); break;
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fe8d 	bl	8000df4 <lcdWrite>
 80010da:	e018      	b.n	800110e <lcdGoto+0x92>
		case LCD_3rd_LINE: lcdWrite(0x80u | START_ADDRESS_3rd_LINE | address); break;
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe85 	bl	8000df4 <lcdWrite>
 80010ea:	e010      	b.n	800110e <lcdGoto+0x92>
		case LCD_4th_LINE: lcdWrite(0x80u | START_ADDRESS_4th_LINE | address); break;
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fe7d 	bl	8000df4 <lcdWrite>
 80010fa:	e008      	b.n	800110e <lcdGoto+0x92>
		/* Set CGRAM address. */
		case CGRAM : lcdWrite(0x40u | address); break;
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fe75 	bl	8000df4 <lcdWrite>
 800110a:	e000      	b.n	800110e <lcdGoto+0x92>

		default:
			/* Ignore this command */
			break;
 800110c:	bf00      	nop
	}
#endif
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <lcdSetMode>:

/*!	\details	Change LCD settings. */
void lcdSetMode(uint8_t param)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	/* Send a command to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, param, 0);
#else
	CLR(LCD_RS_OUT, LCD_RS);
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <lcdSetMode+0x28>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <lcdSetMode+0x28>)
 800112c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001130:	6153      	str	r3, [r2, #20]
	lcdWrite(param);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe5d 	bl	8000df4 <lcdWrite>
#endif
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <lcdPutc>:

/*!	\details	Write a single char to the current memory space (DDRAM/CGRAM). */
void lcdPutc(uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	/* Send data to LCD. */
#ifdef USE_I2C_BUS
	sendInternal(LCD_I2C_ADDRESS_8B, data, PIN_RS);
#else
	SET(LCD_RS_OUT, LCD_RS);
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <lcdPutc+0x2c>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <lcdPutc+0x2c>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6153      	str	r3, [r2, #20]
	lcdWrite(data);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe47 	bl	8000df4 <lcdWrite>
	/* Note:
	 * After execution of the CGRAM/DDRAM data write/read instruction, the RAM address counter is incremented
	 * or decremented by 1. The RAM address counter is updated after the busy flag turns off.
	 * tADD is the time elapsed after the busy flag turns off until the address counter is updated. */
	lcd10usDelay(AC_UPDATE_TIME);	/* Update RAM address counter delay. */
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fe24 	bl	8000db4 <lcd10usDelay>
#endif
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000

08001178 <lcdPuts>:

/*!	\details	Writes ANSI-C string to LCD (DDRAM memory space). */
//void lcdPuts(const uint8_t *str)
void lcdPuts(const char *str)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	/* Send a ANSI-C string to LCD. */
	while ('\0' != *str)
 8001180:	e028      	b.n	80011d4 <lcdPuts+0x5c>
	{
#if ( USE_FORMATTED_OUTPUT )
		if(('\n' == *str))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b0a      	cmp	r3, #10
 8001188:	d104      	bne.n	8001194 <lcdPuts+0x1c>
		{/*New line */
			lcdGoto(LCD_2nd_LINE, 0u);
 800118a:	2100      	movs	r1, #0
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff ff75 	bl	800107c <lcdGoto>
 8001192:	e01c      	b.n	80011ce <lcdPuts+0x56>
		}
		else if(('\r' == *str))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b0d      	cmp	r3, #13
 800119a:	d102      	bne.n	80011a2 <lcdPuts+0x2a>
		{/* Return home */
			lcdReturn();
 800119c:	f7ff ff3c 	bl	8001018 <lcdReturn>
 80011a0:	e015      	b.n	80011ce <lcdPuts+0x56>
		}
		else if(('\t' == *str))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b09      	cmp	r3, #9
 80011a8:	d10c      	bne.n	80011c4 <lcdPuts+0x4c>
		{/* Tab space */
			uint8_t i;

			for(i=0u; i<TAB_SPACE; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e005      	b.n	80011bc <lcdPuts+0x44>
			{/* Shift cursor to the right. */
				cursorShift(RIGHT);
 80011b0:	203e      	movs	r0, #62	; 0x3e
 80011b2:	f7ff ff43 	bl	800103c <cursorShift>
			for(i=0u; i<TAB_SPACE; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d9f6      	bls.n	80011b0 <lcdPuts+0x38>
 80011c2:	e004      	b.n	80011ce <lcdPuts+0x56>
		}
		else
#endif
		{
			/* Display a symbol. */
			lcdPutc(*str);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffbd 	bl	8001148 <lcdPutc>
		}
		/* Get the next symbol. */
		str++;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
	while ('\0' != *str)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1d2      	bne.n	8001182 <lcdPuts+0xa>
	}
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <lcdLoadChar>:

/*!	\details	Load the user-defined symbol into the CGRAM memory. */
void lcdLoadChar(uint8_t* vector, uint8_t position)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	/* Go to the CGRAM memory space: 0 to 7 */
	lcdGoto(CGRAM, (position * FONT_HEIGHT));
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	2005      	movs	r0, #5
 80011fc:	f7ff ff3e 	bl	800107c <lcdGoto>

	for(i = 0u; i < FONT_HEIGHT; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e009      	b.n	800121a <lcdLoadChar+0x34>
	{/* Load one row of pixels into the CGRAM register. */
		lcdPutc(vector[i]);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff9a 	bl	8001148 <lcdPutc>
	for(i = 0u; i < FONT_HEIGHT; i++)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	3301      	adds	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d9f2      	bls.n	8001206 <lcdLoadChar+0x20>
	}

	/* Return to the DDRAM memory space. */
	lcdGoto(LCD_1st_LINE, 0u);
 8001220:	2100      	movs	r1, #0
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff2a 	bl	800107c <lcdGoto>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <lcdPow10>:
	cursorShift(LEFT);		// ������ ������ �� ���� ������� ����
}

/*!	\brief	Returns 10^n value. */
static uint32_t lcdPow10(uint8_t n)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint32_t retval = 1u;
 800123a:	2301      	movs	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 800123e:	e008      	b.n	8001252 <lcdPow10+0x22>
	{
		retval *= 10u;
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
		n--;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b01      	subs	r3, #1
 8001250:	71fb      	strb	r3, [r7, #7]
	while (n > 0u)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f3      	bne.n	8001240 <lcdPow10+0x10>
	}

	return retval;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <lcdItos>:

/*!	\brief	Display a integer number: +/- 2147483647. */
void lcdItos(int32_t value)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	int32_t i;

	if (value < 0)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da05      	bge.n	8001282 <lcdItos+0x1a>
	{
		lcdPutc('-');
 8001276:	202d      	movs	r0, #45	; 0x2d
 8001278:	f7ff ff66 	bl	8001148 <lcdPutc>
		value = -value;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	425b      	negs	r3, r3
 8001280:	607b      	str	r3, [r7, #4]
	}

	i = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8001286:	e005      	b.n	8001294 <lcdItos+0x2c>
	{
		i *= 10;
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
	while ((value / i) > 9)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	fb92 f3f3 	sdiv	r3, r2, r3
 800129c:	2b09      	cmp	r3, #9
 800129e:	dcf3      	bgt.n	8001288 <lcdItos+0x20>
	}

	lcdPutc(value/i + '0');	/* Display at least one symbol */
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3330      	adds	r3, #48	; 0x30
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff4a 	bl	8001148 <lcdPutc>
	i /= 10;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <lcdItos+0xa8>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	1092      	asrs	r2, r2, #2
 80012be:	17db      	asrs	r3, r3, #31
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]

	while (i > 0)
 80012c4:	e01c      	b.n	8001300 <lcdItos+0x98>
	{
		lcdPutc('0' + ((value % (i*10)) / i));
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80012d8:	fb02 f201 	mul.w	r2, r2, r1
 80012dc:	1a9a      	subs	r2, r3, r2
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	3330      	adds	r3, #48	; 0x30
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff2c 	bl	8001148 <lcdPutc>
		i /= 10;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <lcdItos+0xa8>)
 80012f4:	fb82 1203 	smull	r1, r2, r2, r3
 80012f8:	1092      	asrs	r2, r2, #2
 80012fa:	17db      	asrs	r3, r3, #31
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	60fb      	str	r3, [r7, #12]
	while (i > 0)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	dcdf      	bgt.n	80012c6 <lcdItos+0x5e>
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	66666667 	.word	0x66666667

08001314 <lcdFtos>:

/*!	\brief	Display a floating point number. */
void lcdFtos(float value, uint8_t n)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	4603      	mov	r3, r0
 8001320:	70fb      	strb	r3, [r7, #3]
	if (value < 0.0)
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d508      	bpl.n	8001342 <lcdFtos+0x2e>
	{
		lcdPutc('-');
 8001330:	202d      	movs	r0, #45	; 0x2d
 8001332:	f7ff ff09 	bl	8001148 <lcdPutc>
		value = -value;
 8001336:	edd7 7a01 	vldr	s15, [r7, #4]
 800133a:	eef1 7a67 	vneg.f32	s15, s15
 800133e:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	lcdItos((int32_t)value); // ���� ���� �������
 8001342:	edd7 7a01 	vldr	s15, [r7, #4]
 8001346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134a:	ee17 0a90 	vmov	r0, s15
 800134e:	f7ff ff8b 	bl	8001268 <lcdItos>

	if (n > 0u)
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d016      	beq.n	8001386 <lcdFtos+0x72>
	{
		lcdPutc('.'); // ������
 8001358:	202e      	movs	r0, #46	; 0x2e
 800135a:	f7ff fef5 	bl	8001148 <lcdPutc>

		lcdNtos((uint32_t)(value * (float)lcdPow10(n)), n); // ���� ������� �������
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff65 	bl	8001230 <lcdPow10>
 8001366:	ee07 0a90 	vmov	s15, r0
 800136a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	4619      	mov	r1, r3
 800137e:	ee17 0a90 	vmov	r0, s15
 8001382:	f000 f805 	bl	8001390 <lcdNtos>
	}
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <lcdNtos>:

/*!	\brief	Display "n" right digits of "value". */
void lcdNtos(uint32_t value, uint8_t n)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	if (n > 0u)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d023      	beq.n	80013ea <lcdNtos+0x5a>
	{
		uint32_t i = lcdPow10(n - 1u);
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff41 	bl	8001230 <lcdPow10>
 80013ae:	60f8      	str	r0, [r7, #12]

		while (i > 0u)	/* Display at least one symbol */
 80013b0:	e018      	b.n	80013e4 <lcdNtos+0x54>
		{
			lcdPutc('0' + ((value/i) % 10u));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <lcdNtos+0x64>)
 80013bc:	fba3 2301 	umull	r2, r3, r3, r1
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	1aca      	subs	r2, r1, r3
 80013cc:	b2d3      	uxtb	r3, r2
 80013ce:	3330      	adds	r3, #48	; 0x30
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff feb8 	bl	8001148 <lcdPutc>

			i /= 10u;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <lcdNtos+0x64>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	60fb      	str	r3, [r7, #12]
		while (i > 0u)	/* Display at least one symbol */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e3      	bne.n	80013b2 <lcdNtos+0x22>
		}
	}
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	cccccccd 	.word	0xcccccccd

080013f8 <lcdInitBar>:

#if ( USE_PROGRESS_BAR )
/*!	\brief	Initialize the progress bar
 * 			(i.e. preload elements of the progress bar into CGRAM and reset all variables). */
static void lcdInitBar(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for (i = 0u; i < CGROM_PROGRESS_BAR_SIZE; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e01f      	b.n	8001444 <lcdInitBar+0x4c>
	{
		lcdGoto(CGRAM, (i * FONT_HEIGHT));
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	2005      	movs	r0, #5
 800140e:	f7ff fe35 	bl	800107c <lcdGoto>

		for (j = 0u; j < FONT_HEIGHT; j++)
 8001412:	2300      	movs	r3, #0
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	e00f      	b.n	8001438 <lcdInitBar+0x40>
		{
			if (j < PROGRESS_BAR_HEIGHT)
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d806      	bhi.n	800142c <lcdInitBar+0x34>
			{
				lcdPutc(progress_bar[i]);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <lcdInitBar+0x60>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe8f 	bl	8001148 <lcdPutc>
 800142a:	e002      	b.n	8001432 <lcdInitBar+0x3a>
			}
			else
			{/* Load an empty row of pixels in CGRAM. */
				lcdPutc(EMPTY_ROW);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe8b 	bl	8001148 <lcdPutc>
		for (j = 0u; j < FONT_HEIGHT; j++)
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	3301      	adds	r3, #1
 8001436:	71bb      	strb	r3, [r7, #6]
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d9ec      	bls.n	8001418 <lcdInitBar+0x20>
	for (i = 0u; i < CGROM_PROGRESS_BAR_SIZE; i++)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	3301      	adds	r3, #1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d9dc      	bls.n	8001404 <lcdInitBar+0xc>
			}
		}
	}

	/* Clear the entire bar and initialize all variables. */
	lcdClrBar();
 800144a:	f000 f807 	bl	800145c <lcdClrBar>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	08005968 	.word	0x08005968

0800145c <lcdClrBar>:
	lcdGoto(LCD_1st_LINE, 0u);
}

/*!	\brief	Clear the entire progress bar. */
void lcdClrBar(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	uint8_t i;
	/* Go to the last cell in the progress bar. */
	lcdGoto(PROGRESS_BAR_LINE, (PROGRESS_BAR_WIDTH - 1u));
 8001462:	2109      	movs	r1, #9
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff fe09 	bl	800107c <lcdGoto>
	/* Set the decrement mode. */
	lcdSetMode(ENTRY_MODE_DEC_NO_SHIFT);
 800146a:	2004      	movs	r0, #4
 800146c:	f7ff fe56 	bl	800111c <lcdSetMode>

	for(i = 0u; i < PROGRESS_BAR_WIDTH; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	e005      	b.n	8001482 <lcdClrBar+0x26>
	{/* Display the "empty cell" symbol (i.e. clear the LCD cell). */
		lcdPutc(EMPTY_LOAD);
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fe66 	bl	8001148 <lcdPutc>
	for(i = 0u; i < PROGRESS_BAR_WIDTH; i++)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3301      	adds	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d9f6      	bls.n	8001476 <lcdClrBar+0x1a>
	}

	/* Reset the progress bar variables. */
	current_bar_pixel = 0u;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <lcdClrBar+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	current_cell_load = EMPTY_LOAD;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <lcdClrBar+0x54>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]

	/* Restore the default entry mode. */
	lcdSetMode(DEFAULT_ENTRY_MODE);
 8001494:	2006      	movs	r0, #6
 8001496:	f7ff fe41 	bl	800111c <lcdSetMode>
	/* Return home. */
	lcdGoto(LCD_1st_LINE, 0u);
 800149a:	2100      	movs	r1, #0
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff fded 	bl	800107c <lcdGoto>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000098 	.word	0x20000098
 80014b0:	20000099 	.word	0x20000099

080014b4 <lcdInit>:
#endif

/*!	\brief	Initialize the LCD.
 * 	\note	This library use the 4-bit interface. */
void lcdInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
#ifndef USE_I2C_BUS
	/* GPIO initialization. */
	setAllPinsAsOutputs();
 80014b8:	f000 f81f 	bl	80014fa <lcdGpioInit>
	/* LCD initialization. */
	lcdWrite(0x30);
 80014bc:	2030      	movs	r0, #48	; 0x30
 80014be:	f7ff fc99 	bl	8000df4 <lcdWrite>
	lcd10usDelay(INIT_CYCLE_TIME);
 80014c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014c6:	f7ff fc75 	bl	8000db4 <lcd10usDelay>
	lcdWrite(0x30);
 80014ca:	2030      	movs	r0, #48	; 0x30
 80014cc:	f7ff fc92 	bl	8000df4 <lcdWrite>
	lcd10usDelay(INIT_CYCLE_TIME);
 80014d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014d4:	f7ff fc6e 	bl	8000db4 <lcd10usDelay>
	HAL_Delay(1);
	lcdConfig(0x02);
	HAL_Delay(1);
#endif
#endif
	lcdConfig(DEFAULT_DISPLAY_CONFIG);
 80014d8:	2028      	movs	r0, #40	; 0x28
 80014da:	f7ff fd63 	bl	8000fa4 <lcdConfig>
	lcdSetMode(DEFAULT_VIEW_MODE);
 80014de:	200c      	movs	r0, #12
 80014e0:	f7ff fe1c 	bl	800111c <lcdSetMode>
	lcdSetMode(DEFAULT_ENTRY_MODE);
 80014e4:	2006      	movs	r0, #6
 80014e6:	f7ff fe19 	bl	800111c <lcdSetMode>
	lcdClrScr();
 80014ea:	f7ff fd83 	bl	8000ff4 <lcdClrScr>
	lcdReturn();
 80014ee:	f7ff fd93 	bl	8001018 <lcdReturn>
	#if (USE_PROGRESS_BAR)
		lcdInitBar();
 80014f2:	f7ff ff81 	bl	80013f8 <lcdInitBar>
	#endif
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}

080014fa <lcdGpioInit>:
	current_status_backlight = (0 << 3);
	sendInternal(LCD_I2C_ADDRESS_8B, 0x0Fu, 0);
}
#else
void lcdGpioInit(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  	 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  	 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
	 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150e:	f000 fd5b 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001512:	f000 f8d3 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f000 f9d1 	bl	80018bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800151a:	f000 f9a5 	bl	8001868 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800151e:	f000 f92b 	bl	8001778 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001522:	485b      	ldr	r0, [pc, #364]	; (8001690 <main+0x188>)
 8001524:	f000 fe90 	bl	8002248 <HAL_ADC_Start_IT>
  //Initialization of the LCD display
  lcdInit();
 8001528:	f7ff ffc4 	bl	80014b4 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get ADC value from lm335
	  HAL_ADCEx_InjectedStart(&hadc1);
 800152c:	4858      	ldr	r0, [pc, #352]	; (8001690 <main+0x188>)
 800152e:	f001 fae7 	bl	8002b00 <HAL_ADCEx_InjectedStart>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	4856      	ldr	r0, [pc, #344]	; (8001690 <main+0x188>)
 8001536:	f000 fdfc 	bl	8002132 <HAL_ADC_PollForConversion>
	  adcEXT = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800153a:	2101      	movs	r1, #1
 800153c:	4854      	ldr	r0, [pc, #336]	; (8001690 <main+0x188>)
 800153e:	f001 fbf5 	bl	8002d2c <HAL_ADCEx_InjectedGetValue>
 8001542:	4603      	mov	r3, r0
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <main+0x18c>)
 8001546:	6013      	str	r3, [r2, #0]
	  HAL_ADCEx_InjectedStop(&hadc1);
 8001548:	4851      	ldr	r0, [pc, #324]	; (8001690 <main+0x188>)
 800154a:	f001 fba3 	bl	8002c94 <HAL_ADCEx_InjectedStop>
	  // Calculating the value of temperature in degrees Celsius.
	  tempEXT = calcTempEXT(adcEXT);
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <main+0x18c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fabf 	bl	8001ad8 <calcTempEXT>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <main+0x190>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
	  printDataLCD();
 8001564:	f000 fa50 	bl	8001a08 <printDataLCD>

	  // On/Off leds according to the flags
	  HAL_GPIO_WritePin(GPIOD, ledGREEN_Pin, flag_green);
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <main+0x194>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001572:	484b      	ldr	r0, [pc, #300]	; (80016a0 <main+0x198>)
 8001574:	f002 f8f2 	bl	800375c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ledORANGE_Pin, flag_orange);
 8001578:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <main+0x19c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4847      	ldr	r0, [pc, #284]	; (80016a0 <main+0x198>)
 8001584:	f002 f8ea 	bl	800375c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ledRED_Pin, flag_red);
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <main+0x1a0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001592:	4843      	ldr	r0, [pc, #268]	; (80016a0 <main+0x198>)
 8001594:	f002 f8e2 	bl	800375c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ledBLUE_Pin, flag_blue);
 8001598:	4b44      	ldr	r3, [pc, #272]	; (80016ac <main+0x1a4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	483f      	ldr	r0, [pc, #252]	; (80016a0 <main+0x198>)
 80015a4:	f002 f8da 	bl	800375c <HAL_GPIO_WritePin>

	  // UART poll
	  uint8_t rcvBuf[1];
	  HAL_StatusTypeDef result;
	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 20);
 80015a8:	1d39      	adds	r1, r7, #4
 80015aa:	2314      	movs	r3, #20
 80015ac:	2201      	movs	r2, #1
 80015ae:	4840      	ldr	r0, [pc, #256]	; (80016b0 <main+0x1a8>)
 80015b0:	f002 fe2d 	bl	800420e <HAL_UART_Receive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
	  if (result == HAL_OK)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d154      	bne.n	8001668 <main+0x160>
	  {
		  switch (rcvBuf[0])
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	3b31      	subs	r3, #49	; 0x31
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d84a      	bhi.n	800165c <main+0x154>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <main+0xc4>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015fd 	.word	0x080015fd
 80015d4:	0800161d 	.word	0x0800161d
 80015d8:	0800163d 	.word	0x0800163d
		  {
		  		case '1':
		  			flag_red = !flag_red;
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <main+0x1a0>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf14      	ite	ne
 80015e4:	2301      	movne	r3, #1
 80015e6:	2300      	moveq	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f083 0301 	eor.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <main+0x1a0>)
 80015f8:	701a      	strb	r2, [r3, #0]
		  			break;
 80015fa:	e031      	b.n	8001660 <main+0x158>
		  		case '2':
		  			flag_green = !flag_green;
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <main+0x194>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f083 0301 	eor.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <main+0x194>)
 8001618:	701a      	strb	r2, [r3, #0]
		  			break;
 800161a:	e021      	b.n	8001660 <main+0x158>
		  		case '3':
		  			flag_orange = !flag_orange;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <main+0x19c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <main+0x19c>)
 8001638:	701a      	strb	r2, [r3, #0]
		  			break;
 800163a:	e011      	b.n	8001660 <main+0x158>
		  		case '4':
		  			flag_blue = !flag_blue;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <main+0x1a4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f083 0301 	eor.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <main+0x1a4>)
 8001658:	701a      	strb	r2, [r3, #0]
		  			break;
 800165a:	e001      	b.n	8001660 <main+0x158>
		  		default:
		  			__NOP();
 800165c:	bf00      	nop
		  			break;
 800165e:	bf00      	nop
		  }
		  sendState();
 8001660:	f000 fa80 	bl	8001b64 <sendState>
		  rcvBuf[0] = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	713b      	strb	r3, [r7, #4]
	  }
	  // Every 5 sec
	  if((HAL_GetTick() - sendTimer) > sendInterval)
 8001668:	f000 fd14 	bl	8002094 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <main+0x1ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <main+0x1b0>)
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	4293      	cmp	r3, r2
 800167a:	f67f af57 	bls.w	800152c <main+0x24>
	  {
		  sendState();
 800167e:	f000 fa71 	bl	8001b64 <sendState>
		  sendTimer = HAL_GetTick();
 8001682:	f000 fd07 	bl	8002094 <HAL_GetTick>
 8001686:	4603      	mov	r3, r0
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <main+0x1ac>)
 800168a:	6013      	str	r3, [r2, #0]
  {
 800168c:	e74e      	b.n	800152c <main+0x24>
 800168e:	bf00      	nop
 8001690:	200000f8 	.word	0x200000f8
 8001694:	200000a0 	.word	0x200000a0
 8001698:	20000140 	.word	0x20000140
 800169c:	2000009a 	.word	0x2000009a
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	2000009b 	.word	0x2000009b
 80016a8:	2000009c 	.word	0x2000009c
 80016ac:	2000009d 	.word	0x2000009d
 80016b0:	200000b4 	.word	0x200000b4
 80016b4:	200000a4 	.word	0x200000a4
 80016b8:	20000000 	.word	0x20000000

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2230      	movs	r2, #48	; 0x30
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 fcf4 	bl	80050b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <SystemClock_Config+0xb4>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <SystemClock_Config+0xb4>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <SystemClock_Config+0xb4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <SystemClock_Config+0xb8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <SystemClock_Config+0xb8>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <SystemClock_Config+0xb8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2310      	movs	r3, #16
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001724:	2300      	movs	r3, #0
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4618      	mov	r0, r3
 800172e:	f002 f847 	bl	80037c0 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001738:	f000 fab4 	bl	8001ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f002 faaa 	bl	8003cb0 <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001762:	f000 fa9f 	bl	8001ca4 <Error_Handler>
  }
}
 8001766:	bf00      	nop
 8001768:	3750      	adds	r7, #80	; 0x50
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000

08001778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2220      	movs	r2, #32
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fc90 	bl	80050b8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <MX_ADC1_Init+0xe0>)
 800179a:	4a30      	ldr	r2, [pc, #192]	; (800185c <MX_ADC1_Init+0xe4>)
 800179c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017c6:	4a26      	ldr	r2, [pc, #152]	; (8001860 <MX_ADC1_Init+0xe8>)
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_ADC1_Init+0xe0>)
 80017e6:	f000 fc61 	bl	80020ac <HAL_ADC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80017f0:	f000 fa58 	bl	8001ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017f4:	2309      	movs	r3, #9
 80017f6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	4619      	mov	r1, r3
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_ADC1_Init+0xe0>)
 8001808:	f000 ff5c 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001812:	f000 fa47 	bl	8001ca4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8001816:	2309      	movs	r3, #9
 8001818:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001822:	2307      	movs	r3, #7
 8001824:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_ADC1_Init+0xec>)
 800182c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_ADC1_Init+0xe0>)
 8001840:	f001 fab6 	bl	8002db0 <HAL_ADCEx_InjectedConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800184a:	f000 fa2b 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3730      	adds	r7, #48	; 0x30
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000f8 	.word	0x200000f8
 800185c:	40012000 	.word	0x40012000
 8001860:	0f000001 	.word	0x0f000001
 8001864:	000f0001 	.word	0x000f0001

08001868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART3_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART3_UART_Init+0x4c>)
 80018a0:	f002 fbd6 	bl	8004050 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 f9fb 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200000b4 	.word	0x200000b4
 80018b8:	40004800 	.word	0x40004800

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <MX_GPIO_Init+0x13c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <MX_GPIO_Init+0x13c>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <MX_GPIO_Init+0x13c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <MX_GPIO_Init+0x13c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <MX_GPIO_Init+0x13c>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <MX_GPIO_Init+0x13c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MX_GPIO_Init+0x13c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <MX_GPIO_Init+0x13c>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <MX_GPIO_Init+0x13c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D4_Pin
 800195e:	2200      	movs	r2, #0
 8001960:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8001964:	4825      	ldr	r0, [pc, #148]	; (80019fc <MX_GPIO_Init+0x140>)
 8001966:	f001 fef9 	bl	800375c <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ledGREEN_Pin|ledORANGE_Pin|ledRED_Pin|ledBLUE_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001970:	4823      	ldr	r0, [pc, #140]	; (8001a00 <MX_GPIO_Init+0x144>)
 8001972:	f001 fef3 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_E_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D4_Pin
 8001976:	f64f 4380 	movw	r3, #64640	; 0xfc80
 800197a:	617b      	str	r3, [r7, #20]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	481b      	ldr	r0, [pc, #108]	; (80019fc <MX_GPIO_Init+0x140>)
 8001990:	f001 fd48 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledGREEN_Pin ledORANGE_Pin ledRED_Pin ledBLUE_Pin */
  GPIO_InitStruct.Pin = ledGREEN_Pin|ledORANGE_Pin|ledRED_Pin|ledBLUE_Pin;
 8001994:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <MX_GPIO_Init+0x144>)
 80019ae:	f001 fd39 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : buttUP_Pin buttDOWN_Pin buttLEFT_Pin buttRIGHT_Pin */
  GPIO_InitStruct.Pin = buttUP_Pin|buttDOWN_Pin|buttLEFT_Pin|buttRIGHT_Pin;
 80019b2:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019be:	2301      	movs	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	480e      	ldr	r0, [pc, #56]	; (8001a04 <MX_GPIO_Init+0x148>)
 80019ca:	f001 fd2b 	bl	8003424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2017      	movs	r0, #23
 80019d4:	f001 fc5d 	bl	8003292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019d8:	2017      	movs	r0, #23
 80019da:	f001 fc76 	bl	80032ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2028      	movs	r0, #40	; 0x28
 80019e4:	f001 fc55 	bl	8003292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e8:	2028      	movs	r0, #40	; 0x28
 80019ea:	f001 fc6e 	bl	80032ca <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40020800 	.word	0x40020800

08001a08 <printDataLCD>:

/* USER CODE BEGIN 4 */
void printDataLCD()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	/* Function for displaying values. */
   lcdClrScr();	// Clear the display
 8001a0e:	f7ff faf1 	bl	8000ff4 <lcdClrScr>

   lcdLoadChar(symbDegree,6); // Load the degree symbol into memory
 8001a12:	2106      	movs	r1, #6
 8001a14:	4824      	ldr	r0, [pc, #144]	; (8001aa8 <printDataLCD+0xa0>)
 8001a16:	f7ff fbe6 	bl	80011e6 <lcdLoadChar>

   lcdGoto(LCD_1st_LINE,0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fb2d 	bl	800107c <lcdGoto>
   lcdPuts("Temp: ");
 8001a22:	4822      	ldr	r0, [pc, #136]	; (8001aac <printDataLCD+0xa4>)
 8001a24:	f7ff fba8 	bl	8001178 <lcdPuts>
   lcdFtos(tempEXT,1); // 1 decimal place
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <printDataLCD+0xa8>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	2001      	movs	r0, #1
 8001a30:	eeb0 0a67 	vmov.f32	s0, s15
 8001a34:	f7ff fc6e 	bl	8001314 <lcdFtos>
   lcdPutc(6); // Print the degree symbol
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff fb85 	bl	8001148 <lcdPutc>

   lcdGoto(LCD_1st_LINE,0);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fb1b 	bl	800107c <lcdGoto>
   lcdPuts("\nLedState ");
 8001a46:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <printDataLCD+0xac>)
 8001a48:	f7ff fb96 	bl	8001178 <lcdPuts>
   _Bool flags[4] =
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <printDataLCD+0xb0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	703b      	strb	r3, [r7, #0]
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <printDataLCD+0xb4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	707b      	strb	r3, [r7, #1]
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <printDataLCD+0xb8>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	70bb      	strb	r3, [r7, #2]
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <printDataLCD+0xbc>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	70fb      	strb	r3, [r7, #3]
		   flag_green,
		   flag_orange,
		   flag_red,
		   flag_blue,
   };
   for (int i = 0; i < 4; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	e015      	b.n	8001a96 <printDataLCD+0x8e>
   {
	   if (flags[i] == 1)
 8001a6a:	463a      	mov	r2, r7
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <printDataLCD+0x76>
		   lcdPuts("Y");
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <printDataLCD+0xc0>)
 8001a78:	f7ff fb7e 	bl	8001178 <lcdPuts>
 8001a7c:	e002      	b.n	8001a84 <printDataLCD+0x7c>
	   else
		   lcdPuts("N");
 8001a7e:	4813      	ldr	r0, [pc, #76]	; (8001acc <printDataLCD+0xc4>)
 8001a80:	f7ff fb7a 	bl	8001178 <lcdPuts>
	   if (i < 3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	dc02      	bgt.n	8001a90 <printDataLCD+0x88>
		   lcdPuts("/");
 8001a8a:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <printDataLCD+0xc8>)
 8001a8c:	f7ff fb74 	bl	8001178 <lcdPuts>
   for (int i = 0; i < 4; i++)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3301      	adds	r3, #1
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	dde6      	ble.n	8001a6a <printDataLCD+0x62>
   }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	0800593c 	.word	0x0800593c
 8001ab0:	20000140 	.word	0x20000140
 8001ab4:	08005944 	.word	0x08005944
 8001ab8:	2000009a 	.word	0x2000009a
 8001abc:	2000009b 	.word	0x2000009b
 8001ac0:	2000009c 	.word	0x2000009c
 8001ac4:	2000009d 	.word	0x2000009d
 8001ac8:	08005950 	.word	0x08005950
 8001acc:	08005954 	.word	0x08005954
 8001ad0:	08005958 	.word	0x08005958
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <calcTempEXT>:

float calcTempEXT(uint16_t inputADC_EXT)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
	 *  => 1*C = 0.02v
	 * voltage = inputADC_EXT*2.98/4096;
	 * where 2.98 is voltage on the sensor;
	 * temp*C = (Vo - voltage) / 0.02
	 */
	return (2.02 - (inputADC_EXT*2.98/(float)4096)) / 0.02;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd1d 	bl	8000524 <__aeabi_i2d>
 8001aea:	a31c      	add	r3, pc, #112	; (adr r3, 8001b5c <calcTempEXT+0x84>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fd82 	bl	80005f8 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <calcTempEXT+0x80>)
 8001b02:	f7fe fea3 	bl	800084c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	a10f      	add	r1, pc, #60	; (adr r1, 8001b48 <calcTempEXT+0x70>)
 8001b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b10:	f7fe fbba 	bl	8000288 <__aeabi_dsub>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	a30c      	add	r3, pc, #48	; (adr r3, 8001b50 <calcTempEXT+0x78>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fe93 	bl	800084c <__aeabi_ddiv>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ff75 	bl	8000a1c <__aeabi_d2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	ee07 3a90 	vmov	s15, r3
}
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	f3af 8000 	nop.w
 8001b48:	c28f5c29 	.word	0xc28f5c29
 8001b4c:	400028f5 	.word	0x400028f5
 8001b50:	47ae147b 	.word	0x47ae147b
 8001b54:	3f947ae1 	.word	0x3f947ae1
 8001b58:	40b00000 	.word	0x40b00000
 8001b5c:	3d70a3d7 	.word	0x3d70a3d7
 8001b60:	4007d70a 	.word	0x4007d70a

08001b64 <sendState>:

void sendState()
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af04      	add	r7, sp, #16
	char str[30];
	sprintf (str, "%d%d%d%d%li", flag_red, flag_green, flag_orange, flag_blue, adcEXT);
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <sendState+0x54>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461c      	mov	r4, r3
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <sendState+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461d      	mov	r5, r3
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <sendState+0x5c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <sendState+0x60>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <sendState+0x64>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4638      	mov	r0, r7
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	9101      	str	r1, [sp, #4]
 8001b8c:	9200      	str	r2, [sp, #0]
 8001b8e:	462b      	mov	r3, r5
 8001b90:	4622      	mov	r2, r4
 8001b92:	490e      	ldr	r1, [pc, #56]	; (8001bcc <sendState+0x68>)
 8001b94:	f003 fa98 	bl	80050c8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fb18 	bl	80001d0 <strlen>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4639      	mov	r1, r7
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <sendState+0x6c>)
 8001baa:	f002 fa9e 	bl	80040ea <HAL_UART_Transmit>
}
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000009c 	.word	0x2000009c
 8001bbc:	2000009a 	.word	0x2000009a
 8001bc0:	2000009b 	.word	0x2000009b
 8001bc4:	2000009d 	.word	0x2000009d
 8001bc8:	200000a0 	.word	0x200000a0
 8001bcc:	0800595c 	.word	0x0800595c
 8001bd0:	200000b4 	.word	0x200000b4

08001bd4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
	/* External interrupt handler function. */
	/* Tracking on which pin the interrupt was triggered. */
	switch (GPIO_Pin)
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001be4:	d01e      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0x50>
 8001be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bea:	dc4b      	bgt.n	8001c84 <HAL_GPIO_EXTI_Callback+0xb0>
 8001bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf0:	d008      	beq.n	8001c04 <HAL_GPIO_EXTI_Callback+0x30>
 8001bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf6:	dc45      	bgt.n	8001c84 <HAL_GPIO_EXTI_Callback+0xb0>
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d023      	beq.n	8001c44 <HAL_GPIO_EXTI_Callback+0x70>
 8001bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c00:	d030      	beq.n	8001c64 <HAL_GPIO_EXTI_Callback+0x90>
 8001c02:	e03f      	b.n	8001c84 <HAL_GPIO_EXTI_Callback+0xb0>
	{
		case buttLEFT_Pin:
			flag_orange = !flag_orange;
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c20:	701a      	strb	r2, [r3, #0]
			break;
 8001c22:	e031      	b.n	8001c88 <HAL_GPIO_EXTI_Callback+0xb4>
		case buttRIGHT_Pin:
			flag_blue = !flag_blue;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c40:	701a      	strb	r2, [r3, #0]
			break;
 8001c42:	e021      	b.n	8001c88 <HAL_GPIO_EXTI_Callback+0xb4>
		case buttUP_Pin:
			flag_red = !flag_red;
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001c60:	701a      	strb	r2, [r3, #0]
			break;
 8001c62:	e011      	b.n	8001c88 <HAL_GPIO_EXTI_Callback+0xb4>
		case buttDOWN_Pin:
			flag_green = !flag_green;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c80:	701a      	strb	r2, [r3, #0]
			break;
 8001c82:	e001      	b.n	8001c88 <HAL_GPIO_EXTI_Callback+0xb4>
		default:
			__NOP();
 8001c84:	bf00      	nop
			break;
 8001c86:	bf00      	nop
	}
	sendState();
 8001c88:	f7ff ff6c 	bl	8001b64 <sendState>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000009b 	.word	0x2000009b
 8001c98:	2000009d 	.word	0x2000009d
 8001c9c:	2000009c 	.word	0x2000009c
 8001ca0:	2000009a 	.word	0x2000009a

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	e7fe      	b.n	8001cac <Error_Handler+0x8>
	...

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_ADC_MspInit+0x8c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d12f      	bne.n	8001d82 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_ADC_MspInit+0x90>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_ADC_MspInit+0x90>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_ADC_MspInit+0x90>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_ADC_MspInit+0x90>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_ADC_MspInit+0x90>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_ADC_MspInit+0x90>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <HAL_ADC_MspInit+0x94>)
 8001d6e:	f001 fb59 	bl	8003424 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2012      	movs	r0, #18
 8001d78:	f001 fa8b 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d7c:	2012      	movs	r0, #18
 8001d7e:	f001 faa4 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40012000 	.word	0x40012000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_UART_MspInit+0x94>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d134      	bne.n	8001e24 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_UART_MspInit+0x98>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_UART_MspInit+0x98>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_UART_MspInit+0x98>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_UART_MspInit+0x98>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e04:	2307      	movs	r3, #7
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_UART_MspInit+0x9c>)
 8001e10:	f001 fb08 	bl	8003424 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2027      	movs	r0, #39	; 0x27
 8001e1a:	f001 fa3a 	bl	8003292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e1e:	2027      	movs	r0, #39	; 0x27
 8001e20:	f001 fa53 	bl	80032ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020c00 	.word	0x40020c00

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 f8f2 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <ADC_IRQHandler+0x10>)
 8001e92:	f000 fab7 	bl	8002404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200000f8 	.word	0x200000f8

08001ea0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ea4:	2040      	movs	r0, #64	; 0x40
 8001ea6:	f001 fc73 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001eaa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eae:	f001 fc6f 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001eb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eb6:	f001 fc6b 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <USART3_IRQHandler+0x10>)
 8001ec6:	f002 fa45 	bl	8004354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200000b4 	.word	0x200000b4

08001ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ed8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001edc:	f001 fc58 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f003 f8a6 	bl	8005064 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20020000 	.word	0x20020000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	200000a8 	.word	0x200000a8
 8001f4c:	20000158 	.word	0x20000158

08001f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f90:	4c0b      	ldr	r4, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffd7 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f003 f865 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff faaf 	bl	8001508 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001fb8:	080059cc 	.word	0x080059cc
  ldr r2, =_sbss
 8001fbc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001fc0:	20000158 	.word	0x20000158

08001fc4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <CAN1_RX0_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f001 f943 	bl	800327c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fe58 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f001 f95b 	bl	80032e6 <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002048:	f001 f923 	bl	8003292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000000c 	.word	0x2000000c
 8002064:	20000014 	.word	0x20000014
 8002068:	20000010 	.word	0x20000010

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000014 	.word	0x20000014
 8002090:	20000144 	.word	0x20000144

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000144 	.word	0x20000144

080020ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e033      	b.n	800212a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fe18 	bl	8001d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020f2:	f023 0302 	bic.w	r3, r3, #2
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fc02 	bl	8002908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
 800211a:	e001      	b.n	8002120 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214e:	d113      	bne.n	8002178 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d10b      	bne.n	8002178 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e063      	b.n	8002240 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002178:	f7ff ff8c 	bl	8002094 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800217e:	e021      	b.n	80021c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002186:	d01d      	beq.n	80021c4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_ADC_PollForConversion+0x6c>
 800218e:	f7ff ff81 	bl	8002094 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d212      	bcs.n	80021c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d00b      	beq.n	80021c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d1d6      	bne.n	8002180 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0212 	mvn.w	r2, #18
 80021da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d123      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11f      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	d111      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Start_IT+0x1a>
 800225e:	2302      	movs	r3, #2
 8002260:	e0bd      	b.n	80023de <HAL_ADC_Start_IT+0x196>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d018      	beq.n	80022aa <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002288:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_ADC_Start_IT+0x1a4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_ADC_Start_IT+0x1a8>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9a      	lsrs	r2, r3, #18
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	f040 8085 	bne.w	80023c4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f8:	d106      	bne.n	8002308 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f023 0206 	bic.w	r2, r3, #6
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
 8002306:	e002      	b.n	800230e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_ADC_Start_IT+0x1ac>)
 8002318:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002322:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002332:	f043 0320 	orr.w	r3, r3, #32
 8002336:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b00      	cmp	r3, #0
 8002342:	d12a      	bne.n	800239a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_ADC_Start_IT+0x1b0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d015      	beq.n	800237a <HAL_ADC_Start_IT+0x132>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <HAL_ADC_Start_IT+0x1b4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d105      	bne.n	8002364 <HAL_ADC_Start_IT+0x11c>
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_ADC_Start_IT+0x1ac>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a25      	ldr	r2, [pc, #148]	; (8002400 <HAL_ADC_Start_IT+0x1b8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d136      	bne.n	80023dc <HAL_ADC_Start_IT+0x194>
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_ADC_Start_IT+0x1ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d130      	bne.n	80023dc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d129      	bne.n	80023dc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	e020      	b.n	80023dc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_ADC_Start_IT+0x1b0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d11b      	bne.n	80023dc <HAL_ADC_Start_IT+0x194>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d114      	bne.n	80023dc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	e00b      	b.n	80023dc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	40012300 	.word	0x40012300
 80023f8:	40012000 	.word	0x40012000
 80023fc:	40012100 	.word	0x40012100
 8002400:	40012200 	.word	0x40012200

08002404 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d049      	beq.n	80024da <HAL_ADC_IRQHandler+0xd6>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d046      	beq.n	80024da <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d12b      	bne.n	80024ca <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d127      	bne.n	80024ca <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002492:	2b00      	cmp	r3, #0
 8002494:	d119      	bne.n	80024ca <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0220 	bic.w	r2, r2, #32
 80024a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8db 	bl	8002686 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0212 	mvn.w	r2, #18
 80024d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b80      	cmp	r3, #128	; 0x80
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d057      	beq.n	80025bc <HAL_ADC_IRQHandler+0x1b8>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d054      	beq.n	80025bc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d139      	bne.n	80025ac <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002550:	2b00      	cmp	r3, #0
 8002552:	d12b      	bne.n	80025ac <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d124      	bne.n	80025ac <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11d      	bne.n	80025ac <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d119      	bne.n	80025ac <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002586:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fbf5 	bl	8002d9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 020c 	mvn.w	r2, #12
 80025ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d017      	beq.n	800261e <HAL_ADC_IRQHandler+0x21a>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d014      	beq.n	800261e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10d      	bne.n	800261e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f843 	bl	800269a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0201 	mvn.w	r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b20      	cmp	r3, #32
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <HAL_ADC_IRQHandler+0x27a>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0202 	orr.w	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f81d 	bl	80026ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0220 	mvn.w	r2, #32
 800267c:	601a      	str	r2, [r3, #0]
  }
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e105      	b.n	80028ec <HAL_ADC_ConfigChannel+0x228>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d925      	bls.n	800273c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	2207      	movs	r2, #7
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68d9      	ldr	r1, [r3, #12]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	4603      	mov	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4403      	add	r3, r0
 800272e:	3b1e      	subs	r3, #30
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	e022      	b.n	8002782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	2207      	movs	r2, #7
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	4603      	mov	r3, r0
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4403      	add	r3, r0
 8002778:	409a      	lsls	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d824      	bhi.n	80027d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b05      	subs	r3, #5
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b05      	subs	r3, #5
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	e04c      	b.n	800286e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d824      	bhi.n	8002826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b23      	subs	r3, #35	; 0x23
 80027ee:	221f      	movs	r2, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43da      	mvns	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	400a      	ands	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b23      	subs	r3, #35	; 0x23
 8002818:	fa00 f203 	lsl.w	r2, r0, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
 8002824:	e023      	b.n	800286e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	3b41      	subs	r3, #65	; 0x41
 8002838:	221f      	movs	r2, #31
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	400a      	ands	r2, r1
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3b41      	subs	r3, #65	; 0x41
 8002862:	fa00 f203 	lsl.w	r2, r0, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_ADC_ConfigChannel+0x234>)
 8002870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_ADC_ConfigChannel+0x238>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d109      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1cc>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d105      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_ADC_ConfigChannel+0x238>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d123      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d003      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x1e6>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b11      	cmp	r3, #17
 80028a8:	d11b      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d111      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_ADC_ConfigChannel+0x23c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_ADC_ConfigChannel+0x240>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9a      	lsrs	r2, r3, #18
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40012300 	.word	0x40012300
 80028fc:	40012000 	.word	0x40012000
 8002900:	2000000c 	.word	0x2000000c
 8002904:	431bde83 	.word	0x431bde83

08002908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <ADC_Init+0x1f0>)
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	021a      	lsls	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	4a58      	ldr	r2, [pc, #352]	; (8002afc <ADC_Init+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	e00f      	b.n	8002a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0202 	bic.w	r2, r2, #2
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
 8002a20:	005a      	lsls	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	035a      	lsls	r2, r3, #13
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	e007      	b.n	8002a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	051a      	lsls	r2, r3, #20
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002abe:	025a      	lsls	r2, r3, #9
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	029a      	lsls	r2, r3, #10
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	0f000001 	.word	0x0f000001

08002b00 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADCEx_InjectedStart+0x22>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0aa      	b.n	8002c78 <HAL_ADCEx_InjectedStart+0x178>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b48:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <HAL_ADCEx_InjectedStart+0x184>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a4e      	ldr	r2, [pc, #312]	; (8002c88 <HAL_ADCEx_InjectedStart+0x188>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d172      	bne.n	8002c5e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f06f 0204 	mvn.w	r2, #4
 8002bae:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_ADCEx_InjectedStart+0x18c>)
 8002bb2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d124      	bne.n	8002c0a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d041      	beq.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d03e      	beq.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e035      	b.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <HAL_ADCEx_InjectedStart+0x190>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d11a      	bne.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d014      	beq.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	e00b      	b.n	8002c76 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	431bde83 	.word	0x431bde83
 8002c8c:	40012300 	.word	0x40012300
 8002c90:	40012000 	.word	0x40012000

08002c94 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADCEx_InjectedStop+0x1a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e037      	b.n	8002d1e <HAL_ADCEx_InjectedStop+0x8a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d120      	bne.n	8002d04 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d119      	bne.n	8002d04 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d112      	bne.n	8002d14 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d02:	e007      	b.n	8002d14 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0204 	mvn.w	r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d81f      	bhi.n	8002d8c <HAL_ADCEx_InjectedGetValue+0x60>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_ADCEx_InjectedGetValue+0x28>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d83 	.word	0x08002d83
 8002d58:	08002d79 	.word	0x08002d79
 8002d5c:	08002d6f 	.word	0x08002d6f
 8002d60:	08002d65 	.word	0x08002d65
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002d6c:	e00f      	b.n	8002d8e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002d76:	e00a      	b.n	8002d8e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002d80:	e005      	b.n	8002d8e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002d8a:	e000      	b.n	8002d8e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002d8c:	bf00      	nop
  }
  return tmp;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e17d      	b.n	80030c4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d925      	bls.n	8002e24 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3b1e      	subs	r3, #30
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68d9      	ldr	r1, [r3, #12]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4403      	add	r3, r0
 8002e16:	3b1e      	subs	r3, #30
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	e022      	b.n	8002e6a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	2207      	movs	r2, #7
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4403      	add	r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	051a      	lsls	r2, r3, #20
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3303      	adds	r3, #3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	221f      	movs	r2, #31
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a74      	ldr	r2, [pc, #464]	; (80030d0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	e00f      	b.n	8002f68 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002f66:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	7d5b      	ldrb	r3, [r3, #21]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	e007      	b.n	8002f92 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f90:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7d1b      	ldrb	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	e007      	b.n	8002fbc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fba:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d02e      	beq.n	8003022 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d840      	bhi.n	800304a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d002      	beq.n	8002fd2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d014      	beq.n	8002ffa <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002fd0:	e03b      	b.n	800304a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002fe0:	f023 030f 	bic.w	r3, r3, #15
 8002fe4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6959      	ldr	r1, [r3, #20]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	615a      	str	r2, [r3, #20]
      break;
 8002ff8:	e03b      	b.n	8003072 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003008:	f023 030f 	bic.w	r3, r3, #15
 800300c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6999      	ldr	r1, [r3, #24]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
      break;
 8003020:	e027      	b.n	8003072 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003030:	f023 030f 	bic.w	r3, r3, #15
 8003034:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e013      	b.n	8003072 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003058:	f023 030f 	bic.w	r3, r3, #15
 800305c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a19      	ldr	r1, [r3, #32]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	621a      	str	r2, [r3, #32]
      break;
 8003070:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d109      	bne.n	8003094 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b12      	cmp	r3, #18
 8003086:	d105      	bne.n	8003094 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10d      	bne.n	80030ba <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d003      	beq.n	80030ae <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b11      	cmp	r3, #17
 80030ac:	d105      	bne.n	80030ba <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	000f0001 	.word	0x000f0001
 80030d4:	40012300 	.word	0x40012300
 80030d8:	40012000 	.word	0x40012000

080030dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f8:	4013      	ands	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 0307 	and.w	r3, r3, #7
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <__NVIC_EnableIRQ+0x38>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000e100 	.word	0xe000e100

0800317c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	db0a      	blt.n	80031a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <__NVIC_SetPriority+0x4c>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a4:	e00a      	b.n	80031bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4908      	ldr	r1, [pc, #32]	; (80031cc <__NVIC_SetPriority+0x50>)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3b04      	subs	r3, #4
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	440b      	add	r3, r1
 80031ba:	761a      	strb	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf28      	it	cs
 80031ee:	2304      	movcs	r3, #4
 80031f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d902      	bls.n	8003200 <NVIC_EncodePriority+0x30>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b03      	subs	r3, #3
 80031fe:	e000      	b.n	8003202 <NVIC_EncodePriority+0x32>
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	401a      	ands	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43d9      	mvns	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	4313      	orrs	r3, r2
         );
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003248:	d301      	bcc.n	800324e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324a:	2301      	movs	r3, #1
 800324c:	e00f      	b.n	800326e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <SysTick_Config+0x40>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003256:	210f      	movs	r1, #15
 8003258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800325c:	f7ff ff8e 	bl	800317c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <SysTick_Config+0x40>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <SysTick_Config+0x40>)
 8003268:	2207      	movs	r2, #7
 800326a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000e010 	.word	0xe000e010

0800327c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ff29 	bl	80030dc <__NVIC_SetPriorityGrouping>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a4:	f7ff ff3e 	bl	8003124 <__NVIC_GetPriorityGrouping>
 80032a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f7ff ff8e 	bl	80031d0 <NVIC_EncodePriority>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff5d 	bl	800317c <__NVIC_SetPriority>
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff31 	bl	8003140 <__NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffa2 	bl	8003238 <SysTick_Config>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7fe fec2 	bl	8002094 <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d008      	beq.n	8003330 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e052      	b.n	80033d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0216 	bic.w	r2, r2, #22
 800333e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <HAL_DMA_Abort+0x62>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0208 	bic.w	r2, r2, #8
 800336e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003380:	e013      	b.n	80033aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003382:	f7fe fe87 	bl	8002094 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b05      	cmp	r3, #5
 800338e:	d90c      	bls.n	80033aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2203      	movs	r2, #3
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e015      	b.n	80033d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e4      	bne.n	8003382 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	223f      	movs	r2, #63	; 0x3f
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e00c      	b.n	8003416 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2205      	movs	r2, #5
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e16b      	b.n	8003718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	f040 815a 	bne.w	8003712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d005      	beq.n	8003476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003472:	2b02      	cmp	r3, #2
 8003474:	d130      	bne.n	80034d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 0201 	and.w	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d017      	beq.n	8003514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d123      	bne.n	8003568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	08da      	lsrs	r2, r3, #3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3208      	adds	r2, #8
 8003528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	220f      	movs	r2, #15
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	08da      	lsrs	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3208      	adds	r2, #8
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0203 	and.w	r2, r3, #3
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80b4 	beq.w	8003712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b60      	ldr	r3, [pc, #384]	; (8003730 <HAL_GPIO_Init+0x30c>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	4a5f      	ldr	r2, [pc, #380]	; (8003730 <HAL_GPIO_Init+0x30c>)
 80035b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_GPIO_Init+0x30c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c6:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <HAL_GPIO_Init+0x310>)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x314>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02b      	beq.n	800364a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x318>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d025      	beq.n	8003646 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x31c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x320>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x21a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_GPIO_Init+0x324>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x216>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4d      	ldr	r2, [pc, #308]	; (800374c <HAL_GPIO_Init+0x328>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x212>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_GPIO_Init+0x32c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_GPIO_Init+0x330>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x20a>
 800362a:	2307      	movs	r3, #7
 800362c:	e00e      	b.n	800364c <HAL_GPIO_Init+0x228>
 800362e:	2308      	movs	r3, #8
 8003630:	e00c      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003632:	2306      	movs	r3, #6
 8003634:	e00a      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003636:	2305      	movs	r3, #5
 8003638:	e008      	b.n	800364c <HAL_GPIO_Init+0x228>
 800363a:	2304      	movs	r3, #4
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x228>
 800363e:	2303      	movs	r3, #3
 8003640:	e004      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003642:	2302      	movs	r3, #2
 8003644:	e002      	b.n	800364c <HAL_GPIO_Init+0x228>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x228>
 800364a:	2300      	movs	r3, #0
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	f002 0203 	and.w	r2, r2, #3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4093      	lsls	r3, r2
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800365c:	4935      	ldr	r1, [pc, #212]	; (8003734 <HAL_GPIO_Init+0x310>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800366a:	4b3b      	ldr	r3, [pc, #236]	; (8003758 <HAL_GPIO_Init+0x334>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800368e:	4a32      	ldr	r2, [pc, #200]	; (8003758 <HAL_GPIO_Init+0x334>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003694:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_GPIO_Init+0x334>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b8:	4a27      	ldr	r2, [pc, #156]	; (8003758 <HAL_GPIO_Init+0x334>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_GPIO_Init+0x334>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_GPIO_Init+0x334>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_GPIO_Init+0x334>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800370c:	4a12      	ldr	r2, [pc, #72]	; (8003758 <HAL_GPIO_Init+0x334>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	f67f ae90 	bls.w	8003440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40013800 	.word	0x40013800
 8003738:	40020000 	.word	0x40020000
 800373c:	40020400 	.word	0x40020400
 8003740:	40020800 	.word	0x40020800
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40021000 	.word	0x40021000
 800374c:	40021400 	.word	0x40021400
 8003750:	40021800 	.word	0x40021800
 8003754:	40021c00 	.word	0x40021c00
 8003758:	40013c00 	.word	0x40013c00

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003778:	e003      	b.n	8003782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fa10 	bl	8001bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013c00 	.word	0x40013c00

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e264      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d075      	beq.n	80038ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	4ba3      	ldr	r3, [pc, #652]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d00c      	beq.n	8003804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ea:	4ba0      	ldr	r3, [pc, #640]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d112      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4b9d      	ldr	r3, [pc, #628]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d10b      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	4b99      	ldr	r3, [pc, #612]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x108>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d157      	bne.n	80038c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e23f      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x74>
 8003826:	4b91      	ldr	r3, [pc, #580]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a90      	ldr	r2, [pc, #576]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x98>
 800383e:	4b8b      	ldr	r3, [pc, #556]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a8a      	ldr	r2, [pc, #552]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a87      	ldr	r2, [pc, #540]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003858:	4b84      	ldr	r3, [pc, #528]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a83      	ldr	r2, [pc, #524]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b81      	ldr	r3, [pc, #516]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a80      	ldr	r2, [pc, #512]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe fc0c 	bl	8002094 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003880:	f7fe fc08 	bl	8002094 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e204      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b76      	ldr	r3, [pc, #472]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xc0>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe fbf8 	bl	8002094 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fe fbf4 	bl	8002094 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1f0      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	4b6c      	ldr	r3, [pc, #432]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0xe8>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e2:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11c      	bne.n	8003928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	4b5c      	ldr	r3, [pc, #368]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x152>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1c4      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4952      	ldr	r1, [pc, #328]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	e03a      	b.n	800399e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_RCC_OscConfig+0x2b0>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe fbad 	bl	8002094 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe fba9 	bl	8002094 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1a5      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	4b46      	ldr	r3, [pc, #280]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4940      	ldr	r1, [pc, #256]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e015      	b.n	800399e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <HAL_RCC_OscConfig+0x2b0>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fb8c 	bl	8002094 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003980:	f7fe fb88 	bl	8002094 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e184      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d030      	beq.n	8003a0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_RCC_OscConfig+0x2b4>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe fb6c 	bl	8002094 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fe fb68 	bl	8002094 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e164      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x200>
 80039de:	e015      	b.n	8003a0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x2b4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fb55 	bl	8002094 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ee:	f7fe fb51 	bl	8002094 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e14d      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a0 	beq.w	8003b5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_OscConfig+0x2b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d121      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_RCC_OscConfig+0x2b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_RCC_OscConfig+0x2b8>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a62:	f7fe fb17 	bl	8002094 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	e011      	b.n	8003a8e <HAL_RCC_OscConfig+0x2ce>
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	42470000 	.word	0x42470000
 8003a74:	42470e80 	.word	0x42470e80
 8003a78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fe fb0a 	bl	8002094 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e106      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	4b85      	ldr	r3, [pc, #532]	; (8003ca4 <HAL_RCC_OscConfig+0x4e4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x2f0>
 8003aa2:	4b81      	ldr	r3, [pc, #516]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6713      	str	r3, [r2, #112]	; 0x70
 8003aae:	e01c      	b.n	8003aea <HAL_RCC_OscConfig+0x32a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x312>
 8003ab8:	4b7b      	ldr	r3, [pc, #492]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a7a      	ldr	r2, [pc, #488]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	4b78      	ldr	r3, [pc, #480]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a77      	ldr	r2, [pc, #476]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	e00b      	b.n	8003aea <HAL_RCC_OscConfig+0x32a>
 8003ad2:	4b75      	ldr	r3, [pc, #468]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a74      	ldr	r2, [pc, #464]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	4b72      	ldr	r3, [pc, #456]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a71      	ldr	r2, [pc, #452]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d015      	beq.n	8003b1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe facf 	bl	8002094 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe facb 	bl	8002094 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0c5      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ee      	beq.n	8003afa <HAL_RCC_OscConfig+0x33a>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fab9 	bl	8002094 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fab5 	bl	8002094 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0af      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4e:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a55      	ldr	r2, [pc, #340]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 809b 	beq.w	8003c9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b64:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d05c      	beq.n	8003c2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d141      	bne.n	8003bfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b78:	4b4c      	ldr	r3, [pc, #304]	; (8003cac <HAL_RCC_OscConfig+0x4ec>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fa89 	bl	8002094 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe fa85 	bl	8002094 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e081      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b98:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	019b      	lsls	r3, r3, #6
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_OscConfig+0x4ec>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fa5e 	bl	8002094 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fa5a 	bl	8002094 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e056      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x41c>
 8003bfa:	e04e      	b.n	8003c9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_RCC_OscConfig+0x4ec>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fe fa47 	bl	8002094 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0a:	f7fe fa43 	bl	8002094 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e03f      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1c:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x44a>
 8003c28:	e037      	b.n	8003c9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e032      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_RCC_OscConfig+0x4e8>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d028      	beq.n	8003c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d121      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d11a      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d111      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	42470060 	.word	0x42470060

08003cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0cc      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b68      	ldr	r3, [pc, #416]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d90c      	bls.n	8003cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d044      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d119      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e067      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4934      	ldr	r1, [pc, #208]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da0:	f7fe f978 	bl	8002094 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fe f974 	bl	8002094 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e04f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d20c      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe f8d8 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08005970 	.word	0x08005970
 8003e74:	2000000c 	.word	0x2000000c
 8003e78:	20000010 	.word	0x20000010

08003e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b5b0      	push	{r4, r5, r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e82:	2100      	movs	r1, #0
 8003e84:	6079      	str	r1, [r7, #4]
 8003e86:	2100      	movs	r1, #0
 8003e88:	60f9      	str	r1, [r7, #12]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e8e:	2100      	movs	r1, #0
 8003e90:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e92:	4952      	ldr	r1, [pc, #328]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003e94:	6889      	ldr	r1, [r1, #8]
 8003e96:	f001 010c 	and.w	r1, r1, #12
 8003e9a:	2908      	cmp	r1, #8
 8003e9c:	d00d      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x3e>
 8003e9e:	2908      	cmp	r1, #8
 8003ea0:	f200 8094 	bhi.w	8003fcc <HAL_RCC_GetSysClockFreq+0x150>
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x32>
 8003ea8:	2904      	cmp	r1, #4
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003eac:	e08e      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eae:	4b4c      	ldr	r3, [pc, #304]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003eb0:	60bb      	str	r3, [r7, #8]
       break;
 8003eb2:	e08e      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eb6:	60bb      	str	r3, [r7, #8]
      break;
 8003eb8:	e08b      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eba:	4948      	ldr	r1, [pc, #288]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ebc:	6849      	ldr	r1, [r1, #4]
 8003ebe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003ec2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec4:	4945      	ldr	r1, [pc, #276]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ec6:	6849      	ldr	r1, [r1, #4]
 8003ec8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d024      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed0:	4942      	ldr	r1, [pc, #264]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003ed2:	6849      	ldr	r1, [r1, #4]
 8003ed4:	0989      	lsrs	r1, r1, #6
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ee0:	f04f 0500 	mov.w	r5, #0
 8003ee4:	ea00 0204 	and.w	r2, r0, r4
 8003ee8:	ea01 0305 	and.w	r3, r1, r5
 8003eec:	493d      	ldr	r1, [pc, #244]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eee:	fb01 f003 	mul.w	r0, r1, r3
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	fb01 f102 	mul.w	r1, r1, r2
 8003ef8:	1844      	adds	r4, r0, r1
 8003efa:	493a      	ldr	r1, [pc, #232]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003efc:	fba2 0101 	umull	r0, r1, r2, r1
 8003f00:	1863      	adds	r3, r4, r1
 8003f02:	4619      	mov	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f7fc fdd6 	bl	8000abc <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e04a      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1a:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	ea02 0400 	and.w	r4, r2, r0
 8003f32:	ea03 0501 	and.w	r5, r3, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	014b      	lsls	r3, r1, #5
 8003f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f48:	0142      	lsls	r2, r0, #5
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	1b00      	subs	r0, r0, r4
 8003f50:	eb61 0105 	sbc.w	r1, r1, r5
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	018b      	lsls	r3, r1, #6
 8003f5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f62:	0182      	lsls	r2, r0, #6
 8003f64:	1a12      	subs	r2, r2, r0
 8003f66:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6a:	f04f 0000 	mov.w	r0, #0
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	00d9      	lsls	r1, r3, #3
 8003f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f78:	00d0      	lsls	r0, r2, #3
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	1912      	adds	r2, r2, r4
 8003f80:	eb45 0303 	adc.w	r3, r5, r3
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0299      	lsls	r1, r3, #10
 8003f8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f92:	0290      	lsls	r0, r2, #10
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	f7fc fd8a 	bl	8000abc <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4613      	mov	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
      break;
 8003fca:	e002      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003fce:	60bb      	str	r3, [r7, #8]
      break;
 8003fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bdb0      	pop	{r4, r5, r7, pc}
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	017d7840 	.word	0x017d7840

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4903      	ldr	r1, [pc, #12]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	08005980 	.word	0x08005980

08004028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800402c:	f7ff ffdc 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0b5b      	lsrs	r3, r3, #13
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4903      	ldr	r1, [pc, #12]	; (800404c <HAL_RCC_GetPCLK2Freq+0x24>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	08005980 	.word	0x08005980

08004050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e03f      	b.n	80040e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd fe8e 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fe1d 	bl	8004cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b08a      	sub	sp, #40	; 0x28
 80040ee:	af02      	add	r7, sp, #8
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b20      	cmp	r3, #32
 8004108:	d17c      	bne.n	8004204 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_UART_Transmit+0x2c>
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e075      	b.n	8004206 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_UART_Transmit+0x3e>
 8004124:	2302      	movs	r3, #2
 8004126:	e06e      	b.n	8004206 <HAL_UART_Transmit+0x11c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	; 0x21
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413e:	f7fd ffa9 	bl	8002094 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x82>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800417c:	e02a      	b.n	80041d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fb9b 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e036      	b.n	8004206 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	3302      	adds	r3, #2
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	e007      	b.n	80041c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1cf      	bne.n	800417e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	; 0x40
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb6b 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08a      	sub	sp, #40	; 0x28
 8004212:	af02      	add	r7, sp, #8
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	f040 808c 	bne.w	8004348 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Receive+0x2e>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e084      	b.n	800434a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_UART_Receive+0x40>
 800424a:	2302      	movs	r3, #2
 800424c:	e07d      	b.n	800434a <HAL_UART_Receive+0x13c>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2222      	movs	r2, #34	; 0x22
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800426a:	f7fd ff13 	bl	8002094 <HAL_GetTick>
 800426e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004284:	d108      	bne.n	8004298 <HAL_UART_Receive+0x8a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e003      	b.n	80042a0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042a8:	e043      	b.n	8004332 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2120      	movs	r1, #32
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fb05 	bl	80048c4 <UART_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e042      	b.n	800434a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	3302      	adds	r3, #2
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	e01f      	b.n	8004324 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d007      	beq.n	80042fe <HAL_UART_Receive+0xf0>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <HAL_UART_Receive+0xfe>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e008      	b.n	800431e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004318:	b2da      	uxtb	r2, r3
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3301      	adds	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1b6      	bne.n	80042aa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0ba      	sub	sp, #232	; 0xe8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_UART_IRQHandler+0x66>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fbd3 	bl	8004b5e <UART_Receive_IT>
      return;
 80043b8:	e256      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80de 	beq.w	8004580 <HAL_UART_IRQHandler+0x22c>
 80043c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80d1 	beq.w	8004580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_UART_IRQHandler+0xae>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0xd2>
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xf6>
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_UART_IRQHandler+0x126>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 81ed 	beq.w	800485e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x14e>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb5e 	bl	8004b5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <HAL_UART_IRQHandler+0x17a>
 80044c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04f      	beq.n	800456e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa66 	bl	80049a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d141      	bne.n	8004566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800450e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800451a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d013      	beq.n	800455e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <HAL_UART_IRQHandler+0x3dc>)
 800453c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe ff4b 	bl	80033de <HAL_DMA_Abort_IT>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004558:	4610      	mov	r0, r2
 800455a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00e      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f99a 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e00a      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f996 	bl	8004898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	e006      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f992 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800457a:	e170      	b.n	800485e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	bf00      	nop
    return;
 800457e:	e16e      	b.n	800485e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 814a 	bne.w	800481e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8143 	beq.w	800481e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 813c 	beq.w	800481e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	f040 80b4 	bne.w	8004734 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8140 	beq.w	8004862 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ea:	429a      	cmp	r2, r3
 80045ec:	f080 8139 	bcs.w	8004862 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	f000 8088 	beq.w	8004716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800461c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800463e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1d9      	bne.n	8004606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3314      	adds	r3, #20
 8004658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800467a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800467e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e1      	bne.n	8004652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800469e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e3      	bne.n	800468e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80046fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e3      	bne.n	80046d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fdf4 	bl	80032fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800471e:	b29b      	uxth	r3, r3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8c0 	bl	80048ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800472c:	e099      	b.n	8004862 <HAL_UART_IRQHandler+0x50e>
 800472e:	bf00      	nop
 8004730:	08004a67 	.word	0x08004a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 808b 	beq.w	8004866 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8086 	beq.w	8004866 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800477e:	647a      	str	r2, [r7, #68]	; 0x44
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e3      	bne.n	800475a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	623b      	str	r3, [r7, #32]
   return(result);
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047b6:	633a      	str	r2, [r7, #48]	; 0x30
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e3      	bne.n	8004792 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047fc:	61fa      	str	r2, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	617b      	str	r3, [r7, #20]
   return(result);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e3      	bne.n	80047d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f848 	bl	80048ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800481c:	e023      	b.n	8004866 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_UART_IRQHandler+0x4ea>
 800482a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f929 	bl	8004a8e <UART_Transmit_IT>
    return;
 800483c:	e014      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00e      	beq.n	8004868 <HAL_UART_IRQHandler+0x514>
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f969 	bl	8004b2e <UART_EndTransmit_IT>
    return;
 800485c:	e004      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
    return;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
      return;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
      return;
 8004866:	bf00      	nop
  }
}
 8004868:	37e8      	adds	r7, #232	; 0xe8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop

08004870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b090      	sub	sp, #64	; 0x40
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d4:	e050      	b.n	8004978 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048dc:	d04c      	beq.n	8004978 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e4:	f7fd fbd6 	bl	8002094 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d241      	bcs.n	8004978 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004914:	637a      	str	r2, [r7, #52]	; 0x34
 8004916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800491a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	613b      	str	r3, [r7, #16]
   return(result);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004948:	623a      	str	r2, [r7, #32]
 800494a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	6a3a      	ldr	r2, [r7, #32]
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	61bb      	str	r3, [r7, #24]
   return(result);
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e5      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e00f      	b.n	8004998 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	429a      	cmp	r2, r3
 8004994:	d09f      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3740      	adds	r7, #64	; 0x40
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b095      	sub	sp, #84	; 0x54
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c8:	643a      	str	r2, [r7, #64]	; 0x40
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d119      	bne.n	8004a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f023 0310 	bic.w	r3, r3, #16
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a38:	61ba      	str	r2, [r7, #24]
 8004a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6979      	ldr	r1, [r7, #20]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	613b      	str	r3, [r7, #16]
   return(result);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e5      	bne.n	8004a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a5a:	bf00      	nop
 8004a5c:	3754      	adds	r7, #84	; 0x54
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff ff09 	bl	8004898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b21      	cmp	r3, #33	; 0x21
 8004aa0:	d13e      	bne.n	8004b20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	d114      	bne.n	8004ad6 <UART_Transmit_IT+0x48>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	621a      	str	r2, [r3, #32]
 8004ad4:	e008      	b.n	8004ae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6211      	str	r1, [r2, #32]
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4619      	mov	r1, r3
 8004af6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10f      	bne.n	8004b1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff fe8e 	bl	8004870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b08c      	sub	sp, #48	; 0x30
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b22      	cmp	r3, #34	; 0x22
 8004b70:	f040 80ab 	bne.w	8004cca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d117      	bne.n	8004bae <UART_Receive_IT+0x50>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d113      	bne.n	8004bae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
 8004bac:	e026      	b.n	8004bfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d007      	beq.n	8004bd2 <UART_Receive_IT+0x74>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <UART_Receive_IT+0x82>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e008      	b.n	8004bf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d15a      	bne.n	8004cc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0220 	bic.w	r2, r2, #32
 8004c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d135      	bne.n	8004cbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	613b      	str	r3, [r7, #16]
   return(result);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f023 0310 	bic.w	r3, r3, #16
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c76:	623a      	str	r2, [r7, #32]
 8004c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	69f9      	ldr	r1, [r7, #28]
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d10a      	bne.n	8004cae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fdf9 	bl	80048ac <HAL_UARTEx_RxEventCallback>
 8004cba:	e002      	b.n	8004cc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fde1 	bl	8004884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e002      	b.n	8004ccc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3730      	adds	r7, #48	; 0x30
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	b09f      	sub	sp, #124	; 0x7c
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	68d9      	ldr	r1, [r3, #12]
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d18:	f021 010c 	bic.w	r1, r1, #12
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d22:	430b      	orrs	r3, r1
 8004d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	6999      	ldr	r1, [r3, #24]
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	ea40 0301 	orr.w	r3, r0, r1
 8004d3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4bc5      	ldr	r3, [pc, #788]	; (8005058 <UART_SetConfig+0x384>)
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d004      	beq.n	8004d52 <UART_SetConfig+0x7e>
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4bc3      	ldr	r3, [pc, #780]	; (800505c <UART_SetConfig+0x388>)
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d103      	bne.n	8004d5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d52:	f7ff f969 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8004d56:	6778      	str	r0, [r7, #116]	; 0x74
 8004d58:	e002      	b.n	8004d60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7ff f951 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d68:	f040 80b6 	bne.w	8004ed8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6e:	461c      	mov	r4, r3
 8004d70:	f04f 0500 	mov.w	r5, #0
 8004d74:	4622      	mov	r2, r4
 8004d76:	462b      	mov	r3, r5
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d84:	1912      	adds	r2, r2, r4
 8004d86:	eb45 0303 	adc.w	r3, r5, r3
 8004d8a:	f04f 0000 	mov.w	r0, #0
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	00d9      	lsls	r1, r3, #3
 8004d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d98:	00d0      	lsls	r0, r2, #3
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	1911      	adds	r1, r2, r4
 8004da0:	6639      	str	r1, [r7, #96]	; 0x60
 8004da2:	416b      	adcs	r3, r5
 8004da4:	667b      	str	r3, [r7, #100]	; 0x64
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db4:	415b      	adcs	r3, r3
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004dc0:	f7fb fe7c 	bl	8000abc <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4ba5      	ldr	r3, [pc, #660]	; (8005060 <UART_SetConfig+0x38c>)
 8004dca:	fba3 2302 	umull	r2, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	011e      	lsls	r6, r3, #4
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd4:	461c      	mov	r4, r3
 8004dd6:	f04f 0500 	mov.w	r5, #0
 8004dda:	4622      	mov	r2, r4
 8004ddc:	462b      	mov	r3, r5
 8004dde:	1891      	adds	r1, r2, r2
 8004de0:	6339      	str	r1, [r7, #48]	; 0x30
 8004de2:	415b      	adcs	r3, r3
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dea:	1912      	adds	r2, r2, r4
 8004dec:	eb45 0303 	adc.w	r3, r5, r3
 8004df0:	f04f 0000 	mov.w	r0, #0
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	00d9      	lsls	r1, r3, #3
 8004dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dfe:	00d0      	lsls	r0, r2, #3
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	1911      	adds	r1, r2, r4
 8004e06:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e08:	416b      	adcs	r3, r5
 8004e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	461a      	mov	r2, r3
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	1891      	adds	r1, r2, r2
 8004e18:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e26:	f7fb fe49 	bl	8000abc <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4b8c      	ldr	r3, [pc, #560]	; (8005060 <UART_SetConfig+0x38c>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	; 0x32
 8004e42:	4a87      	ldr	r2, [pc, #540]	; (8005060 <UART_SetConfig+0x38c>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e50:	441e      	add	r6, r3
 8004e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e54:	4618      	mov	r0, r3
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	1894      	adds	r4, r2, r2
 8004e60:	623c      	str	r4, [r7, #32]
 8004e62:	415b      	adcs	r3, r3
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6a:	1812      	adds	r2, r2, r0
 8004e6c:	eb41 0303 	adc.w	r3, r1, r3
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	f04f 0500 	mov.w	r5, #0
 8004e78:	00dd      	lsls	r5, r3, #3
 8004e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e7e:	00d4      	lsls	r4, r2, #3
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	1814      	adds	r4, r2, r0
 8004e86:	653c      	str	r4, [r7, #80]	; 0x50
 8004e88:	414b      	adcs	r3, r1
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	61b9      	str	r1, [r7, #24]
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ea6:	f7fb fe09 	bl	8000abc <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <UART_SetConfig+0x38c>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a67      	ldr	r2, [pc, #412]	; (8005060 <UART_SetConfig+0x38c>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4432      	add	r2, r6
 8004ed4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed6:	e0b9      	b.n	800504c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eda:	461c      	mov	r4, r3
 8004edc:	f04f 0500 	mov.w	r5, #0
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	6139      	str	r1, [r7, #16]
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ef0:	1912      	adds	r2, r2, r4
 8004ef2:	eb45 0303 	adc.w	r3, r5, r3
 8004ef6:	f04f 0000 	mov.w	r0, #0
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	00d9      	lsls	r1, r3, #3
 8004f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f04:	00d0      	lsls	r0, r2, #3
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	eb12 0804 	adds.w	r8, r2, r4
 8004f0e:	eb43 0905 	adc.w	r9, r3, r5
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f2a:	0082      	lsls	r2, r0, #2
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb fdc4 	bl	8000abc <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4b49      	ldr	r3, [pc, #292]	; (8005060 <UART_SetConfig+0x38c>)
 8004f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	011e      	lsls	r6, r3, #4
 8004f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f44:	4618      	mov	r0, r3
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	1894      	adds	r4, r2, r2
 8004f50:	60bc      	str	r4, [r7, #8]
 8004f52:	415b      	adcs	r3, r3
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5a:	1812      	adds	r2, r2, r0
 8004f5c:	eb41 0303 	adc.w	r3, r1, r3
 8004f60:	f04f 0400 	mov.w	r4, #0
 8004f64:	f04f 0500 	mov.w	r5, #0
 8004f68:	00dd      	lsls	r5, r3, #3
 8004f6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f6e:	00d4      	lsls	r4, r2, #3
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	1814      	adds	r4, r2, r0
 8004f76:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f78:	414b      	adcs	r3, r1
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	008b      	lsls	r3, r1, #2
 8004f90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f94:	0082      	lsls	r2, r0, #2
 8004f96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f9a:	f7fb fd8f 	bl	8000abc <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <UART_SetConfig+0x38c>)
 8004fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2164      	movs	r1, #100	; 0x64
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	3332      	adds	r3, #50	; 0x32
 8004fb6:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <UART_SetConfig+0x38c>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc2:	441e      	add	r6, r3
 8004fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	1894      	adds	r4, r2, r2
 8004fd2:	603c      	str	r4, [r7, #0]
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fdc:	1812      	adds	r2, r2, r0
 8004fde:	eb41 0303 	adc.w	r3, r1, r3
 8004fe2:	f04f 0400 	mov.w	r4, #0
 8004fe6:	f04f 0500 	mov.w	r5, #0
 8004fea:	00dd      	lsls	r5, r3, #3
 8004fec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ff0:	00d4      	lsls	r4, r2, #3
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	eb12 0a00 	adds.w	sl, r2, r0
 8004ffa:	eb43 0b01 	adc.w	fp, r3, r1
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	008b      	lsls	r3, r1, #2
 8005012:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005016:	0082      	lsls	r2, r0, #2
 8005018:	4650      	mov	r0, sl
 800501a:	4659      	mov	r1, fp
 800501c:	f7fb fd4e 	bl	8000abc <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <UART_SetConfig+0x38c>)
 8005026:	fba3 1302 	umull	r1, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2164      	movs	r1, #100	; 0x64
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	; 0x32
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <UART_SetConfig+0x38c>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4432      	add	r2, r6
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	377c      	adds	r7, #124	; 0x7c
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40011000 	.word	0x40011000
 800505c:	40011400 	.word	0x40011400
 8005060:	51eb851f 	.word	0x51eb851f

08005064 <__errno>:
 8005064:	4b01      	ldr	r3, [pc, #4]	; (800506c <__errno+0x8>)
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000018 	.word	0x20000018

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	; (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	; (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	; (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	; (80050b4 <__libc_init_array+0x44>)
 8005084:	f000 fc4e 	bl	8005924 <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	080059c4 	.word	0x080059c4
 80050ac:	080059c4 	.word	0x080059c4
 80050b0:	080059c4 	.word	0x080059c4
 80050b4:	080059c8 	.word	0x080059c8

080050b8 <memset>:
 80050b8:	4402      	add	r2, r0
 80050ba:	4603      	mov	r3, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d100      	bne.n	80050c2 <memset+0xa>
 80050c0:	4770      	bx	lr
 80050c2:	f803 1b01 	strb.w	r1, [r3], #1
 80050c6:	e7f9      	b.n	80050bc <memset+0x4>

080050c8 <siprintf>:
 80050c8:	b40e      	push	{r1, r2, r3}
 80050ca:	b500      	push	{lr}
 80050cc:	b09c      	sub	sp, #112	; 0x70
 80050ce:	ab1d      	add	r3, sp, #116	; 0x74
 80050d0:	9002      	str	r0, [sp, #8]
 80050d2:	9006      	str	r0, [sp, #24]
 80050d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050d8:	4809      	ldr	r0, [pc, #36]	; (8005100 <siprintf+0x38>)
 80050da:	9107      	str	r1, [sp, #28]
 80050dc:	9104      	str	r1, [sp, #16]
 80050de:	4909      	ldr	r1, [pc, #36]	; (8005104 <siprintf+0x3c>)
 80050e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e4:	9105      	str	r1, [sp, #20]
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	a902      	add	r1, sp, #8
 80050ec:	f000 f868 	bl	80051c0 <_svfiprintf_r>
 80050f0:	9b02      	ldr	r3, [sp, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	b01c      	add	sp, #112	; 0x70
 80050f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050fc:	b003      	add	sp, #12
 80050fe:	4770      	bx	lr
 8005100:	20000018 	.word	0x20000018
 8005104:	ffff0208 	.word	0xffff0208

08005108 <__ssputs_r>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	688e      	ldr	r6, [r1, #8]
 800510e:	429e      	cmp	r6, r3
 8005110:	4682      	mov	sl, r0
 8005112:	460c      	mov	r4, r1
 8005114:	4690      	mov	r8, r2
 8005116:	461f      	mov	r7, r3
 8005118:	d838      	bhi.n	800518c <__ssputs_r+0x84>
 800511a:	898a      	ldrh	r2, [r1, #12]
 800511c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005120:	d032      	beq.n	8005188 <__ssputs_r+0x80>
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	6909      	ldr	r1, [r1, #16]
 8005126:	eba5 0901 	sub.w	r9, r5, r1
 800512a:	6965      	ldr	r5, [r4, #20]
 800512c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005134:	3301      	adds	r3, #1
 8005136:	444b      	add	r3, r9
 8005138:	106d      	asrs	r5, r5, #1
 800513a:	429d      	cmp	r5, r3
 800513c:	bf38      	it	cc
 800513e:	461d      	movcc	r5, r3
 8005140:	0553      	lsls	r3, r2, #21
 8005142:	d531      	bpl.n	80051a8 <__ssputs_r+0xa0>
 8005144:	4629      	mov	r1, r5
 8005146:	f000 fb47 	bl	80057d8 <_malloc_r>
 800514a:	4606      	mov	r6, r0
 800514c:	b950      	cbnz	r0, 8005164 <__ssputs_r+0x5c>
 800514e:	230c      	movs	r3, #12
 8005150:	f8ca 3000 	str.w	r3, [sl]
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005164:	6921      	ldr	r1, [r4, #16]
 8005166:	464a      	mov	r2, r9
 8005168:	f000 fabe 	bl	80056e8 <memcpy>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	6126      	str	r6, [r4, #16]
 800517a:	6165      	str	r5, [r4, #20]
 800517c:	444e      	add	r6, r9
 800517e:	eba5 0509 	sub.w	r5, r5, r9
 8005182:	6026      	str	r6, [r4, #0]
 8005184:	60a5      	str	r5, [r4, #8]
 8005186:	463e      	mov	r6, r7
 8005188:	42be      	cmp	r6, r7
 800518a:	d900      	bls.n	800518e <__ssputs_r+0x86>
 800518c:	463e      	mov	r6, r7
 800518e:	4632      	mov	r2, r6
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	4641      	mov	r1, r8
 8005194:	f000 fab6 	bl	8005704 <memmove>
 8005198:	68a3      	ldr	r3, [r4, #8]
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	4432      	add	r2, r6
 80051a0:	60a3      	str	r3, [r4, #8]
 80051a2:	6022      	str	r2, [r4, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e7db      	b.n	8005160 <__ssputs_r+0x58>
 80051a8:	462a      	mov	r2, r5
 80051aa:	f000 fb6f 	bl	800588c <_realloc_r>
 80051ae:	4606      	mov	r6, r0
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d1e1      	bne.n	8005178 <__ssputs_r+0x70>
 80051b4:	6921      	ldr	r1, [r4, #16]
 80051b6:	4650      	mov	r0, sl
 80051b8:	f000 fabe 	bl	8005738 <_free_r>
 80051bc:	e7c7      	b.n	800514e <__ssputs_r+0x46>
	...

080051c0 <_svfiprintf_r>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	4698      	mov	r8, r3
 80051c6:	898b      	ldrh	r3, [r1, #12]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	b09d      	sub	sp, #116	; 0x74
 80051cc:	4607      	mov	r7, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	4614      	mov	r4, r2
 80051d2:	d50e      	bpl.n	80051f2 <_svfiprintf_r+0x32>
 80051d4:	690b      	ldr	r3, [r1, #16]
 80051d6:	b963      	cbnz	r3, 80051f2 <_svfiprintf_r+0x32>
 80051d8:	2140      	movs	r1, #64	; 0x40
 80051da:	f000 fafd 	bl	80057d8 <_malloc_r>
 80051de:	6028      	str	r0, [r5, #0]
 80051e0:	6128      	str	r0, [r5, #16]
 80051e2:	b920      	cbnz	r0, 80051ee <_svfiprintf_r+0x2e>
 80051e4:	230c      	movs	r3, #12
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ec:	e0d1      	b.n	8005392 <_svfiprintf_r+0x1d2>
 80051ee:	2340      	movs	r3, #64	; 0x40
 80051f0:	616b      	str	r3, [r5, #20]
 80051f2:	2300      	movs	r3, #0
 80051f4:	9309      	str	r3, [sp, #36]	; 0x24
 80051f6:	2320      	movs	r3, #32
 80051f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005200:	2330      	movs	r3, #48	; 0x30
 8005202:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80053ac <_svfiprintf_r+0x1ec>
 8005206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800520a:	f04f 0901 	mov.w	r9, #1
 800520e:	4623      	mov	r3, r4
 8005210:	469a      	mov	sl, r3
 8005212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005216:	b10a      	cbz	r2, 800521c <_svfiprintf_r+0x5c>
 8005218:	2a25      	cmp	r2, #37	; 0x25
 800521a:	d1f9      	bne.n	8005210 <_svfiprintf_r+0x50>
 800521c:	ebba 0b04 	subs.w	fp, sl, r4
 8005220:	d00b      	beq.n	800523a <_svfiprintf_r+0x7a>
 8005222:	465b      	mov	r3, fp
 8005224:	4622      	mov	r2, r4
 8005226:	4629      	mov	r1, r5
 8005228:	4638      	mov	r0, r7
 800522a:	f7ff ff6d 	bl	8005108 <__ssputs_r>
 800522e:	3001      	adds	r0, #1
 8005230:	f000 80aa 	beq.w	8005388 <_svfiprintf_r+0x1c8>
 8005234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005236:	445a      	add	r2, fp
 8005238:	9209      	str	r2, [sp, #36]	; 0x24
 800523a:	f89a 3000 	ldrb.w	r3, [sl]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a2 	beq.w	8005388 <_svfiprintf_r+0x1c8>
 8005244:	2300      	movs	r3, #0
 8005246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800524a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800524e:	f10a 0a01 	add.w	sl, sl, #1
 8005252:	9304      	str	r3, [sp, #16]
 8005254:	9307      	str	r3, [sp, #28]
 8005256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800525a:	931a      	str	r3, [sp, #104]	; 0x68
 800525c:	4654      	mov	r4, sl
 800525e:	2205      	movs	r2, #5
 8005260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005264:	4851      	ldr	r0, [pc, #324]	; (80053ac <_svfiprintf_r+0x1ec>)
 8005266:	f7fa ffbb 	bl	80001e0 <memchr>
 800526a:	9a04      	ldr	r2, [sp, #16]
 800526c:	b9d8      	cbnz	r0, 80052a6 <_svfiprintf_r+0xe6>
 800526e:	06d0      	lsls	r0, r2, #27
 8005270:	bf44      	itt	mi
 8005272:	2320      	movmi	r3, #32
 8005274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005278:	0711      	lsls	r1, r2, #28
 800527a:	bf44      	itt	mi
 800527c:	232b      	movmi	r3, #43	; 0x2b
 800527e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005282:	f89a 3000 	ldrb.w	r3, [sl]
 8005286:	2b2a      	cmp	r3, #42	; 0x2a
 8005288:	d015      	beq.n	80052b6 <_svfiprintf_r+0xf6>
 800528a:	9a07      	ldr	r2, [sp, #28]
 800528c:	4654      	mov	r4, sl
 800528e:	2000      	movs	r0, #0
 8005290:	f04f 0c0a 	mov.w	ip, #10
 8005294:	4621      	mov	r1, r4
 8005296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800529a:	3b30      	subs	r3, #48	; 0x30
 800529c:	2b09      	cmp	r3, #9
 800529e:	d94e      	bls.n	800533e <_svfiprintf_r+0x17e>
 80052a0:	b1b0      	cbz	r0, 80052d0 <_svfiprintf_r+0x110>
 80052a2:	9207      	str	r2, [sp, #28]
 80052a4:	e014      	b.n	80052d0 <_svfiprintf_r+0x110>
 80052a6:	eba0 0308 	sub.w	r3, r0, r8
 80052aa:	fa09 f303 	lsl.w	r3, r9, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	46a2      	mov	sl, r4
 80052b4:	e7d2      	b.n	800525c <_svfiprintf_r+0x9c>
 80052b6:	9b03      	ldr	r3, [sp, #12]
 80052b8:	1d19      	adds	r1, r3, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	9103      	str	r1, [sp, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfbb      	ittet	lt
 80052c2:	425b      	neglt	r3, r3
 80052c4:	f042 0202 	orrlt.w	r2, r2, #2
 80052c8:	9307      	strge	r3, [sp, #28]
 80052ca:	9307      	strlt	r3, [sp, #28]
 80052cc:	bfb8      	it	lt
 80052ce:	9204      	strlt	r2, [sp, #16]
 80052d0:	7823      	ldrb	r3, [r4, #0]
 80052d2:	2b2e      	cmp	r3, #46	; 0x2e
 80052d4:	d10c      	bne.n	80052f0 <_svfiprintf_r+0x130>
 80052d6:	7863      	ldrb	r3, [r4, #1]
 80052d8:	2b2a      	cmp	r3, #42	; 0x2a
 80052da:	d135      	bne.n	8005348 <_svfiprintf_r+0x188>
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	1d1a      	adds	r2, r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	9203      	str	r2, [sp, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bfb8      	it	lt
 80052e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052ec:	3402      	adds	r4, #2
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053bc <_svfiprintf_r+0x1fc>
 80052f4:	7821      	ldrb	r1, [r4, #0]
 80052f6:	2203      	movs	r2, #3
 80052f8:	4650      	mov	r0, sl
 80052fa:	f7fa ff71 	bl	80001e0 <memchr>
 80052fe:	b140      	cbz	r0, 8005312 <_svfiprintf_r+0x152>
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	eba0 000a 	sub.w	r0, r0, sl
 8005306:	fa03 f000 	lsl.w	r0, r3, r0
 800530a:	9b04      	ldr	r3, [sp, #16]
 800530c:	4303      	orrs	r3, r0
 800530e:	3401      	adds	r4, #1
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005316:	4826      	ldr	r0, [pc, #152]	; (80053b0 <_svfiprintf_r+0x1f0>)
 8005318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800531c:	2206      	movs	r2, #6
 800531e:	f7fa ff5f 	bl	80001e0 <memchr>
 8005322:	2800      	cmp	r0, #0
 8005324:	d038      	beq.n	8005398 <_svfiprintf_r+0x1d8>
 8005326:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <_svfiprintf_r+0x1f4>)
 8005328:	bb1b      	cbnz	r3, 8005372 <_svfiprintf_r+0x1b2>
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	3307      	adds	r3, #7
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	3308      	adds	r3, #8
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005338:	4433      	add	r3, r6
 800533a:	9309      	str	r3, [sp, #36]	; 0x24
 800533c:	e767      	b.n	800520e <_svfiprintf_r+0x4e>
 800533e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005342:	460c      	mov	r4, r1
 8005344:	2001      	movs	r0, #1
 8005346:	e7a5      	b.n	8005294 <_svfiprintf_r+0xd4>
 8005348:	2300      	movs	r3, #0
 800534a:	3401      	adds	r4, #1
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	4619      	mov	r1, r3
 8005350:	f04f 0c0a 	mov.w	ip, #10
 8005354:	4620      	mov	r0, r4
 8005356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800535a:	3a30      	subs	r2, #48	; 0x30
 800535c:	2a09      	cmp	r2, #9
 800535e:	d903      	bls.n	8005368 <_svfiprintf_r+0x1a8>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0c5      	beq.n	80052f0 <_svfiprintf_r+0x130>
 8005364:	9105      	str	r1, [sp, #20]
 8005366:	e7c3      	b.n	80052f0 <_svfiprintf_r+0x130>
 8005368:	fb0c 2101 	mla	r1, ip, r1, r2
 800536c:	4604      	mov	r4, r0
 800536e:	2301      	movs	r3, #1
 8005370:	e7f0      	b.n	8005354 <_svfiprintf_r+0x194>
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <_svfiprintf_r+0x1f8>)
 800537a:	a904      	add	r1, sp, #16
 800537c:	4638      	mov	r0, r7
 800537e:	f3af 8000 	nop.w
 8005382:	1c42      	adds	r2, r0, #1
 8005384:	4606      	mov	r6, r0
 8005386:	d1d6      	bne.n	8005336 <_svfiprintf_r+0x176>
 8005388:	89ab      	ldrh	r3, [r5, #12]
 800538a:	065b      	lsls	r3, r3, #25
 800538c:	f53f af2c 	bmi.w	80051e8 <_svfiprintf_r+0x28>
 8005390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005392:	b01d      	add	sp, #116	; 0x74
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	ab03      	add	r3, sp, #12
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	462a      	mov	r2, r5
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <_svfiprintf_r+0x1f8>)
 80053a0:	a904      	add	r1, sp, #16
 80053a2:	4638      	mov	r0, r7
 80053a4:	f000 f87a 	bl	800549c <_printf_i>
 80053a8:	e7eb      	b.n	8005382 <_svfiprintf_r+0x1c2>
 80053aa:	bf00      	nop
 80053ac:	08005988 	.word	0x08005988
 80053b0:	08005992 	.word	0x08005992
 80053b4:	00000000 	.word	0x00000000
 80053b8:	08005109 	.word	0x08005109
 80053bc:	0800598e 	.word	0x0800598e

080053c0 <_printf_common>:
 80053c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	4616      	mov	r6, r2
 80053c6:	4699      	mov	r9, r3
 80053c8:	688a      	ldr	r2, [r1, #8]
 80053ca:	690b      	ldr	r3, [r1, #16]
 80053cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	bfb8      	it	lt
 80053d4:	4613      	movlt	r3, r2
 80053d6:	6033      	str	r3, [r6, #0]
 80053d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053dc:	4607      	mov	r7, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	b10a      	cbz	r2, 80053e6 <_printf_common+0x26>
 80053e2:	3301      	adds	r3, #1
 80053e4:	6033      	str	r3, [r6, #0]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	0699      	lsls	r1, r3, #26
 80053ea:	bf42      	ittt	mi
 80053ec:	6833      	ldrmi	r3, [r6, #0]
 80053ee:	3302      	addmi	r3, #2
 80053f0:	6033      	strmi	r3, [r6, #0]
 80053f2:	6825      	ldr	r5, [r4, #0]
 80053f4:	f015 0506 	ands.w	r5, r5, #6
 80053f8:	d106      	bne.n	8005408 <_printf_common+0x48>
 80053fa:	f104 0a19 	add.w	sl, r4, #25
 80053fe:	68e3      	ldr	r3, [r4, #12]
 8005400:	6832      	ldr	r2, [r6, #0]
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	42ab      	cmp	r3, r5
 8005406:	dc26      	bgt.n	8005456 <_printf_common+0x96>
 8005408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800540c:	1e13      	subs	r3, r2, #0
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	bf18      	it	ne
 8005412:	2301      	movne	r3, #1
 8005414:	0692      	lsls	r2, r2, #26
 8005416:	d42b      	bmi.n	8005470 <_printf_common+0xb0>
 8005418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800541c:	4649      	mov	r1, r9
 800541e:	4638      	mov	r0, r7
 8005420:	47c0      	blx	r8
 8005422:	3001      	adds	r0, #1
 8005424:	d01e      	beq.n	8005464 <_printf_common+0xa4>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	68e5      	ldr	r5, [r4, #12]
 800542a:	6832      	ldr	r2, [r6, #0]
 800542c:	f003 0306 	and.w	r3, r3, #6
 8005430:	2b04      	cmp	r3, #4
 8005432:	bf08      	it	eq
 8005434:	1aad      	subeq	r5, r5, r2
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	6922      	ldr	r2, [r4, #16]
 800543a:	bf0c      	ite	eq
 800543c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005440:	2500      	movne	r5, #0
 8005442:	4293      	cmp	r3, r2
 8005444:	bfc4      	itt	gt
 8005446:	1a9b      	subgt	r3, r3, r2
 8005448:	18ed      	addgt	r5, r5, r3
 800544a:	2600      	movs	r6, #0
 800544c:	341a      	adds	r4, #26
 800544e:	42b5      	cmp	r5, r6
 8005450:	d11a      	bne.n	8005488 <_printf_common+0xc8>
 8005452:	2000      	movs	r0, #0
 8005454:	e008      	b.n	8005468 <_printf_common+0xa8>
 8005456:	2301      	movs	r3, #1
 8005458:	4652      	mov	r2, sl
 800545a:	4649      	mov	r1, r9
 800545c:	4638      	mov	r0, r7
 800545e:	47c0      	blx	r8
 8005460:	3001      	adds	r0, #1
 8005462:	d103      	bne.n	800546c <_printf_common+0xac>
 8005464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546c:	3501      	adds	r5, #1
 800546e:	e7c6      	b.n	80053fe <_printf_common+0x3e>
 8005470:	18e1      	adds	r1, r4, r3
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	2030      	movs	r0, #48	; 0x30
 8005476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800547a:	4422      	add	r2, r4
 800547c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005484:	3302      	adds	r3, #2
 8005486:	e7c7      	b.n	8005418 <_printf_common+0x58>
 8005488:	2301      	movs	r3, #1
 800548a:	4622      	mov	r2, r4
 800548c:	4649      	mov	r1, r9
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	3001      	adds	r0, #1
 8005494:	d0e6      	beq.n	8005464 <_printf_common+0xa4>
 8005496:	3601      	adds	r6, #1
 8005498:	e7d9      	b.n	800544e <_printf_common+0x8e>
	...

0800549c <_printf_i>:
 800549c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	460c      	mov	r4, r1
 80054a2:	4691      	mov	r9, r2
 80054a4:	7e27      	ldrb	r7, [r4, #24]
 80054a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054a8:	2f78      	cmp	r7, #120	; 0x78
 80054aa:	4680      	mov	r8, r0
 80054ac:	469a      	mov	sl, r3
 80054ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b2:	d807      	bhi.n	80054c4 <_printf_i+0x28>
 80054b4:	2f62      	cmp	r7, #98	; 0x62
 80054b6:	d80a      	bhi.n	80054ce <_printf_i+0x32>
 80054b8:	2f00      	cmp	r7, #0
 80054ba:	f000 80d8 	beq.w	800566e <_printf_i+0x1d2>
 80054be:	2f58      	cmp	r7, #88	; 0x58
 80054c0:	f000 80a3 	beq.w	800560a <_printf_i+0x16e>
 80054c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054cc:	e03a      	b.n	8005544 <_printf_i+0xa8>
 80054ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054d2:	2b15      	cmp	r3, #21
 80054d4:	d8f6      	bhi.n	80054c4 <_printf_i+0x28>
 80054d6:	a001      	add	r0, pc, #4	; (adr r0, 80054dc <_printf_i+0x40>)
 80054d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054dc:	08005535 	.word	0x08005535
 80054e0:	08005549 	.word	0x08005549
 80054e4:	080054c5 	.word	0x080054c5
 80054e8:	080054c5 	.word	0x080054c5
 80054ec:	080054c5 	.word	0x080054c5
 80054f0:	080054c5 	.word	0x080054c5
 80054f4:	08005549 	.word	0x08005549
 80054f8:	080054c5 	.word	0x080054c5
 80054fc:	080054c5 	.word	0x080054c5
 8005500:	080054c5 	.word	0x080054c5
 8005504:	080054c5 	.word	0x080054c5
 8005508:	08005655 	.word	0x08005655
 800550c:	08005579 	.word	0x08005579
 8005510:	08005637 	.word	0x08005637
 8005514:	080054c5 	.word	0x080054c5
 8005518:	080054c5 	.word	0x080054c5
 800551c:	08005677 	.word	0x08005677
 8005520:	080054c5 	.word	0x080054c5
 8005524:	08005579 	.word	0x08005579
 8005528:	080054c5 	.word	0x080054c5
 800552c:	080054c5 	.word	0x080054c5
 8005530:	0800563f 	.word	0x0800563f
 8005534:	680b      	ldr	r3, [r1, #0]
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	600a      	str	r2, [r1, #0]
 800553c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005544:	2301      	movs	r3, #1
 8005546:	e0a3      	b.n	8005690 <_printf_i+0x1f4>
 8005548:	6825      	ldr	r5, [r4, #0]
 800554a:	6808      	ldr	r0, [r1, #0]
 800554c:	062e      	lsls	r6, r5, #24
 800554e:	f100 0304 	add.w	r3, r0, #4
 8005552:	d50a      	bpl.n	800556a <_printf_i+0xce>
 8005554:	6805      	ldr	r5, [r0, #0]
 8005556:	600b      	str	r3, [r1, #0]
 8005558:	2d00      	cmp	r5, #0
 800555a:	da03      	bge.n	8005564 <_printf_i+0xc8>
 800555c:	232d      	movs	r3, #45	; 0x2d
 800555e:	426d      	negs	r5, r5
 8005560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005564:	485e      	ldr	r0, [pc, #376]	; (80056e0 <_printf_i+0x244>)
 8005566:	230a      	movs	r3, #10
 8005568:	e019      	b.n	800559e <_printf_i+0x102>
 800556a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800556e:	6805      	ldr	r5, [r0, #0]
 8005570:	600b      	str	r3, [r1, #0]
 8005572:	bf18      	it	ne
 8005574:	b22d      	sxthne	r5, r5
 8005576:	e7ef      	b.n	8005558 <_printf_i+0xbc>
 8005578:	680b      	ldr	r3, [r1, #0]
 800557a:	6825      	ldr	r5, [r4, #0]
 800557c:	1d18      	adds	r0, r3, #4
 800557e:	6008      	str	r0, [r1, #0]
 8005580:	0628      	lsls	r0, r5, #24
 8005582:	d501      	bpl.n	8005588 <_printf_i+0xec>
 8005584:	681d      	ldr	r5, [r3, #0]
 8005586:	e002      	b.n	800558e <_printf_i+0xf2>
 8005588:	0669      	lsls	r1, r5, #25
 800558a:	d5fb      	bpl.n	8005584 <_printf_i+0xe8>
 800558c:	881d      	ldrh	r5, [r3, #0]
 800558e:	4854      	ldr	r0, [pc, #336]	; (80056e0 <_printf_i+0x244>)
 8005590:	2f6f      	cmp	r7, #111	; 0x6f
 8005592:	bf0c      	ite	eq
 8005594:	2308      	moveq	r3, #8
 8005596:	230a      	movne	r3, #10
 8005598:	2100      	movs	r1, #0
 800559a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800559e:	6866      	ldr	r6, [r4, #4]
 80055a0:	60a6      	str	r6, [r4, #8]
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	bfa2      	ittt	ge
 80055a6:	6821      	ldrge	r1, [r4, #0]
 80055a8:	f021 0104 	bicge.w	r1, r1, #4
 80055ac:	6021      	strge	r1, [r4, #0]
 80055ae:	b90d      	cbnz	r5, 80055b4 <_printf_i+0x118>
 80055b0:	2e00      	cmp	r6, #0
 80055b2:	d04d      	beq.n	8005650 <_printf_i+0x1b4>
 80055b4:	4616      	mov	r6, r2
 80055b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80055ba:	fb03 5711 	mls	r7, r3, r1, r5
 80055be:	5dc7      	ldrb	r7, [r0, r7]
 80055c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055c4:	462f      	mov	r7, r5
 80055c6:	42bb      	cmp	r3, r7
 80055c8:	460d      	mov	r5, r1
 80055ca:	d9f4      	bls.n	80055b6 <_printf_i+0x11a>
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d10b      	bne.n	80055e8 <_printf_i+0x14c>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	07df      	lsls	r7, r3, #31
 80055d4:	d508      	bpl.n	80055e8 <_printf_i+0x14c>
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	6861      	ldr	r1, [r4, #4]
 80055da:	4299      	cmp	r1, r3
 80055dc:	bfde      	ittt	le
 80055de:	2330      	movle	r3, #48	; 0x30
 80055e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055e4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80055e8:	1b92      	subs	r2, r2, r6
 80055ea:	6122      	str	r2, [r4, #16]
 80055ec:	f8cd a000 	str.w	sl, [sp]
 80055f0:	464b      	mov	r3, r9
 80055f2:	aa03      	add	r2, sp, #12
 80055f4:	4621      	mov	r1, r4
 80055f6:	4640      	mov	r0, r8
 80055f8:	f7ff fee2 	bl	80053c0 <_printf_common>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d14c      	bne.n	800569a <_printf_i+0x1fe>
 8005600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005604:	b004      	add	sp, #16
 8005606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560a:	4835      	ldr	r0, [pc, #212]	; (80056e0 <_printf_i+0x244>)
 800560c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	680e      	ldr	r6, [r1, #0]
 8005614:	061f      	lsls	r7, r3, #24
 8005616:	f856 5b04 	ldr.w	r5, [r6], #4
 800561a:	600e      	str	r6, [r1, #0]
 800561c:	d514      	bpl.n	8005648 <_printf_i+0x1ac>
 800561e:	07d9      	lsls	r1, r3, #31
 8005620:	bf44      	itt	mi
 8005622:	f043 0320 	orrmi.w	r3, r3, #32
 8005626:	6023      	strmi	r3, [r4, #0]
 8005628:	b91d      	cbnz	r5, 8005632 <_printf_i+0x196>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	f023 0320 	bic.w	r3, r3, #32
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	2310      	movs	r3, #16
 8005634:	e7b0      	b.n	8005598 <_printf_i+0xfc>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	f043 0320 	orr.w	r3, r3, #32
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	2378      	movs	r3, #120	; 0x78
 8005640:	4828      	ldr	r0, [pc, #160]	; (80056e4 <_printf_i+0x248>)
 8005642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005646:	e7e3      	b.n	8005610 <_printf_i+0x174>
 8005648:	065e      	lsls	r6, r3, #25
 800564a:	bf48      	it	mi
 800564c:	b2ad      	uxthmi	r5, r5
 800564e:	e7e6      	b.n	800561e <_printf_i+0x182>
 8005650:	4616      	mov	r6, r2
 8005652:	e7bb      	b.n	80055cc <_printf_i+0x130>
 8005654:	680b      	ldr	r3, [r1, #0]
 8005656:	6826      	ldr	r6, [r4, #0]
 8005658:	6960      	ldr	r0, [r4, #20]
 800565a:	1d1d      	adds	r5, r3, #4
 800565c:	600d      	str	r5, [r1, #0]
 800565e:	0635      	lsls	r5, r6, #24
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	d501      	bpl.n	8005668 <_printf_i+0x1cc>
 8005664:	6018      	str	r0, [r3, #0]
 8005666:	e002      	b.n	800566e <_printf_i+0x1d2>
 8005668:	0671      	lsls	r1, r6, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0x1c8>
 800566c:	8018      	strh	r0, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	4616      	mov	r6, r2
 8005674:	e7ba      	b.n	80055ec <_printf_i+0x150>
 8005676:	680b      	ldr	r3, [r1, #0]
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	600a      	str	r2, [r1, #0]
 800567c:	681e      	ldr	r6, [r3, #0]
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	2100      	movs	r1, #0
 8005682:	4630      	mov	r0, r6
 8005684:	f7fa fdac 	bl	80001e0 <memchr>
 8005688:	b108      	cbz	r0, 800568e <_printf_i+0x1f2>
 800568a:	1b80      	subs	r0, r0, r6
 800568c:	6060      	str	r0, [r4, #4]
 800568e:	6863      	ldr	r3, [r4, #4]
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	2300      	movs	r3, #0
 8005694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005698:	e7a8      	b.n	80055ec <_printf_i+0x150>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	4632      	mov	r2, r6
 800569e:	4649      	mov	r1, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	47d0      	blx	sl
 80056a4:	3001      	adds	r0, #1
 80056a6:	d0ab      	beq.n	8005600 <_printf_i+0x164>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	079b      	lsls	r3, r3, #30
 80056ac:	d413      	bmi.n	80056d6 <_printf_i+0x23a>
 80056ae:	68e0      	ldr	r0, [r4, #12]
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	4298      	cmp	r0, r3
 80056b4:	bfb8      	it	lt
 80056b6:	4618      	movlt	r0, r3
 80056b8:	e7a4      	b.n	8005604 <_printf_i+0x168>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4632      	mov	r2, r6
 80056be:	4649      	mov	r1, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	47d0      	blx	sl
 80056c4:	3001      	adds	r0, #1
 80056c6:	d09b      	beq.n	8005600 <_printf_i+0x164>
 80056c8:	3501      	adds	r5, #1
 80056ca:	68e3      	ldr	r3, [r4, #12]
 80056cc:	9903      	ldr	r1, [sp, #12]
 80056ce:	1a5b      	subs	r3, r3, r1
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dcf2      	bgt.n	80056ba <_printf_i+0x21e>
 80056d4:	e7eb      	b.n	80056ae <_printf_i+0x212>
 80056d6:	2500      	movs	r5, #0
 80056d8:	f104 0619 	add.w	r6, r4, #25
 80056dc:	e7f5      	b.n	80056ca <_printf_i+0x22e>
 80056de:	bf00      	nop
 80056e0:	08005999 	.word	0x08005999
 80056e4:	080059aa 	.word	0x080059aa

080056e8 <memcpy>:
 80056e8:	440a      	add	r2, r1
 80056ea:	4291      	cmp	r1, r2
 80056ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80056f0:	d100      	bne.n	80056f4 <memcpy+0xc>
 80056f2:	4770      	bx	lr
 80056f4:	b510      	push	{r4, lr}
 80056f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056fe:	4291      	cmp	r1, r2
 8005700:	d1f9      	bne.n	80056f6 <memcpy+0xe>
 8005702:	bd10      	pop	{r4, pc}

08005704 <memmove>:
 8005704:	4288      	cmp	r0, r1
 8005706:	b510      	push	{r4, lr}
 8005708:	eb01 0402 	add.w	r4, r1, r2
 800570c:	d902      	bls.n	8005714 <memmove+0x10>
 800570e:	4284      	cmp	r4, r0
 8005710:	4623      	mov	r3, r4
 8005712:	d807      	bhi.n	8005724 <memmove+0x20>
 8005714:	1e43      	subs	r3, r0, #1
 8005716:	42a1      	cmp	r1, r4
 8005718:	d008      	beq.n	800572c <memmove+0x28>
 800571a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800571e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005722:	e7f8      	b.n	8005716 <memmove+0x12>
 8005724:	4402      	add	r2, r0
 8005726:	4601      	mov	r1, r0
 8005728:	428a      	cmp	r2, r1
 800572a:	d100      	bne.n	800572e <memmove+0x2a>
 800572c:	bd10      	pop	{r4, pc}
 800572e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005736:	e7f7      	b.n	8005728 <memmove+0x24>

08005738 <_free_r>:
 8005738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800573a:	2900      	cmp	r1, #0
 800573c:	d048      	beq.n	80057d0 <_free_r+0x98>
 800573e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005742:	9001      	str	r0, [sp, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f1a1 0404 	sub.w	r4, r1, #4
 800574a:	bfb8      	it	lt
 800574c:	18e4      	addlt	r4, r4, r3
 800574e:	f000 f8d3 	bl	80058f8 <__malloc_lock>
 8005752:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <_free_r+0x9c>)
 8005754:	9801      	ldr	r0, [sp, #4]
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	4615      	mov	r5, r2
 800575a:	b933      	cbnz	r3, 800576a <_free_r+0x32>
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	6014      	str	r4, [r2, #0]
 8005760:	b003      	add	sp, #12
 8005762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005766:	f000 b8cd 	b.w	8005904 <__malloc_unlock>
 800576a:	42a3      	cmp	r3, r4
 800576c:	d90b      	bls.n	8005786 <_free_r+0x4e>
 800576e:	6821      	ldr	r1, [r4, #0]
 8005770:	1862      	adds	r2, r4, r1
 8005772:	4293      	cmp	r3, r2
 8005774:	bf04      	itt	eq
 8005776:	681a      	ldreq	r2, [r3, #0]
 8005778:	685b      	ldreq	r3, [r3, #4]
 800577a:	6063      	str	r3, [r4, #4]
 800577c:	bf04      	itt	eq
 800577e:	1852      	addeq	r2, r2, r1
 8005780:	6022      	streq	r2, [r4, #0]
 8005782:	602c      	str	r4, [r5, #0]
 8005784:	e7ec      	b.n	8005760 <_free_r+0x28>
 8005786:	461a      	mov	r2, r3
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b10b      	cbz	r3, 8005790 <_free_r+0x58>
 800578c:	42a3      	cmp	r3, r4
 800578e:	d9fa      	bls.n	8005786 <_free_r+0x4e>
 8005790:	6811      	ldr	r1, [r2, #0]
 8005792:	1855      	adds	r5, r2, r1
 8005794:	42a5      	cmp	r5, r4
 8005796:	d10b      	bne.n	80057b0 <_free_r+0x78>
 8005798:	6824      	ldr	r4, [r4, #0]
 800579a:	4421      	add	r1, r4
 800579c:	1854      	adds	r4, r2, r1
 800579e:	42a3      	cmp	r3, r4
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	d1dd      	bne.n	8005760 <_free_r+0x28>
 80057a4:	681c      	ldr	r4, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	6053      	str	r3, [r2, #4]
 80057aa:	4421      	add	r1, r4
 80057ac:	6011      	str	r1, [r2, #0]
 80057ae:	e7d7      	b.n	8005760 <_free_r+0x28>
 80057b0:	d902      	bls.n	80057b8 <_free_r+0x80>
 80057b2:	230c      	movs	r3, #12
 80057b4:	6003      	str	r3, [r0, #0]
 80057b6:	e7d3      	b.n	8005760 <_free_r+0x28>
 80057b8:	6825      	ldr	r5, [r4, #0]
 80057ba:	1961      	adds	r1, r4, r5
 80057bc:	428b      	cmp	r3, r1
 80057be:	bf04      	itt	eq
 80057c0:	6819      	ldreq	r1, [r3, #0]
 80057c2:	685b      	ldreq	r3, [r3, #4]
 80057c4:	6063      	str	r3, [r4, #4]
 80057c6:	bf04      	itt	eq
 80057c8:	1949      	addeq	r1, r1, r5
 80057ca:	6021      	streq	r1, [r4, #0]
 80057cc:	6054      	str	r4, [r2, #4]
 80057ce:	e7c7      	b.n	8005760 <_free_r+0x28>
 80057d0:	b003      	add	sp, #12
 80057d2:	bd30      	pop	{r4, r5, pc}
 80057d4:	200000ac 	.word	0x200000ac

080057d8 <_malloc_r>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	1ccd      	adds	r5, r1, #3
 80057dc:	f025 0503 	bic.w	r5, r5, #3
 80057e0:	3508      	adds	r5, #8
 80057e2:	2d0c      	cmp	r5, #12
 80057e4:	bf38      	it	cc
 80057e6:	250c      	movcc	r5, #12
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	4606      	mov	r6, r0
 80057ec:	db01      	blt.n	80057f2 <_malloc_r+0x1a>
 80057ee:	42a9      	cmp	r1, r5
 80057f0:	d903      	bls.n	80057fa <_malloc_r+0x22>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6033      	str	r3, [r6, #0]
 80057f6:	2000      	movs	r0, #0
 80057f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fa:	f000 f87d 	bl	80058f8 <__malloc_lock>
 80057fe:	4921      	ldr	r1, [pc, #132]	; (8005884 <_malloc_r+0xac>)
 8005800:	680a      	ldr	r2, [r1, #0]
 8005802:	4614      	mov	r4, r2
 8005804:	b99c      	cbnz	r4, 800582e <_malloc_r+0x56>
 8005806:	4f20      	ldr	r7, [pc, #128]	; (8005888 <_malloc_r+0xb0>)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	b923      	cbnz	r3, 8005816 <_malloc_r+0x3e>
 800580c:	4621      	mov	r1, r4
 800580e:	4630      	mov	r0, r6
 8005810:	f000 f862 	bl	80058d8 <_sbrk_r>
 8005814:	6038      	str	r0, [r7, #0]
 8005816:	4629      	mov	r1, r5
 8005818:	4630      	mov	r0, r6
 800581a:	f000 f85d 	bl	80058d8 <_sbrk_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d123      	bne.n	800586a <_malloc_r+0x92>
 8005822:	230c      	movs	r3, #12
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	4630      	mov	r0, r6
 8005828:	f000 f86c 	bl	8005904 <__malloc_unlock>
 800582c:	e7e3      	b.n	80057f6 <_malloc_r+0x1e>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	1b5b      	subs	r3, r3, r5
 8005832:	d417      	bmi.n	8005864 <_malloc_r+0x8c>
 8005834:	2b0b      	cmp	r3, #11
 8005836:	d903      	bls.n	8005840 <_malloc_r+0x68>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	441c      	add	r4, r3
 800583c:	6025      	str	r5, [r4, #0]
 800583e:	e004      	b.n	800584a <_malloc_r+0x72>
 8005840:	6863      	ldr	r3, [r4, #4]
 8005842:	42a2      	cmp	r2, r4
 8005844:	bf0c      	ite	eq
 8005846:	600b      	streq	r3, [r1, #0]
 8005848:	6053      	strne	r3, [r2, #4]
 800584a:	4630      	mov	r0, r6
 800584c:	f000 f85a 	bl	8005904 <__malloc_unlock>
 8005850:	f104 000b 	add.w	r0, r4, #11
 8005854:	1d23      	adds	r3, r4, #4
 8005856:	f020 0007 	bic.w	r0, r0, #7
 800585a:	1ac2      	subs	r2, r0, r3
 800585c:	d0cc      	beq.n	80057f8 <_malloc_r+0x20>
 800585e:	1a1b      	subs	r3, r3, r0
 8005860:	50a3      	str	r3, [r4, r2]
 8005862:	e7c9      	b.n	80057f8 <_malloc_r+0x20>
 8005864:	4622      	mov	r2, r4
 8005866:	6864      	ldr	r4, [r4, #4]
 8005868:	e7cc      	b.n	8005804 <_malloc_r+0x2c>
 800586a:	1cc4      	adds	r4, r0, #3
 800586c:	f024 0403 	bic.w	r4, r4, #3
 8005870:	42a0      	cmp	r0, r4
 8005872:	d0e3      	beq.n	800583c <_malloc_r+0x64>
 8005874:	1a21      	subs	r1, r4, r0
 8005876:	4630      	mov	r0, r6
 8005878:	f000 f82e 	bl	80058d8 <_sbrk_r>
 800587c:	3001      	adds	r0, #1
 800587e:	d1dd      	bne.n	800583c <_malloc_r+0x64>
 8005880:	e7cf      	b.n	8005822 <_malloc_r+0x4a>
 8005882:	bf00      	nop
 8005884:	200000ac 	.word	0x200000ac
 8005888:	200000b0 	.word	0x200000b0

0800588c <_realloc_r>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	4607      	mov	r7, r0
 8005890:	4614      	mov	r4, r2
 8005892:	460e      	mov	r6, r1
 8005894:	b921      	cbnz	r1, 80058a0 <_realloc_r+0x14>
 8005896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800589a:	4611      	mov	r1, r2
 800589c:	f7ff bf9c 	b.w	80057d8 <_malloc_r>
 80058a0:	b922      	cbnz	r2, 80058ac <_realloc_r+0x20>
 80058a2:	f7ff ff49 	bl	8005738 <_free_r>
 80058a6:	4625      	mov	r5, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ac:	f000 f830 	bl	8005910 <_malloc_usable_size_r>
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d20f      	bcs.n	80058d4 <_realloc_r+0x48>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4638      	mov	r0, r7
 80058b8:	f7ff ff8e 	bl	80057d8 <_malloc_r>
 80058bc:	4605      	mov	r5, r0
 80058be:	2800      	cmp	r0, #0
 80058c0:	d0f2      	beq.n	80058a8 <_realloc_r+0x1c>
 80058c2:	4631      	mov	r1, r6
 80058c4:	4622      	mov	r2, r4
 80058c6:	f7ff ff0f 	bl	80056e8 <memcpy>
 80058ca:	4631      	mov	r1, r6
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7ff ff33 	bl	8005738 <_free_r>
 80058d2:	e7e9      	b.n	80058a8 <_realloc_r+0x1c>
 80058d4:	4635      	mov	r5, r6
 80058d6:	e7e7      	b.n	80058a8 <_realloc_r+0x1c>

080058d8 <_sbrk_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d06      	ldr	r5, [pc, #24]	; (80058f4 <_sbrk_r+0x1c>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f7fc fafe 	bl	8001ee4 <_sbrk>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_sbrk_r+0x1a>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_sbrk_r+0x1a>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000148 	.word	0x20000148

080058f8 <__malloc_lock>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__malloc_lock+0x8>)
 80058fa:	f000 b811 	b.w	8005920 <__retarget_lock_acquire_recursive>
 80058fe:	bf00      	nop
 8005900:	20000150 	.word	0x20000150

08005904 <__malloc_unlock>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__malloc_unlock+0x8>)
 8005906:	f000 b80c 	b.w	8005922 <__retarget_lock_release_recursive>
 800590a:	bf00      	nop
 800590c:	20000150 	.word	0x20000150

08005910 <_malloc_usable_size_r>:
 8005910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005914:	1f18      	subs	r0, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	bfbc      	itt	lt
 800591a:	580b      	ldrlt	r3, [r1, r0]
 800591c:	18c0      	addlt	r0, r0, r3
 800591e:	4770      	bx	lr

08005920 <__retarget_lock_acquire_recursive>:
 8005920:	4770      	bx	lr

08005922 <__retarget_lock_release_recursive>:
 8005922:	4770      	bx	lr

08005924 <_init>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr

08005930 <_fini>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr
