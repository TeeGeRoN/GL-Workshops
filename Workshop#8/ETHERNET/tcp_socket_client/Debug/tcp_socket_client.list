
tcp_socket_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000249a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005494  08024b30  08024b30  00034b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029fc4  08029fc4  00040244  2**0
                  CONTENTS
  4 .ARM          00000008  08029fc4  08029fc4  00039fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029fcc  08029fcc  00040244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029fcc  08029fcc  00039fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029fd0  08029fd0  00039fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08029fd4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001afbc  20000244  0802a218  00040244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b200  0802a218  0004b200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005fbf4  00000000  00000000  00040274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ac61  00000000  00000000  0009fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c98  00000000  00000000  000aaad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b28  00000000  00000000  000ad768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039683  00000000  00000000  000b0290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00049311  00000000  00000000  000e9913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fafda  00000000  00000000  00132c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022dbfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cce4  00000000  00000000  0022dc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024b18 	.word	0x08024b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	08024b18 	.word	0x08024b18

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <writeRegister>:
#include "PCA9685lib.h"


void writeRegister(uint8_t regAddress, uint8_t value)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	/* Writes in the register.
	 * param regAddress - where (at what address) to write
	 * param value - value to write
	 * */
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f004 fc0f 	bl	8005794 <HAL_Delay>
	uint8_t TxBuffer[8];
	TxBuffer[0] = regAddress;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	723b      	strb	r3, [r7, #8]
	TxBuffer[1] = value;
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&_hi2c, _i2cAddress, (uint8_t *) &TxBuffer, 2, 1000);
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <writeRegister+0x3c>)
 8000f80:	8819      	ldrh	r1, [r3, #0]
 8000f82:	f107 0208 	add.w	r2, r7, #8
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <writeRegister+0x40>)
 8000f90:	f005 f976 	bl	8006280 <HAL_I2C_Master_Transmit>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20014528 	.word	0x20014528
 8000fa0:	200144d4 	.word	0x200144d4

08000fa4 <readRegister>:

uint8_t readRegister(uint8_t regAddress)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	/* Reads the register.
	 * param regAddress - from which register to read (his address)
	 * */
	uint8_t RxBuffer;
	uint8_t Addr = regAddress;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&_hi2c, _i2cAddress, &Addr, sizeof(Addr), 1000);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <readRegister+0x44>)
 8000fb4:	8819      	ldrh	r1, [r3, #0]
 8000fb6:	f107 020e 	add.w	r2, r7, #14
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <readRegister+0x48>)
 8000fc4:	f005 f95c 	bl	8006280 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_hi2c, _i2cAddress, &RxBuffer, sizeof(RxBuffer), 1000);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <readRegister+0x44>)
 8000fca:	8819      	ldrh	r1, [r3, #0]
 8000fcc:	f107 020f 	add.w	r2, r7, #15
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <readRegister+0x48>)
 8000fda:	f005 fa4f 	bl	800647c <HAL_I2C_Master_Receive>
	return RxBuffer;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20014528 	.word	0x20014528
 8000fec:	200144d4 	.word	0x200144d4

08000ff0 <initPCA>:


void initPCA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	/* Initializes the PCA9685, sets the default frequency (can be disabled).
	 * param hi2c - I2C_Handler
	 * param DevAddress - PCA9685 address
	 * */
	HAL_Delay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f004 fbc9 	bl	8005794 <HAL_Delay>
    _i2cAddress = DevAddress;
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <initPCA+0x54>)
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	8013      	strh	r3, [r2, #0]
    _hi2c = *hi2c;
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <initPCA+0x58>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	2354      	movs	r3, #84	; 0x54
 8001012:	461a      	mov	r2, r3
 8001014:	f020 f906 	bl	8021224 <memcpy>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <initPCA+0x5c>)
 800101e:	f004 ff9f 	bl	8005f60 <HAL_GPIO_WritePin>
    writeRegister(PCA9685_MODE1_REG, PCA9685_MODE1_ALLCALL);
 8001022:	2101      	movs	r1, #1
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ff9b 	bl	8000f60 <writeRegister>
    resetDevice();
 800102a:	f000 f825 	bl	8001078 <resetDevice>
    // set the default internal frequency
    setOscillatorFrequency(FREQUENCY_OSCILLATOR);
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <initPCA+0x60>)
 8001030:	f000 f812 	bl	8001058 <setOscillatorFrequency>
    // set a default frequency
    setPWMFrequency(1000);
 8001034:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001054 <initPCA+0x64>
 8001038:	f000 f82a 	bl	8001090 <setPWMFrequency>

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20014528 	.word	0x20014528
 8001048:	200144d4 	.word	0x200144d4
 800104c:	40020400 	.word	0x40020400
 8001050:	017d7840 	.word	0x017d7840
 8001054:	447a0000 	.word	0x447a0000

08001058 <setOscillatorFrequency>:

void setOscillatorFrequency(uint32_t Freq)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	/* Setter for the internally tracked oscillator used for
	 * frequency calculations
	 * */
	  oscillator_freq = Freq;
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <setOscillatorFrequency+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2001452c 	.word	0x2001452c

08001078 <resetDevice>:
	 * frequency calculations
	 * */
	return oscillator_freq;
}
void resetDevice() 
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Sends a reset command to the PCA9685 */
    writeRegister(PCA9685_MODE1_REG, PCA9685_MODE1_RESTART);
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ff6e 	bl	8000f60 <writeRegister>
    HAL_Delay(10);
 8001084:	200a      	movs	r0, #10
 8001086:	f004 fb85 	bl	8005794 <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <setPWMFrequency>:
	uint8_t wakeup = sleep & ~PCA9685_MODE1_SLEEP; // set sleep bit low
	writeRegister(PCA9685_MODE1_REG, wakeup);
}

void setPWMFrequency(float Frequency)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Setter for the frequency, uses the prescaler calculation.
	 * This is why this function sets the approximate value.
	 * param Frequency(0-4095) to set desirable frequency
	 * */
	 if (Frequency < 1)
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d502      	bpl.n	80010b2 <setPWMFrequency+0x22>
		 Frequency = 1;
 80010ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010b0:	607b      	str	r3, [r7, #4]
	 if (Frequency > 3500)
 80010b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80011bc <setPWMFrequency+0x12c>
 80010ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	dd01      	ble.n	80010c8 <setPWMFrequency+0x38>
		 Frequency = 3500; // Datasheet limit
 80010c4:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <setPWMFrequency+0x130>)
 80010c6:	607b      	str	r3, [r7, #4]

	 float prescaleval = ((oscillator_freq / (Frequency * 4096.0)) + 0.5) - 1;;
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <setPWMFrequency+0x134>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa29 	bl	8000524 <__aeabi_ui2d>
 80010d2:	4604      	mov	r4, r0
 80010d4:	460d      	mov	r5, r1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa46 	bl	8000568 <__aeabi_f2d>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <setPWMFrequency+0x138>)
 80010e2:	f7ff fa99 	bl	8000618 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff fbbd 	bl	800086c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <setPWMFrequency+0x13c>)
 8001100:	f7ff f8d4 	bl	80002ac <__adddf3>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <setPWMFrequency+0x140>)
 8001112:	f7ff f8c9 	bl	80002a8 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd53 	bl	8000bc8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	60fb      	str	r3, [r7, #12]
	 if (prescaleval < 3)
 8001126:	edd7 7a03 	vldr	s15, [r7, #12]
 800112a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d501      	bpl.n	800113c <setPWMFrequency+0xac>
		 prescaleval = 3;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <setPWMFrequency+0x144>)
 800113a:	60fb      	str	r3, [r7, #12]
	 if (prescaleval > 255)
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80011d8 <setPWMFrequency+0x148>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	dd01      	ble.n	8001152 <setPWMFrequency+0xc2>
		 prescaleval = 255;
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <setPWMFrequency+0x14c>)
 8001150:	60fb      	str	r3, [r7, #12]

	  uint8_t prescale = (uint8_t)prescaleval;
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115a:	edc7 7a00 	vstr	s15, [r7]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	72fb      	strb	r3, [r7, #11]
	  uint8_t oldmode = readRegister(PCA9685_MODE1_REG);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff1e 	bl	8000fa4 <readRegister>
 8001168:	4603      	mov	r3, r0
 800116a:	72bb      	strb	r3, [r7, #10]
	  uint8_t newmode = (oldmode & ~PCA9685_MODE1_RESTART) | PCA9685_MODE1_SLEEP; // sleep
 800116c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001170:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001174:	b25b      	sxtb	r3, r3
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	b25b      	sxtb	r3, r3
 800117c:	727b      	strb	r3, [r7, #9]
	  writeRegister(PCA9685_MODE1_REG, newmode);                             // go to sleep
 800117e:	7a7b      	ldrb	r3, [r7, #9]
 8001180:	4619      	mov	r1, r3
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff feec 	bl	8000f60 <writeRegister>
	  writeRegister(PCA9685_PRESCALE_REG, prescale); // set the prescaler
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	4619      	mov	r1, r3
 800118c:	20fe      	movs	r0, #254	; 0xfe
 800118e:	f7ff fee7 	bl	8000f60 <writeRegister>
	  writeRegister(PCA9685_MODE1_REG, oldmode);
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	4619      	mov	r1, r3
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff fee2 	bl	8000f60 <writeRegister>
	  HAL_Delay(5);
 800119c:	2005      	movs	r0, #5
 800119e:	f004 faf9 	bl	8005794 <HAL_Delay>
	  // This sets the MODE1 register to turn on auto increment.
	  writeRegister(PCA9685_MODE1_REG, oldmode | PCA9685_MODE1_RESTART | PCA9685_MODE1_AUTOINC);
 80011a2:	7abb      	ldrb	r3, [r7, #10]
 80011a4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fed7 	bl	8000f60 <writeRegister>

}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	455ac000 	.word	0x455ac000
 80011c0:	455ac000 	.word	0x455ac000
 80011c4:	2001452c 	.word	0x2001452c
 80011c8:	40b00000 	.word	0x40b00000
 80011cc:	3fe00000 	.word	0x3fe00000
 80011d0:	3ff00000 	.word	0x3ff00000
 80011d4:	40400000 	.word	0x40400000
 80011d8:	437f0000 	.word	0x437f0000
 80011dc:	437f0000 	.word	0x437f0000

080011e0 <setLedPWM>:
	uint16_t Frequency = (oscillator_freq/((float)(presc + 1))-0.5) / (float)4096;
	return Frequency;
}

void setLedPWM(uint8_t led, int value)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
	/* PWM a single channel
	 * param led channel (1-16) to set PWM value for
	 * param on_value 0-4095 value to turn on the pulse
	 * Using setPWM() function.
	 * */
	setPWM(led, 0, value);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f804 	bl	8001200 <setPWM>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <setPWM>:

void setPWM(uint8_t led, int on_value, int off_value) 
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
	/* PWM a single channel
	 * param led channel (1-16) to set PWM value for
	 * param on_value 0-4095 value to turn on the pulse
	 * param off_value 0-4095 value to turn off the pulse
	 * */
	writeRegister(PCA9685_LED0_REG_ON_L + LED_MULTIPLYER * (led - 1), on_value & 0xFF);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3b01      	subs	r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3306      	adds	r3, #6
 800121a:	b2db      	uxtb	r3, r3
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe9c 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_LED0_REG_ON_H + LED_MULTIPLYER * (led - 1), on_value >> 8);
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	3b01      	subs	r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3307      	adds	r3, #7
 8001234:	b2da      	uxtb	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	121b      	asrs	r3, r3, #8
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f7ff fe8e 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_LED0_REG_OFF_L + LED_MULTIPLYER * (led - 1), off_value & 0xFF);
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	3301      	adds	r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe83 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_LED0_REG_OFF_H + LED_MULTIPLYER * (led - 1), off_value >> 8);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3b01      	subs	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3309      	adds	r3, #9
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	121b      	asrs	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	4610      	mov	r0, r2
 8001272:	f7ff fe75 	bl	8000f60 <writeRegister>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <setAllPWM>:
	 * */
	setAllPWM(0, value);
}

void setAllPWM(int on_value, int off_value) 
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	/* Sets PWM for all channels
	 * param on_value 0-4095 value to turn on the pulse
	 * param off_value 0-4095 value to turn off the pulse
	 * */
	writeRegister(PCA9685_ALLLED_REG_ON_L, on_value & 0xFF);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	20fa      	movs	r0, #250	; 0xfa
 8001290:	f7ff fe66 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_ALLLED_REG_ON_H, on_value >> 8);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	121b      	asrs	r3, r3, #8
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	20fb      	movs	r0, #251	; 0xfb
 800129e:	f7ff fe5f 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_ALLLED_OFF_L, off_value & 0xFF);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	20fc      	movs	r0, #252	; 0xfc
 80012aa:	f7ff fe59 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_ALLLED_OFF_H, off_value >> 8);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	121b      	asrs	r3, r3, #8
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	20fd      	movs	r0, #253	; 0xfd
 80012b8:	f7ff fe52 	bl	8000f60 <writeRegister>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <getPWM>:
uint16_t getPWM(uint8_t led)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	/* Getter for the PWM of a single channel value
	 * */
	int ledval = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
	ledval = readRegister(PCA9685_LED0_REG_OFF_H + LED_MULTIPLYER * (led-1));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3309      	adds	r3, #9
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe5f 	bl	8000fa4 <readRegister>
 80012e6:	4603      	mov	r3, r0
 80012e8:	60fb      	str	r3, [r7, #12]
	ledval = ledval & 0xf;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
	ledval <<= 8;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
	ledval += readRegister(PCA9685_LED0_REG_OFF_L + LED_MULTIPLYER * (led-1));
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe4e 	bl	8000fa4 <readRegister>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
	return ledval;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b29b      	uxth	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <setAllLedOff>:
	 * */
	setAllPWM(0, 4095);
}

void setAllLedOff()
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	/* Setter all channels to the min value(off)
	 * */
	setAllPWM(0, 0);
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffaa 	bl	800127e <setAllPWM>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__io_putchar>:

#define TRANSMIT_TIMEOUT 5
#define RECEIVE_TIMEOUT 1

int __io_putchar(int ch)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, sizeof(uint8_t), TRANSMIT_TIMEOUT);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	2305      	movs	r3, #5
 8001384:	2201      	movs	r2, #1
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <__io_putchar+0x20>)
 8001388:	f008 f909 	bl	800959e <HAL_UART_Transmit>
	return ch;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20014534 	.word	0x20014534

0800139c <http_temperature_path_handler>:
"<h2>Humidity: %s %%</h2>"\
"</body>"\
"</html>"

http_status_t http_temperature_path_handler(http_buffer_t *out)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6078      	str	r0, [r7, #4]
	printf("http_temperature_path_handler()\n");
 80013a4:	4840      	ldr	r0, [pc, #256]	; (80014a8 <http_temperature_path_handler+0x10c>)
 80013a6:	f020 fd07 	bl	8021db8 <puts>
	if (out == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <http_temperature_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e074      	b.n	800149e <http_temperature_path_handler+0x102>
	}
	char * content = malloc(256);
 80013b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013b8:	f01f ff16 	bl	80211e8 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 80013c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <http_temperature_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e069      	b.n	800149e <http_temperature_path_handler+0x102>
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, ts);
#else
	char temperature[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d2:	4936      	ldr	r1, [pc, #216]	; (80014ac <http_temperature_path_handler+0x110>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fcc4 	bl	8003d62 <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 80013da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2204      	movs	r2, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fdd3 	bl	8003f90 <dht11_read>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 80013f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10e      	bne.n	8001416 <http_temperature_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), NULL, temperature);
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001400:	2200      	movs	r2, #0
 8001402:	2104      	movs	r1, #4
 8001404:	f002 fe1c 	bl	8004040 <dht11_to_str>
		printf("temperature = %s *C\n", temperature);
 8001408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140c:	4619      	mov	r1, r3
 800140e:	4828      	ldr	r0, [pc, #160]	; (80014b0 <http_temperature_path_handler+0x114>)
 8001410:	f020 fc4c 	bl	8021cac <iprintf>
 8001414:	e00c      	b.n	8001430 <http_temperature_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 8001416:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800141a:	4619      	mov	r1, r3
 800141c:	4825      	ldr	r0, [pc, #148]	; (80014b4 <http_temperature_path_handler+0x118>)
 800141e:	f020 fc45 	bl	8021cac <iprintf>
		strncpy(temperature, "--", sizeof(temperature));
 8001422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001426:	2206      	movs	r2, #6
 8001428:	4923      	ldr	r1, [pc, #140]	; (80014b8 <http_temperature_path_handler+0x11c>)
 800142a:	4618      	mov	r0, r3
 800142c:	f020 fe70 	bl	8022110 <strncpy>
	}
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, temperature);
 8001430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <http_temperature_path_handler+0x120>)
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800143c:	f020 fd7e 	bl	8021f3c <sniprintf>
#endif

	int content_len = strlen(content);
 8001440:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001442:	f7fe fecf 	bl	80001e4 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6858      	ldr	r0, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <http_temperature_path_handler+0x124>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23c8      	movs	r3, #200	; 0xc8
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <http_temperature_path_handler+0x128>)
 800145e:	f020 fd6d 	bl	8021f3c <sniprintf>
	int header_len = strlen(out->data);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe febc 	bl	80001e4 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001478:	440a      	add	r2, r1
 800147a:	4293      	cmp	r3, r2
 800147c:	d204      	bcs.n	8001488 <http_temperature_path_handler+0xec>
	{
		free(content);
 800147e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001480:	f01f feba 	bl	80211f8 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8001484:	2304      	movs	r3, #4
 8001486:	e00a      	b.n	800149e <http_temperature_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001490:	4618      	mov	r0, r3
 8001492:	f020 fe18 	bl	80220c6 <strncat>
	free(content);
 8001496:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001498:	f01f feae 	bl	80211f8 <free>
	return HTTP_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3748      	adds	r7, #72	; 0x48
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08024b6c 	.word	0x08024b6c
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	08024b8c 	.word	0x08024b8c
 80014b4:	08024ba4 	.word	0x08024ba4
 80014b8:	08024bbc 	.word	0x08024bbc
 80014bc:	08024bc0 	.word	0x08024bc0
 80014c0:	08024c74 	.word	0x08024c74
 80014c4:	08024bfc 	.word	0x08024bfc

080014c8 <http_humidity_path_handler>:

http_status_t http_humidity_path_handler(http_buffer_t *out)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b094      	sub	sp, #80	; 0x50
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]
	printf("http_humidity_path_handler()\n");
 80014d0:	4840      	ldr	r0, [pc, #256]	; (80015d4 <http_humidity_path_handler+0x10c>)
 80014d2:	f020 fc71 	bl	8021db8 <puts>
	if (out == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <http_humidity_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 80014dc:	2301      	movs	r3, #1
 80014de:	e074      	b.n	80015ca <http_humidity_path_handler+0x102>
	}
	char * content = malloc(256);
 80014e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014e4:	f01f fe80 	bl	80211e8 <malloc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 80014ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <http_humidity_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e069      	b.n	80015ca <http_humidity_path_handler+0x102>
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, hs);
#else
	char humidity[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fe:	4936      	ldr	r1, [pc, #216]	; (80015d8 <http_humidity_path_handler+0x110>)
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fc2e 	bl	8003d62 <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 8001506:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2204      	movs	r2, #4
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fd3d 	bl	8003f90 <dht11_read>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 800151c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10e      	bne.n	8001542 <http_humidity_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), humidity, NULL);
 8001524:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001528:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800152c:	2300      	movs	r3, #0
 800152e:	2104      	movs	r1, #4
 8001530:	f002 fd86 	bl	8004040 <dht11_to_str>
		printf("humidity = %s %%\n", humidity);
 8001534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001538:	4619      	mov	r1, r3
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <http_humidity_path_handler+0x114>)
 800153c:	f020 fbb6 	bl	8021cac <iprintf>
 8001540:	e00c      	b.n	800155c <http_humidity_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 8001542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001546:	4619      	mov	r1, r3
 8001548:	4825      	ldr	r0, [pc, #148]	; (80015e0 <http_humidity_path_handler+0x118>)
 800154a:	f020 fbaf 	bl	8021cac <iprintf>
		strncpy(humidity, "--", sizeof(humidity));
 800154e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001552:	2206      	movs	r2, #6
 8001554:	4923      	ldr	r1, [pc, #140]	; (80015e4 <http_humidity_path_handler+0x11c>)
 8001556:	4618      	mov	r0, r3
 8001558:	f020 fdda 	bl	8022110 <strncpy>
	}
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, humidity);
 800155c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <http_humidity_path_handler+0x120>)
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001568:	f020 fce8 	bl	8021f3c <sniprintf>
#endif

	int content_len = strlen(content);
 800156c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800156e:	f7fe fe39 	bl	80001e4 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6858      	ldr	r0, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <http_humidity_path_handler+0x124>)
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	23c8      	movs	r3, #200	; 0xc8
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <http_humidity_path_handler+0x128>)
 800158a:	f020 fcd7 	bl	8021f3c <sniprintf>
	int header_len = strlen(out->data);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe26 	bl	80001e4 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015a4:	440a      	add	r2, r1
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d204      	bcs.n	80015b4 <http_humidity_path_handler+0xec>
	{
		free(content);
 80015aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015ac:	f01f fe24 	bl	80211f8 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 80015b0:	2304      	movs	r3, #4
 80015b2:	e00a      	b.n	80015ca <http_humidity_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015bc:	4618      	mov	r0, r3
 80015be:	f020 fd82 	bl	80220c6 <strncat>
	free(content);
 80015c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015c4:	f01f fe18 	bl	80211f8 <free>
	return HTTP_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3748      	adds	r7, #72	; 0x48
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08024c78 	.word	0x08024c78
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	08024c98 	.word	0x08024c98
 80015e0:	08024ba4 	.word	0x08024ba4
 80015e4:	08024bbc 	.word	0x08024bbc
 80015e8:	08024cac 	.word	0x08024cac
 80015ec:	08024c74 	.word	0x08024c74
 80015f0:	08024bfc 	.word	0x08024bfc

080015f4 <http_led_toggle_handler>:

void http_led_toggle_handler(bool LED[4])
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <http_led_toggle_handler+0x48>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e010      	b.n	800162a <http_led_toggle_handler+0x36>
	{
		if (LED[i])
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <http_led_toggle_handler+0x30>
		{
			BSP_LED_Toggle(led[i]);
 8001614:	f107 0208 	add.w	r2, r7, #8
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fb4e 	bl	8003cc0 <BSP_LED_Toggle>
	for(size_t i = 0; i < 4; i++)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d9eb      	bls.n	8001608 <http_led_toggle_handler+0x14>
		}
	}
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08024ce0 	.word	0x08024ce0

08001640 <http_led_on_handler>:

void http_led_on_handler(bool LED[4])
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <http_led_on_handler+0x48>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e010      	b.n	8001676 <http_led_on_handler+0x36>
	{
		if (LED[i])
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <http_led_on_handler+0x30>
		{
			BSP_LED_On(led[i]);
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f002 faf4 	bl	8003c58 <BSP_LED_On>
	for(size_t i = 0; i < 4; i++)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d9eb      	bls.n	8001654 <http_led_on_handler+0x14>
		}
	}
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08024ce0 	.word	0x08024ce0

0800168c <http_led_off_handler>:

void http_led_off_handler(bool LED[4])
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <http_led_off_handler+0x48>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e010      	b.n	80016c2 <http_led_off_handler+0x36>
	{
		if (LED[i])
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <http_led_off_handler+0x30>
		{
			BSP_LED_Off(led[i]);
 80016ac:	f107 0208 	add.w	r2, r7, #8
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fae8 	bl	8003c8c <BSP_LED_Off>
	for(size_t i = 0; i < 4; i++)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d9eb      	bls.n	80016a0 <http_led_off_handler+0x14>
		}
	}
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	08024ce0 	.word	0x08024ce0

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b094      	sub	sp, #80	; 0x50
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016de:	f004 f817 	bl	8005710 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f002 fa40 	bl	8003b68 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f002 fa3d 	bl	8003b68 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80016ee:	2002      	movs	r0, #2
 80016f0:	f002 fa3a 	bl	8003b68 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f002 fa37 	bl	8003b68 <BSP_LED_Init>
  /* Initialization of DWT module (cortex-m4)*/
  DWT_Init();
 80016fa:	f002 f9bf 	bl	8003a7c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f883 	bl	8001808 <SystemClock_Config>
  printf("Semihosting activated\n");
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 f943 	bl	800198c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001706:	f000 f917 	bl	8001938 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800170a:	f000 f8e7 	bl	80018dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initPCA(&hi2c1, 0x80); // Init PCA9685
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4830      	ldr	r0, [pc, #192]	; (80017d4 <main+0xfc>)
 8001712:	f7ff fc6d 	bl	8000ff0 <initPCA>
    setAllLedOff();    // Turn off all channels
 8001716:	f7ff fe02 	bl	800131e <setAllLedOff>
    setPWMFrequency(1000);  // Set PCA9685 frequency to 1000Hz
 800171a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80017d8 <main+0x100>
 800171e:	f7ff fcb7 	bl	8001090 <setPWMFrequency>
  /* WARNING: if you use minicom as a terminal utility,
   * please, add 'pu addcarreturn Yes' to the file ~/.minirc.dfl
   * to attach '\r' after '\n'
   * */
  printf("USART3 initialized\n");
 8001722:	482e      	ldr	r0, [pc, #184]	; (80017dc <main+0x104>)
 8001724:	f020 fb48 	bl	8021db8 <puts>
  NVIC_SetPriorityGrouping(0);
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fe01 	bl	8001330 <__NVIC_SetPriorityGrouping>

  lcd_init();
 800172e:	f008 fabf 	bl	8009cb0 <lcd_init>
  /* Use the LCD_CLR_SCR_CMD command
   * to clear the LCD screen */
  lcd_command_set(LCD_CLR_SCR_CMD);
 8001732:	2001      	movs	r0, #1
 8001734:	f008 fa96 	bl	8009c64 <lcd_command_set>
  lcd_puts("GL Embedded");
 8001738:	4829      	ldr	r0, [pc, #164]	; (80017e0 <main+0x108>)
 800173a:	f008 fb17 	bl	8009d6c <lcd_puts>
  /* Do not forget to set the LCD_LFCR_CMD
   * command when printing more than 16
   * characters because LCD 16x2 is used */
  lcd_command_set(LCD_LFCR_CMD);
 800173e:	20a8      	movs	r0, #168	; 0xa8
 8001740:	f008 fa90 	bl	8009c64 <lcd_command_set>
  lcd_puts("Starter Kit");
 8001744:	4827      	ldr	r0, [pc, #156]	; (80017e4 <main+0x10c>)
 8001746:	f008 fb11 	bl	8009d6c <lcd_puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <main+0x110>)
 800174c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001750:	461d      	mov	r5, r3
 8001752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800175a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f008 ffe0 	bl	800a726 <osThreadCreate>
 8001766:	4603      	mov	r3, r0
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <main+0x114>)
 800176a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpClientTask */
  osThreadDef(tcpClientTask, StartTcpClientTask, osPriorityNormal, 0, 2048);
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <main+0x118>)
 800176e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001772:	461d      	mov	r5, r3
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	6023      	str	r3, [r4, #0]
  tcpClientTaskHandle = osThreadCreate(osThread(tcpClientTask), NULL);
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f008 ffcf 	bl	800a726 <osThreadCreate>
 8001788:	4603      	mov	r3, r0
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <main+0x11c>)
 800178c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpServerTask */
  osThreadDef(tcpServerTask, StartTcpServerTask, osPriorityNormal, 0, 2048);
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <main+0x120>)
 8001790:	f107 0414 	add.w	r4, r7, #20
 8001794:	461d      	mov	r5, r3
 8001796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	6023      	str	r3, [r4, #0]
  tcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f008 ffbe 	bl	800a726 <osThreadCreate>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <main+0x124>)
 80017ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpServerTask */
  osThreadDef(udpServerTask, StartUdpServerTask, osPriorityNormal, 0, 2048);
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <main+0x128>)
 80017b2:	463c      	mov	r4, r7
 80017b4:	461d      	mov	r5, r3
 80017b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	6023      	str	r3, [r4, #0]
  udpServerTaskHandle = osThreadCreate(osThread(udpServerTask), NULL);
 80017be:	463b      	mov	r3, r7
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f008 ffaf 	bl	800a726 <osThreadCreate>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <main+0x12c>)
 80017cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017ce:	f008 ff93 	bl	800a6f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <main+0xfa>
 80017d4:	2001457c 	.word	0x2001457c
 80017d8:	447a0000 	.word	0x447a0000
 80017dc:	08024ce4 	.word	0x08024ce4
 80017e0:	08024cf8 	.word	0x08024cf8
 80017e4:	08024d04 	.word	0x08024d04
 80017e8:	08024d10 	.word	0x08024d10
 80017ec:	20014530 	.word	0x20014530
 80017f0:	08024d24 	.word	0x08024d24
 80017f4:	20014578 	.word	0x20014578
 80017f8:	08024d38 	.word	0x08024d38
 80017fc:	200145d4 	.word	0x200145d4
 8001800:	08024d4c 	.word	0x08024d4c
 8001804:	200145d0 	.word	0x200145d0

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	; 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	; 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f01f fd2c 	bl	8021274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <SystemClock_Config+0xcc>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <SystemClock_Config+0xcc>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <SystemClock_Config+0xcc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <SystemClock_Config+0xd0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <SystemClock_Config+0xd0>)
 8001852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <SystemClock_Config+0xd0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001878:	2308      	movs	r3, #8
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800187c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001886:	2307      	movs	r3, #7
 8001888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	4618      	mov	r0, r3
 8001890:	f006 fee4 	bl	800865c <HAL_RCC_OscConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800189a:	f000 fa87 	bl	8001dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2105      	movs	r1, #5
 80018bc:	4618      	mov	r0, r3
 80018be:	f007 f945 	bl	8008b4c <HAL_RCC_ClockConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018c8:	f000 fa70 	bl	8001dac <Error_Handler>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	; 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_I2C1_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <MX_I2C1_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_I2C1_Init+0x50>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_I2C1_Init+0x58>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_I2C1_Init+0x50>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_I2C1_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_I2C1_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_I2C1_Init+0x50>)
 800191a:	f004 fb6d 	bl	8005ff8 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 fa42 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2001457c 	.word	0x2001457c
 8001930:	40005400 	.word	0x40005400
 8001934:	000186a0 	.word	0x000186a0

08001938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <MX_USART3_UART_Init+0x50>)
 8001940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001970:	f007 fdc8 	bl	8009504 <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800197a:	f000 fa17 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20014534 	.word	0x20014534
 8001988:	40004800 	.word	0x40004800

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	4bb1      	ldr	r3, [pc, #708]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4ab0      	ldr	r2, [pc, #704]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4bae      	ldr	r3, [pc, #696]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	4baa      	ldr	r3, [pc, #680]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4aa9      	ldr	r2, [pc, #676]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4ba7      	ldr	r3, [pc, #668]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4ba3      	ldr	r3, [pc, #652]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4aa2      	ldr	r2, [pc, #648]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4ba0      	ldr	r3, [pc, #640]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b9c      	ldr	r3, [pc, #624]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a9b      	ldr	r2, [pc, #620]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b99      	ldr	r3, [pc, #612]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b95      	ldr	r3, [pc, #596]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b8e      	ldr	r3, [pc, #568]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a8d      	ldr	r2, [pc, #564]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8001a50:	4887      	ldr	r0, [pc, #540]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001a52:	f004 fa85 	bl	8005f60 <HAL_GPIO_WritePin>
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4886      	ldr	r0, [pc, #536]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001a5c:	f004 fa80 	bl	8005f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001a60:	2200      	movs	r2, #0
 8001a62:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8001a66:	4884      	ldr	r0, [pc, #528]	; (8001c78 <MX_GPIO_Init+0x2ec>)
 8001a68:	f004 fa7a 	bl	8005f60 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	4882      	ldr	r0, [pc, #520]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001a72:	f004 fa75 	bl	8005f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin DISP_RS_Pin DISP_RW_Pin DISP_ENA_Pin
                           DISP_DB4_Pin DISP_DB5_Pin DISP_DB6_Pin DISP_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 8001a76:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001a7a:	61fb      	str	r3, [r7, #28]
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4878      	ldr	r0, [pc, #480]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001a90:	f003 ffb6 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4872      	ldr	r0, [pc, #456]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001aac:	f003 ffa8 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac0:	2305      	movs	r3, #5
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	486a      	ldr	r0, [pc, #424]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001acc:	f003 ff98 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <MX_GPIO_Init+0x2f4>)
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4868      	ldr	r0, [pc, #416]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001ae4:	f003 ff8c 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001af8:	2306      	movs	r3, #6
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4860      	ldr	r0, [pc, #384]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001b04:	f003 ff7c 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4858      	ldr	r0, [pc, #352]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001b24:	f003 ff6c 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4850      	ldr	r0, [pc, #320]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001b3c:	f003 ff60 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_PHY_INT_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_INT_Pin;
 8001b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <MX_GPIO_Init+0x2fc>)
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_PHY_INT_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4846      	ldr	r0, [pc, #280]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001b56:	f003 ff53 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4841      	ldr	r0, [pc, #260]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001b78:	f003 ff42 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_PHY_RST_Pin DHT11_IO_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001b7c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8001b80:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4838      	ldr	r0, [pc, #224]	; (8001c78 <MX_GPIO_Init+0x2ec>)
 8001b96:	f003 ff33 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b9a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bac:	2306      	movs	r3, #6
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	482f      	ldr	r0, [pc, #188]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001bb8:	f003 ff22 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	482c      	ldr	r0, [pc, #176]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001bd2:	f003 ff15 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001bd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001be8:	230a      	movs	r3, #10
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4824      	ldr	r0, [pc, #144]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001bf4:	f003 ff04 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481b      	ldr	r0, [pc, #108]	; (8001c78 <MX_GPIO_Init+0x2ec>)
 8001c0c:	f003 fef8 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4815      	ldr	r0, [pc, #84]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001c28:	f003 feea 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_GPIO_Init+0x300>)
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001c40:	f003 fede 	bl	8005a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	2006      	movs	r0, #6
 8001c4a:	f003 fe7f 	bl	800594c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c4e:	2006      	movs	r0, #6
 8001c50:	f003 fe98 	bl	8005984 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2105      	movs	r1, #5
 8001c58:	2017      	movs	r0, #23
 8001c5a:	f003 fe77 	bl	800594c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c5e:	2017      	movs	r0, #23
 8001c60:	f003 fe90 	bl	8005984 <HAL_NVIC_EnableIRQ>

}
 8001c64:	bf00      	nop
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40020000 	.word	0x40020000
 8001c88:	10210000 	.word	0x10210000
 8001c8c:	10120000 	.word	0x10120000

08001c90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d113      	bne.n	8001cc8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ca4:	f004 f944 	bl	8005f30 <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d112      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
		{
			printf("The blue button is pushed\n");
 8001cae:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001cb0:	f020 f882 	bl	8021db8 <puts>
			BSP_LED_Toggle(GREEN);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f002 f803 	bl	8003cc0 <BSP_LED_Toggle>
			osSignalSet (tcpClientTaskHandle, SIGNAL_PUSH_BUTTON);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f008 fd7f 	bl	800a7c4 <osSignalSet>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
	{
        /* Get the IT status register value */
        ethernetif_phy_irq();
	}
}
 8001cc6:	e005      	b.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cce:	d101      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
        ethernetif_phy_irq();
 8001cd0:	f008 f8ea 	bl	8009ea8 <ethernetif_phy_irq>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	08024d60 	.word	0x08024d60
 8001ce4:	20014578 	.word	0x20014578

08001ce8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b08f      	sub	sp, #60	; 0x3c
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001cf0:	f008 f868 	bl	8009dc4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  struct dhcp *dhcp;
  char msg[16];
  bool dhcp_bound_flag = false;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t offered_ip = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	  dhcp = netif_dhcp_data(lwip_get_netif());
 8001cfe:	f008 f857 	bl	8009db0 <lwip_get_netif>
 8001d02:	4603      	mov	r3, r0
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	61fb      	str	r3, [r7, #28]

	  if (dhcp->state == DHCP_STATE_BOUND && !dhcp_bound_flag)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	795b      	ldrb	r3, [r3, #5]
 8001d0c:	2b0a      	cmp	r3, #10
 8001d0e:	d12e      	bne.n	8001d6e <StartDefaultTask+0x86>
 8001d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d027      	beq.n	8001d6e <StartDefaultTask+0x86>
	  {
		  dhcp_bound_flag = true;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  lcd_command_set(LCD_CLR_SCR_CMD);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f007 ff9d 	bl	8009c64 <lcd_command_set>
		  lcd_puts("DHCP IP address:");
 8001d2a:	4815      	ldr	r0, [pc, #84]	; (8001d80 <StartDefaultTask+0x98>)
 8001d2c:	f008 f81e 	bl	8009d6c <lcd_puts>
		  lcd_command_set(LCD_LFCR_CMD);
 8001d30:	20a8      	movs	r0, #168	; 0xa8
 8001d32:	f007 ff97 	bl	8009c64 <lcd_command_set>
		  offered_ip = ip4_addr_get_u32(&dhcp->offered_ip_addr);
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	623b      	str	r3, [r7, #32]
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	b2dc      	uxtb	r4, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	0a1b      	lsrs	r3, r3, #8
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d44:	b2db      	uxtb	r3, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001d46:	6a3a      	ldr	r2, [r7, #32]
 8001d48:	0c12      	lsrs	r2, r2, #16
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d4a:	b2d2      	uxtb	r2, r2
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	0e09      	lsrs	r1, r1, #24
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d50:	f107 000c 	add.w	r0, r7, #12
 8001d54:	9102      	str	r1, [sp, #8]
 8001d56:	9201      	str	r2, [sp, #4]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <StartDefaultTask+0x9c>)
 8001d5e:	2110      	movs	r1, #16
 8001d60:	f020 f8ec 	bl	8021f3c <sniprintf>
		  lcd_puts(msg);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f007 ffff 	bl	8009d6c <lcd_puts>
	  }

	  BSP_LED_Toggle(BLUE);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f001 ffa6 	bl	8003cc0 <BSP_LED_Toggle>
	  osDelay(1000);
 8001d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d78:	f008 fd0f 	bl	800a79a <osDelay>
	  dhcp = netif_dhcp_data(lwip_get_netif());
 8001d7c:	e7bf      	b.n	8001cfe <StartDefaultTask+0x16>
 8001d7e:	bf00      	nop
 8001d80:	08024d7c 	.word	0x08024d7c
 8001d84:	08024d90 	.word	0x08024d90

08001d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d9a:	f003 fcdb 	bl	8005754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010000 	.word	0x40010000

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <parse_command>:
		parse_version,
		NULL
};

static http_status_t parse_command(const char *token, http_server_request_t *request)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_command() %s\n", token);
	if (strncmp(token, HTTP_GET_STR, HTTP_GET_STR_LEN) == 0)
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	491a      	ldr	r1, [pc, #104]	; (8001e30 <parse_command+0x78>)
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f020 f990 	bl	80220ec <strncmp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <parse_command+0x22>
	{
		request->command = HTTP_GET;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e025      	b.n	8001e26 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_PUT_STR, HTTP_PUT_STR_LEN) == 0)
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4915      	ldr	r1, [pc, #84]	; (8001e34 <parse_command+0x7c>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f020 f984 	bl	80220ec <strncmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <parse_command+0x3a>
	{
		request->command = HTTP_PUT;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e019      	b.n	8001e26 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_POST_STR, HTTP_POST_STR_LEN) == 0)
 8001df2:	2204      	movs	r2, #4
 8001df4:	4910      	ldr	r1, [pc, #64]	; (8001e38 <parse_command+0x80>)
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f020 f978 	bl	80220ec <strncmp>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <parse_command+0x52>
	{
		request->command = HTTP_POST;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e00d      	b.n	8001e26 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_RESET_STR, HTTP_RESET_STR_LEN) == 0)
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	490b      	ldr	r1, [pc, #44]	; (8001e3c <parse_command+0x84>)
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f020 f96c 	bl	80220ec <strncmp>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <parse_command+0x6a>
	{
		request->command = HTTP_RESET;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e001      	b.n	8001e26 <parse_command+0x6e>
	}
	else
	{
		return HTTP_ERR_CMD;
 8001e22:	2305      	movs	r3, #5
 8001e24:	e000      	b.n	8001e28 <parse_command+0x70>
	}
	return HTTP_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08024da8 	.word	0x08024da8
 8001e34:	08024dac 	.word	0x08024dac
 8001e38:	08024db0 	.word	0x08024db0
 8001e3c:	08024db8 	.word	0x08024db8

08001e40 <parse_path>:

static http_status_t parse_path(const char *token, http_server_request_t *request)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_path()\n");
	int len;
	if ((len = strlen(token)) > MAX_PATH_LENGTH)
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe f9ca 	bl	80001e4 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	dd01      	ble.n	8001e5e <parse_path+0x1e>
	{
		return HTTP_ERR_PATH_LEN;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e008      	b.n	8001e70 <parse_path+0x30>
	}
	strncpy(request->path, token, len + 1);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	1c58      	adds	r0, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	461a      	mov	r2, r3
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	f020 f951 	bl	8022110 <strncpy>
	HTTP_DEBUG_PRINF("path: %s\n",request->path);
	return HTTP_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <parse_version>:

static http_status_t parse_version(const char *token, http_server_request_t *request)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_version()\n");
	int len;
	if ((len = strlen(token)) > VERSION_LENGTH)
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe f9ae 	bl	80001e4 <strlen>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b09      	cmp	r3, #9
 8001e90:	d901      	bls.n	8001e96 <parse_version+0x1e>
	{
		return HTTP_ERR_VERSION_LEN;
 8001e92:	2307      	movs	r3, #7
 8001e94:	e009      	b.n	8001eaa <parse_version+0x32>
	}
	strncpy(request->version, token, len + 1);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f103 0011 	add.w	r0, r3, #17
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f020 f934 	bl	8022110 <strncpy>
	HTTP_DEBUG_PRINF("version: %s\n",request->version);
	return HTTP_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <parse_command_line>:

static http_status_t parse_command_line(const char *line, http_server_request_t *request)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	http_parser_state_t state = HTTP_PARSE_CMD;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
	char *token = strtok((char *)line, " ");
 8001ec2:	4916      	ldr	r1, [pc, #88]	; (8001f1c <parse_command_line+0x68>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f020 f94d 	bl	8022164 <strtok>
 8001eca:	6138      	str	r0, [r7, #16]
	http_status_t status;

	while(token != NULL && state != HTTP_PARSE_DONE)
 8001ecc:	e01b      	b.n	8001f06 <parse_command_line+0x52>
	{
		HTTP_DEBUG_PRINF("command line token : %s\n", token);

		if (handlers[state])
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <parse_command_line+0x6c>)
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <parse_command_line+0x48>
		{
			status = handlers[state](token, request);
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <parse_command_line+0x6c>)
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6938      	ldr	r0, [r7, #16]
 8001ee6:	4798      	blx	r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
			HTTP_DEBUG_PRINF("state : %d\n", state);
			if (status != HTTP_OK)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <parse_command_line+0x42>
			{
				HTTP_DEBUG_PRINF("handlers() error : %d\n", state);
				return status;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	e00e      	b.n	8001f14 <parse_command_line+0x60>
			}
			state++;
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
		}
		token = strtok(NULL, " ");
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <parse_command_line+0x68>)
 8001efe:	2000      	movs	r0, #0
 8001f00:	f020 f930 	bl	8022164 <strtok>
 8001f04:	6138      	str	r0, [r7, #16]
	while(token != NULL && state != HTTP_PARSE_DONE)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <parse_command_line+0x5e>
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d1dd      	bne.n	8001ece <parse_command_line+0x1a>
	}
	return status;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	08024dc0 	.word	0x08024dc0
 8001f20:	20000000 	.word	0x20000000

08001f24 <parse_payload>:

static http_status_t parse_payload(const char *payload, http_server_request_t *request)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	http_status_t status;
	if (payload == NULL || request == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <parse_payload+0x16>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <parse_payload+0x1a>
	{
		return HTTP_ERR_FAULT;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e034      	b.n	8001fa8 <parse_payload+0x84>
	}
	char *content = strstr(payload, HTTP_CONTENT_SEPARATOR);
 8001f3e:	491c      	ldr	r1, [pc, #112]	; (8001fb0 <parse_payload+0x8c>)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f020 f8f8 	bl	8022136 <strstr>
 8001f46:	6578      	str	r0, [r7, #84]	; 0x54
	if (content != NULL)
 8001f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <parse_payload+0x3e>
	{
		content += sizeof(HTTP_CONTENT_SEPARATOR) - 1;
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	3304      	adds	r3, #4
 8001f52:	657b      	str	r3, [r7, #84]	; 0x54
		strncpy(request->content, content, MAX_CONTENT_LENGTH);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	331a      	adds	r3, #26
 8001f58:	2240      	movs	r2, #64	; 0x40
 8001f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f020 f8d7 	bl	8022110 <strncpy>
		HTTP_DEBUG_PRINF("content : %s\n", content);
	}

	char *token = strtok((char *)payload, HTTP_HEADER_SEPARATOR);
 8001f62:	4914      	ldr	r1, [pc, #80]	; (8001fb4 <parse_payload+0x90>)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f020 f8fd 	bl	8022164 <strtok>
 8001f6a:	6538      	str	r0, [r7, #80]	; 0x50
	if (token == NULL)
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <parse_payload+0x52>
	{
		return HTTP_ERR_HEADER;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e018      	b.n	8001fa8 <parse_payload+0x84>
	}

	char command_line[MAX_COMMAND_LINE_LENGTH];
	strncpy(command_line, token, sizeof(command_line));
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	2240      	movs	r2, #64	; 0x40
 8001f7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f020 f8c6 	bl	8022110 <strncpy>

	status = parse_command_line((const char *)command_line, request);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff92 	bl	8001eb4 <parse_command_line>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (status != HTTP_OK)
 8001f96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <parse_payload+0x80>
	{
		return status;
 8001f9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fa2:	e001      	b.n	8001fa8 <parse_payload+0x84>
	}

	return status;
 8001fa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3758      	adds	r7, #88	; 0x58
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08024dc4 	.word	0x08024dc4
 8001fb4:	08024dcc 	.word	0x08024dcc

08001fb8 <error_code_handler>:

static http_status_t error_code_handler(const char *error_str, unsigned int error_code, const char *error_message, http_buffer_t *out)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
	char *tmp = (char *)malloc(256);
 8001fc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fca:	f01f f90d 	bl	80211e8 <malloc>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	61fb      	str	r3, [r7, #28]
	if (tmp == NULL)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <error_code_handler+0x24>
		return HTTP_ERR_FAULT;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e036      	b.n	800204a <error_code_handler+0x92>
	sprintf(tmp, HTTP_ERROR_MESSAGE_TEMPLATE_STR, error_str, error_str, error_message);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	491b      	ldr	r1, [pc, #108]	; (8002054 <error_code_handler+0x9c>)
 8001fe6:	69f8      	ldr	r0, [r7, #28]
 8001fe8:	f01f ffdc 	bl	8021fa4 <siprintf>
	int content_len = strlen(tmp);
 8001fec:	69f8      	ldr	r0, [r7, #28]
 8001fee:	f7fe f8f9 	bl	80001e4 <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, error_code, error_str, content_len);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6858      	ldr	r0, [r3, #4]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <error_code_handler+0xa0>)
 800200a:	f01f ff97 	bl	8021f3c <sniprintf>
	int header_len = strlen(out->data);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f8e6 	bl	80001e4 <strlen>
 8002018:	4603      	mov	r3, r0
 800201a:	617b      	str	r3, [r7, #20]
	if (out->length < header_len + content_len)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	440a      	add	r2, r1
 8002026:	4293      	cmp	r3, r2
 8002028:	d204      	bcs.n	8002034 <error_code_handler+0x7c>
	{
		free(tmp);
 800202a:	69f8      	ldr	r0, [r7, #28]
 800202c:	f01f f8e4 	bl	80211f8 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8002030:	2304      	movs	r3, #4
 8002032:	e00a      	b.n	800204a <error_code_handler+0x92>
	}
	strncat(out->data, tmp, content_len);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	69f9      	ldr	r1, [r7, #28]
 800203c:	4618      	mov	r0, r3
 800203e:	f020 f842 	bl	80220c6 <strncat>
	free(tmp);
 8002042:	69f8      	ldr	r0, [r7, #28]
 8002044:	f01f f8d8 	bl	80211f8 <free>
	return HTTP_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3720      	adds	r7, #32
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	08024dd0 	.word	0x08024dd0
 8002058:	08024e54 	.word	0x08024e54

0800205c <bad_request_handler>:

static http_status_t bad_request_handler(http_buffer_t *out)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_BAD_REQUEST_ERR_STR, HTTP_BAD_REQUEST_ERR_CODE, HTTP_ERR_400_STR, out);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <bad_request_handler+0x20>)
 8002068:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <bad_request_handler+0x24>)
 800206e:	f7ff ffa3 	bl	8001fb8 <error_code_handler>
 8002072:	4603      	mov	r3, r0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	08024ecc 	.word	0x08024ecc
 8002080:	08024ed8 	.word	0x08024ed8

08002084 <not_implemented_handler>:

static http_status_t not_implemented_handler(http_buffer_t *out)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_IMPLEMENTED_ERR_STR, HTTP_NOT_IMPLEMENTED_ERR_CODE, HTTP_ERR_501_STR, out);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <not_implemented_handler+0x20>)
 8002090:	f240 11f5 	movw	r1, #501	; 0x1f5
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <not_implemented_handler+0x24>)
 8002096:	f7ff ff8f 	bl	8001fb8 <error_code_handler>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	08024ee4 	.word	0x08024ee4
 80020a8:	08024ef0 	.word	0x08024ef0

080020ac <not_found_handler>:

static http_status_t not_found_handler(http_buffer_t *out)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_FOUND_ERR_STR, HTTP_NOT_FOUND_ERR_CODE, HTTP_ERR_404_STR, out);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <not_found_handler+0x20>)
 80020b8:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <not_found_handler+0x24>)
 80020be:	f7ff ff7b 	bl	8001fb8 <error_code_handler>
 80020c2:	4603      	mov	r3, r0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	08024f00 	.word	0x08024f00
 80020d0:	08024f0c 	.word	0x08024f0c

080020d4 <reset_content_handler>:

static http_status_t reset_content_handler(http_buffer_t *out)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_RESET_CONTENT_CODE, HTTP_RESET_CONTENT_STR, 0);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6858      	ldr	r0, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <reset_content_handler+0x2c>)
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	23cd      	movs	r3, #205	; 0xcd
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <reset_content_handler+0x30>)
 80020f0:	f01f ff24 	bl	8021f3c <sniprintf>
	return HTTP_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08024f18 	.word	0x08024f18
 8002104:	08024e54 	.word	0x08024e54

08002108 <error_handler>:

static http_status_t error_handler(http_status_t status, http_buffer_t *out)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
	switch(status)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d010      	beq.n	800213c <error_handler+0x34>
 800211a:	2b0c      	cmp	r3, #12
 800211c:	dc13      	bgt.n	8002146 <error_handler+0x3e>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <error_handler+0x20>
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d005      	beq.n	8002132 <error_handler+0x2a>
 8002126:	e00e      	b.n	8002146 <error_handler+0x3e>
	{
	case HTTP_OK:
		return reset_content_handler(out);
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f7ff ffd3 	bl	80020d4 <reset_content_handler>
 800212e:	4603      	mov	r3, r0
 8002130:	e00d      	b.n	800214e <error_handler+0x46>

	case HTTP_ERR_NOT_IMPLEMENTED:
		return not_implemented_handler(out);
 8002132:	6838      	ldr	r0, [r7, #0]
 8002134:	f7ff ffa6 	bl	8002084 <not_implemented_handler>
 8002138:	4603      	mov	r3, r0
 800213a:	e008      	b.n	800214e <error_handler+0x46>

	case HTTP_ERR_NOT_FOUND:
		return not_found_handler(out);
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f7ff ffb5 	bl	80020ac <not_found_handler>
 8002142:	4603      	mov	r3, r0
 8002144:	e003      	b.n	800214e <error_handler+0x46>

	default:
	case HTTP_ERR_BAD_REQUEST:
		return bad_request_handler(out);
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f7ff ff88 	bl	800205c <bad_request_handler>
 800214c:	4603      	mov	r3, r0
	}
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <http_root_path_handler>:

http_status_t http_root_path_handler(http_buffer_t *out)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_root_path_handler()\n");

	if (out == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <http_root_path_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 8002166:	2301      	movs	r3, #1
 8002168:	e026      	b.n	80021b8 <http_root_path_handler+0x60>
	}
	int content_len = strlen(HTTP_MAIN_PAGE_CONTENT_STR);
 800216a:	f240 53dd 	movw	r3, #1501	; 0x5dd
 800216e:	60fb      	str	r3, [r7, #12]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6858      	ldr	r0, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <http_root_path_handler+0x68>)
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	23c8      	movs	r3, #200	; 0xc8
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <http_root_path_handler+0x6c>)
 8002184:	f01f feda 	bl	8021f3c <sniprintf>
	int header_len = strlen(out->data);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f829 	bl	80001e4 <strlen>
 8002192:	4603      	mov	r3, r0
 8002194:	60bb      	str	r3, [r7, #8]
	if(out->length < header_len + content_len)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	440a      	add	r2, r1
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d201      	bcs.n	80021a8 <http_root_path_handler+0x50>
		return HTTP_ERR_BUF_OVERFLOW;
 80021a4:	2304      	movs	r3, #4
 80021a6:	e007      	b.n	80021b8 <http_root_path_handler+0x60>
	strncat(out->data, HTTP_MAIN_PAGE_CONTENT_STR, content_len);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4906      	ldr	r1, [pc, #24]	; (80021c8 <http_root_path_handler+0x70>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f01f ff88 	bl	80220c6 <strncat>
	return HTTP_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	08024f28 	.word	0x08024f28
 80021c4:	08024e54 	.word	0x08024e54
 80021c8:	08024f2c 	.word	0x08024f2c

080021cc <http_post_request_handler>:
/*
 * End of Weak functions
 * */

http_status_t http_post_request_handler(http_server_request_t *request)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_post_request_handler()\n");

	if (request == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <http_post_request_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 80021da:	2301      	movs	r3, #1
 80021dc:	e086      	b.n	80022ec <http_post_request_handler+0x120>
	}

	char action[sizeof("TOGGLE")];
	uint8_t number;
	bool LED[4] = {false, false, false, false};
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
	LED_action_t LED_action;

	char *token = strtok(request->content, "&");
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	331a      	adds	r3, #26
 80021e6:	4943      	ldr	r1, [pc, #268]	; (80022f4 <http_post_request_handler+0x128>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f01f ffbb 	bl	8022164 <strtok>
 80021ee:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 80021f0:	e05b      	b.n	80022aa <http_post_request_handler+0xde>
	{
		HTTP_DEBUG_PRINF("token : %s\n", token);

		if (sscanf(token, "LED%01u=EN", (unsigned int *)&number) > 0)
 80021f2:	f107 030f 	add.w	r3, r7, #15
 80021f6:	461a      	mov	r2, r3
 80021f8:	493f      	ldr	r1, [pc, #252]	; (80022f8 <http_post_request_handler+0x12c>)
 80021fa:	69b8      	ldr	r0, [r7, #24]
 80021fc:	f01f fef2 	bl	8021fe4 <siscanf>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	dd0d      	ble.n	8002222 <http_post_request_handler+0x56>
		{
			if (number > 2 && number < 7)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d90a      	bls.n	8002222 <http_post_request_handler+0x56>
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d807      	bhi.n	8002222 <http_post_request_handler+0x56>
			{
				LED[number - 3] = true;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3b03      	subs	r3, #3
 8002216:	f107 0220 	add.w	r2, r7, #32
 800221a:	4413      	add	r3, r2
 800221c:	2201      	movs	r2, #1
 800221e:	f803 2c18 	strb.w	r2, [r3, #-24]
			}
		}
		if (sscanf(token, "ACTION=%s", action) > 0)
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	461a      	mov	r2, r3
 8002228:	4934      	ldr	r1, [pc, #208]	; (80022fc <http_post_request_handler+0x130>)
 800222a:	69b8      	ldr	r0, [r7, #24]
 800222c:	f01f feda 	bl	8021fe4 <siscanf>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	dd34      	ble.n	80022a0 <http_post_request_handler+0xd4>
		{
			if (strncmp(action, "TOGGLE", strlen(action)) == 0)
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	4618      	mov	r0, r3
 800223c:	f7fd ffd2 	bl	80001e4 <strlen>
 8002240:	4602      	mov	r2, r0
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	492e      	ldr	r1, [pc, #184]	; (8002300 <http_post_request_handler+0x134>)
 8002248:	4618      	mov	r0, r3
 800224a:	f01f ff4f 	bl	80220ec <strncmp>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <http_post_request_handler+0x8e>
			{
				LED_action = LED_TOGGLE;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
 8002258:	e022      	b.n	80022a0 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "ON", strlen(action)) == 0)
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffc0 	bl	80001e4 <strlen>
 8002264:	4602      	mov	r2, r0
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4926      	ldr	r1, [pc, #152]	; (8002304 <http_post_request_handler+0x138>)
 800226c:	4618      	mov	r0, r3
 800226e:	f01f ff3d 	bl	80220ec <strncmp>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <http_post_request_handler+0xb2>
			{
				LED_action = LED_ON;
 8002278:	2301      	movs	r3, #1
 800227a:	77fb      	strb	r3, [r7, #31]
 800227c:	e010      	b.n	80022a0 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "OFF", strlen(action)) == 0)
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ffae 	bl	80001e4 <strlen>
 8002288:	4602      	mov	r2, r0
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	491e      	ldr	r1, [pc, #120]	; (8002308 <http_post_request_handler+0x13c>)
 8002290:	4618      	mov	r0, r3
 8002292:	f01f ff2b 	bl	80220ec <strncmp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <http_post_request_handler+0xd4>
			{
				LED_action = LED_OFF;
 800229c:	2302      	movs	r3, #2
 800229e:	77fb      	strb	r3, [r7, #31]
			}
		}
		token = strtok(NULL, "&");
 80022a0:	4914      	ldr	r1, [pc, #80]	; (80022f4 <http_post_request_handler+0x128>)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f01f ff5e 	bl	8022164 <strtok>
 80022a8:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1a0      	bne.n	80021f2 <http_post_request_handler+0x26>
	}

	switch(LED_action)
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d012      	beq.n	80022dc <http_post_request_handler+0x110>
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	dc16      	bgt.n	80022e8 <http_post_request_handler+0x11c>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <http_post_request_handler+0xf8>
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d006      	beq.n	80022d0 <http_post_request_handler+0x104>
	case LED_OFF:
		http_led_off_handler(LED);
		break;

	default:
		break;
 80022c2:	e011      	b.n	80022e8 <http_post_request_handler+0x11c>
		http_led_toggle_handler(LED);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f993 	bl	80015f4 <http_led_toggle_handler>
		break;
 80022ce:	e00c      	b.n	80022ea <http_post_request_handler+0x11e>
		http_led_on_handler(LED);
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f9b3 	bl	8001640 <http_led_on_handler>
		break;
 80022da:	e006      	b.n	80022ea <http_post_request_handler+0x11e>
		http_led_off_handler(LED);
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff f9d3 	bl	800168c <http_led_off_handler>
		break;
 80022e6:	e000      	b.n	80022ea <http_post_request_handler+0x11e>
		break;
 80022e8:	bf00      	nop
	}
	return HTTP_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0802550c 	.word	0x0802550c
 80022f8:	08025510 	.word	0x08025510
 80022fc:	0802551c 	.word	0x0802551c
 8002300:	08025528 	.word	0x08025528
 8002304:	08025530 	.word	0x08025530
 8002308:	08025534 	.word	0x08025534

0800230c <request_handler>:

static http_status_t request_handler(http_server_request_t *request, http_buffer_t *out)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("request_handler()\n");
	http_status_t status = HTTP_ERR_NOT_IMPLEMENTED;
 8002316:	230a      	movs	r3, #10
 8002318:	73fb      	strb	r3, [r7, #15]

	switch (request->command)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <request_handler+0x1c>
 8002322:	2b02      	cmp	r3, #2
 8002324:	d045      	beq.n	80023b2 <request_handler+0xa6>
			status = HTTP_ERR_BAD_REQUEST;
		}
		break;

	default:
		break;
 8002326:	e057      	b.n	80023d8 <request_handler+0xcc>
		if (strncmp(request->path, "/", strlen(request->path)) == 0)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1c5c      	adds	r4, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3301      	adds	r3, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7fd ff57 	bl	80001e4 <strlen>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	492a      	ldr	r1, [pc, #168]	; (80023e4 <request_handler+0xd8>)
 800233c:	4620      	mov	r0, r4
 800233e:	f01f fed5 	bl	80220ec <strncmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <request_handler+0x48>
			status = http_root_path_handler(out);
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f7ff ff05 	bl	8002158 <http_root_path_handler>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
		break;
 8002352:	e041      	b.n	80023d8 <request_handler+0xcc>
		else if (strncmp(request->path, "/temperature", strlen(request->path)) == 0)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1c5c      	adds	r4, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7fd ff41 	bl	80001e4 <strlen>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4920      	ldr	r1, [pc, #128]	; (80023e8 <request_handler+0xdc>)
 8002368:	4620      	mov	r0, r4
 800236a:	f01f febf 	bl	80220ec <strncmp>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <request_handler+0x74>
			status = http_temperature_path_handler(out);
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f7ff f811 	bl	800139c <http_temperature_path_handler>
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]
		break;
 800237e:	e02b      	b.n	80023d8 <request_handler+0xcc>
		else if (strncmp(request->path, "/humidity", strlen(request->path)) == 0)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	1c5c      	adds	r4, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3301      	adds	r3, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff2b 	bl	80001e4 <strlen>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4916      	ldr	r1, [pc, #88]	; (80023ec <request_handler+0xe0>)
 8002394:	4620      	mov	r0, r4
 8002396:	f01f fea9 	bl	80220ec <strncmp>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <request_handler+0xa0>
			status = http_humidity_path_handler(out);
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f7ff f891 	bl	80014c8 <http_humidity_path_handler>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
		break;
 80023aa:	e015      	b.n	80023d8 <request_handler+0xcc>
			status = HTTP_ERR_NOT_FOUND;
 80023ac:	230c      	movs	r3, #12
 80023ae:	73fb      	strb	r3, [r7, #15]
		break;
 80023b0:	e012      	b.n	80023d8 <request_handler+0xcc>
		if (request->content)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	331a      	adds	r3, #26
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <request_handler+0xc6>
			status = http_post_request_handler(request);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff06 	bl	80021cc <http_post_request_handler>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
			if (status == HTTP_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <request_handler+0xca>
				reset_content_handler(out);
 80023ca:	6838      	ldr	r0, [r7, #0]
 80023cc:	f7ff fe82 	bl	80020d4 <reset_content_handler>
		break;
 80023d0:	e001      	b.n	80023d6 <request_handler+0xca>
			status = HTTP_ERR_BAD_REQUEST;
 80023d2:	230b      	movs	r3, #11
 80023d4:	73fb      	strb	r3, [r7, #15]
		break;
 80023d6:	bf00      	nop
	}

	return status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	08025538 	.word	0x08025538
 80023e8:	0802553c 	.word	0x0802553c
 80023ec:	0802554c 	.word	0x0802554c

080023f0 <is_path_correct>:

static bool is_path_correct(const char *path)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	return (strncmp(path, "/", strlen(path)) == 0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7fd fef3 	bl	80001e4 <strlen>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	4914      	ldr	r1, [pc, #80]	; (8002454 <is_path_correct+0x64>)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f01f fe71 	bl	80220ec <strncmp>
 800240a:	4603      	mov	r3, r0
		|| strncmp(path, "/temperature", strlen(path)) == 0
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 800240c:	2b00      	cmp	r3, #0
 800240e:	d017      	beq.n	8002440 <is_path_correct+0x50>
		|| strncmp(path, "/temperature", strlen(path)) == 0
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fd fee7 	bl	80001e4 <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	490f      	ldr	r1, [pc, #60]	; (8002458 <is_path_correct+0x68>)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f01f fe65 	bl	80220ec <strncmp>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <is_path_correct+0x50>
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7fd fedb 	bl	80001e4 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	490a      	ldr	r1, [pc, #40]	; (800245c <is_path_correct+0x6c>)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f01f fe59 	bl	80220ec <strncmp>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <is_path_correct+0x54>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <is_path_correct+0x56>
 8002444:	2300      	movs	r3, #0
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	08025538 	.word	0x08025538
 8002458:	0802553c 	.word	0x0802553c
 800245c:	0802554c 	.word	0x0802554c

08002460 <is_command_implemented>:

static bool is_command_implemented(http_command_t command)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	return (command == HTTP_GET
			|| command == HTTP_POST);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <is_command_implemented+0x16>
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d101      	bne.n	800247a <is_command_implemented+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <is_command_implemented+0x1c>
 800247a:	2300      	movs	r3, #0
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <is_version_correct>:

static bool is_version_correct(const char *version)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	return (strncmp(version, HTTP_VERSION_STR, strlen(version)) == 0);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fd fea3 	bl	80001e4 <strlen>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4907      	ldr	r1, [pc, #28]	; (80024c0 <is_version_correct+0x30>)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f01f fe21 	bl	80220ec <strncmp>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	08025558 	.word	0x08025558

080024c4 <send_answer>:

static int send_answer(int sock, http_buffer_t *out)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	int len = strlen(out->data);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe86 	bl	80001e4 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
	if (send(sock, out->data, len, 0) < 0)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f00e ff37 	bl	8011358 <lwip_send>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da05      	bge.n	80024fc <send_answer+0x38>
	{
		printf("send() error\n");
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <send_answer+0x44>)
 80024f2:	f01f fc61 	bl	8021db8 <puts>
		return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fa:	e000      	b.n	80024fe <send_answer+0x3a>
	}
	return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	08025564 	.word	0x08025564

0800250c <http_server_handler>:

http_status_t http_server_handler(int sock)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b0a0      	sub	sp, #128	; 0x80
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	int nbytes;
	http_status_t status = HTTP_ERR_RCV_TIMEOUT;
 8002514:	2309      	movs	r3, #9
 8002516:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	http_server_request_t request;
	http_buffer_t in;
	http_buffer_t out;

	if (sock < 0) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	da01      	bge.n	8002524 <http_server_handler+0x18>
		return HTTP_ERR_INVAL;
 8002520:	2302      	movs	r3, #2
 8002522:	e0a9      	b.n	8002678 <http_server_handler+0x16c>
	}

	in.length = MAX_IN_PACKET_LENGTH;
 8002524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002528:	617b      	str	r3, [r7, #20]
	in.data = malloc(in.length);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	4618      	mov	r0, r3
 800252e:	f01e fe5b 	bl	80211e8 <malloc>
 8002532:	4603      	mov	r3, r0
 8002534:	61bb      	str	r3, [r7, #24]
	if (in.data == NULL)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <http_server_handler+0x34>
	{
		return HTTP_ERR_FAULT;
 800253c:	2301      	movs	r3, #1
 800253e:	e09b      	b.n	8002678 <http_server_handler+0x16c>
	}

	out.length = MAX_OUT_PACKET_LENGTH;
 8002540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002544:	60fb      	str	r3, [r7, #12]
	out.data = malloc(out.length);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	f01e fe4d 	bl	80211e8 <malloc>
 800254e:	4603      	mov	r3, r0
 8002550:	613b      	str	r3, [r7, #16]
	if (out.data == NULL)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <http_server_handler+0x58>
	{
		free(in.data);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4618      	mov	r0, r3
 800255c:	f01e fe4c 	bl	80211f8 <free>
		return HTTP_ERR_FAULT;
 8002560:	2301      	movs	r3, #1
 8002562:	e089      	b.n	8002678 <http_server_handler+0x16c>
	}
	memset(in.data, 0, in.length);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f01e fe82 	bl	8021274 <memset>
	memset(out.data, 0, out.length);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f01e fe7c 	bl	8021274 <memset>

	if ( (nbytes = recv(sock, in.data, in.length, 0)) > 0 )
 800257c:	69b9      	ldr	r1, [r7, #24]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	2300      	movs	r3, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f00e fed2 	bl	801132c <lwip_recv>
 8002588:	67b8      	str	r0, [r7, #120]	; 0x78
 800258a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258c:	2b00      	cmp	r3, #0
 800258e:	dd5f      	ble.n	8002650 <http_server_handler+0x144>
	{
		status = parse_payload((const char *)in.data, &request);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f107 021c 	add.w	r2, r7, #28
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fcc3 	bl	8001f24 <parse_payload>
 800259e:	4603      	mov	r3, r0
 80025a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		if (status != HTTP_OK)
 80025a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <http_server_handler+0xac>
		{
			HTTP_DEBUG_PRINF("parse_payload() error: %d\n", status);
			bad_request_handler(&out);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd53 	bl	800205c <bad_request_handler>
			goto error_exit;
 80025b6:	e04c      	b.n	8002652 <http_server_handler+0x146>
		}
		if (!is_command_implemented(request.command))
 80025b8:	7f3b      	ldrb	r3, [r7, #28]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff50 	bl	8002460 <is_command_implemented>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <http_server_handler+0xcc>
		{
			HTTP_DEBUG_PRINF("command not implemented\n");
			not_implemented_handler(&out);
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fd57 	bl	8002084 <not_implemented_handler>
			goto error_exit;
 80025d6:	e03c      	b.n	8002652 <http_server_handler+0x146>
		}
		if (!is_path_correct((const char *)request.path))
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	3301      	adds	r3, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff06 	bl	80023f0 <is_path_correct>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f083 0301 	eor.w	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <http_server_handler+0xf0>
		{
			HTTP_DEBUG_PRINF("requested path not found\n");
			not_found_handler(&out);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fd59 	bl	80020ac <not_found_handler>
			goto error_exit;
 80025fa:	e02a      	b.n	8002652 <http_server_handler+0x146>
		}
		if (!is_version_correct((const char *)request.version))
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	3311      	adds	r3, #17
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff44 	bl	8002490 <is_version_correct>
 8002608:	4603      	mov	r3, r0
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <http_server_handler+0x114>
		{
			HTTP_DEBUG_PRINF("wrong protocol version: %s\n",request.version);
			bad_request_handler(&out);
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd1f 	bl	800205c <bad_request_handler>
			goto error_exit;
 800261e:	e018      	b.n	8002652 <http_server_handler+0x146>
		}
		// if everything is OK
		status = request_handler(&request, &out);
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe6e 	bl	800230c <request_handler>
 8002630:	4603      	mov	r3, r0
 8002632:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status != HTTP_OK)
 8002636:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <http_server_handler+0x144>
		{
			error_handler(status, &out);
 800263e:	f107 020c 	add.w	r2, r7, #12
 8002642:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fd5d 	bl	8002108 <error_handler>
 800264e:	e000      	b.n	8002652 <http_server_handler+0x146>
		}
	}
error_exit:
 8002650:	bf00      	nop
	send_answer(sock, &out);
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff33 	bl	80024c4 <send_answer>
	close(sock);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f00e fa24 	bl	8010aac <lwip_close>

	free(in.data);
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4618      	mov	r0, r3
 8002668:	f01e fdc6 	bl	80211f8 <free>
	free(out.data);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4618      	mov	r0, r3
 8002670:	f01e fdc2 	bl	80211f8 <free>

	return status;
 8002674:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002678:	4618      	mov	r0, r3
 800267a:	3780      	adds	r7, #128	; 0x80
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_MspInit+0x54>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_MspInit+0x54>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_MspInit+0x54>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_MspInit+0x54>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_MspInit+0x54>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_MspInit+0x54>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	210f      	movs	r1, #15
 80026c2:	f06f 0001 	mvn.w	r0, #1
 80026c6:	f003 f941 	bl	800594c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_I2C_MspInit+0x94>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d134      	bne.n	8002764 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_I2C_MspInit+0x98>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_I2C_MspInit+0x98>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_I2C_MspInit+0x98>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002716:	f44f 7310 	mov.w	r3, #576	; 0x240
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800271c:	2312      	movs	r3, #18
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002728:	2304      	movs	r3, #4
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4810      	ldr	r0, [pc, #64]	; (8002774 <HAL_I2C_MspInit+0x9c>)
 8002734:	f003 f964 	bl	8005a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_I2C_MspInit+0x98>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <HAL_I2C_MspInit+0x98>)
 8002742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_I2C_MspInit+0x98>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2105      	movs	r1, #5
 8002758:	201f      	movs	r0, #31
 800275a:	f003 f8f7 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800275e:	201f      	movs	r0, #31
 8002760:	f003 f910 	bl	8005984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40005400 	.word	0x40005400
 8002770:	40023800 	.word	0x40023800
 8002774:	40020400 	.word	0x40020400

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_UART_MspInit+0x84>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12c      	bne.n	80027f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 80027d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e4:	2307      	movs	r3, #7
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4619      	mov	r1, r3
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <HAL_UART_MspInit+0x8c>)
 80027f0:	f003 f906 	bl	8005a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40004800 	.word	0x40004800
 8002800:	40023800 	.word	0x40023800
 8002804:	40020c00 	.word	0x40020c00

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002818:	2200      	movs	r2, #0
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	2019      	movs	r0, #25
 800281e:	f003 f895 	bl	800594c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002822:	2019      	movs	r0, #25
 8002824:	f003 f8ae 	bl	8005984 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_InitTick+0xa4>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_InitTick+0xa4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_InitTick+0xa4>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f006 fb78 	bl	8008f44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002854:	f006 fb62 	bl	8008f1c <HAL_RCC_GetPCLK2Freq>
 8002858:	4603      	mov	r3, r0
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_InitTick+0xa8>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	3b01      	subs	r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_InitTick+0xac>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_InitTick+0xb0>)
 8002870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_InitTick+0xac>)
 8002874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002878:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_InitTick+0xac>)
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_InitTick+0xac>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_InitTick+0xac>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800288c:	4809      	ldr	r0, [pc, #36]	; (80028b4 <HAL_InitTick+0xac>)
 800288e:	f006 fb8b 	bl	8008fa8 <HAL_TIM_Base_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <HAL_InitTick+0xac>)
 800289a:	f006 fbdf 	bl	800905c <HAL_TIM_Base_Start_IT>
 800289e:	4603      	mov	r3, r0
 80028a0:	e000      	b.n	80028a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3730      	adds	r7, #48	; 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	200145d8 	.word	0x200145d8
 80028b8:	40010000 	.word	0x40010000

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f003 fb6b 	bl	8005fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80028fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028fe:	f003 fb63 	bl	8005fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800290e:	f006 fc15 	bl	800913c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200145d8 	.word	0x200145d8

0800291c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <I2C1_EV_IRQHandler+0x10>)
 8002922:	f003 ffd1 	bl	80068c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2001457c 	.word	0x2001457c

08002930 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <ETH_IRQHandler+0x10>)
 8002936:	f002 f929 	bl	8004b8c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20015f48 	.word	0x20015f48

08002944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_kill>:

int _kill(int pid, int sig)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <_kill+0x20>)
 8002960:	2216      	movs	r2, #22
 8002962:	601a      	str	r2, [r3, #0]
	return -1;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	2001b1ec 	.word	0x2001b1ec

08002978 <_exit>:

void _exit (int status)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ffe5 	bl	8002954 <_kill>
	while (1) {}		/* Make sure we hang here */
 800298a:	e7fe      	b.n	800298a <_exit+0x12>

0800298c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e00a      	b.n	80029b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800299e:	f3af 8000 	nop.w
 80029a2:	4601      	mov	r1, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	60ba      	str	r2, [r7, #8]
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbf0      	blt.n	800299e <_read+0x12>
	}

return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e009      	b.n	80029ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fcc9 	bl	8001378 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf1      	blt.n	80029d8 <_write+0x12>
	}
	return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_close>:

int _close(int file)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
	return -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a26:	605a      	str	r2, [r3, #4]
	return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_isatty>:

int _isatty(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
	return 0;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <_sbrk+0x5c>)
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <_sbrk+0x60>)
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <_sbrk+0x64>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <_sbrk+0x68>)
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d205      	bcs.n	8002aa4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <_sbrk+0x6c>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa2:	e009      	b.n	8002ab8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <_sbrk+0x64>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a06      	ldr	r2, [pc, #24]	; (8002acc <_sbrk+0x64>)
 8002ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	20020000 	.word	0x20020000
 8002ac8:	00000400 	.word	0x00000400
 8002acc:	20000260 	.word	0x20000260
 8002ad0:	2001b200 	.word	0x2001b200
 8002ad4:	2001b1ec 	.word	0x2001b1ec

08002ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <SystemInit+0x20>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <SystemInit+0x20>)
 8002ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <StartTcpClientTask>:

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address);
static int connect_server(const struct sockaddr_in *address);

void StartTcpClientTask(void const * argument)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    osEvent event;

    for(;;)
    {
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f007 fe98 	bl	800a844 <osSignalWait>

         if (event.status == osEventSignal)  {
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d1f4      	bne.n	8002b04 <StartTcpClientTask+0x8>
        	TCP_CLIENT_PRINTF("osSignalWait() received event\n");
 			BSP_LED_Off(GREEN);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f001 f8b6 	bl	8003c8c <BSP_LED_Off>
			if (resolve_address(SERVER, PORTNUM, &serv_addr) != STATUS_OK)
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <StartTcpClientTask+0xd4>)
 8002b22:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002b26:	482b      	ldr	r0, [pc, #172]	; (8002bd4 <StartTcpClientTask+0xd8>)
 8002b28:	f000 f85c 	bl	8002be4 <resolve_address>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <StartTcpClientTask+0x3e>
			{
		    	BSP_LED_On(ORANGE);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f001 f890 	bl	8003c58 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("resolve_address() error\n");
				continue;
 8002b38:	e048      	b.n	8002bcc <StartTcpClientTask+0xd0>
			}

			sock_fd = connect_server((const struct sockaddr_in *)&serv_addr);
 8002b3a:	4825      	ldr	r0, [pc, #148]	; (8002bd0 <StartTcpClientTask+0xd4>)
 8002b3c:	f000 f88f 	bl	8002c5e <connect_server>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b44:	6013      	str	r3, [r2, #0]
			if (sock_fd == STATUS_ERROR)
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4e:	d103      	bne.n	8002b58 <StartTcpClientTask+0x5c>
			{
		    	BSP_LED_On(ORANGE);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f001 f881 	bl	8003c58 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("connect_server() error\n");
				continue;
 8002b56:	e039      	b.n	8002bcc <StartTcpClientTask+0xd0>
			}

			const char *message = "This is a Ping-Pong message";
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <StartTcpClientTask+0xe0>)
 8002b5a:	61fb      	str	r3, [r7, #28]
			if (send(sock_fd, message, strlen(message), 0) < 0)
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b5e:	681c      	ldr	r4, [r3, #0]
 8002b60:	69f8      	ldr	r0, [r7, #28]
 8002b62:	f7fd fb3f 	bl	80001e4 <strlen>
 8002b66:	4602      	mov	r2, r0
 8002b68:	2300      	movs	r3, #0
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f00e fbf3 	bl	8011358 <lwip_send>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da08      	bge.n	8002b8a <StartTcpClientTask+0x8e>
			{
		    	BSP_LED_On(ORANGE);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f001 f86d 	bl	8003c58 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("send() error\n");
				close(sock_fd);
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f00d ff92 	bl	8010aac <lwip_close>
				continue;
 8002b88:	e020      	b.n	8002bcc <StartTcpClientTask+0xd0>
			}

			int received;
			if( (received = recv(sock_fd, buf, sizeof(buf), 0)) < 0) {
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2250      	movs	r2, #80	; 0x50
 8002b92:	4913      	ldr	r1, [pc, #76]	; (8002be0 <StartTcpClientTask+0xe4>)
 8002b94:	f00e fbca 	bl	801132c <lwip_recv>
 8002b98:	61b8      	str	r0, [r7, #24]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da08      	bge.n	8002bb2 <StartTcpClientTask+0xb6>
		    	BSP_LED_On(ORANGE);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f001 f859 	bl	8003c58 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("recv() error\n");
		        close(sock_fd);
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f00d ff7e 	bl	8010aac <lwip_close>
		        continue;
 8002bb0:	e00c      	b.n	8002bcc <StartTcpClientTask+0xd0>
		    }
			buf[received] = 0;
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <StartTcpClientTask+0xe4>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]

			TCP_CLIENT_PRINTF("Received from server : %s\n", buf);
			BSP_LED_Off(ORANGE);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f001 f865 	bl	8003c8c <BSP_LED_Off>

			close(sock_fd);
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00d ff70 	bl	8010aac <lwip_close>
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002bcc:	e79a      	b.n	8002b04 <StartTcpClientTask+0x8>
 8002bce:	bf00      	nop
 8002bd0:	20000264 	.word	0x20000264
 8002bd4:	08025574 	.word	0x08025574
 8002bd8:	20000274 	.word	0x20000274
 8002bdc:	08025584 	.word	0x08025584
 8002be0:	20000278 	.word	0x20000278

08002be4 <resolve_address>:
         }
    }
}

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	460b      	mov	r3, r1
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	817b      	strh	r3, [r7, #10]
	if (server == NULL || address == NULL )	{
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <resolve_address+0x1a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <resolve_address+0x20>
		TCP_CLIENT_PRINTF("resolve_address() argument error\n");
        return STATUS_ERROR;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c02:	e028      	b.n	8002c56 <resolve_address+0x72>
	}
	struct hostent *hp;
    if((hp = gethostbyname(server))== NULL) {
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f00d fc4b 	bl	80104a0 <lwip_gethostbyname>
 8002c0a:	6178      	str	r0, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <resolve_address+0x34>
    	TCP_CLIENT_PRINTF("gethostbyname() error\n");
        return STATUS_ERROR;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c16:	e01e      	b.n	8002c56 <resolve_address+0x72>
    }

    bzero(address, sizeof(*address));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	6053      	str	r3, [r2, #4]
 8002c22:	6093      	str	r3, [r2, #8]
 8002c24:	60d3      	str	r3, [r2, #12]
    bcopy(hp->h_addr, &address->sin_addr, hp->h_length);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1d18      	adds	r0, r3, #4
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	461a      	mov	r2, r3
 8002c36:	f01e fb03 	bl	8021240 <memmove>

    address->sin_family = hp->h_addrtype;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	705a      	strb	r2, [r3, #1]
    address->sin_port = htons(port);
 8002c44:	897b      	ldrh	r3, [r7, #10]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00f fbc8 	bl	80123dc <lwip_htons>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	805a      	strh	r2, [r3, #2]
    return STATUS_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <connect_server>:

static int connect_server(const struct sockaddr_in *address)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
	if (address == NULL) {
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <connect_server+0x14>
		TCP_CLIENT_PRINTF("connect_server() argument error\n");
        return STATUS_ERROR;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c70:	e01c      	b.n	8002cac <connect_server+0x4e>
	}
	int sock;
    if((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){
 8002c72:	2200      	movs	r2, #0
 8002c74:	2101      	movs	r1, #1
 8002c76:	2002      	movs	r0, #2
 8002c78:	f00e fc7e 	bl	8011578 <lwip_socket>
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c84:	d102      	bne.n	8002c8c <connect_server+0x2e>
    	TCP_CLIENT_PRINTF("socket() error\n");
        return STATUS_ERROR;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	e00f      	b.n	8002cac <connect_server+0x4e>
    }

    TCP_CLIENT_PRINTF("Server address is %s\n", inet_ntoa(address->sin_addr));

    if(connect(sock, (struct sockaddr *)address, sizeof(*address)) == -1) {
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f00d ff61 	bl	8010b58 <lwip_connect>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c9c:	d105      	bne.n	8002caa <connect_server+0x4c>
    	TCP_CLIENT_PRINTF("connect() error\n");
        close(sock);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f00d ff04 	bl	8010aac <lwip_close>
        return STATUS_ERROR;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca8:	e000      	b.n	8002cac <connect_server+0x4e>
    }
    return sock;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <tcpServerInit>:
#define THREAD_MUTEX_UNLOCK()	osMutexRelease(thread_mutex_id)
#define PRINTF_MUTEX_LOCK() 	osMutexWait (printf_mutex_id, osWaitForever)
#define PRINTF_MUTEX_UNLOCK()	osMutexRelease(printf_mutex_id)

static int tcpServerInit(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	socket_fd = socket(AF_INET, SOCK_STREAM, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f00e fc5b 	bl	8011578 <lwip_socket>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <tcpServerInit+0xc8>)
 8002cc6:	6013      	str	r3, [r2, #0]
	if (socket_fd == -1) {
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <tcpServerInit+0xc8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd0:	d102      	bne.n	8002cd8 <tcpServerInit+0x24>
		TCP_SERVER_PRINTF("socket() error\n");
		return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd6:	e04e      	b.n	8002d76 <tcpServerInit+0xc2>
	}

	nport = PORTNUM;
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <tcpServerInit+0xcc>)
 8002cda:	2250      	movs	r2, #80	; 0x50
 8002cdc:	801a      	strh	r2, [r3, #0]
	nport = htons((uint16_t)nport);
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <tcpServerInit+0xcc>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f00f fb7a 	bl	80123dc <lwip_htons>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <tcpServerInit+0xcc>)
 8002cee:	801a      	strh	r2, [r3, #0]

	bzero(&serv_addr, sizeof(serv_addr));
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <tcpServerInit+0xd0>)
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	6053      	str	r3, [r2, #4]
 8002cfa:	6093      	str	r3, [r2, #8]
 8002cfc:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <tcpServerInit+0xd0>)
 8002d00:	2202      	movs	r2, #2
 8002d02:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <tcpServerInit+0xd0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = nport;
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <tcpServerInit+0xcc>)
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <tcpServerInit+0xd0>)
 8002d10:	805a      	strh	r2, [r3, #2]

	if(bind(socket_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <tcpServerInit+0xc8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2210      	movs	r2, #16
 8002d18:	491a      	ldr	r1, [pc, #104]	; (8002d84 <tcpServerInit+0xd0>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00d fe58 	bl	80109d0 <lwip_bind>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d26:	d107      	bne.n	8002d38 <tcpServerInit+0x84>
		TCP_SERVER_PRINTF("bind() error\n");
		close(socket_fd);
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <tcpServerInit+0xc8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f00d febd 	bl	8010aac <lwip_close>
		return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d36:	e01e      	b.n	8002d76 <tcpServerInit+0xc2>
	}

	if(listen(socket_fd, 5) == -1) {
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <tcpServerInit+0xc8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00d ff8a 	bl	8010c58 <lwip_listen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d107      	bne.n	8002d5c <tcpServerInit+0xa8>
		TCP_SERVER_PRINTF("listen() error\n");
		close(socket_fd);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <tcpServerInit+0xc8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f00d feab 	bl	8010aac <lwip_close>
		return -1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d5a:	e00c      	b.n	8002d76 <tcpServerInit+0xc2>
	}
	TCP_SERVER_PRINTF("Server is ready\n");

	thread_mutex_id = osMutexCreate (osMutex (thread_mutex));
 8002d5c:	480a      	ldr	r0, [pc, #40]	; (8002d88 <tcpServerInit+0xd4>)
 8002d5e:	f007 fdbd 	bl	800a8dc <osMutexCreate>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <tcpServerInit+0xd8>)
 8002d66:	6013      	str	r3, [r2, #0]
	printf_mutex_id = osMutexCreate (osMutex (printf_mutex));
 8002d68:	4809      	ldr	r0, [pc, #36]	; (8002d90 <tcpServerInit+0xdc>)
 8002d6a:	f007 fdb7 	bl	800a8dc <osMutexCreate>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <tcpServerInit+0xe0>)
 8002d72:	6013      	str	r3, [r2, #0]

	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200002e8 	.word	0x200002e8
 8002d80:	200002ec 	.word	0x200002ec
 8002d84:	200002c8 	.word	0x200002c8
 8002d88:	080298f4 	.word	0x080298f4
 8002d8c:	20014620 	.word	0x20014620
 8002d90:	080298f8 	.word	0x080298f8
 8002d94:	20014624 	.word	0x20014624

08002d98 <StartTcpServerTask>:

void StartTcpServerTask(void const * argument)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    int accept_fd;
	int addr_len;
	size_t i = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

	osDelay(5000);// wait 5 sec to init lwip stack
 8002da4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002da8:	f007 fcf7 	bl	800a79a <osDelay>

	if(tcpServerInit() < 0) {
 8002dac:	f7ff ff82 	bl	8002cb4 <tcpServerInit>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db7d      	blt.n	8002eb2 <StartTcpServerTask+0x11a>
		return;
	}

	for(;;)
	{
		  bzero(&client_addr, sizeof(client_addr));
 8002db6:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <StartTcpServerTask+0x124>)
 8002db8:	461a      	mov	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	6053      	str	r3, [r2, #4]
 8002dc0:	6093      	str	r3, [r2, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
		  addr_len = sizeof(client_addr);
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	60fb      	str	r3, [r7, #12]

		  accept_fd = accept(socket_fd, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <StartTcpServerTask+0x128>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f107 020c 	add.w	r2, r7, #12
 8002dd0:	493a      	ldr	r1, [pc, #232]	; (8002ebc <StartTcpServerTask+0x124>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f00d fcde 	bl	8010794 <lwip_accept>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	613b      	str	r3, [r7, #16]

		  if (accept_fd == -1) {
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de2:	d10c      	bne.n	8002dfe <StartTcpServerTask+0x66>
			  PRINTF_MUTEX_LOCK();
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dec:	4618      	mov	r0, r3
 8002dee:	f007 fd81 	bl	800a8f4 <osMutexWait>
			  TCP_SERVER_PRINTF("accept() error\n");
			  PRINTF_MUTEX_UNLOCK();
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f007 fdca 	bl	800a990 <osMutexRelease>
			  continue;
 8002dfc:	e058      	b.n	8002eb0 <StartTcpServerTask+0x118>
		  }

		  PRINTF_MUTEX_LOCK();
 8002dfe:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e06:	4618      	mov	r0, r3
 8002e08:	f007 fd74 	bl	800a8f4 <osMutexWait>
		  TCP_SERVER_PRINTF("Client: %s\n", inet_ntoa(client_addr.sin_addr));
		  TCP_SERVER_PRINTF("fd: %d\n", accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f007 fdbd 	bl	800a990 <osMutexRelease>

		  THREAD_MUTEX_LOCK();
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <StartTcpServerTask+0x130>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f007 fd68 	bl	800a8f4 <osMutexWait>

		  if (ThreadId[i] != NULL) {
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <StartTcpServerTask+0xc8>
			  osThreadTerminate(ThreadId[i]);
 8002e30:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f007 fca2 	bl	800a782 <osThreadTerminate>

			  ThreadId[i] = NULL;
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2100      	movs	r1, #0
 8002e44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  PRINTF_MUTEX_LOCK();
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e50:	4618      	mov	r0, r3
 8002e52:	f007 fd4f 	bl	800a8f4 <osMutexWait>
			  TCP_SERVER_PRINTF("(1)Thread[%d] %p terminated\n",i, ThreadId[i]);
			  PRINTF_MUTEX_UNLOCK();
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f007 fd98 	bl	800a990 <osMutexRelease>
		  }
		  //create a new thread
		  ThreadId[i] = osThreadCreate (Servers[i], &accept_fd);
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <StartTcpServerTask+0x138>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	f107 0210 	add.w	r2, r7, #16
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f007 fc59 	bl	800a726 <osThreadCreate>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4915      	ldr	r1, [pc, #84]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  PRINTF_MUTEX_LOCK();
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e86:	4618      	mov	r0, r3
 8002e88:	f007 fd34 	bl	800a8f4 <osMutexWait>
		  TCP_SERVER_PRINTF("(1)Thread[%d] %p (fd = %d) created\n",i, ThreadId[i], accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f007 fd7d 	bl	800a990 <osMutexRelease>

		  if (++i > 4) {
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d901      	bls.n	8002ea6 <StartTcpServerTask+0x10e>
			  i = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
		  }

		  THREAD_MUTEX_UNLOCK();
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <StartTcpServerTask+0x130>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f007 fd70 	bl	800a990 <osMutexRelease>
		  bzero(&client_addr, sizeof(client_addr));
 8002eb0:	e781      	b.n	8002db6 <StartTcpServerTask+0x1e>
		return;
 8002eb2:	bf00      	nop

	}
}
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200002d8 	.word	0x200002d8
 8002ec0:	200002e8 	.word	0x200002e8
 8002ec4:	20014624 	.word	0x20014624
 8002ec8:	20014620 	.word	0x20014620
 8002ecc:	200002f0 	.word	0x200002f0
 8002ed0:	20000014 	.word	0x20000014

08002ed4 <ServerThread>:

void ServerThread(void const * argument)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	int accept_fd = *((int *)argument);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	613b      	str	r3, [r7, #16]

	PRINTF_MUTEX_LOCK();
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <ServerThread+0xb8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eea:	4618      	mov	r0, r3
 8002eec:	f007 fd02 	bl	800a8f4 <osMutexWait>
	TCP_SERVER_PRINTF("(2)Thread (fd = %d) started\n", accept_fd);
	PRINTF_MUTEX_UNLOCK();
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <ServerThread+0xb8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f007 fd4b 	bl	800a990 <osMutexRelease>

#if defined(USE_HTTP_SERVER) || !defined(USE_TCP_SERVER)
		PRINTF_MUTEX_LOCK();
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <ServerThread+0xb8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f02:	4618      	mov	r0, r3
 8002f04:	f007 fcf6 	bl	800a8f4 <osMutexWait>
		http_status_t status = http_server_handler(accept_fd);
 8002f08:	6938      	ldr	r0, [r7, #16]
 8002f0a:	f7ff faff 	bl	800250c <http_server_handler>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
		if (status != HTTP_OK)
		{
			TCP_SERVER_PRINTF("http_server_handler() error: %d\n", status);
		}
		PRINTF_MUTEX_UNLOCK();
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <ServerThread+0xb8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f007 fd3a 	bl	800a990 <osMutexRelease>
			}
		}
		close(accept_fd);
#endif

		osThreadId id = osThreadGetId ();
 8002f1c:	f007 fc2a 	bl	800a774 <osThreadGetId>
 8002f20:	60b8      	str	r0, [r7, #8]

		THREAD_MUTEX_LOCK();
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <ServerThread+0xbc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f007 fce2 	bl	800a8f4 <osMutexWait>

		for(size_t i = 0; i < 5; i++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e01b      	b.n	8002f6e <ServerThread+0x9a>
		{
		  if (ThreadId[i] == id) {
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <ServerThread+0xc0>)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d111      	bne.n	8002f68 <ServerThread+0x94>

			  PRINTF_MUTEX_LOCK();
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <ServerThread+0xb8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f007 fcd1 	bl	800a8f4 <osMutexWait>
			  TCP_SERVER_PRINTF("(2)Thread[%d] %p (fd = %d) finished\n", i, ThreadId[i], accept_fd);
			  PRINTF_MUTEX_UNLOCK();
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <ServerThread+0xb8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f007 fd1a 	bl	800a990 <osMutexRelease>

			  ThreadId[i] = NULL;
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <ServerThread+0xc0>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2100      	movs	r1, #0
 8002f62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  break;
 8002f66:	e005      	b.n	8002f74 <ServerThread+0xa0>
		for(size_t i = 0; i < 5; i++)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d9e0      	bls.n	8002f36 <ServerThread+0x62>
		  }
		}

		THREAD_MUTEX_UNLOCK();
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <ServerThread+0xbc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f007 fd09 	bl	800a990 <osMutexRelease>

		osThreadTerminate(NULL);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f007 fbff 	bl	800a782 <osThreadTerminate>
}
 8002f84:	bf00      	nop
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20014624 	.word	0x20014624
 8002f90:	20014620 	.word	0x20014620
 8002f94:	200002f0 	.word	0x200002f0

08002f98 <ReadPin>:
		PIN13_GPIO_PORT,
		PIN14_GPIO_PORT,
		PIN15_GPIO_PORT
};
bool ReadPin(PIN_TypeDef Pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(G_PORT[Pin], G_PIN[Pin]);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <ReadPin+0x38>)
 8002fa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4909      	ldr	r1, [pc, #36]	; (8002fd4 <ReadPin+0x3c>)
 8002fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f002 ffbb 	bl	8005f30 <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000028 	.word	0x20000028
 8002fd4:	080298fc 	.word	0x080298fc

08002fd8 <udpServerInit>:

static int udpServerInit(uint16_t portnum)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
	uint16_t port;
	int fd = socket(AF_INET, SOCK_DGRAM, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f00e fac6 	bl	8011578 <lwip_socket>
 8002fec:	60f8      	str	r0, [r7, #12]
	if (fd == -1) {
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff4:	d10a      	bne.n	800300c <udpServerInit+0x34>
		UDP_SERVER_PRINTF("socket() error\n");
 8002ff6:	2250      	movs	r2, #80	; 0x50
 8002ff8:	4922      	ldr	r1, [pc, #136]	; (8003084 <udpServerInit+0xac>)
 8002ffa:	4823      	ldr	r0, [pc, #140]	; (8003088 <udpServerInit+0xb0>)
 8002ffc:	f01e fe56 	bl	8021cac <iprintf>
 8003000:	4822      	ldr	r0, [pc, #136]	; (800308c <udpServerInit+0xb4>)
 8003002:	f01e fed9 	bl	8021db8 <puts>
		return -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300a:	e037      	b.n	800307c <udpServerInit+0xa4>
	}

	port = htons((uint16_t)portnum);
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	4618      	mov	r0, r3
 8003010:	f00f f9e4 	bl	80123dc <lwip_htons>
 8003014:	4603      	mov	r3, r0
 8003016:	817b      	strh	r3, [r7, #10]

	bzero(&serv_addr, sizeof(serv_addr));
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <udpServerInit+0xb8>)
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	6053      	str	r3, [r2, #4]
 8003022:	6093      	str	r3, [r2, #8]
 8003024:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <udpServerInit+0xb8>)
 8003028:	2202      	movs	r2, #2
 800302a:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <udpServerInit+0xb8>)
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = port;
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <udpServerInit+0xb8>)
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	8053      	strh	r3, [r2, #2]

	if(bind(fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 8003038:	2210      	movs	r2, #16
 800303a:	4915      	ldr	r1, [pc, #84]	; (8003090 <udpServerInit+0xb8>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f00d fcc7 	bl	80109d0 <lwip_bind>
 8003042:	4603      	mov	r3, r0
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003048:	d10d      	bne.n	8003066 <udpServerInit+0x8e>
		UDP_SERVER_PRINTF("bind() error\n");
 800304a:	225d      	movs	r2, #93	; 0x5d
 800304c:	490d      	ldr	r1, [pc, #52]	; (8003084 <udpServerInit+0xac>)
 800304e:	480e      	ldr	r0, [pc, #56]	; (8003088 <udpServerInit+0xb0>)
 8003050:	f01e fe2c 	bl	8021cac <iprintf>
 8003054:	480f      	ldr	r0, [pc, #60]	; (8003094 <udpServerInit+0xbc>)
 8003056:	f01e feaf 	bl	8021db8 <puts>
		close(fd);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f00d fd26 	bl	8010aac <lwip_close>
		return -1;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003064:	e00a      	b.n	800307c <udpServerInit+0xa4>
	}

	UDP_SERVER_PRINTF("UDP Server is bound to port %d\n", portnum);
 8003066:	2262      	movs	r2, #98	; 0x62
 8003068:	4906      	ldr	r1, [pc, #24]	; (8003084 <udpServerInit+0xac>)
 800306a:	4807      	ldr	r0, [pc, #28]	; (8003088 <udpServerInit+0xb0>)
 800306c:	f01e fe1e 	bl	8021cac <iprintf>
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4619      	mov	r1, r3
 8003074:	4808      	ldr	r0, [pc, #32]	; (8003098 <udpServerInit+0xc0>)
 8003076:	f01e fe19 	bl	8021cac <iprintf>

	return fd;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	08029904 	.word	0x08029904
 8003088:	080255c8 	.word	0x080255c8
 800308c:	080255e4 	.word	0x080255e4
 8003090:	20000304 	.word	0x20000304
 8003094:	080255f4 	.word	0x080255f4
 8003098:	08025604 	.word	0x08025604

0800309c <led_command_handler>:
	COMMAND_ERR_VALUE_PWM = -10,
	COMMAND_OK = 0
}command_error_t;

static command_error_t led_command_handler(const uint8_t * buffer, size_t len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	int num;
	char cmd[sizeof("toggle")];
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 80030a6:	4b35      	ldr	r3, [pc, #212]	; (800317c <led_command_handler+0xe0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]

	if(buffer == NULL || len == 0 || len > CMD_BUFFER_MAX_LEN)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <led_command_handler+0x22>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <led_command_handler+0x22>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d902      	bls.n	80030c4 <led_command_handler+0x28>
	{
		return COMMAND_ERR_ARGUMENT;
 80030be:	f06f 0306 	mvn.w	r3, #6
 80030c2:	e056      	b.n	8003172 <led_command_handler+0xd6>
	}

	if(sscanf((const char *)buffer, "led%d %s", &num, cmd) != 2)
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	f107 0214 	add.w	r2, r7, #20
 80030cc:	492c      	ldr	r1, [pc, #176]	; (8003180 <led_command_handler+0xe4>)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f01e ff88 	bl	8021fe4 <siscanf>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d002      	beq.n	80030e0 <led_command_handler+0x44>
	{
		return COMMAND_ERR_WRONG_FORMAT;
 80030da:	f06f 0301 	mvn.w	r3, #1
 80030de:	e048      	b.n	8003172 <led_command_handler+0xd6>
	}
	if (num < 3 || num > 6 )
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	dd02      	ble.n	80030ec <led_command_handler+0x50>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b06      	cmp	r3, #6
 80030ea:	dd02      	ble.n	80030f2 <led_command_handler+0x56>
	{
		return COMMAND_ERR_LED_NUMBER;
 80030ec:	f06f 0302 	mvn.w	r3, #2
 80030f0:	e03f      	b.n	8003172 <led_command_handler+0xd6>
	}
	if (strncmp("on", cmd, sizeof(cmd)) == 0)
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4619      	mov	r1, r3
 80030f8:	4822      	ldr	r0, [pc, #136]	; (8003184 <led_command_handler+0xe8>)
 80030fa:	f7fd f869 	bl	80001d0 <strcmp>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <led_command_handler+0x7e>
	{
		BSP_LED_On(led[num - 3]);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3b03      	subs	r3, #3
 8003108:	f107 0218 	add.w	r2, r7, #24
 800310c:	4413      	add	r3, r2
 800310e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fda0 	bl	8003c58 <BSP_LED_On>
 8003118:	e02a      	b.n	8003170 <led_command_handler+0xd4>
	}
	else if (strncmp("off", cmd, sizeof(cmd)) == 0)
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4619      	mov	r1, r3
 8003120:	4819      	ldr	r0, [pc, #100]	; (8003188 <led_command_handler+0xec>)
 8003122:	f7fd f855 	bl	80001d0 <strcmp>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <led_command_handler+0xa6>
	{
		BSP_LED_Off(led[num - 3]);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3b03      	subs	r3, #3
 8003130:	f107 0218 	add.w	r2, r7, #24
 8003134:	4413      	add	r3, r2
 8003136:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fda6 	bl	8003c8c <BSP_LED_Off>
 8003140:	e016      	b.n	8003170 <led_command_handler+0xd4>
	}
	else if (strncmp("toggle", cmd, sizeof(cmd)) == 0)
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	4619      	mov	r1, r3
 8003148:	4810      	ldr	r0, [pc, #64]	; (800318c <led_command_handler+0xf0>)
 800314a:	f7fd f841 	bl	80001d0 <strcmp>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <led_command_handler+0xce>
	{
		BSP_LED_Toggle(led[num - 3]);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3b03      	subs	r3, #3
 8003158:	f107 0218 	add.w	r2, r7, #24
 800315c:	4413      	add	r3, r2
 800315e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fdac 	bl	8003cc0 <BSP_LED_Toggle>
 8003168:	e002      	b.n	8003170 <led_command_handler+0xd4>
	}
	else
	{
		return COMMAND_ERR_LED_CMD;
 800316a:	f06f 0303 	mvn.w	r3, #3
 800316e:	e000      	b.n	8003172 <led_command_handler+0xd6>
	}

	return COMMAND_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	08025640 	.word	0x08025640
 8003180:	08025624 	.word	0x08025624
 8003184:	08025630 	.word	0x08025630
 8003188:	08025634 	.word	0x08025634
 800318c:	08025638 	.word	0x08025638

08003190 <gpio_command_handler>:
 * len - buffer length
 * state - a pointer to the GPIO status that should to be returned
 * pin - a pointer to the PIN number that should to be returned
 **/
static command_error_t gpio_command_handler(const uint8_t * buffer, size_t len, bool *state, int *pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
		char name;
		int num;

		PIN_TypeDef pins[4] = {PIN12, PIN13, PIN14, PIN15};
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <gpio_command_handler+0x94>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	617b      	str	r3, [r7, #20]

		if(buffer == NULL || len == 0 || len > CMD_BUFFER_MAX_LEN)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <gpio_command_handler+0x26>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <gpio_command_handler+0x26>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d902      	bls.n	80031bc <gpio_command_handler+0x2c>
		{
			return COMMAND_ERR_ARGUMENT;
 80031b6:	f06f 0306 	mvn.w	r3, #6
 80031ba:	e02e      	b.n	800321a <gpio_command_handler+0x8a>
		}
		if(sscanf((const char *)buffer, "read gpio%c %d", &name, &num) != 2)
 80031bc:	f107 0318 	add.w	r3, r7, #24
 80031c0:	f107 021f 	add.w	r2, r7, #31
 80031c4:	4918      	ldr	r1, [pc, #96]	; (8003228 <gpio_command_handler+0x98>)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f01e ff0c 	bl	8021fe4 <siscanf>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d002      	beq.n	80031d8 <gpio_command_handler+0x48>
		{
			return COMMAND_ERR_WRONG_FORMAT;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	e020      	b.n	800321a <gpio_command_handler+0x8a>
		}
		if (num < 12 || num > 15 )
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0b      	cmp	r3, #11
 80031dc:	dd02      	ble.n	80031e4 <gpio_command_handler+0x54>
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b0f      	cmp	r3, #15
 80031e2:	dd02      	ble.n	80031ea <gpio_command_handler+0x5a>
		{
			return COMMAND_ERR_GPIO_PIN;
 80031e4:	f06f 0305 	mvn.w	r3, #5
 80031e8:	e017      	b.n	800321a <gpio_command_handler+0x8a>
		}
		if (name != 'd')
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d002      	beq.n	80031f6 <gpio_command_handler+0x66>
		{
			return COMMAND_ERR_GPIO_NAME;
 80031f0:	f06f 0304 	mvn.w	r3, #4
 80031f4:	e011      	b.n	800321a <gpio_command_handler+0x8a>
		}

		*state = ReadPin(pins[num - 12]);
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	3b0c      	subs	r3, #12
 80031fa:	f107 0220 	add.w	r2, r7, #32
 80031fe:	4413      	add	r3, r2
 8003200:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fec7 	bl	8002f98 <ReadPin>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	701a      	strb	r2, [r3, #0]
		*pin = num;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	601a      	str	r2, [r3, #0]
		return COMMAND_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	08025654 	.word	0x08025654
 8003228:	08025644 	.word	0x08025644

0800322c <pwm_command_handler>:
 * pwm - a pointer to the pwm value that should to be returned
 * channel - a pointer to the channel(led) number that should to be returned
 * command - a pointer to the command(r/w - read/write) that should to be returned
 **/
static command_error_t pwm_command_handler(const uint8_t * buffer, size_t len, int *pwm, int *channel, char *command)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
		int num;
		int valPWM;
		char cmd[sizeof("write")];

		if(buffer == NULL || len == 0 || len > CMD_BUFFER_MAX_LEN)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <pwm_command_handler+0x20>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <pwm_command_handler+0x20>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b20      	cmp	r3, #32
 800324a:	d902      	bls.n	8003252 <pwm_command_handler+0x26>
		{
			return COMMAND_ERR_ARGUMENT;
 800324c:	f06f 0306 	mvn.w	r3, #6
 8003250:	e05c      	b.n	800330c <pwm_command_handler+0xe0>
		}
		int arg = sscanf((const char *)buffer, "/%s led%d %d", cmd, &num, &valPWM);
 8003252:	f107 0120 	add.w	r1, r7, #32
 8003256:	f107 0214 	add.w	r2, r7, #20
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	492c      	ldr	r1, [pc, #176]	; (8003314 <pwm_command_handler+0xe8>)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f01e febd 	bl	8021fe4 <siscanf>
 800326a:	6278      	str	r0, [r7, #36]	; 0x24
		if(arg < 2 || arg > 3)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	2b01      	cmp	r3, #1
 8003270:	dd02      	ble.n	8003278 <pwm_command_handler+0x4c>
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	2b03      	cmp	r3, #3
 8003276:	dd02      	ble.n	800327e <pwm_command_handler+0x52>
			return COMMAND_ERR_WRONG_FORMAT;
 8003278:	f06f 0301 	mvn.w	r3, #1
 800327c:	e046      	b.n	800330c <pwm_command_handler+0xe0>
		if (num < 1 || num > 16 )
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	2b00      	cmp	r3, #0
 8003282:	dd02      	ble.n	800328a <pwm_command_handler+0x5e>
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	2b10      	cmp	r3, #16
 8003288:	dd02      	ble.n	8003290 <pwm_command_handler+0x64>
			return COMMAND_ERR_CHANNEL_NUM;
 800328a:	f06f 0308 	mvn.w	r3, #8
 800328e:	e03d      	b.n	800330c <pwm_command_handler+0xe0>
		if (strncmp("read", cmd, sizeof(cmd)) == 0)
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	4619      	mov	r1, r3
 8003296:	4820      	ldr	r0, [pc, #128]	; (8003318 <pwm_command_handler+0xec>)
 8003298:	f7fc ff9a 	bl	80001d0 <strcmp>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <pwm_command_handler+0x96>
		{
			*pwm = getPWM(num);
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe f80c 	bl	80012c4 <getPWM>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
			*channel = num;
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	601a      	str	r2, [r3, #0]
			*command = 'r';
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2272      	movs	r2, #114	; 0x72
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e023      	b.n	800330a <pwm_command_handler+0xde>
		}
		else if (strncmp("write", cmd, sizeof(cmd)) == 0)
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4814      	ldr	r0, [pc, #80]	; (800331c <pwm_command_handler+0xf0>)
 80032ca:	f7fc ff81 	bl	80001d0 <strcmp>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d117      	bne.n	8003304 <pwm_command_handler+0xd8>
		{
			if (valPWM < 0 || valPWM > 4095)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db03      	blt.n	80032e2 <pwm_command_handler+0xb6>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	db02      	blt.n	80032e8 <pwm_command_handler+0xbc>
				return COMMAND_ERR_VALUE_PWM;
 80032e2:	f06f 0309 	mvn.w	r3, #9
 80032e6:	e011      	b.n	800330c <pwm_command_handler+0xe0>
			setLedPWM(num, valPWM);
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd ff75 	bl	80011e0 <setLedPWM>
			*channel = num;
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	601a      	str	r2, [r3, #0]
			*command = 'w';
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	2277      	movs	r2, #119	; 0x77
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e002      	b.n	800330a <pwm_command_handler+0xde>
		}
		else
		{
			return COMMAND_ERR_WRONG_CMD;
 8003304:	f06f 0307 	mvn.w	r3, #7
 8003308:	e000      	b.n	800330c <pwm_command_handler+0xe0>
		}

		return COMMAND_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08025658 	.word	0x08025658
 8003318:	08025668 	.word	0x08025668
 800331c:	08025670 	.word	0x08025670

08003320 <StartUdpServerTask>:
void StartUdpServerTask(void const * argument)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b0db      	sub	sp, #364	; 0x16c
 8003324:	af02      	add	r7, sp, #8
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	6018      	str	r0, [r3, #0]
	int addr_len;
	osDelay(5000);// wait 5 sec to init lwip stack
 800332a:	f241 3088 	movw	r0, #5000	; 0x1388
 800332e:	f007 fa34 	bl	800a79a <osDelay>

	if((socket_fd = udpServerInit(PORTNUM)) < 0)
 8003332:	f241 602e 	movw	r0, #5678	; 0x162e
 8003336:	f7ff fe4f 	bl	8002fd8 <udpServerInit>
 800333a:	4603      	mov	r3, r0
 800333c:	4ac5      	ldr	r2, [pc, #788]	; (8003654 <StartUdpServerTask+0x334>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4bc4      	ldr	r3, [pc, #784]	; (8003654 <StartUdpServerTask+0x334>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	da08      	bge.n	800335a <StartUdpServerTask+0x3a>
	{
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM) error\n");
 8003348:	22f3      	movs	r2, #243	; 0xf3
 800334a:	49c3      	ldr	r1, [pc, #780]	; (8003658 <StartUdpServerTask+0x338>)
 800334c:	48c3      	ldr	r0, [pc, #780]	; (800365c <StartUdpServerTask+0x33c>)
 800334e:	f01e fcad 	bl	8021cac <iprintf>
 8003352:	48c3      	ldr	r0, [pc, #780]	; (8003660 <StartUdpServerTask+0x340>)
 8003354:	f01e fd30 	bl	8021db8 <puts>
		return;
 8003358:	e35c      	b.n	8003a14 <StartUdpServerTask+0x6f4>
	}

	int addr_len_2;

	if((socket2_fd = udpServerInit(PORTNUM2)) < 0)
 800335a:	f240 40d2 	movw	r0, #1234	; 0x4d2
 800335e:	f7ff fe3b 	bl	8002fd8 <udpServerInit>
 8003362:	4603      	mov	r3, r0
 8003364:	4abf      	ldr	r2, [pc, #764]	; (8003664 <StartUdpServerTask+0x344>)
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4bbe      	ldr	r3, [pc, #760]	; (8003664 <StartUdpServerTask+0x344>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	da08      	bge.n	8003382 <StartUdpServerTask+0x62>
	{
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM2) error\n");
 8003370:	22fb      	movs	r2, #251	; 0xfb
 8003372:	49b9      	ldr	r1, [pc, #740]	; (8003658 <StartUdpServerTask+0x338>)
 8003374:	48b9      	ldr	r0, [pc, #740]	; (800365c <StartUdpServerTask+0x33c>)
 8003376:	f01e fc99 	bl	8021cac <iprintf>
 800337a:	48bb      	ldr	r0, [pc, #748]	; (8003668 <StartUdpServerTask+0x348>)
 800337c:	f01e fd1c 	bl	8021db8 <puts>
		return;
 8003380:	e348      	b.n	8003a14 <StartUdpServerTask+0x6f4>
	}

	int addr_len_PWM;
	if((socketPWM_fd = udpServerInit(PORTNUMPWM)) < 0)
 8003382:	f242 700f 	movw	r0, #9999	; 0x270f
 8003386:	f7ff fe27 	bl	8002fd8 <udpServerInit>
 800338a:	4603      	mov	r3, r0
 800338c:	4ab7      	ldr	r2, [pc, #732]	; (800366c <StartUdpServerTask+0x34c>)
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4bb6      	ldr	r3, [pc, #728]	; (800366c <StartUdpServerTask+0x34c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da09      	bge.n	80033ac <StartUdpServerTask+0x8c>
	{
		UDP_SERVER_PRINTF("udpServerInit(PORTNUMPWM) error\n");
 8003398:	f44f 7281 	mov.w	r2, #258	; 0x102
 800339c:	49ae      	ldr	r1, [pc, #696]	; (8003658 <StartUdpServerTask+0x338>)
 800339e:	48af      	ldr	r0, [pc, #700]	; (800365c <StartUdpServerTask+0x33c>)
 80033a0:	f01e fc84 	bl	8021cac <iprintf>
 80033a4:	48b2      	ldr	r0, [pc, #712]	; (8003670 <StartUdpServerTask+0x350>)
 80033a6:	f01e fd07 	bl	8021db8 <puts>
		return;
 80033aa:	e333      	b.n	8003a14 <StartUdpServerTask+0x6f4>
	}
	for(;;)
	{
		bzero(&client_addr, sizeof(client_addr));
 80033ac:	4bb1      	ldr	r3, [pc, #708]	; (8003674 <StartUdpServerTask+0x354>)
 80033ae:	461a      	mov	r2, r3
 80033b0:	2300      	movs	r3, #0
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]
 80033b6:	6093      	str	r3, [r2, #8]
 80033b8:	60d3      	str	r3, [r2, #12]
		addr_len = sizeof(client_addr);
 80033ba:	2310      	movs	r3, #16
 80033bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		fd_set rfds;
		struct timeval tv;
		int retval;
		FD_ZERO(&rfds);
 80033c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80033c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80033ce:	e00b      	b.n	80033e8 <StartUdpServerTask+0xc8>
 80033d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80033e2:	3301      	adds	r3, #1
 80033e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80033e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80033ec:	2b07      	cmp	r3, #7
 80033ee:	d9ef      	bls.n	80033d0 <StartUdpServerTask+0xb0>
		FD_SET(socket_fd, &rfds);
 80033f0:	4b98      	ldr	r3, [pc, #608]	; (8003654 <StartUdpServerTask+0x334>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	095a      	lsrs	r2, r3, #5
 80033f6:	0093      	lsls	r3, r2, #2
 80033f8:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80033fc:	440b      	add	r3, r1
 80033fe:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003402:	4994      	ldr	r1, [pc, #592]	; (8003654 <StartUdpServerTask+0x334>)
 8003404:	6809      	ldr	r1, [r1, #0]
 8003406:	f001 011f 	and.w	r1, r1, #31
 800340a:	2001      	movs	r0, #1
 800340c:	fa00 f101 	lsl.w	r1, r0, r1
 8003410:	4319      	orrs	r1, r3
 8003412:	0093      	lsls	r3, r2, #2
 8003414:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003418:	4413      	add	r3, r2
 800341a:	f843 1c5c 	str.w	r1, [r3, #-92]

		bzero(&client2_addr, sizeof(client2_addr));
 800341e:	4b96      	ldr	r3, [pc, #600]	; (8003678 <StartUdpServerTask+0x358>)
 8003420:	461a      	mov	r2, r3
 8003422:	2300      	movs	r3, #0
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	6053      	str	r3, [r2, #4]
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	60d3      	str	r3, [r2, #12]
		addr_len_2 = sizeof(client2_addr);
 800342c:	2310      	movs	r3, #16
 800342e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		fd_set rfds2;
		int retval2;
		FD_ZERO(&rfds2);
 8003432:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003436:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003440:	e00b      	b.n	800345a <StartUdpServerTask+0x13a>
 8003442:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003454:	3301      	adds	r3, #1
 8003456:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800345a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800345e:	2b07      	cmp	r3, #7
 8003460:	d9ef      	bls.n	8003442 <StartUdpServerTask+0x122>
		FD_SET(socket2_fd, &rfds2);
 8003462:	4b80      	ldr	r3, [pc, #512]	; (8003664 <StartUdpServerTask+0x344>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	095a      	lsrs	r2, r3, #5
 8003468:	0093      	lsls	r3, r2, #2
 800346a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800346e:	440b      	add	r3, r1
 8003470:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003474:	497b      	ldr	r1, [pc, #492]	; (8003664 <StartUdpServerTask+0x344>)
 8003476:	6809      	ldr	r1, [r1, #0]
 8003478:	f001 011f 	and.w	r1, r1, #31
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f101 	lsl.w	r1, r0, r1
 8003482:	4319      	orrs	r1, r3
 8003484:	0093      	lsls	r3, r2, #2
 8003486:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800348a:	4413      	add	r3, r2
 800348c:	f843 1c78 	str.w	r1, [r3, #-120]

		bzero(&clientPWM_addr, sizeof(clientPWM_addr));
 8003490:	4b7a      	ldr	r3, [pc, #488]	; (800367c <StartUdpServerTask+0x35c>)
 8003492:	461a      	mov	r2, r3
 8003494:	2300      	movs	r3, #0
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	6053      	str	r3, [r2, #4]
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	60d3      	str	r3, [r2, #12]
		addr_len_PWM = sizeof(clientPWM_addr);
 800349e:	2310      	movs	r3, #16
 80034a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		fd_set rfdsPWM;
		int retvalPWM;
		FD_ZERO(&rfdsPWM);
 80034a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80034a8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034b2:	e00b      	b.n	80034cc <StartUdpServerTask+0x1ac>
 80034b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c6:	3301      	adds	r3, #1
 80034c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034d0:	2b07      	cmp	r3, #7
 80034d2:	d9ef      	bls.n	80034b4 <StartUdpServerTask+0x194>
		FD_SET(socketPWM_fd, &rfdsPWM);
 80034d4:	4b65      	ldr	r3, [pc, #404]	; (800366c <StartUdpServerTask+0x34c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	095a      	lsrs	r2, r3, #5
 80034da:	0093      	lsls	r3, r2, #2
 80034dc:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80034e0:	440b      	add	r3, r1
 80034e2:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80034e6:	4961      	ldr	r1, [pc, #388]	; (800366c <StartUdpServerTask+0x34c>)
 80034e8:	6809      	ldr	r1, [r1, #0]
 80034ea:	f001 011f 	and.w	r1, r1, #31
 80034ee:	2001      	movs	r0, #1
 80034f0:	fa00 f101 	lsl.w	r1, r0, r1
 80034f4:	4319      	orrs	r1, r3
 80034f6:	0093      	lsls	r3, r2, #2
 80034f8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80034fc:	4413      	add	r3, r2
 80034fe:	f843 1c80 	str.w	r1, [r3, #-128]
		/* Wait up to five seconds. */

		tv.tv_sec = 1;
 8003502:	f04f 0201 	mov.w	r2, #1
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		tv.tv_usec = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

		retval = select(FD_SETSIZE, &rfds, NULL, NULL, &tv);
 8003514:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8003518:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	2200      	movs	r2, #0
 8003522:	2040      	movs	r0, #64	; 0x40
 8003524:	f00e fa44 	bl	80119b0 <lwip_select>
 8003528:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
		/* Don't rely on the value of tv now! */

		if (retval == -1)
 800352c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003534:	d105      	bne.n	8003542 <StartUdpServerTask+0x222>
		{
			close(socket_fd);
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <StartUdpServerTask+0x334>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f00d fab6 	bl	8010aac <lwip_close>
			break;
 8003540:	e268      	b.n	8003a14 <StartUdpServerTask+0x6f4>
		}
		else if (retval)
 8003542:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80a4 	beq.w	8003694 <StartUdpServerTask+0x374>
		{
			uint8_t buffer[CMD_BUFFER_MAX_LEN];
			const size_t buf_size = sizeof(buffer);
 800354c:	2320      	movs	r3, #32
 800354e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			command_error_t  r;
			ssize_t received;

			if (FD_ISSET(socket_fd, &rfds))
 8003552:	4b40      	ldr	r3, [pc, #256]	; (8003654 <StartUdpServerTask+0x334>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800355e:	4413      	add	r3, r2
 8003560:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003564:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <StartUdpServerTask+0x334>)
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8096 	beq.w	80036a6 <StartUdpServerTask+0x386>
			{
				received = recvfrom(socket_fd, buffer, buf_size, MSG_DONTWAIT, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <StartUdpServerTask+0x334>)
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003582:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <StartUdpServerTask+0x354>)
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2308      	movs	r3, #8
 800358e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003592:	f00d fe39 	bl	8011208 <lwip_recvfrom>
 8003596:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

				if (received > 0)
 800359a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f340 8081 	ble.w	80036a6 <StartUdpServerTask+0x386>
				{
					if ( (r = led_command_handler(buffer, received)) != COMMAND_OK)
 80035a4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80035a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fd74 	bl	800309c <led_command_handler>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80035ba:	f997 313b 	ldrsb.w	r3, [r7, #315]	; 0x13b
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d025      	beq.n	800360e <StartUdpServerTask+0x2ee>
					{
						UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 80035c2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80035c6:	4924      	ldr	r1, [pc, #144]	; (8003658 <StartUdpServerTask+0x338>)
 80035c8:	4824      	ldr	r0, [pc, #144]	; (800365c <StartUdpServerTask+0x33c>)
 80035ca:	f01e fb6f 	bl	8021cac <iprintf>
 80035ce:	f997 313b 	ldrsb.w	r3, [r7, #315]	; 0x13b
 80035d2:	4619      	mov	r1, r3
 80035d4:	482a      	ldr	r0, [pc, #168]	; (8003680 <StartUdpServerTask+0x360>)
 80035d6:	f01e fb69 	bl	8021cac <iprintf>
						if (sendto(socket_fd, "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <StartUdpServerTask+0x334>)
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <StartUdpServerTask+0x354>)
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2308      	movs	r3, #8
 80035ea:	2207      	movs	r2, #7
 80035ec:	4925      	ldr	r1, [pc, #148]	; (8003684 <StartUdpServerTask+0x364>)
 80035ee:	f00d ff11 	bl	8011414 <lwip_sendto>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f8:	d155      	bne.n	80036a6 <StartUdpServerTask+0x386>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80035fa:	f240 123b 	movw	r2, #315	; 0x13b
 80035fe:	4916      	ldr	r1, [pc, #88]	; (8003658 <StartUdpServerTask+0x338>)
 8003600:	4816      	ldr	r0, [pc, #88]	; (800365c <StartUdpServerTask+0x33c>)
 8003602:	f01e fb53 	bl	8021cac <iprintf>
 8003606:	4820      	ldr	r0, [pc, #128]	; (8003688 <StartUdpServerTask+0x368>)
 8003608:	f01e fbd6 	bl	8021db8 <puts>
 800360c:	e04b      	b.n	80036a6 <StartUdpServerTask+0x386>
						}
					}
					else
					{
						UDP_SERVER_PRINTF("command was handles successfully\n");
 800360e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003612:	4911      	ldr	r1, [pc, #68]	; (8003658 <StartUdpServerTask+0x338>)
 8003614:	4811      	ldr	r0, [pc, #68]	; (800365c <StartUdpServerTask+0x33c>)
 8003616:	f01e fb49 	bl	8021cac <iprintf>
 800361a:	481c      	ldr	r0, [pc, #112]	; (800368c <StartUdpServerTask+0x36c>)
 800361c:	f01e fbcc 	bl	8021db8 <puts>
						if (sendto(socket_fd, "OK\n", sizeof("OK\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <StartUdpServerTask+0x334>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <StartUdpServerTask+0x354>)
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2308      	movs	r3, #8
 8003630:	2204      	movs	r2, #4
 8003632:	4917      	ldr	r1, [pc, #92]	; (8003690 <StartUdpServerTask+0x370>)
 8003634:	f00d feee 	bl	8011414 <lwip_sendto>
 8003638:	4603      	mov	r3, r0
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363e:	d132      	bne.n	80036a6 <StartUdpServerTask+0x386>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8003640:	f240 1243 	movw	r2, #323	; 0x143
 8003644:	4904      	ldr	r1, [pc, #16]	; (8003658 <StartUdpServerTask+0x338>)
 8003646:	4805      	ldr	r0, [pc, #20]	; (800365c <StartUdpServerTask+0x33c>)
 8003648:	f01e fb30 	bl	8021cac <iprintf>
 800364c:	480e      	ldr	r0, [pc, #56]	; (8003688 <StartUdpServerTask+0x368>)
 800364e:	f01e fbb3 	bl	8021db8 <puts>
 8003652:	e028      	b.n	80036a6 <StartUdpServerTask+0x386>
 8003654:	20000324 	.word	0x20000324
 8003658:	08029914 	.word	0x08029914
 800365c:	080255c8 	.word	0x080255c8
 8003660:	08025678 	.word	0x08025678
 8003664:	20000338 	.word	0x20000338
 8003668:	08025698 	.word	0x08025698
 800366c:	2000034c 	.word	0x2000034c
 8003670:	080256b8 	.word	0x080256b8
 8003674:	20000314 	.word	0x20000314
 8003678:	20000328 	.word	0x20000328
 800367c:	2000033c 	.word	0x2000033c
 8003680:	080256d8 	.word	0x080256d8
 8003684:	08025704 	.word	0x08025704
 8003688:	0802570c 	.word	0x0802570c
 800368c:	08025724 	.word	0x08025724
 8003690:	08025748 	.word	0x08025748
			}
			// TODO Check activity on the second socket descriptor, implement the handler
		}
		else
		{
			UDP_SERVER_PRINTF("No data on the socket one within five seconds.\n");
 8003694:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003698:	49c7      	ldr	r1, [pc, #796]	; (80039b8 <StartUdpServerTask+0x698>)
 800369a:	48c8      	ldr	r0, [pc, #800]	; (80039bc <StartUdpServerTask+0x69c>)
 800369c:	f01e fb06 	bl	8021cac <iprintf>
 80036a0:	48c7      	ldr	r0, [pc, #796]	; (80039c0 <StartUdpServerTask+0x6a0>)
 80036a2:	f01e fb89 	bl	8021db8 <puts>
		}

		retval2 = select(FD_SETSIZE, &rfds2, NULL, NULL, &tv);
 80036a6:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80036aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	2200      	movs	r2, #0
 80036b4:	2040      	movs	r0, #64	; 0x40
 80036b6:	f00e f97b 	bl	80119b0 <lwip_select>
 80036ba:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
		/* Don't rely on the value of tv now! */

		if (retval2 == -1)
 80036be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c6:	d105      	bne.n	80036d4 <StartUdpServerTask+0x3b4>
		{
			close(socket2_fd);
 80036c8:	4bbe      	ldr	r3, [pc, #760]	; (80039c4 <StartUdpServerTask+0x6a4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f00d f9ed 	bl	8010aac <lwip_close>
			break;
 80036d2:	e19f      	b.n	8003a14 <StartUdpServerTask+0x6f4>
		}
		else if (retval2)
 80036d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8095 	beq.w	8003808 <StartUdpServerTask+0x4e8>
		{
			uint8_t buffer2[CMD_BUFFER_MAX_LEN];
			const size_t buf_size = sizeof(buffer2);
 80036de:	2320      	movs	r3, #32
 80036e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			command_error_t  ret;
			ssize_t received;
			int pin;
			bool state;

			if (FD_ISSET(socket2_fd, &rfds2))
 80036e4:	4bb7      	ldr	r3, [pc, #732]	; (80039c4 <StartUdpServerTask+0x6a4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80036f0:	4413      	add	r3, r2
 80036f2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80036f6:	4ab3      	ldr	r2, [pc, #716]	; (80039c4 <StartUdpServerTask+0x6a4>)
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	f002 021f 	and.w	r2, r2, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8087 	beq.w	800381a <StartUdpServerTask+0x4fa>
			{
				received = recvfrom(socket2_fd, buffer2, buf_size, MSG_DONTWAIT, (struct sockaddr *)&client2_addr, (socklen_t *)&addr_len_2);
 800370c:	4bad      	ldr	r3, [pc, #692]	; (80039c4 <StartUdpServerTask+0x6a4>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	4bab      	ldr	r3, [pc, #684]	; (80039c8 <StartUdpServerTask+0x6a8>)
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2308      	movs	r3, #8
 8003720:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003724:	f00d fd70 	bl	8011208 <lwip_recvfrom>
 8003728:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

				if (received > 0)
 800372c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003730:	2b00      	cmp	r3, #0
 8003732:	dd72      	ble.n	800381a <StartUdpServerTask+0x4fa>
				{
					if ( (ret = gpio_command_handler(buffer2, received, &state, &pin)) != COMMAND_OK)
 8003734:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003738:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800373c:	f107 02db 	add.w	r2, r7, #219	; 0xdb
 8003740:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003744:	f7ff fd24 	bl	8003190 <gpio_command_handler>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 800374e:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8003752:	2b00      	cmp	r3, #0
 8003754:	d025      	beq.n	80037a2 <StartUdpServerTask+0x482>
					{
						UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)ret);
 8003756:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800375a:	4997      	ldr	r1, [pc, #604]	; (80039b8 <StartUdpServerTask+0x698>)
 800375c:	4897      	ldr	r0, [pc, #604]	; (80039bc <StartUdpServerTask+0x69c>)
 800375e:	f01e faa5 	bl	8021cac <iprintf>
 8003762:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8003766:	4619      	mov	r1, r3
 8003768:	4898      	ldr	r0, [pc, #608]	; (80039cc <StartUdpServerTask+0x6ac>)
 800376a:	f01e fa9f 	bl	8021cac <iprintf>
						if (sendto(socket2_fd, "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client2_addr, addr_len_2) == -1)
 800376e:	4b95      	ldr	r3, [pc, #596]	; (80039c4 <StartUdpServerTask+0x6a4>)
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	4b93      	ldr	r3, [pc, #588]	; (80039c8 <StartUdpServerTask+0x6a8>)
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2308      	movs	r3, #8
 800377e:	2207      	movs	r2, #7
 8003780:	4993      	ldr	r1, [pc, #588]	; (80039d0 <StartUdpServerTask+0x6b0>)
 8003782:	f00d fe47 	bl	8011414 <lwip_sendto>
 8003786:	4603      	mov	r3, r0
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378c:	d145      	bne.n	800381a <StartUdpServerTask+0x4fa>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 800378e:	f240 126b 	movw	r2, #363	; 0x16b
 8003792:	4989      	ldr	r1, [pc, #548]	; (80039b8 <StartUdpServerTask+0x698>)
 8003794:	4889      	ldr	r0, [pc, #548]	; (80039bc <StartUdpServerTask+0x69c>)
 8003796:	f01e fa89 	bl	8021cac <iprintf>
 800379a:	488e      	ldr	r0, [pc, #568]	; (80039d4 <StartUdpServerTask+0x6b4>)
 800379c:	f01e fb0c 	bl	8021db8 <puts>
 80037a0:	e03b      	b.n	800381a <StartUdpServerTask+0x4fa>
						}
					}
					else
					{
						char str[15];
						sprintf(str, "GPIOD.%d=%d\n",pin, state);
 80037a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80037a6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80037aa:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80037ae:	498a      	ldr	r1, [pc, #552]	; (80039d8 <StartUdpServerTask+0x6b8>)
 80037b0:	f01e fbf8 	bl	8021fa4 <siprintf>
						UDP_SERVER_PRINTF("command was handles successfully\n");
 80037b4:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80037b8:	497f      	ldr	r1, [pc, #508]	; (80039b8 <StartUdpServerTask+0x698>)
 80037ba:	4880      	ldr	r0, [pc, #512]	; (80039bc <StartUdpServerTask+0x69c>)
 80037bc:	f01e fa76 	bl	8021cac <iprintf>
 80037c0:	4886      	ldr	r0, [pc, #536]	; (80039dc <StartUdpServerTask+0x6bc>)
 80037c2:	f01e faf9 	bl	8021db8 <puts>
						if (sendto(socket2_fd, str, strlen(str),  MSG_DONTWAIT, (const struct sockaddr *)&client2_addr, addr_len_2) == -1)
 80037c6:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <StartUdpServerTask+0x6a4>)
 80037c8:	681c      	ldr	r4, [r3, #0]
 80037ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fd08 	bl	80001e4 <strlen>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037da:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	4b79      	ldr	r3, [pc, #484]	; (80039c8 <StartUdpServerTask+0x6a8>)
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2308      	movs	r3, #8
 80037e6:	4620      	mov	r0, r4
 80037e8:	f00d fe14 	bl	8011414 <lwip_sendto>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f2:	d112      	bne.n	800381a <StartUdpServerTask+0x4fa>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80037f4:	f240 1275 	movw	r2, #373	; 0x175
 80037f8:	496f      	ldr	r1, [pc, #444]	; (80039b8 <StartUdpServerTask+0x698>)
 80037fa:	4870      	ldr	r0, [pc, #448]	; (80039bc <StartUdpServerTask+0x69c>)
 80037fc:	f01e fa56 	bl	8021cac <iprintf>
 8003800:	4874      	ldr	r0, [pc, #464]	; (80039d4 <StartUdpServerTask+0x6b4>)
 8003802:	f01e fad9 	bl	8021db8 <puts>
 8003806:	e008      	b.n	800381a <StartUdpServerTask+0x4fa>
			}
					// TODO Check activity on the second socket descriptor, implement the handler
		}
		else
		{
			UDP_SERVER_PRINTF("No data on the socked two within five seconds.\n");
 8003808:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800380c:	496a      	ldr	r1, [pc, #424]	; (80039b8 <StartUdpServerTask+0x698>)
 800380e:	486b      	ldr	r0, [pc, #428]	; (80039bc <StartUdpServerTask+0x69c>)
 8003810:	f01e fa4c 	bl	8021cac <iprintf>
 8003814:	4872      	ldr	r0, [pc, #456]	; (80039e0 <StartUdpServerTask+0x6c0>)
 8003816:	f01e facf 	bl	8021db8 <puts>
		}

		retvalPWM = select(FD_SETSIZE, &rfdsPWM, NULL, NULL, &tv);
 800381a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800381e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	2200      	movs	r2, #0
 8003828:	2040      	movs	r0, #64	; 0x40
 800382a:	f00e f8c1 	bl	80119b0 <lwip_select>
 800382e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
				/* Don't rely on the value of tv now! */

		if (retvalPWM == -1)
 8003832:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800383a:	d105      	bne.n	8003848 <StartUdpServerTask+0x528>
		{
			close(socketPWM_fd);
 800383c:	4b69      	ldr	r3, [pc, #420]	; (80039e4 <StartUdpServerTask+0x6c4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f00d f933 	bl	8010aac <lwip_close>
			break;
 8003846:	e0e5      	b.n	8003a14 <StartUdpServerTask+0x6f4>
		}
		else if (retvalPWM)
 8003848:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80d7 	beq.w	8003a00 <StartUdpServerTask+0x6e0>
		{
			uint8_t bufferPWM[CMD_BUFFER_MAX_LEN];
			const size_t buf_size = sizeof(bufferPWM);
 8003852:	2320      	movs	r3, #32
 8003854:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			ssize_t received;
			int channel;
			int pwm;
			char command;

			if (FD_ISSET(socketPWM_fd, &rfdsPWM))
 8003858:	4b62      	ldr	r3, [pc, #392]	; (80039e4 <StartUdpServerTask+0x6c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003864:	4413      	add	r3, r2
 8003866:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800386a:	4a5e      	ldr	r2, [pc, #376]	; (80039e4 <StartUdpServerTask+0x6c4>)
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	f43f ad96 	beq.w	80033ac <StartUdpServerTask+0x8c>
			{
				received = recvfrom(socketPWM_fd, bufferPWM, buf_size, MSG_DONTWAIT, (struct sockaddr *)&clientPWM_addr, (socklen_t *)&addr_len_PWM);
 8003880:	4b58      	ldr	r3, [pc, #352]	; (80039e4 <StartUdpServerTask+0x6c4>)
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	f107 010c 	add.w	r1, r7, #12
 8003888:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <StartUdpServerTask+0x6c8>)
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2308      	movs	r3, #8
 8003894:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003898:	f00d fcb6 	bl	8011208 <lwip_recvfrom>
 800389c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

				if (received > 0)
 80038a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f77f ad81 	ble.w	80033ac <StartUdpServerTask+0x8c>
				{
					if ( (ret = pwm_command_handler(bufferPWM, buf_size, &pwm, &channel, &command)) != COMMAND_OK)
 80038aa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80038ae:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80038b2:	f107 000c 	add.w	r0, r7, #12
 80038b6:	f107 03c3 	add.w	r3, r7, #195	; 0xc3
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	460b      	mov	r3, r1
 80038be:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80038c2:	f7ff fcb3 	bl	800322c <pwm_command_handler>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80038cc:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d030      	beq.n	8003936 <StartUdpServerTask+0x616>
					{
						UDP_SERVER_PRINTF("pwm_command_handler() returned error code = %d\n", (int)ret);
 80038d4:	f240 129b 	movw	r2, #411	; 0x19b
 80038d8:	4937      	ldr	r1, [pc, #220]	; (80039b8 <StartUdpServerTask+0x698>)
 80038da:	4838      	ldr	r0, [pc, #224]	; (80039bc <StartUdpServerTask+0x69c>)
 80038dc:	f01e f9e6 	bl	8021cac <iprintf>
 80038e0:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 80038e4:	4619      	mov	r1, r3
 80038e6:	4841      	ldr	r0, [pc, #260]	; (80039ec <StartUdpServerTask+0x6cc>)
 80038e8:	f01e f9e0 	bl	8021cac <iprintf>
						char str[150];
						sprintf(str, "Error\nUse: /write led[n] [val] or /read led[n]\nWhere:\n\t-[n] is number of led(1-16)\n\t-[val] is pwm value(0-4095)\n", channel, pwm);
 80038ec:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80038f8:	493d      	ldr	r1, [pc, #244]	; (80039f0 <StartUdpServerTask+0x6d0>)
 80038fa:	f01e fb53 	bl	8021fa4 <siprintf>
						if (sendto(socketPWM_fd, str, sizeof(str),  MSG_DONTWAIT, (const struct sockaddr *)&clientPWM_addr, addr_len_PWM) == -1)
 80038fe:	4b39      	ldr	r3, [pc, #228]	; (80039e4 <StartUdpServerTask+0x6c4>)
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003906:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <StartUdpServerTask+0x6c8>)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2308      	movs	r3, #8
 8003912:	2296      	movs	r2, #150	; 0x96
 8003914:	f00d fd7e 	bl	8011414 <lwip_sendto>
 8003918:	4603      	mov	r3, r0
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800391e:	f47f ad45 	bne.w	80033ac <StartUdpServerTask+0x8c>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8003922:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8003926:	4924      	ldr	r1, [pc, #144]	; (80039b8 <StartUdpServerTask+0x698>)
 8003928:	4824      	ldr	r0, [pc, #144]	; (80039bc <StartUdpServerTask+0x69c>)
 800392a:	f01e f9bf 	bl	8021cac <iprintf>
 800392e:	4829      	ldr	r0, [pc, #164]	; (80039d4 <StartUdpServerTask+0x6b4>)
 8003930:	f01e fa42 	bl	8021db8 <puts>
 8003934:	e53a      	b.n	80033ac <StartUdpServerTask+0x8c>
						}
					}
					else
					{
						char str[50];
						if (command == 'r')
 8003936:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800393a:	2b72      	cmp	r3, #114	; 0x72
 800393c:	d109      	bne.n	8003952 <StartUdpServerTask+0x632>
							sprintf(str, "PWM on led%d = %d\n", channel, pwm);
 800393e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003946:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800394a:	492a      	ldr	r1, [pc, #168]	; (80039f4 <StartUdpServerTask+0x6d4>)
 800394c:	f01e fb2a 	bl	8021fa4 <siprintf>
 8003950:	e007      	b.n	8003962 <StartUdpServerTask+0x642>
						else
							sprintf(str, "PWM for led%d successfully installed.\n", channel);
 8003952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800395a:	4927      	ldr	r1, [pc, #156]	; (80039f8 <StartUdpServerTask+0x6d8>)
 800395c:	4618      	mov	r0, r3
 800395e:	f01e fb21 	bl	8021fa4 <siprintf>
						UDP_SERVER_PRINTF("pwm command was handles successfully\n");
 8003962:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003966:	4914      	ldr	r1, [pc, #80]	; (80039b8 <StartUdpServerTask+0x698>)
 8003968:	4814      	ldr	r0, [pc, #80]	; (80039bc <StartUdpServerTask+0x69c>)
 800396a:	f01e f99f 	bl	8021cac <iprintf>
 800396e:	4823      	ldr	r0, [pc, #140]	; (80039fc <StartUdpServerTask+0x6dc>)
 8003970:	f01e fa22 	bl	8021db8 <puts>
						if (sendto(socketPWM_fd, str, strlen(str),  MSG_DONTWAIT, (const struct sockaddr *)&clientPWM_addr, addr_len_PWM) == -1)
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <StartUdpServerTask+0x6c4>)
 8003976:	681c      	ldr	r4, [r3, #0]
 8003978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fc31 	bl	80001e4 <strlen>
 8003982:	4602      	mov	r2, r0
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <StartUdpServerTask+0x6c8>)
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2308      	movs	r3, #8
 8003994:	4620      	mov	r0, r4
 8003996:	f00d fd3d 	bl	8011414 <lwip_sendto>
 800399a:	4603      	mov	r3, r0
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a0:	f47f ad04 	bne.w	80033ac <StartUdpServerTask+0x8c>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80039a4:	f240 12ad 	movw	r2, #429	; 0x1ad
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <StartUdpServerTask+0x698>)
 80039aa:	4804      	ldr	r0, [pc, #16]	; (80039bc <StartUdpServerTask+0x69c>)
 80039ac:	f01e f97e 	bl	8021cac <iprintf>
 80039b0:	4808      	ldr	r0, [pc, #32]	; (80039d4 <StartUdpServerTask+0x6b4>)
 80039b2:	f01e fa01 	bl	8021db8 <puts>
 80039b6:	e4f9      	b.n	80033ac <StartUdpServerTask+0x8c>
 80039b8:	08029914 	.word	0x08029914
 80039bc:	080255c8 	.word	0x080255c8
 80039c0:	0802574c 	.word	0x0802574c
 80039c4:	20000338 	.word	0x20000338
 80039c8:	20000328 	.word	0x20000328
 80039cc:	080256d8 	.word	0x080256d8
 80039d0:	08025704 	.word	0x08025704
 80039d4:	0802570c 	.word	0x0802570c
 80039d8:	0802577c 	.word	0x0802577c
 80039dc:	08025724 	.word	0x08025724
 80039e0:	0802578c 	.word	0x0802578c
 80039e4:	2000034c 	.word	0x2000034c
 80039e8:	2000033c 	.word	0x2000033c
 80039ec:	080257bc 	.word	0x080257bc
 80039f0:	080257ec 	.word	0x080257ec
 80039f4:	08025860 	.word	0x08025860
 80039f8:	08025874 	.word	0x08025874
 80039fc:	0802589c 	.word	0x0802589c
				}
			}
		}
		else
		{
			UDP_SERVER_PRINTF("No data on the socked pwm within five seconds.\n");
 8003a00:	f240 12b5 	movw	r2, #437	; 0x1b5
 8003a04:	4905      	ldr	r1, [pc, #20]	; (8003a1c <StartUdpServerTask+0x6fc>)
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <StartUdpServerTask+0x700>)
 8003a08:	f01e f950 	bl	8021cac <iprintf>
 8003a0c:	4805      	ldr	r0, [pc, #20]	; (8003a24 <StartUdpServerTask+0x704>)
 8003a0e:	f01e f9d3 	bl	8021db8 <puts>
	{
 8003a12:	e4cb      	b.n	80033ac <StartUdpServerTask+0x8c>
		}
	}
}
 8003a14:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}
 8003a1c:	08029914 	.word	0x08029914
 8003a20:	080255c8 	.word	0x080255c8
 8003a24:	080258c4 	.word	0x080258c4

08003a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a2c:	480d      	ldr	r0, [pc, #52]	; (8003a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a2e:	490e      	ldr	r1, [pc, #56]	; (8003a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a30:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a34:	e002      	b.n	8003a3c <LoopCopyDataInit>

08003a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3a:	3304      	adds	r3, #4

08003a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a40:	d3f9      	bcc.n	8003a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a44:	4c0b      	ldr	r4, [pc, #44]	; (8003a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a48:	e001      	b.n	8003a4e <LoopFillZerobss>

08003a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a4c:	3204      	adds	r2, #4

08003a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a50:	d3fb      	bcc.n	8003a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a52:	f7ff f841 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a56:	f01d fb9f 	bl	8021198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5a:	f7fd fe3d 	bl	80016d8 <main>
  bx  lr    
 8003a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a68:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8003a6c:	08029fd4 	.word	0x08029fd4
  ldr r2, =_sbss
 8003a70:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8003a74:	2001b200 	.word	0x2001b200

08003a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC_IRQHandler>
	...

08003a7c <DWT_Init>:
#include "delay.h"

void DWT_Init(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <DWT_Init+0x2c>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <DWT_Init+0x2c>)
 8003a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <DWT_Init+0x30>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <DWT_Init+0x30>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <DWT_Init+0x30>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6013      	str	r3, [r2, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000edf0 	.word	0xe000edf0
 8003aac:	e0001000 	.word	0xe0001000

08003ab0 <DWT_Delay>:

void DWT_Delay(uint32_t Delay)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	uint32_t cyclestamp = DWT->CYCCNT + Delay * (HAL_RCC_GetHCLKFreq() / 1000000);
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <DWT_Delay+0x3c>)
 8003aba:	685c      	ldr	r4, [r3, #4]
 8003abc:	f005 fa0e 	bl	8008edc <HAL_RCC_GetHCLKFreq>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <DWT_Delay+0x40>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	0c9b      	lsrs	r3, r3, #18
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	4423      	add	r3, r4
 8003ad2:	60fb      	str	r3, [r7, #12]
	while (DWT->CYCCNT < cyclestamp) ;
 8003ad4:	bf00      	nop
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <DWT_Delay+0x3c>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d8fa      	bhi.n	8003ad6 <DWT_Delay+0x26>
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd90      	pop	{r4, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	e0001000 	.word	0xe0001000
 8003af0:	431bde83 	.word	0x431bde83

08003af4 <DWT_GetCycles>:

uint32_t DWT_GetCycles()
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <DWT_GetCycles+0x14>)
 8003afa:	685b      	ldr	r3, [r3, #4]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e0001000 	.word	0xe0001000

08003b0c <DWT_Cycles_to_us>:

uint8_t DWT_Cycles_to_us(uint32_t cycles)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
 8003b14:	f005 f9e2 	bl	8008edc <HAL_RCC_GetHCLKFreq>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <DWT_Cycles_to_us+0x2c>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	60fb      	str	r3, [r7, #12]
	return (uint8_t)(cycles / clock_in_MHz);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	b2db      	uxtb	r3, r3
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	431bde83 	.word	0x431bde83

08003b3c <delay_us>:

void delay_us(uint32_t Delay)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	DWT_Delay(Delay);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ffb3 	bl	8003ab0 <DWT_Delay>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <delay_ms>:

void delay_ms(uint32_t Delay)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 fe1a 	bl	8005794 <HAL_Delay>
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	; 0x30
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <BSP_LED_Init+0x2e>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	4a32      	ldr	r2, [pc, #200]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	6313      	str	r3, [r2, #48]	; 0x30
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	e034      	b.n	8003c00 <BSP_LED_Init+0x98>
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10e      	bne.n	8003bba <BSP_LED_Init+0x52>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003ba6:	f043 0308 	orr.w	r3, r3, #8
 8003baa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	e022      	b.n	8003c00 <BSP_LED_Init+0x98>
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d10e      	bne.n	8003bde <BSP_LED_Init+0x76>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bca:	f043 0308 	orr.w	r3, r3, #8
 8003bce:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	e010      	b.n	8003c00 <BSP_LED_Init+0x98>
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d10d      	bne.n	8003c00 <BSP_LED_Init+0x98>
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bee:	f043 0308 	orr.w	r3, r3, #8
 8003bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf4:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <BSP_LED_Init+0xe4>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <BSP_LED_Init+0xe8>)
 8003c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003c12:	2302      	movs	r3, #2
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <BSP_LED_Init+0xec>)
 8003c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1e:	f107 021c 	add.w	r2, r7, #28
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 feeb 	bl	8005a00 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <BSP_LED_Init+0xec>)
 8003c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4a06      	ldr	r2, [pc, #24]	; (8003c50 <BSP_LED_Init+0xe8>)
 8003c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f002 f98f 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8003c42:	bf00      	nop
 8003c44:	3730      	adds	r7, #48	; 0x30
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08029928 	.word	0x08029928
 8003c54:	20000038 	.word	0x20000038

08003c58 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <BSP_LED_On+0x2c>)
 8003c66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <BSP_LED_On+0x30>)
 8003c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4619      	mov	r1, r3
 8003c76:	f002 f973 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000038 	.word	0x20000038
 8003c88:	08029928 	.word	0x08029928

08003c8c <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <BSP_LED_Off+0x2c>)
 8003c9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <BSP_LED_Off+0x30>)
 8003ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f002 f959 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000038 	.word	0x20000038
 8003cbc:	08029928 	.word	0x08029928

08003cc0 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	4a07      	ldr	r2, [pc, #28]	; (8003cec <BSP_LED_Toggle+0x2c>)
 8003cce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	4906      	ldr	r1, [pc, #24]	; (8003cf0 <BSP_LED_Toggle+0x30>)
 8003cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f002 f958 	bl	8005f92 <HAL_GPIO_TogglePin>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000038 	.word	0x20000038
 8003cf0:	08029928 	.word	0x08029928

08003cf4 <dht11_set_callbacks>:
				init_read_pin_t init_read_pin_func,
				init_write_pin_t init_write_pin_func,
				read_pin_t read_pin_func,
				write_pin_t write_pin_func
			)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
	if (cb == NULL
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d011      	beq.n	8003d2c <dht11_set_callbacks+0x38>
		|| us_delay_func == NULL
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <dht11_set_callbacks+0x38>
		|| ms_delay_func == NULL
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <dht11_set_callbacks+0x38>
		|| init_read_pin_func == NULL
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <dht11_set_callbacks+0x38>
		|| init_write_pin_func == NULL
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <dht11_set_callbacks+0x38>
		|| read_pin_func == NULL
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <dht11_set_callbacks+0x38>
		|| write_pin_func == NULL)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <dht11_set_callbacks+0x3c>
	{
		return DHT_ERR_FAULT;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e012      	b.n	8003d56 <dht11_set_callbacks+0x62>
	}
	cb->callbacks.us_delay = us_delay_func;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
	cb->callbacks.ms_delay = ms_delay_func;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	611a      	str	r2, [r3, #16]
	cb->callbacks.init_read_pin = init_read_pin_func;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	615a      	str	r2, [r3, #20]
	cb->callbacks.init_write_pin = init_write_pin_func;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	619a      	str	r2, [r3, #24]
	cb->callbacks.read_pin = read_pin_func;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	61da      	str	r2, [r3, #28]
	cb->callbacks.write_pin = write_pin_func;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	621a      	str	r2, [r3, #32]
	return DHT_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <dht11_init>:

dht_status_t dht11_init(dht11_t *cb, void *port, uint32_t pin)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
	if (cb == NULL || port == NULL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <dht11_init+0x18>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <dht11_init+0x1c>
	{
		return DHT_ERR_FAULT;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e030      	b.n	8003de0 <dht11_init+0x7e>
	}
	cb->port = port;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	601a      	str	r2, [r3, #0]
	cb->pin = pin;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	605a      	str	r2, [r3, #4]

#if defined (STM32F407xx) && defined(USE_HAL_DRIVER)
	dht_status_t status = dht11_stm32_init(cb);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f9fe 	bl	800418c <dht11_stm32_init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
	if (status != DHT_OK)
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <dht11_init+0x3c>
	{
		return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	e020      	b.n	8003de0 <dht11_init+0x7e>
	}
#endif

	/* If callbacks are not initialized */
	if (cb->callbacks.us_delay == NULL
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <dht11_init+0x6c>
		|| cb->callbacks.ms_delay == NULL
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00f      	beq.n	8003dce <dht11_init+0x6c>
		|| cb->callbacks.init_read_pin == NULL
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <dht11_init+0x6c>
		|| cb->callbacks.init_write_pin == NULL
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <dht11_init+0x6c>
		|| cb->callbacks.read_pin == NULL
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <dht11_init+0x6c>
		|| cb->callbacks.write_pin == NULL)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <dht11_init+0x70>
	{
		return DHT_ERR_CALLBACKS;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e006      	b.n	8003de0 <dht11_init+0x7e>
	}
	/* If pin reading time is empty there will be default value */
	cb->delay += DHT11_READ_PIN_DFLT_DELAY_USEC;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	7a1b      	ldrb	r3, [r3, #8]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	721a      	strb	r2, [r3, #8]
	//printf("cb->delay = %u\n", cb->delay);
	return DHT_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <wait_while_status>:

static bool wait_while_status(dht11_t *cb, size_t timeout, bool init_status)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	71fb      	strb	r3, [r7, #7]
	size_t counter = timeout / cb->delay;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	7a1b      	ldrb	r3, [r3, #8]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
	bool status = init_status;
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	74fb      	strb	r3, [r7, #19]
	do {
		cb->callbacks.us_delay(DHT11_READ_PIN_DFLT_DELAY_USEC);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	4798      	blx	r3
		status = cb->callbacks.read_pin (cb);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	4798      	blx	r3
 8003e18:	4603      	mov	r3, r0
 8003e1a:	74fb      	strb	r3, [r7, #19]
	} while((status == init_status) && --counter);
 8003e1c:	7cfa      	ldrb	r2, [r7, #19]
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d105      	bne.n	8003e30 <wait_while_status+0x48>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1eb      	bne.n	8003e08 <wait_while_status+0x20>
	return status;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <start_condition>:

/* The first DHT11's state is START CONDITION */
static inline bool start_condition (dht11_t *cb)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	cb->callbacks.init_write_pin (cb);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
	cb->callbacks.write_pin (cb, false);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
	cb->callbacks.ms_delay (DHT11_START_DELAY_MSEC);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2014      	movs	r0, #20
 8003e5a:	4798      	blx	r3
	cb->callbacks.write_pin (cb, true);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	2101      	movs	r1, #1
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
	cb->callbacks.init_read_pin (cb);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
	return (wait_while_status(cb, DHT11_START_WAIT_RESP_MAX_USEC, true) == false);
 8003e6e:	2201      	movs	r2, #1
 8003e70:	2128      	movs	r1, #40	; 0x28
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffb8 	bl	8003de8 <wait_while_status>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f083 0301 	eor.w	r3, r3, #1
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <read_acknowledge>:

/* The second DHT11's state is READ ACKNOWLEDGE */
static inline bool read_acknowledge (dht11_t *cb)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	wait_while_status(cb, DHT11_ACK_LOW_STATE_USEC, false);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2150      	movs	r1, #80	; 0x50
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff9f 	bl	8003de8 <wait_while_status>
	return (wait_while_status(cb, DHT11_ACK_HIGHT_STATE_USEC, true) == false);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2150      	movs	r1, #80	; 0x50
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ff9a 	bl	8003de8 <wait_while_status>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <read_data_byte>:

/* The third DHT11's state is READ DATA BYTES */
static inline bool read_data_byte (dht11_t *cb, uint8_t *data)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	uint8_t received = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
	for(int i = 7 ; i >= 0; i--)
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	e02b      	b.n	8003f40 <read_data_byte+0x6c>
	{
		wait_while_status(cb, DHT11_DATA_START_USEC, false);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2132      	movs	r1, #50	; 0x32
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff7b 	bl	8003de8 <wait_while_status>
		if (wait_while_status(cb, DHT11_DATA_READ_LOW_MAX_USEC, true) == false)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	211c      	movs	r1, #28
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ff76 	bl	8003de8 <wait_while_status>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f083 0301 	eor.w	r3, r3, #1
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d117      	bne.n	8003f38 <read_data_byte+0x64>
		{
			continue;
		}
		if (wait_while_status(cb, DHT11_DATA_READ_HIGHT_USEC, true) == false)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	2146      	movs	r1, #70	; 0x46
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff6b 	bl	8003de8 <wait_while_status>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f083 0301 	eor.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <read_data_byte+0x60>
		{
			received |= (1 << i);
 8003f1e:	2201      	movs	r2, #1
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	b25a      	sxtb	r2, r3
 8003f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e002      	b.n	8003f3a <read_data_byte+0x66>
		}
		else
		{
			return false;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e00a      	b.n	8003f4e <read_data_byte+0x7a>
			continue;
 8003f38:	bf00      	nop
	for(int i = 7 ; i >= 0; i--)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	dad0      	bge.n	8003ee8 <read_data_byte+0x14>
		}
	}
	*data = received;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	701a      	strb	r2, [r3, #0]
	return true;
 8003f4c:	2301      	movs	r3, #1
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <calc_crc>:

static uint8_t calc_crc(uint8_t *data)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	e009      	b.n	8003f7c <calc_crc+0x26>
	{
		crc += data[i];
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	4413      	add	r3, r2
 8003f74:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d9f2      	bls.n	8003f68 <calc_crc+0x12>
	}
	return crc;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <dht11_read>:

dht_status_t dht11_read(dht11_t *cb, uint8_t *data, size_t size)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
	uint8_t response[DHT11_DATA_BYTES];
	if (cb == NULL
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <dht11_read+0x18>
		|| data == NULL)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <dht11_read+0x1c>
	{
		return DHT_ERR_FAULT;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e044      	b.n	8004036 <dht11_read+0xa6>
	}
	if (size < DHT11_DATA_SIZE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d801      	bhi.n	8003fb6 <dht11_read+0x26>
	{
		return DHT_ERR_INVAL;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e03f      	b.n	8004036 <dht11_read+0xa6>
	}
	if (!start_condition (cb))
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff ff3f 	bl	8003e3a <start_condition>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f083 0301 	eor.w	r3, r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <dht11_read+0x3c>
	{
		return DHT_ERR_START_CONDITION;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	e034      	b.n	8004036 <dht11_read+0xa6>
	}
	if (!read_acknowledge (cb))
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff ff63 	bl	8003e98 <read_acknowledge>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f083 0301 	eor.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <dht11_read+0x52>
	{
		return DHT_ERR_READ_ACK;
 8003fde:	2305      	movs	r3, #5
 8003fe0:	e029      	b.n	8004036 <dht11_read+0xa6>
	}
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e012      	b.n	800400e <dht11_read+0x7e>
	{
		if (!read_data_byte (cb, &response[i]))
 8003fe8:	f107 0214 	add.w	r2, r7, #20
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff ff6e 	bl	8003ed4 <read_data_byte>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f083 0301 	eor.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <dht11_read+0x78>
		{
			return DHT_ERR_READ_DATA;
 8004004:	2306      	movs	r3, #6
 8004006:	e016      	b.n	8004036 <dht11_read+0xa6>
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d9e9      	bls.n	8003fe8 <dht11_read+0x58>
		}
	}
	uint8_t crc = calc_crc(response);
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff9c 	bl	8003f56 <calc_crc>
 800401e:	4603      	mov	r3, r0
 8004020:	76fb      	strb	r3, [r7, #27]
	if (crc != response[4])
 8004022:	7e3b      	ldrb	r3, [r7, #24]
 8004024:	7efa      	ldrb	r2, [r7, #27]
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <dht11_read+0x9e>
	{
		return DHT_ERR_CRC;
 800402a:	2307      	movs	r3, #7
 800402c:	e003      	b.n	8004036 <dht11_read+0xa6>
 800402e:	697a      	ldr	r2, [r7, #20]
	}
	memcpy(data, response, DHT11_DATA_SIZE);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	601a      	str	r2, [r3, #0]
	return DHT_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <dht11_to_str>:

dht_status_t dht11_to_str(uint8_t *data, size_t size, char *humidity, char *temperature)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
	if (data == NULL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <dht11_to_str+0x18>
	{
		return DHT_ERR_FAULT;
 8004054:	2301      	movs	r3, #1
 8004056:	e026      	b.n	80040a6 <dht11_to_str+0x66>
	}
	if (size < DHT11_DATA_SIZE)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d801      	bhi.n	8004062 <dht11_to_str+0x22>
	{
		return DHT_ERR_INVAL;
 800405e:	2302      	movs	r3, #2
 8004060:	e021      	b.n	80040a6 <dht11_to_str+0x66>
	}
	if (humidity)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <dht11_to_str+0x42>
		snprintf(humidity, DHT11_HUMIDITY_STR_SIZE, "%02u.%01u", data[0], data[1]);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3301      	adds	r3, #1
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <dht11_to_str+0x70>)
 800407a:	2105      	movs	r1, #5
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f01d ff5d 	bl	8021f3c <sniprintf>
	if (temperature)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <dht11_to_str+0x64>
		snprintf(temperature, DHT11_TEMPERATURE_STR_SIZE, "%02u.%01u", data[2], data[3]);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3302      	adds	r3, #2
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3303      	adds	r3, #3
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <dht11_to_str+0x70>)
 800409c:	2105      	movs	r1, #5
 800409e:	6838      	ldr	r0, [r7, #0]
 80040a0:	f01d ff4c 	bl	8021f3c <sniprintf>
	return DHT_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	080258f4 	.word	0x080258f4

080040b4 <HAL_init_read_pin>:
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
	return (uint8_t)(cycles / clock_in_MHz);
}
#endif
static void HAL_init_read_pin(dht11_t *cb)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f107 020c 	add.w	r2, r7, #12
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fc8a 	bl	8005a00 <HAL_GPIO_Init>
}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_init_write_pin>:

static void HAL_init_write_pin(dht11_t *cb)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b29b      	uxth	r3, r3
 8004112:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004114:	2311      	movs	r3, #17
 8004116:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW;
 800411c:	2302      	movs	r3, #2
 800411e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f107 020c 	add.w	r2, r7, #12
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fc68 	bl	8005a00 <HAL_GPIO_Init>
}
 8004130:	bf00      	nop
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_read_pin>:

static bool HAL_read_pin(dht11_t *cb)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin) != GPIO_PIN_RESET);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	b29b      	uxth	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f001 feef 	bl	8005f30 <HAL_GPIO_ReadPin>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_write_pin>:

static void HAL_write_pin(dht11_t *cb, bool state)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b29b      	uxth	r3, r3
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	4619      	mov	r1, r3
 8004180:	f001 feee 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <dht11_stm32_init>:

dht_status_t dht11_stm32_init(dht11_t *cb)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af04      	add	r7, sp, #16
 8004192:	6078      	str	r0, [r7, #4]
	/* Setup callbacks */
	dht_status_t status = dht11_set_callbacks(
 8004194:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <dht11_stm32_init+0x7c>)
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	4b1c      	ldr	r3, [pc, #112]	; (800420c <dht11_stm32_init+0x80>)
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <dht11_stm32_init+0x84>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <dht11_stm32_init+0x88>)
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <dht11_stm32_init+0x8c>)
 80041a4:	491d      	ldr	r1, [pc, #116]	; (800421c <dht11_stm32_init+0x90>)
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fda4 	bl	8003cf4 <dht11_set_callbacks>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]
							HAL_init_read_pin,
							HAL_init_write_pin,
							HAL_read_pin,
							HAL_write_pin
						);
	if (status != DHT_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <dht11_stm32_init+0x2e>
	{
		return status;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	e022      	b.n	8004200 <dht11_stm32_init+0x74>
	}
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 80041ba:	f7ff fc5f 	bl	8003a7c <DWT_Init>
	cb->callbacks.init_read_pin (cb);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
	/* We are measuring of pin reading time in microseconds */
	uint32_t cycles = DWT_GetCycles();
 80041c6:	f7ff fc95 	bl	8003af4 <DWT_GetCycles>
 80041ca:	60b8      	str	r0, [r7, #8]
	cb->callbacks.read_pin (cb);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
	cb->delay = DWT_Cycles_to_us(DWT_GetCycles() - cycles);
 80041d4:	f7ff fc8e 	bl	8003af4 <DWT_GetCycles>
 80041d8:	4602      	mov	r2, r0
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fc94 	bl	8003b0c <DWT_Cycles_to_us>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	721a      	strb	r2, [r3, #8]
	/* End of measuring */
	/* Keep line in hight state */
	cb->callbacks.init_write_pin (cb);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	4798      	blx	r3
	cb->callbacks.write_pin(cb, true);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	2101      	movs	r1, #1
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
	return DHT_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08004167 	.word	0x08004167
 800420c:	08004139 	.word	0x08004139
 8004210:	080040f5 	.word	0x080040f5
 8004214:	080040b5 	.word	0x080040b5
 8004218:	08005795 	.word	0x08005795
 800421c:	08003ab1 	.word	0x08003ab1

08004220 <phy_bootstrap>:
#include <stdio.h>
#define RESET_ASSERT_DELAY_US   500UL
#define BOOTUP_DELAY_US         100UL

void phy_bootstrap()
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <phy_bootstrap+0x90>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <phy_bootstrap+0x90>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6313      	str	r3, [r2, #48]	; 0x30
 8004244:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <phy_bootstrap+0x90>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 8004250:	f7ff fc14 	bl	8003a7c <DWT_Init>

	/*Configure GPIO pin : RMII_CSR_DV_PIN */
	GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004258:	2301      	movs	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4812      	ldr	r0, [pc, #72]	; (80042b4 <phy_bootstrap+0x94>)
 800426a:	f001 fbc9 	bl	8005a00 <HAL_GPIO_Init>

    /* Reset PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_RESET);
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004274:	4810      	ldr	r0, [pc, #64]	; (80042b8 <phy_bootstrap+0x98>)
 8004276:	f001 fe73 	bl	8005f60 <HAL_GPIO_WritePin>
    /* Set PHY address to 0x03 */
    HAL_GPIO_WritePin(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin, GPIO_PIN_SET);
 800427a:	2201      	movs	r2, #1
 800427c:	2180      	movs	r1, #128	; 0x80
 800427e:	480d      	ldr	r0, [pc, #52]	; (80042b4 <phy_bootstrap+0x94>)
 8004280:	f001 fe6e 	bl	8005f60 <HAL_GPIO_WritePin>
    /* Reset pin should be asserted for minimum 500 us */
    delay_us(RESET_ASSERT_DELAY_US);
 8004284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004288:	f7ff fc58 	bl	8003b3c <delay_us>
    /* Bootup PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_SET);
 800428c:	2201      	movs	r2, #1
 800428e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004292:	4809      	ldr	r0, [pc, #36]	; (80042b8 <phy_bootstrap+0x98>)
 8004294:	f001 fe64 	bl	8005f60 <HAL_GPIO_WritePin>
    /* Bootup delay should be minimum 100 us */
    delay_us(BOOTUP_DELAY_US);
 8004298:	2064      	movs	r0, #100	; 0x64
 800429a:	f7ff fc4f 	bl	8003b3c <delay_us>

    HAL_GPIO_DeInit(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin);
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	4804      	ldr	r0, [pc, #16]	; (80042b4 <phy_bootstrap+0x94>)
 80042a2:	f001 fd49 	bl	8005d38 <HAL_GPIO_DeInit>
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40020000 	.word	0x40020000
 80042b8:	40020c00 	.word	0x40020c00

080042bc <phy_init>:

void phy_init(ETH_HandleTypeDef *heth)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	// link up/down interrupt via RMII_PHY_INT pin
	uint32_t regval = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]

    HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &regval);
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	461a      	mov	r2, r3
 80042ce:	211f      	movs	r1, #31
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fcd6 	bl	8004c82 <HAL_ETH_ReadPHYRegister>
    regval &= ~(PHY_INT_LEVEL_ACTIVE_MASK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042dc:	60fb      	str	r3, [r7, #12]
    regval |= PHY_INT_LEVEL_ACTIVE_LOW;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	60fb      	str	r3, [r7, #12]
    HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, regval);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	461a      	mov	r2, r3
 80042e6:	211f      	movs	r1, #31
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fd32 	bl	8004d52 <HAL_ETH_WritePHYRegister>

    /* Read Register Configuration */
    HAL_ETH_ReadPHYRegister(heth, PHY_INTERRUPT_CONTROL, &regval);
 80042ee:	f107 030c 	add.w	r3, r7, #12
 80042f2:	461a      	mov	r2, r3
 80042f4:	211b      	movs	r1, #27
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fcc3 	bl	8004c82 <HAL_ETH_ReadPHYRegister>

    regval |= (PHY_LINK_UP_INT_EN | PHY_LINK_DOWN_INT_EN);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004302:	60fb      	str	r3, [r7, #12]

    /* Enable Interrupt on change of link status */
    HAL_ETH_WritePHYRegister(heth, PHY_INTERRUPT_CONTROL, regval);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	461a      	mov	r2, r3
 8004308:	211b      	movs	r1, #27
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fd21 	bl	8004d52 <HAL_ETH_WritePHYRegister>
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_ETH_Autonegotiate>:
  @endverbatim
  * @{
  */
#ifdef KSZ8021RNL_PHY_ADDRESS
HAL_StatusTypeDef HAL_ETH_Autonegotiate(ETH_HandleTypeDef *heth)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
    uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	74fb      	strb	r3, [r7, #19]

    if (heth == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_ETH_Autonegotiate+0x1e>
    {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e080      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8004336:	f001 fa21 	bl	800577c <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    /* Wait while link bring up */
    do
    {
        status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	461a      	mov	r2, r3
 8004342:	2101      	movs	r1, #1
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fc9c 	bl	8004c82 <HAL_ETH_ReadPHYRegister>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_ETH_Autonegotiate+0x40>
        {
            return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e06f      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
        }

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004358:	f001 fa10 	bl	800577c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_ETH_Autonegotiate+0x56>
        {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e064      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
        }
    } while (((phyreg & PHY_LINK_IS_UP) != PHY_LINK_IS_UP));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0e1      	beq.n	800433c <HAL_ETH_Autonegotiate+0x24>

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	461a      	mov	r2, r3
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fc7e 	bl	8004c82 <HAL_ETH_ReadPHYRegister>
 8004386:	4603      	mov	r3, r0
 8004388:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_ETH_Autonegotiate+0x7c>
    {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e051      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Enable end restart Auto-Negotiation */
    phyreg |= (PHY_AUTONEGOTIATION_ENABLE | PHY_RESTART_AUTONEGOTIATION);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 800439a:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, PHY_AUTONEGOTIATION_ENABLE);
 800439c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043a0:	2100      	movs	r1, #0
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fcd5 	bl	8004d52 <HAL_ETH_WritePHYRegister>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_ETH_Autonegotiate+0x9e>
    {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e040      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	f001 f9e1 	bl	800577c <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation is completed */
    do
    {
        HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	461a      	mov	r2, r3
 80043c2:	2101      	movs	r1, #1
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fc5c 	bl	8004c82 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80043ca:	f001 f9d7 	bl	800577c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_ETH_Autonegotiate+0xc8>
        {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e02b      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
        }

    } while (((phyreg & PHY_AUTONEG_COMPLETE) != PHY_AUTONEG_COMPLETE));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0e8      	beq.n	80043bc <HAL_ETH_Autonegotiate+0xa4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL1, &phyreg)) != HAL_OK)
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	461a      	mov	r2, r3
 80043f0:	211e      	movs	r1, #30
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fc45 	bl	8004c82 <HAL_ETH_ReadPHYRegister>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_ETH_Autonegotiate+0xea>
    {
        /* In case of write timeout */
        return  HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e01a      	b.n	8004438 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if (phyreg & PHY_FULL_DUPLEX)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_ETH_Autonegotiate+0xfe>
    {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e002      	b.n	800441c <HAL_ETH_Autonegotiate+0x104>
    }
    else
    {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if (phyreg & PHY_SPEED_10BASE_T)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_ETH_Autonegotiate+0x116>
    {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_10M;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	e003      	b.n	8004436 <HAL_ETH_Autonegotiate+0x11e>
    }
    else
    {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_100M;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004434:	609a      	str	r2, [r3, #8]
    }

    return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_ETH_SetSpeedDuplex>:

HAL_StatusTypeDef HAL_ETH_SetSpeedDuplex(ETH_HandleTypeDef *heth)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]

    if (heth == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ETH_SetSpeedDuplex+0x1a>
    {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e037      	b.n	80044ca <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	461a      	mov	r2, r3
 8004460:	2100      	movs	r1, #0
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fc0d 	bl	8004c82 <HAL_ETH_ReadPHYRegister>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_ETH_SetSpeedDuplex+0x36>
    {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e029      	b.n	80044ca <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    phyreg &= ~(PHY_SPEED_MASK | PHY_DUPLEX_MASK);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 800447c:	60bb      	str	r3, [r7, #8]
    /* Set MAC Speed and Duplex Mode */
    if (heth->Init.Speed == ETH_SPEED_100M)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004486:	d104      	bne.n	8004492 <HAL_ETH_SetSpeedDuplex+0x52>
    {
        phyreg |= PHY_SPEED_100M;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	e001      	b.n	8004496 <HAL_ETH_SetSpeedDuplex+0x56>
    }
    else
    {
        phyreg |= PHY_SPEED_10M;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	60bb      	str	r3, [r7, #8]
    }

    if (heth->Init.DuplexMode == ETH_MODE_FULLDUPLEX)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449e:	d104      	bne.n	80044aa <HAL_ETH_SetSpeedDuplex+0x6a>
    {
        phyreg |= PHY_DUPLEX_FULL;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	e001      	b.n	80044ae <HAL_ETH_SetSpeedDuplex+0x6e>
    }
    else
    {
        phyreg |= PHY_DUPLEX_HALF;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	60bb      	str	r3, [r7, #8]
    }

    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, phyreg);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	461a      	mov	r2, r3
 80044b2:	2100      	movs	r1, #0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fc4c 	bl	8004d52 <HAL_ETH_WritePHYRegister>
 80044ba:	4603      	mov	r3, r0
 80044bc:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_ETH_SetSpeedDuplex+0x88>
    {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	; 0x28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg1 = 0U, phyreg = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
    uint32_t hclk = 60000000U;
 80044e4:	4b7e      	ldr	r3, [pc, #504]	; (80046e0 <HAL_ETH_Init+0x20c>)
 80044e6:	61bb      	str	r3, [r7, #24]
    uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
    uint32_t err = ETH_SUCCESS;
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
    HAL_StatusTypeDef status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	74fb      	strb	r3, [r7, #19]
    HAL_StatusTypeDef retval = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	77fb      	strb	r3, [r7, #31]

    /* Check the ETH peripheral state */
    if (heth == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ETH_Init+0x2e>
    {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0e9      	b.n	80046d6 <HAL_ETH_Init+0x202>
    assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
    assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
    assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
    assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

    if (heth->State == HAL_ETH_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_ETH_Init+0x48>
    {
        /* Allocate lock resource and initialize it */
        heth->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            heth->MspInitCallback = HAL_ETH_MspInit;
        }
        heth->MspInitCallback(heth);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC. */
        HAL_ETH_MspInit(heth);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f005 fd0a 	bl	8009f30 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }

    /* Enable SYSCFG Clock */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_ETH_Init+0x210>)
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	4a6f      	ldr	r2, [pc, #444]	; (80046e4 <HAL_ETH_Init+0x210>)
 8004526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800452a:	6453      	str	r3, [r2, #68]	; 0x44
 800452c:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_ETH_Init+0x210>)
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]

    /* Select MII or RMII Mode*/
    SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004538:	4b6b      	ldr	r3, [pc, #428]	; (80046e8 <HAL_ETH_Init+0x214>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a6a      	ldr	r2, [pc, #424]	; (80046e8 <HAL_ETH_Init+0x214>)
 800453e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004542:	6053      	str	r3, [r2, #4]
    SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004544:	4b68      	ldr	r3, [pc, #416]	; (80046e8 <HAL_ETH_Init+0x214>)
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4966      	ldr	r1, [pc, #408]	; (80046e8 <HAL_ETH_Init+0x214>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]

    /*-------------------------------- MAC Initialization ----------------------*/
    /* Get the ETHERNET MACMIIAR value */
    tmpreg1 = (heth->Instance)->MACMIIAR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear CSR Clock Range CR[2:0] bits */
    tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	f023 031c 	bic.w	r3, r3, #28
 8004560:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get hclk frequency value */
    hclk = HAL_RCC_GetHCLKFreq();
 8004562:	f004 fcbb 	bl	8008edc <HAL_RCC_GetHCLKFreq>
 8004566:	61b8      	str	r0, [r7, #24]

    /* Set CR bits depending on hclk value */
    if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	4a60      	ldr	r2, [pc, #384]	; (80046ec <HAL_ETH_Init+0x218>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d908      	bls.n	8004582 <HAL_ETH_Init+0xae>
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	4a5f      	ldr	r2, [pc, #380]	; (80046f0 <HAL_ETH_Init+0x21c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d804      	bhi.n	8004582 <HAL_ETH_Init+0xae>
    {
        /* CSR Clock Range between 20-35 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
 8004580:	e027      	b.n	80045d2 <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 35000000U) && (hclk < 60000000U))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4a5a      	ldr	r2, [pc, #360]	; (80046f0 <HAL_ETH_Init+0x21c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d908      	bls.n	800459c <HAL_ETH_Init+0xc8>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4a54      	ldr	r2, [pc, #336]	; (80046e0 <HAL_ETH_Init+0x20c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d204      	bcs.n	800459c <HAL_ETH_Init+0xc8>
    {
        /* CSR Clock Range between 35-60 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	f043 030c 	orr.w	r3, r3, #12
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e01a      	b.n	80045d2 <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 60000000U) && (hclk < 100000000U))
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4a50      	ldr	r2, [pc, #320]	; (80046e0 <HAL_ETH_Init+0x20c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d303      	bcc.n	80045ac <HAL_ETH_Init+0xd8>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4a53      	ldr	r2, [pc, #332]	; (80046f4 <HAL_ETH_Init+0x220>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d911      	bls.n	80045d0 <HAL_ETH_Init+0xfc>
    {
        /* CSR Clock Range between 60-100 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
    }
    else if((hclk >= 100000000U) && (hclk < 150000000U))
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	4a51      	ldr	r2, [pc, #324]	; (80046f4 <HAL_ETH_Init+0x220>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d908      	bls.n	80045c6 <HAL_ETH_Init+0xf2>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4a50      	ldr	r2, [pc, #320]	; (80046f8 <HAL_ETH_Init+0x224>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d804      	bhi.n	80045c6 <HAL_ETH_Init+0xf2>
    {
        /* CSR Clock Range between 100-150 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	f043 0304 	orr.w	r3, r3, #4
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	e005      	b.n	80045d2 <HAL_ETH_Init+0xfe>
    }
    else /* ((hclk >= 150000000) && (hclk <= 183000000)) */
    {
        /* CSR Clock Range between 150-183 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f043 0310 	orr.w	r3, r3, #16
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e000      	b.n	80045d2 <HAL_ETH_Init+0xfe>
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80045d0:	bf00      	nop
    }

    /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
    (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	611a      	str	r2, [r3, #16]

    status = HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &phyreg);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	461a      	mov	r2, r3
 80045e0:	211f      	movs	r1, #31
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fb4d 	bl	8004c82 <HAL_ETH_ReadPHYRegister>
 80045e8:	4603      	mov	r3, r0
 80045ea:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_ETH_Init+0x122>
    {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06f      	b.n	80046d6 <HAL_ETH_Init+0x202>
    /* Set 25MHz clock mode to enable 50 MHz clock on REF_CLK pin
     * Note: After default bootstrap KSZ8081RND has 50MHz clock mode set
     *       thus REF_CLK pin is not connected and MAC module is
     *       not clocking. So bit ETH_DMABMR_SR in DMABMR register
     *       of MAC subsystem will never cleared */
    phyreg &= ~(PHY_REF_CLOCK_SELECT_MASK);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fc:	60fb      	str	r3, [r7, #12]
    phyreg |= (PHY_REF_CLOCK_SELECT_25MHZ);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004604:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, phyreg);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	461a      	mov	r2, r3
 800460a:	211f      	movs	r1, #31
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fba0 	bl	8004d52 <HAL_ETH_WritePHYRegister>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_ETH_Init+0x14c>
    {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e05a      	b.n	80046d6 <HAL_ETH_Init+0x202>
    }

    /* Ethernet Software reset */
    /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
    /* After reset all the registers holds their respective reset values */
    (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004638:	f001 f8a0 	bl	800577c <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]

    /* Wait for software reset */
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800463e:	e011      	b.n	8004664 <HAL_ETH_Init+0x190>
    {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004640:	f001 f89c 	bl	800577c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800464e:	d909      	bls.n	8004664 <HAL_ETH_Init+0x190>
        {
            heth->State = HAL_ETH_STATE_TIMEOUT;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2203      	movs	r2, #3
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(heth);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
                not available, please check your external PHY or the IO configuration */
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e038      	b.n	80046d6 <HAL_ETH_Init+0x202>
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e4      	bne.n	8004640 <HAL_ETH_Init+0x16c>
        }
    }

    /*-------------------- PHY initialization and configuration ----------------*/
    if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00f      	beq.n	800469e <HAL_ETH_Init+0x1ca>
    {
        status = HAL_ETH_Autonegotiate(heth);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fe4a 	bl	8004318 <HAL_ETH_Autonegotiate>
 8004684:	4603      	mov	r3, r0
 8004686:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <HAL_ETH_Init+0x1c4>
        {
            err = ETH_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 8004696:	e011      	b.n	80046bc <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e00e      	b.n	80046bc <HAL_ETH_Init+0x1e8>
    {
        /* Check parameters */
        assert_param(IS_ETH_SPEED(heth->Init.Speed));
        assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

        status = HAL_ETH_SetSpeedDuplex(heth);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fece 	bl	8004440 <HAL_ETH_SetSpeedDuplex>
 80046a4:	4603      	mov	r3, r0
 80046a6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_ETH_Init+0x1e4>
        {
            err = ETH_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 80046b6:	e001      	b.n	80046bc <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	77fb      	strb	r3, [r7, #31]
        }
    }

init_final_stage:
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fd06 	bl	80050d0 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Return function status */
    return retval;
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	03938700 	.word	0x03938700
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40013800 	.word	0x40013800
 80046ec:	01312cff 	.word	0x01312cff
 80046f0:	02160ebf 	.word	0x02160ebf
 80046f4:	05f5e0ff 	.word	0x05f5e0ff
 80046f8:	08f0d17f 	.word	0x08f0d17f

080046fc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_ETH_DMATxDescListInit+0x20>
 8004718:	2302      	movs	r3, #2
 800471a:	e052      	b.n	80047c2 <HAL_ETH_DMATxDescListInit+0xc6>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	e030      	b.n	800479a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	015b      	lsls	r3, r3, #5
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	4413      	add	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004748:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4413      	add	r3, r2
 8004758:	461a      	mov	r2, r3
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	d208      	bcs.n	800478e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	4413      	add	r3, r2
 8004786:	461a      	mov	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	60da      	str	r2, [r3, #12]
 800478c:	e002      	b.n	8004794 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3ca      	bcc.n	8004738 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	3310      	adds	r3, #16
 80047ae:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_ETH_DMARxDescListInit+0x20>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e056      	b.n	800489c <HAL_ETH_DMARxDescListInit+0xce>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e034      	b.n	8004874 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	015b      	lsls	r3, r3, #5
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4413      	add	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800481a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004822:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	461a      	mov	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	429a      	cmp	r2, r3
 8004854:	d208      	bcs.n	8004868 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	3301      	adds	r3, #1
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	4413      	add	r3, r2
 8004860:	461a      	mov	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	e002      	b.n	800486e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	3301      	adds	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d3c6      	bcc.n	800480a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	330c      	adds	r3, #12
 8004888:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_ETH_TransmitFrame+0x24>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e0cd      	b.n	8004a68 <HAL_ETH_TransmitFrame+0x1c0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0b8      	b.n	8004a68 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da09      	bge.n	8004914 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2212      	movs	r2, #18
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0a9      	b.n	8004a68 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800491a:	4293      	cmp	r3, r2
 800491c:	d915      	bls.n	800494a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	4a54      	ldr	r2, [pc, #336]	; (8004a74 <HAL_ETH_TransmitFrame+0x1cc>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0a9b      	lsrs	r3, r3, #10
 8004928:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <HAL_ETH_TransmitFrame+0x1cc>)
 800492e:	fba3 1302 	umull	r1, r3, r3, r2
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3301      	adds	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e001      	b.n	800494e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800494a:	2301      	movs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d11c      	bne.n	800498e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004962:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800496e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800497e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
 800498c:	e04b      	b.n	8004a26 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	e044      	b.n	8004a1e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049a2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049b8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80049c2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d116      	bne.n	80049fc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80049dc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <HAL_ETH_TransmitFrame+0x1d0>)
 80049e2:	fb02 f203 	mul.w	r2, r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80049ee:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80049fa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004a0a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3b6      	bcc.n	8004994 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	3314      	adds	r3, #20
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a42:	3314      	adds	r3, #20
 8004a44:	2204      	movs	r2, #4
 8004a46:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a50:	3304      	adds	r3, #4
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	ac02b00b 	.word	0xac02b00b
 8004a78:	fffffa0c 	.word	0xfffffa0c

08004a7c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e074      	b.n	8004b80 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004aa6:	e05a      	b.n	8004b5e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abc:	d10d      	bne.n	8004ada <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad8:	e041      	b.n	8004b5e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
 8004afe:	e02e      	b.n	8004b5e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d103      	bne.n	8004b22 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004b2e:	1f1a      	subs	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	461a      	mov	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e010      	b.n	8004b80 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db02      	blt.n	8004b6e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d99c      	bls.n	8004aa8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d112      	bne.n	8004bce <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f005 fa6f 	bl	800a08c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb6:	3314      	adds	r3, #20
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bcc:	e01b      	b.n	8004c06 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d111      	bne.n	8004c06 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f839 	bl	8004c5a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0e:	3314      	adds	r3, #20
 8004c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c14:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1e:	3314      	adds	r3, #20
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d112      	bne.n	8004c52 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f81e 	bl	8004c6e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c40:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b82      	cmp	r3, #130	; 0x82
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e050      	b.n	8004d4a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2282      	movs	r2, #130	; 0x82
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 031c 	and.w	r3, r3, #28
 8004cbe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8a1b      	ldrh	r3, [r3, #16]
 8004cc4:	02db      	lsls	r3, r3, #11
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0302 	bic.w	r3, r3, #2
 8004ce2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cf4:	f000 fd42 	bl	800577c <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cfa:	e015      	b.n	8004d28 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004cfc:	f000 fd3e 	bl	800577c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0a:	d309      	bcc.n	8004d20 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e014      	b.n	8004d4a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e4      	bne.n	8004cfc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b086      	sub	sp, #24
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b42      	cmp	r3, #66	; 0x42
 8004d72:	d101      	bne.n	8004d78 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
 8004d76:	e04e      	b.n	8004e16 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2242      	movs	r2, #66	; 0x42
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 031c 	and.w	r3, r3, #28
 8004d8e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8a1b      	ldrh	r3, [r3, #16]
 8004d94:	02db      	lsls	r3, r3, #11
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004d9e:	897b      	ldrh	r3, [r7, #10]
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f043 0302 	orr.w	r3, r3, #2
 8004db2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004dce:	f000 fcd5 	bl	800577c <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004dd4:	e015      	b.n	8004e02 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004dd6:	f000 fcd1 	bl	800577c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de4:	d309      	bcc.n	8004dfa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e00d      	b.n	8004e16 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e4      	bne.n	8004dd6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_ETH_Start+0x16>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e01f      	b.n	8004e74 <HAL_ETH_Start+0x56>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fb45 	bl	80054d4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fb7c 	bl	8005548 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fc13 	bl	800567c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fbb0 	bl	80055bc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fbdd 	bl	800561c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_ETH_Stop+0x16>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e01f      	b.n	8004ed2 <HAL_ETH_Stop+0x56>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fba2 	bl	80055ec <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fbcf 	bl	800564c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fb67 	bl	8005582 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fbe1 	bl	800567c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fb27 	bl	800550e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ETH_ConfigMAC+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0e4      	b.n	80050c2 <HAL_ETH_ConfigMAC+0x1e6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80b1 	beq.w	8005072 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4b6c      	ldr	r3, [pc, #432]	; (80050cc <HAL_ETH_ConfigMAC+0x1f0>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004f28:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004f2e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004f34:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004f3a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004f40:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004f46:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004f4c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004f52:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004f58:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004f5e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004f64:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004f6a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f82:	2001      	movs	r0, #1
 8004f84:	f000 fc06 	bl	8005794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004f98:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004f9e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004fa4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004faa:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004fb0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004fb6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004fc2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004fc4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f000 fbe0 	bl	8005794 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fe4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fee:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004ffe:	4013      	ands	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800500c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005012:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005018:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800501e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005024:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800503c:	2001      	movs	r0, #1
 800503e:	f000 fba9 	bl	8005794 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005062:	2001      	movs	r0, #1
 8005064:	f000 fb96 	bl	8005794 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	61da      	str	r2, [r3, #28]
 8005070:	e01e      	b.n	80050b0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005080:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f000 fb76 	bl	8005794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	ff20810f 	.word	0xff20810f

080050d0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b0b0      	sub	sp, #192	; 0xc0
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80050fe:	2300      	movs	r3, #0
 8005100:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005102:	2300      	movs	r3, #0
 8005104:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005106:	2300      	movs	r3, #0
 8005108:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800510a:	2300      	movs	r3, #0
 800510c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511a:	663b      	str	r3, [r7, #96]	; 0x60
 800511c:	e001      	b.n	8005122 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005126:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005128:	2300      	movs	r3, #0
 800512a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800512c:	2300      	movs	r3, #0
 800512e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005130:	2300      	movs	r3, #0
 8005132:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005134:	2300      	movs	r3, #0
 8005136:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005140:	2300      	movs	r3, #0
 8005142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005152:	2300      	movs	r3, #0
 8005154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005182:	2300      	movs	r3, #0
 8005184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800518e:	2300      	movs	r3, #0
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005194:	2300      	movs	r3, #0
 8005196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80051a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051a8:	4bac      	ldr	r3, [pc, #688]	; (800545c <ETH_MACDMAConfig+0x38c>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80051b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80051b4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80051b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80051b8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80051ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80051bc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80051c2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80051c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80051c6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80051c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80051ca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80051d0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80051d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80051d4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80051d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80051d8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80051da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80051dc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80051de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80051e0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80051e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80051e4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80051e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005204:	2001      	movs	r0, #1
 8005206:	f000 fac5 	bl	8005794 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005212:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005214:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005218:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800521a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800521c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800521e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005222:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005228:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800522a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800522e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005234:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005238:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005240:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005242:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800524e:	2001      	movs	r0, #1
 8005250:	f000 faa0 	bl	8005794 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800525c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005266:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005270:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800527c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005280:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005284:	4013      	ands	r3, r2
 8005286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800528a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800528e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005294:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800529a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800529c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80052a0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80052a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80052a6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80052a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80052ac:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80052ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052c0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80052cc:	2001      	movs	r0, #1
 80052ce:	f000 fa61 	bl	8005794 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052da:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80052dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80052e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80052f6:	2001      	movs	r0, #1
 80052f8:	f000 fa4c 	bl	8005794 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005304:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800530a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800530e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005318:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800532a:	2304      	movs	r3, #4
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800532e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005338:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800533a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800534a:	2300      	movs	r3, #0
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800534e:	2300      	movs	r3, #0
 8005350:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535a:	3318      	adds	r3, #24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005362:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005366:	4b3e      	ldr	r3, [pc, #248]	; (8005460 <ETH_MACDMAConfig+0x390>)
 8005368:	4013      	ands	r3, r2
 800536a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800536e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005370:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005372:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005374:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005376:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005378:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800537a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800537c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800537e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005380:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005382:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005384:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005386:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800538a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800538e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005390:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a2:	3318      	adds	r3, #24
 80053a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80053a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b2:	3318      	adds	r3, #24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f000 f9ea 	bl	8005794 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c8:	3318      	adds	r3, #24
 80053ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80053ce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80053d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80053d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80053d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80053dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80053e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80053e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80053e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80053ea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80053f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005408:	2001      	movs	r0, #1
 800540a:	f000 f9c3 	bl	8005794 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005416:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800541a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10f      	bne.n	8005444 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542c:	331c      	adds	r3, #28
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005440:	331c      	adds	r3, #28
 8005442:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	461a      	mov	r2, r3
 800544a:	2100      	movs	r1, #0
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f809 	bl	8005464 <ETH_MACAddressConfig>
}
 8005452:	bf00      	nop
 8005454:	37c0      	adds	r7, #192	; 0xc0
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	ff20810f 	.word	0xff20810f
 8005460:	f8de3f23 	.word	0xf8de3f23

08005464 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3305      	adds	r3, #5
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	3204      	adds	r2, #4
 800547c:	7812      	ldrb	r2, [r2, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <ETH_MACAddressConfig+0x68>)
 8005486:	4413      	add	r3, r2
 8005488:	461a      	mov	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3303      	adds	r3, #3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	061a      	lsls	r2, r3, #24
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3302      	adds	r3, #2
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3301      	adds	r3, #1
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	4313      	orrs	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <ETH_MACAddressConfig+0x6c>)
 80054b6:	4413      	add	r3, r2
 80054b8:	461a      	mov	r2, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40028040 	.word	0x40028040
 80054d0:	40028044 	.word	0x40028044

080054d4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0208 	orr.w	r2, r2, #8
 80054ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f000 f8e9 	bl	80056d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0208 	bic.w	r2, r2, #8
 8005528:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005532:	2001      	movs	r0, #1
 8005534:	f000 f8cc 	bl	80056d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0204 	orr.w	r2, r2, #4
 8005562:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800556c:	2001      	movs	r0, #1
 800556e:	f000 f8af 	bl	80056d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0204 	bic.w	r2, r2, #4
 800559c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80055a6:	2001      	movs	r0, #1
 80055a8:	f000 f892 	bl	80056d0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055cc:	3318      	adds	r3, #24
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055dc:	3318      	adds	r3, #24
 80055de:	601a      	str	r2, [r3, #0]
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fc:	3318      	adds	r3, #24
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	3318      	adds	r3, #24
 800560e:	601a      	str	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562c:	3318      	adds	r3, #24
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0202 	orr.w	r2, r2, #2
 8005638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563c:	3318      	adds	r3, #24
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	3318      	adds	r3, #24
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0202 	bic.w	r2, r2, #2
 8005668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566c:	3318      	adds	r3, #24
 800566e:	601a      	str	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005690:	3318      	adds	r3, #24
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800569c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a0:	3318      	adds	r3, #24
 80056a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ac:	3318      	adds	r3, #24
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f000 f80c 	bl	80056d0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	3318      	adds	r3, #24
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <ETH_Delay+0x38>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <ETH_Delay+0x3c>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	0a5b      	lsrs	r3, r3, #9
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80056ec:	bf00      	nop
  } 
  while (Delay --);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1e5a      	subs	r2, r3, #1
 80056f2:	60fa      	str	r2, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f9      	bne.n	80056ec <ETH_Delay+0x1c>
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000010 	.word	0x20000010
 800570c:	10624dd3 	.word	0x10624dd3

08005710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005714:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <HAL_Init+0x40>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a0d      	ldr	r2, [pc, #52]	; (8005750 <HAL_Init+0x40>)
 800571a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800571e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_Init+0x40>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <HAL_Init+0x40>)
 8005726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800572a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800572c:	4b08      	ldr	r3, [pc, #32]	; (8005750 <HAL_Init+0x40>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a07      	ldr	r2, [pc, #28]	; (8005750 <HAL_Init+0x40>)
 8005732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005738:	2003      	movs	r0, #3
 800573a:	f000 f8fc 	bl	8005936 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800573e:	2000      	movs	r0, #0
 8005740:	f7fd f862 	bl	8002808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005744:	f7fc ff9c 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40023c00 	.word	0x40023c00

08005754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_IncTick+0x20>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_IncTick+0x24>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4413      	add	r3, r2
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <HAL_IncTick+0x24>)
 8005766:	6013      	str	r3, [r2, #0]
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000004c 	.word	0x2000004c
 8005778:	20014628 	.word	0x20014628

0800577c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return uwTick;
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <HAL_GetTick+0x14>)
 8005782:	681b      	ldr	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20014628 	.word	0x20014628

08005794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800579c:	f7ff ffee 	bl	800577c <HAL_GetTick>
 80057a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ac:	d005      	beq.n	80057ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_Delay+0x44>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80057ba:	bf00      	nop
 80057bc:	f7ff ffde 	bl	800577c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d8f7      	bhi.n	80057bc <HAL_Delay+0x28>
  {
  }
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2000004c 	.word	0x2000004c

080057dc <__NVIC_SetPriorityGrouping>:
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <__NVIC_SetPriorityGrouping+0x44>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057f8:	4013      	ands	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800580e:	4a04      	ldr	r2, [pc, #16]	; (8005820 <__NVIC_SetPriorityGrouping+0x44>)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	60d3      	str	r3, [r2, #12]
}
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000ed00 	.word	0xe000ed00

08005824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <__NVIC_GetPriorityGrouping+0x18>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	f003 0307 	and.w	r3, r3, #7
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	e000ed00 	.word	0xe000ed00

08005840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584e:	2b00      	cmp	r3, #0
 8005850:	db0b      	blt.n	800586a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	f003 021f 	and.w	r2, r3, #31
 8005858:	4907      	ldr	r1, [pc, #28]	; (8005878 <__NVIC_EnableIRQ+0x38>)
 800585a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	2001      	movs	r0, #1
 8005862:	fa00 f202 	lsl.w	r2, r0, r2
 8005866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000e100 	.word	0xe000e100

0800587c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	6039      	str	r1, [r7, #0]
 8005886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588c:	2b00      	cmp	r3, #0
 800588e:	db0a      	blt.n	80058a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	490c      	ldr	r1, [pc, #48]	; (80058c8 <__NVIC_SetPriority+0x4c>)
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	0112      	lsls	r2, r2, #4
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	440b      	add	r3, r1
 80058a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a4:	e00a      	b.n	80058bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	4908      	ldr	r1, [pc, #32]	; (80058cc <__NVIC_SetPriority+0x50>)
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	3b04      	subs	r3, #4
 80058b4:	0112      	lsls	r2, r2, #4
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	440b      	add	r3, r1
 80058ba:	761a      	strb	r2, [r3, #24]
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	e000e100 	.word	0xe000e100
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b089      	sub	sp, #36	; 0x24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f1c3 0307 	rsb	r3, r3, #7
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	bf28      	it	cs
 80058ee:	2304      	movcs	r3, #4
 80058f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3304      	adds	r3, #4
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d902      	bls.n	8005900 <NVIC_EncodePriority+0x30>
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3b03      	subs	r3, #3
 80058fe:	e000      	b.n	8005902 <NVIC_EncodePriority+0x32>
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43da      	mvns	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	401a      	ands	r2, r3
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	43d9      	mvns	r1, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005928:	4313      	orrs	r3, r2
         );
}
 800592a:	4618      	mov	r0, r3
 800592c:	3724      	adds	r7, #36	; 0x24
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff4c 	bl	80057dc <__NVIC_SetPriorityGrouping>
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800595e:	f7ff ff61 	bl	8005824 <__NVIC_GetPriorityGrouping>
 8005962:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f7ff ffb1 	bl	80058d0 <NVIC_EncodePriority>
 800596e:	4602      	mov	r2, r0
 8005970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff80 	bl	800587c <__NVIC_SetPriority>
}
 800597c:	bf00      	nop
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff ff54 	bl	8005840 <__NVIC_EnableIRQ>
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d004      	beq.n	80059be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2280      	movs	r2, #128	; 0x80
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00c      	b.n	80059d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2205      	movs	r2, #5
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f2:	b2db      	uxtb	r3, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b089      	sub	sp, #36	; 0x24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	e16b      	b.n	8005cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	f040 815a 	bne.w	8005cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d005      	beq.n	8005a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d130      	bne.n	8005ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a88:	2201      	movs	r2, #1
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 0201 	and.w	r2, r3, #1
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d017      	beq.n	8005af0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	2203      	movs	r2, #3
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d123      	bne.n	8005b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	220f      	movs	r2, #15
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	08da      	lsrs	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	2203      	movs	r2, #3
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f003 0203 	and.w	r2, r3, #3
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80b4 	beq.w	8005cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	4b60      	ldr	r3, [pc, #384]	; (8005d0c <HAL_GPIO_Init+0x30c>)
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	4a5f      	ldr	r2, [pc, #380]	; (8005d0c <HAL_GPIO_Init+0x30c>)
 8005b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b94:	6453      	str	r3, [r2, #68]	; 0x44
 8005b96:	4b5d      	ldr	r3, [pc, #372]	; (8005d0c <HAL_GPIO_Init+0x30c>)
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ba2:	4a5b      	ldr	r2, [pc, #364]	; (8005d10 <HAL_GPIO_Init+0x310>)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	3302      	adds	r3, #2
 8005baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	220f      	movs	r2, #15
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a52      	ldr	r2, [pc, #328]	; (8005d14 <HAL_GPIO_Init+0x314>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <HAL_GPIO_Init+0x226>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a51      	ldr	r2, [pc, #324]	; (8005d18 <HAL_GPIO_Init+0x318>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d025      	beq.n	8005c22 <HAL_GPIO_Init+0x222>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a50      	ldr	r2, [pc, #320]	; (8005d1c <HAL_GPIO_Init+0x31c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01f      	beq.n	8005c1e <HAL_GPIO_Init+0x21e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a4f      	ldr	r2, [pc, #316]	; (8005d20 <HAL_GPIO_Init+0x320>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d019      	beq.n	8005c1a <HAL_GPIO_Init+0x21a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a4e      	ldr	r2, [pc, #312]	; (8005d24 <HAL_GPIO_Init+0x324>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_GPIO_Init+0x216>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a4d      	ldr	r2, [pc, #308]	; (8005d28 <HAL_GPIO_Init+0x328>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00d      	beq.n	8005c12 <HAL_GPIO_Init+0x212>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a4c      	ldr	r2, [pc, #304]	; (8005d2c <HAL_GPIO_Init+0x32c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <HAL_GPIO_Init+0x20e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a4b      	ldr	r2, [pc, #300]	; (8005d30 <HAL_GPIO_Init+0x330>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_GPIO_Init+0x20a>
 8005c06:	2307      	movs	r3, #7
 8005c08:	e00e      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	e00c      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c0e:	2306      	movs	r3, #6
 8005c10:	e00a      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c12:	2305      	movs	r3, #5
 8005c14:	e008      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c16:	2304      	movs	r3, #4
 8005c18:	e006      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e004      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e002      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c26:	2300      	movs	r3, #0
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	f002 0203 	and.w	r2, r2, #3
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	4093      	lsls	r3, r2
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c38:	4935      	ldr	r1, [pc, #212]	; (8005d10 <HAL_GPIO_Init+0x310>)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c46:	4b3b      	ldr	r3, [pc, #236]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4013      	ands	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c6a:	4a32      	ldr	r2, [pc, #200]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c70:	4b30      	ldr	r3, [pc, #192]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c9a:	4b26      	ldr	r3, [pc, #152]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ce8:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <HAL_GPIO_Init+0x334>)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	f67f ae90 	bls.w	8005a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	3724      	adds	r7, #36	; 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40020000 	.word	0x40020000
 8005d18:	40020400 	.word	0x40020400
 8005d1c:	40020800 	.word	0x40020800
 8005d20:	40020c00 	.word	0x40020c00
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40021400 	.word	0x40021400
 8005d2c:	40021800 	.word	0x40021800
 8005d30:	40021c00 	.word	0x40021c00
 8005d34:	40013c00 	.word	0x40013c00

08005d38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e0cd      	b.n	8005ef0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d54:	2201      	movs	r2, #1
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4013      	ands	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	f040 80bd 	bne.w	8005eea <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005d70:	4a65      	ldr	r2, [pc, #404]	; (8005f08 <HAL_GPIO_DeInit+0x1d0>)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	089b      	lsrs	r3, r3, #2
 8005d76:	3302      	adds	r3, #2
 8005d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	220f      	movs	r2, #15
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a5d      	ldr	r2, [pc, #372]	; (8005f0c <HAL_GPIO_DeInit+0x1d4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d02b      	beq.n	8005df2 <HAL_GPIO_DeInit+0xba>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a5c      	ldr	r2, [pc, #368]	; (8005f10 <HAL_GPIO_DeInit+0x1d8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d025      	beq.n	8005dee <HAL_GPIO_DeInit+0xb6>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a5b      	ldr	r2, [pc, #364]	; (8005f14 <HAL_GPIO_DeInit+0x1dc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01f      	beq.n	8005dea <HAL_GPIO_DeInit+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a5a      	ldr	r2, [pc, #360]	; (8005f18 <HAL_GPIO_DeInit+0x1e0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d019      	beq.n	8005de6 <HAL_GPIO_DeInit+0xae>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a59      	ldr	r2, [pc, #356]	; (8005f1c <HAL_GPIO_DeInit+0x1e4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <HAL_GPIO_DeInit+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a58      	ldr	r2, [pc, #352]	; (8005f20 <HAL_GPIO_DeInit+0x1e8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00d      	beq.n	8005dde <HAL_GPIO_DeInit+0xa6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a57      	ldr	r2, [pc, #348]	; (8005f24 <HAL_GPIO_DeInit+0x1ec>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <HAL_GPIO_DeInit+0xa2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a56      	ldr	r2, [pc, #344]	; (8005f28 <HAL_GPIO_DeInit+0x1f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_GPIO_DeInit+0x9e>
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	e00e      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	e00c      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005dda:	2306      	movs	r3, #6
 8005ddc:	e00a      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005dde:	2305      	movs	r3, #5
 8005de0:	e008      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005de2:	2304      	movs	r3, #4
 8005de4:	e006      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005de6:	2303      	movs	r3, #3
 8005de8:	e004      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e002      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_GPIO_DeInit+0xbc>
 8005df2:	2300      	movs	r3, #0
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	f002 0203 	and.w	r2, r2, #3
 8005dfa:	0092      	lsls	r2, r2, #2
 8005dfc:	4093      	lsls	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d132      	bne.n	8005e6a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e04:	4b49      	ldr	r3, [pc, #292]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	4947      	ldr	r1, [pc, #284]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e12:	4b46      	ldr	r3, [pc, #280]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	4944      	ldr	r1, [pc, #272]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e20:	4b42      	ldr	r3, [pc, #264]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	43db      	mvns	r3, r3
 8005e28:	4940      	ldr	r1, [pc, #256]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e2e:	4b3f      	ldr	r3, [pc, #252]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	493d      	ldr	r1, [pc, #244]	; (8005f2c <HAL_GPIO_DeInit+0x1f4>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	220f      	movs	r2, #15
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e4c:	4a2e      	ldr	r2, [pc, #184]	; (8005f08 <HAL_GPIO_DeInit+0x1d0>)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	3302      	adds	r3, #2
 8005e54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	43da      	mvns	r2, r3
 8005e5c:	482a      	ldr	r0, [pc, #168]	; (8005f08 <HAL_GPIO_DeInit+0x1d0>)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	400a      	ands	r2, r1
 8005e64:	3302      	adds	r3, #2
 8005e66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2103      	movs	r1, #3
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	08da      	lsrs	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3208      	adds	r2, #8
 8005e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	220f      	movs	r2, #15
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	08d2      	lsrs	r2, r2, #3
 8005ea0:	4019      	ands	r1, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3208      	adds	r2, #8
 8005ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	2103      	movs	r1, #3
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	401a      	ands	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	2103      	movs	r1, #3
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	401a      	ands	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	3301      	adds	r3, #1
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2b0f      	cmp	r3, #15
 8005ef4:	f67f af2e 	bls.w	8005d54 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40013800 	.word	0x40013800
 8005f0c:	40020000 	.word	0x40020000
 8005f10:	40020400 	.word	0x40020400
 8005f14:	40020800 	.word	0x40020800
 8005f18:	40020c00 	.word	0x40020c00
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40021400 	.word	0x40021400
 8005f24:	40021800 	.word	0x40021800
 8005f28:	40021c00 	.word	0x40021c00
 8005f2c:	40013c00 	.word	0x40013c00

08005f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	887b      	ldrh	r3, [r7, #2]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
 8005f4c:	e001      	b.n	8005f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	807b      	strh	r3, [r7, #2]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f70:	787b      	ldrb	r3, [r7, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f7c:	e003      	b.n	8005f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f7e:	887b      	ldrh	r3, [r7, #2]
 8005f80:	041a      	lsls	r2, r3, #16
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	619a      	str	r2, [r3, #24]
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fa4:	887a      	ldrh	r2, [r7, #2]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	041a      	lsls	r2, r3, #16
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	43d9      	mvns	r1, r3
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	400b      	ands	r3, r1
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	619a      	str	r2, [r3, #24]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fde:	4a05      	ldr	r2, [pc, #20]	; (8005ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fb fe52 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40013c00 	.word	0x40013c00

08005ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e12b      	b.n	8006262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fb5a 	bl	80026d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800604a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800605a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800605c:	f002 ff4a 	bl	8008ef4 <HAL_RCC_GetPCLK1Freq>
 8006060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4a81      	ldr	r2, [pc, #516]	; (800626c <HAL_I2C_Init+0x274>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d807      	bhi.n	800607c <HAL_I2C_Init+0x84>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a80      	ldr	r2, [pc, #512]	; (8006270 <HAL_I2C_Init+0x278>)
 8006070:	4293      	cmp	r3, r2
 8006072:	bf94      	ite	ls
 8006074:	2301      	movls	r3, #1
 8006076:	2300      	movhi	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e006      	b.n	800608a <HAL_I2C_Init+0x92>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4a7d      	ldr	r2, [pc, #500]	; (8006274 <HAL_I2C_Init+0x27c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	bf94      	ite	ls
 8006084:	2301      	movls	r3, #1
 8006086:	2300      	movhi	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0e7      	b.n	8006262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a78      	ldr	r2, [pc, #480]	; (8006278 <HAL_I2C_Init+0x280>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	0c9b      	lsrs	r3, r3, #18
 800609c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4a6a      	ldr	r2, [pc, #424]	; (800626c <HAL_I2C_Init+0x274>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d802      	bhi.n	80060cc <HAL_I2C_Init+0xd4>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	3301      	adds	r3, #1
 80060ca:	e009      	b.n	80060e0 <HAL_I2C_Init+0xe8>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060d2:	fb02 f303 	mul.w	r3, r2, r3
 80060d6:	4a69      	ldr	r2, [pc, #420]	; (800627c <HAL_I2C_Init+0x284>)
 80060d8:	fba2 2303 	umull	r2, r3, r2, r3
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	3301      	adds	r3, #1
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	495c      	ldr	r1, [pc, #368]	; (800626c <HAL_I2C_Init+0x274>)
 80060fc:	428b      	cmp	r3, r1
 80060fe:	d819      	bhi.n	8006134 <HAL_I2C_Init+0x13c>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1e59      	subs	r1, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fbb1 f3f3 	udiv	r3, r1, r3
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006114:	400b      	ands	r3, r1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_I2C_Init+0x138>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1e59      	subs	r1, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	fbb1 f3f3 	udiv	r3, r1, r3
 8006128:	3301      	adds	r3, #1
 800612a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612e:	e051      	b.n	80061d4 <HAL_I2C_Init+0x1dc>
 8006130:	2304      	movs	r3, #4
 8006132:	e04f      	b.n	80061d4 <HAL_I2C_Init+0x1dc>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d111      	bne.n	8006160 <HAL_I2C_Init+0x168>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1e58      	subs	r0, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	440b      	add	r3, r1
 800614a:	fbb0 f3f3 	udiv	r3, r0, r3
 800614e:	3301      	adds	r3, #1
 8006150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e012      	b.n	8006186 <HAL_I2C_Init+0x18e>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1e58      	subs	r0, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	0099      	lsls	r1, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	fbb0 f3f3 	udiv	r3, r0, r3
 8006176:	3301      	adds	r3, #1
 8006178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_I2C_Init+0x196>
 800618a:	2301      	movs	r3, #1
 800618c:	e022      	b.n	80061d4 <HAL_I2C_Init+0x1dc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10e      	bne.n	80061b4 <HAL_I2C_Init+0x1bc>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1e58      	subs	r0, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6859      	ldr	r1, [r3, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	440b      	add	r3, r1
 80061a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a8:	3301      	adds	r3, #1
 80061aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	e00f      	b.n	80061d4 <HAL_I2C_Init+0x1dc>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	1e58      	subs	r0, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	0099      	lsls	r1, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ca:	3301      	adds	r3, #1
 80061cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	6809      	ldr	r1, [r1, #0]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6911      	ldr	r1, [r2, #16]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68d2      	ldr	r2, [r2, #12]
 800620e:	4311      	orrs	r1, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	430b      	orrs	r3, r1
 8006216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	000186a0 	.word	0x000186a0
 8006270:	001e847f 	.word	0x001e847f
 8006274:	003d08ff 	.word	0x003d08ff
 8006278:	431bde83 	.word	0x431bde83
 800627c:	10624dd3 	.word	0x10624dd3

08006280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	460b      	mov	r3, r1
 800628e:	817b      	strh	r3, [r7, #10]
 8006290:	4613      	mov	r3, r2
 8006292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7ff fa72 	bl	800577c <HAL_GetTick>
 8006298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	f040 80e0 	bne.w	8006468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2319      	movs	r3, #25
 80062ae:	2201      	movs	r2, #1
 80062b0:	4970      	ldr	r1, [pc, #448]	; (8006474 <HAL_I2C_Master_Transmit+0x1f4>)
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 ffa8 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
 80062c0:	e0d3      	b.n	800646a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_I2C_Master_Transmit+0x50>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0cc      	b.n	800646a <HAL_I2C_Master_Transmit+0x1ea>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d007      	beq.n	80062f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2221      	movs	r2, #33	; 0x21
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2210      	movs	r2, #16
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	893a      	ldrh	r2, [r7, #8]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a50      	ldr	r2, [pc, #320]	; (8006478 <HAL_I2C_Master_Transmit+0x1f8>)
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006338:	8979      	ldrh	r1, [r7, #10]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f001 fd6a 	bl	8007e18 <I2C_MasterRequestWrite>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e08d      	b.n	800646a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006364:	e066      	b.n	8006434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f002 f822 	bl	80083b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b04      	cmp	r3, #4
 800637c:	d107      	bne.n	800638e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e06b      	b.n	800646a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d11b      	bne.n	8006408 <HAL_I2C_Master_Transmit+0x188>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	6a39      	ldr	r1, [r7, #32]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f002 f812 	bl	8008436 <I2C_WaitOnBTFFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00d      	beq.n	8006434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	2b04      	cmp	r3, #4
 800641e:	d107      	bne.n	8006430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800642e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e01a      	b.n	800646a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	2b00      	cmp	r3, #0
 800643a:	d194      	bne.n	8006366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e000      	b.n	800646a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	00100002 	.word	0x00100002
 8006478:	ffff0000 	.word	0xffff0000

0800647c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08c      	sub	sp, #48	; 0x30
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	461a      	mov	r2, r3
 8006488:	460b      	mov	r3, r1
 800648a:	817b      	strh	r3, [r7, #10]
 800648c:	4613      	mov	r3, r2
 800648e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006490:	f7ff f974 	bl	800577c <HAL_GetTick>
 8006494:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b20      	cmp	r3, #32
 80064a0:	f040 820b 	bne.w	80068ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	2319      	movs	r3, #25
 80064aa:	2201      	movs	r2, #1
 80064ac:	497c      	ldr	r1, [pc, #496]	; (80066a0 <HAL_I2C_Master_Receive+0x224>)
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f001 feaa 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
 80064bc:	e1fe      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_I2C_Master_Receive+0x50>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e1f7      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d007      	beq.n	80064f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0201 	orr.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2222      	movs	r2, #34	; 0x22
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2210      	movs	r2, #16
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	893a      	ldrh	r2, [r7, #8]
 8006522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a5c      	ldr	r2, [pc, #368]	; (80066a4 <HAL_I2C_Master_Receive+0x228>)
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006534:	8979      	ldrh	r1, [r7, #10]
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f001 fcee 	bl	8007f1c <I2C_MasterRequestRead>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e1b8      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d113      	bne.n	800657a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006552:	2300      	movs	r3, #0
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	623b      	str	r3, [r7, #32]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e18c      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657e:	2b01      	cmp	r3, #1
 8006580:	d11b      	bne.n	80065ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e16c      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d11b      	bne.n	80065fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e2:	2300      	movs	r3, #0
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	e14c      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006620:	e138      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	2b03      	cmp	r3, #3
 8006628:	f200 80f1 	bhi.w	800680e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	2b01      	cmp	r3, #1
 8006632:	d123      	bne.n	800667c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f001 ff6f 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e139      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	855a      	strh	r2, [r3, #42]	; 0x2a
 800667a:	e10b      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	2b02      	cmp	r3, #2
 8006682:	d14e      	bne.n	8006722 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	2200      	movs	r2, #0
 800668c:	4906      	ldr	r1, [pc, #24]	; (80066a8 <HAL_I2C_Master_Receive+0x22c>)
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f001 fdba 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e10e      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
 800669e:	bf00      	nop
 80066a0:	00100002 	.word	0x00100002
 80066a4:	ffff0000 	.word	0xffff0000
 80066a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006720:	e0b8      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2200      	movs	r2, #0
 800672a:	4966      	ldr	r1, [pc, #408]	; (80068c4 <HAL_I2C_Master_Receive+0x448>)
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f001 fd6b 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0bf      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2200      	movs	r2, #0
 8006786:	494f      	ldr	r1, [pc, #316]	; (80068c4 <HAL_I2C_Master_Receive+0x448>)
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f001 fd3d 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e091      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800680c:	e042      	b.n	8006894 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800680e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f001 fe82 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e04c      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d118      	bne.n	8006894 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006898:	2b00      	cmp	r3, #0
 800689a:	f47f aec2 	bne.w	8006622 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e000      	b.n	80068bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068ba:	2302      	movs	r3, #2
  }
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3728      	adds	r7, #40	; 0x28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	00010004 	.word	0x00010004

080068c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d003      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x38>
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	f040 80bd 	bne.w	8006a7a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10d      	bne.n	8006936 <HAL_I2C_EV_IRQHandler+0x6e>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006920:	d003      	beq.n	800692a <HAL_I2C_EV_IRQHandler+0x62>
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006928:	d101      	bne.n	800692e <HAL_I2C_EV_IRQHandler+0x66>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <HAL_I2C_EV_IRQHandler+0x68>
 800692e:	2300      	movs	r3, #0
 8006930:	2b01      	cmp	r3, #1
 8006932:	f000 812e 	beq.w	8006b92 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00c      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x92>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	0a5b      	lsrs	r3, r3, #9
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d006      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fe6a 	bl	8008626 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fcbb 	bl	80072ce <I2C_Master_SB>
 8006958:	e08e      	b.n	8006a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_I2C_EV_IRQHandler+0xb2>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	0a5b      	lsrs	r3, r3, #9
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fd31 	bl	80073da <I2C_Master_ADD10>
 8006978:	e07e      	b.n	8006a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_I2C_EV_IRQHandler+0xd2>
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0a5b      	lsrs	r3, r3, #9
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fd4b 	bl	800742e <I2C_Master_ADDR>
 8006998:	e06e      	b.n	8006a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	089b      	lsrs	r3, r3, #2
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d037      	beq.n	8006a16 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b4:	f000 80ef 	beq.w	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	09db      	lsrs	r3, r3, #7
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00f      	beq.n	80069e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	089b      	lsrs	r3, r3, #2
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d103      	bne.n	80069e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f948 	bl	8006c72 <I2C_MasterTransmit_TXE>
 80069e2:	e049      	b.n	8006a78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80d2 	beq.w	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80cb 	beq.w	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d103      	bne.n	8006a0e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9cf 	bl	8006daa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a0c:	e0c3      	b.n	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa33 	bl	8006e7a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a14:	e0bf      	b.n	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a24:	f000 80b7 	beq.w	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	099b      	lsrs	r3, r3, #6
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00f      	beq.n	8006a54 <HAL_I2C_EV_IRQHandler+0x18c>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	0a9b      	lsrs	r3, r3, #10
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_I2C_EV_IRQHandler+0x18c>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	089b      	lsrs	r3, r3, #2
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d103      	bne.n	8006a54 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 faa3 	bl	8006f98 <I2C_MasterReceive_RXNE>
 8006a52:	e011      	b.n	8006a78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 809a 	beq.w	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	0a5b      	lsrs	r3, r3, #9
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8093 	beq.w	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fb42 	bl	80070fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a76:	e08e      	b.n	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006a78:	e08d      	b.n	8006b96 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e007      	b.n	8006a9c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d012      	beq.n	8006ace <HAL_I2C_EV_IRQHandler+0x206>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	0a5b      	lsrs	r3, r3, #9
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006ac4:	69b9      	ldr	r1, [r7, #24]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 ff00 	bl	80078cc <I2C_Slave_ADDR>
 8006acc:	e066      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <HAL_I2C_EV_IRQHandler+0x226>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	0a5b      	lsrs	r3, r3, #9
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 ff34 	bl	8007954 <I2C_Slave_STOPF>
 8006aec:	e056      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	2b21      	cmp	r3, #33	; 0x21
 8006af2:	d002      	beq.n	8006afa <HAL_I2C_EV_IRQHandler+0x232>
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2b29      	cmp	r3, #41	; 0x29
 8006af8:	d125      	bne.n	8006b46 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	09db      	lsrs	r3, r3, #7
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <HAL_I2C_EV_IRQHandler+0x25e>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	0a9b      	lsrs	r3, r3, #10
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_I2C_EV_IRQHandler+0x25e>
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	089b      	lsrs	r3, r3, #2
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d103      	bne.n	8006b26 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fe16 	bl	8007750 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b24:	e039      	b.n	8006b9a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	089b      	lsrs	r3, r3, #2
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d033      	beq.n	8006b9a <HAL_I2C_EV_IRQHandler+0x2d2>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	0a5b      	lsrs	r3, r3, #9
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d02d      	beq.n	8006b9a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fe43 	bl	80077ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b44:	e029      	b.n	8006b9a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	099b      	lsrs	r3, r3, #6
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00f      	beq.n	8006b72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	0a9b      	lsrs	r3, r3, #10
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	089b      	lsrs	r3, r3, #2
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fe4e 	bl	800780c <I2C_SlaveReceive_RXNE>
 8006b70:	e014      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	089b      	lsrs	r3, r3, #2
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00e      	beq.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	0a5b      	lsrs	r3, r3, #9
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fe7c 	bl	8007888 <I2C_SlaveReceive_BTF>
 8006b90:	e004      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006b92:	bf00      	nop
 8006b94:	e002      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b96:	bf00      	nop
 8006b98:	e000      	b.n	8006b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c88:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d150      	bne.n	8006d3a <I2C_MasterTransmit_TXE+0xc8>
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b21      	cmp	r3, #33	; 0x21
 8006c9c:	d14d      	bne.n	8006d3a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d01d      	beq.n	8006ce0 <I2C_MasterTransmit_TXE+0x6e>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d01a      	beq.n	8006ce0 <I2C_MasterTransmit_TXE+0x6e>
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cb0:	d016      	beq.n	8006ce0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cc0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2211      	movs	r2, #17
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ff62 	bl	8006ba2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cde:	e060      	b.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cee:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cfe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d107      	bne.n	8006d2a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff ff7d 	bl	8006c22 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d28:	e03b      	b.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff ff35 	bl	8006ba2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d38:	e033      	b.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b21      	cmp	r3, #33	; 0x21
 8006d3e:	d005      	beq.n	8006d4c <I2C_MasterTransmit_TXE+0xda>
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d12d      	bne.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b22      	cmp	r3, #34	; 0x22
 8006d4a:	d12a      	bne.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d108      	bne.n	8006d68 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d64:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d66:	e01c      	b.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d103      	bne.n	8006d7c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f880 	bl	8006e7a <I2C_MemoryTransmit_TXE_BTF>
}
 8006d7a:	e012      	b.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006da0:	e7ff      	b.n	8006da2 <I2C_MasterTransmit_TXE+0x130>
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b21      	cmp	r3, #33	; 0x21
 8006dc2:	d156      	bne.n	8006e72 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d012      	beq.n	8006df4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006df2:	e03e      	b.n	8006e72 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d01d      	beq.n	8006e36 <I2C_MasterTransmit_BTF+0x8c>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d01a      	beq.n	8006e36 <I2C_MasterTransmit_BTF+0x8c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e06:	d016      	beq.n	8006e36 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e16:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2211      	movs	r2, #17
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff feb7 	bl	8006ba2 <HAL_I2C_MasterTxCpltCallback>
}
 8006e34:	e01d      	b.n	8006e72 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e44:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e54:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fe98 	bl	8006ba2 <HAL_I2C_MasterTxCpltCallback>
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d11d      	bne.n	8006ece <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d10b      	bne.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006eb0:	e06e      	b.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	121b      	asrs	r3, r3, #8
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ecc:	e060      	b.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d10b      	bne.n	8006eee <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006eec:	e050      	b.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d14c      	bne.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b22      	cmp	r3, #34	; 0x22
 8006efa:	d108      	bne.n	8006f0e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f0a:	601a      	str	r2, [r3, #0]
}
 8006f0c:	e040      	b.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d015      	beq.n	8006f44 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b21      	cmp	r3, #33	; 0x21
 8006f1c:	d112      	bne.n	8006f44 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f42:	e025      	b.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d120      	bne.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b21      	cmp	r3, #33	; 0x21
 8006f52:	d11d      	bne.n	8006f90 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fe49 	bl	8006c22 <HAL_I2C_MemTxCpltCallback>
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b22      	cmp	r3, #34	; 0x22
 8006faa:	f040 80a2 	bne.w	80070f2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d921      	bls.n	8007000 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	f040 8082 	bne.w	80070f2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006ffe:	e078      	b.n	80070f2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	2b02      	cmp	r3, #2
 8007006:	d074      	beq.n	80070f2 <I2C_MasterReceive_RXNE+0x15a>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d002      	beq.n	8007014 <I2C_MasterReceive_RXNE+0x7c>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d16e      	bne.n	80070f2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fa4f 	bl	80084b8 <I2C_WaitOnSTOPRequestThroughIT>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d142      	bne.n	80070a6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800702e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800703e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691a      	ldr	r2, [r3, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d10a      	bne.n	8007090 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fdd4 	bl	8006c36 <HAL_I2C_MemRxCpltCallback>
}
 800708e:	e030      	b.n	80070f2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2212      	movs	r2, #18
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fd89 	bl	8006bb6 <HAL_I2C_MasterRxCpltCallback>
}
 80070a4:	e025      	b.n	80070f2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff fdac 	bl	8006c4a <HAL_I2C_ErrorCallback>
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b04      	cmp	r3, #4
 8007110:	d11b      	bne.n	800714a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007120:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007148:	e0bd      	b.n	80072c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b03      	cmp	r3, #3
 8007152:	d129      	bne.n	80071a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007162:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d00a      	beq.n	8007180 <I2C_MasterReceive_BTF+0x86>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d007      	beq.n	8007180 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071a6:	e08e      	b.n	80072c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d176      	bne.n	80072a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d002      	beq.n	80071be <I2C_MasterReceive_BTF+0xc4>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d108      	bne.n	80071d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e019      	b.n	8007204 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d002      	beq.n	80071dc <I2C_MasterReceive_BTF+0xe2>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d108      	bne.n	80071ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e00a      	b.n	8007204 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d007      	beq.n	8007204 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007202:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800725e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	d10a      	bne.n	800728a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fcd7 	bl	8006c36 <HAL_I2C_MemRxCpltCallback>
}
 8007288:	e01d      	b.n	80072c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2212      	movs	r2, #18
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fc8c 	bl	8006bb6 <HAL_I2C_MasterRxCpltCallback>
}
 800729e:	e012      	b.n	80072c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d117      	bne.n	8007312 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80072fc:	e067      	b.n	80073ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	611a      	str	r2, [r3, #16]
}
 8007310:	e05d      	b.n	80073ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800731a:	d133      	bne.n	8007384 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b21      	cmp	r3, #33	; 0x21
 8007326:	d109      	bne.n	800733c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732c:	b2db      	uxtb	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007338:	611a      	str	r2, [r3, #16]
 800733a:	e008      	b.n	800734e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <I2C_Master_SB+0x92>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d108      	bne.n	8007372 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	d032      	beq.n	80073ce <I2C_Master_SB+0x100>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d02d      	beq.n	80073ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007380:	605a      	str	r2, [r3, #4]
}
 8007382:	e024      	b.n	80073ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10e      	bne.n	80073aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007390:	b29b      	uxth	r3, r3
 8007392:	11db      	asrs	r3, r3, #7
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f003 0306 	and.w	r3, r3, #6
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f063 030f 	orn	r3, r3, #15
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	611a      	str	r2, [r3, #16]
}
 80073a8:	e011      	b.n	80073ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10d      	bne.n	80073ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	11db      	asrs	r3, r3, #7
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 0306 	and.w	r3, r3, #6
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f063 030e 	orn	r3, r3, #14
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	611a      	str	r2, [r3, #16]
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <I2C_Master_ADD10+0x26>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00c      	beq.n	8007422 <I2C_Master_ADD10+0x48>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007420:	605a      	str	r2, [r3, #4]
  }
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800742e:	b480      	push	{r7}
 8007430:	b091      	sub	sp, #68	; 0x44
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800743c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b22      	cmp	r3, #34	; 0x22
 8007456:	f040 8169 	bne.w	800772c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <I2C_Master_ADDR+0x54>
 8007462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d10b      	bne.n	8007482 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800746a:	2300      	movs	r3, #0
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	633b      	str	r3, [r7, #48]	; 0x30
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	633b      	str	r3, [r7, #48]	; 0x30
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	e160      	b.n	8007744 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	2b00      	cmp	r3, #0
 8007488:	d11d      	bne.n	80074c6 <I2C_Master_ADDR+0x98>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007492:	d118      	bne.n	80074c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007494:	2300      	movs	r3, #0
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	651a      	str	r2, [r3, #80]	; 0x50
 80074c4:	e13e      	b.n	8007744 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d113      	bne.n	80074f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d0:	2300      	movs	r3, #0
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e115      	b.n	8007724 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	f040 808a 	bne.w	8007618 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800750a:	d137      	bne.n	800757c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800752a:	d113      	bne.n	8007554 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800753c:	2300      	movs	r3, #0
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	e0e7      	b.n	8007724 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007554:	2300      	movs	r3, #0
 8007556:	623b      	str	r3, [r7, #32]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	623b      	str	r3, [r7, #32]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	623b      	str	r3, [r7, #32]
 8007568:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e0d3      	b.n	8007724 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	2b08      	cmp	r3, #8
 8007580:	d02e      	beq.n	80075e0 <I2C_Master_ADDR+0x1b2>
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	2b20      	cmp	r3, #32
 8007586:	d02b      	beq.n	80075e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758a:	2b12      	cmp	r3, #18
 800758c:	d102      	bne.n	8007594 <I2C_Master_ADDR+0x166>
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	2b01      	cmp	r3, #1
 8007592:	d125      	bne.n	80075e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b04      	cmp	r3, #4
 8007598:	d00e      	beq.n	80075b8 <I2C_Master_ADDR+0x18a>
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	2b02      	cmp	r3, #2
 800759e:	d00b      	beq.n	80075b8 <I2C_Master_ADDR+0x18a>
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	2b10      	cmp	r3, #16
 80075a4:	d008      	beq.n	80075b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e007      	b.n	80075c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	e0a1      	b.n	8007724 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f0:	2300      	movs	r3, #0
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e085      	b.n	8007724 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d14d      	bne.n	80076be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2b04      	cmp	r3, #4
 8007626:	d016      	beq.n	8007656 <I2C_Master_ADDR+0x228>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b02      	cmp	r3, #2
 800762c:	d013      	beq.n	8007656 <I2C_Master_ADDR+0x228>
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	2b10      	cmp	r3, #16
 8007632:	d010      	beq.n	8007656 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007642:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	e007      	b.n	8007666 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007664:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d117      	bne.n	80076a6 <I2C_Master_ADDR+0x278>
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800767c:	d00b      	beq.n	8007696 <I2C_Master_ADDR+0x268>
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2b01      	cmp	r3, #1
 8007682:	d008      	beq.n	8007696 <I2C_Master_ADDR+0x268>
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2b08      	cmp	r3, #8
 8007688:	d005      	beq.n	8007696 <I2C_Master_ADDR+0x268>
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	2b10      	cmp	r3, #16
 800768e:	d002      	beq.n	8007696 <I2C_Master_ADDR+0x268>
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	2b20      	cmp	r3, #32
 8007694:	d107      	bne.n	80076a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	e032      	b.n	8007724 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076dc:	d117      	bne.n	800770e <I2C_Master_ADDR+0x2e0>
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076e4:	d00b      	beq.n	80076fe <I2C_Master_ADDR+0x2d0>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d008      	beq.n	80076fe <I2C_Master_ADDR+0x2d0>
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d005      	beq.n	80076fe <I2C_Master_ADDR+0x2d0>
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d002      	beq.n	80076fe <I2C_Master_ADDR+0x2d0>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d107      	bne.n	800770e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800770c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800770e:	2300      	movs	r3, #0
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800772a:	e00b      	b.n	8007744 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
}
 8007742:	e7ff      	b.n	8007744 <I2C_Master_ADDR+0x316>
 8007744:	bf00      	nop
 8007746:	3744      	adds	r7, #68	; 0x44
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d02b      	beq.n	80077c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d114      	bne.n	80077c2 <I2C_SlaveTransmit_TXE+0x72>
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b29      	cmp	r3, #41	; 0x29
 800779c:	d111      	bne.n	80077c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2221      	movs	r2, #33	; 0x21
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2228      	movs	r2, #40	; 0x28
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fa04 	bl	8006bca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d011      	beq.n	8007800 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800781a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d02c      	beq.n	8007880 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	b2d2      	uxtb	r2, r2
 8007832:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d114      	bne.n	8007880 <I2C_SlaveReceive_RXNE+0x74>
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b2a      	cmp	r3, #42	; 0x2a
 800785a:	d111      	bne.n	8007880 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800786a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2222      	movs	r2, #34	; 0x22
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2228      	movs	r2, #40	; 0x28
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff f9af 	bl	8006bde <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d012      	beq.n	80078c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078e6:	2b28      	cmp	r3, #40	; 0x28
 80078e8:	d127      	bne.n	800793a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	089b      	lsrs	r3, r3, #2
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007906:	2301      	movs	r3, #1
 8007908:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	09db      	lsrs	r3, r3, #7
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d103      	bne.n	800791e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	81bb      	strh	r3, [r7, #12]
 800791c:	e002      	b.n	8007924 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800792c:	89ba      	ldrh	r2, [r7, #12]
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff f95d 	bl	8006bf2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007938:	e008      	b.n	800794c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f06f 0202 	mvn.w	r2, #2
 8007942:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007962:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007972:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007974:	2300      	movs	r3, #0
 8007976:	60bb      	str	r3, [r7, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	60bb      	str	r3, [r7, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b0:	d172      	bne.n	8007a98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b22      	cmp	r3, #34	; 0x22
 80079b6:	d002      	beq.n	80079be <I2C_Slave_STOPF+0x6a>
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b2a      	cmp	r3, #42	; 0x2a
 80079bc:	d135      	bne.n	8007a2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f043 0204 	orr.w	r2, r3, #4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd fff4 	bl	80059e4 <HAL_DMA_GetState>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d049      	beq.n	8007a96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	4a69      	ldr	r2, [pc, #420]	; (8007bac <I2C_Slave_STOPF+0x258>)
 8007a08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fd ffc6 	bl	80059a0 <HAL_DMA_Abort_IT>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d03d      	beq.n	8007a96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a28:	e035      	b.n	8007a96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	f043 0204 	orr.w	r2, r3, #4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fd ffbe 	bl	80059e4 <HAL_DMA_GetState>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d014      	beq.n	8007a98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	4a4e      	ldr	r2, [pc, #312]	; (8007bac <I2C_Slave_STOPF+0x258>)
 8007a74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd ff90 	bl	80059a0 <HAL_DMA_Abort_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	e000      	b.n	8007a98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d03e      	beq.n	8007b20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d112      	bne.n	8007ad6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d112      	bne.n	8007b0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	f043 0204 	orr.w	r2, r3, #4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f843 	bl	8007bb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007b2e:	e039      	b.n	8007ba4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b2a      	cmp	r3, #42	; 0x2a
 8007b34:	d109      	bne.n	8007b4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2228      	movs	r2, #40	; 0x28
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff f84a 	bl	8006bde <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b28      	cmp	r3, #40	; 0x28
 8007b54:	d111      	bne.n	8007b7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <I2C_Slave_STOPF+0x25c>)
 8007b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff f84b 	bl	8006c0e <HAL_I2C_ListenCpltCallback>
}
 8007b78:	e014      	b.n	8007ba4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	2b22      	cmp	r3, #34	; 0x22
 8007b80:	d002      	beq.n	8007b88 <I2C_Slave_STOPF+0x234>
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	2b22      	cmp	r3, #34	; 0x22
 8007b86:	d10d      	bne.n	8007ba4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f81d 	bl	8006bde <HAL_I2C_SlaveRxCpltCallback>
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	080080b9 	.word	0x080080b9
 8007bb0:	ffff0000 	.word	0xffff0000

08007bb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b10      	cmp	r3, #16
 8007bd0:	d002      	beq.n	8007bd8 <I2C_ITError+0x24>
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d10a      	bne.n	8007bee <I2C_ITError+0x3a>
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b22      	cmp	r3, #34	; 0x22
 8007bdc:	d107      	bne.n	8007bee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bf4:	2b28      	cmp	r3, #40	; 0x28
 8007bf6:	d107      	bne.n	8007c08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2228      	movs	r2, #40	; 0x28
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c06:	e015      	b.n	8007c34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c16:	d00a      	beq.n	8007c2e <I2C_ITError+0x7a>
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	2b60      	cmp	r3, #96	; 0x60
 8007c1c:	d007      	beq.n	8007c2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c42:	d162      	bne.n	8007d0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d020      	beq.n	8007ca4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	4a6a      	ldr	r2, [pc, #424]	; (8007e10 <I2C_ITError+0x25c>)
 8007c68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd fe96 	bl	80059a0 <HAL_DMA_Abort_IT>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8089 	beq.w	8007d8e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0201 	bic.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	4798      	blx	r3
 8007ca2:	e074      	b.n	8007d8e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	4a59      	ldr	r2, [pc, #356]	; (8007e10 <I2C_ITError+0x25c>)
 8007caa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fd fe75 	bl	80059a0 <HAL_DMA_Abort_IT>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d068      	beq.n	8007d8e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d10b      	bne.n	8007ce2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	e041      	b.n	8007d8e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b60      	cmp	r3, #96	; 0x60
 8007d14:	d125      	bne.n	8007d62 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d10b      	bne.n	8007d4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fe ff7f 	bl	8006c5e <HAL_I2C_AbortCpltCallback>
 8007d60:	e015      	b.n	8007d8e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d10b      	bne.n	8007d88 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7fe ff5e 	bl	8006c4a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10e      	bne.n	8007dbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d109      	bne.n	8007dbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d113      	bne.n	8007e08 <I2C_ITError+0x254>
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b28      	cmp	r3, #40	; 0x28
 8007de4:	d110      	bne.n	8007e08 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <I2C_ITError+0x260>)
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fe ff03 	bl	8006c0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	080080b9 	.word	0x080080b9
 8007e14:	ffff0000 	.word	0xffff0000

08007e18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	607a      	str	r2, [r7, #4]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	460b      	mov	r3, r1
 8007e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d006      	beq.n	8007e42 <I2C_MasterRequestWrite+0x2a>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d003      	beq.n	8007e42 <I2C_MasterRequestWrite+0x2a>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e40:	d108      	bne.n	8007e54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e00b      	b.n	8007e6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	2b12      	cmp	r3, #18
 8007e5a:	d107      	bne.n	8007e6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f9c5 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00d      	beq.n	8007ea0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e92:	d103      	bne.n	8007e9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e035      	b.n	8007f0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea8:	d108      	bne.n	8007ebc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007eaa:	897b      	ldrh	r3, [r7, #10]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007eb8:	611a      	str	r2, [r3, #16]
 8007eba:	e01b      	b.n	8007ef4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ebc:	897b      	ldrh	r3, [r7, #10]
 8007ebe:	11db      	asrs	r3, r3, #7
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0306 	and.w	r3, r3, #6
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f063 030f 	orn	r3, r3, #15
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	490e      	ldr	r1, [pc, #56]	; (8007f14 <I2C_MasterRequestWrite+0xfc>)
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f9eb 	bl	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e010      	b.n	8007f0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007eea:	897b      	ldrh	r3, [r7, #10]
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4907      	ldr	r1, [pc, #28]	; (8007f18 <I2C_MasterRequestWrite+0x100>)
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 f9db 	bl	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	00010008 	.word	0x00010008
 8007f18:	00010002 	.word	0x00010002

08007f1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d006      	beq.n	8007f56 <I2C_MasterRequestRead+0x3a>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d003      	beq.n	8007f56 <I2C_MasterRequestRead+0x3a>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f54:	d108      	bne.n	8007f68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	e00b      	b.n	8007f80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	2b11      	cmp	r3, #17
 8007f6e:	d107      	bne.n	8007f80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f93b 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00d      	beq.n	8007fb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa6:	d103      	bne.n	8007fb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e079      	b.n	80080a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fbc:	d108      	bne.n	8007fd0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007fbe:	897b      	ldrh	r3, [r7, #10]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f043 0301 	orr.w	r3, r3, #1
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	611a      	str	r2, [r3, #16]
 8007fce:	e05f      	b.n	8008090 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fd0:	897b      	ldrh	r3, [r7, #10]
 8007fd2:	11db      	asrs	r3, r3, #7
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0306 	and.w	r3, r3, #6
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f063 030f 	orn	r3, r3, #15
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4930      	ldr	r1, [pc, #192]	; (80080b0 <I2C_MasterRequestRead+0x194>)
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f961 	bl	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e054      	b.n	80080a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ffe:	897b      	ldrh	r3, [r7, #10]
 8008000:	b2da      	uxtb	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4929      	ldr	r1, [pc, #164]	; (80080b4 <I2C_MasterRequestRead+0x198>)
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f951 	bl	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e044      	b.n	80080a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801e:	2300      	movs	r3, #0
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008042:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f8d9 	bl	8008208 <I2C_WaitOnFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00d      	beq.n	8008078 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806a:	d103      	bne.n	8008074 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008072:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e017      	b.n	80080a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008078:	897b      	ldrh	r3, [r7, #10]
 800807a:	11db      	asrs	r3, r3, #7
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0306 	and.w	r3, r3, #6
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f063 030e 	orn	r3, r3, #14
 8008088:	b2da      	uxtb	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4907      	ldr	r1, [pc, #28]	; (80080b4 <I2C_MasterRequestRead+0x198>)
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f90d 	bl	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	00010008 	.word	0x00010008
 80080b4:	00010002 	.word	0x00010002

080080b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80080d2:	4b4b      	ldr	r3, [pc, #300]	; (8008200 <I2C_DMAAbort+0x148>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	08db      	lsrs	r3, r3, #3
 80080d8:	4a4a      	ldr	r2, [pc, #296]	; (8008204 <I2C_DMAAbort+0x14c>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	0a1a      	lsrs	r2, r3, #8
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	00da      	lsls	r2, r3, #3
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0220 	orr.w	r2, r3, #32
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80080fe:	e00a      	b.n	8008116 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3b01      	subs	r3, #1
 8008104:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008114:	d0ea      	beq.n	80080ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	2200      	movs	r2, #0
 8008124:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	2200      	movs	r2, #0
 8008134:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008144:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2200      	movs	r2, #0
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008158:	2200      	movs	r2, #0
 800815a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	2200      	movs	r2, #0
 800816a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b60      	cmp	r3, #96	; 0x60
 8008186:	d10e      	bne.n	80081a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2200      	movs	r2, #0
 800819c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f7fe fd5d 	bl	8006c5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081a4:	e027      	b.n	80081f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081a6:	7cfb      	ldrb	r3, [r7, #19]
 80081a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081ac:	2b28      	cmp	r3, #40	; 0x28
 80081ae:	d117      	bne.n	80081e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2228      	movs	r2, #40	; 0x28
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081de:	e007      	b.n	80081f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80081f0:	6978      	ldr	r0, [r7, #20]
 80081f2:	f7fe fd2a 	bl	8006c4a <HAL_I2C_ErrorCallback>
}
 80081f6:	bf00      	nop
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000010 	.word	0x20000010
 8008204:	14f8b589 	.word	0x14f8b589

08008208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	4613      	mov	r3, r2
 8008216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008218:	e025      	b.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008220:	d021      	beq.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008222:	f7fd faab 	bl	800577c <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d302      	bcc.n	8008238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d116      	bne.n	8008266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	f043 0220 	orr.w	r2, r3, #32
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e023      	b.n	80082ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	0c1b      	lsrs	r3, r3, #16
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d10d      	bne.n	800828c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	43da      	mvns	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4013      	ands	r3, r2
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	e00c      	b.n	80082a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	43da      	mvns	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d0b6      	beq.n	800821a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082c4:	e051      	b.n	800836a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d4:	d123      	bne.n	800831e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	f043 0204 	orr.w	r2, r3, #4
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e046      	b.n	80083ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008324:	d021      	beq.n	800836a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008326:	f7fd fa29 	bl	800577c <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	429a      	cmp	r2, r3
 8008334:	d302      	bcc.n	800833c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d116      	bne.n	800836a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	f043 0220 	orr.w	r2, r3, #32
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e020      	b.n	80083ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	0c1b      	lsrs	r3, r3, #16
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b01      	cmp	r3, #1
 8008372:	d10c      	bne.n	800838e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	43da      	mvns	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4013      	ands	r3, r2
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf14      	ite	ne
 8008386:	2301      	movne	r3, #1
 8008388:	2300      	moveq	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	e00b      	b.n	80083a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	43da      	mvns	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4013      	ands	r3, r2
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	bf14      	ite	ne
 80083a0:	2301      	movne	r3, #1
 80083a2:	2300      	moveq	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d18d      	bne.n	80082c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083c0:	e02d      	b.n	800841e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 f900 	bl	80085c8 <I2C_IsAcknowledgeFailed>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e02d      	b.n	800842e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d8:	d021      	beq.n	800841e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083da:	f7fd f9cf 	bl	800577c <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d116      	bne.n	800841e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f043 0220 	orr.w	r2, r3, #32
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e007      	b.n	800842e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008428:	2b80      	cmp	r3, #128	; 0x80
 800842a:	d1ca      	bne.n	80083c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008442:	e02d      	b.n	80084a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f8bf 	bl	80085c8 <I2C_IsAcknowledgeFailed>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e02d      	b.n	80084b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845a:	d021      	beq.n	80084a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845c:	f7fd f98e 	bl	800577c <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d116      	bne.n	80084a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	f043 0220 	orr.w	r2, r3, #32
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e007      	b.n	80084b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d1ca      	bne.n	8008444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80084c4:	4b13      	ldr	r3, [pc, #76]	; (8008514 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	08db      	lsrs	r3, r3, #3
 80084ca:	4a13      	ldr	r2, [pc, #76]	; (8008518 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	0a1a      	lsrs	r2, r3, #8
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3b01      	subs	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d107      	bne.n	80084f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	f043 0220 	orr.w	r2, r3, #32
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e008      	b.n	8008508 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008504:	d0e9      	beq.n	80084da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000010 	.word	0x20000010
 8008518:	14f8b589 	.word	0x14f8b589

0800851c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008528:	e042      	b.n	80085b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b10      	cmp	r3, #16
 8008536:	d119      	bne.n	800856c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0210 	mvn.w	r2, #16
 8008540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e029      	b.n	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856c:	f7fd f906 	bl	800577c <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	429a      	cmp	r2, r3
 800857a:	d302      	bcc.n	8008582 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d116      	bne.n	80085b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	f043 0220 	orr.w	r2, r3, #32
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e007      	b.n	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d1b5      	bne.n	800852a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085de:	d11b      	bne.n	8008618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	f043 0204 	orr.w	r2, r3, #4
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008636:	d103      	bne.n	8008640 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800863e:	e007      	b.n	8008650 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008648:	d102      	bne.n	8008650 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2208      	movs	r2, #8
 800864e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e264      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d075      	beq.n	8008766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800867a:	4ba3      	ldr	r3, [pc, #652]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	2b04      	cmp	r3, #4
 8008684:	d00c      	beq.n	80086a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008686:	4ba0      	ldr	r3, [pc, #640]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800868e:	2b08      	cmp	r3, #8
 8008690:	d112      	bne.n	80086b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008692:	4b9d      	ldr	r3, [pc, #628]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800869e:	d10b      	bne.n	80086b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086a0:	4b99      	ldr	r3, [pc, #612]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d05b      	beq.n	8008764 <HAL_RCC_OscConfig+0x108>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d157      	bne.n	8008764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e23f      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c0:	d106      	bne.n	80086d0 <HAL_RCC_OscConfig+0x74>
 80086c2:	4b91      	ldr	r3, [pc, #580]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a90      	ldr	r2, [pc, #576]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e01d      	b.n	800870c <HAL_RCC_OscConfig+0xb0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086d8:	d10c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x98>
 80086da:	4b8b      	ldr	r3, [pc, #556]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a8a      	ldr	r2, [pc, #552]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	4b88      	ldr	r3, [pc, #544]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a87      	ldr	r2, [pc, #540]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	e00b      	b.n	800870c <HAL_RCC_OscConfig+0xb0>
 80086f4:	4b84      	ldr	r3, [pc, #528]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a83      	ldr	r2, [pc, #524]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80086fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4b81      	ldr	r3, [pc, #516]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a80      	ldr	r2, [pc, #512]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800870a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008714:	f7fd f832 	bl	800577c <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800871c:	f7fd f82e 	bl	800577c <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b64      	cmp	r3, #100	; 0x64
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e204      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800872e:	4b76      	ldr	r3, [pc, #472]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0xc0>
 800873a:	e014      	b.n	8008766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873c:	f7fd f81e 	bl	800577c <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008744:	f7fd f81a 	bl	800577c <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e1f0      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008756:	4b6c      	ldr	r3, [pc, #432]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0xe8>
 8008762:	e000      	b.n	8008766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d063      	beq.n	800883a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008772:	4b65      	ldr	r3, [pc, #404]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 030c 	and.w	r3, r3, #12
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00b      	beq.n	8008796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800877e:	4b62      	ldr	r3, [pc, #392]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008786:	2b08      	cmp	r3, #8
 8008788:	d11c      	bne.n	80087c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800878a:	4b5f      	ldr	r3, [pc, #380]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d116      	bne.n	80087c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008796:	4b5c      	ldr	r3, [pc, #368]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <HAL_RCC_OscConfig+0x152>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d001      	beq.n	80087ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e1c4      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ae:	4b56      	ldr	r3, [pc, #344]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4952      	ldr	r1, [pc, #328]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087c2:	e03a      	b.n	800883a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d020      	beq.n	800880e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087cc:	4b4f      	ldr	r3, [pc, #316]	; (800890c <HAL_RCC_OscConfig+0x2b0>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d2:	f7fc ffd3 	bl	800577c <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087d8:	e008      	b.n	80087ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087da:	f7fc ffcf 	bl	800577c <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e1a5      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ec:	4b46      	ldr	r3, [pc, #280]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0f0      	beq.n	80087da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f8:	4b43      	ldr	r3, [pc, #268]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4940      	ldr	r1, [pc, #256]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008808:	4313      	orrs	r3, r2
 800880a:	600b      	str	r3, [r1, #0]
 800880c:	e015      	b.n	800883a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800880e:	4b3f      	ldr	r3, [pc, #252]	; (800890c <HAL_RCC_OscConfig+0x2b0>)
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fc ffb2 	bl	800577c <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800881c:	f7fc ffae 	bl	800577c <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e184      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d030      	beq.n	80088a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d016      	beq.n	800887c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800884e:	4b30      	ldr	r3, [pc, #192]	; (8008910 <HAL_RCC_OscConfig+0x2b4>)
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008854:	f7fc ff92 	bl	800577c <HAL_GetTick>
 8008858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800885c:	f7fc ff8e 	bl	800577c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e164      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800886e:	4b26      	ldr	r3, [pc, #152]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 8008870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x200>
 800887a:	e015      	b.n	80088a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800887c:	4b24      	ldr	r3, [pc, #144]	; (8008910 <HAL_RCC_OscConfig+0x2b4>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008882:	f7fc ff7b 	bl	800577c <HAL_GetTick>
 8008886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800888a:	f7fc ff77 	bl	800577c <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e14d      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800889c:	4b1a      	ldr	r3, [pc, #104]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 800889e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80a0 	beq.w	80089f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088ba:	4b13      	ldr	r3, [pc, #76]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	4a0e      	ldr	r2, [pc, #56]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d4:	6413      	str	r3, [r2, #64]	; 0x40
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <HAL_RCC_OscConfig+0x2ac>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <HAL_RCC_OscConfig+0x2b8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d121      	bne.n	8008936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088f2:	4b08      	ldr	r3, [pc, #32]	; (8008914 <HAL_RCC_OscConfig+0x2b8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a07      	ldr	r2, [pc, #28]	; (8008914 <HAL_RCC_OscConfig+0x2b8>)
 80088f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088fe:	f7fc ff3d 	bl	800577c <HAL_GetTick>
 8008902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008904:	e011      	b.n	800892a <HAL_RCC_OscConfig+0x2ce>
 8008906:	bf00      	nop
 8008908:	40023800 	.word	0x40023800
 800890c:	42470000 	.word	0x42470000
 8008910:	42470e80 	.word	0x42470e80
 8008914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008918:	f7fc ff30 	bl	800577c <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e106      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892a:	4b85      	ldr	r3, [pc, #532]	; (8008b40 <HAL_RCC_OscConfig+0x4e4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f0      	beq.n	8008918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d106      	bne.n	800894c <HAL_RCC_OscConfig+0x2f0>
 800893e:	4b81      	ldr	r3, [pc, #516]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008942:	4a80      	ldr	r2, [pc, #512]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	6713      	str	r3, [r2, #112]	; 0x70
 800894a:	e01c      	b.n	8008986 <HAL_RCC_OscConfig+0x32a>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b05      	cmp	r3, #5
 8008952:	d10c      	bne.n	800896e <HAL_RCC_OscConfig+0x312>
 8008954:	4b7b      	ldr	r3, [pc, #492]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	4a7a      	ldr	r2, [pc, #488]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 800895a:	f043 0304 	orr.w	r3, r3, #4
 800895e:	6713      	str	r3, [r2, #112]	; 0x70
 8008960:	4b78      	ldr	r3, [pc, #480]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	4a77      	ldr	r2, [pc, #476]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	6713      	str	r3, [r2, #112]	; 0x70
 800896c:	e00b      	b.n	8008986 <HAL_RCC_OscConfig+0x32a>
 800896e:	4b75      	ldr	r3, [pc, #468]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	4a74      	ldr	r2, [pc, #464]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	6713      	str	r3, [r2, #112]	; 0x70
 800897a:	4b72      	ldr	r3, [pc, #456]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	4a71      	ldr	r2, [pc, #452]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008980:	f023 0304 	bic.w	r3, r3, #4
 8008984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d015      	beq.n	80089ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800898e:	f7fc fef5 	bl	800577c <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008994:	e00a      	b.n	80089ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008996:	f7fc fef1 	bl	800577c <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e0c5      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ac:	4b65      	ldr	r3, [pc, #404]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0ee      	beq.n	8008996 <HAL_RCC_OscConfig+0x33a>
 80089b8:	e014      	b.n	80089e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089ba:	f7fc fedf 	bl	800577c <HAL_GetTick>
 80089be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089c0:	e00a      	b.n	80089d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089c2:	f7fc fedb 	bl	800577c <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d901      	bls.n	80089d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e0af      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089d8:	4b5a      	ldr	r3, [pc, #360]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 80089da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1ee      	bne.n	80089c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d105      	bne.n	80089f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089ea:	4b56      	ldr	r3, [pc, #344]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	4a55      	ldr	r2, [pc, #340]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 80089f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 809b 	beq.w	8008b36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a00:	4b50      	ldr	r3, [pc, #320]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 030c 	and.w	r3, r3, #12
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d05c      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d141      	bne.n	8008a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a14:	4b4c      	ldr	r3, [pc, #304]	; (8008b48 <HAL_RCC_OscConfig+0x4ec>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1a:	f7fc feaf 	bl	800577c <HAL_GetTick>
 8008a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a22:	f7fc feab 	bl	800577c <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e081      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a34:	4b43      	ldr	r3, [pc, #268]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f0      	bne.n	8008a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	019b      	lsls	r3, r3, #6
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	061b      	lsls	r3, r3, #24
 8008a64:	4937      	ldr	r1, [pc, #220]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a6a:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <HAL_RCC_OscConfig+0x4ec>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a70:	f7fc fe84 	bl	800577c <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a78:	f7fc fe80 	bl	800577c <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e056      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a8a:	4b2e      	ldr	r3, [pc, #184]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f0      	beq.n	8008a78 <HAL_RCC_OscConfig+0x41c>
 8008a96:	e04e      	b.n	8008b36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a98:	4b2b      	ldr	r3, [pc, #172]	; (8008b48 <HAL_RCC_OscConfig+0x4ec>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9e:	f7fc fe6d 	bl	800577c <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa6:	f7fc fe69 	bl	800577c <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e03f      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab8:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f0      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x44a>
 8008ac4:	e037      	b.n	8008b36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e032      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <HAL_RCC_OscConfig+0x4e8>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d028      	beq.n	8008b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d121      	bne.n	8008b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d11a      	bne.n	8008b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b02:	4013      	ands	r3, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d111      	bne.n	8008b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d107      	bne.n	8008b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d001      	beq.n	8008b36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	40007000 	.word	0x40007000
 8008b44:	40023800 	.word	0x40023800
 8008b48:	42470060 	.word	0x42470060

08008b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e0cc      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b60:	4b68      	ldr	r3, [pc, #416]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d90c      	bls.n	8008b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b6e:	4b65      	ldr	r3, [pc, #404]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b76:	4b63      	ldr	r3, [pc, #396]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d001      	beq.n	8008b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0b8      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d020      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ba0:	4b59      	ldr	r3, [pc, #356]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	4a58      	ldr	r2, [pc, #352]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bb8:	4b53      	ldr	r3, [pc, #332]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4a52      	ldr	r2, [pc, #328]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bc4:	4b50      	ldr	r3, [pc, #320]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	494d      	ldr	r1, [pc, #308]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d044      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bea:	4b47      	ldr	r3, [pc, #284]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d119      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e07f      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d003      	beq.n	8008c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d107      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c0a:	4b3f      	ldr	r3, [pc, #252]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e06f      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c1a:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e067      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c2a:	4b37      	ldr	r3, [pc, #220]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f023 0203 	bic.w	r2, r3, #3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4934      	ldr	r1, [pc, #208]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c3c:	f7fc fd9e 	bl	800577c <HAL_GetTick>
 8008c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c42:	e00a      	b.n	8008c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c44:	f7fc fd9a 	bl	800577c <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e04f      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c5a:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 020c 	and.w	r2, r3, #12
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d1eb      	bne.n	8008c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c6c:	4b25      	ldr	r3, [pc, #148]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d20c      	bcs.n	8008c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c7a:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c82:	4b20      	ldr	r3, [pc, #128]	; (8008d04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d001      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e032      	b.n	8008cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4916      	ldr	r1, [pc, #88]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cbe:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	490e      	ldr	r1, [pc, #56]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cd2:	f000 f821 	bl	8008d18 <HAL_RCC_GetSysClockFreq>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	091b      	lsrs	r3, r3, #4
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	490a      	ldr	r1, [pc, #40]	; (8008d0c <HAL_RCC_ClockConfig+0x1c0>)
 8008ce4:	5ccb      	ldrb	r3, [r1, r3]
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <HAL_RCC_ClockConfig+0x1c4>)
 8008cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <HAL_RCC_ClockConfig+0x1c8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f9 fd88 	bl	8002808 <HAL_InitTick>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	40023c00 	.word	0x40023c00
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	08029878 	.word	0x08029878
 8008d10:	20000010 	.word	0x20000010
 8008d14:	20000048 	.word	0x20000048

08008d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	607b      	str	r3, [r7, #4]
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d30:	4b67      	ldr	r3, [pc, #412]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 030c 	and.w	r3, r3, #12
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d00d      	beq.n	8008d58 <HAL_RCC_GetSysClockFreq+0x40>
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	f200 80bd 	bhi.w	8008ebc <HAL_RCC_GetSysClockFreq+0x1a4>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_RCC_GetSysClockFreq+0x34>
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d003      	beq.n	8008d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8008d4a:	e0b7      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d4c:	4b61      	ldr	r3, [pc, #388]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008d4e:	60bb      	str	r3, [r7, #8]
       break;
 8008d50:	e0b7      	b.n	8008ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d52:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008d54:	60bb      	str	r3, [r7, #8]
      break;
 8008d56:	e0b4      	b.n	8008ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d58:	4b5d      	ldr	r3, [pc, #372]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d62:	4b5b      	ldr	r3, [pc, #364]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d04d      	beq.n	8008e0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d6e:	4b58      	ldr	r3, [pc, #352]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	099b      	lsrs	r3, r3, #6
 8008d74:	461a      	mov	r2, r3
 8008d76:	f04f 0300 	mov.w	r3, #0
 8008d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d7e:	f04f 0100 	mov.w	r1, #0
 8008d82:	ea02 0800 	and.w	r8, r2, r0
 8008d86:	ea03 0901 	and.w	r9, r3, r1
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	f04f 0300 	mov.w	r3, #0
 8008d96:	014b      	lsls	r3, r1, #5
 8008d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d9c:	0142      	lsls	r2, r0, #5
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4619      	mov	r1, r3
 8008da2:	ebb0 0008 	subs.w	r0, r0, r8
 8008da6:	eb61 0109 	sbc.w	r1, r1, r9
 8008daa:	f04f 0200 	mov.w	r2, #0
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	018b      	lsls	r3, r1, #6
 8008db4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008db8:	0182      	lsls	r2, r0, #6
 8008dba:	1a12      	subs	r2, r2, r0
 8008dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8008dc0:	f04f 0000 	mov.w	r0, #0
 8008dc4:	f04f 0100 	mov.w	r1, #0
 8008dc8:	00d9      	lsls	r1, r3, #3
 8008dca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008dce:	00d0      	lsls	r0, r2, #3
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	eb12 0208 	adds.w	r2, r2, r8
 8008dd8:	eb43 0309 	adc.w	r3, r3, r9
 8008ddc:	f04f 0000 	mov.w	r0, #0
 8008de0:	f04f 0100 	mov.w	r1, #0
 8008de4:	0259      	lsls	r1, r3, #9
 8008de6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008dea:	0250      	lsls	r0, r2, #9
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4610      	mov	r0, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	461a      	mov	r2, r3
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	f7f7 ff34 	bl	8000c68 <__aeabi_uldivmod>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4613      	mov	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	e04a      	b.n	8008ea0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e0a:	4b31      	ldr	r3, [pc, #196]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	099b      	lsrs	r3, r3, #6
 8008e10:	461a      	mov	r2, r3
 8008e12:	f04f 0300 	mov.w	r3, #0
 8008e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008e1a:	f04f 0100 	mov.w	r1, #0
 8008e1e:	ea02 0400 	and.w	r4, r2, r0
 8008e22:	ea03 0501 	and.w	r5, r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f04f 0200 	mov.w	r2, #0
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	014b      	lsls	r3, r1, #5
 8008e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008e38:	0142      	lsls	r2, r0, #5
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	1b00      	subs	r0, r0, r4
 8008e40:	eb61 0105 	sbc.w	r1, r1, r5
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	018b      	lsls	r3, r1, #6
 8008e4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008e52:	0182      	lsls	r2, r0, #6
 8008e54:	1a12      	subs	r2, r2, r0
 8008e56:	eb63 0301 	sbc.w	r3, r3, r1
 8008e5a:	f04f 0000 	mov.w	r0, #0
 8008e5e:	f04f 0100 	mov.w	r1, #0
 8008e62:	00d9      	lsls	r1, r3, #3
 8008e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e68:	00d0      	lsls	r0, r2, #3
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	1912      	adds	r2, r2, r4
 8008e70:	eb45 0303 	adc.w	r3, r5, r3
 8008e74:	f04f 0000 	mov.w	r0, #0
 8008e78:	f04f 0100 	mov.w	r1, #0
 8008e7c:	0299      	lsls	r1, r3, #10
 8008e7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008e82:	0290      	lsls	r0, r2, #10
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	f7f7 fee8 	bl	8000c68 <__aeabi_uldivmod>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	3301      	adds	r3, #1
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb8:	60bb      	str	r3, [r7, #8]
      break;
 8008eba:	e002      	b.n	8008ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008ebe:	60bb      	str	r3, [r7, #8]
      break;
 8008ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ece:	bf00      	nop
 8008ed0:	40023800 	.word	0x40023800
 8008ed4:	00f42400 	.word	0x00f42400
 8008ed8:	007a1200 	.word	0x007a1200

08008edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ee0:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000010 	.word	0x20000010

08008ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ef8:	f7ff fff0 	bl	8008edc <HAL_RCC_GetHCLKFreq>
 8008efc:	4602      	mov	r2, r0
 8008efe:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	0a9b      	lsrs	r3, r3, #10
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	4903      	ldr	r1, [pc, #12]	; (8008f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f0a:	5ccb      	ldrb	r3, [r1, r3]
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40023800 	.word	0x40023800
 8008f18:	08029888 	.word	0x08029888

08008f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f20:	f7ff ffdc 	bl	8008edc <HAL_RCC_GetHCLKFreq>
 8008f24:	4602      	mov	r2, r0
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	0b5b      	lsrs	r3, r3, #13
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	4903      	ldr	r1, [pc, #12]	; (8008f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f32:	5ccb      	ldrb	r3, [r1, r3]
 8008f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	40023800 	.word	0x40023800
 8008f40:	08029888 	.word	0x08029888

08008f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	220f      	movs	r2, #15
 8008f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f54:	4b12      	ldr	r3, [pc, #72]	; (8008fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0203 	and.w	r2, r3, #3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <HAL_RCC_GetClockConfig+0x60>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0207 	and.w	r2, r3, #7
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	601a      	str	r2, [r3, #0]
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	40023c00 	.word	0x40023c00

08008fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e041      	b.n	800903e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f839 	bl	8009046 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f000 f9d8 	bl	800939c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
	...

0800905c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b01      	cmp	r3, #1
 800906e:	d001      	beq.n	8009074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e04e      	b.n	8009112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a23      	ldr	r2, [pc, #140]	; (8009120 <HAL_TIM_Base_Start_IT+0xc4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d022      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909e:	d01d      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1f      	ldr	r2, [pc, #124]	; (8009124 <HAL_TIM_Base_Start_IT+0xc8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d018      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <HAL_TIM_Base_Start_IT+0xcc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1c      	ldr	r2, [pc, #112]	; (800912c <HAL_TIM_Base_Start_IT+0xd0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00e      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <HAL_TIM_Base_Start_IT+0xd4>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a19      	ldr	r2, [pc, #100]	; (8009134 <HAL_TIM_Base_Start_IT+0xd8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d004      	beq.n	80090dc <HAL_TIM_Base_Start_IT+0x80>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <HAL_TIM_Base_Start_IT+0xdc>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d111      	bne.n	8009100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b06      	cmp	r3, #6
 80090ec:	d010      	beq.n	8009110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0201 	orr.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fe:	e007      	b.n	8009110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0201 	orr.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40010000 	.word	0x40010000
 8009124:	40000400 	.word	0x40000400
 8009128:	40000800 	.word	0x40000800
 800912c:	40000c00 	.word	0x40000c00
 8009130:	40010400 	.word	0x40010400
 8009134:	40014000 	.word	0x40014000
 8009138:	40001800 	.word	0x40001800

0800913c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b02      	cmp	r3, #2
 8009150:	d122      	bne.n	8009198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b02      	cmp	r3, #2
 800915e:	d11b      	bne.n	8009198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0202 	mvn.w	r2, #2
 8009168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8ee 	bl	8009360 <HAL_TIM_IC_CaptureCallback>
 8009184:	e005      	b.n	8009192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f8e0 	bl	800934c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8f1 	bl	8009374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d122      	bne.n	80091ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d11b      	bne.n	80091ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f06f 0204 	mvn.w	r2, #4
 80091bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2202      	movs	r2, #2
 80091c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8c4 	bl	8009360 <HAL_TIM_IC_CaptureCallback>
 80091d8:	e005      	b.n	80091e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8b6 	bl	800934c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f8c7 	bl	8009374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b08      	cmp	r3, #8
 80091f8:	d122      	bne.n	8009240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b08      	cmp	r3, #8
 8009206:	d11b      	bne.n	8009240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f06f 0208 	mvn.w	r2, #8
 8009210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2204      	movs	r2, #4
 8009216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f89a 	bl	8009360 <HAL_TIM_IC_CaptureCallback>
 800922c:	e005      	b.n	800923a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f88c 	bl	800934c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f89d 	bl	8009374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b10      	cmp	r3, #16
 800924c:	d122      	bne.n	8009294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b10      	cmp	r3, #16
 800925a:	d11b      	bne.n	8009294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f06f 0210 	mvn.w	r2, #16
 8009264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2208      	movs	r2, #8
 800926a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f870 	bl	8009360 <HAL_TIM_IC_CaptureCallback>
 8009280:	e005      	b.n	800928e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f862 	bl	800934c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f873 	bl	8009374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d10e      	bne.n	80092c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d107      	bne.n	80092c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0201 	mvn.w	r2, #1
 80092b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7f8 fd64 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ca:	2b80      	cmp	r3, #128	; 0x80
 80092cc:	d10e      	bne.n	80092ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d8:	2b80      	cmp	r3, #128	; 0x80
 80092da:	d107      	bne.n	80092ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f902 	bl	80094f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f6:	2b40      	cmp	r3, #64	; 0x40
 80092f8:	d10e      	bne.n	8009318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b40      	cmp	r3, #64	; 0x40
 8009306:	d107      	bne.n	8009318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f838 	bl	8009388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b20      	cmp	r3, #32
 8009324:	d10e      	bne.n	8009344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b20      	cmp	r3, #32
 8009332:	d107      	bne.n	8009344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f06f 0220 	mvn.w	r2, #32
 800933c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f8cc 	bl	80094dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a40      	ldr	r2, [pc, #256]	; (80094b0 <TIM_Base_SetConfig+0x114>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d013      	beq.n	80093dc <TIM_Base_SetConfig+0x40>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ba:	d00f      	beq.n	80093dc <TIM_Base_SetConfig+0x40>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a3d      	ldr	r2, [pc, #244]	; (80094b4 <TIM_Base_SetConfig+0x118>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d00b      	beq.n	80093dc <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a3c      	ldr	r2, [pc, #240]	; (80094b8 <TIM_Base_SetConfig+0x11c>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d007      	beq.n	80093dc <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a3b      	ldr	r2, [pc, #236]	; (80094bc <TIM_Base_SetConfig+0x120>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d003      	beq.n	80093dc <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a3a      	ldr	r2, [pc, #232]	; (80094c0 <TIM_Base_SetConfig+0x124>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d108      	bne.n	80093ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a2f      	ldr	r2, [pc, #188]	; (80094b0 <TIM_Base_SetConfig+0x114>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d02b      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d027      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a2c      	ldr	r2, [pc, #176]	; (80094b4 <TIM_Base_SetConfig+0x118>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d023      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a2b      	ldr	r2, [pc, #172]	; (80094b8 <TIM_Base_SetConfig+0x11c>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d01f      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a2a      	ldr	r2, [pc, #168]	; (80094bc <TIM_Base_SetConfig+0x120>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d01b      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a29      	ldr	r2, [pc, #164]	; (80094c0 <TIM_Base_SetConfig+0x124>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d017      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a28      	ldr	r2, [pc, #160]	; (80094c4 <TIM_Base_SetConfig+0x128>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d013      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a27      	ldr	r2, [pc, #156]	; (80094c8 <TIM_Base_SetConfig+0x12c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d00f      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a26      	ldr	r2, [pc, #152]	; (80094cc <TIM_Base_SetConfig+0x130>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00b      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a25      	ldr	r2, [pc, #148]	; (80094d0 <TIM_Base_SetConfig+0x134>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d007      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a24      	ldr	r2, [pc, #144]	; (80094d4 <TIM_Base_SetConfig+0x138>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d003      	beq.n	800944e <TIM_Base_SetConfig+0xb2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a23      	ldr	r2, [pc, #140]	; (80094d8 <TIM_Base_SetConfig+0x13c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d108      	bne.n	8009460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4313      	orrs	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a0a      	ldr	r2, [pc, #40]	; (80094b0 <TIM_Base_SetConfig+0x114>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d003      	beq.n	8009494 <TIM_Base_SetConfig+0xf8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a0c      	ldr	r2, [pc, #48]	; (80094c0 <TIM_Base_SetConfig+0x124>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d103      	bne.n	800949c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	615a      	str	r2, [r3, #20]
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	40010000 	.word	0x40010000
 80094b4:	40000400 	.word	0x40000400
 80094b8:	40000800 	.word	0x40000800
 80094bc:	40000c00 	.word	0x40000c00
 80094c0:	40010400 	.word	0x40010400
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40014400 	.word	0x40014400
 80094cc:	40014800 	.word	0x40014800
 80094d0:	40001800 	.word	0x40001800
 80094d4:	40001c00 	.word	0x40001c00
 80094d8:	40002000 	.word	0x40002000

080094dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e03f      	b.n	8009596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d106      	bne.n	8009530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7f9 f924 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2224      	movs	r2, #36	; 0x24
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f905 	bl	8009758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691a      	ldr	r2, [r3, #16]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800955c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695a      	ldr	r2, [r3, #20]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800956c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800957c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b08a      	sub	sp, #40	; 0x28
 80095a2:	af02      	add	r7, sp, #8
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	603b      	str	r3, [r7, #0]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d17c      	bne.n	80096b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_UART_Transmit+0x2c>
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e075      	b.n	80096ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Transmit+0x3e>
 80095d8:	2302      	movs	r3, #2
 80095da:	e06e      	b.n	80096ba <HAL_UART_Transmit+0x11c>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2221      	movs	r2, #33	; 0x21
 80095ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095f2:	f7fc f8c3 	bl	800577c <HAL_GetTick>
 80095f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960c:	d108      	bne.n	8009620 <HAL_UART_Transmit+0x82>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	e003      	b.n	8009628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009630:	e02a      	b.n	8009688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	2180      	movs	r1, #128	; 0x80
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 f840 	bl	80096c2 <UART_WaitOnFlagUntilTimeout>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e036      	b.n	80096ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	3302      	adds	r3, #2
 8009666:	61bb      	str	r3, [r7, #24]
 8009668:	e007      	b.n	800967a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	3301      	adds	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800968c:	b29b      	uxth	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1cf      	bne.n	8009632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2200      	movs	r2, #0
 800969a:	2140      	movs	r1, #64	; 0x40
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f810 	bl	80096c2 <UART_WaitOnFlagUntilTimeout>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e006      	b.n	80096ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d2:	e02c      	b.n	800972e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d028      	beq.n	800972e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80096e2:	f7fc f84b 	bl	800577c <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d21d      	bcs.n	800972e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009700:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0201 	bic.w	r2, r2, #1
 8009710:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2220      	movs	r2, #32
 800971e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e00f      	b.n	800974e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	4013      	ands	r3, r2
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	429a      	cmp	r2, r3
 800973c:	bf0c      	ite	eq
 800973e:	2301      	moveq	r3, #1
 8009740:	2300      	movne	r3, #0
 8009742:	b2db      	uxtb	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	429a      	cmp	r2, r3
 800974a:	d0c3      	beq.n	80096d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	b09f      	sub	sp, #124	; 0x7c
 800975e:	af00      	add	r7, sp, #0
 8009760:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800976c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800976e:	68d9      	ldr	r1, [r3, #12]
 8009770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	ea40 0301 	orr.w	r3, r0, r1
 8009778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800977a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	431a      	orrs	r2, r3
 8009784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	431a      	orrs	r2, r3
 800978a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	4313      	orrs	r3, r2
 8009790:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800979c:	f021 010c 	bic.w	r1, r1, #12
 80097a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097a6:	430b      	orrs	r3, r1
 80097a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b6:	6999      	ldr	r1, [r3, #24]
 80097b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	ea40 0301 	orr.w	r3, r0, r1
 80097c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	4bc5      	ldr	r3, [pc, #788]	; (8009adc <UART_SetConfig+0x384>)
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d004      	beq.n	80097d6 <UART_SetConfig+0x7e>
 80097cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	4bc3      	ldr	r3, [pc, #780]	; (8009ae0 <UART_SetConfig+0x388>)
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d103      	bne.n	80097de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097d6:	f7ff fba1 	bl	8008f1c <HAL_RCC_GetPCLK2Freq>
 80097da:	6778      	str	r0, [r7, #116]	; 0x74
 80097dc:	e002      	b.n	80097e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097de:	f7ff fb89 	bl	8008ef4 <HAL_RCC_GetPCLK1Freq>
 80097e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ec:	f040 80b6 	bne.w	800995c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097f2:	461c      	mov	r4, r3
 80097f4:	f04f 0500 	mov.w	r5, #0
 80097f8:	4622      	mov	r2, r4
 80097fa:	462b      	mov	r3, r5
 80097fc:	1891      	adds	r1, r2, r2
 80097fe:	6439      	str	r1, [r7, #64]	; 0x40
 8009800:	415b      	adcs	r3, r3
 8009802:	647b      	str	r3, [r7, #68]	; 0x44
 8009804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009808:	1912      	adds	r2, r2, r4
 800980a:	eb45 0303 	adc.w	r3, r5, r3
 800980e:	f04f 0000 	mov.w	r0, #0
 8009812:	f04f 0100 	mov.w	r1, #0
 8009816:	00d9      	lsls	r1, r3, #3
 8009818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800981c:	00d0      	lsls	r0, r2, #3
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	1911      	adds	r1, r2, r4
 8009824:	6639      	str	r1, [r7, #96]	; 0x60
 8009826:	416b      	adcs	r3, r5
 8009828:	667b      	str	r3, [r7, #100]	; 0x64
 800982a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	461a      	mov	r2, r3
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	1891      	adds	r1, r2, r2
 8009836:	63b9      	str	r1, [r7, #56]	; 0x38
 8009838:	415b      	adcs	r3, r3
 800983a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800983c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009840:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009844:	f7f7 fa10 	bl	8000c68 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4ba5      	ldr	r3, [pc, #660]	; (8009ae4 <UART_SetConfig+0x38c>)
 800984e:	fba3 2302 	umull	r2, r3, r3, r2
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	011e      	lsls	r6, r3, #4
 8009856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009858:	461c      	mov	r4, r3
 800985a:	f04f 0500 	mov.w	r5, #0
 800985e:	4622      	mov	r2, r4
 8009860:	462b      	mov	r3, r5
 8009862:	1891      	adds	r1, r2, r2
 8009864:	6339      	str	r1, [r7, #48]	; 0x30
 8009866:	415b      	adcs	r3, r3
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
 800986a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800986e:	1912      	adds	r2, r2, r4
 8009870:	eb45 0303 	adc.w	r3, r5, r3
 8009874:	f04f 0000 	mov.w	r0, #0
 8009878:	f04f 0100 	mov.w	r1, #0
 800987c:	00d9      	lsls	r1, r3, #3
 800987e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009882:	00d0      	lsls	r0, r2, #3
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	1911      	adds	r1, r2, r4
 800988a:	65b9      	str	r1, [r7, #88]	; 0x58
 800988c:	416b      	adcs	r3, r5
 800988e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	461a      	mov	r2, r3
 8009896:	f04f 0300 	mov.w	r3, #0
 800989a:	1891      	adds	r1, r2, r2
 800989c:	62b9      	str	r1, [r7, #40]	; 0x28
 800989e:	415b      	adcs	r3, r3
 80098a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80098aa:	f7f7 f9dd 	bl	8000c68 <__aeabi_uldivmod>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4b8c      	ldr	r3, [pc, #560]	; (8009ae4 <UART_SetConfig+0x38c>)
 80098b4:	fba3 1302 	umull	r1, r3, r3, r2
 80098b8:	095b      	lsrs	r3, r3, #5
 80098ba:	2164      	movs	r1, #100	; 0x64
 80098bc:	fb01 f303 	mul.w	r3, r1, r3
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	3332      	adds	r3, #50	; 0x32
 80098c6:	4a87      	ldr	r2, [pc, #540]	; (8009ae4 <UART_SetConfig+0x38c>)
 80098c8:	fba2 2303 	umull	r2, r3, r2, r3
 80098cc:	095b      	lsrs	r3, r3, #5
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80098d4:	441e      	add	r6, r3
 80098d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098d8:	4618      	mov	r0, r3
 80098da:	f04f 0100 	mov.w	r1, #0
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	1894      	adds	r4, r2, r2
 80098e4:	623c      	str	r4, [r7, #32]
 80098e6:	415b      	adcs	r3, r3
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
 80098ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098ee:	1812      	adds	r2, r2, r0
 80098f0:	eb41 0303 	adc.w	r3, r1, r3
 80098f4:	f04f 0400 	mov.w	r4, #0
 80098f8:	f04f 0500 	mov.w	r5, #0
 80098fc:	00dd      	lsls	r5, r3, #3
 80098fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009902:	00d4      	lsls	r4, r2, #3
 8009904:	4622      	mov	r2, r4
 8009906:	462b      	mov	r3, r5
 8009908:	1814      	adds	r4, r2, r0
 800990a:	653c      	str	r4, [r7, #80]	; 0x50
 800990c:	414b      	adcs	r3, r1
 800990e:	657b      	str	r3, [r7, #84]	; 0x54
 8009910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	461a      	mov	r2, r3
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	1891      	adds	r1, r2, r2
 800991c:	61b9      	str	r1, [r7, #24]
 800991e:	415b      	adcs	r3, r3
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800992a:	f7f7 f99d 	bl	8000c68 <__aeabi_uldivmod>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4b6c      	ldr	r3, [pc, #432]	; (8009ae4 <UART_SetConfig+0x38c>)
 8009934:	fba3 1302 	umull	r1, r3, r3, r2
 8009938:	095b      	lsrs	r3, r3, #5
 800993a:	2164      	movs	r1, #100	; 0x64
 800993c:	fb01 f303 	mul.w	r3, r1, r3
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	3332      	adds	r3, #50	; 0x32
 8009946:	4a67      	ldr	r2, [pc, #412]	; (8009ae4 <UART_SetConfig+0x38c>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	095b      	lsrs	r3, r3, #5
 800994e:	f003 0207 	and.w	r2, r3, #7
 8009952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4432      	add	r2, r6
 8009958:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800995a:	e0b9      	b.n	8009ad0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800995c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800995e:	461c      	mov	r4, r3
 8009960:	f04f 0500 	mov.w	r5, #0
 8009964:	4622      	mov	r2, r4
 8009966:	462b      	mov	r3, r5
 8009968:	1891      	adds	r1, r2, r2
 800996a:	6139      	str	r1, [r7, #16]
 800996c:	415b      	adcs	r3, r3
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009974:	1912      	adds	r2, r2, r4
 8009976:	eb45 0303 	adc.w	r3, r5, r3
 800997a:	f04f 0000 	mov.w	r0, #0
 800997e:	f04f 0100 	mov.w	r1, #0
 8009982:	00d9      	lsls	r1, r3, #3
 8009984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009988:	00d0      	lsls	r0, r2, #3
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	eb12 0804 	adds.w	r8, r2, r4
 8009992:	eb43 0905 	adc.w	r9, r3, r5
 8009996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	4618      	mov	r0, r3
 800999c:	f04f 0100 	mov.w	r1, #0
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	008b      	lsls	r3, r1, #2
 80099aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099ae:	0082      	lsls	r2, r0, #2
 80099b0:	4640      	mov	r0, r8
 80099b2:	4649      	mov	r1, r9
 80099b4:	f7f7 f958 	bl	8000c68 <__aeabi_uldivmod>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4b49      	ldr	r3, [pc, #292]	; (8009ae4 <UART_SetConfig+0x38c>)
 80099be:	fba3 2302 	umull	r2, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	011e      	lsls	r6, r3, #4
 80099c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099c8:	4618      	mov	r0, r3
 80099ca:	f04f 0100 	mov.w	r1, #0
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	1894      	adds	r4, r2, r2
 80099d4:	60bc      	str	r4, [r7, #8]
 80099d6:	415b      	adcs	r3, r3
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099de:	1812      	adds	r2, r2, r0
 80099e0:	eb41 0303 	adc.w	r3, r1, r3
 80099e4:	f04f 0400 	mov.w	r4, #0
 80099e8:	f04f 0500 	mov.w	r5, #0
 80099ec:	00dd      	lsls	r5, r3, #3
 80099ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099f2:	00d4      	lsls	r4, r2, #3
 80099f4:	4622      	mov	r2, r4
 80099f6:	462b      	mov	r3, r5
 80099f8:	1814      	adds	r4, r2, r0
 80099fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80099fc:	414b      	adcs	r3, r1
 80099fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f04f 0100 	mov.w	r1, #0
 8009a0a:	f04f 0200 	mov.w	r2, #0
 8009a0e:	f04f 0300 	mov.w	r3, #0
 8009a12:	008b      	lsls	r3, r1, #2
 8009a14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a18:	0082      	lsls	r2, r0, #2
 8009a1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a1e:	f7f7 f923 	bl	8000c68 <__aeabi_uldivmod>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <UART_SetConfig+0x38c>)
 8009a28:	fba3 1302 	umull	r1, r3, r3, r2
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	2164      	movs	r1, #100	; 0x64
 8009a30:	fb01 f303 	mul.w	r3, r1, r3
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	3332      	adds	r3, #50	; 0x32
 8009a3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ae4 <UART_SetConfig+0x38c>)
 8009a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a40:	095b      	lsrs	r3, r3, #5
 8009a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a46:	441e      	add	r6, r3
 8009a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f04f 0100 	mov.w	r1, #0
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	1894      	adds	r4, r2, r2
 8009a56:	603c      	str	r4, [r7, #0]
 8009a58:	415b      	adcs	r3, r3
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a60:	1812      	adds	r2, r2, r0
 8009a62:	eb41 0303 	adc.w	r3, r1, r3
 8009a66:	f04f 0400 	mov.w	r4, #0
 8009a6a:	f04f 0500 	mov.w	r5, #0
 8009a6e:	00dd      	lsls	r5, r3, #3
 8009a70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a74:	00d4      	lsls	r4, r2, #3
 8009a76:	4622      	mov	r2, r4
 8009a78:	462b      	mov	r3, r5
 8009a7a:	eb12 0a00 	adds.w	sl, r2, r0
 8009a7e:	eb43 0b01 	adc.w	fp, r3, r1
 8009a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f04f 0100 	mov.w	r1, #0
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	f04f 0300 	mov.w	r3, #0
 8009a94:	008b      	lsls	r3, r1, #2
 8009a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a9a:	0082      	lsls	r2, r0, #2
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	4659      	mov	r1, fp
 8009aa0:	f7f7 f8e2 	bl	8000c68 <__aeabi_uldivmod>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <UART_SetConfig+0x38c>)
 8009aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	2164      	movs	r1, #100	; 0x64
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	3332      	adds	r3, #50	; 0x32
 8009abc:	4a09      	ldr	r2, [pc, #36]	; (8009ae4 <UART_SetConfig+0x38c>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f003 020f 	and.w	r2, r3, #15
 8009ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4432      	add	r2, r6
 8009ace:	609a      	str	r2, [r3, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	377c      	adds	r7, #124	; 0x7c
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	bf00      	nop
 8009adc:	40011000 	.word	0x40011000
 8009ae0:	40011400 	.word	0x40011400
 8009ae4:	51eb851f 	.word	0x51eb851f

08009ae8 <DB4_write>:
	{ 0x61, 0xB2, 0xB3, 0xB4, 0xE3, 0x65, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xEF, 0xBE },
	{ 0x70, 0x63, 0xBF, 0x79, 0xE4, 0xD5, 0xE5, 0xC0, 0xC1, 0xE6, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7 }
};
#endif
static void DB4_write(int state)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d106      	bne.n	8009b04 <DB4_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB4_BIT);
 8009af6:	2201      	movs	r2, #1
 8009af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009afc:	4808      	ldr	r0, [pc, #32]	; (8009b20 <DB4_write+0x38>)
 8009afe:	f7fc fa2f 	bl	8005f60 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
	}
}
 8009b02:	e008      	b.n	8009b16 <DB4_write+0x2e>
	else if (state == 0)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <DB4_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009b10:	4803      	ldr	r0, [pc, #12]	; (8009b20 <DB4_write+0x38>)
 8009b12:	f7fc fa25 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8009b16:	bf00      	nop
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	40021000 	.word	0x40021000

08009b24 <DB5_write>:

static void DB5_write(int state)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d106      	bne.n	8009b40 <DB5_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB5_BIT);
 8009b32:	2201      	movs	r2, #1
 8009b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b38:	4808      	ldr	r0, [pc, #32]	; (8009b5c <DB5_write+0x38>)
 8009b3a:	f7fc fa11 	bl	8005f60 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
	}
}
 8009b3e:	e008      	b.n	8009b52 <DB5_write+0x2e>
	else if (state == 0)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d105      	bne.n	8009b52 <DB5_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
 8009b46:	2200      	movs	r2, #0
 8009b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b4c:	4803      	ldr	r0, [pc, #12]	; (8009b5c <DB5_write+0x38>)
 8009b4e:	f7fc fa07 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	40021000 	.word	0x40021000

08009b60 <DB6_write>:

static void DB6_write(int state)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d106      	bne.n	8009b7c <DB6_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB6_BIT);
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009b74:	4808      	ldr	r0, [pc, #32]	; (8009b98 <DB6_write+0x38>)
 8009b76:	f7fc f9f3 	bl	8005f60 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
	}
}
 8009b7a:	e008      	b.n	8009b8e <DB6_write+0x2e>
	else if (state == 0)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d105      	bne.n	8009b8e <DB6_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
 8009b82:	2200      	movs	r2, #0
 8009b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009b88:	4803      	ldr	r0, [pc, #12]	; (8009b98 <DB6_write+0x38>)
 8009b8a:	f7fc f9e9 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	40021000 	.word	0x40021000

08009b9c <DB7_write>:

static void DB7_write(int state)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d106      	bne.n	8009bb8 <DB7_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB7_BIT);
 8009baa:	2201      	movs	r2, #1
 8009bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bb0:	4808      	ldr	r0, [pc, #32]	; (8009bd4 <DB7_write+0x38>)
 8009bb2:	f7fc f9d5 	bl	8005f60 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
	}
}
 8009bb6:	e008      	b.n	8009bca <DB7_write+0x2e>
	else if (state == 0)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <DB7_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bc4:	4803      	ldr	r0, [pc, #12]	; (8009bd4 <DB7_write+0x38>)
 8009bc6:	f7fc f9cb 	bl	8005f60 <HAL_GPIO_WritePin>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	40021000 	.word	0x40021000

08009bd8 <lcd_clock>:

static inline void lcd_clock()
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
	lcd_en_set;
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009be2:	4808      	ldr	r0, [pc, #32]	; (8009c04 <lcd_clock+0x2c>)
 8009be4:	f7fc f9bc 	bl	8005f60 <HAL_GPIO_WritePin>
	delay_us( 10 );
 8009be8:	200a      	movs	r0, #10
 8009bea:	f7f9 ffa7 	bl	8003b3c <delay_us>
	lcd_en_clear;
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009bf4:	4803      	ldr	r0, [pc, #12]	; (8009c04 <lcd_clock+0x2c>)
 8009bf6:	f7fc f9b3 	bl	8005f60 <HAL_GPIO_WritePin>
	delay_us( 10 );
 8009bfa:	200a      	movs	r0, #10
 8009bfc:	f7f9 ff9e 	bl	8003b3c <delay_us>
}
 8009c00:	bf00      	nop
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	40021000 	.word	0x40021000

08009c08 <lcd_bus_write>:
	DB6_write,
	DB7_write,
};

static void lcd_bus_write(char data)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
	delay_us( 100 );
 8009c12:	2064      	movs	r0, #100	; 0x64
 8009c14:	f7f9 ff92 	bl	8003b3c <delay_us>
	for(size_t i = 0; i < 4; i++)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	e017      	b.n	8009c4e <lcd_bus_write+0x46>
	{
		if (data & ( 1 << i ))
 8009c1e:	79fa      	ldrb	r2, [r7, #7]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	fa42 f303 	asr.w	r3, r2, r3
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d006      	beq.n	8009c3c <lcd_bus_write+0x34>
		{
			bit_write[i](1);
 8009c2e:	4a0c      	ldr	r2, [pc, #48]	; (8009c60 <lcd_bus_write+0x58>)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c36:	2001      	movs	r0, #1
 8009c38:	4798      	blx	r3
 8009c3a:	e005      	b.n	8009c48 <lcd_bus_write+0x40>
		}
		else
		{
			bit_write[i](0);
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <lcd_bus_write+0x58>)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c44:	2000      	movs	r0, #0
 8009c46:	4798      	blx	r3
	for(size_t i = 0; i < 4; i++)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d9e4      	bls.n	8009c1e <lcd_bus_write+0x16>
		}
	}
	lcd_clock();
 8009c54:	f7ff ffc0 	bl	8009bd8 <lcd_clock>
}
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20000050 	.word	0x20000050

08009c64 <lcd_command_set>:

void lcd_command_set(char command )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
	lcd_rs_clear;			/* R/S = 0 */
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2180      	movs	r1, #128	; 0x80
 8009c72:	480e      	ldr	r0, [pc, #56]	; (8009cac <lcd_command_set+0x48>)
 8009c74:	f7fc f974 	bl	8005f60 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c7e:	480b      	ldr	r0, [pc, #44]	; (8009cac <lcd_command_set+0x48>)
 8009c80:	f7fc f96e 	bl	8005f60 <HAL_GPIO_WritePin>
	delay_ms( 10 );
 8009c84:	200a      	movs	r0, #10
 8009c86:	f7f9 ff64 	bl	8003b52 <delay_ms>
	lcd_bus_write(command >> 4);
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	091b      	lsrs	r3, r3, #4
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff ffb9 	bl	8009c08 <lcd_bus_write>
	lcd_bus_write(command & 0x0F);
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff ffb2 	bl	8009c08 <lcd_bus_write>
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	40021000 	.word	0x40021000

08009cb0 <lcd_init>:

void lcd_init( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
	lcd_rw_clear;
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cba:	4818      	ldr	r0, [pc, #96]	; (8009d1c <lcd_init+0x6c>)
 8009cbc:	f7fc f950 	bl	8005f60 <HAL_GPIO_WritePin>
	lcd_rs_clear;
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2180      	movs	r1, #128	; 0x80
 8009cc4:	4815      	ldr	r0, [pc, #84]	; (8009d1c <lcd_init+0x6c>)
 8009cc6:	f7fc f94b 	bl	8005f60 <HAL_GPIO_WritePin>

	lcd_bus_write(0x03);
 8009cca:	2003      	movs	r0, #3
 8009ccc:	f7ff ff9c 	bl	8009c08 <lcd_bus_write>
	delay_ms( 5 );
 8009cd0:	2005      	movs	r0, #5
 8009cd2:	f7f9 ff3e 	bl	8003b52 <delay_ms>

	lcd_bus_write(0x03);
 8009cd6:	2003      	movs	r0, #3
 8009cd8:	f7ff ff96 	bl	8009c08 <lcd_bus_write>
	delay_us( 100 );
 8009cdc:	2064      	movs	r0, #100	; 0x64
 8009cde:	f7f9 ff2d 	bl	8003b3c <delay_us>

	lcd_bus_write(0x03);
 8009ce2:	2003      	movs	r0, #3
 8009ce4:	f7ff ff90 	bl	8009c08 <lcd_bus_write>

	lcd_bus_write(0x02);
 8009ce8:	2002      	movs	r0, #2
 8009cea:	f7ff ff8d 	bl	8009c08 <lcd_bus_write>
	delay_ms( 10 );
 8009cee:	200a      	movs	r0, #10
 8009cf0:	f7f9 ff2f 	bl	8003b52 <delay_ms>

	lcd_command_set(LCD_INIT1_CMD);
 8009cf4:	2028      	movs	r0, #40	; 0x28
 8009cf6:	f7ff ffb5 	bl	8009c64 <lcd_command_set>
	delay_ms( 1 );
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	f7f9 ff29 	bl	8003b52 <delay_ms>

	lcd_command_set(LCD_INIT2_CMD);
 8009d00:	200c      	movs	r0, #12
 8009d02:	f7ff ffaf 	bl	8009c64 <lcd_command_set>
	delay_ms( 1 );
 8009d06:	2001      	movs	r0, #1
 8009d08:	f7f9 ff23 	bl	8003b52 <delay_ms>

	lcd_command_set(LCD_INIT3_CMD);
 8009d0c:	2006      	movs	r0, #6
 8009d0e:	f7ff ffa9 	bl	8009c64 <lcd_command_set>
	delay_ms( 1 );
 8009d12:	2001      	movs	r0, #1
 8009d14:	f7f9 ff1d 	bl	8003b52 <delay_ms>
}
 8009d18:	bf00      	nop
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40021000 	.word	0x40021000

08009d20 <lcd_putchar>:

void lcd_putchar( char data )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
	lcd_rs_set;
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	2180      	movs	r1, #128	; 0x80
 8009d2e:	480e      	ldr	r0, [pc, #56]	; (8009d68 <lcd_putchar+0x48>)
 8009d30:	f7fc f916 	bl	8005f60 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8009d34:	2200      	movs	r2, #0
 8009d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009d3a:	480b      	ldr	r0, [pc, #44]	; (8009d68 <lcd_putchar+0x48>)
 8009d3c:	f7fc f910 	bl	8005f60 <HAL_GPIO_WritePin>

	delay_ms( 10 );
 8009d40:	200a      	movs	r0, #10
 8009d42:	f7f9 ff06 	bl	8003b52 <delay_ms>

	lcd_bus_write(data >> 4);
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	091b      	lsrs	r3, r3, #4
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7ff ff5b 	bl	8009c08 <lcd_bus_write>
	lcd_bus_write(data & 0x0F);
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff ff54 	bl	8009c08 <lcd_bus_write>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	40021000 	.word	0x40021000

08009d6c <lcd_puts>:

bool lcd_puts( char * string )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	if( string == NULL )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <lcd_puts+0x12>
	{
		return false;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e014      	b.n	8009da8 <lcd_puts+0x3c>
	}
	for(size_t i = 0; i < strlen( string ); i++ )
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e009      	b.n	8009d98 <lcd_puts+0x2c>
	{
		lcd_putchar(string[i]);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ffc7 	bl	8009d20 <lcd_putchar>
	for(size_t i = 0; i < strlen( string ); i++ )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7f6 fa23 	bl	80001e4 <strlen>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d3ee      	bcc.n	8009d84 <lcd_puts+0x18>
	}
	return true;
 8009da6:	2301      	movs	r3, #1
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <lwip_get_netif>:
ip4_addr_t netmask;
ip4_addr_t gw;

/* USER CODE BEGIN 2 */
const struct netif * const lwip_get_netif()
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0
	return &gnetif;
 8009db4:	4b02      	ldr	r3, [pc, #8]	; (8009dc0 <lwip_get_netif+0x10>)
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20014634 	.word	0x20014634

08009dc4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009dc4:	b5b0      	push	{r4, r5, r7, lr}
 8009dc6:	b08a      	sub	sp, #40	; 0x28
 8009dc8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009dca:	2100      	movs	r1, #0
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f008 fabb 	bl	8012348 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8009dd2:	4b2a      	ldr	r3, [pc, #168]	; (8009e7c <MX_LWIP_Init+0xb8>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009dd8:	4b29      	ldr	r3, [pc, #164]	; (8009e80 <MX_LWIP_Init+0xbc>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009dde:	4b29      	ldr	r3, [pc, #164]	; (8009e84 <MX_LWIP_Init+0xc0>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009de4:	4b28      	ldr	r3, [pc, #160]	; (8009e88 <MX_LWIP_Init+0xc4>)
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	4b28      	ldr	r3, [pc, #160]	; (8009e8c <MX_LWIP_Init+0xc8>)
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	2300      	movs	r3, #0
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	4b24      	ldr	r3, [pc, #144]	; (8009e84 <MX_LWIP_Init+0xc0>)
 8009df2:	4a23      	ldr	r2, [pc, #140]	; (8009e80 <MX_LWIP_Init+0xbc>)
 8009df4:	4921      	ldr	r1, [pc, #132]	; (8009e7c <MX_LWIP_Init+0xb8>)
 8009df6:	4826      	ldr	r0, [pc, #152]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009df8:	f00a f800 	bl	8013dfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009dfc:	4824      	ldr	r0, [pc, #144]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009dfe:	f00a f9b7 	bl	8014170 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009e02:	4b23      	ldr	r3, [pc, #140]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009e04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e08:	089b      	lsrs	r3, r3, #2
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009e14:	481e      	ldr	r0, [pc, #120]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009e16:	f00a f9bb 	bl	8014190 <netif_set_up>
 8009e1a:	e002      	b.n	8009e22 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009e1c:	481c      	ldr	r0, [pc, #112]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009e1e:	f00a fa23 	bl	8014268 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009e22:	491c      	ldr	r1, [pc, #112]	; (8009e94 <MX_LWIP_Init+0xd0>)
 8009e24:	481a      	ldr	r0, [pc, #104]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009e26:	f00a fab9 	bl	801439c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8009e2e:	f107 0314 	add.w	r3, r7, #20
 8009e32:	2101      	movs	r1, #1
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fde1 	bl	800a9fc <osSemaphoreCreate>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	4a16      	ldr	r2, [pc, #88]	; (8009e98 <MX_LWIP_Init+0xd4>)
 8009e3e:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8009e40:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <MX_LWIP_Init+0xd8>)
 8009e42:	4a13      	ldr	r2, [pc, #76]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009e44:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <MX_LWIP_Init+0xd4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a14      	ldr	r2, [pc, #80]	; (8009e9c <MX_LWIP_Init+0xd8>)
 8009e4c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, link_state, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8009e4e:	4b14      	ldr	r3, [pc, #80]	; (8009ea0 <MX_LWIP_Init+0xdc>)
 8009e50:	463c      	mov	r4, r7
 8009e52:	461d      	mov	r5, r3
 8009e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	6023      	str	r3, [r4, #0]
  linkStateTaskHandle = osThreadCreate (osThread(LinkThr), &link_arg);
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	490f      	ldr	r1, [pc, #60]	; (8009e9c <MX_LWIP_Init+0xd8>)
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fc60 	bl	800a726 <osThreadCreate>
 8009e66:	4603      	mov	r3, r0
 8009e68:	4a0e      	ldr	r2, [pc, #56]	; (8009ea4 <MX_LWIP_Init+0xe0>)
 8009e6a:	6013      	str	r3, [r2, #0]
  //osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  //osThreadCreate (osThread(LinkThr), &link_arg);
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009e6c:	4808      	ldr	r0, [pc, #32]	; (8009e90 <MX_LWIP_Init+0xcc>)
 8009e6e:	f012 ff37 	bl	801cce0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009e72:	bf00      	nop
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bdb0      	pop	{r4, r5, r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	2001466c 	.word	0x2001466c
 8009e80:	20014670 	.word	0x20014670
 8009e84:	20014674 	.word	0x20014674
 8009e88:	08012259 	.word	0x08012259
 8009e8c:	0800a52d 	.word	0x0800a52d
 8009e90:	20014634 	.word	0x20014634
 8009e94:	0800a599 	.word	0x0800a599
 8009e98:	20000354 	.word	0x20000354
 8009e9c:	2001462c 	.word	0x2001462c
 8009ea0:	08025908 	.word	0x08025908
 8009ea4:	20000350 	.word	0x20000350

08009ea8 <ethernetif_phy_irq>:
/* Global Ethernet handle */
ETH_HandleTypeDef heth;

/* USER CODE BEGIN 3 */
void ethernetif_phy_irq()
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	af00      	add	r7, sp, #0
	osSignalSet (linkStateTaskHandle, SIGNAL_LINK_INTERRUPT);
 8009eac:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <ethernetif_phy_irq+0x14>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2104      	movs	r1, #4
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fc86 	bl	800a7c4 <osSignalSet>
}
 8009eb8:	bf00      	nop
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20000350 	.word	0x20000350

08009ec0 <link_state>:

void link_state(const void * arg)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
    struct link_str *link_arg = (struct link_str *)arg;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	61fb      	str	r3, [r7, #28]
    uint32_t regval = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
    osEvent event;

    for (;;)
    {
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ed8:	2104      	movs	r1, #4
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 fcb2 	bl	800a844 <osSignalWait>

        if (event.status == osEventSignal)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b08      	cmp	r3, #8
 8009ee4:	d1f4      	bne.n	8009ed0 <link_state+0x10>
        {
            /* Read PHY_MISR*/
            HAL_ETH_ReadPHYRegister((ETH_HandleTypeDef *)&heth, PHY_INTERRUPT_STATUS, &regval);
 8009ee6:	f107 0318 	add.w	r3, r7, #24
 8009eea:	461a      	mov	r2, r3
 8009eec:	211b      	movs	r1, #27
 8009eee:	480f      	ldr	r0, [pc, #60]	; (8009f2c <link_state+0x6c>)
 8009ef0:	f7fa fec7 	bl	8004c82 <HAL_ETH_ReadPHYRegister>

            /* Check whether the PHY link is up */
            if (regval & PHY_LINK_INT_UP_OCCURRED)
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d008      	beq.n	8009f10 <link_state+0x50>
            {
                /* network cable is connected */
                netif_set_link_up(link_arg->netif);
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f00a f9e2 	bl	80142cc <netif_set_link_up>
				BSP_LED_Off(RED);
 8009f08:	2002      	movs	r0, #2
 8009f0a:	f7f9 febf 	bl	8003c8c <BSP_LED_Off>
 8009f0e:	e7df      	b.n	8009ed0 <link_state+0x10>
            }
            else if (regval & PHY_LINK_INT_DOWN_OCCURED)
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0da      	beq.n	8009ed0 <link_state+0x10>
            {
            	/* network cable is dis-connected */
                netif_set_link_down(link_arg->netif);
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f00a fa0c 	bl	801433c <netif_set_link_down>
				BSP_LED_On(RED);
 8009f24:	2002      	movs	r0, #2
 8009f26:	f7f9 fe97 	bl	8003c58 <BSP_LED_On>
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8009f2a:	e7d1      	b.n	8009ed0 <link_state+0x10>
 8009f2c:	20015f48 	.word	0x20015f48

08009f30 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08e      	sub	sp, #56	; 0x38
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	605a      	str	r2, [r3, #4]
 8009f42:	609a      	str	r2, [r3, #8]
 8009f44:	60da      	str	r2, [r3, #12]
 8009f46:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a4a      	ldr	r2, [pc, #296]	; (800a078 <HAL_ETH_MspInit+0x148>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	f040 808d 	bne.w	800a06e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009f54:	2300      	movs	r3, #0
 8009f56:	623b      	str	r3, [r7, #32]
 8009f58:	4b48      	ldr	r3, [pc, #288]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5c:	4a47      	ldr	r2, [pc, #284]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009f62:	6313      	str	r3, [r2, #48]	; 0x30
 8009f64:	4b45      	ldr	r3, [pc, #276]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6c:	623b      	str	r3, [r7, #32]
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	2300      	movs	r3, #0
 8009f72:	61fb      	str	r3, [r7, #28]
 8009f74:	4b41      	ldr	r3, [pc, #260]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f78:	4a40      	ldr	r2, [pc, #256]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8009f80:	4b3e      	ldr	r3, [pc, #248]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f88:	61fb      	str	r3, [r7, #28]
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	61bb      	str	r3, [r7, #24]
 8009f90:	4b3a      	ldr	r3, [pc, #232]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	4a39      	ldr	r2, [pc, #228]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8009f9c:	4b37      	ldr	r3, [pc, #220]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	4b33      	ldr	r3, [pc, #204]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	4a32      	ldr	r2, [pc, #200]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fb2:	f043 0304 	orr.w	r3, r3, #4
 8009fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8009fb8:	4b30      	ldr	r3, [pc, #192]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]
 8009fc8:	4b2c      	ldr	r3, [pc, #176]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fcc:	4a2b      	ldr	r2, [pc, #172]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8009fd4:	4b29      	ldr	r3, [pc, #164]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	613b      	str	r3, [r7, #16]
 8009fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	4b25      	ldr	r3, [pc, #148]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe8:	4a24      	ldr	r2, [pc, #144]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009fea:	f043 0302 	orr.w	r3, r3, #2
 8009fee:	6313      	str	r3, [r2, #48]	; 0x30
 8009ff0:	4b22      	ldr	r3, [pc, #136]	; (800a07c <HAL_ETH_MspInit+0x14c>)
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009ffc:	2332      	movs	r3, #50	; 0x32
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a000:	2302      	movs	r3, #2
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a004:	2300      	movs	r3, #0
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a008:	2303      	movs	r3, #3
 800a00a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a00c:	230b      	movs	r3, #11
 800a00e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a014:	4619      	mov	r1, r3
 800a016:	481a      	ldr	r0, [pc, #104]	; (800a080 <HAL_ETH_MspInit+0x150>)
 800a018:	f7fb fcf2 	bl	8005a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a01c:	2386      	movs	r3, #134	; 0x86
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a020:	2302      	movs	r3, #2
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a024:	2300      	movs	r3, #0
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a028:	2303      	movs	r3, #3
 800a02a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a02c:	230b      	movs	r3, #11
 800a02e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a034:	4619      	mov	r1, r3
 800a036:	4813      	ldr	r0, [pc, #76]	; (800a084 <HAL_ETH_MspInit+0x154>)
 800a038:	f7fb fce2 	bl	8005a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXEN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 800a03c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a042:	2302      	movs	r3, #2
 800a044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a046:	2300      	movs	r3, #0
 800a048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a04a:	2303      	movs	r3, #3
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a04e:	230b      	movs	r3, #11
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a056:	4619      	mov	r1, r3
 800a058:	480b      	ldr	r0, [pc, #44]	; (800a088 <HAL_ETH_MspInit+0x158>)
 800a05a:	f7fb fcd1 	bl	8005a00 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a05e:	2200      	movs	r2, #0
 800a060:	2105      	movs	r1, #5
 800a062:	203d      	movs	r0, #61	; 0x3d
 800a064:	f7fb fc72 	bl	800594c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a068:	203d      	movs	r0, #61	; 0x3d
 800a06a:	f7fb fc8b 	bl	8005984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a06e:	bf00      	nop
 800a070:	3738      	adds	r7, #56	; 0x38
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	40028000 	.word	0x40028000
 800a07c:	40023800 	.word	0x40023800
 800a080:	40020800 	.word	0x40020800
 800a084:	40020000 	.word	0x40020000
 800a088:	40020400 	.word	0x40020400

0800a08c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800a094:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <HAL_ETH_RxCpltCallback+0x1c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fd1b 	bl	800aad4 <osSemaphoreRelease>
}
 800a09e:	bf00      	nop
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000358 	.word	0x20000358

0800a0ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a0ac:	b5b0      	push	{r4, r5, r7, lr}
 800a0ae:	b08a      	sub	sp, #40	; 0x28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a0b4:	4b54      	ldr	r3, [pc, #336]	; (800a208 <low_level_init+0x15c>)
 800a0b6:	4a55      	ldr	r2, [pc, #340]	; (800a20c <low_level_init+0x160>)
 800a0b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a0ba:	4b53      	ldr	r3, [pc, #332]	; (800a208 <low_level_init+0x15c>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a0c0:	4b51      	ldr	r3, [pc, #324]	; (800a208 <low_level_init+0x15c>)
 800a0c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0c6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a0c8:	4b4f      	ldr	r3, [pc, #316]	; (800a208 <low_level_init+0x15c>)
 800a0ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0ce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = KSZ8021RNL_PHY_ADDRESS;
 800a0d0:	4b4d      	ldr	r3, [pc, #308]	; (800a208 <low_level_init+0x15c>)
 800a0d2:	2203      	movs	r2, #3
 800a0d4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x10;
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x55;
 800a0dc:	2355      	movs	r3, #85	; 0x55
 800a0de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0x03;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x44;
 800a0ee:	2344      	movs	r3, #68	; 0x44
 800a0f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x12;
 800a0f4:	2312      	movs	r3, #18
 800a0f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 800a0fa:	4a43      	ldr	r2, [pc, #268]	; (800a208 <low_level_init+0x15c>)
 800a0fc:	f107 0320 	add.w	r3, r7, #32
 800a100:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800a102:	4b41      	ldr	r3, [pc, #260]	; (800a208 <low_level_init+0x15c>)
 800a104:	2201      	movs	r2, #1
 800a106:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a108:	4b3f      	ldr	r3, [pc, #252]	; (800a208 <low_level_init+0x15c>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a10e:	4b3e      	ldr	r3, [pc, #248]	; (800a208 <low_level_init+0x15c>)
 800a110:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a114:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  phy_bootstrap();
 800a116:	f7fa f883 	bl	8004220 <phy_bootstrap>
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a11a:	483b      	ldr	r0, [pc, #236]	; (800a208 <low_level_init+0x15c>)
 800a11c:	f7fa f9da 	bl	80044d4 <HAL_ETH_Init>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hal_eth_init_status == HAL_OK)
 800a126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d108      	bne.n	800a140 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a134:	f043 0304 	orr.w	r3, r3, #4
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a140:	2304      	movs	r3, #4
 800a142:	4a33      	ldr	r2, [pc, #204]	; (800a210 <low_level_init+0x164>)
 800a144:	4933      	ldr	r1, [pc, #204]	; (800a214 <low_level_init+0x168>)
 800a146:	4830      	ldr	r0, [pc, #192]	; (800a208 <low_level_init+0x15c>)
 800a148:	f7fa fad8 	bl	80046fc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a14c:	2304      	movs	r3, #4
 800a14e:	4a32      	ldr	r2, [pc, #200]	; (800a218 <low_level_init+0x16c>)
 800a150:	4932      	ldr	r1, [pc, #200]	; (800a21c <low_level_init+0x170>)
 800a152:	482d      	ldr	r0, [pc, #180]	; (800a208 <low_level_init+0x15c>)
 800a154:	f7fa fb3b 	bl	80047ce <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2206      	movs	r2, #6
 800a15c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a160:	4b29      	ldr	r3, [pc, #164]	; (800a208 <low_level_init+0x15c>)
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	781a      	ldrb	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a16c:	4b26      	ldr	r3, [pc, #152]	; (800a208 <low_level_init+0x15c>)
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	785a      	ldrb	r2, [r3, #1]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a178:	4b23      	ldr	r3, [pc, #140]	; (800a208 <low_level_init+0x15c>)
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	789a      	ldrb	r2, [r3, #2]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a184:	4b20      	ldr	r3, [pc, #128]	; (800a208 <low_level_init+0x15c>)
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	78da      	ldrb	r2, [r3, #3]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a190:	4b1d      	ldr	r3, [pc, #116]	; (800a208 <low_level_init+0x15c>)
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	791a      	ldrb	r2, [r3, #4]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a19c:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <low_level_init+0x15c>)
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	795a      	ldrb	r2, [r3, #5]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a1ae:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1b6:	f043 030a 	orr.w	r3, r3, #10
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a1c6:	f107 031c 	add.w	r3, r7, #28
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fc15 	bl	800a9fc <osSemaphoreCreate>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4a12      	ldr	r2, [pc, #72]	; (800a220 <low_level_init+0x174>)
 800a1d6:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a1d8:	4b12      	ldr	r3, [pc, #72]	; (800a224 <low_level_init+0x178>)
 800a1da:	f107 0408 	add.w	r4, r7, #8
 800a1de:	461d      	mov	r5, r3
 800a1e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 800a1e8:	f107 0308 	add.w	r3, r7, #8
 800a1ec:	6879      	ldr	r1, [r7, #4]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fa99 	bl	800a726 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a1f4:	4804      	ldr	r0, [pc, #16]	; (800a208 <low_level_init+0x15c>)
 800a1f6:	f7fa fe12 	bl	8004e1e <HAL_ETH_Start>

/* USER CODE BEGIN PHY_PRE_CONFIG */
    phy_init(&heth);
 800a1fa:	4803      	ldr	r0, [pc, #12]	; (800a208 <low_level_init+0x15c>)
 800a1fc:	f7fa f85e 	bl	80042bc <phy_init>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a200:	bf00      	nop
 800a202:	3728      	adds	r7, #40	; 0x28
 800a204:	46bd      	mov	sp, r7
 800a206:	bdb0      	pop	{r4, r5, r7, pc}
 800a208:	20015f48 	.word	0x20015f48
 800a20c:	40028000 	.word	0x40028000
 800a210:	20015f90 	.word	0x20015f90
 800a214:	20014678 	.word	0x20014678
 800a218:	200146f8 	.word	0x200146f8
 800a21c:	20015ec8 	.word	0x20015ec8
 800a220:	20000358 	.word	0x20000358
 800a224:	08025924 	.word	0x08025924

0800a228 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	; 0x28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a232:	4b4b      	ldr	r3, [pc, #300]	; (800a360 <low_level_output+0x138>)
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a24a:	4b45      	ldr	r3, [pc, #276]	; (800a360 <low_level_output+0x138>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	623b      	str	r3, [r7, #32]
 800a258:	e05a      	b.n	800a310 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	da03      	bge.n	800a26a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a262:	23f8      	movs	r3, #248	; 0xf8
 800a264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a268:	e05c      	b.n	800a324 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	895b      	ldrh	r3, [r3, #10]
 800a26e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a274:	e02f      	b.n	800a2d6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a276:	69fa      	ldr	r2, [r7, #28]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	18d0      	adds	r0, r2, r3
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	18d1      	adds	r1, r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a28a:	3304      	adds	r3, #4
 800a28c:	461a      	mov	r2, r3
 800a28e:	f016 ffc9 	bl	8021224 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da03      	bge.n	800a2a8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a2a0:	23f8      	movs	r3, #248	; 0xf8
 800a2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a2a6:	e03d      	b.n	800a324 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a2b8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a2c4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a2d0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d8c8      	bhi.n	800a276 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	18d0      	adds	r0, r2, r3
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f016 ff95 	bl	8021224 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	623b      	str	r3, [r7, #32]
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1a1      	bne.n	800a25a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a316:	6979      	ldr	r1, [r7, #20]
 800a318:	4811      	ldr	r0, [pc, #68]	; (800a360 <low_level_output+0x138>)
 800a31a:	f7fa fac5 	bl	80048a8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a324:	4b0e      	ldr	r3, [pc, #56]	; (800a360 <low_level_output+0x138>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a32c:	3314      	adds	r3, #20
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00d      	beq.n	800a354 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a338:	4b09      	ldr	r3, [pc, #36]	; (800a360 <low_level_output+0x138>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a340:	3314      	adds	r3, #20
 800a342:	2220      	movs	r2, #32
 800a344:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a346:	4b06      	ldr	r3, [pc, #24]	; (800a360 <low_level_output+0x138>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34e:	3304      	adds	r3, #4
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3728      	adds	r7, #40	; 0x28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20015f48 	.word	0x20015f48

0800a364 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08c      	sub	sp, #48	; 0x30
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a36c:	2300      	movs	r3, #0
 800a36e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a370:	2300      	movs	r3, #0
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a384:	2300      	movs	r3, #0
 800a386:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800a388:	484f      	ldr	r0, [pc, #316]	; (800a4c8 <low_level_input+0x164>)
 800a38a:	f7fa fb77 	bl	8004a7c <HAL_ETH_GetReceivedFrame_IT>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <low_level_input+0x34>

    return NULL;
 800a394:	2300      	movs	r3, #0
 800a396:	e092      	b.n	800a4be <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a398:	4b4b      	ldr	r3, [pc, #300]	; (800a4c8 <low_level_input+0x164>)
 800a39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a39e:	4b4a      	ldr	r3, [pc, #296]	; (800a4c8 <low_level_input+0x164>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a3a4:	89fb      	ldrh	r3, [r7, #14]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d007      	beq.n	800a3ba <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a3aa:	89fb      	ldrh	r3, [r7, #14]
 800a3ac:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f00a f8bc 	bl	8014530 <pbuf_alloc>
 800a3b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d04b      	beq.n	800a458 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a3c0:	4b41      	ldr	r3, [pc, #260]	; (800a4c8 <low_level_input+0x164>)
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ce:	e040      	b.n	800a452 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	895b      	ldrh	r3, [r3, #10]
 800a3d4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a3da:	e021      	b.n	800a420 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	18d0      	adds	r0, r2, r3
 800a3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	18d1      	adds	r1, r2, r3
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f016 ff16 	bl	8021224 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a404:	69fa      	ldr	r2, [r7, #28]
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	4413      	add	r3, r2
 800a40a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a40e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a41a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4413      	add	r3, r2
 800a426:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d8d6      	bhi.n	800a3dc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	18d0      	adds	r0, r2, r3
 800a436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	4413      	add	r3, r2
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	4619      	mov	r1, r3
 800a440:	f016 fef0 	bl	8021224 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	4413      	add	r3, r2
 800a44a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1bb      	bne.n	800a3d0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a458:	4b1b      	ldr	r3, [pc, #108]	; (800a4c8 <low_level_input+0x164>)
 800a45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a45e:	2300      	movs	r3, #0
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	e00b      	b.n	800a47c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	3301      	adds	r3, #1
 800a47a:	613b      	str	r3, [r7, #16]
 800a47c:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <low_level_input+0x164>)
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3ee      	bcc.n	800a464 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a486:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <low_level_input+0x164>)
 800a488:	2200      	movs	r2, #0
 800a48a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a48c:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <low_level_input+0x164>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a494:	3314      	adds	r3, #20
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00d      	beq.n	800a4bc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a4a0:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <low_level_input+0x164>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a8:	3314      	adds	r3, #20
 800a4aa:	2280      	movs	r2, #128	; 0x80
 800a4ac:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <low_level_input+0x164>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3730      	adds	r7, #48	; 0x30
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20015f48 	.word	0x20015f48

0800a4cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a4d8:	4b12      	ldr	r3, [pc, #72]	; (800a524 <ethernetif_input+0x58>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 faa9 	bl	800aa38 <osSemaphoreWait>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f5      	bne.n	800a4d8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a4ec:	480e      	ldr	r0, [pc, #56]	; (800a528 <ethernetif_input+0x5c>)
 800a4ee:	f016 fd05 	bl	8020efc <sys_mutex_lock>
        p = low_level_input( netif );
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7ff ff36 	bl	800a364 <low_level_input>
 800a4f8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	68f9      	ldr	r1, [r7, #12]
 800a506:	68b8      	ldr	r0, [r7, #8]
 800a508:	4798      	blx	r3
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800a510:	68b8      	ldr	r0, [r7, #8]
 800a512:	f00a fb23 	bl	8014b5c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a516:	4804      	ldr	r0, [pc, #16]	; (800a528 <ethernetif_input+0x5c>)
 800a518:	f016 fcff 	bl	8020f1a <sys_mutex_unlock>
      } while(p!=NULL);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e4      	bne.n	800a4ec <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a522:	e7d9      	b.n	800a4d8 <ethernetif_input+0xc>
 800a524:	20000358 	.word	0x20000358
 800a528:	200177a4 	.word	0x200177a4

0800a52c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <ethernetif_init+0x1c>
 800a53a:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <ethernetif_init+0x48>)
 800a53c:	f240 2246 	movw	r2, #582	; 0x246
 800a540:	490d      	ldr	r1, [pc, #52]	; (800a578 <ethernetif_init+0x4c>)
 800a542:	480e      	ldr	r0, [pc, #56]	; (800a57c <ethernetif_init+0x50>)
 800a544:	f017 fbb2 	bl	8021cac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2273      	movs	r2, #115	; 0x73
 800a54c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2274      	movs	r2, #116	; 0x74
 800a554:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a09      	ldr	r2, [pc, #36]	; (800a580 <ethernetif_init+0x54>)
 800a55c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a08      	ldr	r2, [pc, #32]	; (800a584 <ethernetif_init+0x58>)
 800a562:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff fda1 	bl	800a0ac <low_level_init>

  return ERR_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	08025938 	.word	0x08025938
 800a578:	08025954 	.word	0x08025954
 800a57c:	08025964 	.word	0x08025964
 800a580:	0801ec85 	.word	0x0801ec85
 800a584:	0800a229 	.word	0x0800a229

0800a588 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a58c:	f7fb f8f6 	bl	800577c <HAL_GetTick>
 800a590:	4603      	mov	r3, r0
}
 800a592:	4618      	mov	r0, r3
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a5ae:	089b      	lsrs	r3, r3, #2
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d05d      	beq.n	800a676 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a5ba:	4b34      	ldr	r3, [pc, #208]	; (800a68c <ethernetif_update_config+0xf4>)
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d03f      	beq.n	800a642 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a5c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4830      	ldr	r0, [pc, #192]	; (800a68c <ethernetif_update_config+0xf4>)
 800a5ca:	f7fa fbc2 	bl	8004d52 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a5ce:	f7fb f8d5 	bl	800577c <HAL_GetTick>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a5d6:	f107 0308 	add.w	r3, r7, #8
 800a5da:	461a      	mov	r2, r3
 800a5dc:	2101      	movs	r1, #1
 800a5de:	482b      	ldr	r0, [pc, #172]	; (800a68c <ethernetif_update_config+0xf4>)
 800a5e0:	f7fa fb4f 	bl	8004c82 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a5e4:	f7fb f8ca 	bl	800577c <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5f2:	d828      	bhi.n	800a646 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0eb      	beq.n	800a5d6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a5fe:	f107 0308 	add.w	r3, r7, #8
 800a602:	461a      	mov	r2, r3
 800a604:	211e      	movs	r1, #30
 800a606:	4821      	ldr	r0, [pc, #132]	; (800a68c <ethernetif_update_config+0xf4>)
 800a608:	f7fa fb3b 	bl	8004c82 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	f003 0304 	and.w	r3, r3, #4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a616:	4b1d      	ldr	r3, [pc, #116]	; (800a68c <ethernetif_update_config+0xf4>)
 800a618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a61c:	60da      	str	r2, [r3, #12]
 800a61e:	e002      	b.n	800a626 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a620:	4b1a      	ldr	r3, [pc, #104]	; (800a68c <ethernetif_update_config+0xf4>)
 800a622:	2200      	movs	r2, #0
 800a624:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a630:	4b16      	ldr	r3, [pc, #88]	; (800a68c <ethernetif_update_config+0xf4>)
 800a632:	2200      	movs	r2, #0
 800a634:	609a      	str	r2, [r3, #8]
 800a636:	e016      	b.n	800a666 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <ethernetif_update_config+0xf4>)
 800a63a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a63e:	609a      	str	r2, [r3, #8]
 800a640:	e011      	b.n	800a666 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a642:	bf00      	nop
 800a644:	e000      	b.n	800a648 <ethernetif_update_config+0xb0>
          goto error;
 800a646:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a648:	4b10      	ldr	r3, [pc, #64]	; (800a68c <ethernetif_update_config+0xf4>)
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	08db      	lsrs	r3, r3, #3
 800a64e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a650:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <ethernetif_update_config+0xf4>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a658:	4313      	orrs	r3, r2
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	461a      	mov	r2, r3
 800a65e:	2100      	movs	r1, #0
 800a660:	480a      	ldr	r0, [pc, #40]	; (800a68c <ethernetif_update_config+0xf4>)
 800a662:	f7fa fb76 	bl	8004d52 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a666:	2100      	movs	r1, #0
 800a668:	4808      	ldr	r0, [pc, #32]	; (800a68c <ethernetif_update_config+0xf4>)
 800a66a:	f7fa fc37 	bl	8004edc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a66e:	4807      	ldr	r0, [pc, #28]	; (800a68c <ethernetif_update_config+0xf4>)
 800a670:	f7fa fbd5 	bl	8004e1e <HAL_ETH_Start>
 800a674:	e002      	b.n	800a67c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a676:	4805      	ldr	r0, [pc, #20]	; (800a68c <ethernetif_update_config+0xf4>)
 800a678:	f7fa fc00 	bl	8004e7c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f807 	bl	800a690 <ethernetif_notify_conn_changed>
}
 800a682:	bf00      	nop
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20015f48 	.word	0x20015f48

0800a690 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6b6:	2b84      	cmp	r3, #132	; 0x84
 800a6b8:	d005      	beq.n	800a6c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a6ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	3303      	adds	r3, #3
 800a6c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6da:	f3ef 8305 	mrs	r3, IPSR
 800a6de:	607b      	str	r3, [r7, #4]
  return(result);
 800a6e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bf14      	ite	ne
 800a6e6:	2301      	movne	r3, #1
 800a6e8:	2300      	moveq	r3, #0
 800a6ea:	b2db      	uxtb	r3, r3
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a6fc:	f001 fd14 	bl	800c128 <vTaskStartScheduler>
  
  return osOK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	bd80      	pop	{r7, pc}

0800a706 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a70a:	f7ff ffe3 	bl	800a6d4 <inHandlerMode>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a714:	f001 fe12 	bl	800c33c <xTaskGetTickCountFromISR>
 800a718:	4603      	mov	r3, r0
 800a71a:	e002      	b.n	800a722 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a71c:	f001 fdfe 	bl	800c31c <xTaskGetTickCount>
 800a720:	4603      	mov	r3, r0
  }
}
 800a722:	4618      	mov	r0, r3
 800a724:	bd80      	pop	{r7, pc}

0800a726 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a726:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a728:	b087      	sub	sp, #28
 800a72a:	af02      	add	r7, sp, #8
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685c      	ldr	r4, [r3, #4]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a73c:	b29e      	uxth	r6, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff ffad 	bl	800a6a4 <makeFreeRtosPriority>
 800a74a:	4602      	mov	r2, r0
 800a74c:	f107 030c 	add.w	r3, r7, #12
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	9200      	str	r2, [sp, #0]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	4632      	mov	r2, r6
 800a758:	4629      	mov	r1, r5
 800a75a:	4620      	mov	r0, r4
 800a75c:	f001 fad6 	bl	800bd0c <xTaskCreate>
 800a760:	4603      	mov	r3, r0
 800a762:	2b01      	cmp	r3, #1
 800a764:	d001      	beq.n	800a76a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a766:	2300      	movs	r3, #0
 800a768:	e000      	b.n	800a76c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a76a:	68fb      	ldr	r3, [r7, #12]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a774 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800a778:	f002 f8d2 	bl	800c920 <xTaskGetCurrentTaskHandle>
 800a77c:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800a77e:	4618      	mov	r0, r3
 800a780:	bd80      	pop	{r7, pc}

0800a782 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 fc08 	bl	800bfa0 <vTaskDelete>
  return osOK;
 800a790:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <osDelay+0x16>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	e000      	b.n	800a7b2 <osDelay+0x18>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 fc84 	bl	800c0c0 <vTaskDelay>
  
  return osOK;
 800a7b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a7d6:	f7ff ff7d 	bl	800a6d4 <inHandlerMode>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01c      	beq.n	800a81a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	f107 0208 	add.w	r2, r7, #8
 800a7e6:	f107 030c 	add.w	r3, r7, #12
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f002 fb7f 	bl	800cef4 <xTaskGenericNotifyFromISR>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d002      	beq.n	800a802 <osSignalSet+0x3e>
      return 0x80000000;
 800a7fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a800:	e019      	b.n	800a836 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d015      	beq.n	800a834 <osSignalSet+0x70>
 800a808:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <osSignalSet+0x7c>)
 800a80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	e00c      	b.n	800a834 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	2201      	movs	r2, #1
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f002 faa8 	bl	800cd78 <xTaskGenericNotify>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d002      	beq.n	800a834 <osSignalSet+0x70>
    return 0x80000000;
 800a82e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a832:	e000      	b.n	800a836 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a834:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	e000ed04 	.word	0xe000ed04

0800a844 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a844:	b590      	push	{r4, r7, lr}
 800a846:	b089      	sub	sp, #36	; 0x24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85e:	d103      	bne.n	800a868 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a864:	61fb      	str	r3, [r7, #28]
 800a866:	e009      	b.n	800a87c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <osSignalWait+0x38>
      ticks = 1;
 800a878:	2301      	movs	r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a87c:	f7ff ff2a 	bl	800a6d4 <inHandlerMode>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a886:	2382      	movs	r3, #130	; 0x82
 800a888:	613b      	str	r3, [r7, #16]
 800a88a:	e01b      	b.n	800a8c4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a88c:	68b9      	ldr	r1, [r7, #8]
 800a88e:	f107 0310 	add.w	r3, r7, #16
 800a892:	1d1a      	adds	r2, r3, #4
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	2000      	movs	r0, #0
 800a898:	f002 fa0e 	bl	800ccb8 <xTaskNotifyWait>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d008      	beq.n	800a8b4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d102      	bne.n	800a8ae <osSignalWait+0x6a>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	613b      	str	r3, [r7, #16]
 800a8ac:	e00a      	b.n	800a8c4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a8ae:	2340      	movs	r3, #64	; 0x40
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	e007      	b.n	800a8c4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	da02      	bge.n	800a8c0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a8ba:	2386      	movs	r3, #134	; 0x86
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	e001      	b.n	800a8c4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	461c      	mov	r4, r3
 800a8c8:	f107 0310 	add.w	r3, r7, #16
 800a8cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	3724      	adds	r7, #36	; 0x24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd90      	pop	{r4, r7, pc}

0800a8dc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	f000 fbba 	bl	800b05e <xQueueCreateMutex>
 800a8ea:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a8fe:	2300      	movs	r3, #0
 800a900:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <osMutexWait+0x18>
    return osErrorParameter;
 800a908:	2380      	movs	r3, #128	; 0x80
 800a90a:	e03a      	b.n	800a982 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a916:	d103      	bne.n	800a920 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	e009      	b.n	800a934 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <osMutexWait+0x40>
      ticks = 1;
 800a930:	2301      	movs	r3, #1
 800a932:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a934:	f7ff fece 	bl	800a6d4 <inHandlerMode>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d017      	beq.n	800a96e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a93e:	f107 0308 	add.w	r3, r7, #8
 800a942:	461a      	mov	r2, r3
 800a944:	2100      	movs	r1, #0
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 ffb4 	bl	800b8b4 <xQueueReceiveFromISR>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d001      	beq.n	800a956 <osMutexWait+0x62>
      return osErrorOS;
 800a952:	23ff      	movs	r3, #255	; 0xff
 800a954:	e015      	b.n	800a982 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d011      	beq.n	800a980 <osMutexWait+0x8c>
 800a95c:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <osMutexWait+0x98>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	e008      	b.n	800a980 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a96e:	68f9      	ldr	r1, [r7, #12]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fe93 	bl	800b69c <xQueueSemaphoreTake>
 800a976:	4603      	mov	r3, r0
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d001      	beq.n	800a980 <osMutexWait+0x8c>
    return osErrorOS;
 800a97c:	23ff      	movs	r3, #255	; 0xff
 800a97e:	e000      	b.n	800a982 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	e000ed04 	.word	0xe000ed04

0800a990 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a998:	2300      	movs	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a9a0:	f7ff fe98 	bl	800a6d4 <inHandlerMode>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d016      	beq.n	800a9d8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fd06 	bl	800b3c2 <xQueueGiveFromISR>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d001      	beq.n	800a9c0 <osMutexRelease+0x30>
      return osErrorOS;
 800a9bc:	23ff      	movs	r3, #255	; 0xff
 800a9be:	e017      	b.n	800a9f0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d013      	beq.n	800a9ee <osMutexRelease+0x5e>
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <osMutexRelease+0x68>)
 800a9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	e00a      	b.n	800a9ee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a9d8:	2300      	movs	r3, #0
 800a9da:	2200      	movs	r2, #0
 800a9dc:	2100      	movs	r1, #0
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fb56 	bl	800b090 <xQueueGenericSend>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d001      	beq.n	800a9ee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a9ea:	23ff      	movs	r3, #255	; 0xff
 800a9ec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	e000ed04 	.word	0xe000ed04

0800a9fc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d110      	bne.n	800aa2e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800aa0c:	2203      	movs	r2, #3
 800aa0e:	2100      	movs	r1, #0
 800aa10:	2001      	movs	r0, #1
 800aa12:	f000 fab5 	bl	800af80 <xQueueGenericCreate>
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <osSemaphoreCreate+0x2e>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	2200      	movs	r2, #0
 800aa22:	2100      	movs	r1, #0
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fb33 	bl	800b090 <xQueueGenericSend>
    return sema;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	e000      	b.n	800aa30 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800aa2e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aa42:	2300      	movs	r3, #0
 800aa44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800aa4c:	2380      	movs	r3, #128	; 0x80
 800aa4e:	e03a      	b.n	800aac6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa5a:	d103      	bne.n	800aa64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	e009      	b.n	800aa78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d006      	beq.n	800aa78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <osSemaphoreWait+0x40>
      ticks = 1;
 800aa74:	2301      	movs	r3, #1
 800aa76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aa78:	f7ff fe2c 	bl	800a6d4 <inHandlerMode>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d017      	beq.n	800aab2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aa82:	f107 0308 	add.w	r3, r7, #8
 800aa86:	461a      	mov	r2, r3
 800aa88:	2100      	movs	r1, #0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 ff12 	bl	800b8b4 <xQueueReceiveFromISR>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d001      	beq.n	800aa9a <osSemaphoreWait+0x62>
      return osErrorOS;
 800aa96:	23ff      	movs	r3, #255	; 0xff
 800aa98:	e015      	b.n	800aac6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d011      	beq.n	800aac4 <osSemaphoreWait+0x8c>
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <osSemaphoreWait+0x98>)
 800aaa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	e008      	b.n	800aac4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800aab2:	68f9      	ldr	r1, [r7, #12]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fdf1 	bl	800b69c <xQueueSemaphoreTake>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d001      	beq.n	800aac4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aac0:	23ff      	movs	r3, #255	; 0xff
 800aac2:	e000      	b.n	800aac6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	e000ed04 	.word	0xe000ed04

0800aad4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aadc:	2300      	movs	r3, #0
 800aade:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aae4:	f7ff fdf6 	bl	800a6d4 <inHandlerMode>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d016      	beq.n	800ab1c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aaee:	f107 0308 	add.w	r3, r7, #8
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fc64 	bl	800b3c2 <xQueueGiveFromISR>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d001      	beq.n	800ab04 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ab00:	23ff      	movs	r3, #255	; 0xff
 800ab02:	e017      	b.n	800ab34 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d013      	beq.n	800ab32 <osSemaphoreRelease+0x5e>
 800ab0a:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <osSemaphoreRelease+0x68>)
 800ab0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab10:	601a      	str	r2, [r3, #0]
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	e00a      	b.n	800ab32 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2100      	movs	r1, #0
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fab4 	bl	800b090 <xQueueGenericSend>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d001      	beq.n	800ab32 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ab2e:	23ff      	movs	r3, #255	; 0xff
 800ab30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ab32:	68fb      	ldr	r3, [r7, #12]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ab48:	f7ff fdc4 	bl	800a6d4 <inHandlerMode>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ab52:	2382      	movs	r3, #130	; 0x82
 800ab54:	e003      	b.n	800ab5e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 ff68 	bl	800ba2c <vQueueDelete>

  return osOK; 
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f000 fa00 	bl	800af80 <xQueueGenericCreate>
 800ab80:	4603      	mov	r3, r0
#endif
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <osMessagePut+0x1e>
    ticks = 1;
 800aba6:	2301      	movs	r3, #1
 800aba8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800abaa:	f7ff fd93 	bl	800a6d4 <inHandlerMode>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d018      	beq.n	800abe6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800abb4:	f107 0210 	add.w	r2, r7, #16
 800abb8:	f107 0108 	add.w	r1, r7, #8
 800abbc:	2300      	movs	r3, #0
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f000 fb64 	bl	800b28c <xQueueGenericSendFromISR>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d001      	beq.n	800abce <osMessagePut+0x42>
      return osErrorOS;
 800abca:	23ff      	movs	r3, #255	; 0xff
 800abcc:	e018      	b.n	800ac00 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d014      	beq.n	800abfe <osMessagePut+0x72>
 800abd4:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <osMessagePut+0x7c>)
 800abd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	e00b      	b.n	800abfe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800abe6:	f107 0108 	add.w	r1, r7, #8
 800abea:	2300      	movs	r3, #0
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fa4e 	bl	800b090 <xQueueGenericSend>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d001      	beq.n	800abfe <osMessagePut+0x72>
      return osErrorOS;
 800abfa:	23ff      	movs	r3, #255	; 0xff
 800abfc:	e000      	b.n	800ac00 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ac0c:	b590      	push	{r4, r7, lr}
 800ac0e:	b08b      	sub	sp, #44	; 0x2c
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10a      	bne.n	800ac3c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ac26:	2380      	movs	r3, #128	; 0x80
 800ac28:	617b      	str	r3, [r7, #20]
    return event;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	461c      	mov	r4, r3
 800ac2e:	f107 0314 	add.w	r3, r7, #20
 800ac32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac3a:	e054      	b.n	800ace6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac4a:	d103      	bne.n	800ac54 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ac4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac50:	627b      	str	r3, [r7, #36]	; 0x24
 800ac52:	e009      	b.n	800ac68 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <osMessageGet+0x5c>
      ticks = 1;
 800ac64:	2301      	movs	r3, #1
 800ac66:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ac68:	f7ff fd34 	bl	800a6d4 <inHandlerMode>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d01c      	beq.n	800acac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ac72:	f107 0220 	add.w	r2, r7, #32
 800ac76:	f107 0314 	add.w	r3, r7, #20
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	68b8      	ldr	r0, [r7, #8]
 800ac80:	f000 fe18 	bl	800b8b4 <xQueueReceiveFromISR>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d102      	bne.n	800ac90 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ac8a:	2310      	movs	r3, #16
 800ac8c:	617b      	str	r3, [r7, #20]
 800ac8e:	e001      	b.n	800ac94 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d01d      	beq.n	800acd6 <osMessageGet+0xca>
 800ac9a:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <osMessageGet+0xe4>)
 800ac9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	e014      	b.n	800acd6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	3304      	adds	r3, #4
 800acb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb4:	4619      	mov	r1, r3
 800acb6:	68b8      	ldr	r0, [r7, #8]
 800acb8:	f000 fc10 	bl	800b4dc <xQueueReceive>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d102      	bne.n	800acc8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800acc2:	2310      	movs	r3, #16
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	e006      	b.n	800acd6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <osMessageGet+0xc6>
 800acce:	2300      	movs	r3, #0
 800acd0:	e000      	b.n	800acd4 <osMessageGet+0xc8>
 800acd2:	2340      	movs	r3, #64	; 0x40
 800acd4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	461c      	mov	r4, r3
 800acda:	f107 0314 	add.w	r3, r7, #20
 800acde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ace2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	372c      	adds	r7, #44	; 0x2c
 800acea:	46bd      	mov	sp, r7
 800acec:	bd90      	pop	{r4, r7, pc}
 800acee:	bf00      	nop
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800acfc:	f7ff fcea 	bl	800a6d4 <inHandlerMode>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d004      	beq.n	800ad10 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fe72 	bl	800b9f0 <uxQueueMessagesWaitingFromISR>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	e003      	b.n	800ad18 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fe4f 	bl	800b9b4 <uxQueueMessagesWaiting>
 800ad16:	4603      	mov	r3, r0
  }
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ad28:	f7ff fcd4 	bl	800a6d4 <inHandlerMode>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <osMessageDelete+0x16>
    return osErrorISR;
 800ad32:	2382      	movs	r3, #130	; 0x82
 800ad34:	e003      	b.n	800ad3e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fe78 	bl	800ba2c <vQueueDelete>

  return osOK; 
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f103 0208 	add.w	r2, r3, #8
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f103 0208 	add.w	r2, r3, #8
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f103 0208 	add.w	r2, r3, #8
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad7a:	bf00      	nop
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad86:	b480      	push	{r7}
 800ad88:	b083      	sub	sp, #12
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]
}
 800addc:	bf00      	nop
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adfe:	d103      	bne.n	800ae08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	e00c      	b.n	800ae22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	e002      	b.n	800ae16 <vListInsert+0x2e>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	60fb      	str	r3, [r7, #12]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d2f6      	bcs.n	800ae10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	601a      	str	r2, [r3, #0]
}
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b085      	sub	sp, #20
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6892      	ldr	r2, [r2, #8]
 800ae70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	6852      	ldr	r2, [r2, #4]
 800ae7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d103      	bne.n	800ae8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689a      	ldr	r2, [r3, #8]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
	...

0800aeb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aeda:	f002 fa83 	bl	800d3e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee6:	68f9      	ldr	r1, [r7, #12]
 800aee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aeea:	fb01 f303 	mul.w	r3, r1, r3
 800aeee:	441a      	add	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0a:	3b01      	subs	r3, #1
 800af0c:	68f9      	ldr	r1, [r7, #12]
 800af0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af10:	fb01 f303 	mul.w	r3, r1, r3
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	22ff      	movs	r2, #255	; 0xff
 800af1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	22ff      	movs	r2, #255	; 0xff
 800af26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d114      	bne.n	800af5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01a      	beq.n	800af6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3310      	adds	r3, #16
 800af3c:	4618      	mov	r0, r3
 800af3e:	f001 fb4d 	bl	800c5dc <xTaskRemoveFromEventList>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d012      	beq.n	800af6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af48:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <xQueueGenericReset+0xcc>)
 800af4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	e009      	b.n	800af6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3310      	adds	r3, #16
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fef1 	bl	800ad46 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3324      	adds	r3, #36	; 0x24
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff feec 	bl	800ad46 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af6e:	f002 fa69 	bl	800d444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af72:	2301      	movs	r3, #1
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08a      	sub	sp, #40	; 0x28
 800af84:	af02      	add	r7, sp, #8
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	4613      	mov	r3, r2
 800af8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xQueueGenericCreate+0x2a>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	613b      	str	r3, [r7, #16]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	fb02 f303 	mul.w	r3, r2, r3
 800afb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	3348      	adds	r3, #72	; 0x48
 800afb8:	4618      	mov	r0, r3
 800afba:	f002 fb35 	bl	800d628 <pvPortMalloc>
 800afbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00d      	beq.n	800afe2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	3348      	adds	r3, #72	; 0x48
 800afce:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afd0:	79fa      	ldrb	r2, [r7, #7]
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4613      	mov	r3, r2
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 f805 	bl	800afec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afe2:	69bb      	ldr	r3, [r7, #24]
	}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3720      	adds	r7, #32
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d103      	bne.n	800b008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	e002      	b.n	800b00e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b01a:	2101      	movs	r1, #1
 800b01c:	69b8      	ldr	r0, [r7, #24]
 800b01e:	f7ff ff47 	bl	800aeb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b022:	bf00      	nop
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b082      	sub	sp, #8
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00e      	beq.n	800b056 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b04a:	2300      	movs	r3, #0
 800b04c:	2200      	movs	r2, #0
 800b04e:	2100      	movs	r1, #0
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f81d 	bl	800b090 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	4603      	mov	r3, r0
 800b066:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b068:	2301      	movs	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	2300      	movs	r3, #0
 800b06e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	461a      	mov	r2, r3
 800b074:	6939      	ldr	r1, [r7, #16]
 800b076:	6978      	ldr	r0, [r7, #20]
 800b078:	f7ff ff82 	bl	800af80 <xQueueGenericCreate>
 800b07c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff ffd3 	bl	800b02a <prvInitialiseMutex>

		return xNewQueue;
 800b084:	68fb      	ldr	r3, [r7, #12]
	}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08e      	sub	sp, #56	; 0x38
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10a      	bne.n	800b0c2 <xQueueGenericSend+0x32>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b0be:	bf00      	nop
 800b0c0:	e7fe      	b.n	800b0c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d103      	bne.n	800b0d0 <xQueueGenericSend+0x40>
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <xQueueGenericSend+0x44>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e000      	b.n	800b0d6 <xQueueGenericSend+0x46>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <xQueueGenericSend+0x60>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d103      	bne.n	800b0fe <xQueueGenericSend+0x6e>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d101      	bne.n	800b102 <xQueueGenericSend+0x72>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e000      	b.n	800b104 <xQueueGenericSend+0x74>
 800b102:	2300      	movs	r3, #0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <xQueueGenericSend+0x8e>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	623b      	str	r3, [r7, #32]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b11e:	f001 fc0f 	bl	800c940 <xTaskGetSchedulerState>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <xQueueGenericSend+0x9e>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <xQueueGenericSend+0xa2>
 800b12e:	2301      	movs	r3, #1
 800b130:	e000      	b.n	800b134 <xQueueGenericSend+0xa4>
 800b132:	2300      	movs	r3, #0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <xQueueGenericSend+0xbe>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	61fb      	str	r3, [r7, #28]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b14e:	f002 f949 	bl	800d3e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d302      	bcc.n	800b164 <xQueueGenericSend+0xd4>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d129      	bne.n	800b1b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b16a:	f000 fc95 	bl	800ba98 <prvCopyDataToQueue>
 800b16e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d010      	beq.n	800b19a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	3324      	adds	r3, #36	; 0x24
 800b17c:	4618      	mov	r0, r3
 800b17e:	f001 fa2d 	bl	800c5dc <xTaskRemoveFromEventList>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d013      	beq.n	800b1b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b188:	4b3f      	ldr	r3, [pc, #252]	; (800b288 <xQueueGenericSend+0x1f8>)
 800b18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	e00a      	b.n	800b1b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d007      	beq.n	800b1b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1a0:	4b39      	ldr	r3, [pc, #228]	; (800b288 <xQueueGenericSend+0x1f8>)
 800b1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1b0:	f002 f948 	bl	800d444 <vPortExitCritical>
				return pdPASS;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e063      	b.n	800b280 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1be:	f002 f941 	bl	800d444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e05c      	b.n	800b280 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d106      	bne.n	800b1da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1cc:	f107 0314 	add.w	r3, r7, #20
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f001 fa65 	bl	800c6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1da:	f002 f933 	bl	800d444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1de:	f000 fff3 	bl	800c1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1e2:	f002 f8ff 	bl	800d3e4 <vPortEnterCritical>
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1f2:	d103      	bne.n	800b1fc <xQueueGenericSend+0x16c>
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b202:	b25b      	sxtb	r3, r3
 800b204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b208:	d103      	bne.n	800b212 <xQueueGenericSend+0x182>
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b212:	f002 f917 	bl	800d444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b216:	1d3a      	adds	r2, r7, #4
 800b218:	f107 0314 	add.w	r3, r7, #20
 800b21c:	4611      	mov	r1, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 fa54 	bl	800c6cc <xTaskCheckForTimeOut>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d124      	bne.n	800b274 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b22c:	f000 fd2c 	bl	800bc88 <prvIsQueueFull>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d018      	beq.n	800b268 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	3310      	adds	r3, #16
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f001 f9a8 	bl	800c594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b246:	f000 fcb7 	bl	800bbb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b24a:	f000 ffcb 	bl	800c1e4 <xTaskResumeAll>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	f47f af7c 	bne.w	800b14e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <xQueueGenericSend+0x1f8>)
 800b258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	e772      	b.n	800b14e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b26a:	f000 fca5 	bl	800bbb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b26e:	f000 ffb9 	bl	800c1e4 <xTaskResumeAll>
 800b272:	e76c      	b.n	800b14e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b276:	f000 fc9f 	bl	800bbb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b27a:	f000 ffb3 	bl	800c1e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b27e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b280:	4618      	mov	r0, r3
 800b282:	3738      	adds	r7, #56	; 0x38
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b090      	sub	sp, #64	; 0x40
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10a      	bne.n	800b2ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d103      	bne.n	800b2c8 <xQueueGenericSendFromISR+0x3c>
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <xQueueGenericSendFromISR+0x40>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e000      	b.n	800b2ce <xQueueGenericSendFromISR+0x42>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10a      	bne.n	800b2e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d103      	bne.n	800b2f6 <xQueueGenericSendFromISR+0x6a>
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <xQueueGenericSendFromISR+0x6e>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e000      	b.n	800b2fc <xQueueGenericSendFromISR+0x70>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10a      	bne.n	800b316 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	623b      	str	r3, [r7, #32]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b316:	f002 f947 	bl	800d5a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b31a:	f3ef 8211 	mrs	r2, BASEPRI
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	61fa      	str	r2, [r7, #28]
 800b330:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b332:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33e:	429a      	cmp	r2, r3
 800b340:	d302      	bcc.n	800b348 <xQueueGenericSendFromISR+0xbc>
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b02      	cmp	r3, #2
 800b346:	d12f      	bne.n	800b3a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b35e:	f000 fb9b 	bl	800ba98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b362:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b36a:	d112      	bne.n	800b392 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	2b00      	cmp	r3, #0
 800b372:	d016      	beq.n	800b3a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b376:	3324      	adds	r3, #36	; 0x24
 800b378:	4618      	mov	r0, r3
 800b37a:	f001 f92f 	bl	800c5dc <xTaskRemoveFromEventList>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00e      	beq.n	800b3a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00b      	beq.n	800b3a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	e007      	b.n	800b3a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b392:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b396:	3301      	adds	r3, #1
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	b25a      	sxtb	r2, r3
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b3a6:	e001      	b.n	800b3ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3740      	adds	r7, #64	; 0x40
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b08e      	sub	sp, #56	; 0x38
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10a      	bne.n	800b3ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	623b      	str	r3, [r7, #32]
}
 800b3e8:	bf00      	nop
 800b3ea:	e7fe      	b.n	800b3ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00a      	beq.n	800b40a <xQueueGiveFromISR+0x48>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	61fb      	str	r3, [r7, #28]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d103      	bne.n	800b41a <xQueueGiveFromISR+0x58>
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <xQueueGiveFromISR+0x5c>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <xQueueGiveFromISR+0x5e>
 800b41e:	2300      	movs	r3, #0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <xQueueGiveFromISR+0x78>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	61bb      	str	r3, [r7, #24]
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b43a:	f002 f8b5 	bl	800d5a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b43e:	f3ef 8211 	mrs	r2, BASEPRI
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	617a      	str	r2, [r7, #20]
 800b454:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b456:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b466:	429a      	cmp	r2, r3
 800b468:	d22b      	bcs.n	800b4c2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b47c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b484:	d112      	bne.n	800b4ac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d016      	beq.n	800b4bc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	3324      	adds	r3, #36	; 0x24
 800b492:	4618      	mov	r0, r3
 800b494:	f001 f8a2 	bl	800c5dc <xTaskRemoveFromEventList>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00e      	beq.n	800b4bc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	e007      	b.n	800b4bc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	b25a      	sxtb	r2, r3
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c0:	e001      	b.n	800b4c6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f383 8811 	msr	BASEPRI, r3
}
 800b4d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3738      	adds	r7, #56	; 0x38
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08c      	sub	sp, #48	; 0x30
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10a      	bne.n	800b50c <xQueueReceive+0x30>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	623b      	str	r3, [r7, #32]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d103      	bne.n	800b51a <xQueueReceive+0x3e>
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	2b00      	cmp	r3, #0
 800b518:	d101      	bne.n	800b51e <xQueueReceive+0x42>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e000      	b.n	800b520 <xQueueReceive+0x44>
 800b51e:	2300      	movs	r3, #0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xQueueReceive+0x5e>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	61fb      	str	r3, [r7, #28]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b53a:	f001 fa01 	bl	800c940 <xTaskGetSchedulerState>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <xQueueReceive+0x6e>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <xQueueReceive+0x72>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e000      	b.n	800b550 <xQueueReceive+0x74>
 800b54e:	2300      	movs	r3, #0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <xQueueReceive+0x8e>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	61bb      	str	r3, [r7, #24]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b56a:	f001 ff3b 	bl	800d3e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b572:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	2b00      	cmp	r3, #0
 800b578:	d01f      	beq.n	800b5ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b57e:	f000 faf5 	bl	800bb6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	1e5a      	subs	r2, r3, #1
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00f      	beq.n	800b5b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	3310      	adds	r3, #16
 800b596:	4618      	mov	r0, r3
 800b598:	f001 f820 	bl	800c5dc <xTaskRemoveFromEventList>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d007      	beq.n	800b5b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b5a2:	4b3d      	ldr	r3, [pc, #244]	; (800b698 <xQueueReceive+0x1bc>)
 800b5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5b2:	f001 ff47 	bl	800d444 <vPortExitCritical>
				return pdPASS;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e069      	b.n	800b68e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d103      	bne.n	800b5c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5c0:	f001 ff40 	bl	800d444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e062      	b.n	800b68e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5ce:	f107 0310 	add.w	r3, r7, #16
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f001 f864 	bl	800c6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5dc:	f001 ff32 	bl	800d444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5e0:	f000 fdf2 	bl	800c1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5e4:	f001 fefe 	bl	800d3e4 <vPortEnterCritical>
 800b5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5ee:	b25b      	sxtb	r3, r3
 800b5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5f4:	d103      	bne.n	800b5fe <xQueueReceive+0x122>
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b604:	b25b      	sxtb	r3, r3
 800b606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b60a:	d103      	bne.n	800b614 <xQueueReceive+0x138>
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b614:	f001 ff16 	bl	800d444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b618:	1d3a      	adds	r2, r7, #4
 800b61a:	f107 0310 	add.w	r3, r7, #16
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f001 f853 	bl	800c6cc <xTaskCheckForTimeOut>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d123      	bne.n	800b674 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b62e:	f000 fb15 	bl	800bc5c <prvIsQueueEmpty>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d017      	beq.n	800b668 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	3324      	adds	r3, #36	; 0x24
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f000 ffa7 	bl	800c594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b648:	f000 fab6 	bl	800bbb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b64c:	f000 fdca 	bl	800c1e4 <xTaskResumeAll>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d189      	bne.n	800b56a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <xQueueReceive+0x1bc>)
 800b658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	e780      	b.n	800b56a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b66a:	f000 faa5 	bl	800bbb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b66e:	f000 fdb9 	bl	800c1e4 <xTaskResumeAll>
 800b672:	e77a      	b.n	800b56a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b676:	f000 fa9f 	bl	800bbb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b67a:	f000 fdb3 	bl	800c1e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b680:	f000 faec 	bl	800bc5c <prvIsQueueEmpty>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	f43f af6f 	beq.w	800b56a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b68c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3730      	adds	r7, #48	; 0x30
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	e000ed04 	.word	0xe000ed04

0800b69c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b08e      	sub	sp, #56	; 0x38
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	623b      	str	r3, [r7, #32]
}
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	61fb      	str	r3, [r7, #28]
}
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6ec:	f001 f928 	bl	800c940 <xTaskGetSchedulerState>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <xQueueSemaphoreTake+0x60>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <xQueueSemaphoreTake+0x64>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e000      	b.n	800b702 <xQueueSemaphoreTake+0x66>
 800b700:	2300      	movs	r3, #0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10a      	bne.n	800b71c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	61bb      	str	r3, [r7, #24]
}
 800b718:	bf00      	nop
 800b71a:	e7fe      	b.n	800b71a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b71c:	f001 fe62 	bl	800d3e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d024      	beq.n	800b776 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	1e5a      	subs	r2, r3, #1
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d104      	bne.n	800b746 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b73c:	f001 faa8 	bl	800cc90 <pvTaskIncrementMutexHeldCount>
 800b740:	4602      	mov	r2, r0
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00f      	beq.n	800b76e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b750:	3310      	adds	r3, #16
 800b752:	4618      	mov	r0, r3
 800b754:	f000 ff42 	bl	800c5dc <xTaskRemoveFromEventList>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b75e:	4b54      	ldr	r3, [pc, #336]	; (800b8b0 <xQueueSemaphoreTake+0x214>)
 800b760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b76e:	f001 fe69 	bl	800d444 <vPortExitCritical>
				return pdPASS;
 800b772:	2301      	movs	r3, #1
 800b774:	e097      	b.n	800b8a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d111      	bne.n	800b7a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	617b      	str	r3, [r7, #20]
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b798:	f001 fe54 	bl	800d444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b79c:	2300      	movs	r3, #0
 800b79e:	e082      	b.n	800b8a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7a6:	f107 030c 	add.w	r3, r7, #12
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 ff78 	bl	800c6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7b4:	f001 fe46 	bl	800d444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7b8:	f000 fd06 	bl	800c1c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7bc:	f001 fe12 	bl	800d3e4 <vPortEnterCritical>
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7c6:	b25b      	sxtb	r3, r3
 800b7c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7cc:	d103      	bne.n	800b7d6 <xQueueSemaphoreTake+0x13a>
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7dc:	b25b      	sxtb	r3, r3
 800b7de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7e2:	d103      	bne.n	800b7ec <xQueueSemaphoreTake+0x150>
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7ec:	f001 fe2a 	bl	800d444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7f0:	463a      	mov	r2, r7
 800b7f2:	f107 030c 	add.w	r3, r7, #12
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 ff67 	bl	800c6cc <xTaskCheckForTimeOut>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d132      	bne.n	800b86a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b806:	f000 fa29 	bl	800bc5c <prvIsQueueEmpty>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d026      	beq.n	800b85e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d109      	bne.n	800b82c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b818:	f001 fde4 	bl	800d3e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	4618      	mov	r0, r3
 800b822:	f001 f8ab 	bl	800c97c <xTaskPriorityInherit>
 800b826:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b828:	f001 fe0c 	bl	800d444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	3324      	adds	r3, #36	; 0x24
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fead 	bl	800c594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b83a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b83c:	f000 f9bc 	bl	800bbb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b840:	f000 fcd0 	bl	800c1e4 <xTaskResumeAll>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	f47f af68 	bne.w	800b71c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b84c:	4b18      	ldr	r3, [pc, #96]	; (800b8b0 <xQueueSemaphoreTake+0x214>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	e75e      	b.n	800b71c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b860:	f000 f9aa 	bl	800bbb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b864:	f000 fcbe 	bl	800c1e4 <xTaskResumeAll>
 800b868:	e758      	b.n	800b71c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b86c:	f000 f9a4 	bl	800bbb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b870:	f000 fcb8 	bl	800c1e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b876:	f000 f9f1 	bl	800bc5c <prvIsQueueEmpty>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f43f af4d 	beq.w	800b71c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00d      	beq.n	800b8a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b888:	f001 fdac 	bl	800d3e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b88e:	f000 f8eb 	bl	800ba68 <prvGetDisinheritPriorityAfterTimeout>
 800b892:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 f96a 	bl	800cb74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b8a0:	f001 fdd0 	bl	800d444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3738      	adds	r7, #56	; 0x38
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	e000ed04 	.word	0xe000ed04

0800b8b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08e      	sub	sp, #56	; 0x38
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10a      	bne.n	800b8e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	623b      	str	r3, [r7, #32]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d103      	bne.n	800b8ee <xQueueReceiveFromISR+0x3a>
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <xQueueReceiveFromISR+0x3e>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e000      	b.n	800b8f4 <xQueueReceiveFromISR+0x40>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10a      	bne.n	800b90e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	61fb      	str	r3, [r7, #28]
}
 800b90a:	bf00      	nop
 800b90c:	e7fe      	b.n	800b90c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90e:	f001 fe4b 	bl	800d5a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b912:	f3ef 8211 	mrs	r2, BASEPRI
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	61ba      	str	r2, [r7, #24]
 800b928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b92a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	2b00      	cmp	r3, #0
 800b938:	d02f      	beq.n	800b99a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b944:	68b9      	ldr	r1, [r7, #8]
 800b946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b948:	f000 f910 	bl	800bb6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	1e5a      	subs	r2, r3, #1
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b95c:	d112      	bne.n	800b984 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d016      	beq.n	800b994 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	3310      	adds	r3, #16
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fe36 	bl	800c5dc <xTaskRemoveFromEventList>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00e      	beq.n	800b994 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00b      	beq.n	800b994 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	e007      	b.n	800b994 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b988:	3301      	adds	r3, #1
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	b25a      	sxtb	r2, r3
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b994:	2301      	movs	r3, #1
 800b996:	637b      	str	r3, [r7, #52]	; 0x34
 800b998:	e001      	b.n	800b99e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	637b      	str	r3, [r7, #52]	; 0x34
 800b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f383 8811 	msr	BASEPRI, r3
}
 800b9a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3738      	adds	r7, #56	; 0x38
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	60bb      	str	r3, [r7, #8]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b9d8:	f001 fd04 	bl	800d3e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b9e2:	f001 fd2f 	bl	800d444 <vPortExitCritical>

	return uxReturn;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10a      	bne.n	800ba18 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60fb      	str	r3, [r7, #12]
}
 800ba14:	bf00      	nop
 800ba16:	e7fe      	b.n	800ba16 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ba1e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <vQueueDelete+0x28>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	60bb      	str	r3, [r7, #8]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f92f 	bl	800bcb8 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f001 feb0 	bl	800d7c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ba60:	bf00      	nop
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d006      	beq.n	800ba86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f1c3 0307 	rsb	r3, r3, #7
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	e001      	b.n	800ba8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba86:	2300      	movs	r3, #0
 800ba88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800baa4:	2300      	movs	r3, #0
 800baa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10d      	bne.n	800bad2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d14d      	bne.n	800bb5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f000 ffd0 	bl	800ca68 <xTaskPriorityDisinherit>
 800bac8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	609a      	str	r2, [r3, #8]
 800bad0:	e043      	b.n	800bb5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d119      	bne.n	800bb0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6858      	ldr	r0, [r3, #4]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae0:	461a      	mov	r2, r3
 800bae2:	68b9      	ldr	r1, [r7, #8]
 800bae4:	f015 fb9e 	bl	8021224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf0:	441a      	add	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d32b      	bcc.n	800bb5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	605a      	str	r2, [r3, #4]
 800bb0a:	e026      	b.n	800bb5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	68d8      	ldr	r0, [r3, #12]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb14:	461a      	mov	r2, r3
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	f015 fb84 	bl	8021224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	68da      	ldr	r2, [r3, #12]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb24:	425b      	negs	r3, r3
 800bb26:	441a      	add	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d207      	bcs.n	800bb48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb40:	425b      	negs	r3, r3
 800bb42:	441a      	add	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d105      	bne.n	800bb5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb62:	697b      	ldr	r3, [r7, #20]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d018      	beq.n	800bbb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	441a      	add	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68da      	ldr	r2, [r3, #12]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d303      	bcc.n	800bba0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68d9      	ldr	r1, [r3, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba8:	461a      	mov	r2, r3
 800bbaa:	6838      	ldr	r0, [r7, #0]
 800bbac:	f015 fb3a 	bl	8021224 <memcpy>
	}
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbc0:	f001 fc10 	bl	800d3e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbcc:	e011      	b.n	800bbf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d012      	beq.n	800bbfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3324      	adds	r3, #36	; 0x24
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 fcfe 	bl	800c5dc <xTaskRemoveFromEventList>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbe6:	f000 fdd3 	bl	800c790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dce9      	bgt.n	800bbce <prvUnlockQueue+0x16>
 800bbfa:	e000      	b.n	800bbfe <prvUnlockQueue+0x46>
					break;
 800bbfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	22ff      	movs	r2, #255	; 0xff
 800bc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc06:	f001 fc1d 	bl	800d444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc0a:	f001 fbeb 	bl	800d3e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc16:	e011      	b.n	800bc3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d012      	beq.n	800bc46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3310      	adds	r3, #16
 800bc24:	4618      	mov	r0, r3
 800bc26:	f000 fcd9 	bl	800c5dc <xTaskRemoveFromEventList>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc30:	f000 fdae 	bl	800c790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dce9      	bgt.n	800bc18 <prvUnlockQueue+0x60>
 800bc44:	e000      	b.n	800bc48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	22ff      	movs	r2, #255	; 0xff
 800bc4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc50:	f001 fbf8 	bl	800d444 <vPortExitCritical>
}
 800bc54:	bf00      	nop
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc64:	f001 fbbe 	bl	800d3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	e001      	b.n	800bc7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc7a:	f001 fbe3 	bl	800d444 <vPortExitCritical>

	return xReturn;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc90:	f001 fba8 	bl	800d3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d102      	bne.n	800bca6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	e001      	b.n	800bcaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcaa:	f001 fbcb 	bl	800d444 <vPortExitCritical>

	return xReturn;
 800bcae:	68fb      	ldr	r3, [r7, #12]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	e016      	b.n	800bcf4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bcc6:	4a10      	ldr	r2, [pc, #64]	; (800bd08 <vQueueUnregisterQueue+0x50>)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	4413      	add	r3, r2
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d10b      	bne.n	800bcee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bcd6:	4a0c      	ldr	r2, [pc, #48]	; (800bd08 <vQueueUnregisterQueue+0x50>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2100      	movs	r1, #0
 800bcdc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bce0:	4a09      	ldr	r2, [pc, #36]	; (800bd08 <vQueueUnregisterQueue+0x50>)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	4413      	add	r3, r2
 800bce8:	2200      	movs	r2, #0
 800bcea:	605a      	str	r2, [r3, #4]
				break;
 800bcec:	e006      	b.n	800bcfc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b07      	cmp	r3, #7
 800bcf8:	d9e5      	bls.n	800bcc6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bcfa:	bf00      	nop
 800bcfc:	bf00      	nop
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	20017760 	.word	0x20017760

0800bd0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08c      	sub	sp, #48	; 0x30
 800bd10:	af04      	add	r7, sp, #16
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f001 fc81 	bl	800d628 <pvPortMalloc>
 800bd26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00e      	beq.n	800bd4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd2e:	20b4      	movs	r0, #180	; 0xb4
 800bd30:	f001 fc7a 	bl	800d628 <pvPortMalloc>
 800bd34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30
 800bd42:	e005      	b.n	800bd50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd44:	6978      	ldr	r0, [r7, #20]
 800bd46:	f001 fd3b 	bl	800d7c0 <vPortFree>
 800bd4a:	e001      	b.n	800bd50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d013      	beq.n	800bd7e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd56:	88fa      	ldrh	r2, [r7, #6]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9303      	str	r3, [sp, #12]
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	9302      	str	r3, [sp, #8]
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 f80f 	bl	800bd90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd72:	69f8      	ldr	r0, [r7, #28]
 800bd74:	f000 f8aa 	bl	800becc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	61bb      	str	r3, [r7, #24]
 800bd7c:	e002      	b.n	800bd84 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd84:	69bb      	ldr	r3, [r7, #24]
	}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	617b      	str	r3, [r7, #20]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d01f      	beq.n	800be1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdde:	2300      	movs	r3, #0
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e012      	b.n	800be0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	4413      	add	r3, r2
 800bdea:	7819      	ldrb	r1, [r3, #0]
 800bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3334      	adds	r3, #52	; 0x34
 800bdf4:	460a      	mov	r2, r1
 800bdf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	3301      	adds	r3, #1
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	2b0f      	cmp	r3, #15
 800be0e:	d9e9      	bls.n	800bde4 <prvInitialiseNewTask+0x54>
 800be10:	e000      	b.n	800be14 <prvInitialiseNewTask+0x84>
			{
				break;
 800be12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be1c:	e003      	b.n	800be26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	2b06      	cmp	r3, #6
 800be2a:	d901      	bls.n	800be30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be2c:	2306      	movs	r3, #6
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	2200      	movs	r2, #0
 800be40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	3304      	adds	r3, #4
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe ff9d 	bl	800ad86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	3318      	adds	r3, #24
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe ff98 	bl	800ad86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f1c3 0207 	rsb	r2, r3, #7
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	2200      	movs	r2, #0
 800be78:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	334c      	adds	r3, #76	; 0x4c
 800be80:	2260      	movs	r2, #96	; 0x60
 800be82:	2100      	movs	r1, #0
 800be84:	4618      	mov	r0, r3
 800be86:	f015 f9f5 	bl	8021274 <memset>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	4a0c      	ldr	r2, [pc, #48]	; (800bec0 <prvInitialiseNewTask+0x130>)
 800be8e:	651a      	str	r2, [r3, #80]	; 0x50
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <prvInitialiseNewTask+0x134>)
 800be94:	655a      	str	r2, [r3, #84]	; 0x54
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	4a0b      	ldr	r2, [pc, #44]	; (800bec8 <prvInitialiseNewTask+0x138>)
 800be9a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	68f9      	ldr	r1, [r7, #12]
 800bea0:	69b8      	ldr	r0, [r7, #24]
 800bea2:	f001 f971 	bl	800d188 <pxPortInitialiseStack>
 800bea6:	4602      	mov	r2, r0
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beb8:	bf00      	nop
 800beba:	3720      	adds	r7, #32
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	08029c28 	.word	0x08029c28
 800bec4:	08029c48 	.word	0x08029c48
 800bec8:	08029c08 	.word	0x08029c08

0800becc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bed4:	f001 fa86 	bl	800d3e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bed8:	4b2a      	ldr	r3, [pc, #168]	; (800bf84 <prvAddNewTaskToReadyList+0xb8>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3301      	adds	r3, #1
 800bede:	4a29      	ldr	r2, [pc, #164]	; (800bf84 <prvAddNewTaskToReadyList+0xb8>)
 800bee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bee2:	4b29      	ldr	r3, [pc, #164]	; (800bf88 <prvAddNewTaskToReadyList+0xbc>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800beea:	4a27      	ldr	r2, [pc, #156]	; (800bf88 <prvAddNewTaskToReadyList+0xbc>)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bef0:	4b24      	ldr	r3, [pc, #144]	; (800bf84 <prvAddNewTaskToReadyList+0xb8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d110      	bne.n	800bf1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bef8:	f000 fc6e 	bl	800c7d8 <prvInitialiseTaskLists>
 800befc:	e00d      	b.n	800bf1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800befe:	4b23      	ldr	r3, [pc, #140]	; (800bf8c <prvAddNewTaskToReadyList+0xc0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d109      	bne.n	800bf1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf06:	4b20      	ldr	r3, [pc, #128]	; (800bf88 <prvAddNewTaskToReadyList+0xbc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d802      	bhi.n	800bf1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf14:	4a1c      	ldr	r2, [pc, #112]	; (800bf88 <prvAddNewTaskToReadyList+0xbc>)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf1a:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <prvAddNewTaskToReadyList+0xc4>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	4a1b      	ldr	r2, [pc, #108]	; (800bf90 <prvAddNewTaskToReadyList+0xc4>)
 800bf22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	2201      	movs	r2, #1
 800bf2a:	409a      	lsls	r2, r3
 800bf2c:	4b19      	ldr	r3, [pc, #100]	; (800bf94 <prvAddNewTaskToReadyList+0xc8>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	4a18      	ldr	r2, [pc, #96]	; (800bf94 <prvAddNewTaskToReadyList+0xc8>)
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <prvAddNewTaskToReadyList+0xcc>)
 800bf44:	441a      	add	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f7fe ff27 	bl	800ada0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf52:	f001 fa77 	bl	800d444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf56:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <prvAddNewTaskToReadyList+0xc0>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00e      	beq.n	800bf7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf5e:	4b0a      	ldr	r3, [pc, #40]	; (800bf88 <prvAddNewTaskToReadyList+0xbc>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d207      	bcs.n	800bf7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf6c:	4b0b      	ldr	r3, [pc, #44]	; (800bf9c <prvAddNewTaskToReadyList+0xd0>)
 800bf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	2000045c 	.word	0x2000045c
 800bf88:	2000035c 	.word	0x2000035c
 800bf8c:	20000468 	.word	0x20000468
 800bf90:	20000478 	.word	0x20000478
 800bf94:	20000464 	.word	0x20000464
 800bf98:	20000360 	.word	0x20000360
 800bf9c:	e000ed04 	.word	0xe000ed04

0800bfa0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bfa8:	f001 fa1c 	bl	800d3e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d102      	bne.n	800bfb8 <vTaskDelete+0x18>
 800bfb2:	4b39      	ldr	r3, [pc, #228]	; (800c098 <vTaskDelete+0xf8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	e000      	b.n	800bfba <vTaskDelete+0x1a>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe ff4a 	bl	800ae5a <uxListRemove>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d115      	bne.n	800bff8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd0:	4932      	ldr	r1, [pc, #200]	; (800c09c <vTaskDelete+0xfc>)
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	440b      	add	r3, r1
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10a      	bne.n	800bff8 <vTaskDelete+0x58>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfec:	43da      	mvns	r2, r3
 800bfee:	4b2c      	ldr	r3, [pc, #176]	; (800c0a0 <vTaskDelete+0x100>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4013      	ands	r3, r2
 800bff4:	4a2a      	ldr	r2, [pc, #168]	; (800c0a0 <vTaskDelete+0x100>)
 800bff6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3318      	adds	r3, #24
 800c004:	4618      	mov	r0, r3
 800c006:	f7fe ff28 	bl	800ae5a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c00a:	4b26      	ldr	r3, [pc, #152]	; (800c0a4 <vTaskDelete+0x104>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3301      	adds	r3, #1
 800c010:	4a24      	ldr	r2, [pc, #144]	; (800c0a4 <vTaskDelete+0x104>)
 800c012:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c014:	4b20      	ldr	r3, [pc, #128]	; (800c098 <vTaskDelete+0xf8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d10b      	bne.n	800c036 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	4820      	ldr	r0, [pc, #128]	; (800c0a8 <vTaskDelete+0x108>)
 800c026:	f7fe febb 	bl	800ada0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c02a:	4b20      	ldr	r3, [pc, #128]	; (800c0ac <vTaskDelete+0x10c>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3301      	adds	r3, #1
 800c030:	4a1e      	ldr	r2, [pc, #120]	; (800c0ac <vTaskDelete+0x10c>)
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	e009      	b.n	800c04a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c036:	4b1e      	ldr	r3, [pc, #120]	; (800c0b0 <vTaskDelete+0x110>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	4a1c      	ldr	r2, [pc, #112]	; (800c0b0 <vTaskDelete+0x110>)
 800c03e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f000 fc37 	bl	800c8b4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c046:	f000 fc4b 	bl	800c8e0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c04a:	f001 f9fb 	bl	800d444 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c04e:	4b19      	ldr	r3, [pc, #100]	; (800c0b4 <vTaskDelete+0x114>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d01b      	beq.n	800c08e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800c056:	4b10      	ldr	r3, [pc, #64]	; (800c098 <vTaskDelete+0xf8>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d116      	bne.n	800c08e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c060:	4b15      	ldr	r3, [pc, #84]	; (800c0b8 <vTaskDelete+0x118>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00a      	beq.n	800c07e <vTaskDelete+0xde>
	__asm volatile
 800c068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06c:	f383 8811 	msr	BASEPRI, r3
 800c070:	f3bf 8f6f 	isb	sy
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	60bb      	str	r3, [r7, #8]
}
 800c07a:	bf00      	nop
 800c07c:	e7fe      	b.n	800c07c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800c07e:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <vTaskDelete+0x11c>)
 800c080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c08e:	bf00      	nop
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	2000035c 	.word	0x2000035c
 800c09c:	20000360 	.word	0x20000360
 800c0a0:	20000464 	.word	0x20000464
 800c0a4:	20000478 	.word	0x20000478
 800c0a8:	20000430 	.word	0x20000430
 800c0ac:	20000444 	.word	0x20000444
 800c0b0:	2000045c 	.word	0x2000045c
 800c0b4:	20000468 	.word	0x20000468
 800c0b8:	20000484 	.word	0x20000484
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d017      	beq.n	800c102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0d2:	4b13      	ldr	r3, [pc, #76]	; (800c120 <vTaskDelay+0x60>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <vTaskDelay+0x30>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	60bb      	str	r3, [r7, #8]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0f0:	f000 f86a 	bl	800c1c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 ffe0 	bl	800d0bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0fc:	f000 f872 	bl	800c1e4 <xTaskResumeAll>
 800c100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d107      	bne.n	800c118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <vTaskDelay+0x64>)
 800c10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c118:	bf00      	nop
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20000484 	.word	0x20000484
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c12e:	4b1e      	ldr	r3, [pc, #120]	; (800c1a8 <vTaskStartScheduler+0x80>)
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	2300      	movs	r3, #0
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	2300      	movs	r3, #0
 800c138:	2280      	movs	r2, #128	; 0x80
 800c13a:	491c      	ldr	r1, [pc, #112]	; (800c1ac <vTaskStartScheduler+0x84>)
 800c13c:	481c      	ldr	r0, [pc, #112]	; (800c1b0 <vTaskStartScheduler+0x88>)
 800c13e:	f7ff fde5 	bl	800bd0c <xTaskCreate>
 800c142:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d11b      	bne.n	800c182 <vTaskStartScheduler+0x5a>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	60bb      	str	r3, [r7, #8]
}
 800c15c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c15e:	4b15      	ldr	r3, [pc, #84]	; (800c1b4 <vTaskStartScheduler+0x8c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	334c      	adds	r3, #76	; 0x4c
 800c164:	4a14      	ldr	r2, [pc, #80]	; (800c1b8 <vTaskStartScheduler+0x90>)
 800c166:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c168:	4b14      	ldr	r3, [pc, #80]	; (800c1bc <vTaskStartScheduler+0x94>)
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c16e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c170:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <vTaskStartScheduler+0x98>)
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c176:	4b13      	ldr	r3, [pc, #76]	; (800c1c4 <vTaskStartScheduler+0x9c>)
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c17c:	f001 f890 	bl	800d2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c180:	e00e      	b.n	800c1a0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c188:	d10a      	bne.n	800c1a0 <vTaskStartScheduler+0x78>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	607b      	str	r3, [r7, #4]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <vTaskStartScheduler+0x76>
}
 800c1a0:	bf00      	nop
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000480 	.word	0x20000480
 800c1ac:	0802598c 	.word	0x0802598c
 800c1b0:	0800c7a9 	.word	0x0800c7a9
 800c1b4:	2000035c 	.word	0x2000035c
 800c1b8:	20000074 	.word	0x20000074
 800c1bc:	2000047c 	.word	0x2000047c
 800c1c0:	20000468 	.word	0x20000468
 800c1c4:	20000460 	.word	0x20000460

0800c1c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <vTaskSuspendAll+0x18>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	4a03      	ldr	r2, [pc, #12]	; (800c1e0 <vTaskSuspendAll+0x18>)
 800c1d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1d6:	bf00      	nop
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	20000484 	.word	0x20000484

0800c1e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1f2:	4b41      	ldr	r3, [pc, #260]	; (800c2f8 <xTaskResumeAll+0x114>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <xTaskResumeAll+0x2c>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	603b      	str	r3, [r7, #0]
}
 800c20c:	bf00      	nop
 800c20e:	e7fe      	b.n	800c20e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c210:	f001 f8e8 	bl	800d3e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c214:	4b38      	ldr	r3, [pc, #224]	; (800c2f8 <xTaskResumeAll+0x114>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3b01      	subs	r3, #1
 800c21a:	4a37      	ldr	r2, [pc, #220]	; (800c2f8 <xTaskResumeAll+0x114>)
 800c21c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c21e:	4b36      	ldr	r3, [pc, #216]	; (800c2f8 <xTaskResumeAll+0x114>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d161      	bne.n	800c2ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c226:	4b35      	ldr	r3, [pc, #212]	; (800c2fc <xTaskResumeAll+0x118>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d05d      	beq.n	800c2ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c22e:	e02e      	b.n	800c28e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c230:	4b33      	ldr	r3, [pc, #204]	; (800c300 <xTaskResumeAll+0x11c>)
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	3318      	adds	r3, #24
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe fe0c 	bl	800ae5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fe07 	bl	800ae5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	2201      	movs	r2, #1
 800c252:	409a      	lsls	r2, r3
 800c254:	4b2b      	ldr	r3, [pc, #172]	; (800c304 <xTaskResumeAll+0x120>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4313      	orrs	r3, r2
 800c25a:	4a2a      	ldr	r2, [pc, #168]	; (800c304 <xTaskResumeAll+0x120>)
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4a27      	ldr	r2, [pc, #156]	; (800c308 <xTaskResumeAll+0x124>)
 800c26c:	441a      	add	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3304      	adds	r3, #4
 800c272:	4619      	mov	r1, r3
 800c274:	4610      	mov	r0, r2
 800c276:	f7fe fd93 	bl	800ada0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27e:	4b23      	ldr	r3, [pc, #140]	; (800c30c <xTaskResumeAll+0x128>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	429a      	cmp	r2, r3
 800c286:	d302      	bcc.n	800c28e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c288:	4b21      	ldr	r3, [pc, #132]	; (800c310 <xTaskResumeAll+0x12c>)
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c28e:	4b1c      	ldr	r3, [pc, #112]	; (800c300 <xTaskResumeAll+0x11c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1cc      	bne.n	800c230 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c29c:	f000 fb20 	bl	800c8e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2a0:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <xTaskResumeAll+0x130>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d010      	beq.n	800c2ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2ac:	f000 f858 	bl	800c360 <xTaskIncrementTick>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c2b6:	4b16      	ldr	r3, [pc, #88]	; (800c310 <xTaskResumeAll+0x12c>)
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1f1      	bne.n	800c2ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c2c8:	4b12      	ldr	r3, [pc, #72]	; (800c314 <xTaskResumeAll+0x130>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2ce:	4b10      	ldr	r3, [pc, #64]	; (800c310 <xTaskResumeAll+0x12c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d009      	beq.n	800c2ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2da:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <xTaskResumeAll+0x134>)
 800c2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2ea:	f001 f8ab 	bl	800d444 <vPortExitCritical>

	return xAlreadyYielded;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20000484 	.word	0x20000484
 800c2fc:	2000045c 	.word	0x2000045c
 800c300:	2000041c 	.word	0x2000041c
 800c304:	20000464 	.word	0x20000464
 800c308:	20000360 	.word	0x20000360
 800c30c:	2000035c 	.word	0x2000035c
 800c310:	20000470 	.word	0x20000470
 800c314:	2000046c 	.word	0x2000046c
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <xTaskGetTickCount+0x1c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c328:	687b      	ldr	r3, [r7, #4]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	20000460 	.word	0x20000460

0800c33c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c342:	f001 f931 	bl	800d5a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c346:	2300      	movs	r3, #0
 800c348:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c34a:	4b04      	ldr	r3, [pc, #16]	; (800c35c <xTaskGetTickCountFromISR+0x20>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c350:	683b      	ldr	r3, [r7, #0]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000460 	.word	0x20000460

0800c360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c36a:	4b4e      	ldr	r3, [pc, #312]	; (800c4a4 <xTaskIncrementTick+0x144>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f040 808e 	bne.w	800c490 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c374:	4b4c      	ldr	r3, [pc, #304]	; (800c4a8 <xTaskIncrementTick+0x148>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3301      	adds	r3, #1
 800c37a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c37c:	4a4a      	ldr	r2, [pc, #296]	; (800c4a8 <xTaskIncrementTick+0x148>)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d120      	bne.n	800c3ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c388:	4b48      	ldr	r3, [pc, #288]	; (800c4ac <xTaskIncrementTick+0x14c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00a      	beq.n	800c3a8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	603b      	str	r3, [r7, #0]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <xTaskIncrementTick+0x46>
 800c3a8:	4b40      	ldr	r3, [pc, #256]	; (800c4ac <xTaskIncrementTick+0x14c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	60fb      	str	r3, [r7, #12]
 800c3ae:	4b40      	ldr	r3, [pc, #256]	; (800c4b0 <xTaskIncrementTick+0x150>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a3e      	ldr	r2, [pc, #248]	; (800c4ac <xTaskIncrementTick+0x14c>)
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	4a3e      	ldr	r2, [pc, #248]	; (800c4b0 <xTaskIncrementTick+0x150>)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	4b3d      	ldr	r3, [pc, #244]	; (800c4b4 <xTaskIncrementTick+0x154>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	4a3c      	ldr	r2, [pc, #240]	; (800c4b4 <xTaskIncrementTick+0x154>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	f000 fa8b 	bl	800c8e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3ca:	4b3b      	ldr	r3, [pc, #236]	; (800c4b8 <xTaskIncrementTick+0x158>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d348      	bcc.n	800c466 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3d4:	4b35      	ldr	r3, [pc, #212]	; (800c4ac <xTaskIncrementTick+0x14c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3de:	4b36      	ldr	r3, [pc, #216]	; (800c4b8 <xTaskIncrementTick+0x158>)
 800c3e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3e4:	601a      	str	r2, [r3, #0]
					break;
 800c3e6:	e03e      	b.n	800c466 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e8:	4b30      	ldr	r3, [pc, #192]	; (800c4ac <xTaskIncrementTick+0x14c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d203      	bcs.n	800c408 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c400:	4a2d      	ldr	r2, [pc, #180]	; (800c4b8 <xTaskIncrementTick+0x158>)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c406:	e02e      	b.n	800c466 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	3304      	adds	r3, #4
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fe fd24 	bl	800ae5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c416:	2b00      	cmp	r3, #0
 800c418:	d004      	beq.n	800c424 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	3318      	adds	r3, #24
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe fd1b 	bl	800ae5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c428:	2201      	movs	r2, #1
 800c42a:	409a      	lsls	r2, r3
 800c42c:	4b23      	ldr	r3, [pc, #140]	; (800c4bc <xTaskIncrementTick+0x15c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4313      	orrs	r3, r2
 800c432:	4a22      	ldr	r2, [pc, #136]	; (800c4bc <xTaskIncrementTick+0x15c>)
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43a:	4613      	mov	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4a1f      	ldr	r2, [pc, #124]	; (800c4c0 <xTaskIncrementTick+0x160>)
 800c444:	441a      	add	r2, r3
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fe fca7 	bl	800ada0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c456:	4b1b      	ldr	r3, [pc, #108]	; (800c4c4 <xTaskIncrementTick+0x164>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d3b9      	bcc.n	800c3d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c460:	2301      	movs	r3, #1
 800c462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c464:	e7b6      	b.n	800c3d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c466:	4b17      	ldr	r3, [pc, #92]	; (800c4c4 <xTaskIncrementTick+0x164>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46c:	4914      	ldr	r1, [pc, #80]	; (800c4c0 <xTaskIncrementTick+0x160>)
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	440b      	add	r3, r1
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d901      	bls.n	800c482 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c47e:	2301      	movs	r3, #1
 800c480:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c482:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <xTaskIncrementTick+0x168>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d007      	beq.n	800c49a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c48a:	2301      	movs	r3, #1
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	e004      	b.n	800c49a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c490:	4b0e      	ldr	r3, [pc, #56]	; (800c4cc <xTaskIncrementTick+0x16c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3301      	adds	r3, #1
 800c496:	4a0d      	ldr	r2, [pc, #52]	; (800c4cc <xTaskIncrementTick+0x16c>)
 800c498:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c49a:	697b      	ldr	r3, [r7, #20]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3718      	adds	r7, #24
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	20000484 	.word	0x20000484
 800c4a8:	20000460 	.word	0x20000460
 800c4ac:	20000414 	.word	0x20000414
 800c4b0:	20000418 	.word	0x20000418
 800c4b4:	20000474 	.word	0x20000474
 800c4b8:	2000047c 	.word	0x2000047c
 800c4bc:	20000464 	.word	0x20000464
 800c4c0:	20000360 	.word	0x20000360
 800c4c4:	2000035c 	.word	0x2000035c
 800c4c8:	20000470 	.word	0x20000470
 800c4cc:	2000046c 	.word	0x2000046c

0800c4d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4d6:	4b29      	ldr	r3, [pc, #164]	; (800c57c <vTaskSwitchContext+0xac>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d003      	beq.n	800c4e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4de:	4b28      	ldr	r3, [pc, #160]	; (800c580 <vTaskSwitchContext+0xb0>)
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4e4:	e044      	b.n	800c570 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c4e6:	4b26      	ldr	r3, [pc, #152]	; (800c580 <vTaskSwitchContext+0xb0>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ec:	4b25      	ldr	r3, [pc, #148]	; (800c584 <vTaskSwitchContext+0xb4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	fab3 f383 	clz	r3, r3
 800c4f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c4fa:	7afb      	ldrb	r3, [r7, #11]
 800c4fc:	f1c3 031f 	rsb	r3, r3, #31
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	4921      	ldr	r1, [pc, #132]	; (800c588 <vTaskSwitchContext+0xb8>)
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10a      	bne.n	800c52c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	607b      	str	r3, [r7, #4]
}
 800c528:	bf00      	nop
 800c52a:	e7fe      	b.n	800c52a <vTaskSwitchContext+0x5a>
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4a14      	ldr	r2, [pc, #80]	; (800c588 <vTaskSwitchContext+0xb8>)
 800c538:	4413      	add	r3, r2
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	685a      	ldr	r2, [r3, #4]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	605a      	str	r2, [r3, #4]
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	3308      	adds	r3, #8
 800c54e:	429a      	cmp	r2, r3
 800c550:	d104      	bne.n	800c55c <vTaskSwitchContext+0x8c>
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	685a      	ldr	r2, [r3, #4]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	605a      	str	r2, [r3, #4]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	4a0a      	ldr	r2, [pc, #40]	; (800c58c <vTaskSwitchContext+0xbc>)
 800c564:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <vTaskSwitchContext+0xbc>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	334c      	adds	r3, #76	; 0x4c
 800c56c:	4a08      	ldr	r2, [pc, #32]	; (800c590 <vTaskSwitchContext+0xc0>)
 800c56e:	6013      	str	r3, [r2, #0]
}
 800c570:	bf00      	nop
 800c572:	371c      	adds	r7, #28
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	20000484 	.word	0x20000484
 800c580:	20000470 	.word	0x20000470
 800c584:	20000464 	.word	0x20000464
 800c588:	20000360 	.word	0x20000360
 800c58c:	2000035c 	.word	0x2000035c
 800c590:	20000074 	.word	0x20000074

0800c594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	60fb      	str	r3, [r7, #12]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5ba:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <vTaskPlaceOnEventList+0x44>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3318      	adds	r3, #24
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7fe fc10 	bl	800ade8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	6838      	ldr	r0, [r7, #0]
 800c5cc:	f000 fd76 	bl	800d0bc <prvAddCurrentTaskToDelayedList>
}
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	2000035c 	.word	0x2000035c

0800c5dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10a      	bne.n	800c608 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	60fb      	str	r3, [r7, #12]
}
 800c604:	bf00      	nop
 800c606:	e7fe      	b.n	800c606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3318      	adds	r3, #24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe fc24 	bl	800ae5a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c612:	4b1d      	ldr	r3, [pc, #116]	; (800c688 <xTaskRemoveFromEventList+0xac>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d11c      	bne.n	800c654 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe fc1b 	bl	800ae5a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c628:	2201      	movs	r2, #1
 800c62a:	409a      	lsls	r2, r3
 800c62c:	4b17      	ldr	r3, [pc, #92]	; (800c68c <xTaskRemoveFromEventList+0xb0>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4313      	orrs	r3, r2
 800c632:	4a16      	ldr	r2, [pc, #88]	; (800c68c <xTaskRemoveFromEventList+0xb0>)
 800c634:	6013      	str	r3, [r2, #0]
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63a:	4613      	mov	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4413      	add	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4a13      	ldr	r2, [pc, #76]	; (800c690 <xTaskRemoveFromEventList+0xb4>)
 800c644:	441a      	add	r2, r3
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fe fba7 	bl	800ada0 <vListInsertEnd>
 800c652:	e005      	b.n	800c660 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	3318      	adds	r3, #24
 800c658:	4619      	mov	r1, r3
 800c65a:	480e      	ldr	r0, [pc, #56]	; (800c694 <xTaskRemoveFromEventList+0xb8>)
 800c65c:	f7fe fba0 	bl	800ada0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c664:	4b0c      	ldr	r3, [pc, #48]	; (800c698 <xTaskRemoveFromEventList+0xbc>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d905      	bls.n	800c67a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c672:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <xTaskRemoveFromEventList+0xc0>)
 800c674:	2201      	movs	r2, #1
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	e001      	b.n	800c67e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c67e:	697b      	ldr	r3, [r7, #20]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	20000484 	.word	0x20000484
 800c68c:	20000464 	.word	0x20000464
 800c690:	20000360 	.word	0x20000360
 800c694:	2000041c 	.word	0x2000041c
 800c698:	2000035c 	.word	0x2000035c
 800c69c:	20000470 	.word	0x20000470

0800c6a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6a8:	4b06      	ldr	r3, [pc, #24]	; (800c6c4 <vTaskInternalSetTimeOutState+0x24>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6b0:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <vTaskInternalSetTimeOutState+0x28>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	605a      	str	r2, [r3, #4]
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	20000474 	.word	0x20000474
 800c6c8:	20000460 	.word	0x20000460

0800c6cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10a      	bne.n	800c6f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	613b      	str	r3, [r7, #16]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10a      	bne.n	800c70e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	60fb      	str	r3, [r7, #12]
}
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c70e:	f000 fe69 	bl	800d3e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c712:	4b1d      	ldr	r3, [pc, #116]	; (800c788 <xTaskCheckForTimeOut+0xbc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	69ba      	ldr	r2, [r7, #24]
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c72a:	d102      	bne.n	800c732 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61fb      	str	r3, [r7, #28]
 800c730:	e023      	b.n	800c77a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	4b15      	ldr	r3, [pc, #84]	; (800c78c <xTaskCheckForTimeOut+0xc0>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d007      	beq.n	800c74e <xTaskCheckForTimeOut+0x82>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	69ba      	ldr	r2, [r7, #24]
 800c744:	429a      	cmp	r2, r3
 800c746:	d302      	bcc.n	800c74e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c748:	2301      	movs	r3, #1
 800c74a:	61fb      	str	r3, [r7, #28]
 800c74c:	e015      	b.n	800c77a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	429a      	cmp	r2, r3
 800c756:	d20b      	bcs.n	800c770 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff ff9b 	bl	800c6a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	e004      	b.n	800c77a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c776:	2301      	movs	r3, #1
 800c778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c77a:	f000 fe63 	bl	800d444 <vPortExitCritical>

	return xReturn;
 800c77e:	69fb      	ldr	r3, [r7, #28]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3720      	adds	r7, #32
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	20000460 	.word	0x20000460
 800c78c:	20000474 	.word	0x20000474

0800c790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c790:	b480      	push	{r7}
 800c792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c794:	4b03      	ldr	r3, [pc, #12]	; (800c7a4 <vTaskMissedYield+0x14>)
 800c796:	2201      	movs	r2, #1
 800c798:	601a      	str	r2, [r3, #0]
}
 800c79a:	bf00      	nop
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	20000470 	.word	0x20000470

0800c7a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7b0:	f000 f852 	bl	800c858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7b4:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <prvIdleTask+0x28>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d9f9      	bls.n	800c7b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7bc:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <prvIdleTask+0x2c>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c7cc:	e7f0      	b.n	800c7b0 <prvIdleTask+0x8>
 800c7ce:	bf00      	nop
 800c7d0:	20000360 	.word	0x20000360
 800c7d4:	e000ed04 	.word	0xe000ed04

0800c7d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7de:	2300      	movs	r3, #0
 800c7e0:	607b      	str	r3, [r7, #4]
 800c7e2:	e00c      	b.n	800c7fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4a12      	ldr	r2, [pc, #72]	; (800c838 <prvInitialiseTaskLists+0x60>)
 800c7f0:	4413      	add	r3, r2
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe faa7 	bl	800ad46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	607b      	str	r3, [r7, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b06      	cmp	r3, #6
 800c802:	d9ef      	bls.n	800c7e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c804:	480d      	ldr	r0, [pc, #52]	; (800c83c <prvInitialiseTaskLists+0x64>)
 800c806:	f7fe fa9e 	bl	800ad46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c80a:	480d      	ldr	r0, [pc, #52]	; (800c840 <prvInitialiseTaskLists+0x68>)
 800c80c:	f7fe fa9b 	bl	800ad46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c810:	480c      	ldr	r0, [pc, #48]	; (800c844 <prvInitialiseTaskLists+0x6c>)
 800c812:	f7fe fa98 	bl	800ad46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c816:	480c      	ldr	r0, [pc, #48]	; (800c848 <prvInitialiseTaskLists+0x70>)
 800c818:	f7fe fa95 	bl	800ad46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c81c:	480b      	ldr	r0, [pc, #44]	; (800c84c <prvInitialiseTaskLists+0x74>)
 800c81e:	f7fe fa92 	bl	800ad46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c822:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <prvInitialiseTaskLists+0x78>)
 800c824:	4a05      	ldr	r2, [pc, #20]	; (800c83c <prvInitialiseTaskLists+0x64>)
 800c826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <prvInitialiseTaskLists+0x7c>)
 800c82a:	4a05      	ldr	r2, [pc, #20]	; (800c840 <prvInitialiseTaskLists+0x68>)
 800c82c:	601a      	str	r2, [r3, #0]
}
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20000360 	.word	0x20000360
 800c83c:	200003ec 	.word	0x200003ec
 800c840:	20000400 	.word	0x20000400
 800c844:	2000041c 	.word	0x2000041c
 800c848:	20000430 	.word	0x20000430
 800c84c:	20000448 	.word	0x20000448
 800c850:	20000414 	.word	0x20000414
 800c854:	20000418 	.word	0x20000418

0800c858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c85e:	e019      	b.n	800c894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c860:	f000 fdc0 	bl	800d3e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c864:	4b10      	ldr	r3, [pc, #64]	; (800c8a8 <prvCheckTasksWaitingTermination+0x50>)
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	3304      	adds	r3, #4
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe faf2 	bl	800ae5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c876:	4b0d      	ldr	r3, [pc, #52]	; (800c8ac <prvCheckTasksWaitingTermination+0x54>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	4a0b      	ldr	r2, [pc, #44]	; (800c8ac <prvCheckTasksWaitingTermination+0x54>)
 800c87e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c880:	4b0b      	ldr	r3, [pc, #44]	; (800c8b0 <prvCheckTasksWaitingTermination+0x58>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3b01      	subs	r3, #1
 800c886:	4a0a      	ldr	r2, [pc, #40]	; (800c8b0 <prvCheckTasksWaitingTermination+0x58>)
 800c888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c88a:	f000 fddb 	bl	800d444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f810 	bl	800c8b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c894:	4b06      	ldr	r3, [pc, #24]	; (800c8b0 <prvCheckTasksWaitingTermination+0x58>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e1      	bne.n	800c860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c89c:	bf00      	nop
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20000430 	.word	0x20000430
 800c8ac:	2000045c 	.word	0x2000045c
 800c8b0:	20000444 	.word	0x20000444

0800c8b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	334c      	adds	r3, #76	; 0x4c
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f015 facf 	bl	8021e64 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 ff78 	bl	800d7c0 <vPortFree>
			vPortFree( pxTCB );
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 ff75 	bl	800d7c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
	...

0800c8e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <prvResetNextTaskUnblockTime+0x38>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d104      	bne.n	800c8fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c8f0:	4b0a      	ldr	r3, [pc, #40]	; (800c91c <prvResetNextTaskUnblockTime+0x3c>)
 800c8f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c8f8:	e008      	b.n	800c90c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8fa:	4b07      	ldr	r3, [pc, #28]	; (800c918 <prvResetNextTaskUnblockTime+0x38>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4a04      	ldr	r2, [pc, #16]	; (800c91c <prvResetNextTaskUnblockTime+0x3c>)
 800c90a:	6013      	str	r3, [r2, #0]
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	20000414 	.word	0x20000414
 800c91c:	2000047c 	.word	0x2000047c

0800c920 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c926:	4b05      	ldr	r3, [pc, #20]	; (800c93c <xTaskGetCurrentTaskHandle+0x1c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c92c:	687b      	ldr	r3, [r7, #4]
	}
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	2000035c 	.word	0x2000035c

0800c940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c946:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <xTaskGetSchedulerState+0x34>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d102      	bne.n	800c954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c94e:	2301      	movs	r3, #1
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	e008      	b.n	800c966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c954:	4b08      	ldr	r3, [pc, #32]	; (800c978 <xTaskGetSchedulerState+0x38>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c95c:	2302      	movs	r3, #2
 800c95e:	607b      	str	r3, [r7, #4]
 800c960:	e001      	b.n	800c966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c962:	2300      	movs	r3, #0
 800c964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c966:	687b      	ldr	r3, [r7, #4]
	}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	20000468 	.word	0x20000468
 800c978:	20000484 	.word	0x20000484

0800c97c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c988:	2300      	movs	r3, #0
 800c98a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d05e      	beq.n	800ca50 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c996:	4b31      	ldr	r3, [pc, #196]	; (800ca5c <xTaskPriorityInherit+0xe0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d24e      	bcs.n	800ca3e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	699b      	ldr	r3, [r3, #24]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	db06      	blt.n	800c9b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a8:	4b2c      	ldr	r3, [pc, #176]	; (800ca5c <xTaskPriorityInherit+0xe0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	f1c3 0207 	rsb	r2, r3, #7
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	6959      	ldr	r1, [r3, #20]
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4a26      	ldr	r2, [pc, #152]	; (800ca60 <xTaskPriorityInherit+0xe4>)
 800c9c8:	4413      	add	r3, r2
 800c9ca:	4299      	cmp	r1, r3
 800c9cc:	d12f      	bne.n	800ca2e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fa41 	bl	800ae5a <uxListRemove>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e8:	43da      	mvns	r2, r3
 800c9ea:	4b1e      	ldr	r3, [pc, #120]	; (800ca64 <xTaskPriorityInherit+0xe8>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	4a1c      	ldr	r2, [pc, #112]	; (800ca64 <xTaskPriorityInherit+0xe8>)
 800c9f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c9f4:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <xTaskPriorityInherit+0xe0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca02:	2201      	movs	r2, #1
 800ca04:	409a      	lsls	r2, r3
 800ca06:	4b17      	ldr	r3, [pc, #92]	; (800ca64 <xTaskPriorityInherit+0xe8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	4a15      	ldr	r2, [pc, #84]	; (800ca64 <xTaskPriorityInherit+0xe8>)
 800ca0e:	6013      	str	r3, [r2, #0]
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca14:	4613      	mov	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4413      	add	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4a10      	ldr	r2, [pc, #64]	; (800ca60 <xTaskPriorityInherit+0xe4>)
 800ca1e:	441a      	add	r2, r3
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4619      	mov	r1, r3
 800ca26:	4610      	mov	r0, r2
 800ca28:	f7fe f9ba 	bl	800ada0 <vListInsertEnd>
 800ca2c:	e004      	b.n	800ca38 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ca2e:	4b0b      	ldr	r3, [pc, #44]	; (800ca5c <xTaskPriorityInherit+0xe0>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e008      	b.n	800ca50 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca42:	4b06      	ldr	r3, [pc, #24]	; (800ca5c <xTaskPriorityInherit+0xe0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d201      	bcs.n	800ca50 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca50:	68fb      	ldr	r3, [r7, #12]
	}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	2000035c 	.word	0x2000035c
 800ca60:	20000360 	.word	0x20000360
 800ca64:	20000464 	.word	0x20000464

0800ca68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d06e      	beq.n	800cb5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca7e:	4b3a      	ldr	r3, [pc, #232]	; (800cb68 <xTaskPriorityDisinherit+0x100>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d00a      	beq.n	800ca9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	60fb      	str	r3, [r7, #12]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10a      	bne.n	800cabc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
 800caba:	e7fe      	b.n	800caba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cace:	429a      	cmp	r2, r3
 800cad0:	d044      	beq.n	800cb5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d140      	bne.n	800cb5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	3304      	adds	r3, #4
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe f9bb 	bl	800ae5a <uxListRemove>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d115      	bne.n	800cb16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caee:	491f      	ldr	r1, [pc, #124]	; (800cb6c <xTaskPriorityDisinherit+0x104>)
 800caf0:	4613      	mov	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	440b      	add	r3, r1
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10a      	bne.n	800cb16 <xTaskPriorityDisinherit+0xae>
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb04:	2201      	movs	r2, #1
 800cb06:	fa02 f303 	lsl.w	r3, r2, r3
 800cb0a:	43da      	mvns	r2, r3
 800cb0c:	4b18      	ldr	r3, [pc, #96]	; (800cb70 <xTaskPriorityDisinherit+0x108>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4013      	ands	r3, r2
 800cb12:	4a17      	ldr	r2, [pc, #92]	; (800cb70 <xTaskPriorityDisinherit+0x108>)
 800cb14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	f1c3 0207 	rsb	r2, r3, #7
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2e:	2201      	movs	r2, #1
 800cb30:	409a      	lsls	r2, r3
 800cb32:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <xTaskPriorityDisinherit+0x108>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	4a0d      	ldr	r2, [pc, #52]	; (800cb70 <xTaskPriorityDisinherit+0x108>)
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4a08      	ldr	r2, [pc, #32]	; (800cb6c <xTaskPriorityDisinherit+0x104>)
 800cb4a:	441a      	add	r2, r3
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fe f924 	bl	800ada0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb5c:	697b      	ldr	r3, [r7, #20]
	}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2000035c 	.word	0x2000035c
 800cb6c:	20000360 	.word	0x20000360
 800cb70:	20000464 	.word	0x20000464

0800cb74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d077      	beq.n	800cc7c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10a      	bne.n	800cbaa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	60fb      	str	r3, [r7, #12]
}
 800cba6:	bf00      	nop
 800cba8:	e7fe      	b.n	800cba8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d902      	bls.n	800cbba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	61fb      	str	r3, [r7, #28]
 800cbb8:	e002      	b.n	800cbc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbbe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc4:	69fa      	ldr	r2, [r7, #28]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d058      	beq.n	800cc7c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d153      	bne.n	800cc7c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cbd4:	4b2b      	ldr	r3, [pc, #172]	; (800cc84 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d10a      	bne.n	800cbf4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	60bb      	str	r3, [r7, #8]
}
 800cbf0:	bf00      	nop
 800cbf2:	e7fe      	b.n	800cbf2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	69fa      	ldr	r2, [r7, #28]
 800cbfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	db04      	blt.n	800cc12 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	f1c3 0207 	rsb	r2, r3, #7
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	6959      	ldr	r1, [r3, #20]
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4a19      	ldr	r2, [pc, #100]	; (800cc88 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cc22:	4413      	add	r3, r2
 800cc24:	4299      	cmp	r1, r3
 800cc26:	d129      	bne.n	800cc7c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe f914 	bl	800ae5a <uxListRemove>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10a      	bne.n	800cc4e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc42:	43da      	mvns	r2, r3
 800cc44:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4013      	ands	r3, r2
 800cc4a:	4a10      	ldr	r2, [pc, #64]	; (800cc8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc52:	2201      	movs	r2, #1
 800cc54:	409a      	lsls	r2, r3
 800cc56:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	4a0b      	ldr	r2, [pc, #44]	; (800cc8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4a06      	ldr	r2, [pc, #24]	; (800cc88 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cc6e:	441a      	add	r2, r3
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe f892 	bl	800ada0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc7c:	bf00      	nop
 800cc7e:	3720      	adds	r7, #32
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	2000035c 	.word	0x2000035c
 800cc88:	20000360 	.word	0x20000360
 800cc8c:	20000464 	.word	0x20000464

0800cc90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cc90:	b480      	push	{r7}
 800cc92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cc94:	4b07      	ldr	r3, [pc, #28]	; (800ccb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d004      	beq.n	800cca6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cca2:	3201      	adds	r2, #1
 800cca4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cca6:	4b03      	ldr	r3, [pc, #12]	; (800ccb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cca8:	681b      	ldr	r3, [r3, #0]
	}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	2000035c 	.word	0x2000035c

0800ccb8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b086      	sub	sp, #24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
 800ccc4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ccc6:	f000 fb8d 	bl	800d3e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ccca:	4b29      	ldr	r3, [pc, #164]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d01c      	beq.n	800cd12 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ccd8:	4b25      	ldr	r3, [pc, #148]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	43d2      	mvns	r2, r2
 800cce4:	400a      	ands	r2, r1
 800cce6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ccea:	4b21      	ldr	r3, [pc, #132]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	6838      	ldr	r0, [r7, #0]
 800ccfe:	f000 f9dd 	bl	800d0bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cd02:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <xTaskNotifyWait+0xbc>)
 800cd04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd12:	f000 fb97 	bl	800d444 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cd16:	f000 fb65 	bl	800d3e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d005      	beq.n	800cd2c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cd20:	4b13      	ldr	r3, [pc, #76]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cd2c:	4b10      	ldr	r3, [pc, #64]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d002      	beq.n	800cd40 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]
 800cd3e:	e00a      	b.n	800cd56 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cd40:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	43d2      	mvns	r2, r2
 800cd4c:	400a      	ands	r2, r1
 800cd4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800cd52:	2301      	movs	r3, #1
 800cd54:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd56:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <xTaskNotifyWait+0xb8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800cd60:	f000 fb70 	bl	800d444 <vPortExitCritical>

		return xReturn;
 800cd64:	697b      	ldr	r3, [r7, #20]
	}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3718      	adds	r7, #24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	2000035c 	.word	0x2000035c
 800cd74:	e000ed04 	.word	0xe000ed04

0800cd78 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08a      	sub	sp, #40	; 0x28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10a      	bne.n	800cda8 <xTaskGenericNotify+0x30>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	61bb      	str	r3, [r7, #24]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cdac:	f000 fb1a 	bl	800d3e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d004      	beq.n	800cdc0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cdc6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
 800cdca:	2202      	movs	r2, #2
 800cdcc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d82d      	bhi.n	800ce32 <xTaskGenericNotify+0xba>
 800cdd6:	a201      	add	r2, pc, #4	; (adr r2, 800cddc <xTaskGenericNotify+0x64>)
 800cdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cddc:	0800ce55 	.word	0x0800ce55
 800cde0:	0800cdf1 	.word	0x0800cdf1
 800cde4:	0800ce03 	.word	0x0800ce03
 800cde8:	0800ce13 	.word	0x0800ce13
 800cdec:	0800ce1d 	.word	0x0800ce1d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	431a      	orrs	r2, r3
 800cdfa:	6a3b      	ldr	r3, [r7, #32]
 800cdfc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ce00:	e02b      	b.n	800ce5a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	6a3b      	ldr	r3, [r7, #32]
 800ce0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ce10:	e023      	b.n	800ce5a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ce1a:	e01e      	b.n	800ce5a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ce1c:	7ffb      	ldrb	r3, [r7, #31]
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d004      	beq.n	800ce2c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ce2a:	e016      	b.n	800ce5a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ce30:	e013      	b.n	800ce5a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce3c:	d00c      	beq.n	800ce58 <xTaskGenericNotify+0xe0>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	617b      	str	r3, [r7, #20]
}
 800ce50:	bf00      	nop
 800ce52:	e7fe      	b.n	800ce52 <xTaskGenericNotify+0xda>
					break;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <xTaskGenericNotify+0xe2>

					break;
 800ce58:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ce5a:	7ffb      	ldrb	r3, [r7, #31]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d139      	bne.n	800ced4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce60:	6a3b      	ldr	r3, [r7, #32]
 800ce62:	3304      	adds	r3, #4
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7fd fff8 	bl	800ae5a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6e:	2201      	movs	r2, #1
 800ce70:	409a      	lsls	r2, r3
 800ce72:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <xTaskGenericNotify+0x16c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	4a1a      	ldr	r2, [pc, #104]	; (800cee4 <xTaskGenericNotify+0x16c>)
 800ce7a:	6013      	str	r3, [r2, #0]
 800ce7c:	6a3b      	ldr	r3, [r7, #32]
 800ce7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce80:	4613      	mov	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4a17      	ldr	r2, [pc, #92]	; (800cee8 <xTaskGenericNotify+0x170>)
 800ce8a:	441a      	add	r2, r3
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	3304      	adds	r3, #4
 800ce90:	4619      	mov	r1, r3
 800ce92:	4610      	mov	r0, r2
 800ce94:	f7fd ff84 	bl	800ada0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00a      	beq.n	800ceb6 <xTaskGenericNotify+0x13e>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	613b      	str	r3, [r7, #16]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceba:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <xTaskGenericNotify+0x174>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d907      	bls.n	800ced4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cec4:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <xTaskGenericNotify+0x178>)
 800cec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ced4:	f000 fab6 	bl	800d444 <vPortExitCritical>

		return xReturn;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3728      	adds	r7, #40	; 0x28
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	20000464 	.word	0x20000464
 800cee8:	20000360 	.word	0x20000360
 800ceec:	2000035c 	.word	0x2000035c
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08e      	sub	sp, #56	; 0x38
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	603b      	str	r3, [r7, #0]
 800cf00:	4613      	mov	r3, r2
 800cf02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cf04:	2301      	movs	r3, #1
 800cf06:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf24:	f000 fb40 	bl	800d5a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cf2c:	f3ef 8211 	mrs	r2, BASEPRI
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	623a      	str	r2, [r7, #32]
 800cf42:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cf44:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf46:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d004      	beq.n	800cf58 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cf5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	2202      	movs	r2, #2
 800cf66:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800cf6a:	79fb      	ldrb	r3, [r7, #7]
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	d82f      	bhi.n	800cfd0 <xTaskGenericNotifyFromISR+0xdc>
 800cf70:	a201      	add	r2, pc, #4	; (adr r2, 800cf78 <xTaskGenericNotifyFromISR+0x84>)
 800cf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf76:	bf00      	nop
 800cf78:	0800cff3 	.word	0x0800cff3
 800cf7c:	0800cf8d 	.word	0x0800cf8d
 800cf80:	0800cf9f 	.word	0x0800cf9f
 800cf84:	0800cfaf 	.word	0x0800cfaf
 800cf88:	0800cfb9 	.word	0x0800cfb9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	431a      	orrs	r2, r3
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cf9c:	e02c      	b.n	800cff8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cfac:	e024      	b.n	800cff8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cfb6:	e01f      	b.n	800cff8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cfb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d004      	beq.n	800cfca <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cfc8:	e016      	b.n	800cff8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cfce:	e013      	b.n	800cff8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cfd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfda:	d00c      	beq.n	800cff6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	61bb      	str	r3, [r7, #24]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800cff2:	bf00      	nop
 800cff4:	e000      	b.n	800cff8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800cff6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d145      	bne.n	800d08c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00a      	beq.n	800d01e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	617b      	str	r3, [r7, #20]
}
 800d01a:	bf00      	nop
 800d01c:	e7fe      	b.n	800d01c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d01e:	4b21      	ldr	r3, [pc, #132]	; (800d0a4 <xTaskGenericNotifyFromISR+0x1b0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d11c      	bne.n	800d060 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	3304      	adds	r3, #4
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fd ff15 	bl	800ae5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	2201      	movs	r2, #1
 800d036:	409a      	lsls	r2, r3
 800d038:	4b1b      	ldr	r3, [pc, #108]	; (800d0a8 <xTaskGenericNotifyFromISR+0x1b4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	4a1a      	ldr	r2, [pc, #104]	; (800d0a8 <xTaskGenericNotifyFromISR+0x1b4>)
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d046:	4613      	mov	r3, r2
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4a17      	ldr	r2, [pc, #92]	; (800d0ac <xTaskGenericNotifyFromISR+0x1b8>)
 800d050:	441a      	add	r2, r3
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	3304      	adds	r3, #4
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f7fd fea1 	bl	800ada0 <vListInsertEnd>
 800d05e:	e005      	b.n	800d06c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d062:	3318      	adds	r3, #24
 800d064:	4619      	mov	r1, r3
 800d066:	4812      	ldr	r0, [pc, #72]	; (800d0b0 <xTaskGenericNotifyFromISR+0x1bc>)
 800d068:	f7fd fe9a 	bl	800ada0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d070:	4b10      	ldr	r3, [pc, #64]	; (800d0b4 <xTaskGenericNotifyFromISR+0x1c0>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d076:	429a      	cmp	r2, r3
 800d078:	d908      	bls.n	800d08c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d082:	2201      	movs	r2, #1
 800d084:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d086:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <xTaskGenericNotifyFromISR+0x1c4>)
 800d088:	2201      	movs	r2, #1
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f383 8811 	msr	BASEPRI, r3
}
 800d096:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3738      	adds	r7, #56	; 0x38
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	20000484 	.word	0x20000484
 800d0a8:	20000464 	.word	0x20000464
 800d0ac:	20000360 	.word	0x20000360
 800d0b0:	2000041c 	.word	0x2000041c
 800d0b4:	2000035c 	.word	0x2000035c
 800d0b8:	20000470 	.word	0x20000470

0800d0bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0c6:	4b29      	ldr	r3, [pc, #164]	; (800d16c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0cc:	4b28      	ldr	r3, [pc, #160]	; (800d170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fd fec1 	bl	800ae5a <uxListRemove>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10b      	bne.n	800d0f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d0de:	4b24      	ldr	r3, [pc, #144]	; (800d170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ea:	43da      	mvns	r2, r3
 800d0ec:	4b21      	ldr	r3, [pc, #132]	; (800d174 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	4a20      	ldr	r2, [pc, #128]	; (800d174 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d0f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0fc:	d10a      	bne.n	800d114 <prvAddCurrentTaskToDelayedList+0x58>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d007      	beq.n	800d114 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d104:	4b1a      	ldr	r3, [pc, #104]	; (800d170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3304      	adds	r3, #4
 800d10a:	4619      	mov	r1, r3
 800d10c:	481a      	ldr	r0, [pc, #104]	; (800d178 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d10e:	f7fd fe47 	bl	800ada0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d112:	e026      	b.n	800d162 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4413      	add	r3, r2
 800d11a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d11c:	4b14      	ldr	r3, [pc, #80]	; (800d170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d124:	68ba      	ldr	r2, [r7, #8]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d209      	bcs.n	800d140 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d12c:	4b13      	ldr	r3, [pc, #76]	; (800d17c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	4b0f      	ldr	r3, [pc, #60]	; (800d170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3304      	adds	r3, #4
 800d136:	4619      	mov	r1, r3
 800d138:	4610      	mov	r0, r2
 800d13a:	f7fd fe55 	bl	800ade8 <vListInsert>
}
 800d13e:	e010      	b.n	800d162 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d140:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3304      	adds	r3, #4
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f7fd fe4b 	bl	800ade8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d152:	4b0c      	ldr	r3, [pc, #48]	; (800d184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d202      	bcs.n	800d162 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d15c:	4a09      	ldr	r2, [pc, #36]	; (800d184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	6013      	str	r3, [r2, #0]
}
 800d162:	bf00      	nop
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	20000460 	.word	0x20000460
 800d170:	2000035c 	.word	0x2000035c
 800d174:	20000464 	.word	0x20000464
 800d178:	20000448 	.word	0x20000448
 800d17c:	20000418 	.word	0x20000418
 800d180:	20000414 	.word	0x20000414
 800d184:	2000047c 	.word	0x2000047c

0800d188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3b04      	subs	r3, #4
 800d198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	f023 0201 	bic.w	r2, r3, #1
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3b04      	subs	r3, #4
 800d1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1b8:	4a0c      	ldr	r2, [pc, #48]	; (800d1ec <pxPortInitialiseStack+0x64>)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3b14      	subs	r3, #20
 800d1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3b04      	subs	r3, #4
 800d1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f06f 0202 	mvn.w	r2, #2
 800d1d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3b20      	subs	r3, #32
 800d1dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1de:	68fb      	ldr	r3, [r7, #12]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	0800d1f1 	.word	0x0800d1f1

0800d1f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1fa:	4b12      	ldr	r3, [pc, #72]	; (800d244 <prvTaskExitError+0x54>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d202:	d00a      	beq.n	800d21a <prvTaskExitError+0x2a>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	60fb      	str	r3, [r7, #12]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <prvTaskExitError+0x28>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	60bb      	str	r3, [r7, #8]
}
 800d22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d22e:	bf00      	nop
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0fc      	beq.n	800d230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d236:	bf00      	nop
 800d238:	bf00      	nop
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr
 800d244:	20000060 	.word	0x20000060
	...

0800d250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <pxCurrentTCBConst2>)
 800d252:	6819      	ldr	r1, [r3, #0]
 800d254:	6808      	ldr	r0, [r1, #0]
 800d256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25a:	f380 8809 	msr	PSP, r0
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f04f 0000 	mov.w	r0, #0
 800d266:	f380 8811 	msr	BASEPRI, r0
 800d26a:	4770      	bx	lr
 800d26c:	f3af 8000 	nop.w

0800d270 <pxCurrentTCBConst2>:
 800d270:	2000035c 	.word	0x2000035c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop

0800d278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d278:	4808      	ldr	r0, [pc, #32]	; (800d29c <prvPortStartFirstTask+0x24>)
 800d27a:	6800      	ldr	r0, [r0, #0]
 800d27c:	6800      	ldr	r0, [r0, #0]
 800d27e:	f380 8808 	msr	MSP, r0
 800d282:	f04f 0000 	mov.w	r0, #0
 800d286:	f380 8814 	msr	CONTROL, r0
 800d28a:	b662      	cpsie	i
 800d28c:	b661      	cpsie	f
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	df00      	svc	0
 800d298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d29a:	bf00      	nop
 800d29c:	e000ed08 	.word	0xe000ed08

0800d2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d2a6:	4b46      	ldr	r3, [pc, #280]	; (800d3c0 <xPortStartScheduler+0x120>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a46      	ldr	r2, [pc, #280]	; (800d3c4 <xPortStartScheduler+0x124>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d10a      	bne.n	800d2c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	613b      	str	r3, [r7, #16]
}
 800d2c2:	bf00      	nop
 800d2c4:	e7fe      	b.n	800d2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d2c6:	4b3e      	ldr	r3, [pc, #248]	; (800d3c0 <xPortStartScheduler+0x120>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a3f      	ldr	r2, [pc, #252]	; (800d3c8 <xPortStartScheduler+0x128>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d10a      	bne.n	800d2e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	60fb      	str	r3, [r7, #12]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2e6:	4b39      	ldr	r3, [pc, #228]	; (800d3cc <xPortStartScheduler+0x12c>)
 800d2e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	22ff      	movs	r2, #255	; 0xff
 800d2f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d300:	78fb      	ldrb	r3, [r7, #3]
 800d302:	b2db      	uxtb	r3, r3
 800d304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	4b31      	ldr	r3, [pc, #196]	; (800d3d0 <xPortStartScheduler+0x130>)
 800d30c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d30e:	4b31      	ldr	r3, [pc, #196]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d310:	2207      	movs	r2, #7
 800d312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d314:	e009      	b.n	800d32a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d316:	4b2f      	ldr	r3, [pc, #188]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	4a2d      	ldr	r2, [pc, #180]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d31e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d320:	78fb      	ldrb	r3, [r7, #3]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	005b      	lsls	r3, r3, #1
 800d326:	b2db      	uxtb	r3, r3
 800d328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d32a:	78fb      	ldrb	r3, [r7, #3]
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d332:	2b80      	cmp	r3, #128	; 0x80
 800d334:	d0ef      	beq.n	800d316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d336:	4b27      	ldr	r3, [pc, #156]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f1c3 0307 	rsb	r3, r3, #7
 800d33e:	2b04      	cmp	r3, #4
 800d340:	d00a      	beq.n	800d358 <xPortStartScheduler+0xb8>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	60bb      	str	r3, [r7, #8]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d358:	4b1e      	ldr	r3, [pc, #120]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	021b      	lsls	r3, r3, #8
 800d35e:	4a1d      	ldr	r2, [pc, #116]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d362:	4b1c      	ldr	r3, [pc, #112]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d36a:	4a1a      	ldr	r2, [pc, #104]	; (800d3d4 <xPortStartScheduler+0x134>)
 800d36c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	b2da      	uxtb	r2, r3
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d376:	4b18      	ldr	r3, [pc, #96]	; (800d3d8 <xPortStartScheduler+0x138>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a17      	ldr	r2, [pc, #92]	; (800d3d8 <xPortStartScheduler+0x138>)
 800d37c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d382:	4b15      	ldr	r3, [pc, #84]	; (800d3d8 <xPortStartScheduler+0x138>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a14      	ldr	r2, [pc, #80]	; (800d3d8 <xPortStartScheduler+0x138>)
 800d388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d38c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d38e:	f000 f8dd 	bl	800d54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d392:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <xPortStartScheduler+0x13c>)
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d398:	f000 f8fc 	bl	800d594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d39c:	4b10      	ldr	r3, [pc, #64]	; (800d3e0 <xPortStartScheduler+0x140>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a0f      	ldr	r2, [pc, #60]	; (800d3e0 <xPortStartScheduler+0x140>)
 800d3a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d3a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3a8:	f7ff ff66 	bl	800d278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3ac:	f7ff f890 	bl	800c4d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d3b0:	f7ff ff1e 	bl	800d1f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3718      	adds	r7, #24
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	e000ed00 	.word	0xe000ed00
 800d3c4:	410fc271 	.word	0x410fc271
 800d3c8:	410fc270 	.word	0x410fc270
 800d3cc:	e000e400 	.word	0xe000e400
 800d3d0:	20000488 	.word	0x20000488
 800d3d4:	2000048c 	.word	0x2000048c
 800d3d8:	e000ed20 	.word	0xe000ed20
 800d3dc:	20000060 	.word	0x20000060
 800d3e0:	e000ef34 	.word	0xe000ef34

0800d3e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	607b      	str	r3, [r7, #4]
}
 800d3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3fe:	4b0f      	ldr	r3, [pc, #60]	; (800d43c <vPortEnterCritical+0x58>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3301      	adds	r3, #1
 800d404:	4a0d      	ldr	r2, [pc, #52]	; (800d43c <vPortEnterCritical+0x58>)
 800d406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d408:	4b0c      	ldr	r3, [pc, #48]	; (800d43c <vPortEnterCritical+0x58>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d10f      	bne.n	800d430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d410:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <vPortEnterCritical+0x5c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <vPortEnterCritical+0x4c>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	603b      	str	r3, [r7, #0]
}
 800d42c:	bf00      	nop
 800d42e:	e7fe      	b.n	800d42e <vPortEnterCritical+0x4a>
	}
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	20000060 	.word	0x20000060
 800d440:	e000ed04 	.word	0xe000ed04

0800d444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d44a:	4b12      	ldr	r3, [pc, #72]	; (800d494 <vPortExitCritical+0x50>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10a      	bne.n	800d468 <vPortExitCritical+0x24>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	607b      	str	r3, [r7, #4]
}
 800d464:	bf00      	nop
 800d466:	e7fe      	b.n	800d466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d468:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <vPortExitCritical+0x50>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	4a09      	ldr	r2, [pc, #36]	; (800d494 <vPortExitCritical+0x50>)
 800d470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d472:	4b08      	ldr	r3, [pc, #32]	; (800d494 <vPortExitCritical+0x50>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d105      	bne.n	800d486 <vPortExitCritical+0x42>
 800d47a:	2300      	movs	r3, #0
 800d47c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	f383 8811 	msr	BASEPRI, r3
}
 800d484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d486:	bf00      	nop
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	20000060 	.word	0x20000060
	...

0800d4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4a0:	f3ef 8009 	mrs	r0, PSP
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	4b15      	ldr	r3, [pc, #84]	; (800d500 <pxCurrentTCBConst>)
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	f01e 0f10 	tst.w	lr, #16
 800d4b0:	bf08      	it	eq
 800d4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ba:	6010      	str	r0, [r2, #0]
 800d4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d4c4:	f380 8811 	msr	BASEPRI, r0
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f7fe fffe 	bl	800c4d0 <vTaskSwitchContext>
 800d4d4:	f04f 0000 	mov.w	r0, #0
 800d4d8:	f380 8811 	msr	BASEPRI, r0
 800d4dc:	bc09      	pop	{r0, r3}
 800d4de:	6819      	ldr	r1, [r3, #0]
 800d4e0:	6808      	ldr	r0, [r1, #0]
 800d4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e6:	f01e 0f10 	tst.w	lr, #16
 800d4ea:	bf08      	it	eq
 800d4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4f0:	f380 8809 	msr	PSP, r0
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	f3af 8000 	nop.w

0800d500 <pxCurrentTCBConst>:
 800d500:	2000035c 	.word	0x2000035c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d504:	bf00      	nop
 800d506:	bf00      	nop

0800d508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	607b      	str	r3, [r7, #4]
}
 800d520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d522:	f7fe ff1d 	bl	800c360 <xTaskIncrementTick>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d52c:	4b06      	ldr	r3, [pc, #24]	; (800d548 <SysTick_Handler+0x40>)
 800d52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	2300      	movs	r3, #0
 800d536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	f383 8811 	msr	BASEPRI, r3
}
 800d53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d540:	bf00      	nop
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <vPortSetupTimerInterrupt+0x34>)
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d556:	4b0b      	ldr	r3, [pc, #44]	; (800d584 <vPortSetupTimerInterrupt+0x38>)
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <vPortSetupTimerInterrupt+0x3c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a0a      	ldr	r2, [pc, #40]	; (800d58c <vPortSetupTimerInterrupt+0x40>)
 800d562:	fba2 2303 	umull	r2, r3, r2, r3
 800d566:	099b      	lsrs	r3, r3, #6
 800d568:	4a09      	ldr	r2, [pc, #36]	; (800d590 <vPortSetupTimerInterrupt+0x44>)
 800d56a:	3b01      	subs	r3, #1
 800d56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d56e:	4b04      	ldr	r3, [pc, #16]	; (800d580 <vPortSetupTimerInterrupt+0x34>)
 800d570:	2207      	movs	r2, #7
 800d572:	601a      	str	r2, [r3, #0]
}
 800d574:	bf00      	nop
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	e000e010 	.word	0xe000e010
 800d584:	e000e018 	.word	0xe000e018
 800d588:	20000010 	.word	0x20000010
 800d58c:	10624dd3 	.word	0x10624dd3
 800d590:	e000e014 	.word	0xe000e014

0800d594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d5a4 <vPortEnableVFP+0x10>
 800d598:	6801      	ldr	r1, [r0, #0]
 800d59a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d59e:	6001      	str	r1, [r0, #0]
 800d5a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5a2:	bf00      	nop
 800d5a4:	e000ed88 	.word	0xe000ed88

0800d5a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5ae:	f3ef 8305 	mrs	r3, IPSR
 800d5b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b0f      	cmp	r3, #15
 800d5b8:	d914      	bls.n	800d5e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5ba:	4a17      	ldr	r2, [pc, #92]	; (800d618 <vPortValidateInterruptPriority+0x70>)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4413      	add	r3, r2
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5c4:	4b15      	ldr	r3, [pc, #84]	; (800d61c <vPortValidateInterruptPriority+0x74>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	7afa      	ldrb	r2, [r7, #11]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d20a      	bcs.n	800d5e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	607b      	str	r3, [r7, #4]
}
 800d5e0:	bf00      	nop
 800d5e2:	e7fe      	b.n	800d5e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5e4:	4b0e      	ldr	r3, [pc, #56]	; (800d620 <vPortValidateInterruptPriority+0x78>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d5ec:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <vPortValidateInterruptPriority+0x7c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d90a      	bls.n	800d60a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	603b      	str	r3, [r7, #0]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <vPortValidateInterruptPriority+0x60>
	}
 800d60a:	bf00      	nop
 800d60c:	3714      	adds	r7, #20
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	e000e3f0 	.word	0xe000e3f0
 800d61c:	20000488 	.word	0x20000488
 800d620:	e000ed0c 	.word	0xe000ed0c
 800d624:	2000048c 	.word	0x2000048c

0800d628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	; 0x28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d630:	2300      	movs	r3, #0
 800d632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d634:	f7fe fdc8 	bl	800c1c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d638:	4b5b      	ldr	r3, [pc, #364]	; (800d7a8 <pvPortMalloc+0x180>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d640:	f000 f920 	bl	800d884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d644:	4b59      	ldr	r3, [pc, #356]	; (800d7ac <pvPortMalloc+0x184>)
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4013      	ands	r3, r2
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f040 8093 	bne.w	800d778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d01d      	beq.n	800d694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d658:	2208      	movs	r2, #8
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4413      	add	r3, r2
 800d65e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	2b00      	cmp	r3, #0
 800d668:	d014      	beq.n	800d694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f023 0307 	bic.w	r3, r3, #7
 800d670:	3308      	adds	r3, #8
 800d672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00a      	beq.n	800d694 <pvPortMalloc+0x6c>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	617b      	str	r3, [r7, #20]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d06e      	beq.n	800d778 <pvPortMalloc+0x150>
 800d69a:	4b45      	ldr	r3, [pc, #276]	; (800d7b0 <pvPortMalloc+0x188>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d869      	bhi.n	800d778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6a4:	4b43      	ldr	r3, [pc, #268]	; (800d7b4 <pvPortMalloc+0x18c>)
 800d6a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6a8:	4b42      	ldr	r3, [pc, #264]	; (800d7b4 <pvPortMalloc+0x18c>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6ae:	e004      	b.n	800d6ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d903      	bls.n	800d6cc <pvPortMalloc+0xa4>
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1f1      	bne.n	800d6b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6cc:	4b36      	ldr	r3, [pc, #216]	; (800d7a8 <pvPortMalloc+0x180>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d050      	beq.n	800d778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2208      	movs	r2, #8
 800d6dc:	4413      	add	r3, r2
 800d6de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	1ad2      	subs	r2, r2, r3
 800d6f0:	2308      	movs	r3, #8
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d91f      	bls.n	800d738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <pvPortMalloc+0xf8>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	613b      	str	r3, [r7, #16]
}
 800d71c:	bf00      	nop
 800d71e:	e7fe      	b.n	800d71e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	1ad2      	subs	r2, r2, r3
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d732:	69b8      	ldr	r0, [r7, #24]
 800d734:	f000 f90a 	bl	800d94c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d738:	4b1d      	ldr	r3, [pc, #116]	; (800d7b0 <pvPortMalloc+0x188>)
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	4a1b      	ldr	r2, [pc, #108]	; (800d7b0 <pvPortMalloc+0x188>)
 800d744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d746:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <pvPortMalloc+0x188>)
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	4b1b      	ldr	r3, [pc, #108]	; (800d7b8 <pvPortMalloc+0x190>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d203      	bcs.n	800d75a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d752:	4b17      	ldr	r3, [pc, #92]	; (800d7b0 <pvPortMalloc+0x188>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a18      	ldr	r2, [pc, #96]	; (800d7b8 <pvPortMalloc+0x190>)
 800d758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	4b13      	ldr	r3, [pc, #76]	; (800d7ac <pvPortMalloc+0x184>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	431a      	orrs	r2, r3
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d76e:	4b13      	ldr	r3, [pc, #76]	; (800d7bc <pvPortMalloc+0x194>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	4a11      	ldr	r2, [pc, #68]	; (800d7bc <pvPortMalloc+0x194>)
 800d776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d778:	f7fe fd34 	bl	800c1e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	f003 0307 	and.w	r3, r3, #7
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00a      	beq.n	800d79c <pvPortMalloc+0x174>
	__asm volatile
 800d786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78a:	f383 8811 	msr	BASEPRI, r3
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f3bf 8f4f 	dsb	sy
 800d796:	60fb      	str	r3, [r7, #12]
}
 800d798:	bf00      	nop
 800d79a:	e7fe      	b.n	800d79a <pvPortMalloc+0x172>
	return pvReturn;
 800d79c:	69fb      	ldr	r3, [r7, #28]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3728      	adds	r7, #40	; 0x28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20013d18 	.word	0x20013d18
 800d7ac:	20013d2c 	.word	0x20013d2c
 800d7b0:	20013d1c 	.word	0x20013d1c
 800d7b4:	20013d10 	.word	0x20013d10
 800d7b8:	20013d20 	.word	0x20013d20
 800d7bc:	20013d24 	.word	0x20013d24

0800d7c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d04d      	beq.n	800d86e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7d2:	2308      	movs	r3, #8
 800d7d4:	425b      	negs	r3, r3
 800d7d6:	697a      	ldr	r2, [r7, #20]
 800d7d8:	4413      	add	r3, r2
 800d7da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	685a      	ldr	r2, [r3, #4]
 800d7e4:	4b24      	ldr	r3, [pc, #144]	; (800d878 <vPortFree+0xb8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10a      	bne.n	800d804 <vPortFree+0x44>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	60fb      	str	r3, [r7, #12]
}
 800d800:	bf00      	nop
 800d802:	e7fe      	b.n	800d802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00a      	beq.n	800d822 <vPortFree+0x62>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	60bb      	str	r3, [r7, #8]
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	4b14      	ldr	r3, [pc, #80]	; (800d878 <vPortFree+0xb8>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4013      	ands	r3, r2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d01e      	beq.n	800d86e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11a      	bne.n	800d86e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <vPortFree+0xb8>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	43db      	mvns	r3, r3
 800d842:	401a      	ands	r2, r3
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d848:	f7fe fcbe 	bl	800c1c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	4b0a      	ldr	r3, [pc, #40]	; (800d87c <vPortFree+0xbc>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4413      	add	r3, r2
 800d856:	4a09      	ldr	r2, [pc, #36]	; (800d87c <vPortFree+0xbc>)
 800d858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d85a:	6938      	ldr	r0, [r7, #16]
 800d85c:	f000 f876 	bl	800d94c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d860:	4b07      	ldr	r3, [pc, #28]	; (800d880 <vPortFree+0xc0>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3301      	adds	r3, #1
 800d866:	4a06      	ldr	r2, [pc, #24]	; (800d880 <vPortFree+0xc0>)
 800d868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d86a:	f7fe fcbb 	bl	800c1e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d86e:	bf00      	nop
 800d870:	3718      	adds	r7, #24
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	20013d2c 	.word	0x20013d2c
 800d87c:	20013d1c 	.word	0x20013d1c
 800d880:	20013d28 	.word	0x20013d28

0800d884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d88a:	4b29      	ldr	r3, [pc, #164]	; (800d930 <prvHeapInit+0xac>)
 800d88c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d88e:	4b29      	ldr	r3, [pc, #164]	; (800d934 <prvHeapInit+0xb0>)
 800d890:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f003 0307 	and.w	r3, r3, #7
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00c      	beq.n	800d8b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3307      	adds	r3, #7
 800d8a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f023 0307 	bic.w	r3, r3, #7
 800d8a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	4a20      	ldr	r2, [pc, #128]	; (800d934 <prvHeapInit+0xb0>)
 800d8b2:	4413      	add	r3, r2
 800d8b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8ba:	4a1f      	ldr	r2, [pc, #124]	; (800d938 <prvHeapInit+0xb4>)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8c0:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <prvHeapInit+0xb4>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	1a9b      	subs	r3, r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f023 0307 	bic.w	r3, r3, #7
 800d8dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4a16      	ldr	r2, [pc, #88]	; (800d93c <prvHeapInit+0xb8>)
 800d8e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d8e4:	4b15      	ldr	r3, [pc, #84]	; (800d93c <prvHeapInit+0xb8>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d8ec:	4b13      	ldr	r3, [pc, #76]	; (800d93c <prvHeapInit+0xb8>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	1ad2      	subs	r2, r2, r3
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d902:	4b0e      	ldr	r3, [pc, #56]	; (800d93c <prvHeapInit+0xb8>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	4a0c      	ldr	r2, [pc, #48]	; (800d940 <prvHeapInit+0xbc>)
 800d910:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	4a0b      	ldr	r2, [pc, #44]	; (800d944 <prvHeapInit+0xc0>)
 800d918:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d91a:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <prvHeapInit+0xc4>)
 800d91c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d920:	601a      	str	r2, [r3, #0]
}
 800d922:	bf00      	nop
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	00013880 	.word	0x00013880
 800d934:	20000490 	.word	0x20000490
 800d938:	20013d10 	.word	0x20013d10
 800d93c:	20013d18 	.word	0x20013d18
 800d940:	20013d20 	.word	0x20013d20
 800d944:	20013d1c 	.word	0x20013d1c
 800d948:	20013d2c 	.word	0x20013d2c

0800d94c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d954:	4b28      	ldr	r3, [pc, #160]	; (800d9f8 <prvInsertBlockIntoFreeList+0xac>)
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	e002      	b.n	800d960 <prvInsertBlockIntoFreeList+0x14>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	429a      	cmp	r2, r3
 800d968:	d8f7      	bhi.n	800d95a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	4413      	add	r3, r2
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d108      	bne.n	800d98e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	685a      	ldr	r2, [r3, #4]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	441a      	add	r2, r3
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	441a      	add	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d118      	bne.n	800d9d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <prvInsertBlockIntoFreeList+0xb0>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d00d      	beq.n	800d9ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	685a      	ldr	r2, [r3, #4]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	441a      	add	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	e008      	b.n	800d9dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <prvInsertBlockIntoFreeList+0xb0>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e003      	b.n	800d9dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d002      	beq.n	800d9ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9ea:	bf00      	nop
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	20013d10 	.word	0x20013d10
 800d9fc:	20013d18 	.word	0x20013d18

0800da00 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	22fa      	movs	r2, #250	; 0xfa
 800da0e:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	330c      	adds	r3, #12
 800da16:	461a      	mov	r2, r3
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f004 fc7e 	bl	801231c <tcpip_send_msg_wait_sem>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800da24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d103      	bne.n	800da34 <netconn_apimsg+0x34>
    return apimsg->err;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800da32:	e001      	b.n	800da38 <netconn_apimsg+0x38>
  }
  return err;
 800da34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08c      	sub	sp, #48	; 0x30
 800da44:	af00      	add	r7, sp, #0
 800da46:	4603      	mov	r3, r0
 800da48:	603a      	str	r2, [r7, #0]
 800da4a:	71fb      	strb	r3, [r7, #7]
 800da4c:	460b      	mov	r3, r1
 800da4e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800da50:	79fb      	ldrb	r3, [r7, #7]
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	4618      	mov	r0, r3
 800da56:	f001 fa61 	bl	800ef1c <netconn_alloc>
 800da5a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d054      	beq.n	800db0c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800da62:	79bb      	ldrb	r3, [r7, #6]
 800da64:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800da66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da68:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800da6a:	f107 0308 	add.w	r3, r7, #8
 800da6e:	4619      	mov	r1, r3
 800da70:	4829      	ldr	r0, [pc, #164]	; (800db18 <netconn_new_with_proto_and_callback+0xd8>)
 800da72:	f7ff ffc5 	bl	800da00 <netconn_apimsg>
 800da76:	4603      	mov	r3, r0
 800da78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800da7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800da80:	2b00      	cmp	r3, #0
 800da82:	d043      	beq.n	800db0c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <netconn_new_with_proto_and_callback+0x58>
 800da8c:	4b23      	ldr	r3, [pc, #140]	; (800db1c <netconn_new_with_proto_and_callback+0xdc>)
 800da8e:	22a3      	movs	r2, #163	; 0xa3
 800da90:	4923      	ldr	r1, [pc, #140]	; (800db20 <netconn_new_with_proto_and_callback+0xe0>)
 800da92:	4824      	ldr	r0, [pc, #144]	; (800db24 <netconn_new_with_proto_and_callback+0xe4>)
 800da94:	f014 f90a 	bl	8021cac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9a:	3310      	adds	r3, #16
 800da9c:	4618      	mov	r0, r3
 800da9e:	f013 f958 	bl	8020d52 <sys_mbox_valid>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d105      	bne.n	800dab4 <netconn_new_with_proto_and_callback+0x74>
 800daa8:	4b1c      	ldr	r3, [pc, #112]	; (800db1c <netconn_new_with_proto_and_callback+0xdc>)
 800daaa:	22a4      	movs	r2, #164	; 0xa4
 800daac:	491e      	ldr	r1, [pc, #120]	; (800db28 <netconn_new_with_proto_and_callback+0xe8>)
 800daae:	481d      	ldr	r0, [pc, #116]	; (800db24 <netconn_new_with_proto_and_callback+0xe4>)
 800dab0:	f014 f8fc 	bl	8021cac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	3314      	adds	r3, #20
 800dab8:	4618      	mov	r0, r3
 800daba:	f013 f94a 	bl	8020d52 <sys_mbox_valid>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d005      	beq.n	800dad0 <netconn_new_with_proto_and_callback+0x90>
 800dac4:	4b15      	ldr	r3, [pc, #84]	; (800db1c <netconn_new_with_proto_and_callback+0xdc>)
 800dac6:	22a6      	movs	r2, #166	; 0xa6
 800dac8:	4918      	ldr	r1, [pc, #96]	; (800db2c <netconn_new_with_proto_and_callback+0xec>)
 800daca:	4816      	ldr	r0, [pc, #88]	; (800db24 <netconn_new_with_proto_and_callback+0xe4>)
 800dacc:	f014 f8ee 	bl	8021cac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	330c      	adds	r3, #12
 800dad4:	4618      	mov	r0, r3
 800dad6:	f013 f9cb 	bl	8020e70 <sys_sem_valid>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d105      	bne.n	800daec <netconn_new_with_proto_and_callback+0xac>
 800dae0:	4b0e      	ldr	r3, [pc, #56]	; (800db1c <netconn_new_with_proto_and_callback+0xdc>)
 800dae2:	22a9      	movs	r2, #169	; 0xa9
 800dae4:	4912      	ldr	r1, [pc, #72]	; (800db30 <netconn_new_with_proto_and_callback+0xf0>)
 800dae6:	480f      	ldr	r0, [pc, #60]	; (800db24 <netconn_new_with_proto_and_callback+0xe4>)
 800dae8:	f014 f8e0 	bl	8021cac <iprintf>
      sys_sem_free(&conn->op_completed);
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	330c      	adds	r3, #12
 800daf0:	4618      	mov	r0, r3
 800daf2:	f013 f9b0 	bl	8020e56 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800daf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf8:	3310      	adds	r3, #16
 800dafa:	4618      	mov	r0, r3
 800dafc:	f013 f8a2 	bl	8020c44 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800db00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db02:	2007      	movs	r0, #7
 800db04:	f006 f948 	bl	8013d98 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800db08:	2300      	movs	r3, #0
 800db0a:	e000      	b.n	800db0e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3730      	adds	r7, #48	; 0x30
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	0800eef1 	.word	0x0800eef1
 800db1c:	08025994 	.word	0x08025994
 800db20:	080259c8 	.word	0x080259c8
 800db24:	080259ec 	.word	0x080259ec
 800db28:	08025a14 	.word	0x08025a14
 800db2c:	08025a2c 	.word	0x08025a2c
 800db30:	08025a50 	.word	0x08025a50

0800db34 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08c      	sub	sp, #48	; 0x30
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d101      	bne.n	800db46 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	e014      	b.n	800db70 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800db4a:	2329      	movs	r3, #41	; 0x29
 800db4c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800db4e:	f107 030c 	add.w	r3, r7, #12
 800db52:	4619      	mov	r1, r3
 800db54:	4808      	ldr	r0, [pc, #32]	; (800db78 <netconn_prepare_delete+0x44>)
 800db56:	f7ff ff53 	bl	800da00 <netconn_apimsg>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800db60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <netconn_prepare_delete+0x3a>
    return err;
 800db68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800db6c:	e000      	b.n	800db70 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3730      	adds	r7, #48	; 0x30
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	0800f455 	.word	0x0800f455

0800db7c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <netconn_delete+0x12>
    return ERR_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e00d      	b.n	800dbaa <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff ffd0 	bl	800db34 <netconn_prepare_delete>
 800db94:	4603      	mov	r3, r0
 800db96:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800db98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <netconn_delete+0x2a>
    netconn_free(conn);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f001 fa29 	bl	800eff8 <netconn_free>
  }
  return err;
 800dba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08e      	sub	sp, #56	; 0x38
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
 800dbc0:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d109      	bne.n	800dbdc <netconn_getaddr+0x28>
 800dbc8:	4b1d      	ldr	r3, [pc, #116]	; (800dc40 <netconn_getaddr+0x8c>)
 800dbca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dbce:	491d      	ldr	r1, [pc, #116]	; (800dc44 <netconn_getaddr+0x90>)
 800dbd0:	481d      	ldr	r0, [pc, #116]	; (800dc48 <netconn_getaddr+0x94>)
 800dbd2:	f014 f86b 	bl	8021cac <iprintf>
 800dbd6:	f06f 030f 	mvn.w	r3, #15
 800dbda:	e02d      	b.n	800dc38 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d109      	bne.n	800dbf6 <netconn_getaddr+0x42>
 800dbe2:	4b17      	ldr	r3, [pc, #92]	; (800dc40 <netconn_getaddr+0x8c>)
 800dbe4:	f240 1213 	movw	r2, #275	; 0x113
 800dbe8:	4918      	ldr	r1, [pc, #96]	; (800dc4c <netconn_getaddr+0x98>)
 800dbea:	4817      	ldr	r0, [pc, #92]	; (800dc48 <netconn_getaddr+0x94>)
 800dbec:	f014 f85e 	bl	8021cac <iprintf>
 800dbf0:	f06f 030f 	mvn.w	r3, #15
 800dbf4:	e020      	b.n	800dc38 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d109      	bne.n	800dc10 <netconn_getaddr+0x5c>
 800dbfc:	4b10      	ldr	r3, [pc, #64]	; (800dc40 <netconn_getaddr+0x8c>)
 800dbfe:	f44f 728a 	mov.w	r2, #276	; 0x114
 800dc02:	4913      	ldr	r1, [pc, #76]	; (800dc50 <netconn_getaddr+0x9c>)
 800dc04:	4810      	ldr	r0, [pc, #64]	; (800dc48 <netconn_getaddr+0x94>)
 800dc06:	f014 f851 	bl	8021cac <iprintf>
 800dc0a:	f06f 030f 	mvn.w	r3, #15
 800dc0e:	e013      	b.n	800dc38 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800dc22:	f107 0314 	add.w	r3, r7, #20
 800dc26:	4619      	mov	r1, r3
 800dc28:	480a      	ldr	r0, [pc, #40]	; (800dc54 <netconn_getaddr+0xa0>)
 800dc2a:	f7ff fee9 	bl	800da00 <netconn_apimsg>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800dc34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3738      	adds	r7, #56	; 0x38
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	08025994 	.word	0x08025994
 800dc44:	08025a6c 	.word	0x08025a6c
 800dc48:	080259ec 	.word	0x080259ec
 800dc4c:	08025a8c 	.word	0x08025a8c
 800dc50:	08025aac 	.word	0x08025aac
 800dc54:	0801004d 	.word	0x0801004d

0800dc58 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08e      	sub	sp, #56	; 0x38
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d109      	bne.n	800dc80 <netconn_bind+0x28>
 800dc6c:	4b11      	ldr	r3, [pc, #68]	; (800dcb4 <netconn_bind+0x5c>)
 800dc6e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800dc72:	4911      	ldr	r1, [pc, #68]	; (800dcb8 <netconn_bind+0x60>)
 800dc74:	4811      	ldr	r0, [pc, #68]	; (800dcbc <netconn_bind+0x64>)
 800dc76:	f014 f819 	bl	8021cac <iprintf>
 800dc7a:	f06f 030f 	mvn.w	r3, #15
 800dc7e:	e015      	b.n	800dcac <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d101      	bne.n	800dc8a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800dc86:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <netconn_bind+0x68>)
 800dc88:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800dc96:	f107 0314 	add.w	r3, r7, #20
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4809      	ldr	r0, [pc, #36]	; (800dcc4 <netconn_bind+0x6c>)
 800dc9e:	f7ff feaf 	bl	800da00 <netconn_apimsg>
 800dca2:	4603      	mov	r3, r0
 800dca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dca8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3738      	adds	r7, #56	; 0x38
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	08025994 	.word	0x08025994
 800dcb8:	08025acc 	.word	0x08025acc
 800dcbc:	080259ec 	.word	0x080259ec
 800dcc0:	08029ae8 	.word	0x08029ae8
 800dcc4:	0800f61d 	.word	0x0800f61d

0800dcc8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08e      	sub	sp, #56	; 0x38
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <netconn_connect+0x28>
 800dcdc:	4b11      	ldr	r3, [pc, #68]	; (800dd24 <netconn_connect+0x5c>)
 800dcde:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800dce2:	4911      	ldr	r1, [pc, #68]	; (800dd28 <netconn_connect+0x60>)
 800dce4:	4811      	ldr	r0, [pc, #68]	; (800dd2c <netconn_connect+0x64>)
 800dce6:	f013 ffe1 	bl	8021cac <iprintf>
 800dcea:	f06f 030f 	mvn.w	r3, #15
 800dcee:	e015      	b.n	800dd1c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d101      	bne.n	800dcfa <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800dcf6:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <netconn_connect+0x68>)
 800dcf8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800dd02:	88fb      	ldrh	r3, [r7, #6]
 800dd04:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800dd06:	f107 0314 	add.w	r3, r7, #20
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	4809      	ldr	r0, [pc, #36]	; (800dd34 <netconn_connect+0x6c>)
 800dd0e:	f7ff fe77 	bl	800da00 <netconn_apimsg>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dd18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3738      	adds	r7, #56	; 0x38
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	08025994 	.word	0x08025994
 800dd28:	08025b08 	.word	0x08025b08
 800dd2c:	080259ec 	.word	0x080259ec
 800dd30:	08029ae8 	.word	0x08029ae8
 800dd34:	0800f7b1 	.word	0x0800f7b1

0800dd38 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b08c      	sub	sp, #48	; 0x30
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d109      	bne.n	800dd5a <netconn_disconnect+0x22>
 800dd46:	4b0d      	ldr	r3, [pc, #52]	; (800dd7c <netconn_disconnect+0x44>)
 800dd48:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dd4c:	490c      	ldr	r1, [pc, #48]	; (800dd80 <netconn_disconnect+0x48>)
 800dd4e:	480d      	ldr	r0, [pc, #52]	; (800dd84 <netconn_disconnect+0x4c>)
 800dd50:	f013 ffac 	bl	8021cac <iprintf>
 800dd54:	f06f 030f 	mvn.w	r3, #15
 800dd58:	e00c      	b.n	800dd74 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	4619      	mov	r1, r3
 800dd64:	4808      	ldr	r0, [pc, #32]	; (800dd88 <netconn_disconnect+0x50>)
 800dd66:	f7ff fe4b 	bl	800da00 <netconn_apimsg>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dd70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3730      	adds	r7, #48	; 0x30
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	08025994 	.word	0x08025994
 800dd80:	08025b28 	.word	0x08025b28
 800dd84:	080259ec 	.word	0x080259ec
 800dd88:	0800f92d 	.word	0x0800f92d

0800dd8c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08c      	sub	sp, #48	; 0x30
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d109      	bne.n	800ddb2 <netconn_listen_with_backlog+0x26>
 800dd9e:	4b0d      	ldr	r3, [pc, #52]	; (800ddd4 <netconn_listen_with_backlog+0x48>)
 800dda0:	f240 12bb 	movw	r2, #443	; 0x1bb
 800dda4:	490c      	ldr	r1, [pc, #48]	; (800ddd8 <netconn_listen_with_backlog+0x4c>)
 800dda6:	480d      	ldr	r0, [pc, #52]	; (800dddc <netconn_listen_with_backlog+0x50>)
 800dda8:	f013 ff80 	bl	8021cac <iprintf>
 800ddac:	f06f 030f 	mvn.w	r3, #15
 800ddb0:	e00c      	b.n	800ddcc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ddb6:	f107 030c 	add.w	r3, r7, #12
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4808      	ldr	r0, [pc, #32]	; (800dde0 <netconn_listen_with_backlog+0x54>)
 800ddbe:	f7ff fe1f 	bl	800da00 <netconn_apimsg>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ddc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3730      	adds	r7, #48	; 0x30
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	08025994 	.word	0x08025994
 800ddd8:	08025b4c 	.word	0x08025b4c
 800dddc:	080259ec 	.word	0x080259ec
 800dde0:	0800f969 	.word	0x0800f969

0800dde4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d109      	bne.n	800de08 <netconn_accept+0x24>
 800ddf4:	4b3d      	ldr	r3, [pc, #244]	; (800deec <netconn_accept+0x108>)
 800ddf6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ddfa:	493d      	ldr	r1, [pc, #244]	; (800def0 <netconn_accept+0x10c>)
 800ddfc:	483d      	ldr	r0, [pc, #244]	; (800def4 <netconn_accept+0x110>)
 800ddfe:	f013 ff55 	bl	8021cac <iprintf>
 800de02:	f06f 030f 	mvn.w	r3, #15
 800de06:	e06c      	b.n	800dee2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d109      	bne.n	800de28 <netconn_accept+0x44>
 800de14:	4b35      	ldr	r3, [pc, #212]	; (800deec <netconn_accept+0x108>)
 800de16:	f240 12e3 	movw	r2, #483	; 0x1e3
 800de1a:	4937      	ldr	r1, [pc, #220]	; (800def8 <netconn_accept+0x114>)
 800de1c:	4835      	ldr	r0, [pc, #212]	; (800def4 <netconn_accept+0x110>)
 800de1e:	f013 ff45 	bl	8021cac <iprintf>
 800de22:	f06f 030f 	mvn.w	r3, #15
 800de26:	e05c      	b.n	800dee2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 fb99 	bl	800e560 <netconn_err>
 800de2e:	4603      	mov	r3, r0
 800de30:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800de32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800de3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de3e:	e050      	b.n	800dee2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	3314      	adds	r3, #20
 800de44:	4618      	mov	r0, r3
 800de46:	f012 ff84 	bl	8020d52 <sys_mbox_valid>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <netconn_accept+0x78>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7f1b      	ldrb	r3, [r3, #28]
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800de5c:	f06f 030e 	mvn.w	r3, #14
 800de60:	e03f      	b.n	800dee2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	7f1b      	ldrb	r3, [r3, #28]
 800de66:	f003 0302 	and.w	r3, r3, #2
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00e      	beq.n	800de8c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	3314      	adds	r3, #20
 800de72:	f107 020c 	add.w	r2, r7, #12
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f012 ff4e 	bl	8020d1a <sys_arch_mbox_tryfetch>
 800de7e:	4603      	mov	r3, r0
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de84:	d10a      	bne.n	800de9c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800de86:	f06f 0306 	mvn.w	r3, #6
 800de8a:	e02a      	b.n	800dee2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3314      	adds	r3, #20
 800de90:	f107 010c 	add.w	r1, r7, #12
 800de94:	2200      	movs	r2, #0
 800de96:	4618      	mov	r0, r3
 800de98:	f012 ff00 	bl	8020c9c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d005      	beq.n	800deb0 <netconn_accept+0xcc>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	2200      	movs	r2, #0
 800deaa:	2101      	movs	r1, #1
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f107 0213 	add.w	r2, r7, #19
 800deb6:	4611      	mov	r1, r2
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 fbff 	bl	800e6bc <lwip_netconn_is_err_msg>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800dec4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dec8:	e00b      	b.n	800dee2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ded0:	f06f 030e 	mvn.w	r3, #14
 800ded4:	e005      	b.n	800dee2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800dee0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	08025994 	.word	0x08025994
 800def0:	08025b6c 	.word	0x08025b6c
 800def4:	080259ec 	.word	0x080259ec
 800def8:	08025b8c 	.word	0x08025b8c

0800defc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d109      	bne.n	800df28 <netconn_recv_data+0x2c>
 800df14:	4b58      	ldr	r3, [pc, #352]	; (800e078 <netconn_recv_data+0x17c>)
 800df16:	f44f 7212 	mov.w	r2, #584	; 0x248
 800df1a:	4958      	ldr	r1, [pc, #352]	; (800e07c <netconn_recv_data+0x180>)
 800df1c:	4858      	ldr	r0, [pc, #352]	; (800e080 <netconn_recv_data+0x184>)
 800df1e:	f013 fec5 	bl	8021cac <iprintf>
 800df22:	f06f 030f 	mvn.w	r3, #15
 800df26:	e0a2      	b.n	800e06e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2200      	movs	r2, #0
 800df2c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d109      	bne.n	800df48 <netconn_recv_data+0x4c>
 800df34:	4b50      	ldr	r3, [pc, #320]	; (800e078 <netconn_recv_data+0x17c>)
 800df36:	f240 224a 	movw	r2, #586	; 0x24a
 800df3a:	4952      	ldr	r1, [pc, #328]	; (800e084 <netconn_recv_data+0x188>)
 800df3c:	4850      	ldr	r0, [pc, #320]	; (800e080 <netconn_recv_data+0x184>)
 800df3e:	f013 feb5 	bl	8021cac <iprintf>
 800df42:	f06f 030f 	mvn.w	r3, #15
 800df46:	e092      	b.n	800e06e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3310      	adds	r3, #16
 800df4c:	4618      	mov	r0, r3
 800df4e:	f012 ff00 	bl	8020d52 <sys_mbox_valid>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10e      	bne.n	800df76 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 fb01 	bl	800e560 <netconn_err>
 800df5e:	4603      	mov	r3, r0
 800df60:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800df62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800df6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800df6e:	e07e      	b.n	800e06e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800df70:	f06f 030a 	mvn.w	r3, #10
 800df74:	e07b      	b.n	800e06e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	7f1b      	ldrb	r3, [r3, #28]
 800df7a:	f003 0302 	and.w	r3, r3, #2
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10f      	bne.n	800dfa2 <netconn_recv_data+0xa6>
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10a      	bne.n	800dfa2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	7f1b      	ldrb	r3, [r3, #28]
 800df90:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800df94:	2b00      	cmp	r3, #0
 800df96:	d104      	bne.n	800dfa2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d023      	beq.n	800dfea <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	3310      	adds	r3, #16
 800dfa6:	f107 0218 	add.w	r2, r7, #24
 800dfaa:	4611      	mov	r1, r2
 800dfac:	4618      	mov	r0, r3
 800dfae:	f012 feb4 	bl	8020d1a <sys_arch_mbox_tryfetch>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfb8:	d11f      	bne.n	800dffa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f000 fad0 	bl	800e560 <netconn_err>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800dfc4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800dfcc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dfd0:	e04d      	b.n	800e06e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	7f1b      	ldrb	r3, [r3, #28]
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800dfde:	f06f 030a 	mvn.w	r3, #10
 800dfe2:	e044      	b.n	800e06e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800dfe4:	f06f 0306 	mvn.w	r3, #6
 800dfe8:	e041      	b.n	800e06e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3310      	adds	r3, #16
 800dfee:	f107 0118 	add.w	r1, r7, #24
 800dff2:	2200      	movs	r2, #0
 800dff4:	4618      	mov	r0, r3
 800dff6:	f012 fe51 	bl	8020c9c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e002:	2b10      	cmp	r3, #16
 800e004:	d117      	bne.n	800e036 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	f107 0217 	add.w	r2, r7, #23
 800e00c:	4611      	mov	r1, r2
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 fb54 	bl	800e6bc <lwip_netconn_is_err_msg>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d009      	beq.n	800e02e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e01e:	f113 0f0f 	cmn.w	r3, #15
 800e022:	d101      	bne.n	800e028 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	e022      	b.n	800e06e <netconn_recv_data+0x172>
      }
      return err;
 800e028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e02c:	e01f      	b.n	800e06e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	891b      	ldrh	r3, [r3, #8]
 800e032:	83fb      	strh	r3, [r7, #30]
 800e034:	e00d      	b.n	800e052 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d106      	bne.n	800e04a <netconn_recv_data+0x14e>
 800e03c:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <netconn_recv_data+0x17c>)
 800e03e:	f240 2291 	movw	r2, #657	; 0x291
 800e042:	4911      	ldr	r1, [pc, #68]	; (800e088 <netconn_recv_data+0x18c>)
 800e044:	480e      	ldr	r0, [pc, #56]	; (800e080 <netconn_recv_data+0x184>)
 800e046:	f013 fe31 	bl	8021cac <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	891b      	ldrh	r3, [r3, #8]
 800e050:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	2b00      	cmp	r3, #0
 800e058:	d005      	beq.n	800e066 <netconn_recv_data+0x16a>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	8bfa      	ldrh	r2, [r7, #30]
 800e060:	2101      	movs	r1, #1
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3720      	adds	r7, #32
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	08025994 	.word	0x08025994
 800e07c:	08025bac 	.word	0x08025bac
 800e080:	080259ec 	.word	0x080259ec
 800e084:	08025bcc 	.word	0x08025bcc
 800e088:	08025be8 	.word	0x08025be8

0800e08c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d005      	beq.n	800e0aa <netconn_tcp_recvd_msg+0x1e>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0a6:	2b10      	cmp	r3, #16
 800e0a8:	d009      	beq.n	800e0be <netconn_tcp_recvd_msg+0x32>
 800e0aa:	4b0c      	ldr	r3, [pc, #48]	; (800e0dc <netconn_tcp_recvd_msg+0x50>)
 800e0ac:	f240 22a7 	movw	r2, #679	; 0x2a7
 800e0b0:	490b      	ldr	r1, [pc, #44]	; (800e0e0 <netconn_tcp_recvd_msg+0x54>)
 800e0b2:	480c      	ldr	r0, [pc, #48]	; (800e0e4 <netconn_tcp_recvd_msg+0x58>)
 800e0b4:	f013 fdfa 	bl	8021cac <iprintf>
 800e0b8:	f06f 030f 	mvn.w	r3, #15
 800e0bc:	e00a      	b.n	800e0d4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4806      	ldr	r0, [pc, #24]	; (800e0e8 <netconn_tcp_recvd_msg+0x5c>)
 800e0ce:	f7ff fc97 	bl	800da00 <netconn_apimsg>
 800e0d2:	4603      	mov	r3, r0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	08025994 	.word	0x08025994
 800e0e0:	08025bf4 	.word	0x08025bf4
 800e0e4:	080259ec 	.word	0x080259ec
 800e0e8:	0800fb33 	.word	0x0800fb33

0800e0ec <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08c      	sub	sp, #48	; 0x30
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d005      	beq.n	800e108 <netconn_tcp_recvd+0x1c>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e104:	2b10      	cmp	r3, #16
 800e106:	d009      	beq.n	800e11c <netconn_tcp_recvd+0x30>
 800e108:	4b0c      	ldr	r3, [pc, #48]	; (800e13c <netconn_tcp_recvd+0x50>)
 800e10a:	f240 22b5 	movw	r2, #693	; 0x2b5
 800e10e:	490c      	ldr	r1, [pc, #48]	; (800e140 <netconn_tcp_recvd+0x54>)
 800e110:	480c      	ldr	r0, [pc, #48]	; (800e144 <netconn_tcp_recvd+0x58>)
 800e112:	f013 fdcb 	bl	8021cac <iprintf>
 800e116:	f06f 030f 	mvn.w	r3, #15
 800e11a:	e00b      	b.n	800e134 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800e11c:	f107 030c 	add.w	r3, r7, #12
 800e120:	461a      	mov	r2, r3
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f7ff ffb1 	bl	800e08c <netconn_tcp_recvd_msg>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800e130:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e134:	4618      	mov	r0, r3
 800e136:	3730      	adds	r7, #48	; 0x30
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	08025994 	.word	0x08025994
 800e140:	08025bf4 	.word	0x08025bf4
 800e144:	080259ec 	.word	0x080259ec

0800e148 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b090      	sub	sp, #64	; 0x40
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	4613      	mov	r3, r2
 800e154:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	3310      	adds	r3, #16
 800e15a:	4618      	mov	r0, r3
 800e15c:	f012 fdf9 	bl	8020d52 <sys_mbox_valid>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d102      	bne.n	800e16c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e166:	f06f 030a 	mvn.w	r3, #10
 800e16a:	e06d      	b.n	800e248 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	7f1b      	ldrb	r3, [r3, #28]
 800e170:	b25b      	sxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	da07      	bge.n	800e186 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	7f1b      	ldrb	r3, [r3, #28]
 800e17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e184:	e039      	b.n	800e1fa <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e186:	79fb      	ldrb	r3, [r7, #7]
 800e188:	461a      	mov	r2, r3
 800e18a:	68b9      	ldr	r1, [r7, #8]
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7ff feb5 	bl	800defc <netconn_recv_data>
 800e192:	4603      	mov	r3, r0
 800e194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800e198:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d002      	beq.n	800e1a6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e1a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e1a4:	e050      	b.n	800e248 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	f003 0308 	and.w	r3, r3, #8
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10e      	bne.n	800e1d4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <netconn_recv_data_tcp+0x7a>
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1be:	891b      	ldrh	r3, [r3, #8]
 800e1c0:	e000      	b.n	800e1c4 <netconn_recv_data_tcp+0x7c>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e1c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1c8:	f107 0214 	add.w	r2, r7, #20
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff ff5c 	bl	800e08c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d134      	bne.n	800e244 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	f003 0310 	and.w	r3, r3, #16
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d009      	beq.n	800e1f8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	7f1b      	ldrb	r3, [r3, #28]
 800e1e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e1f2:	f06f 0306 	mvn.w	r3, #6
 800e1f6:	e027      	b.n	800e248 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e1f8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d005      	beq.n	800e20e <netconn_recv_data_tcp+0xc6>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e206:	2200      	movs	r2, #0
 800e208:	2101      	movs	r1, #1
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10f      	bne.n	800e236 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f000 f9a2 	bl	800e560 <netconn_err>
 800e21c:	4603      	mov	r3, r0
 800e21e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800e222:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <netconn_recv_data_tcp+0xe8>
          return err;
 800e22a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e22e:	e00b      	b.n	800e248 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e230:	f06f 030d 	mvn.w	r3, #13
 800e234:	e008      	b.n	800e248 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e236:	2101      	movs	r1, #1
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f961 	bl	800e500 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e23e:	f06f 030e 	mvn.w	r3, #14
 800e242:	e001      	b.n	800e248 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e244:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3740      	adds	r7, #64	; 0x40
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	4613      	mov	r3, r2
 800e25c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <netconn_recv_tcp_pbuf_flags+0x20>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e26c:	2b10      	cmp	r3, #16
 800e26e:	d009      	beq.n	800e284 <netconn_recv_tcp_pbuf_flags+0x34>
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <netconn_recv_tcp_pbuf_flags+0x4c>)
 800e272:	f240 3225 	movw	r2, #805	; 0x325
 800e276:	490a      	ldr	r1, [pc, #40]	; (800e2a0 <netconn_recv_tcp_pbuf_flags+0x50>)
 800e278:	480a      	ldr	r0, [pc, #40]	; (800e2a4 <netconn_recv_tcp_pbuf_flags+0x54>)
 800e27a:	f013 fd17 	bl	8021cac <iprintf>
 800e27e:	f06f 030f 	mvn.w	r3, #15
 800e282:	e006      	b.n	800e292 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	461a      	mov	r2, r3
 800e288:	68b9      	ldr	r1, [r7, #8]
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7ff ff5c 	bl	800e148 <netconn_recv_data_tcp>
 800e290:	4603      	mov	r3, r0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	08025994 	.word	0x08025994
 800e2a0:	08025bf4 	.word	0x08025bf4
 800e2a4:	080259ec 	.word	0x080259ec

0800e2a8 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d005      	beq.n	800e2c8 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2c4:	2b10      	cmp	r3, #16
 800e2c6:	d109      	bne.n	800e2dc <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e2ca:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800e2ce:	490a      	ldr	r1, [pc, #40]	; (800e2f8 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e2d0:	480a      	ldr	r0, [pc, #40]	; (800e2fc <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e2d2:	f013 fceb 	bl	8021cac <iprintf>
 800e2d6:	f06f 030f 	mvn.w	r3, #15
 800e2da:	e006      	b.n	800e2ea <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	68b9      	ldr	r1, [r7, #8]
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f7ff fe0a 	bl	800defc <netconn_recv_data>
 800e2e8:	4603      	mov	r3, r0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	08025994 	.word	0x08025994
 800e2f8:	08025c18 	.word	0x08025c18
 800e2fc:	080259ec 	.word	0x080259ec

0800e300 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08c      	sub	sp, #48	; 0x30
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d109      	bne.n	800e324 <netconn_send+0x24>
 800e310:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <netconn_send+0x4c>)
 800e312:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e316:	490e      	ldr	r1, [pc, #56]	; (800e350 <netconn_send+0x50>)
 800e318:	480e      	ldr	r0, [pc, #56]	; (800e354 <netconn_send+0x54>)
 800e31a:	f013 fcc7 	bl	8021cac <iprintf>
 800e31e:	f06f 030f 	mvn.w	r3, #15
 800e322:	e00e      	b.n	800e342 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e32c:	f107 030c 	add.w	r3, r7, #12
 800e330:	4619      	mov	r1, r3
 800e332:	4809      	ldr	r0, [pc, #36]	; (800e358 <netconn_send+0x58>)
 800e334:	f7ff fb64 	bl	800da00 <netconn_apimsg>
 800e338:	4603      	mov	r3, r0
 800e33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e33e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e342:	4618      	mov	r0, r3
 800e344:	3730      	adds	r7, #48	; 0x30
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	08025994 	.word	0x08025994
 800e350:	08025c50 	.word	0x08025c50
 800e354:	080259ec 	.word	0x080259ec
 800e358:	0800fa99 	.word	0x0800fa99

0800e35c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af02      	add	r7, sp, #8
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e372:	78fa      	ldrb	r2, [r7, #3]
 800e374:	f107 0110 	add.w	r1, r7, #16
 800e378:	6a3b      	ldr	r3, [r7, #32]
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	4613      	mov	r3, r2
 800e37e:	2201      	movs	r2, #1
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f805 	bl	800e390 <netconn_write_vectors_partly>
 800e386:	4603      	mov	r3, r0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3718      	adds	r7, #24
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b092      	sub	sp, #72	; 0x48
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	4611      	mov	r1, r2
 800e39c:	461a      	mov	r2, r3
 800e39e:	460b      	mov	r3, r1
 800e3a0:	80fb      	strh	r3, [r7, #6]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <netconn_write_vectors_partly+0x30>
 800e3ac:	4b4e      	ldr	r3, [pc, #312]	; (800e4e8 <netconn_write_vectors_partly+0x158>)
 800e3ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e3b2:	494e      	ldr	r1, [pc, #312]	; (800e4ec <netconn_write_vectors_partly+0x15c>)
 800e3b4:	484e      	ldr	r0, [pc, #312]	; (800e4f0 <netconn_write_vectors_partly+0x160>)
 800e3b6:	f013 fc79 	bl	8021cac <iprintf>
 800e3ba:	f06f 030f 	mvn.w	r3, #15
 800e3be:	e08e      	b.n	800e4de <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3c8:	2b10      	cmp	r3, #16
 800e3ca:	d009      	beq.n	800e3e0 <netconn_write_vectors_partly+0x50>
 800e3cc:	4b46      	ldr	r3, [pc, #280]	; (800e4e8 <netconn_write_vectors_partly+0x158>)
 800e3ce:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e3d2:	4948      	ldr	r1, [pc, #288]	; (800e4f4 <netconn_write_vectors_partly+0x164>)
 800e3d4:	4846      	ldr	r0, [pc, #280]	; (800e4f0 <netconn_write_vectors_partly+0x160>)
 800e3d6:	f013 fc69 	bl	8021cac <iprintf>
 800e3da:	f06f 0305 	mvn.w	r3, #5
 800e3de:	e07e      	b.n	800e4de <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	7f1b      	ldrb	r3, [r3, #28]
 800e3e4:	f003 0302 	and.w	r3, r3, #2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d104      	bne.n	800e3f6 <netconn_write_vectors_partly+0x66>
 800e3ec:	797b      	ldrb	r3, [r7, #5]
 800e3ee:	f003 0304 	and.w	r3, r3, #4
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <netconn_write_vectors_partly+0x6a>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <netconn_write_vectors_partly+0x6c>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e400:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e404:	2b00      	cmp	r3, #0
 800e406:	d005      	beq.n	800e414 <netconn_write_vectors_partly+0x84>
 800e408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d102      	bne.n	800e414 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e40e:	f06f 0305 	mvn.w	r3, #5
 800e412:	e064      	b.n	800e4de <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e418:	2300      	movs	r3, #0
 800e41a:	643b      	str	r3, [r7, #64]	; 0x40
 800e41c:	e015      	b.n	800e44a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	4413      	add	r3, r2
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e42a:	4413      	add	r3, r2
 800e42c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	4413      	add	r3, r2
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d202      	bcs.n	800e444 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e43e:	f06f 0305 	mvn.w	r3, #5
 800e442:	e04c      	b.n	800e4de <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e446:	3301      	adds	r3, #1
 800e448:	643b      	str	r3, [r7, #64]	; 0x40
 800e44a:	88fb      	ldrh	r3, [r7, #6]
 800e44c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e44e:	429a      	cmp	r2, r3
 800e450:	dbe5      	blt.n	800e41e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	e040      	b.n	800e4de <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e45e:	2b00      	cmp	r3, #0
 800e460:	da0a      	bge.n	800e478 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e468:	f06f 0305 	mvn.w	r3, #5
 800e46c:	e037      	b.n	800e4de <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e46e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e472:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e480:	88fb      	ldrh	r3, [r7, #6]
 800e482:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e488:	797b      	ldrb	r3, [r7, #5]
 800e48a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e48e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e490:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e496:	f107 0314 	add.w	r3, r7, #20
 800e49a:	4619      	mov	r1, r3
 800e49c:	4816      	ldr	r0, [pc, #88]	; (800e4f8 <netconn_write_vectors_partly+0x168>)
 800e49e:	f7ff faaf 	bl	800da00 <netconn_apimsg>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e4a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d114      	bne.n	800e4da <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e4b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ba:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e4bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10a      	bne.n	800e4da <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d006      	beq.n	800e4da <netconn_write_vectors_partly+0x14a>
 800e4cc:	4b06      	ldr	r3, [pc, #24]	; (800e4e8 <netconn_write_vectors_partly+0x158>)
 800e4ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e4d2:	490a      	ldr	r1, [pc, #40]	; (800e4fc <netconn_write_vectors_partly+0x16c>)
 800e4d4:	4806      	ldr	r0, [pc, #24]	; (800e4f0 <netconn_write_vectors_partly+0x160>)
 800e4d6:	f013 fbe9 	bl	8021cac <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e4da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3748      	adds	r7, #72	; 0x48
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08025994 	.word	0x08025994
 800e4ec:	08025c6c 	.word	0x08025c6c
 800e4f0:	080259ec 	.word	0x080259ec
 800e4f4:	08025c88 	.word	0x08025c88
 800e4f8:	0800ff35 	.word	0x0800ff35
 800e4fc:	08025cac 	.word	0x08025cac

0800e500 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b08c      	sub	sp, #48	; 0x30
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	460b      	mov	r3, r1
 800e50a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d109      	bne.n	800e526 <netconn_close_shutdown+0x26>
 800e512:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <netconn_close_shutdown+0x50>)
 800e514:	f240 4247 	movw	r2, #1095	; 0x447
 800e518:	490e      	ldr	r1, [pc, #56]	; (800e554 <netconn_close_shutdown+0x54>)
 800e51a:	480f      	ldr	r0, [pc, #60]	; (800e558 <netconn_close_shutdown+0x58>)
 800e51c:	f013 fbc6 	bl	8021cac <iprintf>
 800e520:	f06f 030f 	mvn.w	r3, #15
 800e524:	e010      	b.n	800e548 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e52e:	2329      	movs	r3, #41	; 0x29
 800e530:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e532:	f107 030c 	add.w	r3, r7, #12
 800e536:	4619      	mov	r1, r3
 800e538:	4808      	ldr	r0, [pc, #32]	; (800e55c <netconn_close_shutdown+0x5c>)
 800e53a:	f7ff fa61 	bl	800da00 <netconn_apimsg>
 800e53e:	4603      	mov	r3, r0
 800e540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e544:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3730      	adds	r7, #48	; 0x30
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	08025994 	.word	0x08025994
 800e554:	08025cd0 	.word	0x08025cd0
 800e558:	080259ec 	.word	0x080259ec
 800e55c:	08010159 	.word	0x08010159

0800e560 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <netconn_err+0x12>
    return ERR_OK;
 800e56e:	2300      	movs	r3, #0
 800e570:	e00d      	b.n	800e58e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e572:	f012 fcfd 	bl	8020f70 <sys_arch_protect>
 800e576:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7a1b      	ldrb	r3, [r3, #8]
 800e57c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f012 fd01 	bl	8020f8c <sys_arch_unprotect>
  return err;
 800e58a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08a      	sub	sp, #40	; 0x28
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <netconn_gethostbyname+0x24>
 800e5a8:	4b24      	ldr	r3, [pc, #144]	; (800e63c <netconn_gethostbyname+0xa4>)
 800e5aa:	f240 5204 	movw	r2, #1284	; 0x504
 800e5ae:	4924      	ldr	r1, [pc, #144]	; (800e640 <netconn_gethostbyname+0xa8>)
 800e5b0:	4824      	ldr	r0, [pc, #144]	; (800e644 <netconn_gethostbyname+0xac>)
 800e5b2:	f013 fb7b 	bl	8021cac <iprintf>
 800e5b6:	f06f 030f 	mvn.w	r3, #15
 800e5ba:	e03b      	b.n	800e634 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d109      	bne.n	800e5d6 <netconn_gethostbyname+0x3e>
 800e5c2:	4b1e      	ldr	r3, [pc, #120]	; (800e63c <netconn_gethostbyname+0xa4>)
 800e5c4:	f240 5205 	movw	r2, #1285	; 0x505
 800e5c8:	491f      	ldr	r1, [pc, #124]	; (800e648 <netconn_gethostbyname+0xb0>)
 800e5ca:	481e      	ldr	r0, [pc, #120]	; (800e644 <netconn_gethostbyname+0xac>)
 800e5cc:	f013 fb6e 	bl	8021cac <iprintf>
 800e5d0:	f06f 030f 	mvn.w	r3, #15
 800e5d4:	e02e      	b.n	800e634 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800e5d6:	f107 030f 	add.w	r3, r7, #15
 800e5da:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800e5dc:	f107 0310 	add.w	r3, r7, #16
 800e5e0:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f012 fbcd 	bl	8020d8e <sys_sem_new>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800e600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e604:	e016      	b.n	800e634 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800e606:	69fa      	ldr	r2, [r7, #28]
 800e608:	f107 0314 	add.w	r3, r7, #20
 800e60c:	4619      	mov	r1, r3
 800e60e:	480f      	ldr	r0, [pc, #60]	; (800e64c <netconn_gethostbyname+0xb4>)
 800e610:	f003 fe84 	bl	801231c <tcpip_send_msg_wait_sem>
 800e614:	4603      	mov	r3, r0
 800e616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	4618      	mov	r0, r3
 800e61e:	f012 fc1a 	bl	8020e56 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800e622:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e626:	2b00      	cmp	r3, #0
 800e628:	d002      	beq.n	800e630 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800e62a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e62e:	e001      	b.n	800e634 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800e630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3728      	adds	r7, #40	; 0x28
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	08025994 	.word	0x08025994
 800e640:	08025cec 	.word	0x08025cec
 800e644:	080259ec 	.word	0x080259ec
 800e648:	08025d10 	.word	0x08025d10
 800e64c:	080102b5 	.word	0x080102b5

0800e650 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e65a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e65e:	f113 0f0d 	cmn.w	r3, #13
 800e662:	d009      	beq.n	800e678 <lwip_netconn_err_to_msg+0x28>
 800e664:	f113 0f0d 	cmn.w	r3, #13
 800e668:	dc0c      	bgt.n	800e684 <lwip_netconn_err_to_msg+0x34>
 800e66a:	f113 0f0f 	cmn.w	r3, #15
 800e66e:	d007      	beq.n	800e680 <lwip_netconn_err_to_msg+0x30>
 800e670:	f113 0f0e 	cmn.w	r3, #14
 800e674:	d002      	beq.n	800e67c <lwip_netconn_err_to_msg+0x2c>
 800e676:	e005      	b.n	800e684 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e678:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <lwip_netconn_err_to_msg+0x54>)
 800e67a:	e00e      	b.n	800e69a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e67c:	4b0a      	ldr	r3, [pc, #40]	; (800e6a8 <lwip_netconn_err_to_msg+0x58>)
 800e67e:	e00c      	b.n	800e69a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e680:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <lwip_netconn_err_to_msg+0x5c>)
 800e682:	e00a      	b.n	800e69a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d005      	beq.n	800e698 <lwip_netconn_err_to_msg+0x48>
 800e68c:	4b08      	ldr	r3, [pc, #32]	; (800e6b0 <lwip_netconn_err_to_msg+0x60>)
 800e68e:	227d      	movs	r2, #125	; 0x7d
 800e690:	4908      	ldr	r1, [pc, #32]	; (800e6b4 <lwip_netconn_err_to_msg+0x64>)
 800e692:	4809      	ldr	r0, [pc, #36]	; (800e6b8 <lwip_netconn_err_to_msg+0x68>)
 800e694:	f013 fb0a 	bl	8021cac <iprintf>
      return NULL;
 800e698:	2300      	movs	r3, #0
  }
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	08029930 	.word	0x08029930
 800e6a8:	08029931 	.word	0x08029931
 800e6ac:	08029932 	.word	0x08029932
 800e6b0:	08025d34 	.word	0x08025d34
 800e6b4:	08025d68 	.word	0x08025d68
 800e6b8:	08025d78 	.word	0x08025d78

0800e6bc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d105      	bne.n	800e6d8 <lwip_netconn_is_err_msg+0x1c>
 800e6cc:	4b12      	ldr	r3, [pc, #72]	; (800e718 <lwip_netconn_is_err_msg+0x5c>)
 800e6ce:	2285      	movs	r2, #133	; 0x85
 800e6d0:	4912      	ldr	r1, [pc, #72]	; (800e71c <lwip_netconn_is_err_msg+0x60>)
 800e6d2:	4813      	ldr	r0, [pc, #76]	; (800e720 <lwip_netconn_is_err_msg+0x64>)
 800e6d4:	f013 faea 	bl	8021cac <iprintf>

  if (msg == &netconn_aborted) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a12      	ldr	r2, [pc, #72]	; (800e724 <lwip_netconn_is_err_msg+0x68>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d104      	bne.n	800e6ea <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	22f3      	movs	r2, #243	; 0xf3
 800e6e4:	701a      	strb	r2, [r3, #0]
    return 1;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e012      	b.n	800e710 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4a0e      	ldr	r2, [pc, #56]	; (800e728 <lwip_netconn_is_err_msg+0x6c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d104      	bne.n	800e6fc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	22f2      	movs	r2, #242	; 0xf2
 800e6f6:	701a      	strb	r2, [r3, #0]
    return 1;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e009      	b.n	800e710 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a0b      	ldr	r2, [pc, #44]	; (800e72c <lwip_netconn_is_err_msg+0x70>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d104      	bne.n	800e70e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	22f1      	movs	r2, #241	; 0xf1
 800e708:	701a      	strb	r2, [r3, #0]
    return 1;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e000      	b.n	800e710 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	08025d34 	.word	0x08025d34
 800e71c:	08025da0 	.word	0x08025da0
 800e720:	08025d78 	.word	0x08025d78
 800e724:	08029930 	.word	0x08029930
 800e728:	08029931 	.word	0x08029931
 800e72c:	08029932 	.word	0x08029932

0800e730 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
 800e73c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d105      	bne.n	800e750 <recv_udp+0x20>
 800e744:	4b34      	ldr	r3, [pc, #208]	; (800e818 <recv_udp+0xe8>)
 800e746:	22e5      	movs	r2, #229	; 0xe5
 800e748:	4934      	ldr	r1, [pc, #208]	; (800e81c <recv_udp+0xec>)
 800e74a:	4835      	ldr	r0, [pc, #212]	; (800e820 <recv_udp+0xf0>)
 800e74c:	f013 faae 	bl	8021cac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <recv_udp+0x32>
 800e756:	4b30      	ldr	r3, [pc, #192]	; (800e818 <recv_udp+0xe8>)
 800e758:	22e6      	movs	r2, #230	; 0xe6
 800e75a:	4932      	ldr	r1, [pc, #200]	; (800e824 <recv_udp+0xf4>)
 800e75c:	4830      	ldr	r0, [pc, #192]	; (800e820 <recv_udp+0xf0>)
 800e75e:	f013 faa5 	bl	8021cac <iprintf>
  conn = (struct netconn *)arg;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d103      	bne.n	800e774 <recv_udp+0x44>
    pbuf_free(p);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f006 f9f5 	bl	8014b5c <pbuf_free>
    return;
 800e772:	e04d      	b.n	800e810 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d005      	beq.n	800e78a <recv_udp+0x5a>
 800e77e:	4b26      	ldr	r3, [pc, #152]	; (800e818 <recv_udp+0xe8>)
 800e780:	22ee      	movs	r2, #238	; 0xee
 800e782:	4929      	ldr	r1, [pc, #164]	; (800e828 <recv_udp+0xf8>)
 800e784:	4826      	ldr	r0, [pc, #152]	; (800e820 <recv_udp+0xf0>)
 800e786:	f013 fa91 	bl	8021cac <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	3310      	adds	r3, #16
 800e78e:	4618      	mov	r0, r3
 800e790:	f012 fadf 	bl	8020d52 <sys_mbox_valid>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f006 f9de 	bl	8014b5c <pbuf_free>
    return;
 800e7a0:	e036      	b.n	800e810 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e7a2:	2006      	movs	r0, #6
 800e7a4:	f005 faa6 	bl	8013cf4 <memp_malloc>
 800e7a8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d103      	bne.n	800e7b8 <recv_udp+0x88>
    pbuf_free(p);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f006 f9d3 	bl	8014b5c <pbuf_free>
    return;
 800e7b6:	e02b      	b.n	800e810 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d002      	beq.n	800e7d0 <recv_udp+0xa0>
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	e000      	b.n	800e7d2 <recv_udp+0xa2>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e7da:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	891b      	ldrh	r3, [r3, #8]
 800e7e0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	3310      	adds	r3, #16
 800e7e6:	69b9      	ldr	r1, [r7, #24]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f012 fa3d 	bl	8020c68 <sys_mbox_trypost>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d003      	beq.n	800e7fc <recv_udp+0xcc>
    netbuf_delete(buf);
 800e7f4:	69b8      	ldr	r0, [r7, #24]
 800e7f6:	f001 fdc1 	bl	801037c <netbuf_delete>
    return;
 800e7fa:	e009      	b.n	800e810 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e800:	2b00      	cmp	r3, #0
 800e802:	d005      	beq.n	800e810 <recv_udp+0xe0>
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e808:	8afa      	ldrh	r2, [r7, #22]
 800e80a:	2100      	movs	r1, #0
 800e80c:	69f8      	ldr	r0, [r7, #28]
 800e80e:	4798      	blx	r3
  }
}
 800e810:	3720      	adds	r7, #32
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	08025d34 	.word	0x08025d34
 800e81c:	08025dac 	.word	0x08025dac
 800e820:	08025d78 	.word	0x08025d78
 800e824:	08025dd0 	.word	0x08025dd0
 800e828:	08025df0 	.word	0x08025df0

0800e82c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d106      	bne.n	800e84e <recv_tcp+0x22>
 800e840:	4b36      	ldr	r3, [pc, #216]	; (800e91c <recv_tcp+0xf0>)
 800e842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e846:	4936      	ldr	r1, [pc, #216]	; (800e920 <recv_tcp+0xf4>)
 800e848:	4836      	ldr	r0, [pc, #216]	; (800e924 <recv_tcp+0xf8>)
 800e84a:	f013 fa2f 	bl	8021cac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d106      	bne.n	800e862 <recv_tcp+0x36>
 800e854:	4b31      	ldr	r3, [pc, #196]	; (800e91c <recv_tcp+0xf0>)
 800e856:	f240 122d 	movw	r2, #301	; 0x12d
 800e85a:	4933      	ldr	r1, [pc, #204]	; (800e928 <recv_tcp+0xfc>)
 800e85c:	4831      	ldr	r0, [pc, #196]	; (800e924 <recv_tcp+0xf8>)
 800e85e:	f013 fa25 	bl	8021cac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d006      	beq.n	800e878 <recv_tcp+0x4c>
 800e86a:	4b2c      	ldr	r3, [pc, #176]	; (800e91c <recv_tcp+0xf0>)
 800e86c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e870:	492e      	ldr	r1, [pc, #184]	; (800e92c <recv_tcp+0x100>)
 800e872:	482c      	ldr	r0, [pc, #176]	; (800e924 <recv_tcp+0xf8>)
 800e874:	f013 fa1a 	bl	8021cac <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d102      	bne.n	800e888 <recv_tcp+0x5c>
    return ERR_VAL;
 800e882:	f06f 0305 	mvn.w	r3, #5
 800e886:	e045      	b.n	800e914 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d006      	beq.n	800e8a0 <recv_tcp+0x74>
 800e892:	4b22      	ldr	r3, [pc, #136]	; (800e91c <recv_tcp+0xf0>)
 800e894:	f240 1235 	movw	r2, #309	; 0x135
 800e898:	4925      	ldr	r1, [pc, #148]	; (800e930 <recv_tcp+0x104>)
 800e89a:	4822      	ldr	r0, [pc, #136]	; (800e924 <recv_tcp+0xf8>)
 800e89c:	f013 fa06 	bl	8021cac <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	3310      	adds	r3, #16
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f012 fa54 	bl	8020d52 <sys_mbox_valid>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d10d      	bne.n	800e8cc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d008      	beq.n	800e8c8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	891b      	ldrh	r3, [r3, #8]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	68b8      	ldr	r0, [r7, #8]
 800e8be:	f007 fa91 	bl	8015de4 <tcp_recved>
      pbuf_free(p);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f006 f94a 	bl	8014b5c <pbuf_free>
    }
    return ERR_OK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e023      	b.n	800e914 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d005      	beq.n	800e8de <recv_tcp+0xb2>
    msg = p;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	891b      	ldrh	r3, [r3, #8]
 800e8da:	83fb      	strh	r3, [r7, #30]
 800e8dc:	e003      	b.n	800e8e6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e8de:	4b15      	ldr	r3, [pc, #84]	; (800e934 <recv_tcp+0x108>)
 800e8e0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	3310      	adds	r3, #16
 800e8ea:	69b9      	ldr	r1, [r7, #24]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f012 f9bb 	bl	8020c68 <sys_mbox_trypost>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8fc:	e00a      	b.n	800e914 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e902:	2b00      	cmp	r3, #0
 800e904:	d005      	beq.n	800e912 <recv_tcp+0xe6>
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90a:	8bfa      	ldrh	r2, [r7, #30]
 800e90c:	2100      	movs	r1, #0
 800e90e:	6978      	ldr	r0, [r7, #20]
 800e910:	4798      	blx	r3
  }

  return ERR_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3720      	adds	r7, #32
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	08025d34 	.word	0x08025d34
 800e920:	08025e10 	.word	0x08025e10
 800e924:	08025d78 	.word	0x08025d78
 800e928:	08025e34 	.word	0x08025e34
 800e92c:	08025e54 	.word	0x08025e54
 800e930:	08025e6c 	.word	0x08025e6c
 800e934:	08029932 	.word	0x08029932

0800e938 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d106      	bne.n	800e95a <poll_tcp+0x22>
 800e94c:	4b29      	ldr	r3, [pc, #164]	; (800e9f4 <poll_tcp+0xbc>)
 800e94e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e952:	4929      	ldr	r1, [pc, #164]	; (800e9f8 <poll_tcp+0xc0>)
 800e954:	4829      	ldr	r0, [pc, #164]	; (800e9fc <poll_tcp+0xc4>)
 800e956:	f013 f9a9 	bl	8021cac <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	785b      	ldrb	r3, [r3, #1]
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d104      	bne.n	800e96c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e962:	2101      	movs	r1, #1
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f001 f919 	bl	800fb9c <lwip_netconn_do_writemore>
 800e96a:	e016      	b.n	800e99a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	785b      	ldrb	r3, [r3, #1]
 800e970:	2b04      	cmp	r3, #4
 800e972:	d112      	bne.n	800e99a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00a      	beq.n	800e992 <poll_tcp+0x5a>
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	7a5b      	ldrb	r3, [r3, #9]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d005      	beq.n	800e992 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	7a5a      	ldrb	r2, [r3, #9]
 800e98c:	3a01      	subs	r2, #1
 800e98e:	b2d2      	uxtb	r2, r2
 800e990:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e992:	2101      	movs	r1, #1
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f000 fbf7 	bl	800f188 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	7f1b      	ldrb	r3, [r3, #28]
 800e99e:	f003 0310 	and.w	r3, r3, #16
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d021      	beq.n	800e9ea <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d01d      	beq.n	800e9ea <poll_tcp+0xb2>
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e9b6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e9ba:	d316      	bcc.n	800e9ea <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e9c4:	2b04      	cmp	r3, #4
 800e9c6:	d810      	bhi.n	800e9ea <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	7f1b      	ldrb	r3, [r3, #28]
 800e9cc:	f023 0310 	bic.w	r3, r3, #16
 800e9d0:	b2da      	uxtb	r2, r3
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d005      	beq.n	800e9ea <poll_tcp+0xb2>
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	2102      	movs	r1, #2
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	08025d34 	.word	0x08025d34
 800e9f8:	08025e8c 	.word	0x08025e8c
 800e9fc:	08025d78 	.word	0x08025d78

0800ea00 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d106      	bne.n	800ea26 <sent_tcp+0x26>
 800ea18:	4b20      	ldr	r3, [pc, #128]	; (800ea9c <sent_tcp+0x9c>)
 800ea1a:	f240 1293 	movw	r2, #403	; 0x193
 800ea1e:	4920      	ldr	r1, [pc, #128]	; (800eaa0 <sent_tcp+0xa0>)
 800ea20:	4820      	ldr	r0, [pc, #128]	; (800eaa4 <sent_tcp+0xa4>)
 800ea22:	f013 f943 	bl	8021cac <iprintf>

  if (conn) {
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d032      	beq.n	800ea92 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	785b      	ldrb	r3, [r3, #1]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d104      	bne.n	800ea3e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ea34:	2101      	movs	r1, #1
 800ea36:	6978      	ldr	r0, [r7, #20]
 800ea38:	f001 f8b0 	bl	800fb9c <lwip_netconn_do_writemore>
 800ea3c:	e007      	b.n	800ea4e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	785b      	ldrb	r3, [r3, #1]
 800ea42:	2b04      	cmp	r3, #4
 800ea44:	d103      	bne.n	800ea4e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ea46:	2101      	movs	r1, #1
 800ea48:	6978      	ldr	r0, [r7, #20]
 800ea4a:	f000 fb9d 	bl	800f188 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d01d      	beq.n	800ea92 <sent_tcp+0x92>
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ea5e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ea62:	d316      	bcc.n	800ea92 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ea6c:	2b04      	cmp	r3, #4
 800ea6e:	d810      	bhi.n	800ea92 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	7f1b      	ldrb	r3, [r3, #28]
 800ea74:	f023 0310 	bic.w	r3, r3, #16
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d005      	beq.n	800ea92 <sent_tcp+0x92>
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8a:	88fa      	ldrh	r2, [r7, #6]
 800ea8c:	2102      	movs	r1, #2
 800ea8e:	6978      	ldr	r0, [r7, #20]
 800ea90:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3718      	adds	r7, #24
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	08025d34 	.word	0x08025d34
 800eaa0:	08025e8c 	.word	0x08025e8c
 800eaa4:	08025d78 	.word	0x08025d78

0800eaa8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b088      	sub	sp, #32
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d106      	bne.n	800eacc <err_tcp+0x24>
 800eabe:	4b5f      	ldr	r3, [pc, #380]	; (800ec3c <err_tcp+0x194>)
 800eac0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800eac4:	495e      	ldr	r1, [pc, #376]	; (800ec40 <err_tcp+0x198>)
 800eac6:	485f      	ldr	r0, [pc, #380]	; (800ec44 <err_tcp+0x19c>)
 800eac8:	f013 f8f0 	bl	8021cac <iprintf>

  SYS_ARCH_PROTECT(lev);
 800eacc:	f012 fa50 	bl	8020f70 <sys_arch_protect>
 800ead0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	2200      	movs	r2, #0
 800ead6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	78fa      	ldrb	r2, [r7, #3]
 800eadc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	7f1b      	ldrb	r3, [r3, #28]
 800eae2:	f043 0301 	orr.w	r3, r3, #1
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	785b      	ldrb	r3, [r3, #1]
 800eaf0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800eaf8:	69b8      	ldr	r0, [r7, #24]
 800eafa:	f012 fa47 	bl	8020f8c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d005      	beq.n	800eb12 <err_tcp+0x6a>
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	2104      	movs	r1, #4
 800eb0e:	69f8      	ldr	r0, [r7, #28]
 800eb10:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <err_tcp+0x7e>
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1e:	2200      	movs	r2, #0
 800eb20:	2100      	movs	r1, #0
 800eb22:	69f8      	ldr	r0, [r7, #28]
 800eb24:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d005      	beq.n	800eb3a <err_tcp+0x92>
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb32:	2200      	movs	r2, #0
 800eb34:	2102      	movs	r1, #2
 800eb36:	69f8      	ldr	r0, [r7, #28]
 800eb38:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800eb3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff fd86 	bl	800e650 <lwip_netconn_err_to_msg>
 800eb44:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	3310      	adds	r3, #16
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f012 f901 	bl	8020d52 <sys_mbox_valid>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d005      	beq.n	800eb62 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	3310      	adds	r3, #16
 800eb5a:	6939      	ldr	r1, [r7, #16]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f012 f883 	bl	8020c68 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	3314      	adds	r3, #20
 800eb66:	4618      	mov	r0, r3
 800eb68:	f012 f8f3 	bl	8020d52 <sys_mbox_valid>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d005      	beq.n	800eb7e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	3314      	adds	r3, #20
 800eb76:	6939      	ldr	r1, [r7, #16]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f012 f875 	bl	8020c68 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d005      	beq.n	800eb90 <err_tcp+0xe8>
 800eb84:	7dfb      	ldrb	r3, [r7, #23]
 800eb86:	2b04      	cmp	r3, #4
 800eb88:	d002      	beq.n	800eb90 <err_tcp+0xe8>
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
 800eb8c:	2b03      	cmp	r3, #3
 800eb8e:	d143      	bne.n	800ec18 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	7f1b      	ldrb	r3, [r3, #28]
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	bf14      	ite	ne
 800eb9c:	2301      	movne	r3, #1
 800eb9e:	2300      	moveq	r3, #0
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	7f1b      	ldrb	r3, [r3, #28]
 800eba8:	f023 0304 	bic.w	r3, r3, #4
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d13b      	bne.n	800ec30 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	6a1b      	ldr	r3, [r3, #32]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d106      	bne.n	800ebce <err_tcp+0x126>
 800ebc0:	4b1e      	ldr	r3, [pc, #120]	; (800ec3c <err_tcp+0x194>)
 800ebc2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ebc6:	4920      	ldr	r1, [pc, #128]	; (800ec48 <err_tcp+0x1a0>)
 800ebc8:	481e      	ldr	r0, [pc, #120]	; (800ec44 <err_tcp+0x19c>)
 800ebca:	f013 f86f 	bl	8021cac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
 800ebd0:	2b04      	cmp	r3, #4
 800ebd2:	d104      	bne.n	800ebde <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	6a1b      	ldr	r3, [r3, #32]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	711a      	strb	r2, [r3, #4]
 800ebdc:	e003      	b.n	800ebe6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	78fa      	ldrb	r2, [r7, #3]
 800ebe4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	6a1b      	ldr	r3, [r3, #32]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	330c      	adds	r3, #12
 800ebee:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ebf0:	68b8      	ldr	r0, [r7, #8]
 800ebf2:	f012 f93d 	bl	8020e70 <sys_sem_valid>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d106      	bne.n	800ec0a <err_tcp+0x162>
 800ebfc:	4b0f      	ldr	r3, [pc, #60]	; (800ec3c <err_tcp+0x194>)
 800ebfe:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ec02:	4912      	ldr	r1, [pc, #72]	; (800ec4c <err_tcp+0x1a4>)
 800ec04:	480f      	ldr	r0, [pc, #60]	; (800ec44 <err_tcp+0x19c>)
 800ec06:	f013 f851 	bl	8021cac <iprintf>
      conn->current_msg = NULL;
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ec10:	68b8      	ldr	r0, [r7, #8]
 800ec12:	f012 f913 	bl	8020e3c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ec16:	e00b      	b.n	800ec30 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d008      	beq.n	800ec32 <err_tcp+0x18a>
 800ec20:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <err_tcp+0x194>)
 800ec22:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ec26:	490a      	ldr	r1, [pc, #40]	; (800ec50 <err_tcp+0x1a8>)
 800ec28:	4806      	ldr	r0, [pc, #24]	; (800ec44 <err_tcp+0x19c>)
 800ec2a:	f013 f83f 	bl	8021cac <iprintf>
  }
}
 800ec2e:	e000      	b.n	800ec32 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ec30:	bf00      	nop
}
 800ec32:	bf00      	nop
 800ec34:	3720      	adds	r7, #32
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	08025d34 	.word	0x08025d34
 800ec40:	08025e8c 	.word	0x08025e8c
 800ec44:	08025d78 	.word	0x08025d78
 800ec48:	08025e9c 	.word	0x08025e9c
 800ec4c:	08025eb8 	.word	0x08025eb8
 800ec50:	08025ed4 	.word	0x08025ed4

0800ec54 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ec62:	6879      	ldr	r1, [r7, #4]
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f008 f89b 	bl	8016da0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ec6a:	490a      	ldr	r1, [pc, #40]	; (800ec94 <setup_tcp+0x40>)
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f008 f8a9 	bl	8016dc4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ec72:	4909      	ldr	r1, [pc, #36]	; (800ec98 <setup_tcp+0x44>)
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f008 f8c7 	bl	8016e08 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	4907      	ldr	r1, [pc, #28]	; (800ec9c <setup_tcp+0x48>)
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f008 f91e 	bl	8016ec0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ec84:	4906      	ldr	r1, [pc, #24]	; (800eca0 <setup_tcp+0x4c>)
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f008 f8e0 	bl	8016e4c <tcp_err>
}
 800ec8c:	bf00      	nop
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	0800e82d 	.word	0x0800e82d
 800ec98:	0800ea01 	.word	0x0800ea01
 800ec9c:	0800e939 	.word	0x0800e939
 800eca0:	0800eaa9 	.word	0x0800eaa9

0800eca4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800eca4:	b590      	push	{r4, r7, lr}
 800eca6:	b089      	sub	sp, #36	; 0x24
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <accept_function+0x1e>
    return ERR_VAL;
 800ecbc:	f06f 0305 	mvn.w	r3, #5
 800ecc0:	e0a1      	b.n	800ee06 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	3314      	adds	r3, #20
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f012 f843 	bl	8020d52 <sys_mbox_valid>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d102      	bne.n	800ecd8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ecd2:	f06f 0305 	mvn.w	r3, #5
 800ecd6:	e096      	b.n	800ee06 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d11b      	bne.n	800ed16 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	f103 0414 	add.w	r4, r3, #20
 800ece4:	f06f 000c 	mvn.w	r0, #12
 800ece8:	f7ff fcb2 	bl	800e650 <lwip_netconn_err_to_msg>
 800ecec:	4603      	mov	r3, r0
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f011 ffb9 	bl	8020c68 <sys_mbox_trypost>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d109      	bne.n	800ed10 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d005      	beq.n	800ed10 <accept_function+0x6c>
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed08:	2200      	movs	r2, #0
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	69f8      	ldr	r0, [r7, #28]
 800ed0e:	4798      	blx	r3
    }
    return ERR_VAL;
 800ed10:	f06f 0305 	mvn.w	r3, #5
 800ed14:	e077      	b.n	800ee06 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ed16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d006      	beq.n	800ed2c <accept_function+0x88>
 800ed1e:	4b3c      	ldr	r3, [pc, #240]	; (800ee10 <accept_function+0x16c>)
 800ed20:	f240 222a 	movw	r2, #554	; 0x22a
 800ed24:	493b      	ldr	r1, [pc, #236]	; (800ee14 <accept_function+0x170>)
 800ed26:	483c      	ldr	r0, [pc, #240]	; (800ee18 <accept_function+0x174>)
 800ed28:	f012 ffc0 	bl	8021cac <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	781a      	ldrb	r2, [r3, #0]
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed34:	4619      	mov	r1, r3
 800ed36:	4610      	mov	r0, r2
 800ed38:	f000 f8f0 	bl	800ef1c <netconn_alloc>
 800ed3c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d11b      	bne.n	800ed7c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	f103 0414 	add.w	r4, r3, #20
 800ed4a:	f06f 000c 	mvn.w	r0, #12
 800ed4e:	f7ff fc7f 	bl	800e650 <lwip_netconn_err_to_msg>
 800ed52:	4603      	mov	r3, r0
 800ed54:	4619      	mov	r1, r3
 800ed56:	4620      	mov	r0, r4
 800ed58:	f011 ff86 	bl	8020c68 <sys_mbox_trypost>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d109      	bne.n	800ed76 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d005      	beq.n	800ed76 <accept_function+0xd2>
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2100      	movs	r1, #0
 800ed72:	69f8      	ldr	r0, [r7, #28]
 800ed74:	4798      	blx	r3
    }
    return ERR_MEM;
 800ed76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed7a:	e044      	b.n	800ee06 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ed82:	69b8      	ldr	r0, [r7, #24]
 800ed84:	f7ff ff66 	bl	800ec54 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	3314      	adds	r3, #20
 800ed8c:	69b9      	ldr	r1, [r7, #24]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f011 ff6a 	bl	8020c68 <sys_mbox_trypost>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d02a      	beq.n	800edf0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800eda0:	2100      	movs	r1, #0
 800eda2:	6978      	ldr	r0, [r7, #20]
 800eda4:	f007 fffc 	bl	8016da0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800eda8:	2100      	movs	r1, #0
 800edaa:	6978      	ldr	r0, [r7, #20]
 800edac:	f008 f80a 	bl	8016dc4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800edb0:	2100      	movs	r1, #0
 800edb2:	6978      	ldr	r0, [r7, #20]
 800edb4:	f008 f828 	bl	8016e08 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800edb8:	2200      	movs	r2, #0
 800edba:	2100      	movs	r1, #0
 800edbc:	6978      	ldr	r0, [r7, #20]
 800edbe:	f008 f87f 	bl	8016ec0 <tcp_poll>
    tcp_err(pcb, NULL);
 800edc2:	2100      	movs	r1, #0
 800edc4:	6978      	ldr	r0, [r7, #20]
 800edc6:	f008 f841 	bl	8016e4c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	2200      	movs	r2, #0
 800edce:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	3310      	adds	r3, #16
 800edd4:	4618      	mov	r0, r3
 800edd6:	f011 ff35 	bl	8020c44 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	3310      	adds	r3, #16
 800edde:	4618      	mov	r0, r3
 800ede0:	f011 ffc8 	bl	8020d74 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ede4:	69b8      	ldr	r0, [r7, #24]
 800ede6:	f000 f907 	bl	800eff8 <netconn_free>
    return ERR_MEM;
 800edea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edee:	e00a      	b.n	800ee06 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d005      	beq.n	800ee04 <accept_function+0x160>
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	2200      	movs	r2, #0
 800edfe:	2100      	movs	r1, #0
 800ee00:	69f8      	ldr	r0, [r7, #28]
 800ee02:	4798      	blx	r3
  }

  return ERR_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3724      	adds	r7, #36	; 0x24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd90      	pop	{r4, r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	08025d34 	.word	0x08025d34
 800ee14:	08025ef0 	.word	0x08025ef0
 800ee18:	08025d78 	.word	0x08025d78

0800ee1c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ee24:	2300      	movs	r3, #0
 800ee26:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d006      	beq.n	800ee40 <pcb_new+0x24>
 800ee32:	4b2b      	ldr	r3, [pc, #172]	; (800eee0 <pcb_new+0xc4>)
 800ee34:	f240 2265 	movw	r2, #613	; 0x265
 800ee38:	492a      	ldr	r1, [pc, #168]	; (800eee4 <pcb_new+0xc8>)
 800ee3a:	482b      	ldr	r0, [pc, #172]	; (800eee8 <pcb_new+0xcc>)
 800ee3c:	f012 ff36 	bl	8021cac <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee4a:	2b10      	cmp	r3, #16
 800ee4c:	d022      	beq.n	800ee94 <pcb_new+0x78>
 800ee4e:	2b20      	cmp	r3, #32
 800ee50:	d133      	bne.n	800eeba <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681c      	ldr	r4, [r3, #0]
 800ee56:	7bfb      	ldrb	r3, [r7, #15]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f00d fb68 	bl	801c52e <udp_new_ip_type>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d02a      	beq.n	800eec2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b22      	cmp	r3, #34	; 0x22
 800ee74:	d104      	bne.n	800ee80 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6858      	ldr	r0, [r3, #4]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	4917      	ldr	r1, [pc, #92]	; (800eeec <pcb_new+0xd0>)
 800ee8e:	f00d fad5 	bl	801c43c <udp_recv>
      }
      break;
 800ee92:	e016      	b.n	800eec2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681c      	ldr	r4, [r3, #0]
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f007 ff72 	bl	8016d84 <tcp_new_ip_type>
 800eea0:	4603      	mov	r3, r0
 800eea2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00b      	beq.n	800eec6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fece 	bl	800ec54 <setup_tcp>
      }
      break;
 800eeb8:	e005      	b.n	800eec6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	22fa      	movs	r2, #250	; 0xfa
 800eebe:	711a      	strb	r2, [r3, #4]
      return;
 800eec0:	e00a      	b.n	800eed8 <pcb_new+0xbc>
      break;
 800eec2:	bf00      	nop
 800eec4:	e000      	b.n	800eec8 <pcb_new+0xac>
      break;
 800eec6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d102      	bne.n	800eed8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	22ff      	movs	r2, #255	; 0xff
 800eed6:	711a      	strb	r2, [r3, #4]
  }
}
 800eed8:	3714      	adds	r7, #20
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd90      	pop	{r4, r7, pc}
 800eede:	bf00      	nop
 800eee0:	08025d34 	.word	0x08025d34
 800eee4:	08025f18 	.word	0x08025f18
 800eee8:	08025d78 	.word	0x08025d78
 800eeec:	0800e731 	.word	0x0800e731

0800eef0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2200      	movs	r2, #0
 800ef00:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d102      	bne.n	800ef12 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f7ff ff85 	bl	800ee1c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ef12:	bf00      	nop
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	4603      	mov	r3, r0
 800ef24:	6039      	str	r1, [r7, #0]
 800ef26:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ef2c:	2007      	movs	r0, #7
 800ef2e:	f004 fee1 	bl	8013cf4 <memp_malloc>
 800ef32:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d101      	bne.n	800ef3e <netconn_alloc+0x22>
    return NULL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	e052      	b.n	800efe4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	79fa      	ldrb	r2, [r7, #7]
 800ef48:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ef50:	79fb      	ldrb	r3, [r7, #7]
 800ef52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef56:	2b10      	cmp	r3, #16
 800ef58:	d004      	beq.n	800ef64 <netconn_alloc+0x48>
 800ef5a:	2b20      	cmp	r3, #32
 800ef5c:	d105      	bne.n	800ef6a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ef5e:	2306      	movs	r3, #6
 800ef60:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ef62:	e00a      	b.n	800ef7a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ef64:	2306      	movs	r3, #6
 800ef66:	617b      	str	r3, [r7, #20]
      break;
 800ef68:	e007      	b.n	800ef7a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ef6a:	4b20      	ldr	r3, [pc, #128]	; (800efec <netconn_alloc+0xd0>)
 800ef6c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ef70:	491f      	ldr	r1, [pc, #124]	; (800eff0 <netconn_alloc+0xd4>)
 800ef72:	4820      	ldr	r0, [pc, #128]	; (800eff4 <netconn_alloc+0xd8>)
 800ef74:	f012 fe9a 	bl	8021cac <iprintf>
      goto free_and_return;
 800ef78:	e02f      	b.n	800efda <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	3310      	adds	r3, #16
 800ef7e:	6979      	ldr	r1, [r7, #20]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f011 fe41 	bl	8020c08 <sys_mbox_new>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d125      	bne.n	800efd8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	330c      	adds	r3, #12
 800ef90:	2100      	movs	r1, #0
 800ef92:	4618      	mov	r0, r3
 800ef94:	f011 fefb 	bl	8020d8e <sys_sem_new>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d005      	beq.n	800efaa <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3310      	adds	r3, #16
 800efa2:	4618      	mov	r0, r3
 800efa4:	f011 fe4e 	bl	8020c44 <sys_mbox_free>
    goto free_and_return;
 800efa8:	e017      	b.n	800efda <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	3314      	adds	r3, #20
 800efae:	4618      	mov	r0, r3
 800efb0:	f011 fee0 	bl	8020d74 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efc0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	7cfa      	ldrb	r2, [r7, #19]
 800efd2:	771a      	strb	r2, [r3, #28]
  return conn;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	e005      	b.n	800efe4 <netconn_alloc+0xc8>
    goto free_and_return;
 800efd8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800efda:	68f9      	ldr	r1, [r7, #12]
 800efdc:	2007      	movs	r0, #7
 800efde:	f004 fedb 	bl	8013d98 <memp_free>
  return NULL;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3718      	adds	r7, #24
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	08025d34 	.word	0x08025d34
 800eff0:	08025f38 	.word	0x08025f38
 800eff4:	08025d78 	.word	0x08025d78

0800eff8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d006      	beq.n	800f016 <netconn_free+0x1e>
 800f008:	4b1b      	ldr	r3, [pc, #108]	; (800f078 <netconn_free+0x80>)
 800f00a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f00e:	491b      	ldr	r1, [pc, #108]	; (800f07c <netconn_free+0x84>)
 800f010:	481b      	ldr	r0, [pc, #108]	; (800f080 <netconn_free+0x88>)
 800f012:	f012 fe4b 	bl	8021cac <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	3310      	adds	r3, #16
 800f01a:	4618      	mov	r0, r3
 800f01c:	f011 fe99 	bl	8020d52 <sys_mbox_valid>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d006      	beq.n	800f034 <netconn_free+0x3c>
 800f026:	4b14      	ldr	r3, [pc, #80]	; (800f078 <netconn_free+0x80>)
 800f028:	f240 3223 	movw	r2, #803	; 0x323
 800f02c:	4915      	ldr	r1, [pc, #84]	; (800f084 <netconn_free+0x8c>)
 800f02e:	4814      	ldr	r0, [pc, #80]	; (800f080 <netconn_free+0x88>)
 800f030:	f012 fe3c 	bl	8021cac <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3314      	adds	r3, #20
 800f038:	4618      	mov	r0, r3
 800f03a:	f011 fe8a 	bl	8020d52 <sys_mbox_valid>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d006      	beq.n	800f052 <netconn_free+0x5a>
 800f044:	4b0c      	ldr	r3, [pc, #48]	; (800f078 <netconn_free+0x80>)
 800f046:	f240 3226 	movw	r2, #806	; 0x326
 800f04a:	490f      	ldr	r1, [pc, #60]	; (800f088 <netconn_free+0x90>)
 800f04c:	480c      	ldr	r0, [pc, #48]	; (800f080 <netconn_free+0x88>)
 800f04e:	f012 fe2d 	bl	8021cac <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	330c      	adds	r3, #12
 800f056:	4618      	mov	r0, r3
 800f058:	f011 fefd 	bl	8020e56 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	330c      	adds	r3, #12
 800f060:	4618      	mov	r0, r3
 800f062:	f011 ff16 	bl	8020e92 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	2007      	movs	r0, #7
 800f06a:	f004 fe95 	bl	8013d98 <memp_free>
}
 800f06e:	bf00      	nop
 800f070:	3708      	adds	r7, #8
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	08025d34 	.word	0x08025d34
 800f07c:	08025f60 	.word	0x08025f60
 800f080:	08025d78 	.word	0x08025d78
 800f084:	08025f90 	.word	0x08025f90
 800f088:	08025fcc 	.word	0x08025fcc

0800f08c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b086      	sub	sp, #24
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	3310      	adds	r3, #16
 800f098:	4618      	mov	r0, r3
 800f09a:	f011 fe5a 	bl	8020d52 <sys_mbox_valid>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d02f      	beq.n	800f104 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f0a4:	e018      	b.n	800f0d8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0ae:	2b10      	cmp	r3, #16
 800f0b0:	d10e      	bne.n	800f0d0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f107 020f 	add.w	r2, r7, #15
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fafe 	bl	800e6bc <lwip_netconn_is_err_msg>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d108      	bne.n	800f0d8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f005 fd47 	bl	8014b5c <pbuf_free>
 800f0ce:	e003      	b.n	800f0d8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f001 f952 	bl	801037c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	3310      	adds	r3, #16
 800f0dc:	f107 0210 	add.w	r2, r7, #16
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f011 fe19 	bl	8020d1a <sys_arch_mbox_tryfetch>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ee:	d1da      	bne.n	800f0a6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3310      	adds	r3, #16
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f011 fda5 	bl	8020c44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	3310      	adds	r3, #16
 800f0fe:	4618      	mov	r0, r3
 800f100:	f011 fe38 	bl	8020d74 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3314      	adds	r3, #20
 800f108:	4618      	mov	r0, r3
 800f10a:	f011 fe22 	bl	8020d52 <sys_mbox_valid>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d034      	beq.n	800f17e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f114:	e01d      	b.n	800f152 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	f107 020e 	add.w	r2, r7, #14
 800f11c:	4611      	mov	r1, r2
 800f11e:	4618      	mov	r0, r3
 800f120:	f7ff facc 	bl	800e6bc <lwip_netconn_is_err_msg>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d113      	bne.n	800f152 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f12e:	6978      	ldr	r0, [r7, #20]
 800f130:	f7ff ffac 	bl	800f08c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d007      	beq.n	800f14c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	4618      	mov	r0, r3
 800f142:	f006 fc87 	bl	8015a54 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2200      	movs	r2, #0
 800f14a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f14c:	6978      	ldr	r0, [r7, #20]
 800f14e:	f7ff ff53 	bl	800eff8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	3314      	adds	r3, #20
 800f156:	f107 0210 	add.w	r2, r7, #16
 800f15a:	4611      	mov	r1, r2
 800f15c:	4618      	mov	r0, r3
 800f15e:	f011 fddc 	bl	8020d1a <sys_arch_mbox_tryfetch>
 800f162:	4603      	mov	r3, r0
 800f164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f168:	d1d5      	bne.n	800f116 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3314      	adds	r3, #20
 800f16e:	4618      	mov	r0, r3
 800f170:	f011 fd68 	bl	8020c44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	3314      	adds	r3, #20
 800f178:	4618      	mov	r0, r3
 800f17a:	f011 fdfb 	bl	8020d74 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f17e:	bf00      	nop
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
	...

0800f188 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b086      	sub	sp, #24
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f194:	2300      	movs	r3, #0
 800f196:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d106      	bne.n	800f1ac <lwip_netconn_do_close_internal+0x24>
 800f19e:	4ba1      	ldr	r3, [pc, #644]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f1a0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800f1a4:	49a0      	ldr	r1, [pc, #640]	; (800f428 <lwip_netconn_do_close_internal+0x2a0>)
 800f1a6:	48a1      	ldr	r0, [pc, #644]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f1a8:	f012 fd80 	bl	8021cac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1b4:	2b10      	cmp	r3, #16
 800f1b6:	d006      	beq.n	800f1c6 <lwip_netconn_do_close_internal+0x3e>
 800f1b8:	4b9a      	ldr	r3, [pc, #616]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f1ba:	f240 32a3 	movw	r2, #931	; 0x3a3
 800f1be:	499c      	ldr	r1, [pc, #624]	; (800f430 <lwip_netconn_do_close_internal+0x2a8>)
 800f1c0:	489a      	ldr	r0, [pc, #616]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f1c2:	f012 fd73 	bl	8021cac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	785b      	ldrb	r3, [r3, #1]
 800f1ca:	2b04      	cmp	r3, #4
 800f1cc:	d006      	beq.n	800f1dc <lwip_netconn_do_close_internal+0x54>
 800f1ce:	4b95      	ldr	r3, [pc, #596]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f1d0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800f1d4:	4997      	ldr	r1, [pc, #604]	; (800f434 <lwip_netconn_do_close_internal+0x2ac>)
 800f1d6:	4895      	ldr	r0, [pc, #596]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f1d8:	f012 fd68 	bl	8021cac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d106      	bne.n	800f1f2 <lwip_netconn_do_close_internal+0x6a>
 800f1e4:	4b8f      	ldr	r3, [pc, #572]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f1e6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800f1ea:	4993      	ldr	r1, [pc, #588]	; (800f438 <lwip_netconn_do_close_internal+0x2b0>)
 800f1ec:	488f      	ldr	r0, [pc, #572]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f1ee:	f012 fd5d 	bl	8021cac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a1b      	ldr	r3, [r3, #32]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d106      	bne.n	800f208 <lwip_netconn_do_close_internal+0x80>
 800f1fa:	4b8a      	ldr	r3, [pc, #552]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f1fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f200:	498e      	ldr	r1, [pc, #568]	; (800f43c <lwip_netconn_do_close_internal+0x2b4>)
 800f202:	488a      	ldr	r0, [pc, #552]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f204:	f012 fd52 	bl	8021cac <iprintf>

  tpcb = conn->pcb.tcp;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6a1b      	ldr	r3, [r3, #32]
 800f212:	7a1b      	ldrb	r3, [r3, #8]
 800f214:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f216:	7bfb      	ldrb	r3, [r7, #15]
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	f003 0302 	and.w	r3, r3, #2
 800f224:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	2b03      	cmp	r3, #3
 800f22a:	d102      	bne.n	800f232 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f22c:	2301      	movs	r3, #1
 800f22e:	75bb      	strb	r3, [r7, #22]
 800f230:	e01f      	b.n	800f272 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f232:	7bbb      	ldrb	r3, [r7, #14]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00e      	beq.n	800f256 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f23c:	2b05      	cmp	r3, #5
 800f23e:	d007      	beq.n	800f250 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f244:	2b06      	cmp	r3, #6
 800f246:	d003      	beq.n	800f250 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f24c:	2b08      	cmp	r3, #8
 800f24e:	d102      	bne.n	800f256 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f250:	2301      	movs	r3, #1
 800f252:	75bb      	strb	r3, [r7, #22]
 800f254:	e00d      	b.n	800f272 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f256:	7b7b      	ldrb	r3, [r7, #13]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d008      	beq.n	800f26e <lwip_netconn_do_close_internal+0xe6>
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	8b5b      	ldrh	r3, [r3, #26]
 800f260:	f003 0310 	and.w	r3, r3, #16
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f268:	2301      	movs	r3, #1
 800f26a:	75bb      	strb	r3, [r7, #22]
 800f26c:	e001      	b.n	800f272 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f272:	7dbb      	ldrb	r3, [r7, #22]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f278:	2100      	movs	r1, #0
 800f27a:	6938      	ldr	r0, [r7, #16]
 800f27c:	f007 fd90 	bl	8016da0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	7d1b      	ldrb	r3, [r3, #20]
 800f284:	2b01      	cmp	r3, #1
 800f286:	d104      	bne.n	800f292 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f288:	2100      	movs	r1, #0
 800f28a:	6938      	ldr	r0, [r7, #16]
 800f28c:	f007 fe00 	bl	8016e90 <tcp_accept>
 800f290:	e01d      	b.n	800f2ce <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f292:	7bbb      	ldrb	r3, [r7, #14]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d007      	beq.n	800f2a8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f298:	2100      	movs	r1, #0
 800f29a:	6938      	ldr	r0, [r7, #16]
 800f29c:	f007 fd92 	bl	8016dc4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	6938      	ldr	r0, [r7, #16]
 800f2a4:	f007 fdf4 	bl	8016e90 <tcp_accept>
    }
    if (shut_tx) {
 800f2a8:	7b7b      	ldrb	r3, [r7, #13]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f2ae:	2100      	movs	r1, #0
 800f2b0:	6938      	ldr	r0, [r7, #16]
 800f2b2:	f007 fda9 	bl	8016e08 <tcp_sent>
    }
    if (shut_close) {
 800f2b6:	7dbb      	ldrb	r3, [r7, #22]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d008      	beq.n	800f2ce <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2100      	movs	r1, #0
 800f2c0:	6938      	ldr	r0, [r7, #16]
 800f2c2:	f007 fdfd 	bl	8016ec0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	6938      	ldr	r0, [r7, #16]
 800f2ca:	f007 fdbf 	bl	8016e4c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f2ce:	7dbb      	ldrb	r3, [r7, #22]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d005      	beq.n	800f2e0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f2d4:	6938      	ldr	r0, [r7, #16]
 800f2d6:	f006 fa77 	bl	80157c8 <tcp_close>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	75fb      	strb	r3, [r7, #23]
 800f2de:	e007      	b.n	800f2f0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f2e0:	7bbb      	ldrb	r3, [r7, #14]
 800f2e2:	7b7a      	ldrb	r2, [r7, #13]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6938      	ldr	r0, [r7, #16]
 800f2e8:	f006 fa9a 	bl	8015820 <tcp_shutdown>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f2f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d102      	bne.n	800f2fe <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	757b      	strb	r3, [r7, #21]
 800f2fc:	e016      	b.n	800f32c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f306:	d10f      	bne.n	800f328 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a1b      	ldr	r3, [r3, #32]
 800f30c:	7a5b      	ldrb	r3, [r3, #9]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10c      	bne.n	800f32c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f312:	2301      	movs	r3, #1
 800f314:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f316:	7dbb      	ldrb	r3, [r7, #22]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d007      	beq.n	800f32c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f31c:	6938      	ldr	r0, [r7, #16]
 800f31e:	f006 fb99 	bl	8015a54 <tcp_abort>
          err = ERR_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	75fb      	strb	r3, [r7, #23]
 800f326:	e001      	b.n	800f32c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f328:	2301      	movs	r3, #1
 800f32a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f32c:	7d7b      	ldrb	r3, [r7, #21]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d044      	beq.n	800f3bc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a1b      	ldr	r3, [r3, #32]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	330c      	adds	r3, #12
 800f33a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a1b      	ldr	r3, [r3, #32]
 800f340:	7dfa      	ldrb	r2, [r7, #23]
 800f342:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d129      	bne.n	800f3ac <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f358:	7dbb      	ldrb	r3, [r7, #22]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00c      	beq.n	800f378 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d005      	beq.n	800f378 <lwip_netconn_do_close_internal+0x1f0>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f370:	2200      	movs	r2, #0
 800f372:	2104      	movs	r1, #4
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	4798      	blx	r3
      }
      if (shut_rx) {
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d009      	beq.n	800f392 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f382:	2b00      	cmp	r3, #0
 800f384:	d005      	beq.n	800f392 <lwip_netconn_do_close_internal+0x20a>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38a:	2200      	movs	r2, #0
 800f38c:	2100      	movs	r1, #0
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	4798      	blx	r3
      }
      if (shut_tx) {
 800f392:	7b7b      	ldrb	r3, [r7, #13]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d009      	beq.n	800f3ac <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d005      	beq.n	800f3ac <lwip_netconn_do_close_internal+0x224>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	2102      	movs	r1, #2
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f3ac:	78fb      	ldrb	r3, [r7, #3]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d002      	beq.n	800f3b8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f3b2:	68b8      	ldr	r0, [r7, #8]
 800f3b4:	f011 fd42 	bl	8020e3c <sys_sem_signal>
    }
    return ERR_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	e02e      	b.n	800f41a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800f3bc:	7d7b      	ldrb	r3, [r7, #21]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d11e      	bne.n	800f400 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	7d1b      	ldrb	r3, [r3, #20]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d106      	bne.n	800f3d8 <lwip_netconn_do_close_internal+0x250>
 800f3ca:	4b16      	ldr	r3, [pc, #88]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f3cc:	f240 4241 	movw	r2, #1089	; 0x441
 800f3d0:	491b      	ldr	r1, [pc, #108]	; (800f440 <lwip_netconn_do_close_internal+0x2b8>)
 800f3d2:	4816      	ldr	r0, [pc, #88]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f3d4:	f012 fc6a 	bl	8021cac <iprintf>
    if (shut_tx) {
 800f3d8:	7b7b      	ldrb	r3, [r7, #13]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800f3de:	4919      	ldr	r1, [pc, #100]	; (800f444 <lwip_netconn_do_close_internal+0x2bc>)
 800f3e0:	6938      	ldr	r0, [r7, #16]
 800f3e2:	f007 fd11 	bl	8016e08 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	4917      	ldr	r1, [pc, #92]	; (800f448 <lwip_netconn_do_close_internal+0x2c0>)
 800f3ea:	6938      	ldr	r0, [r7, #16]
 800f3ec:	f007 fd68 	bl	8016ec0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f3f0:	4916      	ldr	r1, [pc, #88]	; (800f44c <lwip_netconn_do_close_internal+0x2c4>)
 800f3f2:	6938      	ldr	r0, [r7, #16]
 800f3f4:	f007 fd2a 	bl	8016e4c <tcp_err>
    tcp_arg(tpcb, conn);
 800f3f8:	6879      	ldr	r1, [r7, #4]
 800f3fa:	6938      	ldr	r0, [r7, #16]
 800f3fc:	f007 fcd0 	bl	8016da0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d106      	bne.n	800f416 <lwip_netconn_do_close_internal+0x28e>
 800f408:	4b06      	ldr	r3, [pc, #24]	; (800f424 <lwip_netconn_do_close_internal+0x29c>)
 800f40a:	f240 424d 	movw	r2, #1101	; 0x44d
 800f40e:	4910      	ldr	r1, [pc, #64]	; (800f450 <lwip_netconn_do_close_internal+0x2c8>)
 800f410:	4806      	ldr	r0, [pc, #24]	; (800f42c <lwip_netconn_do_close_internal+0x2a4>)
 800f412:	f012 fc4b 	bl	8021cac <iprintf>
  return err;
 800f416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3718      	adds	r7, #24
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	08025d34 	.word	0x08025d34
 800f428:	08026008 	.word	0x08026008
 800f42c:	08025d78 	.word	0x08025d78
 800f430:	08026018 	.word	0x08026018
 800f434:	08026038 	.word	0x08026038
 800f438:	0802605c 	.word	0x0802605c
 800f43c:	08025e9c 	.word	0x08025e9c
 800f440:	08026070 	.word	0x08026070
 800f444:	0800ea01 	.word	0x0800ea01
 800f448:	0800e939 	.word	0x0800e939
 800f44c:	0800eaa9 	.word	0x0800eaa9
 800f450:	08026094 	.word	0x08026094

0800f454 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	785b      	ldrb	r3, [r3, #1]
 800f466:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f468:	7afb      	ldrb	r3, [r7, #11]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00d      	beq.n	800f48a <lwip_netconn_do_delconn+0x36>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f478:	2b10      	cmp	r3, #16
 800f47a:	d006      	beq.n	800f48a <lwip_netconn_do_delconn+0x36>
 800f47c:	4b60      	ldr	r3, [pc, #384]	; (800f600 <lwip_netconn_do_delconn+0x1ac>)
 800f47e:	f240 425e 	movw	r2, #1118	; 0x45e
 800f482:	4960      	ldr	r1, [pc, #384]	; (800f604 <lwip_netconn_do_delconn+0x1b0>)
 800f484:	4860      	ldr	r0, [pc, #384]	; (800f608 <lwip_netconn_do_delconn+0x1b4>)
 800f486:	f012 fc11 	bl	8021cac <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f48a:	7afb      	ldrb	r3, [r7, #11]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <lwip_netconn_do_delconn+0x48>
 800f490:	7afb      	ldrb	r3, [r7, #11]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d002      	beq.n	800f49c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f496:	7afb      	ldrb	r3, [r7, #11]
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d109      	bne.n	800f4b0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f49c:	7afb      	ldrb	r3, [r7, #11]
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d10a      	bne.n	800f4b8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	7f1b      	ldrb	r3, [r3, #28]
 800f4a8:	f003 0304 	and.w	r3, r3, #4
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d103      	bne.n	800f4b8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	22fb      	movs	r2, #251	; 0xfb
 800f4b4:	711a      	strb	r2, [r3, #4]
 800f4b6:	e097      	b.n	800f5e8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f4b8:	7afb      	ldrb	r3, [r7, #11]
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d10d      	bne.n	800f4da <lwip_netconn_do_delconn+0x86>
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	7f1b      	ldrb	r3, [r3, #28]
 800f4c4:	f003 0304 	and.w	r3, r3, #4
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d106      	bne.n	800f4da <lwip_netconn_do_delconn+0x86>
 800f4cc:	4b4c      	ldr	r3, [pc, #304]	; (800f600 <lwip_netconn_do_delconn+0x1ac>)
 800f4ce:	f240 427a 	movw	r2, #1146	; 0x47a
 800f4d2:	494e      	ldr	r1, [pc, #312]	; (800f60c <lwip_netconn_do_delconn+0x1b8>)
 800f4d4:	484c      	ldr	r0, [pc, #304]	; (800f608 <lwip_netconn_do_delconn+0x1b4>)
 800f4d6:	f012 fbe9 	bl	8021cac <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7ff fdd1 	bl	800f08c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d05f      	beq.n	800f5b4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4fe:	2b10      	cmp	r3, #16
 800f500:	d00d      	beq.n	800f51e <lwip_netconn_do_delconn+0xca>
 800f502:	2b20      	cmp	r3, #32
 800f504:	d151      	bne.n	800f5aa <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	4618      	mov	r0, r3
 800f518:	f00c ffb0 	bl	801c47c <udp_remove>
          break;
 800f51c:	e046      	b.n	800f5ac <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6a1b      	ldr	r3, [r3, #32]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d006      	beq.n	800f536 <lwip_netconn_do_delconn+0xe2>
 800f528:	4b35      	ldr	r3, [pc, #212]	; (800f600 <lwip_netconn_do_delconn+0x1ac>)
 800f52a:	f240 4294 	movw	r2, #1172	; 0x494
 800f52e:	4938      	ldr	r1, [pc, #224]	; (800f610 <lwip_netconn_do_delconn+0x1bc>)
 800f530:	4835      	ldr	r0, [pc, #212]	; (800f608 <lwip_netconn_do_delconn+0x1b4>)
 800f532:	f012 fbbb 	bl	8021cac <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2204      	movs	r2, #4
 800f53c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2203      	movs	r2, #3
 800f542:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2100      	movs	r1, #0
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff fe18 	bl	800f188 <lwip_netconn_do_close_internal>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d04b      	beq.n	800f5f6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	785b      	ldrb	r3, [r3, #1]
 800f564:	2b04      	cmp	r3, #4
 800f566:	d006      	beq.n	800f576 <lwip_netconn_do_delconn+0x122>
 800f568:	4b25      	ldr	r3, [pc, #148]	; (800f600 <lwip_netconn_do_delconn+0x1ac>)
 800f56a:	f240 429a 	movw	r2, #1178	; 0x49a
 800f56e:	4929      	ldr	r1, [pc, #164]	; (800f614 <lwip_netconn_do_delconn+0x1c0>)
 800f570:	4825      	ldr	r0, [pc, #148]	; (800f608 <lwip_netconn_do_delconn+0x1b4>)
 800f572:	f012 fb9b 	bl	8021cac <iprintf>
            UNLOCK_TCPIP_CORE();
 800f576:	4828      	ldr	r0, [pc, #160]	; (800f618 <lwip_netconn_do_delconn+0x1c4>)
 800f578:	f011 fccf 	bl	8020f1a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	330c      	adds	r3, #12
 800f582:	2100      	movs	r1, #0
 800f584:	4618      	mov	r0, r3
 800f586:	f011 fc28 	bl	8020dda <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f58a:	4823      	ldr	r0, [pc, #140]	; (800f618 <lwip_netconn_do_delconn+0x1c4>)
 800f58c:	f011 fcb6 	bl	8020efc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	785b      	ldrb	r3, [r3, #1]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d02d      	beq.n	800f5f6 <lwip_netconn_do_delconn+0x1a2>
 800f59a:	4b19      	ldr	r3, [pc, #100]	; (800f600 <lwip_netconn_do_delconn+0x1ac>)
 800f59c:	f240 429e 	movw	r2, #1182	; 0x49e
 800f5a0:	491c      	ldr	r1, [pc, #112]	; (800f614 <lwip_netconn_do_delconn+0x1c0>)
 800f5a2:	4819      	ldr	r0, [pc, #100]	; (800f608 <lwip_netconn_do_delconn+0x1b4>)
 800f5a4:	f012 fb82 	bl	8021cac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f5a8:	e025      	b.n	800f5f6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f5aa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d007      	beq.n	800f5ce <lwip_netconn_do_delconn+0x17a>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	6810      	ldr	r0, [r2, #0]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d007      	beq.n	800f5e8 <lwip_netconn_do_delconn+0x194>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	6810      	ldr	r0, [r2, #0]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	2102      	movs	r1, #2
 800f5e6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	330c      	adds	r3, #12
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f011 fc3e 	bl	8020e70 <sys_sem_valid>
 800f5f4:	e000      	b.n	800f5f8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800f5f6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	08025d34 	.word	0x08025d34
 800f604:	080260a4 	.word	0x080260a4
 800f608:	08025d78 	.word	0x08025d78
 800f60c:	080260b8 	.word	0x080260b8
 800f610:	080260d8 	.word	0x080260d8
 800f614:	080260f4 	.word	0x080260f4
 800f618:	200177a4 	.word	0x200177a4

0800f61c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d025      	beq.n	800f67e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f63c:	2b10      	cmp	r3, #16
 800f63e:	d00e      	beq.n	800f65e <lwip_netconn_do_bind+0x42>
 800f640:	2b20      	cmp	r3, #32
 800f642:	d119      	bne.n	800f678 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	6858      	ldr	r0, [r3, #4]
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	6899      	ldr	r1, [r3, #8]
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	899b      	ldrh	r3, [r3, #12]
 800f652:	461a      	mov	r2, r3
 800f654:	f00c fdd4 	bl	801c200 <udp_bind>
 800f658:	4603      	mov	r3, r0
 800f65a:	73fb      	strb	r3, [r7, #15]
        break;
 800f65c:	e011      	b.n	800f682 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	6858      	ldr	r0, [r3, #4]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	6899      	ldr	r1, [r3, #8]
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	899b      	ldrh	r3, [r3, #12]
 800f66c:	461a      	mov	r2, r3
 800f66e:	f006 f9fd 	bl	8015a6c <tcp_bind>
 800f672:	4603      	mov	r3, r0
 800f674:	73fb      	strb	r3, [r7, #15]
        break;
 800f676:	e004      	b.n	800f682 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800f678:	23fa      	movs	r3, #250	; 0xfa
 800f67a:	73fb      	strb	r3, [r7, #15]
        break;
 800f67c:	e001      	b.n	800f682 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800f67e:	23fa      	movs	r3, #250	; 0xfa
 800f680:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	7bfa      	ldrb	r2, [r7, #15]
 800f686:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f688:	bf00      	nop
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b088      	sub	sp, #32
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	4613      	mov	r3, r2
 800f69c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d102      	bne.n	800f6b2 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800f6ac:	f06f 0305 	mvn.w	r3, #5
 800f6b0:	e070      	b.n	800f794 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	785b      	ldrb	r3, [r3, #1]
 800f6b6:	2b03      	cmp	r3, #3
 800f6b8:	d006      	beq.n	800f6c8 <lwip_netconn_do_connected+0x38>
 800f6ba:	4b38      	ldr	r3, [pc, #224]	; (800f79c <lwip_netconn_do_connected+0x10c>)
 800f6bc:	f240 5223 	movw	r2, #1315	; 0x523
 800f6c0:	4937      	ldr	r1, [pc, #220]	; (800f7a0 <lwip_netconn_do_connected+0x110>)
 800f6c2:	4838      	ldr	r0, [pc, #224]	; (800f7a4 <lwip_netconn_do_connected+0x114>)
 800f6c4:	f012 faf2 	bl	8021cac <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10c      	bne.n	800f6ea <lwip_netconn_do_connected+0x5a>
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	7f1b      	ldrb	r3, [r3, #28]
 800f6d4:	f003 0304 	and.w	r3, r3, #4
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d106      	bne.n	800f6ea <lwip_netconn_do_connected+0x5a>
 800f6dc:	4b2f      	ldr	r3, [pc, #188]	; (800f79c <lwip_netconn_do_connected+0x10c>)
 800f6de:	f240 5224 	movw	r2, #1316	; 0x524
 800f6e2:	4931      	ldr	r1, [pc, #196]	; (800f7a8 <lwip_netconn_do_connected+0x118>)
 800f6e4:	482f      	ldr	r0, [pc, #188]	; (800f7a4 <lwip_netconn_do_connected+0x114>)
 800f6e6:	f012 fae1 	bl	8021cac <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d008      	beq.n	800f704 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	79fa      	ldrb	r2, [r7, #7]
 800f6f8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	6a1b      	ldr	r3, [r3, #32]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	330c      	adds	r3, #12
 800f702:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f70c:	2b10      	cmp	r3, #16
 800f70e:	d106      	bne.n	800f71e <lwip_netconn_do_connected+0x8e>
 800f710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d102      	bne.n	800f71e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800f718:	69b8      	ldr	r0, [r7, #24]
 800f71a:	f7ff fa9b 	bl	800ec54 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	7f1b      	ldrb	r3, [r3, #28]
 800f722:	f003 0304 	and.w	r3, r3, #4
 800f726:	2b00      	cmp	r3, #0
 800f728:	bf0c      	ite	eq
 800f72a:	2301      	moveq	r3, #1
 800f72c:	2300      	movne	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	7f1b      	ldrb	r3, [r3, #28]
 800f736:	f023 0304 	bic.w	r3, r3, #4
 800f73a:	b2da      	uxtb	r2, r3
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d002      	beq.n	800f74c <lwip_netconn_do_connected+0xbc>
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10c      	bne.n	800f766 <lwip_netconn_do_connected+0xd6>
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d102      	bne.n	800f758 <lwip_netconn_do_connected+0xc8>
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d006      	beq.n	800f766 <lwip_netconn_do_connected+0xd6>
 800f758:	4b10      	ldr	r3, [pc, #64]	; (800f79c <lwip_netconn_do_connected+0x10c>)
 800f75a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800f75e:	4913      	ldr	r1, [pc, #76]	; (800f7ac <lwip_netconn_do_connected+0x11c>)
 800f760:	4810      	ldr	r0, [pc, #64]	; (800f7a4 <lwip_netconn_do_connected+0x114>)
 800f762:	f012 faa3 	bl	8021cac <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	2200      	movs	r2, #0
 800f76a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	2200      	movs	r2, #0
 800f770:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f776:	2b00      	cmp	r3, #0
 800f778:	d005      	beq.n	800f786 <lwip_netconn_do_connected+0xf6>
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77e:	2200      	movs	r2, #0
 800f780:	2102      	movs	r1, #2
 800f782:	69b8      	ldr	r0, [r7, #24]
 800f784:	4798      	blx	r3

  if (was_blocking) {
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800f78c:	69f8      	ldr	r0, [r7, #28]
 800f78e:	f011 fb55 	bl	8020e3c <sys_sem_signal>
  }
  return ERR_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3720      	adds	r7, #32
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	08025d34 	.word	0x08025d34
 800f7a0:	080260fc 	.word	0x080260fc
 800f7a4:	08025d78 	.word	0x08025d78
 800f7a8:	0802611c 	.word	0x0802611c
 800f7ac:	0802615c 	.word	0x0802615c

0800f7b0 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d102      	bne.n	800f7cc <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800f7c6:	23f1      	movs	r3, #241	; 0xf1
 800f7c8:	75fb      	strb	r3, [r7, #23]
 800f7ca:	e09b      	b.n	800f904 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f7d6:	2b10      	cmp	r3, #16
 800f7d8:	d00f      	beq.n	800f7fa <lwip_netconn_do_connect+0x4a>
 800f7da:	2b20      	cmp	r3, #32
 800f7dc:	f040 8087 	bne.w	800f8ee <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	6858      	ldr	r0, [r3, #4]
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	6899      	ldr	r1, [r3, #8]
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	899b      	ldrh	r3, [r3, #12]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f00c fd8e 	bl	801c310 <udp_connect>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	75fb      	strb	r3, [r7, #23]
        break;
 800f7f8:	e084      	b.n	800f904 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	785b      	ldrb	r3, [r3, #1]
 800f800:	2b03      	cmp	r3, #3
 800f802:	d102      	bne.n	800f80a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800f804:	23f7      	movs	r3, #247	; 0xf7
 800f806:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800f808:	e07b      	b.n	800f902 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	785b      	ldrb	r3, [r3, #1]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800f814:	23f6      	movs	r3, #246	; 0xf6
 800f816:	75fb      	strb	r3, [r7, #23]
        break;
 800f818:	e073      	b.n	800f902 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4618      	mov	r0, r3
 800f820:	f7ff fa18 	bl	800ec54 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	6858      	ldr	r0, [r3, #4]
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	6899      	ldr	r1, [r3, #8]
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	899a      	ldrh	r2, [r3, #12]
 800f832:	4b38      	ldr	r3, [pc, #224]	; (800f914 <lwip_netconn_do_connect+0x164>)
 800f834:	f006 fb6c 	bl	8015f10 <tcp_connect>
 800f838:	4603      	mov	r3, r0
 800f83a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800f83c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d15e      	bne.n	800f902 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	7f1b      	ldrb	r3, [r3, #28]
 800f84a:	f003 0302 	and.w	r3, r3, #2
 800f84e:	2b00      	cmp	r3, #0
 800f850:	bf14      	ite	ne
 800f852:	2301      	movne	r3, #1
 800f854:	2300      	moveq	r3, #0
 800f856:	b2db      	uxtb	r3, r3
 800f858:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2203      	movs	r2, #3
 800f860:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800f862:	7bfb      	ldrb	r3, [r7, #15]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d009      	beq.n	800f87c <lwip_netconn_do_connect+0xcc>
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	7f1a      	ldrb	r2, [r3, #28]
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f042 0204 	orr.w	r2, r2, #4
 800f876:	b2d2      	uxtb	r2, r2
 800f878:	771a      	strb	r2, [r3, #28]
 800f87a:	e008      	b.n	800f88e <lwip_netconn_do_connect+0xde>
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	7f1a      	ldrb	r2, [r3, #28]
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f022 0204 	bic.w	r2, r2, #4
 800f88a:	b2d2      	uxtb	r2, r2
 800f88c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800f894:	23fb      	movs	r3, #251	; 0xfb
 800f896:	75fb      	strb	r3, [r7, #23]
        break;
 800f898:	e033      	b.n	800f902 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	785b      	ldrb	r3, [r3, #1]
 800f8a8:	2b03      	cmp	r3, #3
 800f8aa:	d006      	beq.n	800f8ba <lwip_netconn_do_connect+0x10a>
 800f8ac:	4b1a      	ldr	r3, [pc, #104]	; (800f918 <lwip_netconn_do_connect+0x168>)
 800f8ae:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f8b2:	491a      	ldr	r1, [pc, #104]	; (800f91c <lwip_netconn_do_connect+0x16c>)
 800f8b4:	481a      	ldr	r0, [pc, #104]	; (800f920 <lwip_netconn_do_connect+0x170>)
 800f8b6:	f012 f9f9 	bl	8021cac <iprintf>
              UNLOCK_TCPIP_CORE();
 800f8ba:	481a      	ldr	r0, [pc, #104]	; (800f924 <lwip_netconn_do_connect+0x174>)
 800f8bc:	f011 fb2d 	bl	8020f1a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	330c      	adds	r3, #12
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f011 fa86 	bl	8020dda <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800f8ce:	4815      	ldr	r0, [pc, #84]	; (800f924 <lwip_netconn_do_connect+0x174>)
 800f8d0:	f011 fb14 	bl	8020efc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	785b      	ldrb	r3, [r3, #1]
 800f8da:	2b03      	cmp	r3, #3
 800f8dc:	d116      	bne.n	800f90c <lwip_netconn_do_connect+0x15c>
 800f8de:	4b0e      	ldr	r3, [pc, #56]	; (800f918 <lwip_netconn_do_connect+0x168>)
 800f8e0:	f240 5274 	movw	r2, #1396	; 0x574
 800f8e4:	490d      	ldr	r1, [pc, #52]	; (800f91c <lwip_netconn_do_connect+0x16c>)
 800f8e6:	480e      	ldr	r0, [pc, #56]	; (800f920 <lwip_netconn_do_connect+0x170>)
 800f8e8:	f012 f9e0 	bl	8021cac <iprintf>
              return;
 800f8ec:	e00e      	b.n	800f90c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800f8ee:	4b0a      	ldr	r3, [pc, #40]	; (800f918 <lwip_netconn_do_connect+0x168>)
 800f8f0:	f240 527d 	movw	r2, #1405	; 0x57d
 800f8f4:	490c      	ldr	r1, [pc, #48]	; (800f928 <lwip_netconn_do_connect+0x178>)
 800f8f6:	480a      	ldr	r0, [pc, #40]	; (800f920 <lwip_netconn_do_connect+0x170>)
 800f8f8:	f012 f9d8 	bl	8021cac <iprintf>
 800f8fc:	23fa      	movs	r3, #250	; 0xfa
 800f8fe:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800f900:	e000      	b.n	800f904 <lwip_netconn_do_connect+0x154>
        break;
 800f902:	bf00      	nop
    }
  }
  msg->err = err;
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	7dfa      	ldrb	r2, [r7, #23]
 800f908:	711a      	strb	r2, [r3, #4]
 800f90a:	e000      	b.n	800f90e <lwip_netconn_do_connect+0x15e>
              return;
 800f90c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	0800f691 	.word	0x0800f691
 800f918:	08025d34 	.word	0x08025d34
 800f91c:	080260f4 	.word	0x080260f4
 800f920:	08025d78 	.word	0x08025d78
 800f924:	200177a4 	.word	0x200177a4
 800f928:	0802617c 	.word	0x0802617c

0800f92c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f942:	2b20      	cmp	r3, #32
 800f944:	d109      	bne.n	800f95a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f00c fd4d 	bl	801c3ec <udp_disconnect>
    msg->err = ERR_OK;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2200      	movs	r2, #0
 800f956:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f958:	e002      	b.n	800f960 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	22fa      	movs	r2, #250	; 0xfa
 800f95e:	711a      	strb	r2, [r3, #4]
}
 800f960:	bf00      	nop
 800f962:	3710      	adds	r7, #16
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d07f      	beq.n	800fa7e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f988:	2b10      	cmp	r3, #16
 800f98a:	d175      	bne.n	800fa78 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	785b      	ldrb	r3, [r3, #1]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d165      	bne.n	800fa62 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	7d1b      	ldrb	r3, [r3, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d002      	beq.n	800f9a8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800f9a2:	23fa      	movs	r3, #250	; 0xfa
 800f9a4:	72fb      	strb	r3, [r7, #11]
 800f9a6:	e06c      	b.n	800fa82 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800f9a8:	23ff      	movs	r3, #255	; 0xff
 800f9aa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	f107 020b 	add.w	r2, r7, #11
 800f9b6:	7cf9      	ldrb	r1, [r7, #19]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f006 f90f 	bl	8015bdc <tcp_listen_with_backlog_and_err>
 800f9be:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d05d      	beq.n	800fa82 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3310      	adds	r3, #16
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f011 f9c0 	bl	8020d52 <sys_mbox_valid>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	3310      	adds	r3, #16
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f011 f930 	bl	8020c44 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	3310      	adds	r3, #16
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f011 f9c2 	bl	8020d74 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3314      	adds	r3, #20
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f011 f9a9 	bl	8020d52 <sys_mbox_valid>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d108      	bne.n	800fa18 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3314      	adds	r3, #20
 800fa0c:	2106      	movs	r1, #6
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f011 f8fa 	bl	8020c08 <sys_mbox_new>
 800fa14:	4603      	mov	r3, r0
 800fa16:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800fa18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d118      	bne.n	800fa52 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2202      	movs	r2, #2
 800fa26:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	f007 f9af 	bl	8016da0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	4912      	ldr	r1, [pc, #72]	; (800fa94 <lwip_netconn_do_listen+0x12c>)
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f007 fa20 	bl	8016e90 <tcp_accept>
 800fa50:	e017      	b.n	800fa82 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800fa52:	68f8      	ldr	r0, [r7, #12]
 800fa54:	f005 feb8 	bl	80157c8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	605a      	str	r2, [r3, #4]
 800fa60:	e00f      	b.n	800fa82 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	785b      	ldrb	r3, [r3, #1]
 800fa68:	2b02      	cmp	r3, #2
 800fa6a:	d102      	bne.n	800fa72 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	72fb      	strb	r3, [r7, #11]
 800fa70:	e007      	b.n	800fa82 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800fa72:	23f5      	movs	r3, #245	; 0xf5
 800fa74:	72fb      	strb	r3, [r7, #11]
 800fa76:	e004      	b.n	800fa82 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800fa78:	23f0      	movs	r3, #240	; 0xf0
 800fa7a:	72fb      	strb	r3, [r7, #11]
 800fa7c:	e001      	b.n	800fa82 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800fa7e:	23f5      	movs	r3, #245	; 0xf5
 800fa80:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800fa82:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fa8a:	bf00      	nop
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	0800eca5 	.word	0x0800eca5

0800fa98 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fe fd59 	bl	800e560 <netconn_err>
 800faae:	4603      	mov	r3, r0
 800fab0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d134      	bne.n	800fb24 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d02d      	beq.n	800fb20 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800face:	2b20      	cmp	r3, #32
 800fad0:	d123      	bne.n	800fb1a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d10c      	bne.n	800faf6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	685a      	ldr	r2, [r3, #4]
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4619      	mov	r1, r3
 800faea:	4610      	mov	r0, r2
 800faec:	f00c f99e 	bl	801be2c <udp_send>
 800faf0:	4603      	mov	r3, r0
 800faf2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800faf4:	e016      	b.n	800fb24 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	6858      	ldr	r0, [r3, #4]
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	6819      	ldr	r1, [r3, #0]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	f103 0208 	add.w	r2, r3, #8
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	689b      	ldr	r3, [r3, #8]
 800fb0e:	899b      	ldrh	r3, [r3, #12]
 800fb10:	f00c f9c0 	bl	801be94 <udp_sendto>
 800fb14:	4603      	mov	r3, r0
 800fb16:	73fb      	strb	r3, [r7, #15]
          break;
 800fb18:	e004      	b.n	800fb24 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800fb1a:	23f5      	movs	r3, #245	; 0xf5
 800fb1c:	73fb      	strb	r3, [r7, #15]
          break;
 800fb1e:	e001      	b.n	800fb24 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800fb20:	23f5      	movs	r3, #245	; 0xf5
 800fb22:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	7bfa      	ldrb	r2, [r7, #15]
 800fb28:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fb2a:	bf00      	nop
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b086      	sub	sp, #24
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	2200      	movs	r2, #0
 800fb42:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d022      	beq.n	800fb94 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb58:	2b10      	cmp	r3, #16
 800fb5a:	d11b      	bne.n	800fb94 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb68:	d202      	bcs.n	800fb70 <lwip_netconn_do_recv+0x3e>
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	e001      	b.n	800fb74 <lwip_netconn_do_recv+0x42>
 800fb70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb74:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	89fa      	ldrh	r2, [r7, #14]
 800fb7e:	4611      	mov	r1, r2
 800fb80:	4618      	mov	r0, r3
 800fb82:	f006 f92f 	bl	8015de4 <tcp_recved>
        remaining -= recved;
 800fb86:	89fb      	ldrh	r3, [r7, #14]
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	1ad3      	subs	r3, r2, r3
 800fb8c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d1e6      	bne.n	800fb62 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fb94:	bf00      	nop
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b088      	sub	sp, #32
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	460b      	mov	r3, r1
 800fba6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d106      	bne.n	800fbc0 <lwip_netconn_do_writemore+0x24>
 800fbb2:	4b96      	ldr	r3, [pc, #600]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fbb4:	f240 6273 	movw	r2, #1651	; 0x673
 800fbb8:	4995      	ldr	r1, [pc, #596]	; (800fe10 <lwip_netconn_do_writemore+0x274>)
 800fbba:	4896      	ldr	r0, [pc, #600]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fbbc:	f012 f876 	bl	8021cac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	785b      	ldrb	r3, [r3, #1]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d006      	beq.n	800fbd6 <lwip_netconn_do_writemore+0x3a>
 800fbc8:	4b90      	ldr	r3, [pc, #576]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fbca:	f240 6274 	movw	r2, #1652	; 0x674
 800fbce:	4992      	ldr	r1, [pc, #584]	; (800fe18 <lwip_netconn_do_writemore+0x27c>)
 800fbd0:	4890      	ldr	r0, [pc, #576]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fbd2:	f012 f86b 	bl	8021cac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a1b      	ldr	r3, [r3, #32]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d106      	bne.n	800fbec <lwip_netconn_do_writemore+0x50>
 800fbde:	4b8b      	ldr	r3, [pc, #556]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fbe0:	f240 6275 	movw	r2, #1653	; 0x675
 800fbe4:	498d      	ldr	r1, [pc, #564]	; (800fe1c <lwip_netconn_do_writemore+0x280>)
 800fbe6:	488b      	ldr	r0, [pc, #556]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fbe8:	f012 f860 	bl	8021cac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d106      	bne.n	800fc02 <lwip_netconn_do_writemore+0x66>
 800fbf4:	4b85      	ldr	r3, [pc, #532]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fbf6:	f240 6276 	movw	r2, #1654	; 0x676
 800fbfa:	4989      	ldr	r1, [pc, #548]	; (800fe20 <lwip_netconn_do_writemore+0x284>)
 800fbfc:	4885      	ldr	r0, [pc, #532]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fbfe:	f012 f855 	bl	8021cac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	699a      	ldr	r2, [r3, #24]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a1b      	ldr	r3, [r3, #32]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d306      	bcc.n	800fc20 <lwip_netconn_do_writemore+0x84>
 800fc12:	4b7e      	ldr	r3, [pc, #504]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fc14:	f240 6277 	movw	r2, #1655	; 0x677
 800fc18:	4982      	ldr	r1, [pc, #520]	; (800fe24 <lwip_netconn_do_writemore+0x288>)
 800fc1a:	487e      	ldr	r0, [pc, #504]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fc1c:	f012 f846 	bl	8021cac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6a1b      	ldr	r3, [r3, #32]
 800fc24:	899b      	ldrh	r3, [r3, #12]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d106      	bne.n	800fc38 <lwip_netconn_do_writemore+0x9c>
 800fc2a:	4b78      	ldr	r3, [pc, #480]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fc2c:	f240 6279 	movw	r2, #1657	; 0x679
 800fc30:	497d      	ldr	r1, [pc, #500]	; (800fe28 <lwip_netconn_do_writemore+0x28c>)
 800fc32:	4878      	ldr	r0, [pc, #480]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fc34:	f012 f83a 	bl	8021cac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a1b      	ldr	r3, [r3, #32]
 800fc3c:	7f1b      	ldrb	r3, [r3, #28]
 800fc3e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	7f1b      	ldrb	r3, [r3, #28]
 800fc44:	f003 0302 	and.w	r3, r3, #2
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d104      	bne.n	800fc56 <lwip_netconn_do_writemore+0xba>
 800fc4c:	7ebb      	ldrb	r3, [r7, #26]
 800fc4e:	f003 0304 	and.w	r3, r3, #4
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <lwip_netconn_do_writemore+0xbe>
 800fc56:	2301      	movs	r3, #1
 800fc58:	e000      	b.n	800fc5c <lwip_netconn_do_writemore+0xc0>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6a1b      	ldr	r3, [r3, #32]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a1b      	ldr	r3, [r3, #32]
 800fc6a:	691b      	ldr	r3, [r3, #16]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6a1b      	ldr	r3, [r3, #32]
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc88:	d307      	bcc.n	800fc9a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800fc8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc8e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fc90:	7ebb      	ldrb	r3, [r7, #26]
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	76bb      	strb	r3, [r7, #26]
 800fc98:	e001      	b.n	800fc9e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fca6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800fca8:	89fa      	ldrh	r2, [r7, #14]
 800fcaa:	8bbb      	ldrh	r3, [r7, #28]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d216      	bcs.n	800fcde <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800fcb0:	89fb      	ldrh	r3, [r7, #14]
 800fcb2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800fcb4:	7e3b      	ldrb	r3, [r7, #24]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00d      	beq.n	800fcd6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800fcba:	8bbb      	ldrh	r3, [r7, #28]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10e      	bne.n	800fcde <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6a1b      	ldr	r3, [r3, #32]
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d102      	bne.n	800fcd0 <lwip_netconn_do_writemore+0x134>
 800fcca:	f06f 0306 	mvn.w	r3, #6
 800fcce:	e000      	b.n	800fcd2 <lwip_netconn_do_writemore+0x136>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800fcd4:	e07d      	b.n	800fdd2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800fcd6:	7ebb      	ldrb	r3, [r7, #26]
 800fcd8:	f043 0302 	orr.w	r3, r3, #2
 800fcdc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	691a      	ldr	r2, [r3, #16]
 800fce4:	8bbb      	ldrh	r3, [r7, #28]
 800fce6:	441a      	add	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a1b      	ldr	r3, [r3, #32]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d906      	bls.n	800fd02 <lwip_netconn_do_writemore+0x166>
 800fcf4:	4b45      	ldr	r3, [pc, #276]	; (800fe0c <lwip_netconn_do_writemore+0x270>)
 800fcf6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800fcfa:	494c      	ldr	r1, [pc, #304]	; (800fe2c <lwip_netconn_do_writemore+0x290>)
 800fcfc:	4845      	ldr	r0, [pc, #276]	; (800fe14 <lwip_netconn_do_writemore+0x278>)
 800fcfe:	f011 ffd5 	bl	8021cac <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fd02:	8bbb      	ldrh	r3, [r7, #28]
 800fd04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d103      	bne.n	800fd14 <lwip_netconn_do_writemore+0x178>
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd12:	d209      	bcs.n	800fd28 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fd18:	8bba      	ldrh	r2, [r7, #28]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d10b      	bne.n	800fd36 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	899b      	ldrh	r3, [r3, #12]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d906      	bls.n	800fd36 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fd2c:	7ebb      	ldrb	r3, [r7, #26]
 800fd2e:	f043 0302 	orr.w	r3, r3, #2
 800fd32:	76bb      	strb	r3, [r7, #26]
 800fd34:	e001      	b.n	800fd3a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800fd36:	2300      	movs	r3, #0
 800fd38:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6858      	ldr	r0, [r3, #4]
 800fd3e:	7ebb      	ldrb	r3, [r7, #26]
 800fd40:	8bba      	ldrh	r2, [r7, #28]
 800fd42:	6979      	ldr	r1, [r7, #20]
 800fd44:	f009 ff6c 	bl	8019c20 <tcp_write>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800fd4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d12c      	bne.n	800fdae <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a1b      	ldr	r3, [r3, #32]
 800fd58:	6999      	ldr	r1, [r3, #24]
 800fd5a:	8bba      	ldrh	r2, [r7, #28]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a1b      	ldr	r3, [r3, #32]
 800fd60:	440a      	add	r2, r1
 800fd62:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6a1b      	ldr	r3, [r3, #32]
 800fd68:	6919      	ldr	r1, [r3, #16]
 800fd6a:	8bba      	ldrh	r2, [r7, #28]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a1b      	ldr	r3, [r3, #32]
 800fd70:	440a      	add	r2, r1
 800fd72:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6a1b      	ldr	r3, [r3, #32]
 800fd78:	691a      	ldr	r2, [r3, #16]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d113      	bne.n	800fdae <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6a1b      	ldr	r3, [r3, #32]
 800fd8a:	899a      	ldrh	r2, [r3, #12]
 800fd8c:	3a01      	subs	r2, #1
 800fd8e:	b292      	uxth	r2, r2
 800fd90:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6a1b      	ldr	r3, [r3, #32]
 800fd96:	899b      	ldrh	r3, [r3, #12]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d008      	beq.n	800fdae <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6a1b      	ldr	r3, [r3, #32]
 800fda0:	689a      	ldr	r2, [r3, #8]
 800fda2:	3208      	adds	r2, #8
 800fda4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800fdae:	7e7b      	ldrb	r3, [r7, #25]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d004      	beq.n	800fdbe <lwip_netconn_do_writemore+0x222>
 800fdb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f43f af50 	beq.w	800fc5e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800fdbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d004      	beq.n	800fdd0 <lwip_netconn_do_writemore+0x234>
 800fdc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fdca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdce:	d146      	bne.n	800fe5e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800fdd0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800fdd2:	7e3b      	ldrb	r3, [r7, #24]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d02b      	beq.n	800fe30 <lwip_netconn_do_writemore+0x294>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a1b      	ldr	r3, [r3, #32]
 800fddc:	699a      	ldr	r2, [r3, #24]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a1b      	ldr	r3, [r3, #32]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d223      	bcs.n	800fe30 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d005      	beq.n	800fdfc <lwip_netconn_do_writemore+0x260>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	2103      	movs	r1, #3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	7f1b      	ldrb	r3, [r3, #28]
 800fe00:	f043 0310 	orr.w	r3, r3, #16
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	771a      	strb	r2, [r3, #28]
 800fe0a:	e028      	b.n	800fe5e <lwip_netconn_do_writemore+0x2c2>
 800fe0c:	08025d34 	.word	0x08025d34
 800fe10:	08025e8c 	.word	0x08025e8c
 800fe14:	08025d78 	.word	0x08025d78
 800fe18:	08026194 	.word	0x08026194
 800fe1c:	08025e9c 	.word	0x08025e9c
 800fe20:	080261b4 	.word	0x080261b4
 800fe24:	080261cc 	.word	0x080261cc
 800fe28:	0802620c 	.word	0x0802620c
 800fe2c:	08026234 	.word	0x08026234
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fe38:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fe3c:	d305      	bcc.n	800fe4a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fe46:	2b04      	cmp	r3, #4
 800fe48:	d909      	bls.n	800fe5e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d005      	beq.n	800fe5e <lwip_netconn_do_writemore+0x2c2>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe56:	2200      	movs	r2, #0
 800fe58:	2103      	movs	r1, #3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800fe5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d11d      	bne.n	800fea2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	699a      	ldr	r2, [r3, #24]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a1b      	ldr	r3, [r3, #32]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d002      	beq.n	800fe7c <lwip_netconn_do_writemore+0x2e0>
 800fe76:	7e3b      	ldrb	r3, [r7, #24]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f00a fd13 	bl	801a8b0 <tcp_output>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800fe8e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fe92:	f113 0f04 	cmn.w	r3, #4
 800fe96:	d12c      	bne.n	800fef2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fe98:	7b3b      	ldrb	r3, [r7, #12]
 800fe9a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	76fb      	strb	r3, [r7, #27]
 800fea0:	e027      	b.n	800fef2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800fea2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800feaa:	d120      	bne.n	800feee <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f00a fcfd 	bl	801a8b0 <tcp_output>
 800feb6:	4603      	mov	r3, r0
 800feb8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800feba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800febe:	f113 0f04 	cmn.w	r3, #4
 800fec2:	d104      	bne.n	800fece <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fec4:	7b7b      	ldrb	r3, [r7, #13]
 800fec6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fec8:	2301      	movs	r3, #1
 800feca:	76fb      	strb	r3, [r7, #27]
 800fecc:	e011      	b.n	800fef2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800fece:	7e3b      	ldrb	r3, [r7, #24]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00e      	beq.n	800fef2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6a1b      	ldr	r3, [r3, #32]
 800fed8:	699b      	ldr	r3, [r3, #24]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d102      	bne.n	800fee4 <lwip_netconn_do_writemore+0x348>
 800fede:	f06f 0306 	mvn.w	r3, #6
 800fee2:	e000      	b.n	800fee6 <lwip_netconn_do_writemore+0x34a>
 800fee4:	2300      	movs	r3, #0
 800fee6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fee8:	2301      	movs	r3, #1
 800feea:	76fb      	strb	r3, [r7, #27]
 800feec:	e001      	b.n	800fef2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800feee:	2301      	movs	r3, #1
 800fef0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800fef2:	7efb      	ldrb	r3, [r7, #27]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d015      	beq.n	800ff24 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6a1b      	ldr	r3, [r3, #32]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	330c      	adds	r3, #12
 800ff00:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a1b      	ldr	r3, [r3, #32]
 800ff06:	7ffa      	ldrb	r2, [r7, #31]
 800ff08:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ff16:	78fb      	ldrb	r3, [r7, #3]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d006      	beq.n	800ff2a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ff1c:	68b8      	ldr	r0, [r7, #8]
 800ff1e:	f010 ff8d 	bl	8020e3c <sys_sem_signal>
 800ff22:	e002      	b.n	800ff2a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ff24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff28:	e000      	b.n	800ff2c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ff2a:	2300      	movs	r3, #0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3720      	adds	r7, #32
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fe fb0b 	bl	800e560 <netconn_err>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ff4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d166      	bne.n	8010024 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff60:	2b10      	cmp	r3, #16
 800ff62:	d15d      	bne.n	8010020 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	785b      	ldrb	r3, [r3, #1]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ff6e:	23fb      	movs	r3, #251	; 0xfb
 800ff70:	73fb      	strb	r3, [r7, #15]
 800ff72:	e057      	b.n	8010024 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d04d      	beq.n	801001a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2201      	movs	r2, #1
 800ff84:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	6a1b      	ldr	r3, [r3, #32]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d006      	beq.n	800ff9e <lwip_netconn_do_write+0x6a>
 800ff90:	4b28      	ldr	r3, [pc, #160]	; (8010034 <lwip_netconn_do_write+0x100>)
 800ff92:	f240 7223 	movw	r2, #1827	; 0x723
 800ff96:	4928      	ldr	r1, [pc, #160]	; (8010038 <lwip_netconn_do_write+0x104>)
 800ff98:	4828      	ldr	r0, [pc, #160]	; (801003c <lwip_netconn_do_write+0x108>)
 800ff9a:	f011 fe87 	bl	8021cac <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <lwip_netconn_do_write+0x80>
 800ffa6:	4b23      	ldr	r3, [pc, #140]	; (8010034 <lwip_netconn_do_write+0x100>)
 800ffa8:	f240 7224 	movw	r2, #1828	; 0x724
 800ffac:	4924      	ldr	r1, [pc, #144]	; (8010040 <lwip_netconn_do_write+0x10c>)
 800ffae:	4823      	ldr	r0, [pc, #140]	; (801003c <lwip_netconn_do_write+0x108>)
 800ffb0:	f011 fe7c 	bl	8021cac <iprintf>
        msg->conn->current_msg = msg;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff fdea 	bl	800fb9c <lwip_netconn_do_writemore>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d02e      	beq.n	801002c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	785b      	ldrb	r3, [r3, #1]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d006      	beq.n	800ffe6 <lwip_netconn_do_write+0xb2>
 800ffd8:	4b16      	ldr	r3, [pc, #88]	; (8010034 <lwip_netconn_do_write+0x100>)
 800ffda:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ffde:	4919      	ldr	r1, [pc, #100]	; (8010044 <lwip_netconn_do_write+0x110>)
 800ffe0:	4816      	ldr	r0, [pc, #88]	; (801003c <lwip_netconn_do_write+0x108>)
 800ffe2:	f011 fe63 	bl	8021cac <iprintf>
          UNLOCK_TCPIP_CORE();
 800ffe6:	4818      	ldr	r0, [pc, #96]	; (8010048 <lwip_netconn_do_write+0x114>)
 800ffe8:	f010 ff97 	bl	8020f1a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	330c      	adds	r3, #12
 800fff2:	2100      	movs	r1, #0
 800fff4:	4618      	mov	r0, r3
 800fff6:	f010 fef0 	bl	8020dda <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800fffa:	4813      	ldr	r0, [pc, #76]	; (8010048 <lwip_netconn_do_write+0x114>)
 800fffc:	f010 ff7e 	bl	8020efc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	785b      	ldrb	r3, [r3, #1]
 8010006:	2b01      	cmp	r3, #1
 8010008:	d110      	bne.n	801002c <lwip_netconn_do_write+0xf8>
 801000a:	4b0a      	ldr	r3, [pc, #40]	; (8010034 <lwip_netconn_do_write+0x100>)
 801000c:	f240 722c 	movw	r2, #1836	; 0x72c
 8010010:	490c      	ldr	r1, [pc, #48]	; (8010044 <lwip_netconn_do_write+0x110>)
 8010012:	480a      	ldr	r0, [pc, #40]	; (801003c <lwip_netconn_do_write+0x108>)
 8010014:	f011 fe4a 	bl	8021cac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010018:	e008      	b.n	801002c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801001a:	23f5      	movs	r3, #245	; 0xf5
 801001c:	73fb      	strb	r3, [r7, #15]
 801001e:	e001      	b.n	8010024 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010020:	23fa      	movs	r3, #250	; 0xfa
 8010022:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	7bfa      	ldrb	r2, [r7, #15]
 8010028:	711a      	strb	r2, [r3, #4]
 801002a:	e000      	b.n	801002e <lwip_netconn_do_write+0xfa>
        return;
 801002c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	08025d34 	.word	0x08025d34
 8010038:	080260d8 	.word	0x080260d8
 801003c:	08025d78 	.word	0x08025d78
 8010040:	08026260 	.word	0x08026260
 8010044:	080260f4 	.word	0x080260f4
 8010048:	200177a4 	.word	0x200177a4

0801004c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d06b      	beq.n	801013a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	7c1b      	ldrb	r3, [r3, #16]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	685a      	ldr	r2, [r3, #4]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	6812      	ldr	r2, [r2, #0]
 8010076:	601a      	str	r2, [r3, #0]
 8010078:	e006      	b.n	8010088 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	685a      	ldr	r2, [r3, #4]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	6852      	ldr	r2, [r2, #4]
 8010086:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010098:	2b10      	cmp	r3, #16
 801009a:	d021      	beq.n	80100e0 <lwip_netconn_do_getaddr+0x94>
 801009c:	2b20      	cmp	r3, #32
 801009e:	d144      	bne.n	801012a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	7c1b      	ldrb	r3, [r3, #16]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d007      	beq.n	80100b8 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	685a      	ldr	r2, [r3, #4]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	8a52      	ldrh	r2, [r2, #18]
 80100b4:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 80100b6:	e044      	b.n	8010142 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	7c1b      	ldrb	r3, [r3, #16]
 80100c0:	f003 0304 	and.w	r3, r3, #4
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d103      	bne.n	80100d0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	22f5      	movs	r2, #245	; 0xf5
 80100cc:	711a      	strb	r2, [r3, #4]
        break;
 80100ce:	e038      	b.n	8010142 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	685a      	ldr	r2, [r3, #4]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	8a92      	ldrh	r2, [r2, #20]
 80100dc:	801a      	strh	r2, [r3, #0]
        break;
 80100de:	e030      	b.n	8010142 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	7c1b      	ldrb	r3, [r3, #16]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10f      	bne.n	8010108 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d005      	beq.n	8010100 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	7d1b      	ldrb	r3, [r3, #20]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d103      	bne.n	8010108 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	22f5      	movs	r2, #245	; 0xf5
 8010104:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8010106:	e01c      	b.n	8010142 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	7c1b      	ldrb	r3, [r3, #16]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d004      	beq.n	801011a <lwip_netconn_do_getaddr+0xce>
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	8adb      	ldrh	r3, [r3, #22]
 8010118:	e003      	b.n	8010122 <lwip_netconn_do_getaddr+0xd6>
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	8b1b      	ldrh	r3, [r3, #24]
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	68d2      	ldr	r2, [r2, #12]
 8010126:	8013      	strh	r3, [r2, #0]
        break;
 8010128:	e00b      	b.n	8010142 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 801012a:	4b08      	ldr	r3, [pc, #32]	; (801014c <lwip_netconn_do_getaddr+0x100>)
 801012c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010130:	4907      	ldr	r1, [pc, #28]	; (8010150 <lwip_netconn_do_getaddr+0x104>)
 8010132:	4808      	ldr	r0, [pc, #32]	; (8010154 <lwip_netconn_do_getaddr+0x108>)
 8010134:	f011 fdba 	bl	8021cac <iprintf>
        break;
 8010138:	e003      	b.n	8010142 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	22f5      	movs	r2, #245	; 0xf5
 801013e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010140:	bf00      	nop
 8010142:	bf00      	nop
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	08025d34 	.word	0x08025d34
 8010150:	08026274 	.word	0x08026274
 8010154:	08025d78 	.word	0x08025d78

08010158 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	785b      	ldrb	r3, [r3, #1]
 801016a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d069      	beq.n	801024a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010180:	2b10      	cmp	r3, #16
 8010182:	d162      	bne.n	801024a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010188:	2b03      	cmp	r3, #3
 801018a:	d002      	beq.n	8010192 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801018c:	7afb      	ldrb	r3, [r7, #11]
 801018e:	2b02      	cmp	r3, #2
 8010190:	d05b      	beq.n	801024a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010192:	7afb      	ldrb	r3, [r7, #11]
 8010194:	2b03      	cmp	r3, #3
 8010196:	d103      	bne.n	80101a0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	22f5      	movs	r2, #245	; 0xf5
 801019c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801019e:	e059      	b.n	8010254 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80101a0:	7afb      	ldrb	r3, [r7, #11]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d103      	bne.n	80101ae <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	22fb      	movs	r2, #251	; 0xfb
 80101aa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80101ac:	e052      	b.n	8010254 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	7a1b      	ldrb	r3, [r3, #8]
 80101b2:	f003 0301 	and.w	r3, r3, #1
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d004      	beq.n	80101c4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fe ff64 	bl	800f08c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d006      	beq.n	80101dc <lwip_netconn_do_close+0x84>
 80101ce:	4b23      	ldr	r3, [pc, #140]	; (801025c <lwip_netconn_do_close+0x104>)
 80101d0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80101d4:	4922      	ldr	r1, [pc, #136]	; (8010260 <lwip_netconn_do_close+0x108>)
 80101d6:	4823      	ldr	r0, [pc, #140]	; (8010264 <lwip_netconn_do_close+0x10c>)
 80101d8:	f011 fd68 	bl	8021cac <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2204      	movs	r2, #4
 80101e2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2100      	movs	r1, #0
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fe ffc8 	bl	800f188 <lwip_netconn_do_close_internal>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d029      	beq.n	8010252 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	785b      	ldrb	r3, [r3, #1]
 8010204:	2b04      	cmp	r3, #4
 8010206:	d006      	beq.n	8010216 <lwip_netconn_do_close+0xbe>
 8010208:	4b14      	ldr	r3, [pc, #80]	; (801025c <lwip_netconn_do_close+0x104>)
 801020a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801020e:	4916      	ldr	r1, [pc, #88]	; (8010268 <lwip_netconn_do_close+0x110>)
 8010210:	4814      	ldr	r0, [pc, #80]	; (8010264 <lwip_netconn_do_close+0x10c>)
 8010212:	f011 fd4b 	bl	8021cac <iprintf>
        UNLOCK_TCPIP_CORE();
 8010216:	4815      	ldr	r0, [pc, #84]	; (801026c <lwip_netconn_do_close+0x114>)
 8010218:	f010 fe7f 	bl	8020f1a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	330c      	adds	r3, #12
 8010222:	2100      	movs	r1, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f010 fdd8 	bl	8020dda <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801022a:	4810      	ldr	r0, [pc, #64]	; (801026c <lwip_netconn_do_close+0x114>)
 801022c:	f010 fe66 	bl	8020efc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	785b      	ldrb	r3, [r3, #1]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00b      	beq.n	8010252 <lwip_netconn_do_close+0xfa>
 801023a:	4b08      	ldr	r3, [pc, #32]	; (801025c <lwip_netconn_do_close+0x104>)
 801023c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010240:	4909      	ldr	r1, [pc, #36]	; (8010268 <lwip_netconn_do_close+0x110>)
 8010242:	4808      	ldr	r0, [pc, #32]	; (8010264 <lwip_netconn_do_close+0x10c>)
 8010244:	f011 fd32 	bl	8021cac <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010248:	e003      	b.n	8010252 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	22f5      	movs	r2, #245	; 0xf5
 801024e:	711a      	strb	r2, [r3, #4]
 8010250:	e000      	b.n	8010254 <lwip_netconn_do_close+0xfc>
      return;
 8010252:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	08025d34 	.word	0x08025d34
 8010260:	080260d8 	.word	0x080260d8
 8010264:	08025d78 	.word	0x08025d78
 8010268:	080260f4 	.word	0x080260f4
 801026c:	200177a4 	.word	0x200177a4

08010270 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d104      	bne.n	8010290 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	22fa      	movs	r2, #250	; 0xfa
 801028c:	701a      	strb	r2, [r3, #0]
 801028e:	e008      	b.n	80102a2 <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	68ba      	ldr	r2, [r7, #8]
 801029e:	6812      	ldr	r2, [r2, #0]
 80102a0:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f010 fdc8 	bl	8020e3c <sys_sem_signal>
}
 80102ac:	bf00      	nop
 80102ae:	3718      	adds	r7, #24
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 80102b4:	b590      	push	{r4, r7, lr}
 80102b6:	b087      	sub	sp, #28
 80102b8:	af02      	add	r7, sp, #8
 80102ba:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 80102c0:	2300      	movs	r3, #0
 80102c2:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6818      	ldr	r0, [r3, #0]
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6859      	ldr	r1, [r3, #4]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	68dc      	ldr	r4, [r3, #12]
 80102d0:	7afb      	ldrb	r3, [r7, #11]
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	4a15      	ldr	r2, [pc, #84]	; (801032c <lwip_netconn_do_gethostbyname+0x78>)
 80102d8:	f003 f83e 	bl	8013358 <dns_gethostbyname_addrtype>
 80102dc:	4603      	mov	r3, r0
 80102de:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	f993 3000 	ldrsb.w	r3, [r3]
 80102e8:	f113 0f05 	cmn.w	r3, #5
 80102ec:	d119      	bne.n	8010322 <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 80102ee:	4810      	ldr	r0, [pc, #64]	; (8010330 <lwip_netconn_do_gethostbyname+0x7c>)
 80102f0:	f010 fe13 	bl	8020f1a <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	2100      	movs	r1, #0
 80102fa:	4618      	mov	r0, r3
 80102fc:	f010 fd6d 	bl	8020dda <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 8010300:	480b      	ldr	r0, [pc, #44]	; (8010330 <lwip_netconn_do_gethostbyname+0x7c>)
 8010302:	f010 fdfb 	bl	8020efc <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	f993 3000 	ldrsb.w	r3, [r3]
 801030e:	f113 0f05 	cmn.w	r3, #5
 8010312:	d106      	bne.n	8010322 <lwip_netconn_do_gethostbyname+0x6e>
 8010314:	4b07      	ldr	r3, [pc, #28]	; (8010334 <lwip_netconn_do_gethostbyname+0x80>)
 8010316:	f640 0271 	movw	r2, #2161	; 0x871
 801031a:	4907      	ldr	r1, [pc, #28]	; (8010338 <lwip_netconn_do_gethostbyname+0x84>)
 801031c:	4807      	ldr	r0, [pc, #28]	; (801033c <lwip_netconn_do_gethostbyname+0x88>)
 801031e:	f011 fcc5 	bl	8021cac <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010322:	bf00      	nop
 8010324:	3714      	adds	r7, #20
 8010326:	46bd      	mov	sp, r7
 8010328:	bd90      	pop	{r4, r7, pc}
 801032a:	bf00      	nop
 801032c:	08010271 	.word	0x08010271
 8010330:	200177a4 	.word	0x200177a4
 8010334:	08025d34 	.word	0x08025d34
 8010338:	0802628c 	.word	0x0802628c
 801033c:	08025d78 	.word	0x08025d78

08010340 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8010340:	b480      	push	{r7}
 8010342:	b083      	sub	sp, #12
 8010344:	af00      	add	r7, sp, #0
 8010346:	4603      	mov	r3, r0
 8010348:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 801034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801034e:	2b00      	cmp	r3, #0
 8010350:	dc04      	bgt.n	801035c <err_to_errno+0x1c>
 8010352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010356:	f113 0f10 	cmn.w	r3, #16
 801035a:	da01      	bge.n	8010360 <err_to_errno+0x20>
    return EIO;
 801035c:	2305      	movs	r3, #5
 801035e:	e005      	b.n	801036c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8010360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010364:	425b      	negs	r3, r3
 8010366:	4a04      	ldr	r2, [pc, #16]	; (8010378 <err_to_errno+0x38>)
 8010368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801036c:	4618      	mov	r0, r3
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr
 8010378:	08029934 	.word	0x08029934

0801037c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d013      	beq.n	80103b2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00b      	beq.n	80103aa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4618      	mov	r0, r3
 8010398:	f004 fbe0 	bl	8014b5c <pbuf_free>
      buf->p = buf->ptr = NULL;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	605a      	str	r2, [r3, #4]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	685a      	ldr	r2, [r3, #4]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80103aa:	6879      	ldr	r1, [r7, #4]
 80103ac:	2006      	movs	r0, #6
 80103ae:	f003 fcf3 	bl	8013d98 <memp_free>
  }
}
 80103b2:	bf00      	nop
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
	...

080103bc <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d106      	bne.n	80103d8 <netbuf_free+0x1c>
 80103ca:	4b0d      	ldr	r3, [pc, #52]	; (8010400 <netbuf_free+0x44>)
 80103cc:	2281      	movs	r2, #129	; 0x81
 80103ce:	490d      	ldr	r1, [pc, #52]	; (8010404 <netbuf_free+0x48>)
 80103d0:	480d      	ldr	r0, [pc, #52]	; (8010408 <netbuf_free+0x4c>)
 80103d2:	f011 fc6b 	bl	8021cac <iprintf>
 80103d6:	e00f      	b.n	80103f8 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f004 fbb9 	bl	8014b5c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	605a      	str	r2, [r3, #4]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	685a      	ldr	r2, [r3, #4]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	080262b4 	.word	0x080262b4
 8010404:	08026350 	.word	0x08026350
 8010408:	08026304 	.word	0x08026304

0801040c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	4613      	mov	r3, r2
 8010418:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d108      	bne.n	8010432 <netbuf_ref+0x26>
 8010420:	4b1c      	ldr	r3, [pc, #112]	; (8010494 <netbuf_ref+0x88>)
 8010422:	2299      	movs	r2, #153	; 0x99
 8010424:	491c      	ldr	r1, [pc, #112]	; (8010498 <netbuf_ref+0x8c>)
 8010426:	481d      	ldr	r0, [pc, #116]	; (801049c <netbuf_ref+0x90>)
 8010428:	f011 fc40 	bl	8021cac <iprintf>
 801042c:	f06f 030f 	mvn.w	r3, #15
 8010430:	e02b      	b.n	801048a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d004      	beq.n	8010444 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4618      	mov	r0, r3
 8010440:	f004 fb8c 	bl	8014b5c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8010444:	2241      	movs	r2, #65	; 0x41
 8010446:	2100      	movs	r1, #0
 8010448:	2036      	movs	r0, #54	; 0x36
 801044a:	f004 f871 	bl	8014530 <pbuf_alloc>
 801044e:	4602      	mov	r2, r0
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d105      	bne.n	8010468 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8010462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010466:	e010      	b.n	801048a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	68ba      	ldr	r2, [r7, #8]
 801046e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	88fa      	ldrh	r2, [r7, #6]
 8010476:	811a      	strh	r2, [r3, #8]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	6812      	ldr	r2, [r2, #0]
 801047c:	891b      	ldrh	r3, [r3, #8]
 801047e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	080262b4 	.word	0x080262b4
 8010498:	0802636c 	.word	0x0802636c
 801049c:	08026304 	.word	0x08026304

080104a0 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent *
lwip_gethostbyname(const char *name)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 80104a8:	f107 0308 	add.w	r3, r7, #8
 80104ac:	4619      	mov	r1, r3
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7fe f872 	bl	800e598 <netconn_gethostbyname>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80104b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d004      	beq.n	80104ca <lwip_gethostbyname+0x2a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 80104c0:	4b17      	ldr	r3, [pc, #92]	; (8010520 <lwip_gethostbyname+0x80>)
 80104c2:	22d2      	movs	r2, #210	; 0xd2
 80104c4:	601a      	str	r2, [r3, #0]
    return NULL;
 80104c6:	2300      	movs	r3, #0
 80104c8:	e025      	b.n	8010516 <lwip_gethostbyname+0x76>
  }

  /* fill hostent */
  s_hostent_addr = addr;
 80104ca:	4a16      	ldr	r2, [pc, #88]	; (8010524 <lwip_gethostbyname+0x84>)
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	6013      	str	r3, [r2, #0]
  s_phostent_addr[0] = &s_hostent_addr;
 80104d0:	4b15      	ldr	r3, [pc, #84]	; (8010528 <lwip_gethostbyname+0x88>)
 80104d2:	4a14      	ldr	r2, [pc, #80]	; (8010524 <lwip_gethostbyname+0x84>)
 80104d4:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 80104d6:	4b14      	ldr	r3, [pc, #80]	; (8010528 <lwip_gethostbyname+0x88>)
 80104d8:	2200      	movs	r2, #0
 80104da:	605a      	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 80104dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80104e0:	6879      	ldr	r1, [r7, #4]
 80104e2:	4812      	ldr	r0, [pc, #72]	; (801052c <lwip_gethostbyname+0x8c>)
 80104e4:	f011 fe14 	bl	8022110 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 80104e8:	4b10      	ldr	r3, [pc, #64]	; (801052c <lwip_gethostbyname+0x8c>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 80104f0:	4b0f      	ldr	r3, [pc, #60]	; (8010530 <lwip_gethostbyname+0x90>)
 80104f2:	4a0e      	ldr	r2, [pc, #56]	; (801052c <lwip_gethostbyname+0x8c>)
 80104f4:	601a      	str	r2, [r3, #0]
  s_aliases = NULL;
 80104f6:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <lwip_gethostbyname+0x94>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	601a      	str	r2, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 80104fc:	4b0c      	ldr	r3, [pc, #48]	; (8010530 <lwip_gethostbyname+0x90>)
 80104fe:	4a0d      	ldr	r2, [pc, #52]	; (8010534 <lwip_gethostbyname+0x94>)
 8010500:	605a      	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
 8010502:	4b0b      	ldr	r3, [pc, #44]	; (8010530 <lwip_gethostbyname+0x90>)
 8010504:	2202      	movs	r2, #2
 8010506:	609a      	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
 8010508:	4b09      	ldr	r3, [pc, #36]	; (8010530 <lwip_gethostbyname+0x90>)
 801050a:	2204      	movs	r2, #4
 801050c:	60da      	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char **)&s_phostent_addr;
 801050e:	4b08      	ldr	r3, [pc, #32]	; (8010530 <lwip_gethostbyname+0x90>)
 8010510:	4a05      	ldr	r2, [pc, #20]	; (8010528 <lwip_gethostbyname+0x88>)
 8010512:	611a      	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
 8010514:	4b06      	ldr	r3, [pc, #24]	; (8010530 <lwip_gethostbyname+0x90>)
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 8010516:	4618      	mov	r0, r3
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	200177a0 	.word	0x200177a0
 8010524:	20013d30 	.word	0x20013d30
 8010528:	20013d34 	.word	0x20013d34
 801052c:	20013d3c 	.word	0x20013d3c
 8010530:	20013e40 	.word	0x20013e40
 8010534:	20013e54 	.word	0x20013e54

08010538 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2b00      	cmp	r3, #0
 8010548:	db02      	blt.n	8010550 <tryget_socket_unconn_nouse+0x18>
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2b03      	cmp	r3, #3
 801054e:	dd01      	ble.n	8010554 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8010550:	2300      	movs	r3, #0
 8010552:	e003      	b.n	801055c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	011b      	lsls	r3, r3, #4
 8010558:	4a03      	ldr	r2, [pc, #12]	; (8010568 <tryget_socket_unconn_nouse+0x30>)
 801055a:	4413      	add	r3, r2
}
 801055c:	4618      	mov	r0, r3
 801055e:	3714      	adds	r7, #20
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr
 8010568:	20013e58 	.word	0x20013e58

0801056c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff ffdf 	bl	8010538 <tryget_socket_unconn_nouse>
 801057a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 801057c:	68fb      	ldr	r3, [r7, #12]
}
 801057e:	4618      	mov	r0, r3
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b084      	sub	sp, #16
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7ff ffd2 	bl	8010538 <tryget_socket_unconn_nouse>
 8010594:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 8010596:	68fb      	ldr	r3, [r7, #12]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff ffdf 	bl	801056c <tryget_socket_unconn>
 80105ae:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d005      	beq.n	80105c2 <tryget_socket+0x22>
    if (sock->conn) {
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <tryget_socket+0x22>
      return sock;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	e000      	b.n	80105c4 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff ffe3 	bl	80105a0 <tryget_socket>
 80105da:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d104      	bne.n	80105ec <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80105e2:	4b05      	ldr	r3, [pc, #20]	; (80105f8 <get_socket+0x2c>)
 80105e4:	2209      	movs	r2, #9
 80105e6:	601a      	str	r2, [r3, #0]
    return NULL;
 80105e8:	2300      	movs	r3, #0
 80105ea:	e000      	b.n	80105ee <get_socket+0x22>
  }
  return sock;
 80105ec:	68fb      	ldr	r3, [r7, #12]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	2001b1ec 	.word	0x2001b1ec

080105fc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8010606:	2300      	movs	r3, #0
 8010608:	60fb      	str	r3, [r7, #12]
 801060a:	e052      	b.n	80106b2 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 801060c:	f010 fcb0 	bl	8020f70 <sys_arch_protect>
 8010610:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8010612:	4a2c      	ldr	r2, [pc, #176]	; (80106c4 <alloc_socket+0xc8>)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	011b      	lsls	r3, r3, #4
 8010618:	4413      	add	r3, r2
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d142      	bne.n	80106a6 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8010620:	4a28      	ldr	r2, [pc, #160]	; (80106c4 <alloc_socket+0xc8>)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	011b      	lsls	r3, r3, #4
 8010626:	4413      	add	r3, r2
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 801062c:	68b8      	ldr	r0, [r7, #8]
 801062e:	f010 fcad 	bl	8020f8c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8010632:	4a24      	ldr	r2, [pc, #144]	; (80106c4 <alloc_socket+0xc8>)
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	011b      	lsls	r3, r3, #4
 8010638:	4413      	add	r3, r2
 801063a:	3304      	adds	r3, #4
 801063c:	2200      	movs	r2, #0
 801063e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8010640:	4a20      	ldr	r2, [pc, #128]	; (80106c4 <alloc_socket+0xc8>)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	011b      	lsls	r3, r3, #4
 8010646:	4413      	add	r3, r2
 8010648:	330e      	adds	r3, #14
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d006      	beq.n	801065e <alloc_socket+0x62>
 8010650:	4b1d      	ldr	r3, [pc, #116]	; (80106c8 <alloc_socket+0xcc>)
 8010652:	f240 220e 	movw	r2, #526	; 0x20e
 8010656:	491d      	ldr	r1, [pc, #116]	; (80106cc <alloc_socket+0xd0>)
 8010658:	481d      	ldr	r0, [pc, #116]	; (80106d0 <alloc_socket+0xd4>)
 801065a:	f011 fb27 	bl	8021cac <iprintf>
      sockets[i].rcvevent   = 0;
 801065e:	4a19      	ldr	r2, [pc, #100]	; (80106c4 <alloc_socket+0xc8>)
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	011b      	lsls	r3, r3, #4
 8010664:	4413      	add	r3, r2
 8010666:	3308      	adds	r3, #8
 8010668:	2200      	movs	r2, #0
 801066a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010674:	2b10      	cmp	r3, #16
 8010676:	d102      	bne.n	801067e <alloc_socket+0x82>
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d001      	beq.n	8010682 <alloc_socket+0x86>
 801067e:	2301      	movs	r3, #1
 8010680:	e000      	b.n	8010684 <alloc_socket+0x88>
 8010682:	2300      	movs	r3, #0
 8010684:	b299      	uxth	r1, r3
 8010686:	4a0f      	ldr	r2, [pc, #60]	; (80106c4 <alloc_socket+0xc8>)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	011b      	lsls	r3, r3, #4
 801068c:	4413      	add	r3, r2
 801068e:	330a      	adds	r3, #10
 8010690:	460a      	mov	r2, r1
 8010692:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8010694:	4a0b      	ldr	r2, [pc, #44]	; (80106c4 <alloc_socket+0xc8>)
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	011b      	lsls	r3, r3, #4
 801069a:	4413      	add	r3, r2
 801069c:	330c      	adds	r3, #12
 801069e:	2200      	movs	r2, #0
 80106a0:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	e00a      	b.n	80106bc <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80106a6:	68b8      	ldr	r0, [r7, #8]
 80106a8:	f010 fc70 	bl	8020f8c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	3301      	adds	r3, #1
 80106b0:	60fb      	str	r3, [r7, #12]
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b03      	cmp	r3, #3
 80106b6:	dda9      	ble.n	801060c <alloc_socket+0x10>
  }
  return -1;
 80106b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	20013e58 	.word	0x20013e58
 80106c8:	0802644c 	.word	0x0802644c
 80106cc:	08026480 	.word	0x08026480
 80106d0:	080264a0 	.word	0x080264a0

080106d4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	607a      	str	r2, [r7, #4]
 80106e0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	6852      	ldr	r2, [r2, #4]
 80106e8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2200      	movs	r2, #0
 80106ee:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2200      	movs	r2, #0
 80106fc:	601a      	str	r2, [r3, #0]
  return 1;
 80106fe:	2301      	movs	r3, #1
}
 8010700:	4618      	mov	r0, r3
 8010702:	3714      	adds	r7, #20
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00d      	beq.n	801073c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d005      	beq.n	8010732 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4618      	mov	r0, r3
 801072c:	f004 fa16 	bl	8014b5c <pbuf_free>
 8010730:	e004      	b.n	801073c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff fe20 	bl	801037c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8010742:	68b8      	ldr	r0, [r7, #8]
 8010744:	f7fd fa1a 	bl	800db7c <netconn_delete>
  }
}
 8010748:	bf00      	nop
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b086      	sub	sp, #24
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 801075a:	f010 fc09 	bl	8020f70 <sys_arch_protect>
 801075e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8010760:	f107 0308 	add.w	r3, r7, #8
 8010764:	f107 020c 	add.w	r2, r7, #12
 8010768:	6839      	ldr	r1, [r7, #0]
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f7ff ffb2 	bl	80106d4 <free_socket_locked>
 8010770:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8010772:	6978      	ldr	r0, [r7, #20]
 8010774:	f010 fc0a 	bl	8020f8c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d006      	beq.n	801078c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f107 0208 	add.w	r2, r7, #8
 8010784:	4619      	mov	r1, r3
 8010786:	6838      	ldr	r0, [r7, #0]
 8010788:	f7ff ffc0 	bl	801070c <free_socket_free_elements>
  }
}
 801078c:	bf00      	nop
 801078e:	3718      	adds	r7, #24
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8010794:	b590      	push	{r4, r7, lr}
 8010796:	b099      	sub	sp, #100	; 0x64
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 80107a0:	2300      	movs	r3, #0
 80107a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f7ff ff11 	bl	80105cc <get_socket>
 80107aa:	65f8      	str	r0, [r7, #92]	; 0x5c
  if (!sock) {
 80107ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d102      	bne.n	80107b8 <lwip_accept+0x24>
    return -1;
 80107b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107b6:	e0f9      	b.n	80109ac <lwip_accept+0x218>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 80107b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80107c0:	4611      	mov	r1, r2
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fd fb0e 	bl	800dde4 <netconn_accept>
 80107c8:	4603      	mov	r3, r0
 80107ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 80107ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d02c      	beq.n	8010830 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80107d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107e0:	2b10      	cmp	r3, #16
 80107e2:	d008      	beq.n	80107f6 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 80107e4:	235f      	movs	r3, #95	; 0x5f
 80107e6:	633b      	str	r3, [r7, #48]	; 0x30
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d01d      	beq.n	801082a <lwip_accept+0x96>
 80107ee:	4a71      	ldr	r2, [pc, #452]	; (80109b4 <lwip_accept+0x220>)
 80107f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f2:	6013      	str	r3, [r2, #0]
 80107f4:	e019      	b.n	801082a <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 80107f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107fa:	f113 0f0f 	cmn.w	r3, #15
 80107fe:	d108      	bne.n	8010812 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8010800:	2316      	movs	r3, #22
 8010802:	637b      	str	r3, [r7, #52]	; 0x34
 8010804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010806:	2b00      	cmp	r3, #0
 8010808:	d00f      	beq.n	801082a <lwip_accept+0x96>
 801080a:	4a6a      	ldr	r2, [pc, #424]	; (80109b4 <lwip_accept+0x220>)
 801080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080e:	6013      	str	r3, [r2, #0]
 8010810:	e00b      	b.n	801082a <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010812:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010816:	4618      	mov	r0, r3
 8010818:	f7ff fd92 	bl	8010340 <err_to_errno>
 801081c:	63b8      	str	r0, [r7, #56]	; 0x38
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	2b00      	cmp	r3, #0
 8010822:	d002      	beq.n	801082a <lwip_accept+0x96>
 8010824:	4a63      	ldr	r2, [pc, #396]	; (80109b4 <lwip_accept+0x220>)
 8010826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010828:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 801082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801082e:	e0bd      	b.n	80109ac <lwip_accept+0x218>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	2b00      	cmp	r3, #0
 8010834:	d106      	bne.n	8010844 <lwip_accept+0xb0>
 8010836:	4b60      	ldr	r3, [pc, #384]	; (80109b8 <lwip_accept+0x224>)
 8010838:	f240 228b 	movw	r2, #651	; 0x28b
 801083c:	495f      	ldr	r1, [pc, #380]	; (80109bc <lwip_accept+0x228>)
 801083e:	4860      	ldr	r0, [pc, #384]	; (80109c0 <lwip_accept+0x22c>)
 8010840:	f011 fa34 	bl	8021cac <iprintf>

  newsock = alloc_socket(newconn, 1);
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	2101      	movs	r1, #1
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff fed7 	bl	80105fc <alloc_socket>
 801084e:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 8010850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010856:	d10e      	bne.n	8010876 <lwip_accept+0xe2>
    netconn_delete(newconn);
 8010858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085a:	4618      	mov	r0, r3
 801085c:	f7fd f98e 	bl	800db7c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8010860:	2317      	movs	r3, #23
 8010862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010866:	2b00      	cmp	r3, #0
 8010868:	d002      	beq.n	8010870 <lwip_accept+0xdc>
 801086a:	4a52      	ldr	r2, [pc, #328]	; (80109b4 <lwip_accept+0x220>)
 801086c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801086e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010874:	e09a      	b.n	80109ac <lwip_accept+0x218>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8010876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010878:	2b00      	cmp	r3, #0
 801087a:	db02      	blt.n	8010882 <lwip_accept+0xee>
 801087c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801087e:	2b03      	cmp	r3, #3
 8010880:	dd06      	ble.n	8010890 <lwip_accept+0xfc>
 8010882:	4b4d      	ldr	r3, [pc, #308]	; (80109b8 <lwip_accept+0x224>)
 8010884:	f44f 7225 	mov.w	r2, #660	; 0x294
 8010888:	494e      	ldr	r1, [pc, #312]	; (80109c4 <lwip_accept+0x230>)
 801088a:	484d      	ldr	r0, [pc, #308]	; (80109c0 <lwip_accept+0x22c>)
 801088c:	f011 fa0e 	bl	8021cac <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8010890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010892:	011b      	lsls	r3, r3, #4
 8010894:	4a4c      	ldr	r2, [pc, #304]	; (80109c8 <lwip_accept+0x234>)
 8010896:	4413      	add	r3, r2
 8010898:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 801089a:	f010 fb69 	bl	8020f70 <sys_arch_protect>
 801089e:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 80108a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a2:	699b      	ldr	r3, [r3, #24]
 80108a4:	b21b      	sxth	r3, r3
 80108a6:	43db      	mvns	r3, r3
 80108a8:	b21b      	sxth	r3, r3
 80108aa:	65bb      	str	r3, [r7, #88]	; 0x58
  newconn->socket = newsock;
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108b0:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 80108b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80108b4:	f010 fb6a 	bl	8020f8c <sys_arch_unprotect>

  if (newconn->callback) {
 80108b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d012      	beq.n	80108e6 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 80108c0:	4842      	ldr	r0, [pc, #264]	; (80109cc <lwip_accept+0x238>)
 80108c2:	f010 fb1b 	bl	8020efc <sys_mutex_lock>
    while (recvevent > 0) {
 80108c6:	e008      	b.n	80108da <lwip_accept+0x146>
      recvevent--;
 80108c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108ca:	3b01      	subs	r3, #1
 80108cc:	65bb      	str	r3, [r7, #88]	; 0x58
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80108ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108d4:	2200      	movs	r2, #0
 80108d6:	2100      	movs	r1, #0
 80108d8:	4798      	blx	r3
    while (recvevent > 0) {
 80108da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108dc:	2b00      	cmp	r3, #0
 80108de:	dcf3      	bgt.n	80108c8 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 80108e0:	483a      	ldr	r0, [pc, #232]	; (80109cc <lwip_accept+0x238>)
 80108e2:	f010 fb1a 	bl	8020f1a <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d056      	beq.n	801099a <lwip_accept+0x206>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d053      	beq.n	801099a <lwip_accept+0x206>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 80108f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108f4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80108f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80108fc:	2300      	movs	r3, #0
 80108fe:	f7fd f959 	bl	800dbb4 <netconn_getaddr>
 8010902:	4603      	mov	r3, r0
 8010904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 8010908:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801090c:	2b00      	cmp	r3, #0
 801090e:	d016      	beq.n	801093e <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8010910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010912:	4618      	mov	r0, r3
 8010914:	f7fd f932 	bl	800db7c <netconn_delete>
      free_socket(nsock, 1);
 8010918:	2101      	movs	r1, #1
 801091a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801091c:	f7ff ff18 	bl	8010750 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8010920:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010924:	4618      	mov	r0, r3
 8010926:	f7ff fd0b 	bl	8010340 <err_to_errno>
 801092a:	6478      	str	r0, [r7, #68]	; 0x44
 801092c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <lwip_accept+0x1a4>
 8010932:	4a20      	ldr	r2, [pc, #128]	; (80109b4 <lwip_accept+0x220>)
 8010934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010936:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8010938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801093c:	e036      	b.n	80109ac <lwip_accept+0x218>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801093e:	f107 0314 	add.w	r3, r7, #20
 8010942:	2210      	movs	r2, #16
 8010944:	701a      	strb	r2, [r3, #0]
 8010946:	f107 0314 	add.w	r3, r7, #20
 801094a:	2202      	movs	r2, #2
 801094c:	705a      	strb	r2, [r3, #1]
 801094e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010950:	f107 0414 	add.w	r4, r7, #20
 8010954:	4618      	mov	r0, r3
 8010956:	f001 fd41 	bl	80123dc <lwip_htons>
 801095a:	4603      	mov	r3, r0
 801095c:	8063      	strh	r3, [r4, #2]
 801095e:	f107 0314 	add.w	r3, r7, #20
 8010962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010964:	605a      	str	r2, [r3, #4]
 8010966:	f107 0314 	add.w	r3, r7, #20
 801096a:	3308      	adds	r3, #8
 801096c:	2208      	movs	r2, #8
 801096e:	2100      	movs	r1, #0
 8010970:	4618      	mov	r0, r3
 8010972:	f010 fc7f 	bl	8021274 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	7d3a      	ldrb	r2, [r7, #20]
 801097c:	4293      	cmp	r3, r2
 801097e:	d903      	bls.n	8010988 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8010980:	7d3b      	ldrb	r3, [r7, #20]
 8010982:	461a      	mov	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	f107 0314 	add.w	r3, r7, #20
 8010990:	4619      	mov	r1, r3
 8010992:	68b8      	ldr	r0, [r7, #8]
 8010994:	f010 fc46 	bl	8021224 <memcpy>
  if ((addr != NULL) && (addrlen != NULL)) {
 8010998:	bf00      	nop
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 801099a:	2300      	movs	r3, #0
 801099c:	643b      	str	r3, [r7, #64]	; 0x40
 801099e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d002      	beq.n	80109aa <lwip_accept+0x216>
 80109a4:	4a03      	ldr	r2, [pc, #12]	; (80109b4 <lwip_accept+0x220>)
 80109a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109a8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 80109aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3764      	adds	r7, #100	; 0x64
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd90      	pop	{r4, r7, pc}
 80109b4:	2001b1ec 	.word	0x2001b1ec
 80109b8:	0802644c 	.word	0x0802644c
 80109bc:	080264c8 	.word	0x080264c8
 80109c0:	080264a0 	.word	0x080264a0
 80109c4:	080264d8 	.word	0x080264d8
 80109c8:	20013e58 	.word	0x20013e58
 80109cc:	200177a4 	.word	0x200177a4

080109d0 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08a      	sub	sp, #40	; 0x28
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f7ff fdf5 	bl	80105cc <get_socket>
 80109e2:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 80109e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d102      	bne.n	80109f0 <lwip_bind+0x20>
    return -1;
 80109ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109ee:	e051      	b.n	8010a94 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b10      	cmp	r3, #16
 80109f4:	d108      	bne.n	8010a08 <lwip_bind+0x38>
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	785b      	ldrb	r3, [r3, #1]
 80109fa:	2b02      	cmp	r3, #2
 80109fc:	d104      	bne.n	8010a08 <lwip_bind+0x38>
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	f003 0303 	and.w	r3, r3, #3
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d014      	beq.n	8010a32 <lwip_bind+0x62>
 8010a08:	4b24      	ldr	r3, [pc, #144]	; (8010a9c <lwip_bind+0xcc>)
 8010a0a:	f240 22e2 	movw	r2, #738	; 0x2e2
 8010a0e:	4924      	ldr	r1, [pc, #144]	; (8010aa0 <lwip_bind+0xd0>)
 8010a10:	4824      	ldr	r0, [pc, #144]	; (8010aa4 <lwip_bind+0xd4>)
 8010a12:	f011 f94b 	bl	8021cac <iprintf>
 8010a16:	f06f 000f 	mvn.w	r0, #15
 8010a1a:	f7ff fc91 	bl	8010340 <err_to_errno>
 8010a1e:	6178      	str	r0, [r7, #20]
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d002      	beq.n	8010a2c <lwip_bind+0x5c>
 8010a26:	4a20      	ldr	r2, [pc, #128]	; (8010aa8 <lwip_bind+0xd8>)
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	6013      	str	r3, [r2, #0]
 8010a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a30:	e030      	b.n	8010a94 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	613b      	str	r3, [r7, #16]
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	885b      	ldrh	r3, [r3, #2]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f001 fccd 	bl	80123dc <lwip_htons>
 8010a42:	4603      	mov	r3, r0
 8010a44:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8010a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a4c:	f107 0110 	add.w	r1, r7, #16
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fd f901 	bl	800dc58 <netconn_bind>
 8010a56:	4603      	mov	r3, r0
 8010a58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 8010a5c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00e      	beq.n	8010a82 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8010a64:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fc69 	bl	8010340 <err_to_errno>
 8010a6e:	61b8      	str	r0, [r7, #24]
 8010a70:	69bb      	ldr	r3, [r7, #24]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d002      	beq.n	8010a7c <lwip_bind+0xac>
 8010a76:	4a0c      	ldr	r2, [pc, #48]	; (8010aa8 <lwip_bind+0xd8>)
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a80:	e008      	b.n	8010a94 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8010a82:	2300      	movs	r3, #0
 8010a84:	61fb      	str	r3, [r7, #28]
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <lwip_bind+0xc2>
 8010a8c:	4a06      	ldr	r2, [pc, #24]	; (8010aa8 <lwip_bind+0xd8>)
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010a92:	2300      	movs	r3, #0
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3728      	adds	r7, #40	; 0x28
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	0802644c 	.word	0x0802644c
 8010aa0:	080264f0 	.word	0x080264f0
 8010aa4:	080264a0 	.word	0x080264a0
 8010aa8:	2001b1ec 	.word	0x2001b1ec

08010aac <lwip_close>:

int
lwip_close(int s)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff fd87 	bl	80105cc <get_socket>
 8010abe:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d102      	bne.n	8010acc <lwip_close+0x20>
    return -1;
 8010ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aca:	e039      	b.n	8010b40 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00b      	beq.n	8010aec <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ade:	2b10      	cmp	r3, #16
 8010ae0:	bf0c      	ite	eq
 8010ae2:	2301      	moveq	r3, #1
 8010ae4:	2300      	movne	r3, #0
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	617b      	str	r3, [r7, #20]
 8010aea:	e00a      	b.n	8010b02 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d006      	beq.n	8010b02 <lwip_close+0x56>
 8010af4:	4b14      	ldr	r3, [pc, #80]	; (8010b48 <lwip_close+0x9c>)
 8010af6:	f44f 7245 	mov.w	r2, #788	; 0x314
 8010afa:	4914      	ldr	r1, [pc, #80]	; (8010b4c <lwip_close+0xa0>)
 8010afc:	4814      	ldr	r0, [pc, #80]	; (8010b50 <lwip_close+0xa4>)
 8010afe:	f011 f8d5 	bl	8021cac <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fd f814 	bl	800db34 <netconn_prepare_delete>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d00e      	beq.n	8010b36 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8010b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff fc0f 	bl	8010340 <err_to_errno>
 8010b22:	60b8      	str	r0, [r7, #8]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d002      	beq.n	8010b30 <lwip_close+0x84>
 8010b2a:	4a0a      	ldr	r2, [pc, #40]	; (8010b54 <lwip_close+0xa8>)
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b34:	e004      	b.n	8010b40 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8010b36:	6979      	ldr	r1, [r7, #20]
 8010b38:	6938      	ldr	r0, [r7, #16]
 8010b3a:	f7ff fe09 	bl	8010750 <free_socket>
  set_errno(0);
  return 0;
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3718      	adds	r7, #24
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	0802644c 	.word	0x0802644c
 8010b4c:	0802650c 	.word	0x0802650c
 8010b50:	080264a0 	.word	0x080264a0
 8010b54:	2001b1ec 	.word	0x2001b1ec

08010b58 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b08a      	sub	sp, #40	; 0x28
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f7ff fd31 	bl	80105cc <get_socket>
 8010b6a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d102      	bne.n	8010b78 <lwip_connect+0x20>
    return -1;
 8010b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b76:	e062      	b.n	8010c3e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	785b      	ldrb	r3, [r3, #1]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d108      	bne.n	8010b92 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fd f8d7 	bl	800dd38 <netconn_disconnect>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8010b90:	e039      	b.n	8010c06 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b10      	cmp	r3, #16
 8010b96:	d10c      	bne.n	8010bb2 <lwip_connect+0x5a>
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	785b      	ldrb	r3, [r3, #1]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d003      	beq.n	8010ba8 <lwip_connect+0x50>
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	785b      	ldrb	r3, [r3, #1]
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d104      	bne.n	8010bb2 <lwip_connect+0x5a>
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	f003 0303 	and.w	r3, r3, #3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d014      	beq.n	8010bdc <lwip_connect+0x84>
 8010bb2:	4b25      	ldr	r3, [pc, #148]	; (8010c48 <lwip_connect+0xf0>)
 8010bb4:	f240 3247 	movw	r2, #839	; 0x347
 8010bb8:	4924      	ldr	r1, [pc, #144]	; (8010c4c <lwip_connect+0xf4>)
 8010bba:	4825      	ldr	r0, [pc, #148]	; (8010c50 <lwip_connect+0xf8>)
 8010bbc:	f011 f876 	bl	8021cac <iprintf>
 8010bc0:	f06f 000f 	mvn.w	r0, #15
 8010bc4:	f7ff fbbc 	bl	8010340 <err_to_errno>
 8010bc8:	61f8      	str	r0, [r7, #28]
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <lwip_connect+0x7e>
 8010bd0:	4a20      	ldr	r2, [pc, #128]	; (8010c54 <lwip_connect+0xfc>)
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	6013      	str	r3, [r2, #0]
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bda:	e030      	b.n	8010c3e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	613b      	str	r3, [r7, #16]
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	885b      	ldrh	r3, [r3, #2]
 8010be6:	4618      	mov	r0, r3
 8010be8:	f001 fbf8 	bl	80123dc <lwip_htons>
 8010bec:	4603      	mov	r3, r0
 8010bee:	847b      	strh	r3, [r7, #34]	; 0x22
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010bf6:	f107 0110 	add.w	r1, r7, #16
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fd f864 	bl	800dcc8 <netconn_connect>
 8010c00:	4603      	mov	r3, r0
 8010c02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  if (err != ERR_OK) {
 8010c06:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00e      	beq.n	8010c2c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8010c0e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7ff fb94 	bl	8010340 <err_to_errno>
 8010c18:	6178      	str	r0, [r7, #20]
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d002      	beq.n	8010c26 <lwip_connect+0xce>
 8010c20:	4a0c      	ldr	r2, [pc, #48]	; (8010c54 <lwip_connect+0xfc>)
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c2a:	e008      	b.n	8010c3e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	61bb      	str	r3, [r7, #24]
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d002      	beq.n	8010c3c <lwip_connect+0xe4>
 8010c36:	4a07      	ldr	r2, [pc, #28]	; (8010c54 <lwip_connect+0xfc>)
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3728      	adds	r7, #40	; 0x28
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	0802644c 	.word	0x0802644c
 8010c4c:	08026524 	.word	0x08026524
 8010c50:	080264a0 	.word	0x080264a0
 8010c54:	2001b1ec 	.word	0x2001b1ec

08010c58 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b088      	sub	sp, #32
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7ff fcb2 	bl	80105cc <get_socket>
 8010c68:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d102      	bne.n	8010c76 <lwip_listen+0x1e>
    return -1;
 8010c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c74:	e03e      	b.n	8010cf4 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	2bfe      	cmp	r3, #254	; 0xfe
 8010c7a:	dc03      	bgt.n	8010c84 <lwip_listen+0x2c>
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010c82:	e000      	b.n	8010c86 <lwip_listen+0x2e>
 8010c84:	23ff      	movs	r3, #255	; 0xff
 8010c86:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	683a      	ldr	r2, [r7, #0]
 8010c8e:	b2d2      	uxtb	r2, r2
 8010c90:	4611      	mov	r1, r2
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fd f87a 	bl	800dd8c <netconn_listen_with_backlog>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8010c9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d01e      	beq.n	8010ce2 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010cae:	2b10      	cmp	r3, #16
 8010cb0:	d008      	beq.n	8010cc4 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8010cb2:	235f      	movs	r3, #95	; 0x5f
 8010cb4:	60fb      	str	r3, [r7, #12]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d00f      	beq.n	8010cdc <lwip_listen+0x84>
 8010cbc:	4a0f      	ldr	r2, [pc, #60]	; (8010cfc <lwip_listen+0xa4>)
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6013      	str	r3, [r2, #0]
 8010cc2:	e00b      	b.n	8010cdc <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010cc4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7ff fb39 	bl	8010340 <err_to_errno>
 8010cce:	6138      	str	r0, [r7, #16]
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d002      	beq.n	8010cdc <lwip_listen+0x84>
 8010cd6:	4a09      	ldr	r2, [pc, #36]	; (8010cfc <lwip_listen+0xa4>)
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ce0:	e008      	b.n	8010cf4 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	617b      	str	r3, [r7, #20]
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d002      	beq.n	8010cf2 <lwip_listen+0x9a>
 8010cec:	4a03      	ldr	r2, [pc, #12]	; (8010cfc <lwip_listen+0xa4>)
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3720      	adds	r7, #32
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	2001b1ec 	.word	0x2001b1ec

08010d00 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b08c      	sub	sp, #48	; 0x30
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
 8010d0c:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8010d0e:	2308      	movs	r3, #8
 8010d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  ssize_t recvd = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	db01      	blt.n	8010d22 <lwip_recv_tcp+0x22>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	e001      	b.n	8010d26 <lwip_recv_tcp+0x26>
 8010d22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d26:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d106      	bne.n	8010d3c <lwip_recv_tcp+0x3c>
 8010d2e:	4b74      	ldr	r3, [pc, #464]	; (8010f00 <lwip_recv_tcp+0x200>)
 8010d30:	f240 329e 	movw	r2, #926	; 0x39e
 8010d34:	4973      	ldr	r1, [pc, #460]	; (8010f04 <lwip_recv_tcp+0x204>)
 8010d36:	4874      	ldr	r0, [pc, #464]	; (8010f08 <lwip_recv_tcp+0x208>)
 8010d38:	f010 ffb8 	bl	8021cac <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d46:	2b10      	cmp	r3, #16
 8010d48:	d006      	beq.n	8010d58 <lwip_recv_tcp+0x58>
 8010d4a:	4b6d      	ldr	r3, [pc, #436]	; (8010f00 <lwip_recv_tcp+0x200>)
 8010d4c:	f240 329f 	movw	r2, #927	; 0x39f
 8010d50:	496e      	ldr	r1, [pc, #440]	; (8010f0c <lwip_recv_tcp+0x20c>)
 8010d52:	486d      	ldr	r0, [pc, #436]	; (8010f08 <lwip_recv_tcp+0x208>)
 8010d54:	f010 ffaa 	bl	8021cac <iprintf>

  if (flags & MSG_DONTWAIT) {
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	f003 0308 	and.w	r3, r3, #8
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d005      	beq.n	8010d6e <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8010d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d66:	f043 0304 	orr.w	r3, r3, #4
 8010d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d003      	beq.n	8010d7e <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	e036      	b.n	8010dec <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8010d86:	f107 0114 	add.w	r1, r7, #20
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fd fa60 	bl	800e250 <netconn_recv_tcp_pbuf_flags>
 8010d90:	4603      	mov	r3, r0
 8010d92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8010d96:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d019      	beq.n	8010dd2 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f300 808d 	bgt.w	8010ec0 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8010da6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff fac8 	bl	8010340 <err_to_errno>
 8010db0:	61f8      	str	r0, [r7, #28]
 8010db2:	69fb      	ldr	r3, [r7, #28]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <lwip_recv_tcp+0xbe>
 8010db8:	4a55      	ldr	r2, [pc, #340]	; (8010f10 <lwip_recv_tcp+0x210>)
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8010dbe:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8010dc2:	f113 0f0f 	cmn.w	r3, #15
 8010dc6:	d101      	bne.n	8010dcc <lwip_recv_tcp+0xcc>
          return 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	e094      	b.n	8010ef6 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8010dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dd0:	e091      	b.n	8010ef6 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d106      	bne.n	8010de6 <lwip_recv_tcp+0xe6>
 8010dd8:	4b49      	ldr	r3, [pc, #292]	; (8010f00 <lwip_recv_tcp+0x200>)
 8010dda:	f240 32c5 	movw	r2, #965	; 0x3c5
 8010dde:	494d      	ldr	r1, [pc, #308]	; (8010f14 <lwip_recv_tcp+0x214>)
 8010de0:	4849      	ldr	r0, [pc, #292]	; (8010f08 <lwip_recv_tcp+0x208>)
 8010de2:	f010 ff63 	bl	8021cac <iprintf>
      sock->lastdata.pbuf = p;
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	891b      	ldrh	r3, [r3, #8]
 8010df0:	461a      	mov	r2, r3
 8010df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df4:	4293      	cmp	r3, r2
 8010df6:	dd03      	ble.n	8010e00 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	891b      	ldrh	r3, [r3, #8]
 8010dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010dfe:	e001      	b.n	8010e04 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if (recvd + copylen < recvd) {
 8010e04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e08:	4413      	add	r3, r2
 8010e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	dd03      	ble.n	8010e18 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	43db      	mvns	r3, r3
 8010e16:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8010e18:	6978      	ldr	r0, [r7, #20]
 8010e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	18d1      	adds	r1, r2, r3
 8010e20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e22:	2300      	movs	r3, #0
 8010e24:	f004 f8a0 	bl	8014f68 <pbuf_copy_partial>

    recvd += copylen;
 8010e28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e2c:	4413      	add	r3, r2
 8010e2e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8010e30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e34:	429a      	cmp	r2, r3
 8010e36:	da06      	bge.n	8010e46 <lwip_recv_tcp+0x146>
 8010e38:	4b31      	ldr	r3, [pc, #196]	; (8010f00 <lwip_recv_tcp+0x200>)
 8010e3a:	f240 32dd 	movw	r2, #989	; 0x3dd
 8010e3e:	4936      	ldr	r1, [pc, #216]	; (8010f18 <lwip_recv_tcp+0x218>)
 8010e40:	4831      	ldr	r0, [pc, #196]	; (8010f08 <lwip_recv_tcp+0x208>)
 8010e42:	f010 ff33 	bl	8021cac <iprintf>
    recv_left -= copylen;
 8010e46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	f003 0301 	and.w	r3, r3, #1
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d123      	bne.n	8010ea0 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	891b      	ldrh	r3, [r3, #8]
 8010e5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d906      	bls.n	8010e70 <lwip_recv_tcp+0x170>
 8010e62:	4b27      	ldr	r3, [pc, #156]	; (8010f00 <lwip_recv_tcp+0x200>)
 8010e64:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010e68:	492c      	ldr	r1, [pc, #176]	; (8010f1c <lwip_recv_tcp+0x21c>)
 8010e6a:	4827      	ldr	r0, [pc, #156]	; (8010f08 <lwip_recv_tcp+0x208>)
 8010e6c:	f010 ff1e 	bl	8021cac <iprintf>
      if (p->tot_len - copylen > 0) {
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	891b      	ldrh	r3, [r3, #8]
 8010e74:	461a      	mov	r2, r3
 8010e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	dd09      	ble.n	8010e92 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e82:	4611      	mov	r1, r2
 8010e84:	4618      	mov	r0, r3
 8010e86:	f003 fe36 	bl	8014af6 <pbuf_free_header>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	605a      	str	r2, [r3, #4]
 8010e90:	e006      	b.n	8010ea0 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2200      	movs	r2, #0
 8010e96:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f003 fe5e 	bl	8014b5c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8010ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ea4:	f043 0314 	orr.w	r3, r3, #20
 8010ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8010eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	dd08      	ble.n	8010ec4 <lwip_recv_tcp+0x1c4>
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	f003 0301 	and.w	r3, r3, #1
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f43f af58 	beq.w	8010d6e <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8010ebe:	e001      	b.n	8010ec4 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8010ec0:	bf00      	nop
 8010ec2:	e000      	b.n	8010ec6 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8010ec4:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8010ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dd0b      	ble.n	8010ee4 <lwip_recv_tcp+0x1e4>
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d106      	bne.n	8010ee4 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010edc:	4611      	mov	r1, r2
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fd f904 	bl	800e0ec <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	61bb      	str	r3, [r7, #24]
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <lwip_recv_tcp+0x1f4>
 8010eee:	4a08      	ldr	r2, [pc, #32]	; (8010f10 <lwip_recv_tcp+0x210>)
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	6013      	str	r3, [r2, #0]
  return recvd;
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3730      	adds	r7, #48	; 0x30
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	0802644c 	.word	0x0802644c
 8010f04:	08026544 	.word	0x08026544
 8010f08:	080264a0 	.word	0x080264a0
 8010f0c:	08026554 	.word	0x08026554
 8010f10:	2001b1ec 	.word	0x2001b1ec
 8010f14:	08026578 	.word	0x08026578
 8010f18:	08026584 	.word	0x08026584
 8010f1c:	080265ac 	.word	0x080265ac

08010f20 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8010f20:	b590      	push	{r4, r7, lr}
 8010f22:	b08b      	sub	sp, #44	; 0x2c
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	603b      	str	r3, [r7, #0]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8010f30:	2300      	movs	r3, #0
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d106      	bne.n	8010f48 <lwip_sock_make_addr+0x28>
 8010f3a:	4b2b      	ldr	r3, [pc, #172]	; (8010fe8 <lwip_sock_make_addr+0xc8>)
 8010f3c:	f240 4207 	movw	r2, #1031	; 0x407
 8010f40:	492a      	ldr	r1, [pc, #168]	; (8010fec <lwip_sock_make_addr+0xcc>)
 8010f42:	482b      	ldr	r0, [pc, #172]	; (8010ff0 <lwip_sock_make_addr+0xd0>)
 8010f44:	f010 feb2 	bl	8021cac <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d106      	bne.n	8010f5c <lwip_sock_make_addr+0x3c>
 8010f4e:	4b26      	ldr	r3, [pc, #152]	; (8010fe8 <lwip_sock_make_addr+0xc8>)
 8010f50:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010f54:	4927      	ldr	r1, [pc, #156]	; (8010ff4 <lwip_sock_make_addr+0xd4>)
 8010f56:	4826      	ldr	r0, [pc, #152]	; (8010ff0 <lwip_sock_make_addr+0xd0>)
 8010f58:	f010 fea8 	bl	8021cac <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8010f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d106      	bne.n	8010f70 <lwip_sock_make_addr+0x50>
 8010f62:	4b21      	ldr	r3, [pc, #132]	; (8010fe8 <lwip_sock_make_addr+0xc8>)
 8010f64:	f240 4209 	movw	r2, #1033	; 0x409
 8010f68:	4923      	ldr	r1, [pc, #140]	; (8010ff8 <lwip_sock_make_addr+0xd8>)
 8010f6a:	4821      	ldr	r0, [pc, #132]	; (8010ff0 <lwip_sock_make_addr+0xd0>)
 8010f6c:	f010 fe9e 	bl	8021cac <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8010f70:	f107 0314 	add.w	r3, r7, #20
 8010f74:	2210      	movs	r2, #16
 8010f76:	701a      	strb	r2, [r3, #0]
 8010f78:	f107 0314 	add.w	r3, r7, #20
 8010f7c:	2202      	movs	r2, #2
 8010f7e:	705a      	strb	r2, [r3, #1]
 8010f80:	f107 0414 	add.w	r4, r7, #20
 8010f84:	88fb      	ldrh	r3, [r7, #6]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f001 fa28 	bl	80123dc <lwip_htons>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	8063      	strh	r3, [r4, #2]
 8010f90:	f107 0314 	add.w	r3, r7, #20
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	6812      	ldr	r2, [r2, #0]
 8010f98:	605a      	str	r2, [r3, #4]
 8010f9a:	f107 0314 	add.w	r3, r7, #20
 8010f9e:	3308      	adds	r3, #8
 8010fa0:	2208      	movs	r2, #8
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f010 f965 	bl	8021274 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8010faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	7d3a      	ldrb	r2, [r7, #20]
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d202      	bcs.n	8010fba <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8010fb8:	e008      	b.n	8010fcc <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8010fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	7d3a      	ldrb	r2, [r7, #20]
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d903      	bls.n	8010fcc <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8010fc4:	7d3b      	ldrb	r3, [r7, #20]
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fca:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	f107 0314 	add.w	r3, r7, #20
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6838      	ldr	r0, [r7, #0]
 8010fd8:	f010 f924 	bl	8021224 <memcpy>
  return truncated;
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	372c      	adds	r7, #44	; 0x2c
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd90      	pop	{r4, r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	0802644c 	.word	0x0802644c
 8010fec:	080265bc 	.word	0x080265bc
 8010ff0:	080264a0 	.word	0x080264a0
 8010ff4:	080265d0 	.word	0x080265d0
 8010ff8:	080265e0 	.word	0x080265e0

08010ffc <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b088      	sub	sp, #32
 8011000:	af02      	add	r7, sp, #8
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	607a      	str	r2, [r7, #4]
 8011008:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d101      	bne.n	8011014 <lwip_recv_tcp_from+0x18>
    return 0;
 8011010:	2300      	movs	r3, #0
 8011012:	e021      	b.n	8011058 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d01d      	beq.n	8011056 <lwip_recv_tcp_from+0x5a>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d01a      	beq.n	8011056 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	6818      	ldr	r0, [r3, #0]
 8011024:	f107 0216 	add.w	r2, r7, #22
 8011028:	f107 0110 	add.w	r1, r7, #16
 801102c:	2300      	movs	r3, #0
 801102e:	f7fc fdc1 	bl	800dbb4 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d00e      	beq.n	8011056 <lwip_recv_tcp_from+0x5a>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00b      	beq.n	8011056 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6818      	ldr	r0, [r3, #0]
 8011042:	8afa      	ldrh	r2, [r7, #22]
 8011044:	f107 0110 	add.w	r1, r7, #16
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	f7ff ff67 	bl	8010f20 <lwip_sock_make_addr>
 8011052:	4603      	mov	r3, r0
 8011054:	e000      	b.n	8011058 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8011056:	2300      	movs	r3, #0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3718      	adds	r7, #24
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8011060:	b590      	push	{r4, r7, lr}
 8011062:	b08d      	sub	sp, #52	; 0x34
 8011064:	af02      	add	r7, sp, #8
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
 801106c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d10d      	bne.n	8011092 <lwip_recvfrom_udp_raw+0x32>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	2b00      	cmp	r3, #0
 801107c:	dd09      	ble.n	8011092 <lwip_recvfrom_udp_raw+0x32>
 801107e:	4b5e      	ldr	r3, [pc, #376]	; (80111f8 <lwip_recvfrom_udp_raw+0x198>)
 8011080:	f240 4249 	movw	r2, #1097	; 0x449
 8011084:	495d      	ldr	r1, [pc, #372]	; (80111fc <lwip_recvfrom_udp_raw+0x19c>)
 8011086:	485e      	ldr	r0, [pc, #376]	; (8011200 <lwip_recvfrom_udp_raw+0x1a0>)
 8011088:	f010 fe10 	bl	8021cac <iprintf>
 801108c:	f06f 030f 	mvn.w	r3, #15
 8011090:	e0ae      	b.n	80111f0 <lwip_recvfrom_udp_raw+0x190>

  if (flags & MSG_DONTWAIT) {
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	f003 0308 	and.w	r3, r3, #8
 8011098:	2b00      	cmp	r3, #0
 801109a:	d003      	beq.n	80110a4 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 801109c:	2304      	movs	r3, #4
 801109e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80110a2:	e002      	b.n	80110aa <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d11f      	bne.n	80110f6 <lwip_recvfrom_udp_raw+0x96>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80110be:	f107 0110 	add.w	r1, r7, #16
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fd f8f0 	bl	800e2a8 <netconn_recv_udp_raw_netbuf_flags>
 80110c8:	4603      	mov	r3, r0
 80110ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 80110ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d002      	beq.n	80110dc <lwip_recvfrom_udp_raw+0x7c>
      return err;
 80110d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80110da:	e089      	b.n	80111f0 <lwip_recvfrom_udp_raw+0x190>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <lwip_recvfrom_udp_raw+0x90>
 80110e2:	4b45      	ldr	r3, [pc, #276]	; (80111f8 <lwip_recvfrom_udp_raw+0x198>)
 80110e4:	f240 425e 	movw	r2, #1118	; 0x45e
 80110e8:	4946      	ldr	r1, [pc, #280]	; (8011204 <lwip_recvfrom_udp_raw+0x1a4>)
 80110ea:	4845      	ldr	r0, [pc, #276]	; (8011200 <lwip_recvfrom_udp_raw+0x1a0>)
 80110ec:	f010 fdde 	bl	8021cac <iprintf>
    sock->lastdata.netbuf = buf;
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	891b      	ldrh	r3, [r3, #8]
 80110fc:	837b      	strh	r3, [r7, #26]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8011102:	2300      	movs	r3, #0
 8011104:	61fb      	str	r3, [r7, #28]
 8011106:	e029      	b.n	801115c <lwip_recvfrom_udp_raw+0xfc>
    u16_t len_left = (u16_t)(buflen - copied);
 8011108:	8b7a      	ldrh	r2, [r7, #26]
 801110a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	833b      	strh	r3, [r7, #24]
    if (msg->msg_iov[i].iov_len > len_left) {
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	689a      	ldr	r2, [r3, #8]
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	00db      	lsls	r3, r3, #3
 8011118:	4413      	add	r3, r2
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	8b3b      	ldrh	r3, [r7, #24]
 801111e:	429a      	cmp	r2, r3
 8011120:	d902      	bls.n	8011128 <lwip_recvfrom_udp_raw+0xc8>
      copylen = len_left;
 8011122:	8b3b      	ldrh	r3, [r7, #24]
 8011124:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011126:	e006      	b.n	8011136 <lwip_recvfrom_udp_raw+0xd6>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	689a      	ldr	r2, [r3, #8]
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	00db      	lsls	r3, r3, #3
 8011130:	4413      	add	r3, r2
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	6818      	ldr	r0, [r3, #0]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	689a      	ldr	r2, [r3, #8]
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	00db      	lsls	r3, r3, #3
 8011142:	4413      	add	r3, r2
 8011144:	6819      	ldr	r1, [r3, #0]
 8011146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011148:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801114a:	f003 ff0d 	bl	8014f68 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 801114e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011152:	4413      	add	r3, r2
 8011154:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	3301      	adds	r3, #1
 801115a:	61fb      	str	r3, [r7, #28]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	69fa      	ldr	r2, [r7, #28]
 8011162:	429a      	cmp	r2, r3
 8011164:	da03      	bge.n	801116e <lwip_recvfrom_udp_raw+0x10e>
 8011166:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011168:	8b7b      	ldrh	r3, [r7, #26]
 801116a:	429a      	cmp	r2, r3
 801116c:	d3cc      	bcc.n	8011108 <lwip_recvfrom_udp_raw+0xa8>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d01a      	beq.n	80111ac <lwip_recvfrom_udp_raw+0x14c>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d016      	beq.n	80111ac <lwip_recvfrom_udp_raw+0x14c>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d012      	beq.n	80111ac <lwip_recvfrom_udp_raw+0x14c>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00e      	beq.n	80111ac <lwip_recvfrom_udp_raw+0x14c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	6818      	ldr	r0, [r3, #0]
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	f103 0108 	add.w	r1, r3, #8
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3304      	adds	r3, #4
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	4623      	mov	r3, r4
 80111a8:	f7ff feba 	bl	8010f20 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d007      	beq.n	80111ca <lwip_recvfrom_udp_raw+0x16a>
    u8_t wrote_msg = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 80111be:	7dfb      	ldrb	r3, [r7, #23]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d102      	bne.n	80111ca <lwip_recvfrom_udp_raw+0x16a>
      msg->msg_controllen = 0;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	f003 0301 	and.w	r3, r3, #1
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d106      	bne.n	80111e2 <lwip_recvfrom_udp_raw+0x182>
    sock->lastdata.netbuf = NULL;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2200      	movs	r2, #0
 80111d8:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff f8cd 	bl	801037c <netbuf_delete>
  }
  if (datagram_len) {
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d002      	beq.n	80111ee <lwip_recvfrom_udp_raw+0x18e>
    *datagram_len = buflen;
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	8b7a      	ldrh	r2, [r7, #26]
 80111ec:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 80111ee:	2300      	movs	r3, #0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	372c      	adds	r7, #44	; 0x2c
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd90      	pop	{r4, r7, pc}
 80111f8:	0802644c 	.word	0x0802644c
 80111fc:	080265f0 	.word	0x080265f0
 8011200:	080264a0 	.word	0x080264a0
 8011204:	0802661c 	.word	0x0802661c

08011208 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b096      	sub	sp, #88	; 0x58
 801120c:	af02      	add	r7, sp, #8
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
 8011214:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7ff f9d8 	bl	80105cc <get_socket>
 801121c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 801121e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d102      	bne.n	801122a <lwip_recvfrom+0x22>
    return -1;
 8011224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011228:	e078      	b.n	801131c <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801122a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011234:	2b10      	cmp	r3, #16
 8011236:	d112      	bne.n	801125e <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	68b9      	ldr	r1, [r7, #8]
 801123e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011240:	f7ff fd5e 	bl	8010d00 <lwip_recv_tcp>
 8011244:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8011246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011248:	9301      	str	r3, [sp, #4]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	4b35      	ldr	r3, [pc, #212]	; (8011324 <lwip_recvfrom+0x11c>)
 8011250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011254:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011256:	f7ff fed1 	bl	8010ffc <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 801125a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801125c:	e05e      	b.n	801131c <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 801125e:	2300      	movs	r3, #0
 8011260:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 801126a:	2300      	movs	r3, #0
 801126c:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 8011272:	2300      	movs	r3, #0
 8011274:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 8011276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801127a:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 801127c:	2301      	movs	r3, #1
 801127e:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8011280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011282:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8011284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011286:	2b00      	cmp	r3, #0
 8011288:	d002      	beq.n	8011290 <lwip_recvfrom+0x88>
 801128a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	e000      	b.n	8011292 <lwip_recvfrom+0x8a>
 8011290:	2300      	movs	r3, #0
 8011292:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8011294:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8011298:	f107 0214 	add.w	r2, r7, #20
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	460b      	mov	r3, r1
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80112a6:	f7ff fedb 	bl	8011060 <lwip_recvfrom_udp_raw>
 80112aa:	4603      	mov	r3, r0
 80112ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 80112b0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00e      	beq.n	80112d6 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 80112b8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80112bc:	4618      	mov	r0, r3
 80112be:	f7ff f83f 	bl	8010340 <err_to_errno>
 80112c2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80112c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d002      	beq.n	80112d0 <lwip_recvfrom+0xc8>
 80112ca:	4a17      	ldr	r2, [pc, #92]	; (8011328 <lwip_recvfrom+0x120>)
 80112cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ce:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80112d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112d4:	e022      	b.n	801131c <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80112d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80112d8:	461a      	mov	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4293      	cmp	r3, r2
 80112de:	bf28      	it	cs
 80112e0:	4613      	movcs	r3, r2
 80112e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d206      	bcs.n	80112f8 <lwip_recvfrom+0xf0>
 80112ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80112ec:	461a      	mov	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4293      	cmp	r3, r2
 80112f2:	bf28      	it	cs
 80112f4:	4613      	movcs	r3, r2
 80112f6:	e001      	b.n	80112fc <lwip_recvfrom+0xf4>
 80112f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80112fc:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 80112fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8011304:	69ba      	ldr	r2, [r7, #24]
 8011306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011308:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 801130a:	2300      	movs	r3, #0
 801130c:	643b      	str	r3, [r7, #64]	; 0x40
 801130e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011310:	2b00      	cmp	r3, #0
 8011312:	d002      	beq.n	801131a <lwip_recvfrom+0x112>
 8011314:	4a04      	ldr	r2, [pc, #16]	; (8011328 <lwip_recvfrom+0x120>)
 8011316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011318:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 801131a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801131c:	4618      	mov	r0, r3
 801131e:	3750      	adds	r7, #80	; 0x50
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	08026628 	.word	0x08026628
 8011328:	2001b1ec 	.word	0x2001b1ec

0801132c <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b086      	sub	sp, #24
 8011330:	af02      	add	r7, sp, #8
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
 8011338:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 801133a:	2300      	movs	r3, #0
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	2300      	movs	r3, #0
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	68b9      	ldr	r1, [r7, #8]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f7ff ff5d 	bl	8011208 <lwip_recvfrom>
 801134e:	4603      	mov	r3, r0
}
 8011350:	4618      	mov	r0, r3
 8011352:	3710      	adds	r7, #16
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b08a      	sub	sp, #40	; 0x28
 801135c:	af02      	add	r7, sp, #8
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
 8011364:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f7ff f930 	bl	80105cc <get_socket>
 801136c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d102      	bne.n	801137a <lwip_send+0x22>
    return -1;
 8011374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011378:	e046      	b.n	8011408 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011384:	2b10      	cmp	r3, #16
 8011386:	d00b      	beq.n	80113a0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8011388:	2300      	movs	r3, #0
 801138a:	9301      	str	r3, [sp, #4]
 801138c:	2300      	movs	r3, #0
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	68b9      	ldr	r1, [r7, #8]
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f000 f83c 	bl	8011414 <lwip_sendto>
 801139c:	4603      	mov	r3, r0
 801139e:	e033      	b.n	8011408 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <lwip_send+0x56>
 80113aa:	2203      	movs	r2, #3
 80113ac:	e000      	b.n	80113b0 <lwip_send+0x58>
 80113ae:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	105b      	asrs	r3, r3, #1
 80113b4:	b25b      	sxtb	r3, r3
 80113b6:	f003 0304 	and.w	r3, r3, #4
 80113ba:	b25b      	sxtb	r3, r3
 80113bc:	4313      	orrs	r3, r2
 80113be:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 80113c0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	6818      	ldr	r0, [r3, #0]
 80113ca:	7efa      	ldrb	r2, [r7, #27]
 80113cc:	f107 0310 	add.w	r3, r7, #16
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4613      	mov	r3, r2
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	68b9      	ldr	r1, [r7, #8]
 80113d8:	f7fc ffc0 	bl	800e35c <netconn_write_partly>
 80113dc:	4603      	mov	r3, r0
 80113de:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80113e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fe ffab 	bl	8010340 <err_to_errno>
 80113ea:	6178      	str	r0, [r7, #20]
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d002      	beq.n	80113f8 <lwip_send+0xa0>
 80113f2:	4a07      	ldr	r2, [pc, #28]	; (8011410 <lwip_send+0xb8>)
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80113f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d101      	bne.n	8011404 <lwip_send+0xac>
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	e001      	b.n	8011408 <lwip_send+0xb0>
 8011404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011408:	4618      	mov	r0, r3
 801140a:	3720      	adds	r7, #32
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	2001b1ec 	.word	0x2001b1ec

08011414 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b08e      	sub	sp, #56	; 0x38
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
 8011420:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f7ff f8d2 	bl	80105cc <get_socket>
 8011428:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 801142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142c:	2b00      	cmp	r3, #0
 801142e:	d102      	bne.n	8011436 <lwip_sendto+0x22>
    return -1;
 8011430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011434:	e093      	b.n	801155e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8011436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011440:	2b10      	cmp	r3, #16
 8011442:	d107      	bne.n	8011454 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	68b9      	ldr	r1, [r7, #8]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff ff84 	bl	8011358 <lwip_send>
 8011450:	4603      	mov	r3, r0
 8011452:	e084      	b.n	801155e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801145a:	d30a      	bcc.n	8011472 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 801145c:	235a      	movs	r3, #90	; 0x5a
 801145e:	623b      	str	r3, [r7, #32]
 8011460:	6a3b      	ldr	r3, [r7, #32]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d002      	beq.n	801146c <lwip_sendto+0x58>
 8011466:	4a40      	ldr	r2, [pc, #256]	; (8011568 <lwip_sendto+0x154>)
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801146c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011470:	e075      	b.n	801155e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8011476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011478:	2b00      	cmp	r3, #0
 801147a:	d102      	bne.n	8011482 <lwip_sendto+0x6e>
 801147c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801147e:	2b00      	cmp	r3, #0
 8011480:	d023      	beq.n	80114ca <lwip_sendto+0xb6>
 8011482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011484:	2b10      	cmp	r3, #16
 8011486:	d10b      	bne.n	80114a0 <lwip_sendto+0x8c>
 8011488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801148a:	2b00      	cmp	r3, #0
 801148c:	d008      	beq.n	80114a0 <lwip_sendto+0x8c>
 801148e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011490:	785b      	ldrb	r3, [r3, #1]
 8011492:	2b02      	cmp	r3, #2
 8011494:	d104      	bne.n	80114a0 <lwip_sendto+0x8c>
 8011496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011498:	f003 0303 	and.w	r3, r3, #3
 801149c:	2b00      	cmp	r3, #0
 801149e:	d014      	beq.n	80114ca <lwip_sendto+0xb6>
 80114a0:	4b32      	ldr	r3, [pc, #200]	; (801156c <lwip_sendto+0x158>)
 80114a2:	f240 6252 	movw	r2, #1618	; 0x652
 80114a6:	4932      	ldr	r1, [pc, #200]	; (8011570 <lwip_sendto+0x15c>)
 80114a8:	4832      	ldr	r0, [pc, #200]	; (8011574 <lwip_sendto+0x160>)
 80114aa:	f010 fbff 	bl	8021cac <iprintf>
 80114ae:	f06f 000f 	mvn.w	r0, #15
 80114b2:	f7fe ff45 	bl	8010340 <err_to_errno>
 80114b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d002      	beq.n	80114c4 <lwip_sendto+0xb0>
 80114be:	4a2a      	ldr	r2, [pc, #168]	; (8011568 <lwip_sendto+0x154>)
 80114c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c2:	6013      	str	r3, [r2, #0]
 80114c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114c8:	e049      	b.n	801155e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80114ca:	2300      	movs	r3, #0
 80114cc:	617b      	str	r3, [r7, #20]
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80114d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00a      	beq.n	80114ee <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80114d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	61bb      	str	r3, [r7, #24]
 80114de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114e0:	885b      	ldrh	r3, [r3, #2]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f000 ff7a 	bl	80123dc <lwip_htons>
 80114e8:	4603      	mov	r3, r0
 80114ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80114ec:	e003      	b.n	80114f6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 80114ee:	2300      	movs	r3, #0
 80114f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80114f2:	2300      	movs	r3, #0
 80114f4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 80114f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80114f8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 80114fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80114fc:	f107 0310 	add.w	r3, r7, #16
 8011500:	68b9      	ldr	r1, [r7, #8]
 8011502:	4618      	mov	r0, r3
 8011504:	f7fe ff82 	bl	801040c <netbuf_ref>
 8011508:	4603      	mov	r3, r0
 801150a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 801150e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8011512:	2b00      	cmp	r3, #0
 8011514:	d10a      	bne.n	801152c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f107 0210 	add.w	r2, r7, #16
 801151e:	4611      	mov	r1, r2
 8011520:	4618      	mov	r0, r3
 8011522:	f7fc feed 	bl	800e300 <netconn_send>
 8011526:	4603      	mov	r3, r0
 8011528:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 801152c:	f107 0310 	add.w	r3, r7, #16
 8011530:	4618      	mov	r0, r3
 8011532:	f7fe ff43 	bl	80103bc <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8011536:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801153a:	4618      	mov	r0, r3
 801153c:	f7fe ff00 	bl	8010340 <err_to_errno>
 8011540:	6278      	str	r0, [r7, #36]	; 0x24
 8011542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <lwip_sendto+0x13a>
 8011548:	4a07      	ldr	r2, [pc, #28]	; (8011568 <lwip_sendto+0x154>)
 801154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 801154e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8011552:	2b00      	cmp	r3, #0
 8011554:	d101      	bne.n	801155a <lwip_sendto+0x146>
 8011556:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011558:	e001      	b.n	801155e <lwip_sendto+0x14a>
 801155a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801155e:	4618      	mov	r0, r3
 8011560:	3738      	adds	r7, #56	; 0x38
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	2001b1ec 	.word	0x2001b1ec
 801156c:	0802644c 	.word	0x0802644c
 8011570:	0802672c 	.word	0x0802672c
 8011574:	080264a0 	.word	0x080264a0

08011578 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b086      	sub	sp, #24
 801157c:	af00      	add	r7, sp, #0
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	2b03      	cmp	r3, #3
 8011588:	d009      	beq.n	801159e <lwip_socket+0x26>
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	2b03      	cmp	r3, #3
 801158e:	dc23      	bgt.n	80115d8 <lwip_socket+0x60>
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d019      	beq.n	80115ca <lwip_socket+0x52>
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	2b02      	cmp	r3, #2
 801159a:	d009      	beq.n	80115b0 <lwip_socket+0x38>
 801159c:	e01c      	b.n	80115d8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	4a22      	ldr	r2, [pc, #136]	; (801162c <lwip_socket+0xb4>)
 80115a4:	4619      	mov	r1, r3
 80115a6:	2040      	movs	r0, #64	; 0x40
 80115a8:	f7fc fa4a 	bl	800da40 <netconn_new_with_proto_and_callback>
 80115ac:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80115ae:	e019      	b.n	80115e4 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b88      	cmp	r3, #136	; 0x88
 80115b4:	d101      	bne.n	80115ba <lwip_socket+0x42>
 80115b6:	2321      	movs	r3, #33	; 0x21
 80115b8:	e000      	b.n	80115bc <lwip_socket+0x44>
 80115ba:	2320      	movs	r3, #32
 80115bc:	4a1b      	ldr	r2, [pc, #108]	; (801162c <lwip_socket+0xb4>)
 80115be:	2100      	movs	r1, #0
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7fc fa3d 	bl	800da40 <netconn_new_with_proto_and_callback>
 80115c6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80115c8:	e00c      	b.n	80115e4 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80115ca:	4a18      	ldr	r2, [pc, #96]	; (801162c <lwip_socket+0xb4>)
 80115cc:	2100      	movs	r1, #0
 80115ce:	2010      	movs	r0, #16
 80115d0:	f7fc fa36 	bl	800da40 <netconn_new_with_proto_and_callback>
 80115d4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80115d6:	e005      	b.n	80115e4 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 80115d8:	4b15      	ldr	r3, [pc, #84]	; (8011630 <lwip_socket+0xb8>)
 80115da:	2216      	movs	r2, #22
 80115dc:	601a      	str	r2, [r3, #0]
      return -1;
 80115de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115e2:	e01e      	b.n	8011622 <lwip_socket+0xaa>
  }

  if (!conn) {
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d105      	bne.n	80115f6 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 80115ea:	4b11      	ldr	r3, [pc, #68]	; (8011630 <lwip_socket+0xb8>)
 80115ec:	2269      	movs	r2, #105	; 0x69
 80115ee:	601a      	str	r2, [r3, #0]
    return -1;
 80115f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115f4:	e015      	b.n	8011622 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 80115f6:	2100      	movs	r1, #0
 80115f8:	6978      	ldr	r0, [r7, #20]
 80115fa:	f7fe ffff 	bl	80105fc <alloc_socket>
 80115fe:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011606:	d108      	bne.n	801161a <lwip_socket+0xa2>
    netconn_delete(conn);
 8011608:	6978      	ldr	r0, [r7, #20]
 801160a:	f7fc fab7 	bl	800db7c <netconn_delete>
    set_errno(ENFILE);
 801160e:	4b08      	ldr	r3, [pc, #32]	; (8011630 <lwip_socket+0xb8>)
 8011610:	2217      	movs	r2, #23
 8011612:	601a      	str	r2, [r3, #0]
    return -1;
 8011614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011618:	e003      	b.n	8011622 <lwip_socket+0xaa>
  }
  conn->socket = i;
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	693a      	ldr	r2, [r7, #16]
 801161e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8011620:	693b      	ldr	r3, [r7, #16]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	08011de9 	.word	0x08011de9
 8011630:	2001b1ec 	.word	0x2001b1ec

08011634 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 801163c:	480c      	ldr	r0, [pc, #48]	; (8011670 <lwip_link_select_cb+0x3c>)
 801163e:	f00f fc5d 	bl	8020efc <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 8011642:	4b0c      	ldr	r3, [pc, #48]	; (8011674 <lwip_link_select_cb+0x40>)
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 801164a:	4b0a      	ldr	r3, [pc, #40]	; (8011674 <lwip_link_select_cb+0x40>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d003      	beq.n	801165a <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 8011652:	4b08      	ldr	r3, [pc, #32]	; (8011674 <lwip_link_select_cb+0x40>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 801165a:	4a06      	ldr	r2, [pc, #24]	; (8011674 <lwip_link_select_cb+0x40>)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8011660:	4803      	ldr	r0, [pc, #12]	; (8011670 <lwip_link_select_cb+0x3c>)
 8011662:	f00f fc5a 	bl	8020f1a <sys_mutex_unlock>
}
 8011666:	bf00      	nop
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	200177a4 	.word	0x200177a4
 8011674:	20013e98 	.word	0x20013e98

08011678 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8011680:	481b      	ldr	r0, [pc, #108]	; (80116f0 <lwip_unlink_select_cb+0x78>)
 8011682:	f00f fc3b 	bl	8020efc <sys_mutex_lock>
  if (select_cb->next != NULL) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d004      	beq.n	8011698 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	6852      	ldr	r2, [r2, #4]
 8011696:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 8011698:	4b16      	ldr	r3, [pc, #88]	; (80116f4 <lwip_unlink_select_cb+0x7c>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d10f      	bne.n	80116c2 <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d006      	beq.n	80116b8 <lwip_unlink_select_cb+0x40>
 80116aa:	4b13      	ldr	r3, [pc, #76]	; (80116f8 <lwip_unlink_select_cb+0x80>)
 80116ac:	f240 720d 	movw	r2, #1805	; 0x70d
 80116b0:	4912      	ldr	r1, [pc, #72]	; (80116fc <lwip_unlink_select_cb+0x84>)
 80116b2:	4813      	ldr	r0, [pc, #76]	; (8011700 <lwip_unlink_select_cb+0x88>)
 80116b4:	f010 fafa 	bl	8021cac <iprintf>
    select_cb_list = select_cb->next;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a0d      	ldr	r2, [pc, #52]	; (80116f4 <lwip_unlink_select_cb+0x7c>)
 80116be:	6013      	str	r3, [r2, #0]
 80116c0:	e00f      	b.n	80116e2 <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d106      	bne.n	80116d8 <lwip_unlink_select_cb+0x60>
 80116ca:	4b0b      	ldr	r3, [pc, #44]	; (80116f8 <lwip_unlink_select_cb+0x80>)
 80116cc:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 80116d0:	490c      	ldr	r1, [pc, #48]	; (8011704 <lwip_unlink_select_cb+0x8c>)
 80116d2:	480b      	ldr	r0, [pc, #44]	; (8011700 <lwip_unlink_select_cb+0x88>)
 80116d4:	f010 faea 	bl	8021cac <iprintf>
    select_cb->prev->next = select_cb->next;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	6812      	ldr	r2, [r2, #0]
 80116e0:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80116e2:	4803      	ldr	r0, [pc, #12]	; (80116f0 <lwip_unlink_select_cb+0x78>)
 80116e4:	f00f fc19 	bl	8020f1a <sys_mutex_unlock>
}
 80116e8:	bf00      	nop
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	200177a4 	.word	0x200177a4
 80116f4:	20013e98 	.word	0x20013e98
 80116f8:	0802644c 	.word	0x0802644c
 80116fc:	0802674c 	.word	0x0802674c
 8011700:	080264a0 	.word	0x080264a0
 8011704:	08026764 	.word	0x08026764

08011708 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b098      	sub	sp, #96	; 0x60
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
 8011714:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 801171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801171e:	653b      	str	r3, [r7, #80]	; 0x50
 8011720:	2300      	movs	r3, #0
 8011722:	657b      	str	r3, [r7, #84]	; 0x54
 8011724:	e007      	b.n	8011736 <lwip_selscan+0x2e>
 8011726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	653a      	str	r2, [r7, #80]	; 0x50
 801172c:	2200      	movs	r2, #0
 801172e:	701a      	strb	r2, [r3, #0]
 8011730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011732:	3301      	adds	r3, #1
 8011734:	657b      	str	r3, [r7, #84]	; 0x54
 8011736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011738:	2b07      	cmp	r3, #7
 801173a:	d9f4      	bls.n	8011726 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 801173c:	f107 031c 	add.w	r3, r7, #28
 8011740:	64bb      	str	r3, [r7, #72]	; 0x48
 8011742:	2300      	movs	r3, #0
 8011744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011746:	e007      	b.n	8011758 <lwip_selscan+0x50>
 8011748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	64ba      	str	r2, [r7, #72]	; 0x48
 801174e:	2200      	movs	r2, #0
 8011750:	701a      	strb	r2, [r3, #0]
 8011752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011754:	3301      	adds	r3, #1
 8011756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801175a:	2b07      	cmp	r3, #7
 801175c:	d9f4      	bls.n	8011748 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 801175e:	f107 0314 	add.w	r3, r7, #20
 8011762:	643b      	str	r3, [r7, #64]	; 0x40
 8011764:	2300      	movs	r3, #0
 8011766:	647b      	str	r3, [r7, #68]	; 0x44
 8011768:	e007      	b.n	801177a <lwip_selscan+0x72>
 801176a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801176c:	1c5a      	adds	r2, r3, #1
 801176e:	643a      	str	r2, [r7, #64]	; 0x40
 8011770:	2200      	movs	r2, #0
 8011772:	701a      	strb	r2, [r3, #0]
 8011774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011776:	3301      	adds	r3, #1
 8011778:	647b      	str	r3, [r7, #68]	; 0x44
 801177a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801177c:	2b07      	cmp	r3, #7
 801177e:	d9f4      	bls.n	801176a <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011780:	2300      	movs	r3, #0
 8011782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011784:	e0e1      	b.n	801194a <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d00d      	beq.n	80117a8 <lwip_selscan+0xa0>
 801178c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801178e:	095a      	lsrs	r2, r3, #5
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011798:	f002 021f 	and.w	r2, r2, #31
 801179c:	2101      	movs	r1, #1
 801179e:	fa01 f202 	lsl.w	r2, r1, r2
 80117a2:	4013      	ands	r3, r2
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d123      	bne.n	80117f0 <lwip_selscan+0xe8>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00d      	beq.n	80117ca <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 80117ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117b0:	095a      	lsrs	r2, r3, #5
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117ba:	f002 021f 	and.w	r2, r2, #31
 80117be:	2101      	movs	r1, #1
 80117c0:	fa01 f202 	lsl.w	r2, r1, r2
 80117c4:	4013      	ands	r3, r2
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d112      	bne.n	80117f0 <lwip_selscan+0xe8>
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 80b8 	beq.w	8011942 <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 80117d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117d4:	095a      	lsrs	r2, r3, #5
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117de:	f002 021f 	and.w	r2, r2, #31
 80117e2:	2101      	movs	r1, #1
 80117e4:	fa01 f202 	lsl.w	r2, r1, r2
 80117e8:	4013      	ands	r3, r2
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f000 80a9 	beq.w	8011942 <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 80117f0:	f00f fbbe 	bl	8020f70 <sys_arch_protect>
 80117f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 80117f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80117f8:	f7fe fec5 	bl	8010586 <tryget_socket_unconn_locked>
 80117fc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 80117fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011800:	2b00      	cmp	r3, #0
 8011802:	f000 8098 	beq.w	8011936 <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 8011806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 801180c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180e:	891b      	ldrh	r3, [r3, #8]
 8011810:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 8011812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011814:	895b      	ldrh	r3, [r3, #10]
 8011816:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 8011818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181a:	899b      	ldrh	r3, [r3, #12]
 801181c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 801181e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011820:	f00f fbb4 	bl	8020f8c <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d02c      	beq.n	8011884 <lwip_selscan+0x17c>
 801182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801182c:	095a      	lsrs	r2, r3, #5
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011836:	f002 021f 	and.w	r2, r2, #31
 801183a:	2101      	movs	r1, #1
 801183c:	fa01 f202 	lsl.w	r2, r1, r2
 8011840:	4013      	ands	r3, r2
 8011842:	2b00      	cmp	r3, #0
 8011844:	d01e      	beq.n	8011884 <lwip_selscan+0x17c>
 8011846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011848:	2b00      	cmp	r3, #0
 801184a:	d103      	bne.n	8011854 <lwip_selscan+0x14c>
 801184c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011850:	2b00      	cmp	r3, #0
 8011852:	dd17      	ble.n	8011884 <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 8011854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011856:	095a      	lsrs	r2, r3, #5
 8011858:	0093      	lsls	r3, r2, #2
 801185a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801185e:	440b      	add	r3, r1
 8011860:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8011864:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011866:	f001 011f 	and.w	r1, r1, #31
 801186a:	2001      	movs	r0, #1
 801186c:	fa00 f101 	lsl.w	r1, r0, r1
 8011870:	4319      	orrs	r1, r3
 8011872:	0093      	lsls	r3, r2, #2
 8011874:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011878:	4413      	add	r3, r2
 801187a:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 801187e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011880:	3301      	adds	r3, #1
 8011882:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d028      	beq.n	80118dc <lwip_selscan+0x1d4>
 801188a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801188c:	095a      	lsrs	r2, r3, #5
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011896:	f002 021f 	and.w	r2, r2, #31
 801189a:	2101      	movs	r1, #1
 801189c:	fa01 f202 	lsl.w	r2, r1, r2
 80118a0:	4013      	ands	r3, r2
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d01a      	beq.n	80118dc <lwip_selscan+0x1d4>
 80118a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d017      	beq.n	80118dc <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 80118ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118ae:	095a      	lsrs	r2, r3, #5
 80118b0:	0093      	lsls	r3, r2, #2
 80118b2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80118b6:	440b      	add	r3, r1
 80118b8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80118bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80118be:	f001 011f 	and.w	r1, r1, #31
 80118c2:	2001      	movs	r0, #1
 80118c4:	fa00 f101 	lsl.w	r1, r0, r1
 80118c8:	4319      	orrs	r1, r3
 80118ca:	0093      	lsls	r3, r2, #2
 80118cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80118d0:	4413      	add	r3, r2
 80118d2:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 80118d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118d8:	3301      	adds	r3, #1
 80118da:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d030      	beq.n	8011944 <lwip_selscan+0x23c>
 80118e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118e4:	095a      	lsrs	r2, r3, #5
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118ee:	f002 021f 	and.w	r2, r2, #31
 80118f2:	2101      	movs	r1, #1
 80118f4:	fa01 f202 	lsl.w	r2, r1, r2
 80118f8:	4013      	ands	r3, r2
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d022      	beq.n	8011944 <lwip_selscan+0x23c>
 80118fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011900:	2b00      	cmp	r3, #0
 8011902:	d01f      	beq.n	8011944 <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 8011904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011906:	095a      	lsrs	r2, r3, #5
 8011908:	0093      	lsls	r3, r2, #2
 801190a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801190e:	440b      	add	r3, r1
 8011910:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8011914:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011916:	f001 011f 	and.w	r1, r1, #31
 801191a:	2001      	movs	r0, #1
 801191c:	fa00 f101 	lsl.w	r1, r0, r1
 8011920:	4319      	orrs	r1, r3
 8011922:	0093      	lsls	r3, r2, #2
 8011924:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011928:	4413      	add	r3, r2
 801192a:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 801192e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011930:	3301      	adds	r3, #1
 8011932:	65bb      	str	r3, [r7, #88]	; 0x58
 8011934:	e006      	b.n	8011944 <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 8011936:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011938:	f00f fb28 	bl	8020f8c <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 801193c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011940:	e02b      	b.n	801199a <lwip_selscan+0x292>
      continue;
 8011942:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011946:	3301      	adds	r3, #1
 8011948:	65fb      	str	r3, [r7, #92]	; 0x5c
 801194a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	429a      	cmp	r2, r3
 8011950:	f6ff af19 	blt.w	8011786 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 8011954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011956:	461a      	mov	r2, r3
 8011958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801195c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011960:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 8011964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011966:	461a      	mov	r2, r3
 8011968:	f107 031c 	add.w	r3, r7, #28
 801196c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011970:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 8011974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011976:	461a      	mov	r2, r3
 8011978:	f107 0314 	add.w	r3, r7, #20
 801197c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011980:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 8011984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011986:	2b00      	cmp	r3, #0
 8011988:	da06      	bge.n	8011998 <lwip_selscan+0x290>
 801198a:	4b06      	ldr	r3, [pc, #24]	; (80119a4 <lwip_selscan+0x29c>)
 801198c:	f240 7269 	movw	r2, #1897	; 0x769
 8011990:	4905      	ldr	r1, [pc, #20]	; (80119a8 <lwip_selscan+0x2a0>)
 8011992:	4806      	ldr	r0, [pc, #24]	; (80119ac <lwip_selscan+0x2a4>)
 8011994:	f010 f98a 	bl	8021cac <iprintf>
  return nready;
 8011998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 801199a:	4618      	mov	r0, r3
 801199c:	3760      	adds	r7, #96	; 0x60
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	0802644c 	.word	0x0802644c
 80119a8:	0802677c 	.word	0x0802677c
 80119ac:	080264a0 	.word	0x080264a0

080119b0 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b0a0      	sub	sp, #128	; 0x80
 80119b4:	af04      	add	r7, sp, #16
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
 80119bc:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 80119be:	2300      	movs	r3, #0
 80119c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	db02      	blt.n	80119ce <lwip_select+0x1e>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2b40      	cmp	r3, #64	; 0x40
 80119cc:	dd05      	ble.n	80119da <lwip_select+0x2a>
    set_errno(EINVAL);
 80119ce:	4b84      	ldr	r3, [pc, #528]	; (8011be0 <lwip_select+0x230>)
 80119d0:	2216      	movs	r2, #22
 80119d2:	601a      	str	r2, [r3, #0]
    return -1;
 80119d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119d8:	e1b5      	b.n	8011d46 <lwip_select+0x396>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80119da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80119de:	9302      	str	r3, [sp, #8]
 80119e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80119e4:	9301      	str	r3, [sp, #4]
 80119e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	68b9      	ldr	r1, [r7, #8]
 80119f2:	68f8      	ldr	r0, [r7, #12]
 80119f4:	f7ff fe88 	bl	8011708 <lwip_selscan>
 80119f8:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 80119fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	da05      	bge.n	8011a0c <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 8011a00:	4b77      	ldr	r3, [pc, #476]	; (8011be0 <lwip_select+0x230>)
 8011a02:	2209      	movs	r2, #9
 8011a04:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 8011a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a0a:	e19c      	b.n	8011d46 <lwip_select+0x396>
  } else if (nready > 0) {
 8011a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f300 8177 	bgt.w	8011d02 <lwip_select+0x352>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 8011a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d009      	beq.n	8011a2e <lwip_select+0x7e>
 8011a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a20:	4313      	orrs	r3, r2
 8011a22:	d104      	bne.n	8011a2e <lwip_select+0x7e>
 8011a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f000 8169 	beq.w	8011d00 <lwip_select+0x350>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 8011a2e:	f107 0310 	add.w	r3, r7, #16
 8011a32:	2224      	movs	r2, #36	; 0x24
 8011a34:	2100      	movs	r1, #0
 8011a36:	4618      	mov	r0, r3
 8011a38:	f00f fc1c 	bl	8021274 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8011a48:	f107 0310 	add.w	r3, r7, #16
 8011a4c:	3320      	adds	r3, #32
 8011a4e:	2100      	movs	r1, #0
 8011a50:	4618      	mov	r0, r3
 8011a52:	f00f f99c 	bl	8020d8e <sys_sem_new>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d005      	beq.n	8011a68 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 8011a5c:	4b60      	ldr	r3, [pc, #384]	; (8011be0 <lwip_select+0x230>)
 8011a5e:	220c      	movs	r2, #12
 8011a60:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 8011a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a66:	e16e      	b.n	8011d46 <lwip_select+0x396>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8011a68:	f107 0310 	add.w	r3, r7, #16
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7ff fde1 	bl	8011634 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011a76:	2300      	movs	r3, #0
 8011a78:	663b      	str	r3, [r7, #96]	; 0x60
 8011a7a:	e06b      	b.n	8011b54 <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d00d      	beq.n	8011a9e <lwip_select+0xee>
 8011a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a84:	095a      	lsrs	r2, r3, #5
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a8e:	f002 021f 	and.w	r2, r2, #31
 8011a92:	2101      	movs	r1, #1
 8011a94:	fa01 f202 	lsl.w	r2, r1, r2
 8011a98:	4013      	ands	r3, r2
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d121      	bne.n	8011ae2 <lwip_select+0x132>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00d      	beq.n	8011ac0 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 8011aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011aa6:	095a      	lsrs	r2, r3, #5
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ab0:	f002 021f 	and.w	r2, r2, #31
 8011ab4:	2101      	movs	r1, #1
 8011ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8011aba:	4013      	ands	r3, r2
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d110      	bne.n	8011ae2 <lwip_select+0x132>
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d043      	beq.n	8011b4e <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 8011ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ac8:	095a      	lsrs	r2, r3, #5
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ad2:	f002 021f 	and.w	r2, r2, #31
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8011adc:	4013      	ands	r3, r2
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d035      	beq.n	8011b4e <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 8011ae2:	f00f fa45 	bl	8020f70 <sys_arch_protect>
 8011ae6:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 8011ae8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011aea:	f7fe fd4c 	bl	8010586 <tryget_socket_unconn_locked>
 8011aee:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 8011af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d01f      	beq.n	8011b36 <lwip_select+0x186>
            sock->select_waiting++;
 8011af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011af8:	7b9b      	ldrb	r3, [r3, #14]
 8011afa:	3301      	adds	r3, #1
 8011afc:	b2da      	uxtb	r2, r3
 8011afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b00:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 8011b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b04:	7b9b      	ldrb	r3, [r3, #14]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d111      	bne.n	8011b2e <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 8011b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b0c:	7b9b      	ldrb	r3, [r3, #14]
 8011b0e:	3b01      	subs	r3, #1
 8011b10:	b2da      	uxtb	r2, r3
 8011b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b14:	739a      	strb	r2, [r3, #14]
              nready = -1;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b1a:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 8011b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 8011b20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011b22:	f00f fa33 	bl	8020f8c <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 8011b26:	4b2e      	ldr	r3, [pc, #184]	; (8011be0 <lwip_select+0x230>)
 8011b28:	2210      	movs	r2, #16
 8011b2a:	601a      	str	r2, [r3, #0]
              break;
 8011b2c:	e016      	b.n	8011b5c <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 8011b2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011b30:	f00f fa2c 	bl	8020f8c <sys_arch_unprotect>
 8011b34:	e00b      	b.n	8011b4e <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 8011b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b3a:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 8011b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 8011b40:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011b42:	f00f fa23 	bl	8020f8c <sys_arch_unprotect>
            set_errno(EBADF);
 8011b46:	4b26      	ldr	r3, [pc, #152]	; (8011be0 <lwip_select+0x230>)
 8011b48:	2209      	movs	r2, #9
 8011b4a:	601a      	str	r2, [r3, #0]
            break;
 8011b4c:	e006      	b.n	8011b5c <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b50:	3301      	adds	r3, #1
 8011b52:	663b      	str	r3, [r7, #96]	; 0x60
 8011b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	db8f      	blt.n	8011a7c <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 8011b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	db3b      	blt.n	8011bda <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b66:	9302      	str	r3, [sp, #8]
 8011b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011b6c:	9301      	str	r3, [sp, #4]
 8011b6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011b72:	9300      	str	r3, [sp, #0]
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	68b9      	ldr	r1, [r7, #8]
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f7ff fdc4 	bl	8011708 <lwip_selscan>
 8011b80:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 8011b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d128      	bne.n	8011bda <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 8011b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d102      	bne.n	8011b94 <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	667b      	str	r3, [r7, #100]	; 0x64
 8011b92:	e01a      	b.n	8011bca <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 8011b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011b9e:	fb03 f202 	mul.w	r2, r3, r2
 8011ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011baa:	490e      	ldr	r1, [pc, #56]	; (8011be4 <lwip_select+0x234>)
 8011bac:	fb81 0103 	smull	r0, r1, r1, r3
 8011bb0:	1189      	asrs	r1, r1, #6
 8011bb2:	17db      	asrs	r3, r3, #31
 8011bb4:	1acb      	subs	r3, r1, r3
 8011bb6:	4413      	add	r3, r2
 8011bb8:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 8011bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	dc02      	bgt.n	8011bc6 <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8011bc4:	e001      	b.n	8011bca <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 8011bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bc8:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8011bca:	f107 0310 	add.w	r3, r7, #16
 8011bce:	3320      	adds	r3, #32
 8011bd0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f00f f901 	bl	8020dda <sys_arch_sem_wait>
 8011bd8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8011bda:	2300      	movs	r3, #0
 8011bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8011bde:	e065      	b.n	8011cac <lwip_select+0x2fc>
 8011be0:	2001b1ec 	.word	0x2001b1ec
 8011be4:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d00d      	beq.n	8011c0a <lwip_select+0x25a>
 8011bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bf0:	095a      	lsrs	r2, r3, #5
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011bfa:	f002 021f 	and.w	r2, r2, #31
 8011bfe:	2101      	movs	r1, #1
 8011c00:	fa01 f202 	lsl.w	r2, r1, r2
 8011c04:	4013      	ands	r3, r2
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d121      	bne.n	8011c4e <lwip_select+0x29e>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00d      	beq.n	8011c2c <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 8011c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c12:	095a      	lsrs	r2, r3, #5
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c1c:	f002 021f 	and.w	r2, r2, #31
 8011c20:	2101      	movs	r1, #1
 8011c22:	fa01 f202 	lsl.w	r2, r1, r2
 8011c26:	4013      	ands	r3, r2
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d110      	bne.n	8011c4e <lwip_select+0x29e>
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d039      	beq.n	8011ca6 <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 8011c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c34:	095a      	lsrs	r2, r3, #5
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c3e:	f002 021f 	and.w	r2, r2, #31
 8011c42:	2101      	movs	r1, #1
 8011c44:	fa01 f202 	lsl.w	r2, r1, r2
 8011c48:	4013      	ands	r3, r2
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d02b      	beq.n	8011ca6 <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 8011c4e:	f00f f98f 	bl	8020f70 <sys_arch_protect>
 8011c52:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 8011c54:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011c56:	f7fe fc96 	bl	8010586 <tryget_socket_unconn_locked>
 8011c5a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 8011c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d018      	beq.n	8011c94 <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 8011c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c64:	7b9b      	ldrb	r3, [r3, #14]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d106      	bne.n	8011c78 <lwip_select+0x2c8>
 8011c6a:	4b39      	ldr	r3, [pc, #228]	; (8011d50 <lwip_select+0x3a0>)
 8011c6c:	f640 023c 	movw	r2, #2108	; 0x83c
 8011c70:	4938      	ldr	r1, [pc, #224]	; (8011d54 <lwip_select+0x3a4>)
 8011c72:	4839      	ldr	r0, [pc, #228]	; (8011d58 <lwip_select+0x3a8>)
 8011c74:	f010 f81a 	bl	8021cac <iprintf>
            if (sock->select_waiting > 0) {
 8011c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7a:	7b9b      	ldrb	r3, [r3, #14]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d005      	beq.n	8011c8c <lwip_select+0x2dc>
              sock->select_waiting--;
 8011c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c82:	7b9b      	ldrb	r3, [r3, #14]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	b2da      	uxtb	r2, r3
 8011c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c8a:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 8011c8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011c8e:	f00f f97d 	bl	8020f8c <sys_arch_unprotect>
 8011c92:	e008      	b.n	8011ca6 <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 8011c94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011c96:	f00f f979 	bl	8020f8c <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 8011c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c9e:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 8011ca0:	4b2e      	ldr	r3, [pc, #184]	; (8011d5c <lwip_select+0x3ac>)
 8011ca2:	2209      	movs	r2, #9
 8011ca4:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8011ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ca8:	3301      	adds	r3, #1
 8011caa:	663b      	str	r3, [r7, #96]	; 0x60
 8011cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	db99      	blt.n	8011be8 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8011cb4:	f107 0310 	add.w	r3, r7, #16
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7ff fcdd 	bl	8011678 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 8011cbe:	f107 0310 	add.w	r3, r7, #16
 8011cc2:	3320      	adds	r3, #32
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f00f f8c6 	bl	8020e56 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 8011cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	da02      	bge.n	8011cd6 <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 8011cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cd4:	e037      	b.n	8011d46 <lwip_select+0x396>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 8011cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cdc:	d011      	beq.n	8011d02 <lwip_select+0x352>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011cde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011ce2:	9302      	str	r3, [sp, #8]
 8011ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011ce8:	9301      	str	r3, [sp, #4]
 8011cea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	68b9      	ldr	r1, [r7, #8]
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f7ff fd06 	bl	8011708 <lwip_selscan>
 8011cfc:	66b8      	str	r0, [r7, #104]	; 0x68
 8011cfe:	e000      	b.n	8011d02 <lwip_select+0x352>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
 8011d00:	bf00      	nop
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d007      	beq.n	8011d18 <lwip_select+0x368>
    *readset = lreadset;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d14:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d007      	beq.n	8011d2e <lwip_select+0x37e>
    *writeset = lwriteset;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	461a      	mov	r2, r3
 8011d22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011d26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d2a:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <lwip_select+0x394>
    *exceptset = lexceptset;
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	461a      	mov	r2, r3
 8011d38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011d3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d40:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 8011d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3770      	adds	r7, #112	; 0x70
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	0802644c 	.word	0x0802644c
 8011d54:	08026788 	.word	0x08026788
 8011d58:	080264a0 	.word	0x080264a0
 8011d5c:	2001b1ec 	.word	0x2001b1ec

08011d60 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b087      	sub	sp, #28
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
 8011d6c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011d6e:	2300      	movs	r3, #0
 8011d70:	617b      	str	r3, [r7, #20]
 8011d72:	e02c      	b.n	8011dce <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	695a      	ldr	r2, [r3, #20]
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	4413      	add	r3, r2
 8011d7e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68ba      	ldr	r2, [r7, #8]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d11e      	bne.n	8011dc8 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d009      	beq.n	8011da4 <lwip_poll_should_wake+0x44>
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	f003 0301 	and.w	r3, r3, #1
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <lwip_poll_should_wake+0x44>
        return 1;
 8011da0:	2301      	movs	r3, #1
 8011da2:	e01a      	b.n	8011dda <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d009      	beq.n	8011dbe <lwip_poll_should_wake+0x5e>
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	f003 0302 	and.w	r3, r3, #2
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <lwip_poll_should_wake+0x5e>
        return 1;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e00d      	b.n	8011dda <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e008      	b.n	8011dda <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	617b      	str	r3, [r7, #20]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	699b      	ldr	r3, [r3, #24]
 8011dd2:	697a      	ldr	r2, [r7, #20]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d3cd      	bcc.n	8011d74 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	371c      	adds	r7, #28
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr
	...

08011de8 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08a      	sub	sp, #40	; 0x28
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	70fb      	strb	r3, [r7, #3]
 8011df4:	4613      	mov	r3, r2
 8011df6:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f000 80a4 	beq.w	8011f48 <event_callback+0x160>
    s = conn->socket;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	699b      	ldr	r3, [r3, #24]
 8011e04:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	da18      	bge.n	8011e3e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8011e0c:	f00f f8b0 	bl	8020f70 <sys_arch_protect>
 8011e10:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	da0b      	bge.n	8011e32 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8011e1a:	78fb      	ldrb	r3, [r7, #3]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d104      	bne.n	8011e2a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	699b      	ldr	r3, [r3, #24]
 8011e24:	1e5a      	subs	r2, r3, #1
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8011e2a:	69f8      	ldr	r0, [r7, #28]
 8011e2c:	f00f f8ae 	bl	8020f8c <sys_arch_unprotect>
        return;
 8011e30:	e08d      	b.n	8011f4e <event_callback+0x166>
      }
      s = conn->socket;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	699b      	ldr	r3, [r3, #24]
 8011e36:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8011e38:	69f8      	ldr	r0, [r7, #28]
 8011e3a:	f00f f8a7 	bl	8020f8c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8011e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e40:	f7fe fbc4 	bl	80105cc <get_socket>
 8011e44:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8011e46:	69bb      	ldr	r3, [r7, #24]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d07f      	beq.n	8011f4c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8011e50:	f00f f88e 	bl	8020f70 <sys_arch_protect>
 8011e54:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8011e56:	78fb      	ldrb	r3, [r7, #3]
 8011e58:	2b04      	cmp	r3, #4
 8011e5a:	d83e      	bhi.n	8011eda <event_callback+0xf2>
 8011e5c:	a201      	add	r2, pc, #4	; (adr r2, 8011e64 <event_callback+0x7c>)
 8011e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e62:	bf00      	nop
 8011e64:	08011e79 	.word	0x08011e79
 8011e68:	08011e9b 	.word	0x08011e9b
 8011e6c:	08011eb3 	.word	0x08011eb3
 8011e70:	08011ec7 	.word	0x08011ec7
 8011e74:	08011ed3 	.word	0x08011ed3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	3301      	adds	r3, #1
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	b21a      	sxth	r2, r3
 8011e86:	69bb      	ldr	r3, [r7, #24]
 8011e88:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	dd2a      	ble.n	8011eea <event_callback+0x102>
        check_waiters = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	623b      	str	r3, [r7, #32]
      }
      break;
 8011e98:	e027      	b.n	8011eea <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8011e9a:	69bb      	ldr	r3, [r7, #24]
 8011e9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	b21a      	sxth	r2, r3
 8011ea8:	69bb      	ldr	r3, [r7, #24]
 8011eaa:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8011eac:	2300      	movs	r3, #0
 8011eae:	623b      	str	r3, [r7, #32]
      break;
 8011eb0:	e01c      	b.n	8011eec <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	895b      	ldrh	r3, [r3, #10]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <event_callback+0xd6>
        check_waiters = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	815a      	strh	r2, [r3, #10]
      break;
 8011ec4:	e012      	b.n	8011eec <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	623b      	str	r3, [r7, #32]
      break;
 8011ed0:	e00c      	b.n	8011eec <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8011ed2:	69bb      	ldr	r3, [r7, #24]
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	819a      	strh	r2, [r3, #12]
      break;
 8011ed8:	e008      	b.n	8011eec <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8011eda:	4b1e      	ldr	r3, [pc, #120]	; (8011f54 <event_callback+0x16c>)
 8011edc:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8011ee0:	491d      	ldr	r1, [pc, #116]	; (8011f58 <event_callback+0x170>)
 8011ee2:	481e      	ldr	r0, [pc, #120]	; (8011f5c <event_callback+0x174>)
 8011ee4:	f00f fee2 	bl	8021cac <iprintf>
      break;
 8011ee8:	e000      	b.n	8011eec <event_callback+0x104>
      break;
 8011eea:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	7b9b      	ldrb	r3, [r3, #14]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d025      	beq.n	8011f40 <event_callback+0x158>
 8011ef4:	6a3b      	ldr	r3, [r7, #32]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d022      	beq.n	8011f40 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8011efa:	69bb      	ldr	r3, [r7, #24]
 8011efc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	bfcc      	ite	gt
 8011f04:	2301      	movgt	r3, #1
 8011f06:	2300      	movle	r3, #0
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	895b      	ldrh	r3, [r3, #10]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	bf14      	ite	ne
 8011f14:	2301      	movne	r3, #1
 8011f16:	2300      	moveq	r3, #0
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	899b      	ldrh	r3, [r3, #12]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	bf14      	ite	ne
 8011f24:	2301      	movne	r3, #1
 8011f26:	2300      	moveq	r3, #0
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8011f2c:	69f8      	ldr	r0, [r7, #28]
 8011f2e:	f00f f82d 	bl	8020f8c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	693a      	ldr	r2, [r7, #16]
 8011f36:	6979      	ldr	r1, [r7, #20]
 8011f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f3a:	f000 f811 	bl	8011f60 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8011f3e:	e006      	b.n	8011f4e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8011f40:	69f8      	ldr	r0, [r7, #28]
 8011f42:	f00f f823 	bl	8020f8c <sys_arch_unprotect>
 8011f46:	e002      	b.n	8011f4e <event_callback+0x166>
    return;
 8011f48:	bf00      	nop
 8011f4a:	e000      	b.n	8011f4e <event_callback+0x166>
      return;
 8011f4c:	bf00      	nop
  }
  done_socket(sock);
}
 8011f4e:	3728      	adds	r7, #40	; 0x28
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0802644c 	.word	0x0802644c
 8011f58:	080267c8 	.word	0x080267c8
 8011f5c:	080264a0 	.word	0x080264a0

08011f60 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af02      	add	r7, sp, #8
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	607a      	str	r2, [r7, #4]
 8011f6c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8011f6e:	4b3e      	ldr	r3, [pc, #248]	; (8012068 <select_check_waiters+0x108>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	617b      	str	r3, [r7, #20]
 8011f74:	e06f      	b.n	8012056 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	69db      	ldr	r3, [r3, #28]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d168      	bne.n	8012050 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	695b      	ldr	r3, [r3, #20]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d009      	beq.n	8011f9e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	68f9      	ldr	r1, [r7, #12]
 8011f94:	6978      	ldr	r0, [r7, #20]
 8011f96:	f7ff fee3 	bl	8011d60 <lwip_poll_should_wake>
 8011f9a:	6138      	str	r0, [r7, #16]
 8011f9c:	e04d      	b.n	801203a <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d014      	beq.n	8011fce <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d010      	beq.n	8011fce <select_check_waiters+0x6e>
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	689b      	ldr	r3, [r3, #8]
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	0952      	lsrs	r2, r2, #5
 8011fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	f002 021f 	and.w	r2, r2, #31
 8011fbe:	2101      	movs	r1, #1
 8011fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d001      	beq.n	8011fce <select_check_waiters+0x6e>
            do_signal = 1;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d017      	beq.n	8012004 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d114      	bne.n	8012004 <select_check_waiters+0xa4>
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d010      	beq.n	8012004 <select_check_waiters+0xa4>
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	0952      	lsrs	r2, r2, #5
 8011fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	f002 021f 	and.w	r2, r2, #31
 8011ff4:	2101      	movs	r1, #1
 8011ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d001      	beq.n	8012004 <select_check_waiters+0xa4>
            do_signal = 1;
 8012000:	2301      	movs	r3, #1
 8012002:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d017      	beq.n	801203a <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d114      	bne.n	801203a <select_check_waiters+0xda>
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	691b      	ldr	r3, [r3, #16]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d010      	beq.n	801203a <select_check_waiters+0xda>
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	691b      	ldr	r3, [r3, #16]
 801201c:	68fa      	ldr	r2, [r7, #12]
 801201e:	0952      	lsrs	r2, r2, #5
 8012020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	f002 021f 	and.w	r2, r2, #31
 801202a:	2101      	movs	r1, #1
 801202c:	fa01 f202 	lsl.w	r2, r1, r2
 8012030:	4013      	ands	r3, r2
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <select_check_waiters+0xda>
            do_signal = 1;
 8012036:	2301      	movs	r3, #1
 8012038:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d007      	beq.n	8012050 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	2201      	movs	r2, #1
 8012044:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	3320      	adds	r3, #32
 801204a:	4618      	mov	r0, r3
 801204c:	f00e fef6 	bl	8020e3c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	617b      	str	r3, [r7, #20]
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d18c      	bne.n	8011f76 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 801205c:	bf00      	nop
 801205e:	bf00      	nop
 8012060:	3718      	adds	r7, #24
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	20013e98 	.word	0x20013e98

0801206c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012076:	f009 fcdf 	bl	801ba38 <sys_timeouts_sleeptime>
 801207a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012082:	d10b      	bne.n	801209c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012084:	4813      	ldr	r0, [pc, #76]	; (80120d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012086:	f00e ff48 	bl	8020f1a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801208a:	2200      	movs	r2, #0
 801208c:	6839      	ldr	r1, [r7, #0]
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f00e fe04 	bl	8020c9c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012094:	480f      	ldr	r0, [pc, #60]	; (80120d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012096:	f00e ff31 	bl	8020efc <sys_mutex_lock>
    return;
 801209a:	e018      	b.n	80120ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d102      	bne.n	80120a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80120a2:	f009 fc8f 	bl	801b9c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80120a6:	e7e6      	b.n	8012076 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80120a8:	480a      	ldr	r0, [pc, #40]	; (80120d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80120aa:	f00e ff36 	bl	8020f1a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80120ae:	68fa      	ldr	r2, [r7, #12]
 80120b0:	6839      	ldr	r1, [r7, #0]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f00e fdf2 	bl	8020c9c <sys_arch_mbox_fetch>
 80120b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80120ba:	4806      	ldr	r0, [pc, #24]	; (80120d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80120bc:	f00e ff1e 	bl	8020efc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120c6:	d102      	bne.n	80120ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80120c8:	f009 fc7c 	bl	801b9c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80120cc:	e7d3      	b.n	8012076 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80120ce:	3710      	adds	r7, #16
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	200177a4 	.word	0x200177a4

080120d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b084      	sub	sp, #16
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80120e0:	4810      	ldr	r0, [pc, #64]	; (8012124 <tcpip_thread+0x4c>)
 80120e2:	f00e ff0b 	bl	8020efc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80120e6:	4b10      	ldr	r3, [pc, #64]	; (8012128 <tcpip_thread+0x50>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d005      	beq.n	80120fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80120ee:	4b0e      	ldr	r3, [pc, #56]	; (8012128 <tcpip_thread+0x50>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4a0e      	ldr	r2, [pc, #56]	; (801212c <tcpip_thread+0x54>)
 80120f4:	6812      	ldr	r2, [r2, #0]
 80120f6:	4610      	mov	r0, r2
 80120f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80120fa:	f107 030c 	add.w	r3, r7, #12
 80120fe:	4619      	mov	r1, r3
 8012100:	480b      	ldr	r0, [pc, #44]	; (8012130 <tcpip_thread+0x58>)
 8012102:	f7ff ffb3 	bl	801206c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d106      	bne.n	801211a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801210c:	4b09      	ldr	r3, [pc, #36]	; (8012134 <tcpip_thread+0x5c>)
 801210e:	2291      	movs	r2, #145	; 0x91
 8012110:	4909      	ldr	r1, [pc, #36]	; (8012138 <tcpip_thread+0x60>)
 8012112:	480a      	ldr	r0, [pc, #40]	; (801213c <tcpip_thread+0x64>)
 8012114:	f00f fdca 	bl	8021cac <iprintf>
      continue;
 8012118:	e003      	b.n	8012122 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	4618      	mov	r0, r3
 801211e:	f000 f80f 	bl	8012140 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012122:	e7ea      	b.n	80120fa <tcpip_thread+0x22>
 8012124:	200177a4 	.word	0x200177a4
 8012128:	20013e9c 	.word	0x20013e9c
 801212c:	20013ea0 	.word	0x20013ea0
 8012130:	20013ea4 	.word	0x20013ea4
 8012134:	0802681c 	.word	0x0802681c
 8012138:	0802684c 	.word	0x0802684c
 801213c:	0802686c 	.word	0x0802686c

08012140 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	2b02      	cmp	r3, #2
 801214e:	d026      	beq.n	801219e <tcpip_thread_handle_msg+0x5e>
 8012150:	2b02      	cmp	r3, #2
 8012152:	dc2b      	bgt.n	80121ac <tcpip_thread_handle_msg+0x6c>
 8012154:	2b00      	cmp	r3, #0
 8012156:	d002      	beq.n	801215e <tcpip_thread_handle_msg+0x1e>
 8012158:	2b01      	cmp	r3, #1
 801215a:	d015      	beq.n	8012188 <tcpip_thread_handle_msg+0x48>
 801215c:	e026      	b.n	80121ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	6850      	ldr	r0, [r2, #4]
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	6892      	ldr	r2, [r2, #8]
 801216a:	4611      	mov	r1, r2
 801216c:	4798      	blx	r3
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d004      	beq.n	801217e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	4618      	mov	r0, r3
 801217a:	f002 fcef 	bl	8014b5c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801217e:	6879      	ldr	r1, [r7, #4]
 8012180:	2009      	movs	r0, #9
 8012182:	f001 fe09 	bl	8013d98 <memp_free>
      break;
 8012186:	e018      	b.n	80121ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	6892      	ldr	r2, [r2, #8]
 8012190:	4610      	mov	r0, r2
 8012192:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012194:	6879      	ldr	r1, [r7, #4]
 8012196:	2008      	movs	r0, #8
 8012198:	f001 fdfe 	bl	8013d98 <memp_free>
      break;
 801219c:	e00d      	b.n	80121ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	6892      	ldr	r2, [r2, #8]
 80121a6:	4610      	mov	r0, r2
 80121a8:	4798      	blx	r3
      break;
 80121aa:	e006      	b.n	80121ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80121ac:	4b05      	ldr	r3, [pc, #20]	; (80121c4 <tcpip_thread_handle_msg+0x84>)
 80121ae:	22cf      	movs	r2, #207	; 0xcf
 80121b0:	4905      	ldr	r1, [pc, #20]	; (80121c8 <tcpip_thread_handle_msg+0x88>)
 80121b2:	4806      	ldr	r0, [pc, #24]	; (80121cc <tcpip_thread_handle_msg+0x8c>)
 80121b4:	f00f fd7a 	bl	8021cac <iprintf>
      break;
 80121b8:	bf00      	nop
  }
}
 80121ba:	bf00      	nop
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	0802681c 	.word	0x0802681c
 80121c8:	0802684c 	.word	0x0802684c
 80121cc:	0802686c 	.word	0x0802686c

080121d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80121dc:	481a      	ldr	r0, [pc, #104]	; (8012248 <tcpip_inpkt+0x78>)
 80121de:	f00e fdb8 	bl	8020d52 <sys_mbox_valid>
 80121e2:	4603      	mov	r3, r0
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d105      	bne.n	80121f4 <tcpip_inpkt+0x24>
 80121e8:	4b18      	ldr	r3, [pc, #96]	; (801224c <tcpip_inpkt+0x7c>)
 80121ea:	22fc      	movs	r2, #252	; 0xfc
 80121ec:	4918      	ldr	r1, [pc, #96]	; (8012250 <tcpip_inpkt+0x80>)
 80121ee:	4819      	ldr	r0, [pc, #100]	; (8012254 <tcpip_inpkt+0x84>)
 80121f0:	f00f fd5c 	bl	8021cac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80121f4:	2009      	movs	r0, #9
 80121f6:	f001 fd7d 	bl	8013cf4 <memp_malloc>
 80121fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d102      	bne.n	8012208 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012206:	e01a      	b.n	801223e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2200      	movs	r2, #0
 801220c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012220:	6979      	ldr	r1, [r7, #20]
 8012222:	4809      	ldr	r0, [pc, #36]	; (8012248 <tcpip_inpkt+0x78>)
 8012224:	f00e fd20 	bl	8020c68 <sys_mbox_trypost>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d006      	beq.n	801223c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801222e:	6979      	ldr	r1, [r7, #20]
 8012230:	2009      	movs	r0, #9
 8012232:	f001 fdb1 	bl	8013d98 <memp_free>
    return ERR_MEM;
 8012236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801223a:	e000      	b.n	801223e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801223c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801223e:	4618      	mov	r0, r3
 8012240:	3718      	adds	r7, #24
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20013ea4 	.word	0x20013ea4
 801224c:	0802681c 	.word	0x0802681c
 8012250:	08026894 	.word	0x08026894
 8012254:	0802686c 	.word	0x0802686c

08012258 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012268:	f003 0318 	and.w	r3, r3, #24
 801226c:	2b00      	cmp	r3, #0
 801226e:	d006      	beq.n	801227e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012270:	4a08      	ldr	r2, [pc, #32]	; (8012294 <tcpip_input+0x3c>)
 8012272:	6839      	ldr	r1, [r7, #0]
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f7ff ffab 	bl	80121d0 <tcpip_inpkt>
 801227a:	4603      	mov	r3, r0
 801227c:	e005      	b.n	801228a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801227e:	4a06      	ldr	r2, [pc, #24]	; (8012298 <tcpip_input+0x40>)
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7ff ffa4 	bl	80121d0 <tcpip_inpkt>
 8012288:	4603      	mov	r3, r0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	08020a5d 	.word	0x08020a5d
 8012298:	0801f6e1 	.word	0x0801f6e1

0801229c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80122a6:	4819      	ldr	r0, [pc, #100]	; (801230c <tcpip_try_callback+0x70>)
 80122a8:	f00e fd53 	bl	8020d52 <sys_mbox_valid>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d106      	bne.n	80122c0 <tcpip_try_callback+0x24>
 80122b2:	4b17      	ldr	r3, [pc, #92]	; (8012310 <tcpip_try_callback+0x74>)
 80122b4:	f240 125d 	movw	r2, #349	; 0x15d
 80122b8:	4916      	ldr	r1, [pc, #88]	; (8012314 <tcpip_try_callback+0x78>)
 80122ba:	4817      	ldr	r0, [pc, #92]	; (8012318 <tcpip_try_callback+0x7c>)
 80122bc:	f00f fcf6 	bl	8021cac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80122c0:	2008      	movs	r0, #8
 80122c2:	f001 fd17 	bl	8013cf4 <memp_malloc>
 80122c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d102      	bne.n	80122d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80122ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122d2:	e017      	b.n	8012304 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2201      	movs	r2, #1
 80122d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80122e6:	68f9      	ldr	r1, [r7, #12]
 80122e8:	4808      	ldr	r0, [pc, #32]	; (801230c <tcpip_try_callback+0x70>)
 80122ea:	f00e fcbd 	bl	8020c68 <sys_mbox_trypost>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d006      	beq.n	8012302 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80122f4:	68f9      	ldr	r1, [r7, #12]
 80122f6:	2008      	movs	r0, #8
 80122f8:	f001 fd4e 	bl	8013d98 <memp_free>
    return ERR_MEM;
 80122fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012300:	e000      	b.n	8012304 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	20013ea4 	.word	0x20013ea4
 8012310:	0802681c 	.word	0x0802681c
 8012314:	08026894 	.word	0x08026894
 8012318:	0802686c 	.word	0x0802686c

0801231c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012328:	4806      	ldr	r0, [pc, #24]	; (8012344 <tcpip_send_msg_wait_sem+0x28>)
 801232a:	f00e fde7 	bl	8020efc <sys_mutex_lock>
  fn(apimsg);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	68b8      	ldr	r0, [r7, #8]
 8012332:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012334:	4803      	ldr	r0, [pc, #12]	; (8012344 <tcpip_send_msg_wait_sem+0x28>)
 8012336:	f00e fdf0 	bl	8020f1a <sys_mutex_unlock>
  return ERR_OK;
 801233a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801233c:	4618      	mov	r0, r3
 801233e:	3710      	adds	r7, #16
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	200177a4 	.word	0x200177a4

08012348 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af02      	add	r7, sp, #8
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012352:	f001 f845 	bl	80133e0 <lwip_init>

  tcpip_init_done = initfunc;
 8012356:	4a17      	ldr	r2, [pc, #92]	; (80123b4 <tcpip_init+0x6c>)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801235c:	4a16      	ldr	r2, [pc, #88]	; (80123b8 <tcpip_init+0x70>)
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012362:	2106      	movs	r1, #6
 8012364:	4815      	ldr	r0, [pc, #84]	; (80123bc <tcpip_init+0x74>)
 8012366:	f00e fc4f 	bl	8020c08 <sys_mbox_new>
 801236a:	4603      	mov	r3, r0
 801236c:	2b00      	cmp	r3, #0
 801236e:	d006      	beq.n	801237e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012370:	4b13      	ldr	r3, [pc, #76]	; (80123c0 <tcpip_init+0x78>)
 8012372:	f240 2261 	movw	r2, #609	; 0x261
 8012376:	4913      	ldr	r1, [pc, #76]	; (80123c4 <tcpip_init+0x7c>)
 8012378:	4813      	ldr	r0, [pc, #76]	; (80123c8 <tcpip_init+0x80>)
 801237a:	f00f fc97 	bl	8021cac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801237e:	4813      	ldr	r0, [pc, #76]	; (80123cc <tcpip_init+0x84>)
 8012380:	f00e fda2 	bl	8020ec8 <sys_mutex_new>
 8012384:	4603      	mov	r3, r0
 8012386:	2b00      	cmp	r3, #0
 8012388:	d006      	beq.n	8012398 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801238a:	4b0d      	ldr	r3, [pc, #52]	; (80123c0 <tcpip_init+0x78>)
 801238c:	f240 2265 	movw	r2, #613	; 0x265
 8012390:	490f      	ldr	r1, [pc, #60]	; (80123d0 <tcpip_init+0x88>)
 8012392:	480d      	ldr	r0, [pc, #52]	; (80123c8 <tcpip_init+0x80>)
 8012394:	f00f fc8a 	bl	8021cac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012398:	2300      	movs	r3, #0
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123a0:	2200      	movs	r2, #0
 80123a2:	490c      	ldr	r1, [pc, #48]	; (80123d4 <tcpip_init+0x8c>)
 80123a4:	480c      	ldr	r0, [pc, #48]	; (80123d8 <tcpip_init+0x90>)
 80123a6:	f00e fdc5 	bl	8020f34 <sys_thread_new>
}
 80123aa:	bf00      	nop
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	20013e9c 	.word	0x20013e9c
 80123b8:	20013ea0 	.word	0x20013ea0
 80123bc:	20013ea4 	.word	0x20013ea4
 80123c0:	0802681c 	.word	0x0802681c
 80123c4:	080268a4 	.word	0x080268a4
 80123c8:	0802686c 	.word	0x0802686c
 80123cc:	200177a4 	.word	0x200177a4
 80123d0:	080268c8 	.word	0x080268c8
 80123d4:	080120d9 	.word	0x080120d9
 80123d8:	080268ec 	.word	0x080268ec

080123dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	4603      	mov	r3, r0
 80123e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80123e6:	88fb      	ldrh	r3, [r7, #6]
 80123e8:	021b      	lsls	r3, r3, #8
 80123ea:	b21a      	sxth	r2, r3
 80123ec:	88fb      	ldrh	r3, [r7, #6]
 80123ee:	0a1b      	lsrs	r3, r3, #8
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	b21b      	sxth	r3, r3
 80123f4:	4313      	orrs	r3, r2
 80123f6:	b21b      	sxth	r3, r3
 80123f8:	b29b      	uxth	r3, r3
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012406:	b480      	push	{r7}
 8012408:	b083      	sub	sp, #12
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	061a      	lsls	r2, r3, #24
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	021b      	lsls	r3, r3, #8
 8012416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801241a:	431a      	orrs	r2, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	0a1b      	lsrs	r3, r3, #8
 8012420:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012424:	431a      	orrs	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	0e1b      	lsrs	r3, r3, #24
 801242a:	4313      	orrs	r3, r2
}
 801242c:	4618      	mov	r0, r3
 801242e:	370c      	adds	r7, #12
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8012438:	b480      	push	{r7}
 801243a:	b087      	sub	sp, #28
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	1c5a      	adds	r2, r3, #1
 8012448:	60fa      	str	r2, [r7, #12]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	1c5a      	adds	r2, r3, #1
 8012452:	60ba      	str	r2, [r7, #8]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 8012458:	7dfa      	ldrb	r2, [r7, #23]
 801245a:	7dbb      	ldrb	r3, [r7, #22]
 801245c:	429a      	cmp	r2, r3
 801245e:	d016      	beq.n	801248e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8012460:	7dfb      	ldrb	r3, [r7, #23]
 8012462:	f043 0320 	orr.w	r3, r3, #32
 8012466:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8012468:	7d7b      	ldrb	r3, [r7, #21]
 801246a:	2b60      	cmp	r3, #96	; 0x60
 801246c:	d90c      	bls.n	8012488 <lwip_strnicmp+0x50>
 801246e:	7d7b      	ldrb	r3, [r7, #21]
 8012470:	2b7a      	cmp	r3, #122	; 0x7a
 8012472:	d809      	bhi.n	8012488 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8012474:	7dbb      	ldrb	r3, [r7, #22]
 8012476:	f043 0320 	orr.w	r3, r3, #32
 801247a:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 801247c:	7d7a      	ldrb	r2, [r7, #21]
 801247e:	7d3b      	ldrb	r3, [r7, #20]
 8012480:	429a      	cmp	r2, r3
 8012482:	d003      	beq.n	801248c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8012484:	2301      	movs	r3, #1
 8012486:	e00c      	b.n	80124a2 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8012488:	2301      	movs	r3, #1
 801248a:	e00a      	b.n	80124a2 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801248c:	bf00      	nop
      }
    }
    len--;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	3b01      	subs	r3, #1
 8012492:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d002      	beq.n	80124a0 <lwip_strnicmp+0x68>
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1d1      	bne.n	8012444 <lwip_strnicmp+0xc>
  return 0;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	371c      	adds	r7, #28
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80124ae:	b480      	push	{r7}
 80124b0:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80124b2:	bf00      	nop
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	4603      	mov	r3, r0
 80124c4:	6039      	str	r1, [r7, #0]
 80124c6:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 80124c8:	79fb      	ldrb	r3, [r7, #7]
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d80f      	bhi.n	80124ee <dns_setserver+0x32>
    if (dnsserver != NULL) {
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d006      	beq.n	80124e2 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 80124d4:	79fb      	ldrb	r3, [r7, #7]
 80124d6:	4909      	ldr	r1, [pc, #36]	; (80124fc <dns_setserver+0x40>)
 80124d8:	683a      	ldr	r2, [r7, #0]
 80124da:	6812      	ldr	r2, [r2, #0]
 80124dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 80124e0:	e005      	b.n	80124ee <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 80124e2:	79fb      	ldrb	r3, [r7, #7]
 80124e4:	4905      	ldr	r1, [pc, #20]	; (80124fc <dns_setserver+0x40>)
 80124e6:	4a06      	ldr	r2, [pc, #24]	; (8012500 <dns_setserver+0x44>)
 80124e8:	6812      	ldr	r2, [r2, #0]
 80124ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80124ee:	bf00      	nop
 80124f0:	370c      	adds	r7, #12
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop
 80124fc:	2001432c 	.word	0x2001432c
 8012500:	08029ae8 	.word	0x08029ae8

08012504 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8012508:	f000 fc54 	bl	8012db4 <dns_check_entries>
}
 801250c:	bf00      	nop
 801250e:	bd80      	pop	{r7, pc}

08012510 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801251a:	2300      	movs	r3, #0
 801251c:	73fb      	strb	r3, [r7, #15]
 801251e:	e02e      	b.n	801257e <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8012520:	7bfa      	ldrb	r2, [r7, #15]
 8012522:	491b      	ldr	r1, [pc, #108]	; (8012590 <dns_lookup+0x80>)
 8012524:	4613      	mov	r3, r2
 8012526:	011b      	lsls	r3, r3, #4
 8012528:	4413      	add	r3, r2
 801252a:	011b      	lsls	r3, r3, #4
 801252c:	440b      	add	r3, r1
 801252e:	330a      	adds	r3, #10
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b03      	cmp	r3, #3
 8012534:	d120      	bne.n	8012578 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8012536:	7bfa      	ldrb	r2, [r7, #15]
 8012538:	4613      	mov	r3, r2
 801253a:	011b      	lsls	r3, r3, #4
 801253c:	4413      	add	r3, r2
 801253e:	011b      	lsls	r3, r3, #4
 8012540:	3310      	adds	r3, #16
 8012542:	4a13      	ldr	r2, [pc, #76]	; (8012590 <dns_lookup+0x80>)
 8012544:	4413      	add	r3, r2
 8012546:	f44f 7280 	mov.w	r2, #256	; 0x100
 801254a:	4619      	mov	r1, r3
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ff ff73 	bl	8012438 <lwip_strnicmp>
 8012552:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8012554:	2b00      	cmp	r3, #0
 8012556:	d10f      	bne.n	8012578 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00a      	beq.n	8012574 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801255e:	7bfa      	ldrb	r2, [r7, #15]
 8012560:	490b      	ldr	r1, [pc, #44]	; (8012590 <dns_lookup+0x80>)
 8012562:	4613      	mov	r3, r2
 8012564:	011b      	lsls	r3, r3, #4
 8012566:	4413      	add	r3, r2
 8012568:	011b      	lsls	r3, r3, #4
 801256a:	440b      	add	r3, r1
 801256c:	3304      	adds	r3, #4
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	e007      	b.n	8012588 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012578:	7bfb      	ldrb	r3, [r7, #15]
 801257a:	3301      	adds	r3, #1
 801257c:	73fb      	strb	r3, [r7, #15]
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	2b03      	cmp	r3, #3
 8012582:	d9cd      	bls.n	8012520 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8012584:	f06f 030f 	mvn.w	r3, #15
}
 8012588:	4618      	mov	r0, r3
 801258a:	3710      	adds	r7, #16
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	20013ebc 	.word	0x20013ebc

08012594 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b088      	sub	sp, #32
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	4613      	mov	r3, r2
 80125a0:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 80125a2:	88fb      	ldrh	r3, [r7, #6]
 80125a4:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 80125a6:	8b7b      	ldrh	r3, [r7, #26]
 80125a8:	4619      	mov	r1, r3
 80125aa:	68b8      	ldr	r0, [r7, #8]
 80125ac:	f002 feb8 	bl	8015320 <pbuf_try_get_at>
 80125b0:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	db04      	blt.n	80125c2 <dns_compare_name+0x2e>
 80125b8:	8b7b      	ldrh	r3, [r7, #26]
 80125ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125be:	4293      	cmp	r3, r2
 80125c0:	d102      	bne.n	80125c8 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 80125c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125c6:	e06c      	b.n	80126a2 <dns_compare_name+0x10e>
    }
    response_offset++;
 80125c8:	8b7b      	ldrh	r3, [r7, #26]
 80125ca:	3301      	adds	r3, #1
 80125cc:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80125d4:	2bc0      	cmp	r3, #192	; 0xc0
 80125d6:	d144      	bne.n	8012662 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 80125d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125dc:	e061      	b.n	80126a2 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 80125de:	8b7b      	ldrh	r3, [r7, #26]
 80125e0:	4619      	mov	r1, r3
 80125e2:	68b8      	ldr	r0, [r7, #8]
 80125e4:	f002 fe9c 	bl	8015320 <pbuf_try_get_at>
 80125e8:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	da02      	bge.n	80125f6 <dns_compare_name+0x62>
          return 0xFFFF;
 80125f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125f4:	e055      	b.n	80126a2 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	74fb      	strb	r3, [r7, #19]
 80125fc:	7cfb      	ldrb	r3, [r7, #19]
 80125fe:	3301      	adds	r3, #1
 8012600:	4a2a      	ldr	r2, [pc, #168]	; (80126ac <dns_compare_name+0x118>)
 8012602:	4413      	add	r3, r2
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	f003 0303 	and.w	r3, r3, #3
 801260a:	2b01      	cmp	r3, #1
 801260c:	d103      	bne.n	8012616 <dns_compare_name+0x82>
 801260e:	7cfb      	ldrb	r3, [r7, #19]
 8012610:	f103 0220 	add.w	r2, r3, #32
 8012614:	e000      	b.n	8012618 <dns_compare_name+0x84>
 8012616:	7cfa      	ldrb	r2, [r7, #19]
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	74bb      	strb	r3, [r7, #18]
 801261c:	7cbb      	ldrb	r3, [r7, #18]
 801261e:	3301      	adds	r3, #1
 8012620:	4922      	ldr	r1, [pc, #136]	; (80126ac <dns_compare_name+0x118>)
 8012622:	440b      	add	r3, r1
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	f003 0303 	and.w	r3, r3, #3
 801262a:	2b01      	cmp	r3, #1
 801262c:	d102      	bne.n	8012634 <dns_compare_name+0xa0>
 801262e:	7cbb      	ldrb	r3, [r7, #18]
 8012630:	3320      	adds	r3, #32
 8012632:	e000      	b.n	8012636 <dns_compare_name+0xa2>
 8012634:	7cbb      	ldrb	r3, [r7, #18]
 8012636:	429a      	cmp	r2, r3
 8012638:	d002      	beq.n	8012640 <dns_compare_name+0xac>
          return 0xFFFF;
 801263a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801263e:	e030      	b.n	80126a2 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 8012640:	8b7b      	ldrh	r3, [r7, #26]
 8012642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012646:	4293      	cmp	r3, r2
 8012648:	d102      	bne.n	8012650 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 801264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801264e:	e028      	b.n	80126a2 <dns_compare_name+0x10e>
        }
        response_offset++;
 8012650:	8b7b      	ldrh	r3, [r7, #26]
 8012652:	3301      	adds	r3, #1
 8012654:	837b      	strh	r3, [r7, #26]
        ++query;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	3301      	adds	r3, #1
 801265a:	60fb      	str	r3, [r7, #12]
        --n;
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	3b01      	subs	r3, #1
 8012660:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8012662:	69fb      	ldr	r3, [r7, #28]
 8012664:	2b00      	cmp	r3, #0
 8012666:	dcba      	bgt.n	80125de <dns_compare_name+0x4a>
      }
      ++query;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	3301      	adds	r3, #1
 801266c:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 801266e:	8b7b      	ldrh	r3, [r7, #26]
 8012670:	4619      	mov	r1, r3
 8012672:	68b8      	ldr	r0, [r7, #8]
 8012674:	f002 fe54 	bl	8015320 <pbuf_try_get_at>
 8012678:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	2b00      	cmp	r3, #0
 801267e:	da02      	bge.n	8012686 <dns_compare_name+0xf2>
      return 0xFFFF;
 8012680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012684:	e00d      	b.n	80126a2 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d18c      	bne.n	80125a6 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 801268c:	8b7b      	ldrh	r3, [r7, #26]
 801268e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012692:	4293      	cmp	r3, r2
 8012694:	d102      	bne.n	801269c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 8012696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801269a:	e002      	b.n	80126a2 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 801269c:	8b7b      	ldrh	r3, [r7, #26]
 801269e:	3301      	adds	r3, #1
 80126a0:	b29b      	uxth	r3, r3
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3720      	adds	r7, #32
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	08029b04 	.word	0x08029b04

080126b0 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	460b      	mov	r3, r1
 80126ba:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 80126bc:	887b      	ldrh	r3, [r7, #2]
 80126be:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 80126c0:	89fb      	ldrh	r3, [r7, #14]
 80126c2:	1c5a      	adds	r2, r3, #1
 80126c4:	81fa      	strh	r2, [r7, #14]
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f002 fe29 	bl	8015320 <pbuf_try_get_at>
 80126ce:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	db02      	blt.n	80126dc <dns_skip_name+0x2c>
 80126d6:	89fb      	ldrh	r3, [r7, #14]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <dns_skip_name+0x32>
      return 0xFFFF;
 80126dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126e0:	e02f      	b.n	8012742 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80126e8:	2bc0      	cmp	r3, #192	; 0xc0
 80126ea:	d01e      	beq.n	801272a <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 80126ec:	89fa      	ldrh	r2, [r7, #14]
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	4413      	add	r3, r2
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	8912      	ldrh	r2, [r2, #8]
 80126f6:	4293      	cmp	r3, r2
 80126f8:	db02      	blt.n	8012700 <dns_skip_name+0x50>
        return 0xFFFF;
 80126fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126fe:	e020      	b.n	8012742 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	b29a      	uxth	r2, r3
 8012704:	89fb      	ldrh	r3, [r7, #14]
 8012706:	4413      	add	r3, r2
 8012708:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 801270a:	89fb      	ldrh	r3, [r7, #14]
 801270c:	4619      	mov	r1, r3
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f002 fe06 	bl	8015320 <pbuf_try_get_at>
 8012714:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	2b00      	cmp	r3, #0
 801271a:	da02      	bge.n	8012722 <dns_skip_name+0x72>
      return 0xFFFF;
 801271c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012720:	e00f      	b.n	8012742 <dns_skip_name+0x92>
    }
  } while (n != 0);
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1cb      	bne.n	80126c0 <dns_skip_name+0x10>
 8012728:	e000      	b.n	801272c <dns_skip_name+0x7c>
      break;
 801272a:	bf00      	nop

  if (offset == 0xFFFF) {
 801272c:	89fb      	ldrh	r3, [r7, #14]
 801272e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012732:	4293      	cmp	r3, r2
 8012734:	d102      	bne.n	801273c <dns_skip_name+0x8c>
    return 0xFFFF;
 8012736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801273a:	e002      	b.n	8012742 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 801273c:	89fb      	ldrh	r3, [r7, #14]
 801273e:	3301      	adds	r3, #1
 8012740:	b29b      	uxth	r3, r3
}
 8012742:	4618      	mov	r0, r3
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
	...

0801274c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b090      	sub	sp, #64	; 0x40
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8012756:	79fa      	ldrb	r2, [r7, #7]
 8012758:	4613      	mov	r3, r2
 801275a:	011b      	lsls	r3, r3, #4
 801275c:	4413      	add	r3, r2
 801275e:	011b      	lsls	r3, r3, #4
 8012760:	4a6c      	ldr	r2, [pc, #432]	; (8012914 <dns_send+0x1c8>)
 8012762:	4413      	add	r3, r2
 8012764:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	7adb      	ldrb	r3, [r3, #11]
 801276a:	2b01      	cmp	r3, #1
 801276c:	d906      	bls.n	801277c <dns_send+0x30>
 801276e:	4b6a      	ldr	r3, [pc, #424]	; (8012918 <dns_send+0x1cc>)
 8012770:	f240 22fa 	movw	r2, #762	; 0x2fa
 8012774:	4969      	ldr	r1, [pc, #420]	; (801291c <dns_send+0x1d0>)
 8012776:	486a      	ldr	r0, [pc, #424]	; (8012920 <dns_send+0x1d4>)
 8012778:	f00f fa98 	bl	8021cac <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	7adb      	ldrb	r3, [r3, #11]
 8012780:	461a      	mov	r2, r3
 8012782:	4b68      	ldr	r3, [pc, #416]	; (8012924 <dns_send+0x1d8>)
 8012784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d109      	bne.n	80127a0 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 801278c:	79fb      	ldrb	r3, [r7, #7]
 801278e:	2100      	movs	r1, #0
 8012790:	4618      	mov	r0, r3
 8012792:	f000 f959 	bl	8012a48 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8012796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012798:	2200      	movs	r2, #0
 801279a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801279c:	2300      	movs	r3, #0
 801279e:	e0b4      	b.n	801290a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80127a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a2:	3310      	adds	r3, #16
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7ed fd1d 	bl	80001e4 <strlen>
 80127aa:	4603      	mov	r3, r0
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	3312      	adds	r3, #18
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127b6:	4619      	mov	r1, r3
 80127b8:	2036      	movs	r0, #54	; 0x36
 80127ba:	f001 feb9 	bl	8014530 <pbuf_alloc>
 80127be:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	f000 8095 	beq.w	80128f2 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80127c8:	f107 0310 	add.w	r3, r7, #16
 80127cc:	220c      	movs	r2, #12
 80127ce:	2100      	movs	r1, #0
 80127d0:	4618      	mov	r0, r3
 80127d2:	f00e fd4f 	bl	8021274 <memset>
    hdr.id = lwip_htons(entry->txid);
 80127d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d8:	891b      	ldrh	r3, [r3, #8]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff fdfe 	bl	80123dc <lwip_htons>
 80127e0:	4603      	mov	r3, r0
 80127e2:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80127e4:	2301      	movs	r3, #1
 80127e6:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80127e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127ec:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80127ee:	f107 0310 	add.w	r3, r7, #16
 80127f2:	220c      	movs	r2, #12
 80127f4:	4619      	mov	r1, r3
 80127f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127f8:	f002 fc64 	bl	80150c4 <pbuf_take>
    hostname = entry->name;
 80127fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127fe:	3310      	adds	r3, #16
 8012800:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8012802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012804:	3b01      	subs	r3, #1
 8012806:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8012808:	230c      	movs	r3, #12
 801280a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 801280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280e:	3301      	adds	r3, #1
 8012810:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8012812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012814:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012816:	2300      	movs	r3, #0
 8012818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801281c:	e007      	b.n	801282e <dns_send+0xe2>
        ++n;
 801281e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012822:	3301      	adds	r3, #1
 8012824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282a:	3301      	adds	r3, #1
 801282c:	63bb      	str	r3, [r7, #56]	; 0x38
 801282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	2b2e      	cmp	r3, #46	; 0x2e
 8012834:	d003      	beq.n	801283e <dns_send+0xf2>
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1ef      	bne.n	801281e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 801283e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012842:	1ad3      	subs	r3, r2, r3
 8012844:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8012846:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801284c:	4413      	add	r3, r2
 801284e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012852:	4293      	cmp	r3, r2
 8012854:	dc53      	bgt.n	80128fe <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8012856:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801285a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801285c:	4619      	mov	r1, r3
 801285e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012860:	f002 fd80 	bl	8015364 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8012864:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012866:	3301      	adds	r3, #1
 8012868:	b29b      	uxth	r3, r3
 801286a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801286e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012870:	f002 fcba 	bl	80151e8 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8012874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012878:	b29a      	uxth	r2, r3
 801287a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801287c:	4413      	add	r3, r2
 801287e:	b29b      	uxth	r3, r3
 8012880:	3301      	adds	r3, #1
 8012882:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1bf      	bne.n	801280c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 801288c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801288e:	2200      	movs	r2, #0
 8012890:	4619      	mov	r1, r3
 8012892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012894:	f002 fd66 	bl	8015364 <pbuf_put_at>
    query_idx++;
 8012898:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801289a:	3301      	adds	r3, #1
 801289c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801289e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a2:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80128a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a8:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80128aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80128ac:	f107 010c 	add.w	r1, r7, #12
 80128b0:	2204      	movs	r2, #4
 80128b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128b4:	f002 fc98 	bl	80151e8 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80128b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ba:	7bdb      	ldrb	r3, [r3, #15]
 80128bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80128c0:	2335      	movs	r3, #53	; 0x35
 80128c2:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 80128c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c6:	7adb      	ldrb	r3, [r3, #11]
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	4a16      	ldr	r2, [pc, #88]	; (8012924 <dns_send+0x1d8>)
 80128cc:	4413      	add	r3, r2
 80128ce:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80128d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80128d4:	4a14      	ldr	r2, [pc, #80]	; (8012928 <dns_send+0x1dc>)
 80128d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80128da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128dc:	69fa      	ldr	r2, [r7, #28]
 80128de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128e0:	f009 fad8 	bl	801be94 <udp_sendto>
 80128e4:	4603      	mov	r3, r0
 80128e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 80128ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128ec:	f002 f936 	bl	8014b5c <pbuf_free>
 80128f0:	e002      	b.n	80128f8 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 80128f2:	23ff      	movs	r3, #255	; 0xff
 80128f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 80128f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80128fc:	e005      	b.n	801290a <dns_send+0x1be>
        goto overflow_return;
 80128fe:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8012900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012902:	f002 f92b 	bl	8014b5c <pbuf_free>
  return ERR_VAL;
 8012906:	f06f 0305 	mvn.w	r3, #5
}
 801290a:	4618      	mov	r0, r3
 801290c:	3740      	adds	r7, #64	; 0x40
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	20013ebc 	.word	0x20013ebc
 8012918:	080268fc 	.word	0x080268fc
 801291c:	0802692c 	.word	0x0802692c
 8012920:	08026944 	.word	0x08026944
 8012924:	2001432c 	.word	0x2001432c
 8012928:	20013ea8 	.word	0x20013ea8

0801292c <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8012932:	202e      	movs	r0, #46	; 0x2e
 8012934:	f009 fdfb 	bl	801c52e <udp_new_ip_type>
 8012938:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	e026      	b.n	8012992 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 8012944:	f00f fa40 	bl	8021dc8 <rand>
 8012948:	4603      	mov	r3, r0
 801294a:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 801294c:	88fb      	ldrh	r3, [r7, #6]
 801294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012952:	d308      	bcc.n	8012966 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8012954:	88fb      	ldrh	r3, [r7, #6]
 8012956:	461a      	mov	r2, r3
 8012958:	4910      	ldr	r1, [pc, #64]	; (801299c <dns_alloc_random_port+0x70>)
 801295a:	68b8      	ldr	r0, [r7, #8]
 801295c:	f009 fc50 	bl	801c200 <udp_bind>
 8012960:	4603      	mov	r3, r0
 8012962:	73fb      	strb	r3, [r7, #15]
 8012964:	e001      	b.n	801296a <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 8012966:	23f8      	movs	r3, #248	; 0xf8
 8012968:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 801296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801296e:	f113 0f08 	cmn.w	r3, #8
 8012972:	d0e7      	beq.n	8012944 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 8012974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d004      	beq.n	8012986 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 801297c:	68b8      	ldr	r0, [r7, #8]
 801297e:	f009 fd7d 	bl	801c47c <udp_remove>
    return NULL;
 8012982:	2300      	movs	r3, #0
 8012984:	e005      	b.n	8012992 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 8012986:	2200      	movs	r2, #0
 8012988:	4905      	ldr	r1, [pc, #20]	; (80129a0 <dns_alloc_random_port+0x74>)
 801298a:	68b8      	ldr	r0, [r7, #8]
 801298c:	f009 fd56 	bl	801c43c <udp_recv>
  return pcb;
 8012990:	68bb      	ldr	r3, [r7, #8]
}
 8012992:	4618      	mov	r0, r3
 8012994:	3710      	adds	r7, #16
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	08029ae8 	.word	0x08029ae8
 80129a0:	08012e4d 	.word	0x08012e4d

080129a4 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 80129a4:	b590      	push	{r4, r7, lr}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80129aa:	2300      	movs	r3, #0
 80129ac:	71fb      	strb	r3, [r7, #7]
 80129ae:	e008      	b.n	80129c2 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 80129b0:	79fb      	ldrb	r3, [r7, #7]
 80129b2:	4a23      	ldr	r2, [pc, #140]	; (8012a40 <dns_alloc_pcb+0x9c>)
 80129b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d006      	beq.n	80129ca <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 80129bc:	79fb      	ldrb	r3, [r7, #7]
 80129be:	3301      	adds	r3, #1
 80129c0:	71fb      	strb	r3, [r7, #7]
 80129c2:	79fb      	ldrb	r3, [r7, #7]
 80129c4:	2b03      	cmp	r3, #3
 80129c6:	d9f3      	bls.n	80129b0 <dns_alloc_pcb+0xc>
 80129c8:	e000      	b.n	80129cc <dns_alloc_pcb+0x28>
      break;
 80129ca:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 80129cc:	79fb      	ldrb	r3, [r7, #7]
 80129ce:	2b03      	cmp	r3, #3
 80129d0:	d811      	bhi.n	80129f6 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 80129d2:	79fc      	ldrb	r4, [r7, #7]
 80129d4:	f7ff ffaa 	bl	801292c <dns_alloc_random_port>
 80129d8:	4603      	mov	r3, r0
 80129da:	4a19      	ldr	r2, [pc, #100]	; (8012a40 <dns_alloc_pcb+0x9c>)
 80129dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80129e0:	79fb      	ldrb	r3, [r7, #7]
 80129e2:	4a17      	ldr	r2, [pc, #92]	; (8012a40 <dns_alloc_pcb+0x9c>)
 80129e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d004      	beq.n	80129f6 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 80129ec:	4a15      	ldr	r2, [pc, #84]	; (8012a44 <dns_alloc_pcb+0xa0>)
 80129ee:	79fb      	ldrb	r3, [r7, #7]
 80129f0:	7013      	strb	r3, [r2, #0]
      return i;
 80129f2:	79fb      	ldrb	r3, [r7, #7]
 80129f4:	e020      	b.n	8012a38 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80129f6:	2300      	movs	r3, #0
 80129f8:	71fb      	strb	r3, [r7, #7]
 80129fa:	4b12      	ldr	r3, [pc, #72]	; (8012a44 <dns_alloc_pcb+0xa0>)
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	3301      	adds	r3, #1
 8012a00:	71bb      	strb	r3, [r7, #6]
 8012a02:	e015      	b.n	8012a30 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8012a04:	79bb      	ldrb	r3, [r7, #6]
 8012a06:	2b03      	cmp	r3, #3
 8012a08:	d901      	bls.n	8012a0e <dns_alloc_pcb+0x6a>
      idx = 0;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 8012a0e:	79bb      	ldrb	r3, [r7, #6]
 8012a10:	4a0b      	ldr	r2, [pc, #44]	; (8012a40 <dns_alloc_pcb+0x9c>)
 8012a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d004      	beq.n	8012a24 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 8012a1a:	4a0a      	ldr	r2, [pc, #40]	; (8012a44 <dns_alloc_pcb+0xa0>)
 8012a1c:	79bb      	ldrb	r3, [r7, #6]
 8012a1e:	7013      	strb	r3, [r2, #0]
      return idx;
 8012a20:	79bb      	ldrb	r3, [r7, #6]
 8012a22:	e009      	b.n	8012a38 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8012a24:	79fb      	ldrb	r3, [r7, #7]
 8012a26:	3301      	adds	r3, #1
 8012a28:	71fb      	strb	r3, [r7, #7]
 8012a2a:	79bb      	ldrb	r3, [r7, #6]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	71bb      	strb	r3, [r7, #6]
 8012a30:	79fb      	ldrb	r3, [r7, #7]
 8012a32:	2b03      	cmp	r3, #3
 8012a34:	d9e6      	bls.n	8012a04 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 8012a36:	2304      	movs	r3, #4
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd90      	pop	{r4, r7, pc}
 8012a40:	20013ea8 	.word	0x20013ea8
 8012a44:	20013eb8 	.word	0x20013eb8

08012a48 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8012a48:	b590      	push	{r4, r7, lr}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	4603      	mov	r3, r0
 8012a50:	6039      	str	r1, [r7, #0]
 8012a52:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012a54:	2300      	movs	r3, #0
 8012a56:	73fb      	strb	r3, [r7, #15]
 8012a58:	e03d      	b.n	8012ad6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8012a5a:	7bfa      	ldrb	r2, [r7, #15]
 8012a5c:	4957      	ldr	r1, [pc, #348]	; (8012bbc <dns_call_found+0x174>)
 8012a5e:	4613      	mov	r3, r2
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	4413      	add	r3, r2
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	440b      	add	r3, r1
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d030      	beq.n	8012ad0 <dns_call_found+0x88>
 8012a6e:	7bfa      	ldrb	r2, [r7, #15]
 8012a70:	4952      	ldr	r1, [pc, #328]	; (8012bbc <dns_call_found+0x174>)
 8012a72:	4613      	mov	r3, r2
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	4413      	add	r3, r2
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	440b      	add	r3, r1
 8012a7c:	3308      	adds	r3, #8
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	79fa      	ldrb	r2, [r7, #7]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d124      	bne.n	8012ad0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8012a86:	7bfa      	ldrb	r2, [r7, #15]
 8012a88:	494c      	ldr	r1, [pc, #304]	; (8012bbc <dns_call_found+0x174>)
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	440b      	add	r3, r1
 8012a94:	681c      	ldr	r4, [r3, #0]
 8012a96:	79fa      	ldrb	r2, [r7, #7]
 8012a98:	4613      	mov	r3, r2
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	4413      	add	r3, r2
 8012a9e:	011b      	lsls	r3, r3, #4
 8012aa0:	3310      	adds	r3, #16
 8012aa2:	4a47      	ldr	r2, [pc, #284]	; (8012bc0 <dns_call_found+0x178>)
 8012aa4:	1898      	adds	r0, r3, r2
 8012aa6:	7bfa      	ldrb	r2, [r7, #15]
 8012aa8:	4944      	ldr	r1, [pc, #272]	; (8012bbc <dns_call_found+0x174>)
 8012aaa:	4613      	mov	r3, r2
 8012aac:	005b      	lsls	r3, r3, #1
 8012aae:	4413      	add	r3, r2
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	440b      	add	r3, r1
 8012ab4:	3304      	adds	r3, #4
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	461a      	mov	r2, r3
 8012aba:	6839      	ldr	r1, [r7, #0]
 8012abc:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8012abe:	7bfa      	ldrb	r2, [r7, #15]
 8012ac0:	493e      	ldr	r1, [pc, #248]	; (8012bbc <dns_call_found+0x174>)
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	4413      	add	r3, r2
 8012ac8:	009b      	lsls	r3, r3, #2
 8012aca:	440b      	add	r3, r1
 8012acc:	2200      	movs	r2, #0
 8012ace:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012ad0:	7bfb      	ldrb	r3, [r7, #15]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	73fb      	strb	r3, [r7, #15]
 8012ad6:	7bfb      	ldrb	r3, [r7, #15]
 8012ad8:	2b03      	cmp	r3, #3
 8012ada:	d9be      	bls.n	8012a5a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012adc:	2300      	movs	r3, #0
 8012ade:	73fb      	strb	r3, [r7, #15]
 8012ae0:	e031      	b.n	8012b46 <dns_call_found+0xfe>
    if (i == idx) {
 8012ae2:	7bfa      	ldrb	r2, [r7, #15]
 8012ae4:	79fb      	ldrb	r3, [r7, #7]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d029      	beq.n	8012b3e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8012aea:	7bfa      	ldrb	r2, [r7, #15]
 8012aec:	4934      	ldr	r1, [pc, #208]	; (8012bc0 <dns_call_found+0x178>)
 8012aee:	4613      	mov	r3, r2
 8012af0:	011b      	lsls	r3, r3, #4
 8012af2:	4413      	add	r3, r2
 8012af4:	011b      	lsls	r3, r3, #4
 8012af6:	440b      	add	r3, r1
 8012af8:	330a      	adds	r3, #10
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	2b02      	cmp	r3, #2
 8012afe:	d11f      	bne.n	8012b40 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8012b00:	7bfa      	ldrb	r2, [r7, #15]
 8012b02:	492f      	ldr	r1, [pc, #188]	; (8012bc0 <dns_call_found+0x178>)
 8012b04:	4613      	mov	r3, r2
 8012b06:	011b      	lsls	r3, r3, #4
 8012b08:	4413      	add	r3, r2
 8012b0a:	011b      	lsls	r3, r3, #4
 8012b0c:	440b      	add	r3, r1
 8012b0e:	330f      	adds	r3, #15
 8012b10:	7819      	ldrb	r1, [r3, #0]
 8012b12:	79fa      	ldrb	r2, [r7, #7]
 8012b14:	482a      	ldr	r0, [pc, #168]	; (8012bc0 <dns_call_found+0x178>)
 8012b16:	4613      	mov	r3, r2
 8012b18:	011b      	lsls	r3, r3, #4
 8012b1a:	4413      	add	r3, r2
 8012b1c:	011b      	lsls	r3, r3, #4
 8012b1e:	4403      	add	r3, r0
 8012b20:	330f      	adds	r3, #15
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	4299      	cmp	r1, r3
 8012b26:	d10b      	bne.n	8012b40 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012b28:	79fa      	ldrb	r2, [r7, #7]
 8012b2a:	4925      	ldr	r1, [pc, #148]	; (8012bc0 <dns_call_found+0x178>)
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	011b      	lsls	r3, r3, #4
 8012b30:	4413      	add	r3, r2
 8012b32:	011b      	lsls	r3, r3, #4
 8012b34:	440b      	add	r3, r1
 8012b36:	330f      	adds	r3, #15
 8012b38:	2204      	movs	r2, #4
 8012b3a:	701a      	strb	r2, [r3, #0]
        break;
 8012b3c:	e006      	b.n	8012b4c <dns_call_found+0x104>
      continue; /* only check other requests */
 8012b3e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012b40:	7bfb      	ldrb	r3, [r7, #15]
 8012b42:	3301      	adds	r3, #1
 8012b44:	73fb      	strb	r3, [r7, #15]
 8012b46:	7bfb      	ldrb	r3, [r7, #15]
 8012b48:	2b03      	cmp	r3, #3
 8012b4a:	d9ca      	bls.n	8012ae2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8012b4c:	79fa      	ldrb	r2, [r7, #7]
 8012b4e:	491c      	ldr	r1, [pc, #112]	; (8012bc0 <dns_call_found+0x178>)
 8012b50:	4613      	mov	r3, r2
 8012b52:	011b      	lsls	r3, r3, #4
 8012b54:	4413      	add	r3, r2
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	440b      	add	r3, r1
 8012b5a:	330f      	adds	r3, #15
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	2b03      	cmp	r3, #3
 8012b60:	d827      	bhi.n	8012bb2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8012b62:	79fa      	ldrb	r2, [r7, #7]
 8012b64:	4916      	ldr	r1, [pc, #88]	; (8012bc0 <dns_call_found+0x178>)
 8012b66:	4613      	mov	r3, r2
 8012b68:	011b      	lsls	r3, r3, #4
 8012b6a:	4413      	add	r3, r2
 8012b6c:	011b      	lsls	r3, r3, #4
 8012b6e:	440b      	add	r3, r1
 8012b70:	330f      	adds	r3, #15
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	461a      	mov	r2, r3
 8012b76:	4b13      	ldr	r3, [pc, #76]	; (8012bc4 <dns_call_found+0x17c>)
 8012b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f009 fc7d 	bl	801c47c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8012b82:	79fa      	ldrb	r2, [r7, #7]
 8012b84:	490e      	ldr	r1, [pc, #56]	; (8012bc0 <dns_call_found+0x178>)
 8012b86:	4613      	mov	r3, r2
 8012b88:	011b      	lsls	r3, r3, #4
 8012b8a:	4413      	add	r3, r2
 8012b8c:	011b      	lsls	r3, r3, #4
 8012b8e:	440b      	add	r3, r1
 8012b90:	330f      	adds	r3, #15
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	4619      	mov	r1, r3
 8012b96:	4b0b      	ldr	r3, [pc, #44]	; (8012bc4 <dns_call_found+0x17c>)
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012b9e:	79fa      	ldrb	r2, [r7, #7]
 8012ba0:	4907      	ldr	r1, [pc, #28]	; (8012bc0 <dns_call_found+0x178>)
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	011b      	lsls	r3, r3, #4
 8012ba6:	4413      	add	r3, r2
 8012ba8:	011b      	lsls	r3, r3, #4
 8012baa:	440b      	add	r3, r1
 8012bac:	330f      	adds	r3, #15
 8012bae:	2204      	movs	r2, #4
 8012bb0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8012bb2:	bf00      	nop
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd90      	pop	{r4, r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	200142fc 	.word	0x200142fc
 8012bc0:	20013ebc 	.word	0x20013ebc
 8012bc4:	20013ea8 	.word	0x20013ea8

08012bc8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8012bce:	f00f f8fb 	bl	8021dc8 <rand>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	71fb      	strb	r3, [r7, #7]
 8012bda:	e01a      	b.n	8012c12 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012bdc:	79fa      	ldrb	r2, [r7, #7]
 8012bde:	4911      	ldr	r1, [pc, #68]	; (8012c24 <dns_create_txid+0x5c>)
 8012be0:	4613      	mov	r3, r2
 8012be2:	011b      	lsls	r3, r3, #4
 8012be4:	4413      	add	r3, r2
 8012be6:	011b      	lsls	r3, r3, #4
 8012be8:	440b      	add	r3, r1
 8012bea:	330a      	adds	r3, #10
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	2b02      	cmp	r3, #2
 8012bf0:	d10c      	bne.n	8012c0c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8012bf2:	79fa      	ldrb	r2, [r7, #7]
 8012bf4:	490b      	ldr	r1, [pc, #44]	; (8012c24 <dns_create_txid+0x5c>)
 8012bf6:	4613      	mov	r3, r2
 8012bf8:	011b      	lsls	r3, r3, #4
 8012bfa:	4413      	add	r3, r2
 8012bfc:	011b      	lsls	r3, r3, #4
 8012bfe:	440b      	add	r3, r1
 8012c00:	3308      	adds	r3, #8
 8012c02:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012c04:	88ba      	ldrh	r2, [r7, #4]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d100      	bne.n	8012c0c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8012c0a:	e7e0      	b.n	8012bce <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012c0c:	79fb      	ldrb	r3, [r7, #7]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	71fb      	strb	r3, [r7, #7]
 8012c12:	79fb      	ldrb	r3, [r7, #7]
 8012c14:	2b03      	cmp	r3, #3
 8012c16:	d9e1      	bls.n	8012bdc <dns_create_txid+0x14>
    }
  }

  return txid;
 8012c18:	88bb      	ldrh	r3, [r7, #4]
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	20013ebc 	.word	0x20013ebc

08012c28 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b085      	sub	sp, #20
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8012c30:	2300      	movs	r3, #0
 8012c32:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00d      	beq.n	8012c56 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	7adb      	ldrb	r3, [r3, #11]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d109      	bne.n	8012c56 <dns_backupserver_available+0x2e>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	7adb      	ldrb	r3, [r3, #11]
 8012c46:	3301      	adds	r3, #1
 8012c48:	4a06      	ldr	r2, [pc, #24]	; (8012c64 <dns_backupserver_available+0x3c>)
 8012c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <dns_backupserver_available+0x2e>
      ret = 1;
 8012c52:	2301      	movs	r3, #1
 8012c54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3714      	adds	r7, #20
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	2001432c 	.word	0x2001432c

08012c68 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8012c72:	79fa      	ldrb	r2, [r7, #7]
 8012c74:	4613      	mov	r3, r2
 8012c76:	011b      	lsls	r3, r3, #4
 8012c78:	4413      	add	r3, r2
 8012c7a:	011b      	lsls	r3, r3, #4
 8012c7c:	4a48      	ldr	r2, [pc, #288]	; (8012da0 <dns_check_entry+0x138>)
 8012c7e:	4413      	add	r3, r2
 8012c80:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8012c82:	79fb      	ldrb	r3, [r7, #7]
 8012c84:	2b03      	cmp	r3, #3
 8012c86:	d906      	bls.n	8012c96 <dns_check_entry+0x2e>
 8012c88:	4b46      	ldr	r3, [pc, #280]	; (8012da4 <dns_check_entry+0x13c>)
 8012c8a:	f240 421c 	movw	r2, #1052	; 0x41c
 8012c8e:	4946      	ldr	r1, [pc, #280]	; (8012da8 <dns_check_entry+0x140>)
 8012c90:	4846      	ldr	r0, [pc, #280]	; (8012dac <dns_check_entry+0x144>)
 8012c92:	f00f f80b 	bl	8021cac <iprintf>

  switch (entry->state) {
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	7a9b      	ldrb	r3, [r3, #10]
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	d86f      	bhi.n	8012d7e <dns_check_entry+0x116>
 8012c9e:	a201      	add	r2, pc, #4	; (adr r2, 8012ca4 <dns_check_entry+0x3c>)
 8012ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca4:	08012d8f 	.word	0x08012d8f
 8012ca8:	08012cb5 	.word	0x08012cb5
 8012cac:	08012ce7 	.word	0x08012ce7
 8012cb0:	08012d5d 	.word	0x08012d5d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8012cb4:	f7ff ff88 	bl	8012bc8 <dns_create_txid>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	461a      	mov	r2, r3
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2202      	movs	r2, #2
 8012cc4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	2201      	movs	r2, #1
 8012cd0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8012cd8:	79fb      	ldrb	r3, [r7, #7]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff fd36 	bl	801274c <dns_send>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8012ce4:	e058      	b.n	8012d98 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	7b1b      	ldrb	r3, [r3, #12]
 8012cea:	3b01      	subs	r3, #1
 8012cec:	b2da      	uxtb	r2, r3
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	731a      	strb	r2, [r3, #12]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	7b1b      	ldrb	r3, [r3, #12]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d14b      	bne.n	8012d92 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	7b5b      	ldrb	r3, [r3, #13]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	735a      	strb	r2, [r3, #13]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	7b5b      	ldrb	r3, [r3, #13]
 8012d0a:	2b04      	cmp	r3, #4
 8012d0c:	d11b      	bne.n	8012d46 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8012d0e:	68f8      	ldr	r0, [r7, #12]
 8012d10:	f7ff ff8a 	bl	8012c28 <dns_backupserver_available>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d00c      	beq.n	8012d34 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	7adb      	ldrb	r3, [r3, #11]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	b2da      	uxtb	r2, r3
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2201      	movs	r2, #1
 8012d2a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	735a      	strb	r2, [r3, #13]
 8012d32:	e00c      	b.n	8012d4e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8012d34:	79fb      	ldrb	r3, [r7, #7]
 8012d36:	2100      	movs	r1, #0
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7ff fe85 	bl	8012a48 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2200      	movs	r2, #0
 8012d42:	729a      	strb	r2, [r3, #10]
            break;
 8012d44:	e028      	b.n	8012d98 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	7b5a      	ldrb	r2, [r3, #13]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8012d4e:	79fb      	ldrb	r3, [r7, #7]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7ff fcfb 	bl	801274c <dns_send>
 8012d56:	4603      	mov	r3, r0
 8012d58:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8012d5a:	e01a      	b.n	8012d92 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d008      	beq.n	8012d76 <dns_check_entry+0x10e>
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	1e5a      	subs	r2, r3, #1
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d10f      	bne.n	8012d96 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	729a      	strb	r2, [r3, #10]
      }
      break;
 8012d7c:	e00b      	b.n	8012d96 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8012d7e:	4b09      	ldr	r3, [pc, #36]	; (8012da4 <dns_check_entry+0x13c>)
 8012d80:	f240 425b 	movw	r2, #1115	; 0x45b
 8012d84:	490a      	ldr	r1, [pc, #40]	; (8012db0 <dns_check_entry+0x148>)
 8012d86:	4809      	ldr	r0, [pc, #36]	; (8012dac <dns_check_entry+0x144>)
 8012d88:	f00e ff90 	bl	8021cac <iprintf>
      break;
 8012d8c:	e004      	b.n	8012d98 <dns_check_entry+0x130>
      break;
 8012d8e:	bf00      	nop
 8012d90:	e002      	b.n	8012d98 <dns_check_entry+0x130>
      break;
 8012d92:	bf00      	nop
 8012d94:	e000      	b.n	8012d98 <dns_check_entry+0x130>
      break;
 8012d96:	bf00      	nop
  }
}
 8012d98:	bf00      	nop
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20013ebc 	.word	0x20013ebc
 8012da4:	080268fc 	.word	0x080268fc
 8012da8:	0802696c 	.word	0x0802696c
 8012dac:	08026944 	.word	0x08026944
 8012db0:	08026988 	.word	0x08026988

08012db4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012dba:	2300      	movs	r3, #0
 8012dbc:	71fb      	strb	r3, [r7, #7]
 8012dbe:	e006      	b.n	8012dce <dns_check_entries+0x1a>
    dns_check_entry(i);
 8012dc0:	79fb      	ldrb	r3, [r7, #7]
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7ff ff50 	bl	8012c68 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012dc8:	79fb      	ldrb	r3, [r7, #7]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	71fb      	strb	r3, [r7, #7]
 8012dce:	79fb      	ldrb	r3, [r7, #7]
 8012dd0:	2b03      	cmp	r3, #3
 8012dd2:	d9f5      	bls.n	8012dc0 <dns_check_entries+0xc>
  }
}
 8012dd4:	bf00      	nop
 8012dd6:	bf00      	nop
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
	...

08012de0 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	4603      	mov	r3, r0
 8012de8:	6039      	str	r1, [r7, #0]
 8012dea:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 8012dec:	79fa      	ldrb	r2, [r7, #7]
 8012dee:	4613      	mov	r3, r2
 8012df0:	011b      	lsls	r3, r3, #4
 8012df2:	4413      	add	r3, r2
 8012df4:	011b      	lsls	r3, r3, #4
 8012df6:	4a13      	ldr	r2, [pc, #76]	; (8012e44 <dns_correct_response+0x64>)
 8012df8:	4413      	add	r3, r2
 8012dfa:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2203      	movs	r2, #3
 8012e00:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	683a      	ldr	r2, [r7, #0]
 8012e06:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4a0e      	ldr	r2, [pc, #56]	; (8012e48 <dns_correct_response+0x68>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d902      	bls.n	8012e18 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	4a0c      	ldr	r2, [pc, #48]	; (8012e48 <dns_correct_response+0x68>)
 8012e16:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	1d1a      	adds	r2, r3, #4
 8012e1c:	79fb      	ldrb	r3, [r7, #7]
 8012e1e:	4611      	mov	r1, r2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7ff fe11 	bl	8012a48 <dns_call_found>

  if (entry->ttl == 0) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d106      	bne.n	8012e3c <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	7a9b      	ldrb	r3, [r3, #10]
 8012e32:	2b03      	cmp	r3, #3
 8012e34:	d102      	bne.n	8012e3c <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	729a      	strb	r2, [r3, #10]
    }
  }
}
 8012e3c:	bf00      	nop
 8012e3e:	3710      	adds	r7, #16
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	20013ebc 	.word	0x20013ebc
 8012e48:	00093a80 	.word	0x00093a80

08012e4c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012e4c:	b590      	push	{r4, r7, lr}
 8012e4e:	b091      	sub	sp, #68	; 0x44
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
 8012e58:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	891b      	ldrh	r3, [r3, #8]
 8012e5e:	2b0f      	cmp	r3, #15
 8012e60:	f240 811e 	bls.w	80130a0 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8012e64:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012e68:	2300      	movs	r3, #0
 8012e6a:	220c      	movs	r2, #12
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f002 f87b 	bl	8014f68 <pbuf_copy_partial>
 8012e72:	4603      	mov	r3, r0
 8012e74:	2b0c      	cmp	r3, #12
 8012e76:	f040 8115 	bne.w	80130a4 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 8012e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff faad 	bl	80123dc <lwip_htons>
 8012e82:	4603      	mov	r3, r0
 8012e84:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012e86:	2300      	movs	r3, #0
 8012e88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8012e8c:	e102      	b.n	8013094 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 8012e8e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8012e92:	4613      	mov	r3, r2
 8012e94:	011b      	lsls	r3, r3, #4
 8012e96:	4413      	add	r3, r2
 8012e98:	011b      	lsls	r3, r3, #4
 8012e9a:	4a92      	ldr	r2, [pc, #584]	; (80130e4 <dns_recv+0x298>)
 8012e9c:	4413      	add	r3, r2
 8012e9e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 8012ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ea2:	7a9b      	ldrb	r3, [r3, #10]
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	f040 80f0 	bne.w	801308a <dns_recv+0x23e>
          (entry->txid == txid)) {
 8012eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eac:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 8012eae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	f040 80ea 	bne.w	801308a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 8012eb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff fa8f 	bl	80123dc <lwip_htons>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8012ec2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7ff fa89 	bl	80123dc <lwip_htons>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8012ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ed2:	b25b      	sxtb	r3, r3
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	f280 80e7 	bge.w	80130a8 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 8012eda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	f040 80e5 	bne.w	80130ac <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee8:	7adb      	ldrb	r3, [r3, #11]
 8012eea:	4619      	mov	r1, r3
 8012eec:	4b7e      	ldr	r3, [pc, #504]	; (80130e8 <dns_recv+0x29c>)
 8012eee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	f040 80dc 	bne.w	80130b0 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8012ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efa:	3310      	adds	r3, #16
 8012efc:	220c      	movs	r2, #12
 8012efe:	6879      	ldr	r1, [r7, #4]
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7ff fb47 	bl	8012594 <dns_compare_name>
 8012f06:	4603      	mov	r3, r0
 8012f08:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 8012f0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f10:	4293      	cmp	r3, r2
 8012f12:	f000 80cf 	beq.w	80130b4 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8012f16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f18:	f107 0114 	add.w	r1, r7, #20
 8012f1c:	2204      	movs	r2, #4
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f002 f822 	bl	8014f68 <pbuf_copy_partial>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b04      	cmp	r3, #4
 8012f28:	f040 80c6 	bne.w	80130b8 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8012f2c:	8afb      	ldrh	r3, [r7, #22]
 8012f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f32:	f040 80c3 	bne.w	80130bc <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 8012f36:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8012f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f3c:	f040 80be 	bne.w	80130bc <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8012f40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f42:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8012f46:	4293      	cmp	r3, r2
 8012f48:	f200 80ba 	bhi.w	80130c0 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8012f4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f4e:	3304      	adds	r3, #4
 8012f50:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8012f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f56:	f003 030f 	and.w	r3, r3, #15
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d078      	beq.n	8013050 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 8012f5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012f60:	f7ff fe62 	bl	8012c28 <dns_backupserver_available>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d07a      	beq.n	8013060 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 8012f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f6c:	2203      	movs	r2, #3
 8012f6e:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 8012f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f72:	2201      	movs	r2, #1
 8012f74:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 8012f76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7ff fe74 	bl	8012c68 <dns_check_entry>

            goto ignore_packet;
 8012f80:	e0a9      	b.n	80130d6 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 8012f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f84:	4619      	mov	r1, r3
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7ff fb92 	bl	80126b0 <dns_skip_name>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 8012f90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f96:	4293      	cmp	r3, r2
 8012f98:	f000 8094 	beq.w	80130c4 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8012f9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f9e:	f107 0118 	add.w	r1, r7, #24
 8012fa2:	220a      	movs	r2, #10
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f001 ffdf 	bl	8014f68 <pbuf_copy_partial>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b0a      	cmp	r3, #10
 8012fae:	f040 808b 	bne.w	80130c8 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8012fb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fb4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	f200 8087 	bhi.w	80130cc <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8012fbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fc0:	330a      	adds	r3, #10
 8012fc2:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8012fc4:	8b7b      	ldrh	r3, [r7, #26]
 8012fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fca:	d12b      	bne.n	8013024 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8012fcc:	8b3b      	ldrh	r3, [r7, #24]
 8012fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fd2:	d127      	bne.n	8013024 <dns_recv+0x1d8>
 8012fd4:	8c3b      	ldrh	r3, [r7, #32]
 8012fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fda:	d123      	bne.n	8013024 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8012fdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012fde:	f107 0110 	add.w	r1, r7, #16
 8012fe2:	2204      	movs	r2, #4
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f001 ffbf 	bl	8014f68 <pbuf_copy_partial>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b04      	cmp	r3, #4
 8012fee:	d16f      	bne.n	80130d0 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8012ff0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8012ff4:	6939      	ldr	r1, [r7, #16]
 8012ff6:	483b      	ldr	r0, [pc, #236]	; (80130e4 <dns_recv+0x298>)
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	011b      	lsls	r3, r3, #4
 8012ffc:	4413      	add	r3, r2
 8012ffe:	011b      	lsls	r3, r3, #4
 8013000:	4403      	add	r3, r0
 8013002:	3304      	adds	r3, #4
 8013004:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f001 fda8 	bl	8014b5c <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff f9f9 	bl	8012406 <lwip_htonl>
 8013014:	4602      	mov	r2, r0
 8013016:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801301a:	4611      	mov	r1, r2
 801301c:	4618      	mov	r0, r3
 801301e:	f7ff fedf 	bl	8012de0 <dns_correct_response>
 8013022:	e05c      	b.n	80130de <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8013024:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8013026:	8c3b      	ldrh	r3, [r7, #32]
 8013028:	4618      	mov	r0, r3
 801302a:	f7ff f9d7 	bl	80123dc <lwip_htons>
 801302e:	4603      	mov	r3, r0
 8013030:	4423      	add	r3, r4
 8013032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013036:	da4d      	bge.n	80130d4 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8013038:	8c3b      	ldrh	r3, [r7, #32]
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff f9ce 	bl	80123dc <lwip_htons>
 8013040:	4603      	mov	r3, r0
 8013042:	461a      	mov	r2, r3
 8013044:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013046:	4413      	add	r3, r2
 8013048:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 801304a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801304c:	3b01      	subs	r3, #1
 801304e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8013050:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013052:	2b00      	cmp	r3, #0
 8013054:	d004      	beq.n	8013060 <dns_recv+0x214>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801305c:	429a      	cmp	r2, r3
 801305e:	d390      	bcc.n	8012f82 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f001 fd7b 	bl	8014b5c <pbuf_free>
        dns_call_found(i, NULL);
 8013066:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801306a:	2100      	movs	r1, #0
 801306c:	4618      	mov	r0, r3
 801306e:	f7ff fceb 	bl	8012a48 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8013072:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8013076:	491b      	ldr	r1, [pc, #108]	; (80130e4 <dns_recv+0x298>)
 8013078:	4613      	mov	r3, r2
 801307a:	011b      	lsls	r3, r3, #4
 801307c:	4413      	add	r3, r2
 801307e:	011b      	lsls	r3, r3, #4
 8013080:	440b      	add	r3, r1
 8013082:	330a      	adds	r3, #10
 8013084:	2200      	movs	r2, #0
 8013086:	701a      	strb	r2, [r3, #0]
        return;
 8013088:	e029      	b.n	80130de <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801308a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801308e:	3301      	adds	r3, #1
 8013090:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8013094:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013098:	2b03      	cmp	r3, #3
 801309a:	f67f aef8 	bls.w	8012e8e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 801309e:	e001      	b.n	80130a4 <dns_recv+0x258>
    goto ignore_packet;
 80130a0:	bf00      	nop
 80130a2:	e018      	b.n	80130d6 <dns_recv+0x28a>
ignore_packet:
 80130a4:	bf00      	nop
 80130a6:	e016      	b.n	80130d6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 80130a8:	bf00      	nop
 80130aa:	e014      	b.n	80130d6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 80130ac:	bf00      	nop
 80130ae:	e012      	b.n	80130d6 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 80130b0:	bf00      	nop
 80130b2:	e010      	b.n	80130d6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 80130b4:	bf00      	nop
 80130b6:	e00e      	b.n	80130d6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 80130b8:	bf00      	nop
 80130ba:	e00c      	b.n	80130d6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 80130bc:	bf00      	nop
 80130be:	e00a      	b.n	80130d6 <dns_recv+0x28a>
          goto ignore_packet;
 80130c0:	bf00      	nop
 80130c2:	e008      	b.n	80130d6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 80130c4:	bf00      	nop
 80130c6:	e006      	b.n	80130d6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 80130c8:	bf00      	nop
 80130ca:	e004      	b.n	80130d6 <dns_recv+0x28a>
              goto ignore_packet;
 80130cc:	bf00      	nop
 80130ce:	e002      	b.n	80130d6 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 80130d0:	bf00      	nop
 80130d2:	e000      	b.n	80130d6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 80130d4:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f001 fd40 	bl	8014b5c <pbuf_free>
  return;
 80130dc:	bf00      	nop
}
 80130de:	3744      	adds	r7, #68	; 0x44
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd90      	pop	{r4, r7, pc}
 80130e4:	20013ebc 	.word	0x20013ebc
 80130e8:	2001432c 	.word	0x2001432c

080130ec <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08a      	sub	sp, #40	; 0x28
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
 80130f8:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80130fe:	2300      	movs	r3, #0
 8013100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013104:	e056      	b.n	80131b4 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8013106:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801310a:	4990      	ldr	r1, [pc, #576]	; (801334c <dns_enqueue+0x260>)
 801310c:	4613      	mov	r3, r2
 801310e:	011b      	lsls	r3, r3, #4
 8013110:	4413      	add	r3, r2
 8013112:	011b      	lsls	r3, r3, #4
 8013114:	440b      	add	r3, r1
 8013116:	330a      	adds	r3, #10
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b02      	cmp	r3, #2
 801311c:	d145      	bne.n	80131aa <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 801311e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013122:	4613      	mov	r3, r2
 8013124:	011b      	lsls	r3, r3, #4
 8013126:	4413      	add	r3, r2
 8013128:	011b      	lsls	r3, r3, #4
 801312a:	3310      	adds	r3, #16
 801312c:	4a87      	ldr	r2, [pc, #540]	; (801334c <dns_enqueue+0x260>)
 801312e:	4413      	add	r3, r2
 8013130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013134:	4619      	mov	r1, r3
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f7ff f97e 	bl	8012438 <lwip_strnicmp>
 801313c:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801313e:	2b00      	cmp	r3, #0
 8013140:	d133      	bne.n	80131aa <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013142:	2300      	movs	r3, #0
 8013144:	76fb      	strb	r3, [r7, #27]
 8013146:	e02d      	b.n	80131a4 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 8013148:	7efa      	ldrb	r2, [r7, #27]
 801314a:	4981      	ldr	r1, [pc, #516]	; (8013350 <dns_enqueue+0x264>)
 801314c:	4613      	mov	r3, r2
 801314e:	005b      	lsls	r3, r3, #1
 8013150:	4413      	add	r3, r2
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	440b      	add	r3, r1
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d120      	bne.n	801319e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 801315c:	7efa      	ldrb	r2, [r7, #27]
 801315e:	497c      	ldr	r1, [pc, #496]	; (8013350 <dns_enqueue+0x264>)
 8013160:	4613      	mov	r3, r2
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	4413      	add	r3, r2
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	440b      	add	r3, r1
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 801316e:	7efa      	ldrb	r2, [r7, #27]
 8013170:	4977      	ldr	r1, [pc, #476]	; (8013350 <dns_enqueue+0x264>)
 8013172:	4613      	mov	r3, r2
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	440b      	add	r3, r1
 801317c:	3304      	adds	r3, #4
 801317e:	683a      	ldr	r2, [r7, #0]
 8013180:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 8013182:	7efa      	ldrb	r2, [r7, #27]
 8013184:	4972      	ldr	r1, [pc, #456]	; (8013350 <dns_enqueue+0x264>)
 8013186:	4613      	mov	r3, r2
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4413      	add	r3, r2
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	440b      	add	r3, r1
 8013190:	3308      	adds	r3, #8
 8013192:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013196:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 8013198:	f06f 0304 	mvn.w	r3, #4
 801319c:	e0d1      	b.n	8013342 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801319e:	7efb      	ldrb	r3, [r7, #27]
 80131a0:	3301      	adds	r3, #1
 80131a2:	76fb      	strb	r3, [r7, #27]
 80131a4:	7efb      	ldrb	r3, [r7, #27]
 80131a6:	2b03      	cmp	r3, #3
 80131a8:	d9ce      	bls.n	8013148 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80131aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131ae:	3301      	adds	r3, #1
 80131b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131b8:	2b03      	cmp	r3, #3
 80131ba:	d9a4      	bls.n	8013106 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 80131bc:	2300      	movs	r3, #0
 80131be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 80131c2:	2304      	movs	r3, #4
 80131c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80131c8:	2300      	movs	r3, #0
 80131ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80131ce:	e027      	b.n	8013220 <dns_enqueue+0x134>
    entry = &dns_table[i];
 80131d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80131d4:	4613      	mov	r3, r2
 80131d6:	011b      	lsls	r3, r3, #4
 80131d8:	4413      	add	r3, r2
 80131da:	011b      	lsls	r3, r3, #4
 80131dc:	4a5b      	ldr	r2, [pc, #364]	; (801334c <dns_enqueue+0x260>)
 80131de:	4413      	add	r3, r2
 80131e0:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 80131e2:	6a3b      	ldr	r3, [r7, #32]
 80131e4:	7a9b      	ldrb	r3, [r3, #10]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d01f      	beq.n	801322a <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	7a9b      	ldrb	r3, [r3, #10]
 80131ee:	2b03      	cmp	r3, #3
 80131f0:	d111      	bne.n	8013216 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80131f2:	4b58      	ldr	r3, [pc, #352]	; (8013354 <dns_enqueue+0x268>)
 80131f4:	781a      	ldrb	r2, [r3, #0]
 80131f6:	6a3b      	ldr	r3, [r7, #32]
 80131f8:	7b9b      	ldrb	r3, [r3, #14]
 80131fa:	1ad3      	subs	r3, r2, r3
 80131fc:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 80131fe:	7eba      	ldrb	r2, [r7, #26]
 8013200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013204:	429a      	cmp	r2, r3
 8013206:	d906      	bls.n	8013216 <dns_enqueue+0x12a>
        lseq = age;
 8013208:	7ebb      	ldrb	r3, [r7, #26]
 801320a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 801320e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8013216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801321a:	3301      	adds	r3, #1
 801321c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013224:	2b03      	cmp	r3, #3
 8013226:	d9d3      	bls.n	80131d0 <dns_enqueue+0xe4>
 8013228:	e000      	b.n	801322c <dns_enqueue+0x140>
      break;
 801322a:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 801322c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013230:	2b04      	cmp	r3, #4
 8013232:	d11f      	bne.n	8013274 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8013234:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013238:	2b03      	cmp	r3, #3
 801323a:	d80b      	bhi.n	8013254 <dns_enqueue+0x168>
 801323c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8013240:	4942      	ldr	r1, [pc, #264]	; (801334c <dns_enqueue+0x260>)
 8013242:	4613      	mov	r3, r2
 8013244:	011b      	lsls	r3, r3, #4
 8013246:	4413      	add	r3, r2
 8013248:	011b      	lsls	r3, r3, #4
 801324a:	440b      	add	r3, r1
 801324c:	330a      	adds	r3, #10
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	2b03      	cmp	r3, #3
 8013252:	d002      	beq.n	801325a <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 8013254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013258:	e073      	b.n	8013342 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 801325a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801325e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 8013262:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013266:	4613      	mov	r3, r2
 8013268:	011b      	lsls	r3, r3, #4
 801326a:	4413      	add	r3, r2
 801326c:	011b      	lsls	r3, r3, #4
 801326e:	4a37      	ldr	r2, [pc, #220]	; (801334c <dns_enqueue+0x260>)
 8013270:	4413      	add	r3, r2
 8013272:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 8013274:	2300      	movs	r3, #0
 8013276:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013278:	2300      	movs	r3, #0
 801327a:	76fb      	strb	r3, [r7, #27]
 801327c:	e015      	b.n	80132aa <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 801327e:	7efa      	ldrb	r2, [r7, #27]
 8013280:	4933      	ldr	r1, [pc, #204]	; (8013350 <dns_enqueue+0x264>)
 8013282:	4613      	mov	r3, r2
 8013284:	005b      	lsls	r3, r3, #1
 8013286:	4413      	add	r3, r2
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	440b      	add	r3, r1
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d108      	bne.n	80132a4 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8013292:	7efa      	ldrb	r2, [r7, #27]
 8013294:	4613      	mov	r3, r2
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	4413      	add	r3, r2
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	4a2c      	ldr	r2, [pc, #176]	; (8013350 <dns_enqueue+0x264>)
 801329e:	4413      	add	r3, r2
 80132a0:	61fb      	str	r3, [r7, #28]
      break;
 80132a2:	e005      	b.n	80132b0 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80132a4:	7efb      	ldrb	r3, [r7, #27]
 80132a6:	3301      	adds	r3, #1
 80132a8:	76fb      	strb	r3, [r7, #27]
 80132aa:	7efb      	ldrb	r3, [r7, #27]
 80132ac:	2b03      	cmp	r3, #3
 80132ae:	d9e6      	bls.n	801327e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 80132b0:	69fb      	ldr	r3, [r7, #28]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d102      	bne.n	80132bc <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 80132b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132ba:	e042      	b.n	8013342 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80132c2:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 80132c4:	6a3b      	ldr	r3, [r7, #32]
 80132c6:	2201      	movs	r2, #1
 80132c8:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 80132ca:	4b22      	ldr	r3, [pc, #136]	; (8013354 <dns_enqueue+0x268>)
 80132cc:	781a      	ldrb	r2, [r3, #0]
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	683a      	ldr	r2, [r7, #0]
 80132dc:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	2bff      	cmp	r3, #255	; 0xff
 80132e2:	bf28      	it	cs
 80132e4:	23ff      	movcs	r3, #255	; 0xff
 80132e6:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 80132e8:	6a3b      	ldr	r3, [r7, #32]
 80132ea:	3310      	adds	r3, #16
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	68f9      	ldr	r1, [r7, #12]
 80132f0:	4618      	mov	r0, r3
 80132f2:	f00d ff97 	bl	8021224 <memcpy>
  entry->name[namelen] = 0;
 80132f6:	6a3a      	ldr	r2, [r7, #32]
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	4413      	add	r3, r2
 80132fc:	3310      	adds	r3, #16
 80132fe:	2200      	movs	r2, #0
 8013300:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8013302:	f7ff fb4f 	bl	80129a4 <dns_alloc_pcb>
 8013306:	4603      	mov	r3, r0
 8013308:	461a      	mov	r2, r3
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 801330e:	6a3b      	ldr	r3, [r7, #32]
 8013310:	7bdb      	ldrb	r3, [r3, #15]
 8013312:	2b03      	cmp	r3, #3
 8013314:	d908      	bls.n	8013328 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 8013316:	6a3b      	ldr	r3, [r7, #32]
 8013318:	2200      	movs	r2, #0
 801331a:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	2200      	movs	r2, #0
 8013320:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 8013322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013326:	e00c      	b.n	8013342 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 8013328:	4b0a      	ldr	r3, [pc, #40]	; (8013354 <dns_enqueue+0x268>)
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	3301      	adds	r3, #1
 801332e:	b2da      	uxtb	r2, r3
 8013330:	4b08      	ldr	r3, [pc, #32]	; (8013354 <dns_enqueue+0x268>)
 8013332:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8013334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013338:	4618      	mov	r0, r3
 801333a:	f7ff fc95 	bl	8012c68 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 801333e:	f06f 0304 	mvn.w	r3, #4
}
 8013342:	4618      	mov	r0, r3
 8013344:	3728      	adds	r7, #40	; 0x28
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	20013ebc 	.word	0x20013ebc
 8013350:	200142fc 	.word	0x200142fc
 8013354:	20013eb9 	.word	0x20013eb9

08013358 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b086      	sub	sp, #24
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
 8013364:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d006      	beq.n	801337a <dns_gethostbyname_addrtype+0x22>
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d003      	beq.n	801337a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d102      	bne.n	8013380 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 801337a:	f06f 030f 	mvn.w	r3, #15
 801337e:	e029      	b.n	80133d4 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8013380:	68f8      	ldr	r0, [r7, #12]
 8013382:	f7ec ff2f 	bl	80001e4 <strlen>
 8013386:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	2bff      	cmp	r3, #255	; 0xff
 801338c:	d902      	bls.n	8013394 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 801338e:	f06f 030f 	mvn.w	r3, #15
 8013392:	e01f      	b.n	80133d4 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8013394:	68b9      	ldr	r1, [r7, #8]
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f00c fbfe 	bl	801fb98 <ip4addr_aton>
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d001      	beq.n	80133a6 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 80133a2:	2300      	movs	r3, #0
 80133a4:	e016      	b.n	80133d4 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 80133a6:	68b9      	ldr	r1, [r7, #8]
 80133a8:	68f8      	ldr	r0, [r7, #12]
 80133aa:	f7ff f8b1 	bl	8012510 <dns_lookup>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d101      	bne.n	80133b8 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 80133b4:	2300      	movs	r3, #0
 80133b6:	e00d      	b.n	80133d4 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 80133b8:	4b08      	ldr	r3, [pc, #32]	; (80133dc <dns_gethostbyname_addrtype+0x84>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d102      	bne.n	80133c6 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 80133c0:	f06f 0305 	mvn.w	r3, #5
 80133c4:	e006      	b.n	80133d4 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	6979      	ldr	r1, [r7, #20]
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f7ff fe8d 	bl	80130ec <dns_enqueue>
 80133d2:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3718      	adds	r7, #24
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	2001432c 	.word	0x2001432c

080133e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80133ea:	f00d fd5f 	bl	8020eac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80133ee:	f000 f8d7 	bl	80135a0 <mem_init>
  memp_init();
 80133f2:	f000 fc33 	bl	8013c5c <memp_init>
  pbuf_init();
  netif_init();
 80133f6:	f000 fcf9 	bl	8013dec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80133fa:	f008 fb55 	bl	801baa8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80133fe:	f001 ffd3 	bl	80153a8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8013402:	f7ff f854 	bl	80124ae <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013406:	f008 fa95 	bl	801b934 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801340a:	bf00      	nop
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
	...

08013414 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013414:	b480      	push	{r7}
 8013416:	b083      	sub	sp, #12
 8013418:	af00      	add	r7, sp, #0
 801341a:	4603      	mov	r3, r0
 801341c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801341e:	4b05      	ldr	r3, [pc, #20]	; (8013434 <ptr_to_mem+0x20>)
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	88fb      	ldrh	r3, [r7, #6]
 8013424:	4413      	add	r3, r2
}
 8013426:	4618      	mov	r0, r3
 8013428:	370c      	adds	r7, #12
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	20014334 	.word	0x20014334

08013438 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013440:	4b05      	ldr	r3, [pc, #20]	; (8013458 <mem_to_ptr+0x20>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	1ad3      	subs	r3, r2, r3
 8013448:	b29b      	uxth	r3, r3
}
 801344a:	4618      	mov	r0, r3
 801344c:	370c      	adds	r7, #12
 801344e:	46bd      	mov	sp, r7
 8013450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013454:	4770      	bx	lr
 8013456:	bf00      	nop
 8013458:	20014334 	.word	0x20014334

0801345c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801345c:	b590      	push	{r4, r7, lr}
 801345e:	b085      	sub	sp, #20
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013464:	4b45      	ldr	r3, [pc, #276]	; (801357c <plug_holes+0x120>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	429a      	cmp	r2, r3
 801346c:	d206      	bcs.n	801347c <plug_holes+0x20>
 801346e:	4b44      	ldr	r3, [pc, #272]	; (8013580 <plug_holes+0x124>)
 8013470:	f240 12df 	movw	r2, #479	; 0x1df
 8013474:	4943      	ldr	r1, [pc, #268]	; (8013584 <plug_holes+0x128>)
 8013476:	4844      	ldr	r0, [pc, #272]	; (8013588 <plug_holes+0x12c>)
 8013478:	f00e fc18 	bl	8021cac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801347c:	4b43      	ldr	r3, [pc, #268]	; (801358c <plug_holes+0x130>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	429a      	cmp	r2, r3
 8013484:	d306      	bcc.n	8013494 <plug_holes+0x38>
 8013486:	4b3e      	ldr	r3, [pc, #248]	; (8013580 <plug_holes+0x124>)
 8013488:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801348c:	4940      	ldr	r1, [pc, #256]	; (8013590 <plug_holes+0x134>)
 801348e:	483e      	ldr	r0, [pc, #248]	; (8013588 <plug_holes+0x12c>)
 8013490:	f00e fc0c 	bl	8021cac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	791b      	ldrb	r3, [r3, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d006      	beq.n	80134aa <plug_holes+0x4e>
 801349c:	4b38      	ldr	r3, [pc, #224]	; (8013580 <plug_holes+0x124>)
 801349e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80134a2:	493c      	ldr	r1, [pc, #240]	; (8013594 <plug_holes+0x138>)
 80134a4:	4838      	ldr	r0, [pc, #224]	; (8013588 <plug_holes+0x12c>)
 80134a6:	f00e fc01 	bl	8021cac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80134b2:	d906      	bls.n	80134c2 <plug_holes+0x66>
 80134b4:	4b32      	ldr	r3, [pc, #200]	; (8013580 <plug_holes+0x124>)
 80134b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80134ba:	4937      	ldr	r1, [pc, #220]	; (8013598 <plug_holes+0x13c>)
 80134bc:	4832      	ldr	r0, [pc, #200]	; (8013588 <plug_holes+0x12c>)
 80134be:	f00e fbf5 	bl	8021cac <iprintf>

  nmem = ptr_to_mem(mem->next);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7ff ffa4 	bl	8013414 <ptr_to_mem>
 80134cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d024      	beq.n	8013520 <plug_holes+0xc4>
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	791b      	ldrb	r3, [r3, #4]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d120      	bne.n	8013520 <plug_holes+0xc4>
 80134de:	4b2b      	ldr	r3, [pc, #172]	; (801358c <plug_holes+0x130>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	68fa      	ldr	r2, [r7, #12]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d01b      	beq.n	8013520 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80134e8:	4b2c      	ldr	r3, [pc, #176]	; (801359c <plug_holes+0x140>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d102      	bne.n	80134f8 <plug_holes+0x9c>
      lfree = mem;
 80134f2:	4a2a      	ldr	r2, [pc, #168]	; (801359c <plug_holes+0x140>)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	881a      	ldrh	r2, [r3, #0]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	881b      	ldrh	r3, [r3, #0]
 8013504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013508:	d00a      	beq.n	8013520 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	881b      	ldrh	r3, [r3, #0]
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff ff80 	bl	8013414 <ptr_to_mem>
 8013514:	4604      	mov	r4, r0
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7ff ff8e 	bl	8013438 <mem_to_ptr>
 801351c:	4603      	mov	r3, r0
 801351e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	885b      	ldrh	r3, [r3, #2]
 8013524:	4618      	mov	r0, r3
 8013526:	f7ff ff75 	bl	8013414 <ptr_to_mem>
 801352a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	429a      	cmp	r2, r3
 8013532:	d01f      	beq.n	8013574 <plug_holes+0x118>
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	791b      	ldrb	r3, [r3, #4]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d11b      	bne.n	8013574 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801353c:	4b17      	ldr	r3, [pc, #92]	; (801359c <plug_holes+0x140>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	429a      	cmp	r2, r3
 8013544:	d102      	bne.n	801354c <plug_holes+0xf0>
      lfree = pmem;
 8013546:	4a15      	ldr	r2, [pc, #84]	; (801359c <plug_holes+0x140>)
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	881a      	ldrh	r2, [r3, #0]
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801355c:	d00a      	beq.n	8013574 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	881b      	ldrh	r3, [r3, #0]
 8013562:	4618      	mov	r0, r3
 8013564:	f7ff ff56 	bl	8013414 <ptr_to_mem>
 8013568:	4604      	mov	r4, r0
 801356a:	68b8      	ldr	r0, [r7, #8]
 801356c:	f7ff ff64 	bl	8013438 <mem_to_ptr>
 8013570:	4603      	mov	r3, r0
 8013572:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013574:	bf00      	nop
 8013576:	3714      	adds	r7, #20
 8013578:	46bd      	mov	sp, r7
 801357a:	bd90      	pop	{r4, r7, pc}
 801357c:	20014334 	.word	0x20014334
 8013580:	080269a8 	.word	0x080269a8
 8013584:	080269d8 	.word	0x080269d8
 8013588:	080269f0 	.word	0x080269f0
 801358c:	20014338 	.word	0x20014338
 8013590:	08026a18 	.word	0x08026a18
 8013594:	08026a34 	.word	0x08026a34
 8013598:	08026a50 	.word	0x08026a50
 801359c:	20014340 	.word	0x20014340

080135a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80135a6:	4b1f      	ldr	r3, [pc, #124]	; (8013624 <mem_init+0x84>)
 80135a8:	3303      	adds	r3, #3
 80135aa:	f023 0303 	bic.w	r3, r3, #3
 80135ae:	461a      	mov	r2, r3
 80135b0:	4b1d      	ldr	r3, [pc, #116]	; (8013628 <mem_init+0x88>)
 80135b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80135b4:	4b1c      	ldr	r3, [pc, #112]	; (8013628 <mem_init+0x88>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80135c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2200      	movs	r2, #0
 80135c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80135ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80135d2:	f7ff ff1f 	bl	8013414 <ptr_to_mem>
 80135d6:	4603      	mov	r3, r0
 80135d8:	4a14      	ldr	r2, [pc, #80]	; (801362c <mem_init+0x8c>)
 80135da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80135dc:	4b13      	ldr	r3, [pc, #76]	; (801362c <mem_init+0x8c>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2201      	movs	r2, #1
 80135e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80135e4:	4b11      	ldr	r3, [pc, #68]	; (801362c <mem_init+0x8c>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80135ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80135ee:	4b0f      	ldr	r3, [pc, #60]	; (801362c <mem_init+0x8c>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80135f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80135f8:	4b0b      	ldr	r3, [pc, #44]	; (8013628 <mem_init+0x88>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	4a0c      	ldr	r2, [pc, #48]	; (8013630 <mem_init+0x90>)
 80135fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013600:	480c      	ldr	r0, [pc, #48]	; (8013634 <mem_init+0x94>)
 8013602:	f00d fc61 	bl	8020ec8 <sys_mutex_new>
 8013606:	4603      	mov	r3, r0
 8013608:	2b00      	cmp	r3, #0
 801360a:	d006      	beq.n	801361a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801360c:	4b0a      	ldr	r3, [pc, #40]	; (8013638 <mem_init+0x98>)
 801360e:	f240 221f 	movw	r2, #543	; 0x21f
 8013612:	490a      	ldr	r1, [pc, #40]	; (801363c <mem_init+0x9c>)
 8013614:	480a      	ldr	r0, [pc, #40]	; (8013640 <mem_init+0xa0>)
 8013616:	f00e fb49 	bl	8021cac <iprintf>
  }
}
 801361a:	bf00      	nop
 801361c:	3708      	adds	r7, #8
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	200177c0 	.word	0x200177c0
 8013628:	20014334 	.word	0x20014334
 801362c:	20014338 	.word	0x20014338
 8013630:	20014340 	.word	0x20014340
 8013634:	2001433c 	.word	0x2001433c
 8013638:	080269a8 	.word	0x080269a8
 801363c:	08026a7c 	.word	0x08026a7c
 8013640:	080269f0 	.word	0x080269f0

08013644 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff fef3 	bl	8013438 <mem_to_ptr>
 8013652:	4603      	mov	r3, r0
 8013654:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	881b      	ldrh	r3, [r3, #0]
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff feda 	bl	8013414 <ptr_to_mem>
 8013660:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	885b      	ldrh	r3, [r3, #2]
 8013666:	4618      	mov	r0, r3
 8013668:	f7ff fed4 	bl	8013414 <ptr_to_mem>
 801366c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	881b      	ldrh	r3, [r3, #0]
 8013672:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013676:	d818      	bhi.n	80136aa <mem_link_valid+0x66>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	885b      	ldrh	r3, [r3, #2]
 801367c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013680:	d813      	bhi.n	80136aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013686:	8afa      	ldrh	r2, [r7, #22]
 8013688:	429a      	cmp	r2, r3
 801368a:	d004      	beq.n	8013696 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	8afa      	ldrh	r2, [r7, #22]
 8013692:	429a      	cmp	r2, r3
 8013694:	d109      	bne.n	80136aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013696:	4b08      	ldr	r3, [pc, #32]	; (80136b8 <mem_link_valid+0x74>)
 8013698:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801369a:	693a      	ldr	r2, [r7, #16]
 801369c:	429a      	cmp	r2, r3
 801369e:	d006      	beq.n	80136ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	885b      	ldrh	r3, [r3, #2]
 80136a4:	8afa      	ldrh	r2, [r7, #22]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d001      	beq.n	80136ae <mem_link_valid+0x6a>
    return 0;
 80136aa:	2300      	movs	r3, #0
 80136ac:	e000      	b.n	80136b0 <mem_link_valid+0x6c>
  }
  return 1;
 80136ae:	2301      	movs	r3, #1
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3718      	adds	r7, #24
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	20014338 	.word	0x20014338

080136bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b088      	sub	sp, #32
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d070      	beq.n	80137ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f003 0303 	and.w	r3, r3, #3
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d00d      	beq.n	80136f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80136d4:	4b37      	ldr	r3, [pc, #220]	; (80137b4 <mem_free+0xf8>)
 80136d6:	f240 2273 	movw	r2, #627	; 0x273
 80136da:	4937      	ldr	r1, [pc, #220]	; (80137b8 <mem_free+0xfc>)
 80136dc:	4837      	ldr	r0, [pc, #220]	; (80137bc <mem_free+0x100>)
 80136de:	f00e fae5 	bl	8021cac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80136e2:	f00d fc45 	bl	8020f70 <sys_arch_protect>
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	68f8      	ldr	r0, [r7, #12]
 80136ea:	f00d fc4f 	bl	8020f8c <sys_arch_unprotect>
    return;
 80136ee:	e05e      	b.n	80137ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	3b08      	subs	r3, #8
 80136f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80136f6:	4b32      	ldr	r3, [pc, #200]	; (80137c0 <mem_free+0x104>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	69fa      	ldr	r2, [r7, #28]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d306      	bcc.n	801370e <mem_free+0x52>
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f103 020c 	add.w	r2, r3, #12
 8013706:	4b2f      	ldr	r3, [pc, #188]	; (80137c4 <mem_free+0x108>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	429a      	cmp	r2, r3
 801370c:	d90d      	bls.n	801372a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801370e:	4b29      	ldr	r3, [pc, #164]	; (80137b4 <mem_free+0xf8>)
 8013710:	f240 227f 	movw	r2, #639	; 0x27f
 8013714:	492c      	ldr	r1, [pc, #176]	; (80137c8 <mem_free+0x10c>)
 8013716:	4829      	ldr	r0, [pc, #164]	; (80137bc <mem_free+0x100>)
 8013718:	f00e fac8 	bl	8021cac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801371c:	f00d fc28 	bl	8020f70 <sys_arch_protect>
 8013720:	6138      	str	r0, [r7, #16]
 8013722:	6938      	ldr	r0, [r7, #16]
 8013724:	f00d fc32 	bl	8020f8c <sys_arch_unprotect>
    return;
 8013728:	e041      	b.n	80137ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801372a:	4828      	ldr	r0, [pc, #160]	; (80137cc <mem_free+0x110>)
 801372c:	f00d fbe6 	bl	8020efc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	791b      	ldrb	r3, [r3, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d110      	bne.n	801375a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013738:	4b1e      	ldr	r3, [pc, #120]	; (80137b4 <mem_free+0xf8>)
 801373a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801373e:	4924      	ldr	r1, [pc, #144]	; (80137d0 <mem_free+0x114>)
 8013740:	481e      	ldr	r0, [pc, #120]	; (80137bc <mem_free+0x100>)
 8013742:	f00e fab3 	bl	8021cac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013746:	4821      	ldr	r0, [pc, #132]	; (80137cc <mem_free+0x110>)
 8013748:	f00d fbe7 	bl	8020f1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801374c:	f00d fc10 	bl	8020f70 <sys_arch_protect>
 8013750:	6178      	str	r0, [r7, #20]
 8013752:	6978      	ldr	r0, [r7, #20]
 8013754:	f00d fc1a 	bl	8020f8c <sys_arch_unprotect>
    return;
 8013758:	e029      	b.n	80137ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801375a:	69f8      	ldr	r0, [r7, #28]
 801375c:	f7ff ff72 	bl	8013644 <mem_link_valid>
 8013760:	4603      	mov	r3, r0
 8013762:	2b00      	cmp	r3, #0
 8013764:	d110      	bne.n	8013788 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013766:	4b13      	ldr	r3, [pc, #76]	; (80137b4 <mem_free+0xf8>)
 8013768:	f240 2295 	movw	r2, #661	; 0x295
 801376c:	4919      	ldr	r1, [pc, #100]	; (80137d4 <mem_free+0x118>)
 801376e:	4813      	ldr	r0, [pc, #76]	; (80137bc <mem_free+0x100>)
 8013770:	f00e fa9c 	bl	8021cac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013774:	4815      	ldr	r0, [pc, #84]	; (80137cc <mem_free+0x110>)
 8013776:	f00d fbd0 	bl	8020f1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801377a:	f00d fbf9 	bl	8020f70 <sys_arch_protect>
 801377e:	61b8      	str	r0, [r7, #24]
 8013780:	69b8      	ldr	r0, [r7, #24]
 8013782:	f00d fc03 	bl	8020f8c <sys_arch_unprotect>
    return;
 8013786:	e012      	b.n	80137ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	2200      	movs	r2, #0
 801378c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801378e:	4b12      	ldr	r3, [pc, #72]	; (80137d8 <mem_free+0x11c>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	69fa      	ldr	r2, [r7, #28]
 8013794:	429a      	cmp	r2, r3
 8013796:	d202      	bcs.n	801379e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013798:	4a0f      	ldr	r2, [pc, #60]	; (80137d8 <mem_free+0x11c>)
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801379e:	69f8      	ldr	r0, [r7, #28]
 80137a0:	f7ff fe5c 	bl	801345c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80137a4:	4809      	ldr	r0, [pc, #36]	; (80137cc <mem_free+0x110>)
 80137a6:	f00d fbb8 	bl	8020f1a <sys_mutex_unlock>
 80137aa:	e000      	b.n	80137ae <mem_free+0xf2>
    return;
 80137ac:	bf00      	nop
}
 80137ae:	3720      	adds	r7, #32
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	080269a8 	.word	0x080269a8
 80137b8:	08026a98 	.word	0x08026a98
 80137bc:	080269f0 	.word	0x080269f0
 80137c0:	20014334 	.word	0x20014334
 80137c4:	20014338 	.word	0x20014338
 80137c8:	08026abc 	.word	0x08026abc
 80137cc:	2001433c 	.word	0x2001433c
 80137d0:	08026ad8 	.word	0x08026ad8
 80137d4:	08026b00 	.word	0x08026b00
 80137d8:	20014340 	.word	0x20014340

080137dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b088      	sub	sp, #32
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	460b      	mov	r3, r1
 80137e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80137e8:	887b      	ldrh	r3, [r7, #2]
 80137ea:	3303      	adds	r3, #3
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	f023 0303 	bic.w	r3, r3, #3
 80137f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80137f4:	8bfb      	ldrh	r3, [r7, #30]
 80137f6:	2b0b      	cmp	r3, #11
 80137f8:	d801      	bhi.n	80137fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80137fa:	230c      	movs	r3, #12
 80137fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80137fe:	8bfb      	ldrh	r3, [r7, #30]
 8013800:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013804:	d803      	bhi.n	801380e <mem_trim+0x32>
 8013806:	8bfa      	ldrh	r2, [r7, #30]
 8013808:	887b      	ldrh	r3, [r7, #2]
 801380a:	429a      	cmp	r2, r3
 801380c:	d201      	bcs.n	8013812 <mem_trim+0x36>
    return NULL;
 801380e:	2300      	movs	r3, #0
 8013810:	e0d8      	b.n	80139c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013812:	4b6e      	ldr	r3, [pc, #440]	; (80139cc <mem_trim+0x1f0>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	429a      	cmp	r2, r3
 801381a:	d304      	bcc.n	8013826 <mem_trim+0x4a>
 801381c:	4b6c      	ldr	r3, [pc, #432]	; (80139d0 <mem_trim+0x1f4>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	429a      	cmp	r2, r3
 8013824:	d306      	bcc.n	8013834 <mem_trim+0x58>
 8013826:	4b6b      	ldr	r3, [pc, #428]	; (80139d4 <mem_trim+0x1f8>)
 8013828:	f240 22d1 	movw	r2, #721	; 0x2d1
 801382c:	496a      	ldr	r1, [pc, #424]	; (80139d8 <mem_trim+0x1fc>)
 801382e:	486b      	ldr	r0, [pc, #428]	; (80139dc <mem_trim+0x200>)
 8013830:	f00e fa3c 	bl	8021cac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013834:	4b65      	ldr	r3, [pc, #404]	; (80139cc <mem_trim+0x1f0>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	429a      	cmp	r2, r3
 801383c:	d304      	bcc.n	8013848 <mem_trim+0x6c>
 801383e:	4b64      	ldr	r3, [pc, #400]	; (80139d0 <mem_trim+0x1f4>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	429a      	cmp	r2, r3
 8013846:	d307      	bcc.n	8013858 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013848:	f00d fb92 	bl	8020f70 <sys_arch_protect>
 801384c:	60b8      	str	r0, [r7, #8]
 801384e:	68b8      	ldr	r0, [r7, #8]
 8013850:	f00d fb9c 	bl	8020f8c <sys_arch_unprotect>
    return rmem;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	e0b5      	b.n	80139c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3b08      	subs	r3, #8
 801385c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801385e:	69b8      	ldr	r0, [r7, #24]
 8013860:	f7ff fdea 	bl	8013438 <mem_to_ptr>
 8013864:	4603      	mov	r3, r0
 8013866:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	881a      	ldrh	r2, [r3, #0]
 801386c:	8afb      	ldrh	r3, [r7, #22]
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	b29b      	uxth	r3, r3
 8013872:	3b08      	subs	r3, #8
 8013874:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013876:	8bfa      	ldrh	r2, [r7, #30]
 8013878:	8abb      	ldrh	r3, [r7, #20]
 801387a:	429a      	cmp	r2, r3
 801387c:	d906      	bls.n	801388c <mem_trim+0xb0>
 801387e:	4b55      	ldr	r3, [pc, #340]	; (80139d4 <mem_trim+0x1f8>)
 8013880:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013884:	4956      	ldr	r1, [pc, #344]	; (80139e0 <mem_trim+0x204>)
 8013886:	4855      	ldr	r0, [pc, #340]	; (80139dc <mem_trim+0x200>)
 8013888:	f00e fa10 	bl	8021cac <iprintf>
  if (newsize > size) {
 801388c:	8bfa      	ldrh	r2, [r7, #30]
 801388e:	8abb      	ldrh	r3, [r7, #20]
 8013890:	429a      	cmp	r2, r3
 8013892:	d901      	bls.n	8013898 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013894:	2300      	movs	r3, #0
 8013896:	e095      	b.n	80139c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013898:	8bfa      	ldrh	r2, [r7, #30]
 801389a:	8abb      	ldrh	r3, [r7, #20]
 801389c:	429a      	cmp	r2, r3
 801389e:	d101      	bne.n	80138a4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	e08f      	b.n	80139c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80138a4:	484f      	ldr	r0, [pc, #316]	; (80139e4 <mem_trim+0x208>)
 80138a6:	f00d fb29 	bl	8020efc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	881b      	ldrh	r3, [r3, #0]
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7ff fdb0 	bl	8013414 <ptr_to_mem>
 80138b4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	791b      	ldrb	r3, [r3, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d13f      	bne.n	801393e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80138c6:	d106      	bne.n	80138d6 <mem_trim+0xfa>
 80138c8:	4b42      	ldr	r3, [pc, #264]	; (80139d4 <mem_trim+0x1f8>)
 80138ca:	f240 22f5 	movw	r2, #757	; 0x2f5
 80138ce:	4946      	ldr	r1, [pc, #280]	; (80139e8 <mem_trim+0x20c>)
 80138d0:	4842      	ldr	r0, [pc, #264]	; (80139dc <mem_trim+0x200>)
 80138d2:	f00e f9eb 	bl	8021cac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	881b      	ldrh	r3, [r3, #0]
 80138da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80138dc:	8afa      	ldrh	r2, [r7, #22]
 80138de:	8bfb      	ldrh	r3, [r7, #30]
 80138e0:	4413      	add	r3, r2
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	3308      	adds	r3, #8
 80138e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80138e8:	4b40      	ldr	r3, [pc, #256]	; (80139ec <mem_trim+0x210>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	693a      	ldr	r2, [r7, #16]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d106      	bne.n	8013900 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80138f2:	89fb      	ldrh	r3, [r7, #14]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7ff fd8d 	bl	8013414 <ptr_to_mem>
 80138fa:	4603      	mov	r3, r0
 80138fc:	4a3b      	ldr	r2, [pc, #236]	; (80139ec <mem_trim+0x210>)
 80138fe:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013900:	89fb      	ldrh	r3, [r7, #14]
 8013902:	4618      	mov	r0, r3
 8013904:	f7ff fd86 	bl	8013414 <ptr_to_mem>
 8013908:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2200      	movs	r2, #0
 801390e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	89ba      	ldrh	r2, [r7, #12]
 8013914:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	8afa      	ldrh	r2, [r7, #22]
 801391a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	89fa      	ldrh	r2, [r7, #14]
 8013920:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	881b      	ldrh	r3, [r3, #0]
 8013926:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801392a:	d047      	beq.n	80139bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	4618      	mov	r0, r3
 8013932:	f7ff fd6f 	bl	8013414 <ptr_to_mem>
 8013936:	4602      	mov	r2, r0
 8013938:	89fb      	ldrh	r3, [r7, #14]
 801393a:	8053      	strh	r3, [r2, #2]
 801393c:	e03e      	b.n	80139bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801393e:	8bfb      	ldrh	r3, [r7, #30]
 8013940:	f103 0214 	add.w	r2, r3, #20
 8013944:	8abb      	ldrh	r3, [r7, #20]
 8013946:	429a      	cmp	r2, r3
 8013948:	d838      	bhi.n	80139bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801394a:	8afa      	ldrh	r2, [r7, #22]
 801394c:	8bfb      	ldrh	r3, [r7, #30]
 801394e:	4413      	add	r3, r2
 8013950:	b29b      	uxth	r3, r3
 8013952:	3308      	adds	r3, #8
 8013954:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	881b      	ldrh	r3, [r3, #0]
 801395a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801395e:	d106      	bne.n	801396e <mem_trim+0x192>
 8013960:	4b1c      	ldr	r3, [pc, #112]	; (80139d4 <mem_trim+0x1f8>)
 8013962:	f240 3216 	movw	r2, #790	; 0x316
 8013966:	4920      	ldr	r1, [pc, #128]	; (80139e8 <mem_trim+0x20c>)
 8013968:	481c      	ldr	r0, [pc, #112]	; (80139dc <mem_trim+0x200>)
 801396a:	f00e f99f 	bl	8021cac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801396e:	89fb      	ldrh	r3, [r7, #14]
 8013970:	4618      	mov	r0, r3
 8013972:	f7ff fd4f 	bl	8013414 <ptr_to_mem>
 8013976:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013978:	4b1c      	ldr	r3, [pc, #112]	; (80139ec <mem_trim+0x210>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	693a      	ldr	r2, [r7, #16]
 801397e:	429a      	cmp	r2, r3
 8013980:	d202      	bcs.n	8013988 <mem_trim+0x1ac>
      lfree = mem2;
 8013982:	4a1a      	ldr	r2, [pc, #104]	; (80139ec <mem_trim+0x210>)
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	2200      	movs	r2, #0
 801398c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	881a      	ldrh	r2, [r3, #0]
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	8afa      	ldrh	r2, [r7, #22]
 801399a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801399c:	69bb      	ldr	r3, [r7, #24]
 801399e:	89fa      	ldrh	r2, [r7, #14]
 80139a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	881b      	ldrh	r3, [r3, #0]
 80139a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80139aa:	d007      	beq.n	80139bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	881b      	ldrh	r3, [r3, #0]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff fd2f 	bl	8013414 <ptr_to_mem>
 80139b6:	4602      	mov	r2, r0
 80139b8:	89fb      	ldrh	r3, [r7, #14]
 80139ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80139bc:	4809      	ldr	r0, [pc, #36]	; (80139e4 <mem_trim+0x208>)
 80139be:	f00d faac 	bl	8020f1a <sys_mutex_unlock>
  return rmem;
 80139c2:	687b      	ldr	r3, [r7, #4]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3720      	adds	r7, #32
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	20014334 	.word	0x20014334
 80139d0:	20014338 	.word	0x20014338
 80139d4:	080269a8 	.word	0x080269a8
 80139d8:	08026b34 	.word	0x08026b34
 80139dc:	080269f0 	.word	0x080269f0
 80139e0:	08026b4c 	.word	0x08026b4c
 80139e4:	2001433c 	.word	0x2001433c
 80139e8:	08026b6c 	.word	0x08026b6c
 80139ec:	20014340 	.word	0x20014340

080139f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b088      	sub	sp, #32
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	4603      	mov	r3, r0
 80139f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80139fa:	88fb      	ldrh	r3, [r7, #6]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d101      	bne.n	8013a04 <mem_malloc+0x14>
    return NULL;
 8013a00:	2300      	movs	r3, #0
 8013a02:	e0e2      	b.n	8013bca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013a04:	88fb      	ldrh	r3, [r7, #6]
 8013a06:	3303      	adds	r3, #3
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	f023 0303 	bic.w	r3, r3, #3
 8013a0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013a10:	8bbb      	ldrh	r3, [r7, #28]
 8013a12:	2b0b      	cmp	r3, #11
 8013a14:	d801      	bhi.n	8013a1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013a16:	230c      	movs	r3, #12
 8013a18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013a1a:	8bbb      	ldrh	r3, [r7, #28]
 8013a1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a20:	d803      	bhi.n	8013a2a <mem_malloc+0x3a>
 8013a22:	8bba      	ldrh	r2, [r7, #28]
 8013a24:	88fb      	ldrh	r3, [r7, #6]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d201      	bcs.n	8013a2e <mem_malloc+0x3e>
    return NULL;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e0cd      	b.n	8013bca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013a2e:	4869      	ldr	r0, [pc, #420]	; (8013bd4 <mem_malloc+0x1e4>)
 8013a30:	f00d fa64 	bl	8020efc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013a34:	4b68      	ldr	r3, [pc, #416]	; (8013bd8 <mem_malloc+0x1e8>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff fcfd 	bl	8013438 <mem_to_ptr>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	83fb      	strh	r3, [r7, #30]
 8013a42:	e0b7      	b.n	8013bb4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013a44:	8bfb      	ldrh	r3, [r7, #30]
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff fce4 	bl	8013414 <ptr_to_mem>
 8013a4c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	791b      	ldrb	r3, [r3, #4]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	f040 80a7 	bne.w	8013ba6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	881b      	ldrh	r3, [r3, #0]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	8bfb      	ldrh	r3, [r7, #30]
 8013a60:	1ad3      	subs	r3, r2, r3
 8013a62:	f1a3 0208 	sub.w	r2, r3, #8
 8013a66:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	f0c0 809c 	bcc.w	8013ba6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	881b      	ldrh	r3, [r3, #0]
 8013a72:	461a      	mov	r2, r3
 8013a74:	8bfb      	ldrh	r3, [r7, #30]
 8013a76:	1ad3      	subs	r3, r2, r3
 8013a78:	f1a3 0208 	sub.w	r2, r3, #8
 8013a7c:	8bbb      	ldrh	r3, [r7, #28]
 8013a7e:	3314      	adds	r3, #20
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d333      	bcc.n	8013aec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013a84:	8bfa      	ldrh	r2, [r7, #30]
 8013a86:	8bbb      	ldrh	r3, [r7, #28]
 8013a88:	4413      	add	r3, r2
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	3308      	adds	r3, #8
 8013a8e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013a90:	8a7b      	ldrh	r3, [r7, #18]
 8013a92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a96:	d106      	bne.n	8013aa6 <mem_malloc+0xb6>
 8013a98:	4b50      	ldr	r3, [pc, #320]	; (8013bdc <mem_malloc+0x1ec>)
 8013a9a:	f240 3287 	movw	r2, #903	; 0x387
 8013a9e:	4950      	ldr	r1, [pc, #320]	; (8013be0 <mem_malloc+0x1f0>)
 8013aa0:	4850      	ldr	r0, [pc, #320]	; (8013be4 <mem_malloc+0x1f4>)
 8013aa2:	f00e f903 	bl	8021cac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013aa6:	8a7b      	ldrh	r3, [r7, #18]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7ff fcb3 	bl	8013414 <ptr_to_mem>
 8013aae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	881a      	ldrh	r2, [r3, #0]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	8bfa      	ldrh	r2, [r7, #30]
 8013ac2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	8a7a      	ldrh	r2, [r7, #18]
 8013ac8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	2201      	movs	r2, #1
 8013ace:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	881b      	ldrh	r3, [r3, #0]
 8013ad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013ad8:	d00b      	beq.n	8013af2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7ff fc98 	bl	8013414 <ptr_to_mem>
 8013ae4:	4602      	mov	r2, r0
 8013ae6:	8a7b      	ldrh	r3, [r7, #18]
 8013ae8:	8053      	strh	r3, [r2, #2]
 8013aea:	e002      	b.n	8013af2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	2201      	movs	r2, #1
 8013af0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013af2:	4b39      	ldr	r3, [pc, #228]	; (8013bd8 <mem_malloc+0x1e8>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	697a      	ldr	r2, [r7, #20]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d127      	bne.n	8013b4c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013afc:	4b36      	ldr	r3, [pc, #216]	; (8013bd8 <mem_malloc+0x1e8>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013b02:	e005      	b.n	8013b10 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ff fc83 	bl	8013414 <ptr_to_mem>
 8013b0e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	791b      	ldrb	r3, [r3, #4]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d004      	beq.n	8013b22 <mem_malloc+0x132>
 8013b18:	4b33      	ldr	r3, [pc, #204]	; (8013be8 <mem_malloc+0x1f8>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	69ba      	ldr	r2, [r7, #24]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d1f0      	bne.n	8013b04 <mem_malloc+0x114>
          }
          lfree = cur;
 8013b22:	4a2d      	ldr	r2, [pc, #180]	; (8013bd8 <mem_malloc+0x1e8>)
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013b28:	4b2b      	ldr	r3, [pc, #172]	; (8013bd8 <mem_malloc+0x1e8>)
 8013b2a:	681a      	ldr	r2, [r3, #0]
 8013b2c:	4b2e      	ldr	r3, [pc, #184]	; (8013be8 <mem_malloc+0x1f8>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d00b      	beq.n	8013b4c <mem_malloc+0x15c>
 8013b34:	4b28      	ldr	r3, [pc, #160]	; (8013bd8 <mem_malloc+0x1e8>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	791b      	ldrb	r3, [r3, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d006      	beq.n	8013b4c <mem_malloc+0x15c>
 8013b3e:	4b27      	ldr	r3, [pc, #156]	; (8013bdc <mem_malloc+0x1ec>)
 8013b40:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013b44:	4929      	ldr	r1, [pc, #164]	; (8013bec <mem_malloc+0x1fc>)
 8013b46:	4827      	ldr	r0, [pc, #156]	; (8013be4 <mem_malloc+0x1f4>)
 8013b48:	f00e f8b0 	bl	8021cac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013b4c:	4821      	ldr	r0, [pc, #132]	; (8013bd4 <mem_malloc+0x1e4>)
 8013b4e:	f00d f9e4 	bl	8020f1a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013b52:	8bba      	ldrh	r2, [r7, #28]
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	4413      	add	r3, r2
 8013b58:	3308      	adds	r3, #8
 8013b5a:	4a23      	ldr	r2, [pc, #140]	; (8013be8 <mem_malloc+0x1f8>)
 8013b5c:	6812      	ldr	r2, [r2, #0]
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d906      	bls.n	8013b70 <mem_malloc+0x180>
 8013b62:	4b1e      	ldr	r3, [pc, #120]	; (8013bdc <mem_malloc+0x1ec>)
 8013b64:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013b68:	4921      	ldr	r1, [pc, #132]	; (8013bf0 <mem_malloc+0x200>)
 8013b6a:	481e      	ldr	r0, [pc, #120]	; (8013be4 <mem_malloc+0x1f4>)
 8013b6c:	f00e f89e 	bl	8021cac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	f003 0303 	and.w	r3, r3, #3
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d006      	beq.n	8013b88 <mem_malloc+0x198>
 8013b7a:	4b18      	ldr	r3, [pc, #96]	; (8013bdc <mem_malloc+0x1ec>)
 8013b7c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013b80:	491c      	ldr	r1, [pc, #112]	; (8013bf4 <mem_malloc+0x204>)
 8013b82:	4818      	ldr	r0, [pc, #96]	; (8013be4 <mem_malloc+0x1f4>)
 8013b84:	f00e f892 	bl	8021cac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	f003 0303 	and.w	r3, r3, #3
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d006      	beq.n	8013ba0 <mem_malloc+0x1b0>
 8013b92:	4b12      	ldr	r3, [pc, #72]	; (8013bdc <mem_malloc+0x1ec>)
 8013b94:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013b98:	4917      	ldr	r1, [pc, #92]	; (8013bf8 <mem_malloc+0x208>)
 8013b9a:	4812      	ldr	r0, [pc, #72]	; (8013be4 <mem_malloc+0x1f4>)
 8013b9c:	f00e f886 	bl	8021cac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	3308      	adds	r3, #8
 8013ba4:	e011      	b.n	8013bca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013ba6:	8bfb      	ldrh	r3, [r7, #30]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7ff fc33 	bl	8013414 <ptr_to_mem>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	881b      	ldrh	r3, [r3, #0]
 8013bb2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013bb4:	8bfa      	ldrh	r2, [r7, #30]
 8013bb6:	8bbb      	ldrh	r3, [r7, #28]
 8013bb8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	f4ff af41 	bcc.w	8013a44 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013bc2:	4804      	ldr	r0, [pc, #16]	; (8013bd4 <mem_malloc+0x1e4>)
 8013bc4:	f00d f9a9 	bl	8020f1a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3720      	adds	r7, #32
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	2001433c 	.word	0x2001433c
 8013bd8:	20014340 	.word	0x20014340
 8013bdc:	080269a8 	.word	0x080269a8
 8013be0:	08026b6c 	.word	0x08026b6c
 8013be4:	080269f0 	.word	0x080269f0
 8013be8:	20014338 	.word	0x20014338
 8013bec:	08026b80 	.word	0x08026b80
 8013bf0:	08026b9c 	.word	0x08026b9c
 8013bf4:	08026bcc 	.word	0x08026bcc
 8013bf8:	08026bfc 	.word	0x08026bfc

08013bfc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b085      	sub	sp, #20
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	3303      	adds	r3, #3
 8013c12:	f023 0303 	bic.w	r3, r3, #3
 8013c16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013c18:	2300      	movs	r3, #0
 8013c1a:	60fb      	str	r3, [r7, #12]
 8013c1c:	e011      	b.n	8013c42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	68ba      	ldr	r2, [r7, #8]
 8013c2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	889b      	ldrh	r3, [r3, #4]
 8013c34:	461a      	mov	r2, r3
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	4413      	add	r3, r2
 8013c3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	3301      	adds	r3, #1
 8013c40:	60fb      	str	r3, [r7, #12]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	88db      	ldrh	r3, [r3, #6]
 8013c46:	461a      	mov	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	4293      	cmp	r3, r2
 8013c4c:	dbe7      	blt.n	8013c1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013c4e:	bf00      	nop
 8013c50:	bf00      	nop
 8013c52:	3714      	adds	r7, #20
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013c62:	2300      	movs	r3, #0
 8013c64:	80fb      	strh	r3, [r7, #6]
 8013c66:	e009      	b.n	8013c7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013c68:	88fb      	ldrh	r3, [r7, #6]
 8013c6a:	4a08      	ldr	r2, [pc, #32]	; (8013c8c <memp_init+0x30>)
 8013c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff ffc3 	bl	8013bfc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013c76:	88fb      	ldrh	r3, [r7, #6]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	80fb      	strh	r3, [r7, #6]
 8013c7c:	88fb      	ldrh	r3, [r7, #6]
 8013c7e:	2b0d      	cmp	r3, #13
 8013c80:	d9f2      	bls.n	8013c68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013c82:	bf00      	nop
 8013c84:	bf00      	nop
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	08029a58 	.word	0x08029a58

08013c90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013c98:	f00d f96a 	bl	8020f70 <sys_arch_protect>
 8013c9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d015      	beq.n	8013cd8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	68ba      	ldr	r2, [r7, #8]
 8013cb2:	6812      	ldr	r2, [r2, #0]
 8013cb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	f003 0303 	and.w	r3, r3, #3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d006      	beq.n	8013cce <do_memp_malloc_pool+0x3e>
 8013cc0:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <do_memp_malloc_pool+0x58>)
 8013cc2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013cc6:	4909      	ldr	r1, [pc, #36]	; (8013cec <do_memp_malloc_pool+0x5c>)
 8013cc8:	4809      	ldr	r0, [pc, #36]	; (8013cf0 <do_memp_malloc_pool+0x60>)
 8013cca:	f00d ffef 	bl	8021cac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013cce:	68f8      	ldr	r0, [r7, #12]
 8013cd0:	f00d f95c 	bl	8020f8c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	e003      	b.n	8013ce0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013cd8:	68f8      	ldr	r0, [r7, #12]
 8013cda:	f00d f957 	bl	8020f8c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	08026cc0 	.word	0x08026cc0
 8013cec:	08026cf0 	.word	0x08026cf0
 8013cf0:	08026d14 	.word	0x08026d14

08013cf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013cfe:	79fb      	ldrb	r3, [r7, #7]
 8013d00:	2b0d      	cmp	r3, #13
 8013d02:	d908      	bls.n	8013d16 <memp_malloc+0x22>
 8013d04:	4b0a      	ldr	r3, [pc, #40]	; (8013d30 <memp_malloc+0x3c>)
 8013d06:	f240 1257 	movw	r2, #343	; 0x157
 8013d0a:	490a      	ldr	r1, [pc, #40]	; (8013d34 <memp_malloc+0x40>)
 8013d0c:	480a      	ldr	r0, [pc, #40]	; (8013d38 <memp_malloc+0x44>)
 8013d0e:	f00d ffcd 	bl	8021cac <iprintf>
 8013d12:	2300      	movs	r3, #0
 8013d14:	e008      	b.n	8013d28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013d16:	79fb      	ldrb	r3, [r7, #7]
 8013d18:	4a08      	ldr	r2, [pc, #32]	; (8013d3c <memp_malloc+0x48>)
 8013d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff ffb6 	bl	8013c90 <do_memp_malloc_pool>
 8013d24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013d26:	68fb      	ldr	r3, [r7, #12]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	08026cc0 	.word	0x08026cc0
 8013d34:	08026d50 	.word	0x08026d50
 8013d38:	08026d14 	.word	0x08026d14
 8013d3c:	08029a58 	.word	0x08029a58

08013d40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	f003 0303 	and.w	r3, r3, #3
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d006      	beq.n	8013d62 <do_memp_free_pool+0x22>
 8013d54:	4b0d      	ldr	r3, [pc, #52]	; (8013d8c <do_memp_free_pool+0x4c>)
 8013d56:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013d5a:	490d      	ldr	r1, [pc, #52]	; (8013d90 <do_memp_free_pool+0x50>)
 8013d5c:	480d      	ldr	r0, [pc, #52]	; (8013d94 <do_memp_free_pool+0x54>)
 8013d5e:	f00d ffa5 	bl	8021cac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013d66:	f00d f903 	bl	8020f70 <sys_arch_protect>
 8013d6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	68db      	ldr	r3, [r3, #12]
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013d7e:	68b8      	ldr	r0, [r7, #8]
 8013d80:	f00d f904 	bl	8020f8c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013d84:	bf00      	nop
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	08026cc0 	.word	0x08026cc0
 8013d90:	08026d70 	.word	0x08026d70
 8013d94:	08026d14 	.word	0x08026d14

08013d98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	4603      	mov	r3, r0
 8013da0:	6039      	str	r1, [r7, #0]
 8013da2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013da4:	79fb      	ldrb	r3, [r7, #7]
 8013da6:	2b0d      	cmp	r3, #13
 8013da8:	d907      	bls.n	8013dba <memp_free+0x22>
 8013daa:	4b0c      	ldr	r3, [pc, #48]	; (8013ddc <memp_free+0x44>)
 8013dac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013db0:	490b      	ldr	r1, [pc, #44]	; (8013de0 <memp_free+0x48>)
 8013db2:	480c      	ldr	r0, [pc, #48]	; (8013de4 <memp_free+0x4c>)
 8013db4:	f00d ff7a 	bl	8021cac <iprintf>
 8013db8:	e00c      	b.n	8013dd4 <memp_free+0x3c>

  if (mem == NULL) {
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d008      	beq.n	8013dd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013dc0:	79fb      	ldrb	r3, [r7, #7]
 8013dc2:	4a09      	ldr	r2, [pc, #36]	; (8013de8 <memp_free+0x50>)
 8013dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dc8:	6839      	ldr	r1, [r7, #0]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7ff ffb8 	bl	8013d40 <do_memp_free_pool>
 8013dd0:	e000      	b.n	8013dd4 <memp_free+0x3c>
    return;
 8013dd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013dd4:	3708      	adds	r7, #8
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	08026cc0 	.word	0x08026cc0
 8013de0:	08026d90 	.word	0x08026d90
 8013de4:	08026d14 	.word	0x08026d14
 8013de8:	08029a58 	.word	0x08029a58

08013dec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013dec:	b480      	push	{r7}
 8013dee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013df0:	bf00      	nop
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr
	...

08013dfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b086      	sub	sp, #24
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	60b9      	str	r1, [r7, #8]
 8013e06:	607a      	str	r2, [r7, #4]
 8013e08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d108      	bne.n	8013e22 <netif_add+0x26>
 8013e10:	4b5b      	ldr	r3, [pc, #364]	; (8013f80 <netif_add+0x184>)
 8013e12:	f240 1227 	movw	r2, #295	; 0x127
 8013e16:	495b      	ldr	r1, [pc, #364]	; (8013f84 <netif_add+0x188>)
 8013e18:	485b      	ldr	r0, [pc, #364]	; (8013f88 <netif_add+0x18c>)
 8013e1a:	f00d ff47 	bl	8021cac <iprintf>
 8013e1e:	2300      	movs	r3, #0
 8013e20:	e0a9      	b.n	8013f76 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d108      	bne.n	8013e3a <netif_add+0x3e>
 8013e28:	4b55      	ldr	r3, [pc, #340]	; (8013f80 <netif_add+0x184>)
 8013e2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013e2e:	4957      	ldr	r1, [pc, #348]	; (8013f8c <netif_add+0x190>)
 8013e30:	4855      	ldr	r0, [pc, #340]	; (8013f88 <netif_add+0x18c>)
 8013e32:	f00d ff3b 	bl	8021cac <iprintf>
 8013e36:	2300      	movs	r3, #0
 8013e38:	e09d      	b.n	8013f76 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d101      	bne.n	8013e44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013e40:	4b53      	ldr	r3, [pc, #332]	; (8013f90 <netif_add+0x194>)
 8013e42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d101      	bne.n	8013e4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013e4a:	4b51      	ldr	r3, [pc, #324]	; (8013f90 <netif_add+0x194>)
 8013e4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d101      	bne.n	8013e58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013e54:	4b4e      	ldr	r3, [pc, #312]	; (8013f90 <netif_add+0x194>)
 8013e56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2200      	movs	r2, #0
 8013e62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2200      	movs	r2, #0
 8013e68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	4a49      	ldr	r2, [pc, #292]	; (8013f94 <netif_add+0x198>)
 8013e6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2200      	movs	r2, #0
 8013e74:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	3324      	adds	r3, #36	; 0x24
 8013e82:	2204      	movs	r2, #4
 8013e84:	2100      	movs	r1, #0
 8013e86:	4618      	mov	r0, r3
 8013e88:	f00d f9f4 	bl	8021274 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6a3a      	ldr	r2, [r7, #32]
 8013e96:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013e98:	4b3f      	ldr	r3, [pc, #252]	; (8013f98 <netif_add+0x19c>)
 8013e9a:	781a      	ldrb	r2, [r3, #0]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ea6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	68b9      	ldr	r1, [r7, #8]
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f000 f914 	bl	80140dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	4798      	blx	r3
 8013eba:	4603      	mov	r3, r0
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d001      	beq.n	8013ec4 <netif_add+0xc8>
    return NULL;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	e058      	b.n	8013f76 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013eca:	2bff      	cmp	r3, #255	; 0xff
 8013ecc:	d103      	bne.n	8013ed6 <netif_add+0xda>
        netif->num = 0;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013eda:	4b30      	ldr	r3, [pc, #192]	; (8013f9c <netif_add+0x1a0>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	617b      	str	r3, [r7, #20]
 8013ee0:	e02b      	b.n	8013f3a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013ee2:	697a      	ldr	r2, [r7, #20]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d106      	bne.n	8013ef8 <netif_add+0xfc>
 8013eea:	4b25      	ldr	r3, [pc, #148]	; (8013f80 <netif_add+0x184>)
 8013eec:	f240 128b 	movw	r2, #395	; 0x18b
 8013ef0:	492b      	ldr	r1, [pc, #172]	; (8013fa0 <netif_add+0x1a4>)
 8013ef2:	4825      	ldr	r0, [pc, #148]	; (8013f88 <netif_add+0x18c>)
 8013ef4:	f00d feda 	bl	8021cac <iprintf>
        num_netifs++;
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	3301      	adds	r3, #1
 8013efc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	2bff      	cmp	r3, #255	; 0xff
 8013f02:	dd06      	ble.n	8013f12 <netif_add+0x116>
 8013f04:	4b1e      	ldr	r3, [pc, #120]	; (8013f80 <netif_add+0x184>)
 8013f06:	f240 128d 	movw	r2, #397	; 0x18d
 8013f0a:	4926      	ldr	r1, [pc, #152]	; (8013fa4 <netif_add+0x1a8>)
 8013f0c:	481e      	ldr	r0, [pc, #120]	; (8013f88 <netif_add+0x18c>)
 8013f0e:	f00d fecd 	bl	8021cac <iprintf>
        if (netif2->num == netif->num) {
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d108      	bne.n	8013f34 <netif_add+0x138>
          netif->num++;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8013f32:	e005      	b.n	8013f40 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	617b      	str	r3, [r7, #20]
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d1d0      	bne.n	8013ee2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d1be      	bne.n	8013ec4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f4c:	2bfe      	cmp	r3, #254	; 0xfe
 8013f4e:	d103      	bne.n	8013f58 <netif_add+0x15c>
    netif_num = 0;
 8013f50:	4b11      	ldr	r3, [pc, #68]	; (8013f98 <netif_add+0x19c>)
 8013f52:	2200      	movs	r2, #0
 8013f54:	701a      	strb	r2, [r3, #0]
 8013f56:	e006      	b.n	8013f66 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013f5e:	3301      	adds	r3, #1
 8013f60:	b2da      	uxtb	r2, r3
 8013f62:	4b0d      	ldr	r3, [pc, #52]	; (8013f98 <netif_add+0x19c>)
 8013f64:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013f66:	4b0d      	ldr	r3, [pc, #52]	; (8013f9c <netif_add+0x1a0>)
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013f6e:	4a0b      	ldr	r2, [pc, #44]	; (8013f9c <netif_add+0x1a0>)
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013f74:	68fb      	ldr	r3, [r7, #12]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3718      	adds	r7, #24
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	08026dac 	.word	0x08026dac
 8013f84:	08026e40 	.word	0x08026e40
 8013f88:	08026dfc 	.word	0x08026dfc
 8013f8c:	08026e5c 	.word	0x08026e5c
 8013f90:	08029ae8 	.word	0x08029ae8
 8013f94:	080143bf 	.word	0x080143bf
 8013f98:	2001437c 	.word	0x2001437c
 8013f9c:	2001b18c 	.word	0x2001b18c
 8013fa0:	08026e80 	.word	0x08026e80
 8013fa4:	08026e94 	.word	0x08026e94

08013fa8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013fb2:	6839      	ldr	r1, [r7, #0]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f003 f929 	bl	801720c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f008 fac3 	bl	801c548 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
	...

08013fcc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b086      	sub	sp, #24
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d106      	bne.n	8013fec <netif_do_set_ipaddr+0x20>
 8013fde:	4b1d      	ldr	r3, [pc, #116]	; (8014054 <netif_do_set_ipaddr+0x88>)
 8013fe0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013fe4:	491c      	ldr	r1, [pc, #112]	; (8014058 <netif_do_set_ipaddr+0x8c>)
 8013fe6:	481d      	ldr	r0, [pc, #116]	; (801405c <netif_do_set_ipaddr+0x90>)
 8013fe8:	f00d fe60 	bl	8021cac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d106      	bne.n	8014000 <netif_do_set_ipaddr+0x34>
 8013ff2:	4b18      	ldr	r3, [pc, #96]	; (8014054 <netif_do_set_ipaddr+0x88>)
 8013ff4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013ff8:	4917      	ldr	r1, [pc, #92]	; (8014058 <netif_do_set_ipaddr+0x8c>)
 8013ffa:	4818      	ldr	r0, [pc, #96]	; (801405c <netif_do_set_ipaddr+0x90>)
 8013ffc:	f00d fe56 	bl	8021cac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	3304      	adds	r3, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	429a      	cmp	r2, r3
 801400c:	d01c      	beq.n	8014048 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	3304      	adds	r3, #4
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801401e:	f107 0314 	add.w	r3, r7, #20
 8014022:	4619      	mov	r1, r3
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7ff ffbf 	bl	8013fa8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d002      	beq.n	8014036 <netif_do_set_ipaddr+0x6a>
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	e000      	b.n	8014038 <netif_do_set_ipaddr+0x6c>
 8014036:	2300      	movs	r3, #0
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801403c:	2101      	movs	r1, #1
 801403e:	68f8      	ldr	r0, [r7, #12]
 8014040:	f000 f8d2 	bl	80141e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014044:	2301      	movs	r3, #1
 8014046:	e000      	b.n	801404a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014048:	2300      	movs	r3, #0
}
 801404a:	4618      	mov	r0, r3
 801404c:	3718      	adds	r7, #24
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	08026dac 	.word	0x08026dac
 8014058:	08026ec4 	.word	0x08026ec4
 801405c:	08026dfc 	.word	0x08026dfc

08014060 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014060:	b480      	push	{r7}
 8014062:	b085      	sub	sp, #20
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	3308      	adds	r3, #8
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	429a      	cmp	r2, r3
 8014078:	d00a      	beq.n	8014090 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d002      	beq.n	8014086 <netif_do_set_netmask+0x26>
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	e000      	b.n	8014088 <netif_do_set_netmask+0x28>
 8014086:	2300      	movs	r3, #0
 8014088:	68fa      	ldr	r2, [r7, #12]
 801408a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801408c:	2301      	movs	r3, #1
 801408e:	e000      	b.n	8014092 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3714      	adds	r7, #20
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr

0801409e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801409e:	b480      	push	{r7}
 80140a0:	b085      	sub	sp, #20
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	60f8      	str	r0, [r7, #12]
 80140a6:	60b9      	str	r1, [r7, #8]
 80140a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	330c      	adds	r3, #12
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d00a      	beq.n	80140ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d002      	beq.n	80140c4 <netif_do_set_gw+0x26>
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	e000      	b.n	80140c6 <netif_do_set_gw+0x28>
 80140c4:	2300      	movs	r3, #0
 80140c6:	68fa      	ldr	r2, [r7, #12]
 80140c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80140ca:	2301      	movs	r3, #1
 80140cc:	e000      	b.n	80140d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80140ce:	2300      	movs	r3, #0
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3714      	adds	r7, #20
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr

080140dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b088      	sub	sp, #32
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
 80140e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80140ea:	2300      	movs	r3, #0
 80140ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80140ee:	2300      	movs	r3, #0
 80140f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d101      	bne.n	80140fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80140f8:	4b1c      	ldr	r3, [pc, #112]	; (801416c <netif_set_addr+0x90>)
 80140fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d101      	bne.n	8014106 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014102:	4b1a      	ldr	r3, [pc, #104]	; (801416c <netif_set_addr+0x90>)
 8014104:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014106:	683b      	ldr	r3, [r7, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d101      	bne.n	8014110 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801410c:	4b17      	ldr	r3, [pc, #92]	; (801416c <netif_set_addr+0x90>)
 801410e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d003      	beq.n	801411e <netif_set_addr+0x42>
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d101      	bne.n	8014122 <netif_set_addr+0x46>
 801411e:	2301      	movs	r3, #1
 8014120:	e000      	b.n	8014124 <netif_set_addr+0x48>
 8014122:	2300      	movs	r3, #0
 8014124:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d006      	beq.n	801413a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801412c:	f107 0310 	add.w	r3, r7, #16
 8014130:	461a      	mov	r2, r3
 8014132:	68b9      	ldr	r1, [r7, #8]
 8014134:	68f8      	ldr	r0, [r7, #12]
 8014136:	f7ff ff49 	bl	8013fcc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801413a:	69fa      	ldr	r2, [r7, #28]
 801413c:	6879      	ldr	r1, [r7, #4]
 801413e:	68f8      	ldr	r0, [r7, #12]
 8014140:	f7ff ff8e 	bl	8014060 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014144:	69ba      	ldr	r2, [r7, #24]
 8014146:	6839      	ldr	r1, [r7, #0]
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f7ff ffa8 	bl	801409e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d106      	bne.n	8014162 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014154:	f107 0310 	add.w	r3, r7, #16
 8014158:	461a      	mov	r2, r3
 801415a:	68b9      	ldr	r1, [r7, #8]
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f7ff ff35 	bl	8013fcc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014162:	bf00      	nop
 8014164:	3720      	adds	r7, #32
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	08029ae8 	.word	0x08029ae8

08014170 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014170:	b480      	push	{r7}
 8014172:	b083      	sub	sp, #12
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014178:	4a04      	ldr	r2, [pc, #16]	; (801418c <netif_set_default+0x1c>)
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801417e:	bf00      	nop
 8014180:	370c      	adds	r7, #12
 8014182:	46bd      	mov	sp, r7
 8014184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014188:	4770      	bx	lr
 801418a:	bf00      	nop
 801418c:	2001b190 	.word	0x2001b190

08014190 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d107      	bne.n	80141ae <netif_set_up+0x1e>
 801419e:	4b0f      	ldr	r3, [pc, #60]	; (80141dc <netif_set_up+0x4c>)
 80141a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80141a4:	490e      	ldr	r1, [pc, #56]	; (80141e0 <netif_set_up+0x50>)
 80141a6:	480f      	ldr	r0, [pc, #60]	; (80141e4 <netif_set_up+0x54>)
 80141a8:	f00d fd80 	bl	8021cac <iprintf>
 80141ac:	e013      	b.n	80141d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141b4:	f003 0301 	and.w	r3, r3, #1
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d10c      	bne.n	80141d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141c2:	f043 0301 	orr.w	r3, r3, #1
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80141ce:	2103      	movs	r1, #3
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f000 f809 	bl	80141e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	08026dac 	.word	0x08026dac
 80141e0:	08026f34 	.word	0x08026f34
 80141e4:	08026dfc 	.word	0x08026dfc

080141e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	460b      	mov	r3, r1
 80141f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d106      	bne.n	8014208 <netif_issue_reports+0x20>
 80141fa:	4b18      	ldr	r3, [pc, #96]	; (801425c <netif_issue_reports+0x74>)
 80141fc:	f240 326d 	movw	r2, #877	; 0x36d
 8014200:	4917      	ldr	r1, [pc, #92]	; (8014260 <netif_issue_reports+0x78>)
 8014202:	4818      	ldr	r0, [pc, #96]	; (8014264 <netif_issue_reports+0x7c>)
 8014204:	f00d fd52 	bl	8021cac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801420e:	f003 0304 	and.w	r3, r3, #4
 8014212:	2b00      	cmp	r3, #0
 8014214:	d01e      	beq.n	8014254 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801421c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014220:	2b00      	cmp	r3, #0
 8014222:	d017      	beq.n	8014254 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014224:	78fb      	ldrb	r3, [r7, #3]
 8014226:	f003 0301 	and.w	r3, r3, #1
 801422a:	2b00      	cmp	r3, #0
 801422c:	d013      	beq.n	8014256 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	3304      	adds	r3, #4
 8014232:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00e      	beq.n	8014256 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801423e:	f003 0308 	and.w	r3, r3, #8
 8014242:	2b00      	cmp	r3, #0
 8014244:	d007      	beq.n	8014256 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	3304      	adds	r3, #4
 801424a:	4619      	mov	r1, r3
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f00b f807 	bl	801f260 <etharp_request>
 8014252:	e000      	b.n	8014256 <netif_issue_reports+0x6e>
    return;
 8014254:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}
 801425c:	08026dac 	.word	0x08026dac
 8014260:	08026f50 	.word	0x08026f50
 8014264:	08026dfc 	.word	0x08026dfc

08014268 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d107      	bne.n	8014286 <netif_set_down+0x1e>
 8014276:	4b12      	ldr	r3, [pc, #72]	; (80142c0 <netif_set_down+0x58>)
 8014278:	f240 329b 	movw	r2, #923	; 0x39b
 801427c:	4911      	ldr	r1, [pc, #68]	; (80142c4 <netif_set_down+0x5c>)
 801427e:	4812      	ldr	r0, [pc, #72]	; (80142c8 <netif_set_down+0x60>)
 8014280:	f00d fd14 	bl	8021cac <iprintf>
 8014284:	e019      	b.n	80142ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801428c:	f003 0301 	and.w	r3, r3, #1
 8014290:	2b00      	cmp	r3, #0
 8014292:	d012      	beq.n	80142ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801429a:	f023 0301 	bic.w	r3, r3, #1
 801429e:	b2da      	uxtb	r2, r3
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80142ac:	f003 0308 	and.w	r3, r3, #8
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d002      	beq.n	80142ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f00a fb8d 	bl	801e9d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80142ba:	3708      	adds	r7, #8
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	08026dac 	.word	0x08026dac
 80142c4:	08026f74 	.word	0x08026f74
 80142c8:	08026dfc 	.word	0x08026dfc

080142cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d107      	bne.n	80142ea <netif_set_link_up+0x1e>
 80142da:	4b15      	ldr	r3, [pc, #84]	; (8014330 <netif_set_link_up+0x64>)
 80142dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80142e0:	4914      	ldr	r1, [pc, #80]	; (8014334 <netif_set_link_up+0x68>)
 80142e2:	4815      	ldr	r0, [pc, #84]	; (8014338 <netif_set_link_up+0x6c>)
 80142e4:	f00d fce2 	bl	8021cac <iprintf>
 80142e8:	e01e      	b.n	8014328 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80142f0:	f003 0304 	and.w	r3, r3, #4
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d117      	bne.n	8014328 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80142fe:	f043 0304 	orr.w	r3, r3, #4
 8014302:	b2da      	uxtb	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f008 fd66 	bl	801cddc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014310:	2103      	movs	r1, #3
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f7ff ff68 	bl	80141e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	69db      	ldr	r3, [r3, #28]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d003      	beq.n	8014328 <netif_set_link_up+0x5c>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	69db      	ldr	r3, [r3, #28]
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014328:	3708      	adds	r7, #8
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	08026dac 	.word	0x08026dac
 8014334:	08026f94 	.word	0x08026f94
 8014338:	08026dfc 	.word	0x08026dfc

0801433c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d107      	bne.n	801435a <netif_set_link_down+0x1e>
 801434a:	4b11      	ldr	r3, [pc, #68]	; (8014390 <netif_set_link_down+0x54>)
 801434c:	f240 4206 	movw	r2, #1030	; 0x406
 8014350:	4910      	ldr	r1, [pc, #64]	; (8014394 <netif_set_link_down+0x58>)
 8014352:	4811      	ldr	r0, [pc, #68]	; (8014398 <netif_set_link_down+0x5c>)
 8014354:	f00d fcaa 	bl	8021cac <iprintf>
 8014358:	e017      	b.n	801438a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014360:	f003 0304 	and.w	r3, r3, #4
 8014364:	2b00      	cmp	r3, #0
 8014366:	d010      	beq.n	801438a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801436e:	f023 0304 	bic.w	r3, r3, #4
 8014372:	b2da      	uxtb	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	69db      	ldr	r3, [r3, #28]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d003      	beq.n	801438a <netif_set_link_down+0x4e>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	69db      	ldr	r3, [r3, #28]
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801438a:	3708      	adds	r7, #8
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	08026dac 	.word	0x08026dac
 8014394:	08026fb8 	.word	0x08026fb8
 8014398:	08026dfc 	.word	0x08026dfc

0801439c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d002      	beq.n	80143b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	683a      	ldr	r2, [r7, #0]
 80143b0:	61da      	str	r2, [r3, #28]
  }
}
 80143b2:	bf00      	nop
 80143b4:	370c      	adds	r7, #12
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr

080143be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80143be:	b480      	push	{r7}
 80143c0:	b085      	sub	sp, #20
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	60f8      	str	r0, [r7, #12]
 80143c6:	60b9      	str	r1, [r7, #8]
 80143c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80143ca:	f06f 030b 	mvn.w	r3, #11
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3714      	adds	r7, #20
 80143d2:	46bd      	mov	sp, r7
 80143d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d8:	4770      	bx	lr
	...

080143dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80143dc:	b480      	push	{r7}
 80143de:	b085      	sub	sp, #20
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	4603      	mov	r3, r0
 80143e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80143e6:	79fb      	ldrb	r3, [r7, #7]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d013      	beq.n	8014414 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80143ec:	4b0d      	ldr	r3, [pc, #52]	; (8014424 <netif_get_by_index+0x48>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	60fb      	str	r3, [r7, #12]
 80143f2:	e00c      	b.n	801440e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80143fa:	3301      	adds	r3, #1
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	79fa      	ldrb	r2, [r7, #7]
 8014400:	429a      	cmp	r2, r3
 8014402:	d101      	bne.n	8014408 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	e006      	b.n	8014416 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	60fb      	str	r3, [r7, #12]
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d1ef      	bne.n	80143f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	3714      	adds	r7, #20
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop
 8014424:	2001b18c 	.word	0x2001b18c

08014428 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801442e:	f00c fd9f 	bl	8020f70 <sys_arch_protect>
 8014432:	6038      	str	r0, [r7, #0]
 8014434:	4b0d      	ldr	r3, [pc, #52]	; (801446c <pbuf_free_ooseq+0x44>)
 8014436:	2200      	movs	r2, #0
 8014438:	701a      	strb	r2, [r3, #0]
 801443a:	6838      	ldr	r0, [r7, #0]
 801443c:	f00c fda6 	bl	8020f8c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014440:	4b0b      	ldr	r3, [pc, #44]	; (8014470 <pbuf_free_ooseq+0x48>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	607b      	str	r3, [r7, #4]
 8014446:	e00a      	b.n	801445e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801444c:	2b00      	cmp	r3, #0
 801444e:	d003      	beq.n	8014458 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f002 ff19 	bl	8017288 <tcp_free_ooseq>
      return;
 8014456:	e005      	b.n	8014464 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	607b      	str	r3, [r7, #4]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d1f1      	bne.n	8014448 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014464:	3708      	adds	r7, #8
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	2001b194 	.word	0x2001b194
 8014470:	2001b19c 	.word	0x2001b19c

08014474 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801447c:	f7ff ffd4 	bl	8014428 <pbuf_free_ooseq>
}
 8014480:	bf00      	nop
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801448e:	f00c fd6f 	bl	8020f70 <sys_arch_protect>
 8014492:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014494:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <pbuf_pool_is_empty+0x4c>)
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801449a:	4b0e      	ldr	r3, [pc, #56]	; (80144d4 <pbuf_pool_is_empty+0x4c>)
 801449c:	2201      	movs	r2, #1
 801449e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80144a0:	6878      	ldr	r0, [r7, #4]
 80144a2:	f00c fd73 	bl	8020f8c <sys_arch_unprotect>

  if (!queued) {
 80144a6:	78fb      	ldrb	r3, [r7, #3]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d10f      	bne.n	80144cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80144ac:	2100      	movs	r1, #0
 80144ae:	480a      	ldr	r0, [pc, #40]	; (80144d8 <pbuf_pool_is_empty+0x50>)
 80144b0:	f7fd fef4 	bl	801229c <tcpip_try_callback>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d008      	beq.n	80144cc <pbuf_pool_is_empty+0x44>
 80144ba:	f00c fd59 	bl	8020f70 <sys_arch_protect>
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	4b04      	ldr	r3, [pc, #16]	; (80144d4 <pbuf_pool_is_empty+0x4c>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	701a      	strb	r2, [r3, #0]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f00c fd60 	bl	8020f8c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80144cc:	bf00      	nop
 80144ce:	3708      	adds	r7, #8
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	2001b194 	.word	0x2001b194
 80144d8:	08014475 	.word	0x08014475

080144dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80144dc:	b480      	push	{r7}
 80144de:	b085      	sub	sp, #20
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	4611      	mov	r1, r2
 80144e8:	461a      	mov	r2, r3
 80144ea:	460b      	mov	r3, r1
 80144ec:	80fb      	strh	r3, [r7, #6]
 80144ee:	4613      	mov	r3, r2
 80144f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2200      	movs	r2, #0
 80144f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	68ba      	ldr	r2, [r7, #8]
 80144fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	88fa      	ldrh	r2, [r7, #6]
 8014502:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	88ba      	ldrh	r2, [r7, #4]
 8014508:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801450a:	8b3b      	ldrh	r3, [r7, #24]
 801450c:	b2da      	uxtb	r2, r3
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	7f3a      	ldrb	r2, [r7, #28]
 8014516:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2201      	movs	r2, #1
 801451c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	2200      	movs	r2, #0
 8014522:	73da      	strb	r2, [r3, #15]
}
 8014524:	bf00      	nop
 8014526:	3714      	adds	r7, #20
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b08c      	sub	sp, #48	; 0x30
 8014534:	af02      	add	r7, sp, #8
 8014536:	4603      	mov	r3, r0
 8014538:	71fb      	strb	r3, [r7, #7]
 801453a:	460b      	mov	r3, r1
 801453c:	80bb      	strh	r3, [r7, #4]
 801453e:	4613      	mov	r3, r2
 8014540:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014542:	79fb      	ldrb	r3, [r7, #7]
 8014544:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014546:	887b      	ldrh	r3, [r7, #2]
 8014548:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801454c:	d07f      	beq.n	801464e <pbuf_alloc+0x11e>
 801454e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014552:	f300 80c8 	bgt.w	80146e6 <pbuf_alloc+0x1b6>
 8014556:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801455a:	d010      	beq.n	801457e <pbuf_alloc+0x4e>
 801455c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014560:	f300 80c1 	bgt.w	80146e6 <pbuf_alloc+0x1b6>
 8014564:	2b01      	cmp	r3, #1
 8014566:	d002      	beq.n	801456e <pbuf_alloc+0x3e>
 8014568:	2b41      	cmp	r3, #65	; 0x41
 801456a:	f040 80bc 	bne.w	80146e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801456e:	887a      	ldrh	r2, [r7, #2]
 8014570:	88bb      	ldrh	r3, [r7, #4]
 8014572:	4619      	mov	r1, r3
 8014574:	2000      	movs	r0, #0
 8014576:	f000 f8d1 	bl	801471c <pbuf_alloc_reference>
 801457a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801457c:	e0bd      	b.n	80146fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801457e:	2300      	movs	r3, #0
 8014580:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014586:	88bb      	ldrh	r3, [r7, #4]
 8014588:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801458a:	200d      	movs	r0, #13
 801458c:	f7ff fbb2 	bl	8013cf4 <memp_malloc>
 8014590:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d109      	bne.n	80145ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014598:	f7ff ff76 	bl	8014488 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d002      	beq.n	80145a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80145a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145a4:	f000 fada 	bl	8014b5c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80145a8:	2300      	movs	r3, #0
 80145aa:	e0a7      	b.n	80146fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80145ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145ae:	3303      	adds	r3, #3
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	f023 0303 	bic.w	r3, r3, #3
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80145bc:	b29b      	uxth	r3, r3
 80145be:	8b7a      	ldrh	r2, [r7, #26]
 80145c0:	4293      	cmp	r3, r2
 80145c2:	bf28      	it	cs
 80145c4:	4613      	movcs	r3, r2
 80145c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80145c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145ca:	3310      	adds	r3, #16
 80145cc:	693a      	ldr	r2, [r7, #16]
 80145ce:	4413      	add	r3, r2
 80145d0:	3303      	adds	r3, #3
 80145d2:	f023 0303 	bic.w	r3, r3, #3
 80145d6:	4618      	mov	r0, r3
 80145d8:	89f9      	ldrh	r1, [r7, #14]
 80145da:	8b7a      	ldrh	r2, [r7, #26]
 80145dc:	2300      	movs	r3, #0
 80145de:	9301      	str	r3, [sp, #4]
 80145e0:	887b      	ldrh	r3, [r7, #2]
 80145e2:	9300      	str	r3, [sp, #0]
 80145e4:	460b      	mov	r3, r1
 80145e6:	4601      	mov	r1, r0
 80145e8:	6938      	ldr	r0, [r7, #16]
 80145ea:	f7ff ff77 	bl	80144dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	f003 0303 	and.w	r3, r3, #3
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d006      	beq.n	8014608 <pbuf_alloc+0xd8>
 80145fa:	4b42      	ldr	r3, [pc, #264]	; (8014704 <pbuf_alloc+0x1d4>)
 80145fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014600:	4941      	ldr	r1, [pc, #260]	; (8014708 <pbuf_alloc+0x1d8>)
 8014602:	4842      	ldr	r0, [pc, #264]	; (801470c <pbuf_alloc+0x1dc>)
 8014604:	f00d fb52 	bl	8021cac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801460a:	3303      	adds	r3, #3
 801460c:	f023 0303 	bic.w	r3, r3, #3
 8014610:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014614:	d106      	bne.n	8014624 <pbuf_alloc+0xf4>
 8014616:	4b3b      	ldr	r3, [pc, #236]	; (8014704 <pbuf_alloc+0x1d4>)
 8014618:	f44f 7281 	mov.w	r2, #258	; 0x102
 801461c:	493c      	ldr	r1, [pc, #240]	; (8014710 <pbuf_alloc+0x1e0>)
 801461e:	483b      	ldr	r0, [pc, #236]	; (801470c <pbuf_alloc+0x1dc>)
 8014620:	f00d fb44 	bl	8021cac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014626:	2b00      	cmp	r3, #0
 8014628:	d102      	bne.n	8014630 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	627b      	str	r3, [r7, #36]	; 0x24
 801462e:	e002      	b.n	8014636 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	693a      	ldr	r2, [r7, #16]
 8014634:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801463a:	8b7a      	ldrh	r2, [r7, #26]
 801463c:	89fb      	ldrh	r3, [r7, #14]
 801463e:	1ad3      	subs	r3, r2, r3
 8014640:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014642:	2300      	movs	r3, #0
 8014644:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014646:	8b7b      	ldrh	r3, [r7, #26]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d19e      	bne.n	801458a <pbuf_alloc+0x5a>
      break;
 801464c:	e055      	b.n	80146fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801464e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014650:	3303      	adds	r3, #3
 8014652:	b29b      	uxth	r3, r3
 8014654:	f023 0303 	bic.w	r3, r3, #3
 8014658:	b29a      	uxth	r2, r3
 801465a:	88bb      	ldrh	r3, [r7, #4]
 801465c:	3303      	adds	r3, #3
 801465e:	b29b      	uxth	r3, r3
 8014660:	f023 0303 	bic.w	r3, r3, #3
 8014664:	b29b      	uxth	r3, r3
 8014666:	4413      	add	r3, r2
 8014668:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801466a:	8b3b      	ldrh	r3, [r7, #24]
 801466c:	3310      	adds	r3, #16
 801466e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014670:	8b3a      	ldrh	r2, [r7, #24]
 8014672:	88bb      	ldrh	r3, [r7, #4]
 8014674:	3303      	adds	r3, #3
 8014676:	f023 0303 	bic.w	r3, r3, #3
 801467a:	429a      	cmp	r2, r3
 801467c:	d306      	bcc.n	801468c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801467e:	8afa      	ldrh	r2, [r7, #22]
 8014680:	88bb      	ldrh	r3, [r7, #4]
 8014682:	3303      	adds	r3, #3
 8014684:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014688:	429a      	cmp	r2, r3
 801468a:	d201      	bcs.n	8014690 <pbuf_alloc+0x160>
        return NULL;
 801468c:	2300      	movs	r3, #0
 801468e:	e035      	b.n	80146fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014690:	8afb      	ldrh	r3, [r7, #22]
 8014692:	4618      	mov	r0, r3
 8014694:	f7ff f9ac 	bl	80139f0 <mem_malloc>
 8014698:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <pbuf_alloc+0x174>
        return NULL;
 80146a0:	2300      	movs	r3, #0
 80146a2:	e02b      	b.n	80146fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80146a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146a6:	3310      	adds	r3, #16
 80146a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146aa:	4413      	add	r3, r2
 80146ac:	3303      	adds	r3, #3
 80146ae:	f023 0303 	bic.w	r3, r3, #3
 80146b2:	4618      	mov	r0, r3
 80146b4:	88b9      	ldrh	r1, [r7, #4]
 80146b6:	88ba      	ldrh	r2, [r7, #4]
 80146b8:	2300      	movs	r3, #0
 80146ba:	9301      	str	r3, [sp, #4]
 80146bc:	887b      	ldrh	r3, [r7, #2]
 80146be:	9300      	str	r3, [sp, #0]
 80146c0:	460b      	mov	r3, r1
 80146c2:	4601      	mov	r1, r0
 80146c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146c6:	f7ff ff09 	bl	80144dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	f003 0303 	and.w	r3, r3, #3
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d010      	beq.n	80146f8 <pbuf_alloc+0x1c8>
 80146d6:	4b0b      	ldr	r3, [pc, #44]	; (8014704 <pbuf_alloc+0x1d4>)
 80146d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80146dc:	490d      	ldr	r1, [pc, #52]	; (8014714 <pbuf_alloc+0x1e4>)
 80146de:	480b      	ldr	r0, [pc, #44]	; (801470c <pbuf_alloc+0x1dc>)
 80146e0:	f00d fae4 	bl	8021cac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80146e4:	e008      	b.n	80146f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80146e6:	4b07      	ldr	r3, [pc, #28]	; (8014704 <pbuf_alloc+0x1d4>)
 80146e8:	f240 1227 	movw	r2, #295	; 0x127
 80146ec:	490a      	ldr	r1, [pc, #40]	; (8014718 <pbuf_alloc+0x1e8>)
 80146ee:	4807      	ldr	r0, [pc, #28]	; (801470c <pbuf_alloc+0x1dc>)
 80146f0:	f00d fadc 	bl	8021cac <iprintf>
      return NULL;
 80146f4:	2300      	movs	r3, #0
 80146f6:	e001      	b.n	80146fc <pbuf_alloc+0x1cc>
      break;
 80146f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80146fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3728      	adds	r7, #40	; 0x28
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	08026fdc 	.word	0x08026fdc
 8014708:	0802700c 	.word	0x0802700c
 801470c:	0802703c 	.word	0x0802703c
 8014710:	08027064 	.word	0x08027064
 8014714:	08027098 	.word	0x08027098
 8014718:	080270c4 	.word	0x080270c4

0801471c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b086      	sub	sp, #24
 8014720:	af02      	add	r7, sp, #8
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	460b      	mov	r3, r1
 8014726:	807b      	strh	r3, [r7, #2]
 8014728:	4613      	mov	r3, r2
 801472a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801472c:	883b      	ldrh	r3, [r7, #0]
 801472e:	2b41      	cmp	r3, #65	; 0x41
 8014730:	d009      	beq.n	8014746 <pbuf_alloc_reference+0x2a>
 8014732:	883b      	ldrh	r3, [r7, #0]
 8014734:	2b01      	cmp	r3, #1
 8014736:	d006      	beq.n	8014746 <pbuf_alloc_reference+0x2a>
 8014738:	4b0f      	ldr	r3, [pc, #60]	; (8014778 <pbuf_alloc_reference+0x5c>)
 801473a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801473e:	490f      	ldr	r1, [pc, #60]	; (801477c <pbuf_alloc_reference+0x60>)
 8014740:	480f      	ldr	r0, [pc, #60]	; (8014780 <pbuf_alloc_reference+0x64>)
 8014742:	f00d fab3 	bl	8021cac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014746:	200c      	movs	r0, #12
 8014748:	f7ff fad4 	bl	8013cf4 <memp_malloc>
 801474c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d101      	bne.n	8014758 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014754:	2300      	movs	r3, #0
 8014756:	e00b      	b.n	8014770 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014758:	8879      	ldrh	r1, [r7, #2]
 801475a:	887a      	ldrh	r2, [r7, #2]
 801475c:	2300      	movs	r3, #0
 801475e:	9301      	str	r3, [sp, #4]
 8014760:	883b      	ldrh	r3, [r7, #0]
 8014762:	9300      	str	r3, [sp, #0]
 8014764:	460b      	mov	r3, r1
 8014766:	6879      	ldr	r1, [r7, #4]
 8014768:	68f8      	ldr	r0, [r7, #12]
 801476a:	f7ff feb7 	bl	80144dc <pbuf_init_alloced_pbuf>
  return p;
 801476e:	68fb      	ldr	r3, [r7, #12]
}
 8014770:	4618      	mov	r0, r3
 8014772:	3710      	adds	r7, #16
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	08026fdc 	.word	0x08026fdc
 801477c:	080270e0 	.word	0x080270e0
 8014780:	0802703c 	.word	0x0802703c

08014784 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b088      	sub	sp, #32
 8014788:	af02      	add	r7, sp, #8
 801478a:	607b      	str	r3, [r7, #4]
 801478c:	4603      	mov	r3, r0
 801478e:	73fb      	strb	r3, [r7, #15]
 8014790:	460b      	mov	r3, r1
 8014792:	81bb      	strh	r3, [r7, #12]
 8014794:	4613      	mov	r3, r2
 8014796:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014798:	7bfb      	ldrb	r3, [r7, #15]
 801479a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801479c:	8a7b      	ldrh	r3, [r7, #18]
 801479e:	3303      	adds	r3, #3
 80147a0:	f023 0203 	bic.w	r2, r3, #3
 80147a4:	89bb      	ldrh	r3, [r7, #12]
 80147a6:	441a      	add	r2, r3
 80147a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d901      	bls.n	80147b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80147ae:	2300      	movs	r3, #0
 80147b0:	e018      	b.n	80147e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80147b2:	6a3b      	ldr	r3, [r7, #32]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d007      	beq.n	80147c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80147b8:	8a7b      	ldrh	r3, [r7, #18]
 80147ba:	3303      	adds	r3, #3
 80147bc:	f023 0303 	bic.w	r3, r3, #3
 80147c0:	6a3a      	ldr	r2, [r7, #32]
 80147c2:	4413      	add	r3, r2
 80147c4:	617b      	str	r3, [r7, #20]
 80147c6:	e001      	b.n	80147cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80147c8:	2300      	movs	r3, #0
 80147ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	89b9      	ldrh	r1, [r7, #12]
 80147d0:	89ba      	ldrh	r2, [r7, #12]
 80147d2:	2302      	movs	r3, #2
 80147d4:	9301      	str	r3, [sp, #4]
 80147d6:	897b      	ldrh	r3, [r7, #10]
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	460b      	mov	r3, r1
 80147dc:	6979      	ldr	r1, [r7, #20]
 80147de:	f7ff fe7d 	bl	80144dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80147e2:	687b      	ldr	r3, [r7, #4]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3718      	adds	r7, #24
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	460b      	mov	r3, r1
 80147f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d106      	bne.n	801480c <pbuf_realloc+0x20>
 80147fe:	4b3a      	ldr	r3, [pc, #232]	; (80148e8 <pbuf_realloc+0xfc>)
 8014800:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014804:	4939      	ldr	r1, [pc, #228]	; (80148ec <pbuf_realloc+0x100>)
 8014806:	483a      	ldr	r0, [pc, #232]	; (80148f0 <pbuf_realloc+0x104>)
 8014808:	f00d fa50 	bl	8021cac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	891b      	ldrh	r3, [r3, #8]
 8014810:	887a      	ldrh	r2, [r7, #2]
 8014812:	429a      	cmp	r2, r3
 8014814:	d263      	bcs.n	80148de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	891a      	ldrh	r2, [r3, #8]
 801481a:	887b      	ldrh	r3, [r7, #2]
 801481c:	1ad3      	subs	r3, r2, r3
 801481e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014820:	887b      	ldrh	r3, [r7, #2]
 8014822:	817b      	strh	r3, [r7, #10]
  q = p;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014828:	e018      	b.n	801485c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	895b      	ldrh	r3, [r3, #10]
 801482e:	897a      	ldrh	r2, [r7, #10]
 8014830:	1ad3      	subs	r3, r2, r3
 8014832:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	891a      	ldrh	r2, [r3, #8]
 8014838:	893b      	ldrh	r3, [r7, #8]
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	b29a      	uxth	r2, r3
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d106      	bne.n	801485c <pbuf_realloc+0x70>
 801484e:	4b26      	ldr	r3, [pc, #152]	; (80148e8 <pbuf_realloc+0xfc>)
 8014850:	f240 12af 	movw	r2, #431	; 0x1af
 8014854:	4927      	ldr	r1, [pc, #156]	; (80148f4 <pbuf_realloc+0x108>)
 8014856:	4826      	ldr	r0, [pc, #152]	; (80148f0 <pbuf_realloc+0x104>)
 8014858:	f00d fa28 	bl	8021cac <iprintf>
  while (rem_len > q->len) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	895b      	ldrh	r3, [r3, #10]
 8014860:	897a      	ldrh	r2, [r7, #10]
 8014862:	429a      	cmp	r2, r3
 8014864:	d8e1      	bhi.n	801482a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	7b1b      	ldrb	r3, [r3, #12]
 801486a:	f003 030f 	and.w	r3, r3, #15
 801486e:	2b00      	cmp	r3, #0
 8014870:	d121      	bne.n	80148b6 <pbuf_realloc+0xca>
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	895b      	ldrh	r3, [r3, #10]
 8014876:	897a      	ldrh	r2, [r7, #10]
 8014878:	429a      	cmp	r2, r3
 801487a:	d01c      	beq.n	80148b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	7b5b      	ldrb	r3, [r3, #13]
 8014880:	f003 0302 	and.w	r3, r3, #2
 8014884:	2b00      	cmp	r3, #0
 8014886:	d116      	bne.n	80148b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	685a      	ldr	r2, [r3, #4]
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	1ad3      	subs	r3, r2, r3
 8014890:	b29a      	uxth	r2, r3
 8014892:	897b      	ldrh	r3, [r7, #10]
 8014894:	4413      	add	r3, r2
 8014896:	b29b      	uxth	r3, r3
 8014898:	4619      	mov	r1, r3
 801489a:	68f8      	ldr	r0, [r7, #12]
 801489c:	f7fe ff9e 	bl	80137dc <mem_trim>
 80148a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d106      	bne.n	80148b6 <pbuf_realloc+0xca>
 80148a8:	4b0f      	ldr	r3, [pc, #60]	; (80148e8 <pbuf_realloc+0xfc>)
 80148aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80148ae:	4912      	ldr	r1, [pc, #72]	; (80148f8 <pbuf_realloc+0x10c>)
 80148b0:	480f      	ldr	r0, [pc, #60]	; (80148f0 <pbuf_realloc+0x104>)
 80148b2:	f00d f9fb 	bl	8021cac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	897a      	ldrh	r2, [r7, #10]
 80148ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	895a      	ldrh	r2, [r3, #10]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d004      	beq.n	80148d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	4618      	mov	r0, r3
 80148d2:	f000 f943 	bl	8014b5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	2200      	movs	r2, #0
 80148da:	601a      	str	r2, [r3, #0]
 80148dc:	e000      	b.n	80148e0 <pbuf_realloc+0xf4>
    return;
 80148de:	bf00      	nop

}
 80148e0:	3710      	adds	r7, #16
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
 80148e6:	bf00      	nop
 80148e8:	08026fdc 	.word	0x08026fdc
 80148ec:	080270f4 	.word	0x080270f4
 80148f0:	0802703c 	.word	0x0802703c
 80148f4:	0802710c 	.word	0x0802710c
 80148f8:	08027124 	.word	0x08027124

080148fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b086      	sub	sp, #24
 8014900:	af00      	add	r7, sp, #0
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	4613      	mov	r3, r2
 8014908:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d106      	bne.n	801491e <pbuf_add_header_impl+0x22>
 8014910:	4b2b      	ldr	r3, [pc, #172]	; (80149c0 <pbuf_add_header_impl+0xc4>)
 8014912:	f240 12df 	movw	r2, #479	; 0x1df
 8014916:	492b      	ldr	r1, [pc, #172]	; (80149c4 <pbuf_add_header_impl+0xc8>)
 8014918:	482b      	ldr	r0, [pc, #172]	; (80149c8 <pbuf_add_header_impl+0xcc>)
 801491a:	f00d f9c7 	bl	8021cac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d003      	beq.n	801492c <pbuf_add_header_impl+0x30>
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801492a:	d301      	bcc.n	8014930 <pbuf_add_header_impl+0x34>
    return 1;
 801492c:	2301      	movs	r3, #1
 801492e:	e043      	b.n	80149b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d101      	bne.n	801493a <pbuf_add_header_impl+0x3e>
    return 0;
 8014936:	2300      	movs	r3, #0
 8014938:	e03e      	b.n	80149b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	891a      	ldrh	r2, [r3, #8]
 8014942:	8a7b      	ldrh	r3, [r7, #18]
 8014944:	4413      	add	r3, r2
 8014946:	b29b      	uxth	r3, r3
 8014948:	8a7a      	ldrh	r2, [r7, #18]
 801494a:	429a      	cmp	r2, r3
 801494c:	d901      	bls.n	8014952 <pbuf_add_header_impl+0x56>
    return 1;
 801494e:	2301      	movs	r3, #1
 8014950:	e032      	b.n	80149b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	7b1b      	ldrb	r3, [r3, #12]
 8014956:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014958:	8a3b      	ldrh	r3, [r7, #16]
 801495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00c      	beq.n	801497c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	685a      	ldr	r2, [r3, #4]
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	425b      	negs	r3, r3
 801496a:	4413      	add	r3, r2
 801496c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3310      	adds	r3, #16
 8014972:	697a      	ldr	r2, [r7, #20]
 8014974:	429a      	cmp	r2, r3
 8014976:	d20d      	bcs.n	8014994 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014978:	2301      	movs	r3, #1
 801497a:	e01d      	b.n	80149b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801497c:	79fb      	ldrb	r3, [r7, #7]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d006      	beq.n	8014990 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	425b      	negs	r3, r3
 801498a:	4413      	add	r3, r2
 801498c:	617b      	str	r3, [r7, #20]
 801498e:	e001      	b.n	8014994 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014990:	2301      	movs	r3, #1
 8014992:	e011      	b.n	80149b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	895a      	ldrh	r2, [r3, #10]
 801499e:	8a7b      	ldrh	r3, [r7, #18]
 80149a0:	4413      	add	r3, r2
 80149a2:	b29a      	uxth	r2, r3
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	891a      	ldrh	r2, [r3, #8]
 80149ac:	8a7b      	ldrh	r3, [r7, #18]
 80149ae:	4413      	add	r3, r2
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3718      	adds	r7, #24
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	08026fdc 	.word	0x08026fdc
 80149c4:	08027140 	.word	0x08027140
 80149c8:	0802703c 	.word	0x0802703c

080149cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80149d6:	2200      	movs	r2, #0
 80149d8:	6839      	ldr	r1, [r7, #0]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7ff ff8e 	bl	80148fc <pbuf_add_header_impl>
 80149e0:	4603      	mov	r3, r0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
	...

080149ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b084      	sub	sp, #16
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d106      	bne.n	8014a0a <pbuf_remove_header+0x1e>
 80149fc:	4b20      	ldr	r3, [pc, #128]	; (8014a80 <pbuf_remove_header+0x94>)
 80149fe:	f240 224b 	movw	r2, #587	; 0x24b
 8014a02:	4920      	ldr	r1, [pc, #128]	; (8014a84 <pbuf_remove_header+0x98>)
 8014a04:	4820      	ldr	r0, [pc, #128]	; (8014a88 <pbuf_remove_header+0x9c>)
 8014a06:	f00d f951 	bl	8021cac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d003      	beq.n	8014a18 <pbuf_remove_header+0x2c>
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a16:	d301      	bcc.n	8014a1c <pbuf_remove_header+0x30>
    return 1;
 8014a18:	2301      	movs	r3, #1
 8014a1a:	e02c      	b.n	8014a76 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d101      	bne.n	8014a26 <pbuf_remove_header+0x3a>
    return 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	e027      	b.n	8014a76 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	895b      	ldrh	r3, [r3, #10]
 8014a2e:	89fa      	ldrh	r2, [r7, #14]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d908      	bls.n	8014a46 <pbuf_remove_header+0x5a>
 8014a34:	4b12      	ldr	r3, [pc, #72]	; (8014a80 <pbuf_remove_header+0x94>)
 8014a36:	f240 2255 	movw	r2, #597	; 0x255
 8014a3a:	4914      	ldr	r1, [pc, #80]	; (8014a8c <pbuf_remove_header+0xa0>)
 8014a3c:	4812      	ldr	r0, [pc, #72]	; (8014a88 <pbuf_remove_header+0x9c>)
 8014a3e:	f00d f935 	bl	8021cac <iprintf>
 8014a42:	2301      	movs	r3, #1
 8014a44:	e017      	b.n	8014a76 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	685a      	ldr	r2, [r3, #4]
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	441a      	add	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	895a      	ldrh	r2, [r3, #10]
 8014a5c:	89fb      	ldrh	r3, [r7, #14]
 8014a5e:	1ad3      	subs	r3, r2, r3
 8014a60:	b29a      	uxth	r2, r3
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	891a      	ldrh	r2, [r3, #8]
 8014a6a:	89fb      	ldrh	r3, [r7, #14]
 8014a6c:	1ad3      	subs	r3, r2, r3
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014a74:	2300      	movs	r3, #0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	08026fdc 	.word	0x08026fdc
 8014a84:	08027140 	.word	0x08027140
 8014a88:	0802703c 	.word	0x0802703c
 8014a8c:	0802714c 	.word	0x0802714c

08014a90 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	460b      	mov	r3, r1
 8014a9a:	807b      	strh	r3, [r7, #2]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	da08      	bge.n	8014aba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014aa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014aac:	425b      	negs	r3, r3
 8014aae:	4619      	mov	r1, r3
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f7ff ff9b 	bl	80149ec <pbuf_remove_header>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	e007      	b.n	8014aca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014abe:	787a      	ldrb	r2, [r7, #1]
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f7ff ff1a 	bl	80148fc <pbuf_add_header_impl>
 8014ac8:	4603      	mov	r3, r0
  }
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3708      	adds	r7, #8
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}

08014ad2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014ad2:	b580      	push	{r7, lr}
 8014ad4:	b082      	sub	sp, #8
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	6078      	str	r0, [r7, #4]
 8014ada:	460b      	mov	r3, r1
 8014adc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014ade:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f7ff ffd2 	bl	8014a90 <pbuf_header_impl>
 8014aec:	4603      	mov	r3, r0
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}

08014af6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8014af6:	b580      	push	{r7, lr}
 8014af8:	b086      	sub	sp, #24
 8014afa:	af00      	add	r7, sp, #0
 8014afc:	6078      	str	r0, [r7, #4]
 8014afe:	460b      	mov	r3, r1
 8014b00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8014b06:	887b      	ldrh	r3, [r7, #2]
 8014b08:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8014b0a:	e01c      	b.n	8014b46 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	895b      	ldrh	r3, [r3, #10]
 8014b10:	8a7a      	ldrh	r2, [r7, #18]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d310      	bcc.n	8014b38 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	895b      	ldrh	r3, [r3, #10]
 8014b1e:	8a7a      	ldrh	r2, [r7, #18]
 8014b20:	1ad3      	subs	r3, r2, r3
 8014b22:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8014b30:	68f8      	ldr	r0, [r7, #12]
 8014b32:	f000 f813 	bl	8014b5c <pbuf_free>
 8014b36:	e006      	b.n	8014b46 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8014b38:	8a7b      	ldrh	r3, [r7, #18]
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	6978      	ldr	r0, [r7, #20]
 8014b3e:	f7ff ff55 	bl	80149ec <pbuf_remove_header>
      free_left = 0;
 8014b42:	2300      	movs	r3, #0
 8014b44:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8014b46:	8a7b      	ldrh	r3, [r7, #18]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d002      	beq.n	8014b52 <pbuf_free_header+0x5c>
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d1dc      	bne.n	8014b0c <pbuf_free_header+0x16>
    }
  }
  return p;
 8014b52:	697b      	ldr	r3, [r7, #20]
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3718      	adds	r7, #24
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b088      	sub	sp, #32
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10b      	bne.n	8014b82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d106      	bne.n	8014b7e <pbuf_free+0x22>
 8014b70:	4b3b      	ldr	r3, [pc, #236]	; (8014c60 <pbuf_free+0x104>)
 8014b72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014b76:	493b      	ldr	r1, [pc, #236]	; (8014c64 <pbuf_free+0x108>)
 8014b78:	483b      	ldr	r0, [pc, #236]	; (8014c68 <pbuf_free+0x10c>)
 8014b7a:	f00d f897 	bl	8021cac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	e069      	b.n	8014c56 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014b82:	2300      	movs	r3, #0
 8014b84:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014b86:	e062      	b.n	8014c4e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014b88:	f00c f9f2 	bl	8020f70 <sys_arch_protect>
 8014b8c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	7b9b      	ldrb	r3, [r3, #14]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d106      	bne.n	8014ba4 <pbuf_free+0x48>
 8014b96:	4b32      	ldr	r3, [pc, #200]	; (8014c60 <pbuf_free+0x104>)
 8014b98:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014b9c:	4933      	ldr	r1, [pc, #204]	; (8014c6c <pbuf_free+0x110>)
 8014b9e:	4832      	ldr	r0, [pc, #200]	; (8014c68 <pbuf_free+0x10c>)
 8014ba0:	f00d f884 	bl	8021cac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	7b9b      	ldrb	r3, [r3, #14]
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	b2da      	uxtb	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	739a      	strb	r2, [r3, #14]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	7b9b      	ldrb	r3, [r3, #14]
 8014bb4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014bb6:	69b8      	ldr	r0, [r7, #24]
 8014bb8:	f00c f9e8 	bl	8020f8c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014bbc:	7dfb      	ldrb	r3, [r7, #23]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d143      	bne.n	8014c4a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	7b1b      	ldrb	r3, [r3, #12]
 8014bcc:	f003 030f 	and.w	r3, r3, #15
 8014bd0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	7b5b      	ldrb	r3, [r3, #13]
 8014bd6:	f003 0302 	and.w	r3, r3, #2
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d011      	beq.n	8014c02 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	691b      	ldr	r3, [r3, #16]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d106      	bne.n	8014bf8 <pbuf_free+0x9c>
 8014bea:	4b1d      	ldr	r3, [pc, #116]	; (8014c60 <pbuf_free+0x104>)
 8014bec:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014bf0:	491f      	ldr	r1, [pc, #124]	; (8014c70 <pbuf_free+0x114>)
 8014bf2:	481d      	ldr	r0, [pc, #116]	; (8014c68 <pbuf_free+0x10c>)
 8014bf4:	f00d f85a 	bl	8021cac <iprintf>
        pc->custom_free_function(p);
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	691b      	ldr	r3, [r3, #16]
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	4798      	blx	r3
 8014c00:	e01d      	b.n	8014c3e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014c02:	7bfb      	ldrb	r3, [r7, #15]
 8014c04:	2b02      	cmp	r3, #2
 8014c06:	d104      	bne.n	8014c12 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014c08:	6879      	ldr	r1, [r7, #4]
 8014c0a:	200d      	movs	r0, #13
 8014c0c:	f7ff f8c4 	bl	8013d98 <memp_free>
 8014c10:	e015      	b.n	8014c3e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014c12:	7bfb      	ldrb	r3, [r7, #15]
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d104      	bne.n	8014c22 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014c18:	6879      	ldr	r1, [r7, #4]
 8014c1a:	200c      	movs	r0, #12
 8014c1c:	f7ff f8bc 	bl	8013d98 <memp_free>
 8014c20:	e00d      	b.n	8014c3e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014c22:	7bfb      	ldrb	r3, [r7, #15]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d103      	bne.n	8014c30 <pbuf_free+0xd4>
          mem_free(p);
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7fe fd47 	bl	80136bc <mem_free>
 8014c2e:	e006      	b.n	8014c3e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014c30:	4b0b      	ldr	r3, [pc, #44]	; (8014c60 <pbuf_free+0x104>)
 8014c32:	f240 320f 	movw	r2, #783	; 0x30f
 8014c36:	490f      	ldr	r1, [pc, #60]	; (8014c74 <pbuf_free+0x118>)
 8014c38:	480b      	ldr	r0, [pc, #44]	; (8014c68 <pbuf_free+0x10c>)
 8014c3a:	f00d f837 	bl	8021cac <iprintf>
        }
      }
      count++;
 8014c3e:	7ffb      	ldrb	r3, [r7, #31]
 8014c40:	3301      	adds	r3, #1
 8014c42:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	607b      	str	r3, [r7, #4]
 8014c48:	e001      	b.n	8014c4e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d199      	bne.n	8014b88 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3720      	adds	r7, #32
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	08026fdc 	.word	0x08026fdc
 8014c64:	08027140 	.word	0x08027140
 8014c68:	0802703c 	.word	0x0802703c
 8014c6c:	0802716c 	.word	0x0802716c
 8014c70:	08027184 	.word	0x08027184
 8014c74:	080271a8 	.word	0x080271a8

08014c78 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b085      	sub	sp, #20
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014c80:	2300      	movs	r3, #0
 8014c82:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014c84:	e005      	b.n	8014c92 <pbuf_clen+0x1a>
    ++len;
 8014c86:	89fb      	ldrh	r3, [r7, #14]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d1f6      	bne.n	8014c86 <pbuf_clen+0xe>
  }
  return len;
 8014c98:	89fb      	ldrh	r3, [r7, #14]
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3714      	adds	r7, #20
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca4:	4770      	bx	lr
	...

08014ca8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d016      	beq.n	8014ce4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014cb6:	f00c f95b 	bl	8020f70 <sys_arch_protect>
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	7b9b      	ldrb	r3, [r3, #14]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	b2da      	uxtb	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	739a      	strb	r2, [r3, #14]
 8014cc8:	68f8      	ldr	r0, [r7, #12]
 8014cca:	f00c f95f 	bl	8020f8c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	7b9b      	ldrb	r3, [r3, #14]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d106      	bne.n	8014ce4 <pbuf_ref+0x3c>
 8014cd6:	4b05      	ldr	r3, [pc, #20]	; (8014cec <pbuf_ref+0x44>)
 8014cd8:	f240 3242 	movw	r2, #834	; 0x342
 8014cdc:	4904      	ldr	r1, [pc, #16]	; (8014cf0 <pbuf_ref+0x48>)
 8014cde:	4805      	ldr	r0, [pc, #20]	; (8014cf4 <pbuf_ref+0x4c>)
 8014ce0:	f00c ffe4 	bl	8021cac <iprintf>
  }
}
 8014ce4:	bf00      	nop
 8014ce6:	3710      	adds	r7, #16
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	08026fdc 	.word	0x08026fdc
 8014cf0:	080271bc 	.word	0x080271bc
 8014cf4:	0802703c 	.word	0x0802703c

08014cf8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d002      	beq.n	8014d0e <pbuf_cat+0x16>
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d107      	bne.n	8014d1e <pbuf_cat+0x26>
 8014d0e:	4b20      	ldr	r3, [pc, #128]	; (8014d90 <pbuf_cat+0x98>)
 8014d10:	f240 3259 	movw	r2, #857	; 0x359
 8014d14:	491f      	ldr	r1, [pc, #124]	; (8014d94 <pbuf_cat+0x9c>)
 8014d16:	4820      	ldr	r0, [pc, #128]	; (8014d98 <pbuf_cat+0xa0>)
 8014d18:	f00c ffc8 	bl	8021cac <iprintf>
 8014d1c:	e034      	b.n	8014d88 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	60fb      	str	r3, [r7, #12]
 8014d22:	e00a      	b.n	8014d3a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	891a      	ldrh	r2, [r3, #8]
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	891b      	ldrh	r3, [r3, #8]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	60fb      	str	r3, [r7, #12]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d1f0      	bne.n	8014d24 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	891a      	ldrh	r2, [r3, #8]
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	895b      	ldrh	r3, [r3, #10]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d006      	beq.n	8014d5c <pbuf_cat+0x64>
 8014d4e:	4b10      	ldr	r3, [pc, #64]	; (8014d90 <pbuf_cat+0x98>)
 8014d50:	f240 3262 	movw	r2, #866	; 0x362
 8014d54:	4911      	ldr	r1, [pc, #68]	; (8014d9c <pbuf_cat+0xa4>)
 8014d56:	4810      	ldr	r0, [pc, #64]	; (8014d98 <pbuf_cat+0xa0>)
 8014d58:	f00c ffa8 	bl	8021cac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d006      	beq.n	8014d72 <pbuf_cat+0x7a>
 8014d64:	4b0a      	ldr	r3, [pc, #40]	; (8014d90 <pbuf_cat+0x98>)
 8014d66:	f240 3263 	movw	r2, #867	; 0x363
 8014d6a:	490d      	ldr	r1, [pc, #52]	; (8014da0 <pbuf_cat+0xa8>)
 8014d6c:	480a      	ldr	r0, [pc, #40]	; (8014d98 <pbuf_cat+0xa0>)
 8014d6e:	f00c ff9d 	bl	8021cac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	891a      	ldrh	r2, [r3, #8]
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	891b      	ldrh	r3, [r3, #8]
 8014d7a:	4413      	add	r3, r2
 8014d7c:	b29a      	uxth	r2, r3
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	683a      	ldr	r2, [r7, #0]
 8014d86:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014d88:	3710      	adds	r7, #16
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	08026fdc 	.word	0x08026fdc
 8014d94:	080271d0 	.word	0x080271d0
 8014d98:	0802703c 	.word	0x0802703c
 8014d9c:	08027208 	.word	0x08027208
 8014da0:	08027238 	.word	0x08027238

08014da4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014dae:	6839      	ldr	r1, [r7, #0]
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f7ff ffa1 	bl	8014cf8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014db6:	6838      	ldr	r0, [r7, #0]
 8014db8:	f7ff ff76 	bl	8014ca8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b086      	sub	sp, #24
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	617b      	str	r3, [r7, #20]
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d008      	beq.n	8014dee <pbuf_copy+0x2a>
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d005      	beq.n	8014dee <pbuf_copy+0x2a>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	891a      	ldrh	r2, [r3, #8]
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	891b      	ldrh	r3, [r3, #8]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d209      	bcs.n	8014e02 <pbuf_copy+0x3e>
 8014dee:	4b57      	ldr	r3, [pc, #348]	; (8014f4c <pbuf_copy+0x188>)
 8014df0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014df4:	4956      	ldr	r1, [pc, #344]	; (8014f50 <pbuf_copy+0x18c>)
 8014df6:	4857      	ldr	r0, [pc, #348]	; (8014f54 <pbuf_copy+0x190>)
 8014df8:	f00c ff58 	bl	8021cac <iprintf>
 8014dfc:	f06f 030f 	mvn.w	r3, #15
 8014e00:	e09f      	b.n	8014f42 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	895b      	ldrh	r3, [r3, #10]
 8014e06:	461a      	mov	r2, r3
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	1ad2      	subs	r2, r2, r3
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	895b      	ldrh	r3, [r3, #10]
 8014e10:	4619      	mov	r1, r3
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	1acb      	subs	r3, r1, r3
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d306      	bcc.n	8014e28 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	895b      	ldrh	r3, [r3, #10]
 8014e1e:	461a      	mov	r2, r3
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	1ad3      	subs	r3, r2, r3
 8014e24:	60fb      	str	r3, [r7, #12]
 8014e26:	e005      	b.n	8014e34 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	895b      	ldrh	r3, [r3, #10]
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	1ad3      	subs	r3, r2, r3
 8014e32:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	685a      	ldr	r2, [r3, #4]
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	18d0      	adds	r0, r2, r3
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	685a      	ldr	r2, [r3, #4]
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	4413      	add	r3, r2
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	4619      	mov	r1, r3
 8014e48:	f00c f9ec 	bl	8021224 <memcpy>
    offset_to += len;
 8014e4c:	697a      	ldr	r2, [r7, #20]
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	4413      	add	r3, r2
 8014e52:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014e54:	693a      	ldr	r2, [r7, #16]
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	4413      	add	r3, r2
 8014e5a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	895b      	ldrh	r3, [r3, #10]
 8014e60:	461a      	mov	r2, r3
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	4293      	cmp	r3, r2
 8014e66:	d906      	bls.n	8014e76 <pbuf_copy+0xb2>
 8014e68:	4b38      	ldr	r3, [pc, #224]	; (8014f4c <pbuf_copy+0x188>)
 8014e6a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014e6e:	493a      	ldr	r1, [pc, #232]	; (8014f58 <pbuf_copy+0x194>)
 8014e70:	4838      	ldr	r0, [pc, #224]	; (8014f54 <pbuf_copy+0x190>)
 8014e72:	f00c ff1b 	bl	8021cac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	895b      	ldrh	r3, [r3, #10]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	693b      	ldr	r3, [r7, #16]
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d906      	bls.n	8014e90 <pbuf_copy+0xcc>
 8014e82:	4b32      	ldr	r3, [pc, #200]	; (8014f4c <pbuf_copy+0x188>)
 8014e84:	f240 32da 	movw	r2, #986	; 0x3da
 8014e88:	4934      	ldr	r1, [pc, #208]	; (8014f5c <pbuf_copy+0x198>)
 8014e8a:	4832      	ldr	r0, [pc, #200]	; (8014f54 <pbuf_copy+0x190>)
 8014e8c:	f00c ff0e 	bl	8021cac <iprintf>
    if (offset_from >= p_from->len) {
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	895b      	ldrh	r3, [r3, #10]
 8014e94:	461a      	mov	r2, r3
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	d304      	bcc.n	8014ea6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	895b      	ldrh	r3, [r3, #10]
 8014eaa:	461a      	mov	r2, r3
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	d114      	bne.n	8014edc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d10c      	bne.n	8014edc <pbuf_copy+0x118>
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d009      	beq.n	8014edc <pbuf_copy+0x118>
 8014ec8:	4b20      	ldr	r3, [pc, #128]	; (8014f4c <pbuf_copy+0x188>)
 8014eca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014ece:	4924      	ldr	r1, [pc, #144]	; (8014f60 <pbuf_copy+0x19c>)
 8014ed0:	4820      	ldr	r0, [pc, #128]	; (8014f54 <pbuf_copy+0x190>)
 8014ed2:	f00c feeb 	bl	8021cac <iprintf>
 8014ed6:	f06f 030f 	mvn.w	r3, #15
 8014eda:	e032      	b.n	8014f42 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d013      	beq.n	8014f0a <pbuf_copy+0x146>
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	895a      	ldrh	r2, [r3, #10]
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	891b      	ldrh	r3, [r3, #8]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d10d      	bne.n	8014f0a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d009      	beq.n	8014f0a <pbuf_copy+0x146>
 8014ef6:	4b15      	ldr	r3, [pc, #84]	; (8014f4c <pbuf_copy+0x188>)
 8014ef8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014efc:	4919      	ldr	r1, [pc, #100]	; (8014f64 <pbuf_copy+0x1a0>)
 8014efe:	4815      	ldr	r0, [pc, #84]	; (8014f54 <pbuf_copy+0x190>)
 8014f00:	f00c fed4 	bl	8021cac <iprintf>
 8014f04:	f06f 0305 	mvn.w	r3, #5
 8014f08:	e01b      	b.n	8014f42 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d013      	beq.n	8014f38 <pbuf_copy+0x174>
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	895a      	ldrh	r2, [r3, #10]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	891b      	ldrh	r3, [r3, #8]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d10d      	bne.n	8014f38 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d009      	beq.n	8014f38 <pbuf_copy+0x174>
 8014f24:	4b09      	ldr	r3, [pc, #36]	; (8014f4c <pbuf_copy+0x188>)
 8014f26:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014f2a:	490e      	ldr	r1, [pc, #56]	; (8014f64 <pbuf_copy+0x1a0>)
 8014f2c:	4809      	ldr	r0, [pc, #36]	; (8014f54 <pbuf_copy+0x190>)
 8014f2e:	f00c febd 	bl	8021cac <iprintf>
 8014f32:	f06f 0305 	mvn.w	r3, #5
 8014f36:	e004      	b.n	8014f42 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	f47f af61 	bne.w	8014e02 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014f40:	2300      	movs	r3, #0
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3718      	adds	r7, #24
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	08026fdc 	.word	0x08026fdc
 8014f50:	08027284 	.word	0x08027284
 8014f54:	0802703c 	.word	0x0802703c
 8014f58:	080272b4 	.word	0x080272b4
 8014f5c:	080272cc 	.word	0x080272cc
 8014f60:	080272e8 	.word	0x080272e8
 8014f64:	080272f8 	.word	0x080272f8

08014f68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b088      	sub	sp, #32
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	4611      	mov	r1, r2
 8014f74:	461a      	mov	r2, r3
 8014f76:	460b      	mov	r3, r1
 8014f78:	80fb      	strh	r3, [r7, #6]
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d108      	bne.n	8014f9e <pbuf_copy_partial+0x36>
 8014f8c:	4b2b      	ldr	r3, [pc, #172]	; (801503c <pbuf_copy_partial+0xd4>)
 8014f8e:	f240 420a 	movw	r2, #1034	; 0x40a
 8014f92:	492b      	ldr	r1, [pc, #172]	; (8015040 <pbuf_copy_partial+0xd8>)
 8014f94:	482b      	ldr	r0, [pc, #172]	; (8015044 <pbuf_copy_partial+0xdc>)
 8014f96:	f00c fe89 	bl	8021cac <iprintf>
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	e04a      	b.n	8015034 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d108      	bne.n	8014fb6 <pbuf_copy_partial+0x4e>
 8014fa4:	4b25      	ldr	r3, [pc, #148]	; (801503c <pbuf_copy_partial+0xd4>)
 8014fa6:	f240 420b 	movw	r2, #1035	; 0x40b
 8014faa:	4927      	ldr	r1, [pc, #156]	; (8015048 <pbuf_copy_partial+0xe0>)
 8014fac:	4825      	ldr	r0, [pc, #148]	; (8015044 <pbuf_copy_partial+0xdc>)
 8014fae:	f00c fe7d 	bl	8021cac <iprintf>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e03e      	b.n	8015034 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	61fb      	str	r3, [r7, #28]
 8014fba:	e034      	b.n	8015026 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014fbc:	88bb      	ldrh	r3, [r7, #4]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d00a      	beq.n	8014fd8 <pbuf_copy_partial+0x70>
 8014fc2:	69fb      	ldr	r3, [r7, #28]
 8014fc4:	895b      	ldrh	r3, [r3, #10]
 8014fc6:	88ba      	ldrh	r2, [r7, #4]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d305      	bcc.n	8014fd8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	895b      	ldrh	r3, [r3, #10]
 8014fd0:	88ba      	ldrh	r2, [r7, #4]
 8014fd2:	1ad3      	subs	r3, r2, r3
 8014fd4:	80bb      	strh	r3, [r7, #4]
 8014fd6:	e023      	b.n	8015020 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	895a      	ldrh	r2, [r3, #10]
 8014fdc:	88bb      	ldrh	r3, [r7, #4]
 8014fde:	1ad3      	subs	r3, r2, r3
 8014fe0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014fe2:	8b3a      	ldrh	r2, [r7, #24]
 8014fe4:	88fb      	ldrh	r3, [r7, #6]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d901      	bls.n	8014fee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014fea:	88fb      	ldrh	r3, [r7, #6]
 8014fec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014fee:	8b7b      	ldrh	r3, [r7, #26]
 8014ff0:	68ba      	ldr	r2, [r7, #8]
 8014ff2:	18d0      	adds	r0, r2, r3
 8014ff4:	69fb      	ldr	r3, [r7, #28]
 8014ff6:	685a      	ldr	r2, [r3, #4]
 8014ff8:	88bb      	ldrh	r3, [r7, #4]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	8b3a      	ldrh	r2, [r7, #24]
 8014ffe:	4619      	mov	r1, r3
 8015000:	f00c f910 	bl	8021224 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015004:	8afa      	ldrh	r2, [r7, #22]
 8015006:	8b3b      	ldrh	r3, [r7, #24]
 8015008:	4413      	add	r3, r2
 801500a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801500c:	8b7a      	ldrh	r2, [r7, #26]
 801500e:	8b3b      	ldrh	r3, [r7, #24]
 8015010:	4413      	add	r3, r2
 8015012:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015014:	88fa      	ldrh	r2, [r7, #6]
 8015016:	8b3b      	ldrh	r3, [r7, #24]
 8015018:	1ad3      	subs	r3, r2, r3
 801501a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801501c:	2300      	movs	r3, #0
 801501e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	61fb      	str	r3, [r7, #28]
 8015026:	88fb      	ldrh	r3, [r7, #6]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d002      	beq.n	8015032 <pbuf_copy_partial+0xca>
 801502c:	69fb      	ldr	r3, [r7, #28]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1c4      	bne.n	8014fbc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015032:	8afb      	ldrh	r3, [r7, #22]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3720      	adds	r7, #32
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}
 801503c:	08026fdc 	.word	0x08026fdc
 8015040:	08027324 	.word	0x08027324
 8015044:	0802703c 	.word	0x0802703c
 8015048:	08027344 	.word	0x08027344

0801504c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801504c:	b480      	push	{r7}
 801504e:	b087      	sub	sp, #28
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	460b      	mov	r3, r1
 8015056:	607a      	str	r2, [r7, #4]
 8015058:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801505a:	897b      	ldrh	r3, [r7, #10]
 801505c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8015062:	e007      	b.n	8015074 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	895b      	ldrh	r3, [r3, #10]
 8015068:	8afa      	ldrh	r2, [r7, #22]
 801506a:	1ad3      	subs	r3, r2, r3
 801506c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d004      	beq.n	8015084 <pbuf_skip_const+0x38>
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	895b      	ldrh	r3, [r3, #10]
 801507e:	8afa      	ldrh	r2, [r7, #22]
 8015080:	429a      	cmp	r2, r3
 8015082:	d2ef      	bcs.n	8015064 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d002      	beq.n	8015090 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	8afa      	ldrh	r2, [r7, #22]
 801508e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8015090:	693b      	ldr	r3, [r7, #16]
}
 8015092:	4618      	mov	r0, r3
 8015094:	371c      	adds	r7, #28
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr

0801509e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b086      	sub	sp, #24
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	60f8      	str	r0, [r7, #12]
 80150a6:	460b      	mov	r3, r1
 80150a8:	607a      	str	r2, [r7, #4]
 80150aa:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80150ac:	897b      	ldrh	r3, [r7, #10]
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	4619      	mov	r1, r3
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f7ff ffca 	bl	801504c <pbuf_skip_const>
 80150b8:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80150ba:	697b      	ldr	r3, [r7, #20]
}
 80150bc:	4618      	mov	r0, r3
 80150be:	3718      	adds	r7, #24
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}

080150c4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b088      	sub	sp, #32
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	4613      	mov	r3, r2
 80150d0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80150d2:	88fb      	ldrh	r3, [r7, #6]
 80150d4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80150d6:	2300      	movs	r3, #0
 80150d8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d109      	bne.n	80150f4 <pbuf_take+0x30>
 80150e0:	4b3a      	ldr	r3, [pc, #232]	; (80151cc <pbuf_take+0x108>)
 80150e2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80150e6:	493a      	ldr	r1, [pc, #232]	; (80151d0 <pbuf_take+0x10c>)
 80150e8:	483a      	ldr	r0, [pc, #232]	; (80151d4 <pbuf_take+0x110>)
 80150ea:	f00c fddf 	bl	8021cac <iprintf>
 80150ee:	f06f 030f 	mvn.w	r3, #15
 80150f2:	e067      	b.n	80151c4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d109      	bne.n	801510e <pbuf_take+0x4a>
 80150fa:	4b34      	ldr	r3, [pc, #208]	; (80151cc <pbuf_take+0x108>)
 80150fc:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8015100:	4935      	ldr	r1, [pc, #212]	; (80151d8 <pbuf_take+0x114>)
 8015102:	4834      	ldr	r0, [pc, #208]	; (80151d4 <pbuf_take+0x110>)
 8015104:	f00c fdd2 	bl	8021cac <iprintf>
 8015108:	f06f 030f 	mvn.w	r3, #15
 801510c:	e05a      	b.n	80151c4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	891b      	ldrh	r3, [r3, #8]
 8015112:	88fa      	ldrh	r2, [r7, #6]
 8015114:	429a      	cmp	r2, r3
 8015116:	d909      	bls.n	801512c <pbuf_take+0x68>
 8015118:	4b2c      	ldr	r3, [pc, #176]	; (80151cc <pbuf_take+0x108>)
 801511a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801511e:	492f      	ldr	r1, [pc, #188]	; (80151dc <pbuf_take+0x118>)
 8015120:	482c      	ldr	r0, [pc, #176]	; (80151d4 <pbuf_take+0x110>)
 8015122:	f00c fdc3 	bl	8021cac <iprintf>
 8015126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801512a:	e04b      	b.n	80151c4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d007      	beq.n	8015142 <pbuf_take+0x7e>
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d004      	beq.n	8015142 <pbuf_take+0x7e>
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	891b      	ldrh	r3, [r3, #8]
 801513c:	88fa      	ldrh	r2, [r7, #6]
 801513e:	429a      	cmp	r2, r3
 8015140:	d902      	bls.n	8015148 <pbuf_take+0x84>
    return ERR_ARG;
 8015142:	f06f 030f 	mvn.w	r3, #15
 8015146:	e03d      	b.n	80151c4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	61fb      	str	r3, [r7, #28]
 801514c:	e028      	b.n	80151a0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801514e:	69fb      	ldr	r3, [r7, #28]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d106      	bne.n	8015162 <pbuf_take+0x9e>
 8015154:	4b1d      	ldr	r3, [pc, #116]	; (80151cc <pbuf_take+0x108>)
 8015156:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801515a:	4921      	ldr	r1, [pc, #132]	; (80151e0 <pbuf_take+0x11c>)
 801515c:	481d      	ldr	r0, [pc, #116]	; (80151d4 <pbuf_take+0x110>)
 801515e:	f00c fda5 	bl	8021cac <iprintf>
    buf_copy_len = total_copy_len;
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	895b      	ldrh	r3, [r3, #10]
 801516a:	461a      	mov	r2, r3
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	4293      	cmp	r3, r2
 8015170:	d902      	bls.n	8015178 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8015172:	69fb      	ldr	r3, [r7, #28]
 8015174:	895b      	ldrh	r3, [r3, #10]
 8015176:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8015178:	69fb      	ldr	r3, [r7, #28]
 801517a:	6858      	ldr	r0, [r3, #4]
 801517c:	68ba      	ldr	r2, [r7, #8]
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	4413      	add	r3, r2
 8015182:	69ba      	ldr	r2, [r7, #24]
 8015184:	4619      	mov	r1, r3
 8015186:	f00c f84d 	bl	8021224 <memcpy>
    total_copy_len -= buf_copy_len;
 801518a:	697a      	ldr	r2, [r7, #20]
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	1ad3      	subs	r3, r2, r3
 8015190:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8015192:	693a      	ldr	r2, [r7, #16]
 8015194:	69bb      	ldr	r3, [r7, #24]
 8015196:	4413      	add	r3, r2
 8015198:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801519a:	69fb      	ldr	r3, [r7, #28]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	61fb      	str	r3, [r7, #28]
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d1d3      	bne.n	801514e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d103      	bne.n	80151b4 <pbuf_take+0xf0>
 80151ac:	88fb      	ldrh	r3, [r7, #6]
 80151ae:	693a      	ldr	r2, [r7, #16]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d006      	beq.n	80151c2 <pbuf_take+0xfe>
 80151b4:	4b05      	ldr	r3, [pc, #20]	; (80151cc <pbuf_take+0x108>)
 80151b6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80151ba:	490a      	ldr	r1, [pc, #40]	; (80151e4 <pbuf_take+0x120>)
 80151bc:	4805      	ldr	r0, [pc, #20]	; (80151d4 <pbuf_take+0x110>)
 80151be:	f00c fd75 	bl	8021cac <iprintf>
  return ERR_OK;
 80151c2:	2300      	movs	r3, #0
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3720      	adds	r7, #32
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	08026fdc 	.word	0x08026fdc
 80151d0:	080273b4 	.word	0x080273b4
 80151d4:	0802703c 	.word	0x0802703c
 80151d8:	080273cc 	.word	0x080273cc
 80151dc:	080273e8 	.word	0x080273e8
 80151e0:	08027408 	.word	0x08027408
 80151e4:	08027420 	.word	0x08027420

080151e8 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	4611      	mov	r1, r2
 80151f4:	461a      	mov	r2, r3
 80151f6:	460b      	mov	r3, r1
 80151f8:	80fb      	strh	r3, [r7, #6]
 80151fa:	4613      	mov	r3, r2
 80151fc:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80151fe:	f107 0210 	add.w	r2, r7, #16
 8015202:	88bb      	ldrh	r3, [r7, #4]
 8015204:	4619      	mov	r1, r3
 8015206:	68f8      	ldr	r0, [r7, #12]
 8015208:	f7ff ff49 	bl	801509e <pbuf_skip>
 801520c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801520e:	69fb      	ldr	r3, [r7, #28]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d047      	beq.n	80152a4 <pbuf_take_at+0xbc>
 8015214:	69fb      	ldr	r3, [r7, #28]
 8015216:	891b      	ldrh	r3, [r3, #8]
 8015218:	461a      	mov	r2, r3
 801521a:	8a3b      	ldrh	r3, [r7, #16]
 801521c:	4619      	mov	r1, r3
 801521e:	88fb      	ldrh	r3, [r7, #6]
 8015220:	440b      	add	r3, r1
 8015222:	429a      	cmp	r2, r3
 8015224:	db3e      	blt.n	80152a4 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8015226:	88fb      	ldrh	r3, [r7, #6]
 8015228:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	895a      	ldrh	r2, [r3, #10]
 8015232:	8a3b      	ldrh	r3, [r7, #16]
 8015234:	429a      	cmp	r2, r3
 8015236:	d806      	bhi.n	8015246 <pbuf_take_at+0x5e>
 8015238:	4b1d      	ldr	r3, [pc, #116]	; (80152b0 <pbuf_take_at+0xc8>)
 801523a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801523e:	491d      	ldr	r1, [pc, #116]	; (80152b4 <pbuf_take_at+0xcc>)
 8015240:	481d      	ldr	r0, [pc, #116]	; (80152b8 <pbuf_take_at+0xd0>)
 8015242:	f00c fd33 	bl	8021cac <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8015246:	69fb      	ldr	r3, [r7, #28]
 8015248:	895b      	ldrh	r3, [r3, #10]
 801524a:	461a      	mov	r2, r3
 801524c:	8a3b      	ldrh	r3, [r7, #16]
 801524e:	1ad2      	subs	r2, r2, r3
 8015250:	88fb      	ldrh	r3, [r7, #6]
 8015252:	429a      	cmp	r2, r3
 8015254:	da05      	bge.n	8015262 <pbuf_take_at+0x7a>
 8015256:	69fb      	ldr	r3, [r7, #28]
 8015258:	895a      	ldrh	r2, [r3, #10]
 801525a:	8a3b      	ldrh	r3, [r7, #16]
 801525c:	1ad3      	subs	r3, r2, r3
 801525e:	b29b      	uxth	r3, r3
 8015260:	e000      	b.n	8015264 <pbuf_take_at+0x7c>
 8015262:	88fb      	ldrh	r3, [r7, #6]
 8015264:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	8a3a      	ldrh	r2, [r7, #16]
 801526c:	4413      	add	r3, r2
 801526e:	8a7a      	ldrh	r2, [r7, #18]
 8015270:	68b9      	ldr	r1, [r7, #8]
 8015272:	4618      	mov	r0, r3
 8015274:	f00b ffd6 	bl	8021224 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8015278:	8b7a      	ldrh	r2, [r7, #26]
 801527a:	8a7b      	ldrh	r3, [r7, #18]
 801527c:	1ad3      	subs	r3, r2, r3
 801527e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8015280:	8a7b      	ldrh	r3, [r7, #18]
 8015282:	697a      	ldr	r2, [r7, #20]
 8015284:	4413      	add	r3, r2
 8015286:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8015288:	8b7b      	ldrh	r3, [r7, #26]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d008      	beq.n	80152a0 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	8b7a      	ldrh	r2, [r7, #26]
 8015294:	6979      	ldr	r1, [r7, #20]
 8015296:	4618      	mov	r0, r3
 8015298:	f7ff ff14 	bl	80150c4 <pbuf_take>
 801529c:	4603      	mov	r3, r0
 801529e:	e003      	b.n	80152a8 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80152a0:	2300      	movs	r3, #0
 80152a2:	e001      	b.n	80152a8 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80152a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3720      	adds	r7, #32
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}
 80152b0:	08026fdc 	.word	0x08026fdc
 80152b4:	08027438 	.word	0x08027438
 80152b8:	0802703c 	.word	0x0802703c

080152bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	603a      	str	r2, [r7, #0]
 80152c6:	71fb      	strb	r3, [r7, #7]
 80152c8:	460b      	mov	r3, r1
 80152ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	8919      	ldrh	r1, [r3, #8]
 80152d0:	88ba      	ldrh	r2, [r7, #4]
 80152d2:	79fb      	ldrb	r3, [r7, #7]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7ff f92b 	bl	8014530 <pbuf_alloc>
 80152da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <pbuf_clone+0x2a>
    return NULL;
 80152e2:	2300      	movs	r3, #0
 80152e4:	e011      	b.n	801530a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f7ff fd6b 	bl	8014dc4 <pbuf_copy>
 80152ee:	4603      	mov	r3, r0
 80152f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80152f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d006      	beq.n	8015308 <pbuf_clone+0x4c>
 80152fa:	4b06      	ldr	r3, [pc, #24]	; (8015314 <pbuf_clone+0x58>)
 80152fc:	f240 5224 	movw	r2, #1316	; 0x524
 8015300:	4905      	ldr	r1, [pc, #20]	; (8015318 <pbuf_clone+0x5c>)
 8015302:	4806      	ldr	r0, [pc, #24]	; (801531c <pbuf_clone+0x60>)
 8015304:	f00c fcd2 	bl	8021cac <iprintf>
  return q;
 8015308:	68fb      	ldr	r3, [r7, #12]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	08026fdc 	.word	0x08026fdc
 8015318:	08027450 	.word	0x08027450
 801531c:	0802703c 	.word	0x0802703c

08015320 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	460b      	mov	r3, r1
 801532a:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 801532c:	f107 020a 	add.w	r2, r7, #10
 8015330:	887b      	ldrh	r3, [r7, #2]
 8015332:	4619      	mov	r1, r3
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7ff fe89 	bl	801504c <pbuf_skip_const>
 801533a:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d00a      	beq.n	8015358 <pbuf_try_get_at+0x38>
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	895a      	ldrh	r2, [r3, #10]
 8015346:	897b      	ldrh	r3, [r7, #10]
 8015348:	429a      	cmp	r2, r3
 801534a:	d905      	bls.n	8015358 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	897a      	ldrh	r2, [r7, #10]
 8015352:	4413      	add	r3, r2
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	e001      	b.n	801535c <pbuf_try_get_at+0x3c>
  }
  return -1;
 8015358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801535c:	4618      	mov	r0, r3
 801535e:	3710      	adds	r7, #16
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}

08015364 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	460b      	mov	r3, r1
 801536e:	807b      	strh	r3, [r7, #2]
 8015370:	4613      	mov	r3, r2
 8015372:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8015374:	f107 020a 	add.w	r2, r7, #10
 8015378:	887b      	ldrh	r3, [r7, #2]
 801537a:	4619      	mov	r1, r3
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f7ff fe8e 	bl	801509e <pbuf_skip>
 8015382:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00a      	beq.n	80153a0 <pbuf_put_at+0x3c>
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	895a      	ldrh	r2, [r3, #10]
 801538e:	897b      	ldrh	r3, [r7, #10]
 8015390:	429a      	cmp	r2, r3
 8015392:	d905      	bls.n	80153a0 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	897a      	ldrh	r2, [r7, #10]
 801539a:	4413      	add	r3, r2
 801539c:	787a      	ldrb	r2, [r7, #1]
 801539e:	701a      	strb	r2, [r3, #0]
  }
}
 80153a0:	bf00      	nop
 80153a2:	3710      	adds	r7, #16
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80153ac:	f00c fd0c 	bl	8021dc8 <rand>
 80153b0:	4603      	mov	r3, r0
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80153be:	b29a      	uxth	r2, r3
 80153c0:	4b01      	ldr	r3, [pc, #4]	; (80153c8 <tcp_init+0x20>)
 80153c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80153c4:	bf00      	nop
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	20000064 	.word	0x20000064

080153cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	7d1b      	ldrb	r3, [r3, #20]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d105      	bne.n	80153e8 <tcp_free+0x1c>
 80153dc:	4b06      	ldr	r3, [pc, #24]	; (80153f8 <tcp_free+0x2c>)
 80153de:	22d4      	movs	r2, #212	; 0xd4
 80153e0:	4906      	ldr	r1, [pc, #24]	; (80153fc <tcp_free+0x30>)
 80153e2:	4807      	ldr	r0, [pc, #28]	; (8015400 <tcp_free+0x34>)
 80153e4:	f00c fc62 	bl	8021cac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80153e8:	6879      	ldr	r1, [r7, #4]
 80153ea:	2001      	movs	r0, #1
 80153ec:	f7fe fcd4 	bl	8013d98 <memp_free>
}
 80153f0:	bf00      	nop
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	080274dc 	.word	0x080274dc
 80153fc:	0802750c 	.word	0x0802750c
 8015400:	08027520 	.word	0x08027520

08015404 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	7d1b      	ldrb	r3, [r3, #20]
 8015410:	2b01      	cmp	r3, #1
 8015412:	d105      	bne.n	8015420 <tcp_free_listen+0x1c>
 8015414:	4b06      	ldr	r3, [pc, #24]	; (8015430 <tcp_free_listen+0x2c>)
 8015416:	22df      	movs	r2, #223	; 0xdf
 8015418:	4906      	ldr	r1, [pc, #24]	; (8015434 <tcp_free_listen+0x30>)
 801541a:	4807      	ldr	r0, [pc, #28]	; (8015438 <tcp_free_listen+0x34>)
 801541c:	f00c fc46 	bl	8021cac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015420:	6879      	ldr	r1, [r7, #4]
 8015422:	2002      	movs	r0, #2
 8015424:	f7fe fcb8 	bl	8013d98 <memp_free>
}
 8015428:	bf00      	nop
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	080274dc 	.word	0x080274dc
 8015434:	08027548 	.word	0x08027548
 8015438:	08027520 	.word	0x08027520

0801543c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015440:	f001 f9be 	bl	80167c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015444:	4b07      	ldr	r3, [pc, #28]	; (8015464 <tcp_tmr+0x28>)
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	3301      	adds	r3, #1
 801544a:	b2da      	uxtb	r2, r3
 801544c:	4b05      	ldr	r3, [pc, #20]	; (8015464 <tcp_tmr+0x28>)
 801544e:	701a      	strb	r2, [r3, #0]
 8015450:	4b04      	ldr	r3, [pc, #16]	; (8015464 <tcp_tmr+0x28>)
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	f003 0301 	and.w	r3, r3, #1
 8015458:	2b00      	cmp	r3, #0
 801545a:	d001      	beq.n	8015460 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801545c:	f000 fe70 	bl	8016140 <tcp_slowtmr>
  }
}
 8015460:	bf00      	nop
 8015462:	bd80      	pop	{r7, pc}
 8015464:	2001437d 	.word	0x2001437d

08015468 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d105      	bne.n	8015484 <tcp_remove_listener+0x1c>
 8015478:	4b0d      	ldr	r3, [pc, #52]	; (80154b0 <tcp_remove_listener+0x48>)
 801547a:	22ff      	movs	r2, #255	; 0xff
 801547c:	490d      	ldr	r1, [pc, #52]	; (80154b4 <tcp_remove_listener+0x4c>)
 801547e:	480e      	ldr	r0, [pc, #56]	; (80154b8 <tcp_remove_listener+0x50>)
 8015480:	f00c fc14 	bl	8021cac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	60fb      	str	r3, [r7, #12]
 8015488:	e00a      	b.n	80154a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801548e:	683a      	ldr	r2, [r7, #0]
 8015490:	429a      	cmp	r2, r3
 8015492:	d102      	bne.n	801549a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2200      	movs	r2, #0
 8015498:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	60fb      	str	r3, [r7, #12]
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d1f1      	bne.n	801548a <tcp_remove_listener+0x22>
    }
  }
}
 80154a6:	bf00      	nop
 80154a8:	bf00      	nop
 80154aa:	3710      	adds	r7, #16
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	080274dc 	.word	0x080274dc
 80154b4:	08027564 	.word	0x08027564
 80154b8:	08027520 	.word	0x08027520

080154bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d106      	bne.n	80154d8 <tcp_listen_closed+0x1c>
 80154ca:	4b14      	ldr	r3, [pc, #80]	; (801551c <tcp_listen_closed+0x60>)
 80154cc:	f240 1211 	movw	r2, #273	; 0x111
 80154d0:	4913      	ldr	r1, [pc, #76]	; (8015520 <tcp_listen_closed+0x64>)
 80154d2:	4814      	ldr	r0, [pc, #80]	; (8015524 <tcp_listen_closed+0x68>)
 80154d4:	f00c fbea 	bl	8021cac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	7d1b      	ldrb	r3, [r3, #20]
 80154dc:	2b01      	cmp	r3, #1
 80154de:	d006      	beq.n	80154ee <tcp_listen_closed+0x32>
 80154e0:	4b0e      	ldr	r3, [pc, #56]	; (801551c <tcp_listen_closed+0x60>)
 80154e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80154e6:	4910      	ldr	r1, [pc, #64]	; (8015528 <tcp_listen_closed+0x6c>)
 80154e8:	480e      	ldr	r0, [pc, #56]	; (8015524 <tcp_listen_closed+0x68>)
 80154ea:	f00c fbdf 	bl	8021cac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80154ee:	2301      	movs	r3, #1
 80154f0:	60fb      	str	r3, [r7, #12]
 80154f2:	e00b      	b.n	801550c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80154f4:	4a0d      	ldr	r2, [pc, #52]	; (801552c <tcp_listen_closed+0x70>)
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	6879      	ldr	r1, [r7, #4]
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff ffb1 	bl	8015468 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	3301      	adds	r3, #1
 801550a:	60fb      	str	r3, [r7, #12]
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2b03      	cmp	r3, #3
 8015510:	d9f0      	bls.n	80154f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015512:	bf00      	nop
 8015514:	bf00      	nop
 8015516:	3710      	adds	r7, #16
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	080274dc 	.word	0x080274dc
 8015520:	0802758c 	.word	0x0802758c
 8015524:	08027520 	.word	0x08027520
 8015528:	08027598 	.word	0x08027598
 801552c:	08029aa8 	.word	0x08029aa8

08015530 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015530:	b5b0      	push	{r4, r5, r7, lr}
 8015532:	b088      	sub	sp, #32
 8015534:	af04      	add	r7, sp, #16
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	460b      	mov	r3, r1
 801553a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d106      	bne.n	8015550 <tcp_close_shutdown+0x20>
 8015542:	4b63      	ldr	r3, [pc, #396]	; (80156d0 <tcp_close_shutdown+0x1a0>)
 8015544:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015548:	4962      	ldr	r1, [pc, #392]	; (80156d4 <tcp_close_shutdown+0x1a4>)
 801554a:	4863      	ldr	r0, [pc, #396]	; (80156d8 <tcp_close_shutdown+0x1a8>)
 801554c:	f00c fbae 	bl	8021cac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015550:	78fb      	ldrb	r3, [r7, #3]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d066      	beq.n	8015624 <tcp_close_shutdown+0xf4>
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	7d1b      	ldrb	r3, [r3, #20]
 801555a:	2b04      	cmp	r3, #4
 801555c:	d003      	beq.n	8015566 <tcp_close_shutdown+0x36>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	7d1b      	ldrb	r3, [r3, #20]
 8015562:	2b07      	cmp	r3, #7
 8015564:	d15e      	bne.n	8015624 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801556a:	2b00      	cmp	r3, #0
 801556c:	d104      	bne.n	8015578 <tcp_close_shutdown+0x48>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015572:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015576:	d055      	beq.n	8015624 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	8b5b      	ldrh	r3, [r3, #26]
 801557c:	f003 0310 	and.w	r3, r3, #16
 8015580:	2b00      	cmp	r3, #0
 8015582:	d106      	bne.n	8015592 <tcp_close_shutdown+0x62>
 8015584:	4b52      	ldr	r3, [pc, #328]	; (80156d0 <tcp_close_shutdown+0x1a0>)
 8015586:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801558a:	4954      	ldr	r1, [pc, #336]	; (80156dc <tcp_close_shutdown+0x1ac>)
 801558c:	4852      	ldr	r0, [pc, #328]	; (80156d8 <tcp_close_shutdown+0x1a8>)
 801558e:	f00c fb8d 	bl	8021cac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801559a:	687d      	ldr	r5, [r7, #4]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	3304      	adds	r3, #4
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	8ad2      	ldrh	r2, [r2, #22]
 80155a4:	6879      	ldr	r1, [r7, #4]
 80155a6:	8b09      	ldrh	r1, [r1, #24]
 80155a8:	9102      	str	r1, [sp, #8]
 80155aa:	9201      	str	r2, [sp, #4]
 80155ac:	9300      	str	r3, [sp, #0]
 80155ae:	462b      	mov	r3, r5
 80155b0:	4622      	mov	r2, r4
 80155b2:	4601      	mov	r1, r0
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f005 ff3b 	bl	801b430 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f001 fcb0 	bl	8016f20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80155c0:	4b47      	ldr	r3, [pc, #284]	; (80156e0 <tcp_close_shutdown+0x1b0>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d105      	bne.n	80155d6 <tcp_close_shutdown+0xa6>
 80155ca:	4b45      	ldr	r3, [pc, #276]	; (80156e0 <tcp_close_shutdown+0x1b0>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	4a43      	ldr	r2, [pc, #268]	; (80156e0 <tcp_close_shutdown+0x1b0>)
 80155d2:	6013      	str	r3, [r2, #0]
 80155d4:	e013      	b.n	80155fe <tcp_close_shutdown+0xce>
 80155d6:	4b42      	ldr	r3, [pc, #264]	; (80156e0 <tcp_close_shutdown+0x1b0>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	60fb      	str	r3, [r7, #12]
 80155dc:	e00c      	b.n	80155f8 <tcp_close_shutdown+0xc8>
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d104      	bne.n	80155f2 <tcp_close_shutdown+0xc2>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	68da      	ldr	r2, [r3, #12]
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	60da      	str	r2, [r3, #12]
 80155f0:	e005      	b.n	80155fe <tcp_close_shutdown+0xce>
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	68db      	ldr	r3, [r3, #12]
 80155f6:	60fb      	str	r3, [r7, #12]
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d1ef      	bne.n	80155de <tcp_close_shutdown+0xae>
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2200      	movs	r2, #0
 8015602:	60da      	str	r2, [r3, #12]
 8015604:	4b37      	ldr	r3, [pc, #220]	; (80156e4 <tcp_close_shutdown+0x1b4>)
 8015606:	2201      	movs	r2, #1
 8015608:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801560a:	4b37      	ldr	r3, [pc, #220]	; (80156e8 <tcp_close_shutdown+0x1b8>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	429a      	cmp	r2, r3
 8015612:	d102      	bne.n	801561a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015614:	f004 f944 	bl	80198a0 <tcp_trigger_input_pcb_close>
 8015618:	e002      	b.n	8015620 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7ff fed6 	bl	80153cc <tcp_free>
      }
      return ERR_OK;
 8015620:	2300      	movs	r3, #0
 8015622:	e050      	b.n	80156c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	7d1b      	ldrb	r3, [r3, #20]
 8015628:	2b02      	cmp	r3, #2
 801562a:	d03b      	beq.n	80156a4 <tcp_close_shutdown+0x174>
 801562c:	2b02      	cmp	r3, #2
 801562e:	dc44      	bgt.n	80156ba <tcp_close_shutdown+0x18a>
 8015630:	2b00      	cmp	r3, #0
 8015632:	d002      	beq.n	801563a <tcp_close_shutdown+0x10a>
 8015634:	2b01      	cmp	r3, #1
 8015636:	d02a      	beq.n	801568e <tcp_close_shutdown+0x15e>
 8015638:	e03f      	b.n	80156ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	8adb      	ldrh	r3, [r3, #22]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d021      	beq.n	8015686 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015642:	4b2a      	ldr	r3, [pc, #168]	; (80156ec <tcp_close_shutdown+0x1bc>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	429a      	cmp	r2, r3
 801564a:	d105      	bne.n	8015658 <tcp_close_shutdown+0x128>
 801564c:	4b27      	ldr	r3, [pc, #156]	; (80156ec <tcp_close_shutdown+0x1bc>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	4a26      	ldr	r2, [pc, #152]	; (80156ec <tcp_close_shutdown+0x1bc>)
 8015654:	6013      	str	r3, [r2, #0]
 8015656:	e013      	b.n	8015680 <tcp_close_shutdown+0x150>
 8015658:	4b24      	ldr	r3, [pc, #144]	; (80156ec <tcp_close_shutdown+0x1bc>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	60bb      	str	r3, [r7, #8]
 801565e:	e00c      	b.n	801567a <tcp_close_shutdown+0x14a>
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	687a      	ldr	r2, [r7, #4]
 8015666:	429a      	cmp	r2, r3
 8015668:	d104      	bne.n	8015674 <tcp_close_shutdown+0x144>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	68da      	ldr	r2, [r3, #12]
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	60da      	str	r2, [r3, #12]
 8015672:	e005      	b.n	8015680 <tcp_close_shutdown+0x150>
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	60bb      	str	r3, [r7, #8]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d1ef      	bne.n	8015660 <tcp_close_shutdown+0x130>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2200      	movs	r2, #0
 8015684:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f7ff fea0 	bl	80153cc <tcp_free>
      break;
 801568c:	e01a      	b.n	80156c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7ff ff14 	bl	80154bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015694:	6879      	ldr	r1, [r7, #4]
 8015696:	4816      	ldr	r0, [pc, #88]	; (80156f0 <tcp_close_shutdown+0x1c0>)
 8015698:	f001 fc92 	bl	8016fc0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7ff feb1 	bl	8015404 <tcp_free_listen>
      break;
 80156a2:	e00f      	b.n	80156c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80156a4:	6879      	ldr	r1, [r7, #4]
 80156a6:	480e      	ldr	r0, [pc, #56]	; (80156e0 <tcp_close_shutdown+0x1b0>)
 80156a8:	f001 fc8a 	bl	8016fc0 <tcp_pcb_remove>
 80156ac:	4b0d      	ldr	r3, [pc, #52]	; (80156e4 <tcp_close_shutdown+0x1b4>)
 80156ae:	2201      	movs	r2, #1
 80156b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f7ff fe8a 	bl	80153cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80156b8:	e004      	b.n	80156c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f000 f81a 	bl	80156f4 <tcp_close_shutdown_fin>
 80156c0:	4603      	mov	r3, r0
 80156c2:	e000      	b.n	80156c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80156c4:	2300      	movs	r3, #0
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3710      	adds	r7, #16
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bdb0      	pop	{r4, r5, r7, pc}
 80156ce:	bf00      	nop
 80156d0:	080274dc 	.word	0x080274dc
 80156d4:	080275b0 	.word	0x080275b0
 80156d8:	08027520 	.word	0x08027520
 80156dc:	080275d0 	.word	0x080275d0
 80156e0:	2001b19c 	.word	0x2001b19c
 80156e4:	2001b198 	.word	0x2001b198
 80156e8:	2001b1b0 	.word	0x2001b1b0
 80156ec:	2001b1a8 	.word	0x2001b1a8
 80156f0:	2001b1a4 	.word	0x2001b1a4

080156f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d106      	bne.n	8015710 <tcp_close_shutdown_fin+0x1c>
 8015702:	4b2e      	ldr	r3, [pc, #184]	; (80157bc <tcp_close_shutdown_fin+0xc8>)
 8015704:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015708:	492d      	ldr	r1, [pc, #180]	; (80157c0 <tcp_close_shutdown_fin+0xcc>)
 801570a:	482e      	ldr	r0, [pc, #184]	; (80157c4 <tcp_close_shutdown_fin+0xd0>)
 801570c:	f00c face 	bl	8021cac <iprintf>

  switch (pcb->state) {
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	7d1b      	ldrb	r3, [r3, #20]
 8015714:	2b07      	cmp	r3, #7
 8015716:	d020      	beq.n	801575a <tcp_close_shutdown_fin+0x66>
 8015718:	2b07      	cmp	r3, #7
 801571a:	dc2b      	bgt.n	8015774 <tcp_close_shutdown_fin+0x80>
 801571c:	2b03      	cmp	r3, #3
 801571e:	d002      	beq.n	8015726 <tcp_close_shutdown_fin+0x32>
 8015720:	2b04      	cmp	r3, #4
 8015722:	d00d      	beq.n	8015740 <tcp_close_shutdown_fin+0x4c>
 8015724:	e026      	b.n	8015774 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f004 ff84 	bl	801a634 <tcp_send_fin>
 801572c:	4603      	mov	r3, r0
 801572e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d11f      	bne.n	8015778 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2205      	movs	r2, #5
 801573c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801573e:	e01b      	b.n	8015778 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f004 ff77 	bl	801a634 <tcp_send_fin>
 8015746:	4603      	mov	r3, r0
 8015748:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d114      	bne.n	801577c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2205      	movs	r2, #5
 8015756:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015758:	e010      	b.n	801577c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f004 ff6a 	bl	801a634 <tcp_send_fin>
 8015760:	4603      	mov	r3, r0
 8015762:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d109      	bne.n	8015780 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2209      	movs	r2, #9
 8015770:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015772:	e005      	b.n	8015780 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	e01c      	b.n	80157b2 <tcp_close_shutdown_fin+0xbe>
      break;
 8015778:	bf00      	nop
 801577a:	e002      	b.n	8015782 <tcp_close_shutdown_fin+0x8e>
      break;
 801577c:	bf00      	nop
 801577e:	e000      	b.n	8015782 <tcp_close_shutdown_fin+0x8e>
      break;
 8015780:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d103      	bne.n	8015792 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f005 f890 	bl	801a8b0 <tcp_output>
 8015790:	e00d      	b.n	80157ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801579a:	d108      	bne.n	80157ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	8b5b      	ldrh	r3, [r3, #26]
 80157a0:	f043 0308 	orr.w	r3, r3, #8
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80157aa:	2300      	movs	r3, #0
 80157ac:	e001      	b.n	80157b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80157ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	080274dc 	.word	0x080274dc
 80157c0:	0802758c 	.word	0x0802758c
 80157c4:	08027520 	.word	0x08027520

080157c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d109      	bne.n	80157ea <tcp_close+0x22>
 80157d6:	4b0f      	ldr	r3, [pc, #60]	; (8015814 <tcp_close+0x4c>)
 80157d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80157dc:	490e      	ldr	r1, [pc, #56]	; (8015818 <tcp_close+0x50>)
 80157de:	480f      	ldr	r0, [pc, #60]	; (801581c <tcp_close+0x54>)
 80157e0:	f00c fa64 	bl	8021cac <iprintf>
 80157e4:	f06f 030f 	mvn.w	r3, #15
 80157e8:	e00f      	b.n	801580a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	7d1b      	ldrb	r3, [r3, #20]
 80157ee:	2b01      	cmp	r3, #1
 80157f0:	d006      	beq.n	8015800 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	8b5b      	ldrh	r3, [r3, #26]
 80157f6:	f043 0310 	orr.w	r3, r3, #16
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015800:	2101      	movs	r1, #1
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7ff fe94 	bl	8015530 <tcp_close_shutdown>
 8015808:	4603      	mov	r3, r0
}
 801580a:	4618      	mov	r0, r3
 801580c:	3708      	adds	r7, #8
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
 8015812:	bf00      	nop
 8015814:	080274dc 	.word	0x080274dc
 8015818:	080275ec 	.word	0x080275ec
 801581c:	08027520 	.word	0x08027520

08015820 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	60f8      	str	r0, [r7, #12]
 8015828:	60b9      	str	r1, [r7, #8]
 801582a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d109      	bne.n	8015846 <tcp_shutdown+0x26>
 8015832:	4b26      	ldr	r3, [pc, #152]	; (80158cc <tcp_shutdown+0xac>)
 8015834:	f240 2207 	movw	r2, #519	; 0x207
 8015838:	4925      	ldr	r1, [pc, #148]	; (80158d0 <tcp_shutdown+0xb0>)
 801583a:	4826      	ldr	r0, [pc, #152]	; (80158d4 <tcp_shutdown+0xb4>)
 801583c:	f00c fa36 	bl	8021cac <iprintf>
 8015840:	f06f 030f 	mvn.w	r3, #15
 8015844:	e03d      	b.n	80158c2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	7d1b      	ldrb	r3, [r3, #20]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d102      	bne.n	8015854 <tcp_shutdown+0x34>
    return ERR_CONN;
 801584e:	f06f 030a 	mvn.w	r3, #10
 8015852:	e036      	b.n	80158c2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d01b      	beq.n	8015892 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	8b5b      	ldrh	r3, [r3, #26]
 801585e:	f043 0310 	orr.w	r3, r3, #16
 8015862:	b29a      	uxth	r2, r3
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d005      	beq.n	801587a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801586e:	2101      	movs	r1, #1
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f7ff fe5d 	bl	8015530 <tcp_close_shutdown>
 8015876:	4603      	mov	r3, r0
 8015878:	e023      	b.n	80158c2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801587e:	2b00      	cmp	r3, #0
 8015880:	d007      	beq.n	8015892 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015886:	4618      	mov	r0, r3
 8015888:	f7ff f968 	bl	8014b5c <pbuf_free>
      pcb->refused_data = NULL;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2200      	movs	r2, #0
 8015890:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d013      	beq.n	80158c0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	7d1b      	ldrb	r3, [r3, #20]
 801589c:	2b04      	cmp	r3, #4
 801589e:	dc02      	bgt.n	80158a6 <tcp_shutdown+0x86>
 80158a0:	2b03      	cmp	r3, #3
 80158a2:	da02      	bge.n	80158aa <tcp_shutdown+0x8a>
 80158a4:	e009      	b.n	80158ba <tcp_shutdown+0x9a>
 80158a6:	2b07      	cmp	r3, #7
 80158a8:	d107      	bne.n	80158ba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	4619      	mov	r1, r3
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f7ff fe3d 	bl	8015530 <tcp_close_shutdown>
 80158b6:	4603      	mov	r3, r0
 80158b8:	e003      	b.n	80158c2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80158ba:	f06f 030a 	mvn.w	r3, #10
 80158be:	e000      	b.n	80158c2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80158c0:	2300      	movs	r3, #0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3710      	adds	r7, #16
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop
 80158cc:	080274dc 	.word	0x080274dc
 80158d0:	08027604 	.word	0x08027604
 80158d4:	08027520 	.word	0x08027520

080158d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b08e      	sub	sp, #56	; 0x38
 80158dc:	af04      	add	r7, sp, #16
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d107      	bne.n	80158f8 <tcp_abandon+0x20>
 80158e8:	4b52      	ldr	r3, [pc, #328]	; (8015a34 <tcp_abandon+0x15c>)
 80158ea:	f240 223d 	movw	r2, #573	; 0x23d
 80158ee:	4952      	ldr	r1, [pc, #328]	; (8015a38 <tcp_abandon+0x160>)
 80158f0:	4852      	ldr	r0, [pc, #328]	; (8015a3c <tcp_abandon+0x164>)
 80158f2:	f00c f9db 	bl	8021cac <iprintf>
 80158f6:	e099      	b.n	8015a2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	7d1b      	ldrb	r3, [r3, #20]
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	d106      	bne.n	801590e <tcp_abandon+0x36>
 8015900:	4b4c      	ldr	r3, [pc, #304]	; (8015a34 <tcp_abandon+0x15c>)
 8015902:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015906:	494e      	ldr	r1, [pc, #312]	; (8015a40 <tcp_abandon+0x168>)
 8015908:	484c      	ldr	r0, [pc, #304]	; (8015a3c <tcp_abandon+0x164>)
 801590a:	f00c f9cf 	bl	8021cac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	7d1b      	ldrb	r3, [r3, #20]
 8015912:	2b0a      	cmp	r3, #10
 8015914:	d107      	bne.n	8015926 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015916:	6879      	ldr	r1, [r7, #4]
 8015918:	484a      	ldr	r0, [pc, #296]	; (8015a44 <tcp_abandon+0x16c>)
 801591a:	f001 fb51 	bl	8016fc0 <tcp_pcb_remove>
    tcp_free(pcb);
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f7ff fd54 	bl	80153cc <tcp_free>
 8015924:	e082      	b.n	8015a2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015926:	2300      	movs	r3, #0
 8015928:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801592a:	2300      	movs	r3, #0
 801592c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015932:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015938:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015940:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	691b      	ldr	r3, [r3, #16]
 8015946:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	7d1b      	ldrb	r3, [r3, #20]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d126      	bne.n	801599e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	8adb      	ldrh	r3, [r3, #22]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d02e      	beq.n	80159b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015958:	4b3b      	ldr	r3, [pc, #236]	; (8015a48 <tcp_abandon+0x170>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	687a      	ldr	r2, [r7, #4]
 801595e:	429a      	cmp	r2, r3
 8015960:	d105      	bne.n	801596e <tcp_abandon+0x96>
 8015962:	4b39      	ldr	r3, [pc, #228]	; (8015a48 <tcp_abandon+0x170>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	4a37      	ldr	r2, [pc, #220]	; (8015a48 <tcp_abandon+0x170>)
 801596a:	6013      	str	r3, [r2, #0]
 801596c:	e013      	b.n	8015996 <tcp_abandon+0xbe>
 801596e:	4b36      	ldr	r3, [pc, #216]	; (8015a48 <tcp_abandon+0x170>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	61fb      	str	r3, [r7, #28]
 8015974:	e00c      	b.n	8015990 <tcp_abandon+0xb8>
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	429a      	cmp	r2, r3
 801597e:	d104      	bne.n	801598a <tcp_abandon+0xb2>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	68da      	ldr	r2, [r3, #12]
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	60da      	str	r2, [r3, #12]
 8015988:	e005      	b.n	8015996 <tcp_abandon+0xbe>
 801598a:	69fb      	ldr	r3, [r7, #28]
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	61fb      	str	r3, [r7, #28]
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d1ef      	bne.n	8015976 <tcp_abandon+0x9e>
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	60da      	str	r2, [r3, #12]
 801599c:	e00b      	b.n	80159b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	8adb      	ldrh	r3, [r3, #22]
 80159a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80159a8:	6879      	ldr	r1, [r7, #4]
 80159aa:	4828      	ldr	r0, [pc, #160]	; (8015a4c <tcp_abandon+0x174>)
 80159ac:	f001 fb08 	bl	8016fc0 <tcp_pcb_remove>
 80159b0:	4b27      	ldr	r3, [pc, #156]	; (8015a50 <tcp_abandon+0x178>)
 80159b2:	2201      	movs	r2, #1
 80159b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d004      	beq.n	80159c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159c2:	4618      	mov	r0, r3
 80159c4:	f000 ffdc 	bl	8016980 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d004      	beq.n	80159da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d4:	4618      	mov	r0, r3
 80159d6:	f000 ffd3 	bl	8016980 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d004      	beq.n	80159ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159e6:	4618      	mov	r0, r3
 80159e8:	f000 ffca 	bl	8016980 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80159ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00e      	beq.n	8015a10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80159f2:	6879      	ldr	r1, [r7, #4]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	3304      	adds	r3, #4
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	8b12      	ldrh	r2, [r2, #24]
 80159fc:	9202      	str	r2, [sp, #8]
 80159fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015a00:	9201      	str	r2, [sp, #4]
 8015a02:	9300      	str	r3, [sp, #0]
 8015a04:	460b      	mov	r3, r1
 8015a06:	697a      	ldr	r2, [r7, #20]
 8015a08:	69b9      	ldr	r1, [r7, #24]
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f005 fd10 	bl	801b430 <tcp_rst>
    }
    last_state = pcb->state;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	7d1b      	ldrb	r3, [r3, #20]
 8015a14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f7ff fcd8 	bl	80153cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d004      	beq.n	8015a2c <tcp_abandon+0x154>
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	f06f 010c 	mvn.w	r1, #12
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	4798      	blx	r3
  }
}
 8015a2c:	3728      	adds	r7, #40	; 0x28
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	080274dc 	.word	0x080274dc
 8015a38:	08027620 	.word	0x08027620
 8015a3c:	08027520 	.word	0x08027520
 8015a40:	0802763c 	.word	0x0802763c
 8015a44:	2001b1ac 	.word	0x2001b1ac
 8015a48:	2001b1a8 	.word	0x2001b1a8
 8015a4c:	2001b19c 	.word	0x2001b19c
 8015a50:	2001b198 	.word	0x2001b198

08015a54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015a5c:	2101      	movs	r1, #1
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f7ff ff3a 	bl	80158d8 <tcp_abandon>
}
 8015a64:	bf00      	nop
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b088      	sub	sp, #32
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	4613      	mov	r3, r2
 8015a78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015a7a:	2304      	movs	r3, #4
 8015a7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015a7e:	68bb      	ldr	r3, [r7, #8]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d101      	bne.n	8015a88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015a84:	4b3e      	ldr	r3, [pc, #248]	; (8015b80 <tcp_bind+0x114>)
 8015a86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d109      	bne.n	8015aa2 <tcp_bind+0x36>
 8015a8e:	4b3d      	ldr	r3, [pc, #244]	; (8015b84 <tcp_bind+0x118>)
 8015a90:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015a94:	493c      	ldr	r1, [pc, #240]	; (8015b88 <tcp_bind+0x11c>)
 8015a96:	483d      	ldr	r0, [pc, #244]	; (8015b8c <tcp_bind+0x120>)
 8015a98:	f00c f908 	bl	8021cac <iprintf>
 8015a9c:	f06f 030f 	mvn.w	r3, #15
 8015aa0:	e06a      	b.n	8015b78 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	7d1b      	ldrb	r3, [r3, #20]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d009      	beq.n	8015abe <tcp_bind+0x52>
 8015aaa:	4b36      	ldr	r3, [pc, #216]	; (8015b84 <tcp_bind+0x118>)
 8015aac:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015ab0:	4937      	ldr	r1, [pc, #220]	; (8015b90 <tcp_bind+0x124>)
 8015ab2:	4836      	ldr	r0, [pc, #216]	; (8015b8c <tcp_bind+0x120>)
 8015ab4:	f00c f8fa 	bl	8021cac <iprintf>
 8015ab8:	f06f 0305 	mvn.w	r3, #5
 8015abc:	e05c      	b.n	8015b78 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015abe:	88fb      	ldrh	r3, [r7, #6]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d109      	bne.n	8015ad8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015ac4:	f000 f9de 	bl	8015e84 <tcp_new_port>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015acc:	88fb      	ldrh	r3, [r7, #6]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d135      	bne.n	8015b3e <tcp_bind+0xd2>
      return ERR_BUF;
 8015ad2:	f06f 0301 	mvn.w	r3, #1
 8015ad6:	e04f      	b.n	8015b78 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015ad8:	2300      	movs	r3, #0
 8015ada:	61fb      	str	r3, [r7, #28]
 8015adc:	e02b      	b.n	8015b36 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015ade:	4a2d      	ldr	r2, [pc, #180]	; (8015b94 <tcp_bind+0x128>)
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	61bb      	str	r3, [r7, #24]
 8015aea:	e01e      	b.n	8015b2a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015aec:	69bb      	ldr	r3, [r7, #24]
 8015aee:	8adb      	ldrh	r3, [r3, #22]
 8015af0:	88fa      	ldrh	r2, [r7, #6]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d116      	bne.n	8015b24 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015af6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d010      	beq.n	8015b1e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015afc:	69bb      	ldr	r3, [r7, #24]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d00c      	beq.n	8015b1e <tcp_bind+0xb2>
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d009      	beq.n	8015b1e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d005      	beq.n	8015b1e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	681a      	ldr	r2, [r3, #0]
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d102      	bne.n	8015b24 <tcp_bind+0xb8>
              return ERR_USE;
 8015b1e:	f06f 0307 	mvn.w	r3, #7
 8015b22:	e029      	b.n	8015b78 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	68db      	ldr	r3, [r3, #12]
 8015b28:	61bb      	str	r3, [r7, #24]
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d1dd      	bne.n	8015aec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	3301      	adds	r3, #1
 8015b34:	61fb      	str	r3, [r7, #28]
 8015b36:	69fa      	ldr	r2, [r7, #28]
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	dbcf      	blt.n	8015ade <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00c      	beq.n	8015b5e <tcp_bind+0xf2>
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d008      	beq.n	8015b5e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d002      	beq.n	8015b58 <tcp_bind+0xec>
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	e000      	b.n	8015b5a <tcp_bind+0xee>
 8015b58:	2300      	movs	r3, #0
 8015b5a:	68fa      	ldr	r2, [r7, #12]
 8015b5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	88fa      	ldrh	r2, [r7, #6]
 8015b62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015b64:	4b0c      	ldr	r3, [pc, #48]	; (8015b98 <tcp_bind+0x12c>)
 8015b66:	681a      	ldr	r2, [r3, #0]
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	60da      	str	r2, [r3, #12]
 8015b6c:	4a0a      	ldr	r2, [pc, #40]	; (8015b98 <tcp_bind+0x12c>)
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	6013      	str	r3, [r2, #0]
 8015b72:	f005 fe1f 	bl	801b7b4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015b76:	2300      	movs	r3, #0
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3720      	adds	r7, #32
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	08029ae8 	.word	0x08029ae8
 8015b84:	080274dc 	.word	0x080274dc
 8015b88:	08027670 	.word	0x08027670
 8015b8c:	08027520 	.word	0x08027520
 8015b90:	08027688 	.word	0x08027688
 8015b94:	08029aa8 	.word	0x08029aa8
 8015b98:	2001b1a8 	.word	0x2001b1a8

08015b9c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d106      	bne.n	8015bbe <tcp_accept_null+0x22>
 8015bb0:	4b07      	ldr	r3, [pc, #28]	; (8015bd0 <tcp_accept_null+0x34>)
 8015bb2:	f240 320f 	movw	r2, #783	; 0x30f
 8015bb6:	4907      	ldr	r1, [pc, #28]	; (8015bd4 <tcp_accept_null+0x38>)
 8015bb8:	4807      	ldr	r0, [pc, #28]	; (8015bd8 <tcp_accept_null+0x3c>)
 8015bba:	f00c f877 	bl	8021cac <iprintf>

  tcp_abort(pcb);
 8015bbe:	68b8      	ldr	r0, [r7, #8]
 8015bc0:	f7ff ff48 	bl	8015a54 <tcp_abort>

  return ERR_ABRT;
 8015bc4:	f06f 030c 	mvn.w	r3, #12
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}
 8015bd0:	080274dc 	.word	0x080274dc
 8015bd4:	080276b0 	.word	0x080276b0
 8015bd8:	08027520 	.word	0x08027520

08015bdc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b088      	sub	sp, #32
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	460b      	mov	r3, r1
 8015be6:	607a      	str	r2, [r7, #4]
 8015be8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8015bea:	2300      	movs	r3, #0
 8015bec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d109      	bne.n	8015c08 <tcp_listen_with_backlog_and_err+0x2c>
 8015bf4:	4b47      	ldr	r3, [pc, #284]	; (8015d14 <tcp_listen_with_backlog_and_err+0x138>)
 8015bf6:	f240 3259 	movw	r2, #857	; 0x359
 8015bfa:	4947      	ldr	r1, [pc, #284]	; (8015d18 <tcp_listen_with_backlog_and_err+0x13c>)
 8015bfc:	4847      	ldr	r0, [pc, #284]	; (8015d1c <tcp_listen_with_backlog_and_err+0x140>)
 8015bfe:	f00c f855 	bl	8021cac <iprintf>
 8015c02:	23f0      	movs	r3, #240	; 0xf0
 8015c04:	76fb      	strb	r3, [r7, #27]
 8015c06:	e079      	b.n	8015cfc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	7d1b      	ldrb	r3, [r3, #20]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d009      	beq.n	8015c24 <tcp_listen_with_backlog_and_err+0x48>
 8015c10:	4b40      	ldr	r3, [pc, #256]	; (8015d14 <tcp_listen_with_backlog_and_err+0x138>)
 8015c12:	f240 325a 	movw	r2, #858	; 0x35a
 8015c16:	4942      	ldr	r1, [pc, #264]	; (8015d20 <tcp_listen_with_backlog_and_err+0x144>)
 8015c18:	4840      	ldr	r0, [pc, #256]	; (8015d1c <tcp_listen_with_backlog_and_err+0x140>)
 8015c1a:	f00c f847 	bl	8021cac <iprintf>
 8015c1e:	23f1      	movs	r3, #241	; 0xf1
 8015c20:	76fb      	strb	r3, [r7, #27]
 8015c22:	e06b      	b.n	8015cfc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	7d1b      	ldrb	r3, [r3, #20]
 8015c28:	2b01      	cmp	r3, #1
 8015c2a:	d104      	bne.n	8015c36 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015c30:	23f7      	movs	r3, #247	; 0xf7
 8015c32:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015c34:	e062      	b.n	8015cfc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015c36:	2002      	movs	r0, #2
 8015c38:	f7fe f85c 	bl	8013cf4 <memp_malloc>
 8015c3c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8015c3e:	69fb      	ldr	r3, [r7, #28]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d102      	bne.n	8015c4a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015c44:	23ff      	movs	r3, #255	; 0xff
 8015c46:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015c48:	e058      	b.n	8015cfc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	691a      	ldr	r2, [r3, #16]
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	8ada      	ldrh	r2, [r3, #22]
 8015c56:	69fb      	ldr	r3, [r7, #28]
 8015c58:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015c5a:	69fb      	ldr	r3, [r7, #28]
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	7d5a      	ldrb	r2, [r3, #21]
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	7a5a      	ldrb	r2, [r3, #9]
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015c70:	69fb      	ldr	r3, [r7, #28]
 8015c72:	2200      	movs	r2, #0
 8015c74:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	7ada      	ldrb	r2, [r3, #11]
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	7a9a      	ldrb	r2, [r3, #10]
 8015c82:	69fb      	ldr	r3, [r7, #28]
 8015c84:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	681a      	ldr	r2, [r3, #0]
 8015c8a:	69fb      	ldr	r3, [r7, #28]
 8015c8c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	8adb      	ldrh	r3, [r3, #22]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d021      	beq.n	8015cda <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015c96:	4b23      	ldr	r3, [pc, #140]	; (8015d24 <tcp_listen_with_backlog_and_err+0x148>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	68fa      	ldr	r2, [r7, #12]
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	d105      	bne.n	8015cac <tcp_listen_with_backlog_and_err+0xd0>
 8015ca0:	4b20      	ldr	r3, [pc, #128]	; (8015d24 <tcp_listen_with_backlog_and_err+0x148>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	68db      	ldr	r3, [r3, #12]
 8015ca6:	4a1f      	ldr	r2, [pc, #124]	; (8015d24 <tcp_listen_with_backlog_and_err+0x148>)
 8015ca8:	6013      	str	r3, [r2, #0]
 8015caa:	e013      	b.n	8015cd4 <tcp_listen_with_backlog_and_err+0xf8>
 8015cac:	4b1d      	ldr	r3, [pc, #116]	; (8015d24 <tcp_listen_with_backlog_and_err+0x148>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	617b      	str	r3, [r7, #20]
 8015cb2:	e00c      	b.n	8015cce <tcp_listen_with_backlog_and_err+0xf2>
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	68db      	ldr	r3, [r3, #12]
 8015cb8:	68fa      	ldr	r2, [r7, #12]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d104      	bne.n	8015cc8 <tcp_listen_with_backlog_and_err+0xec>
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	68da      	ldr	r2, [r3, #12]
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	60da      	str	r2, [r3, #12]
 8015cc6:	e005      	b.n	8015cd4 <tcp_listen_with_backlog_and_err+0xf8>
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	617b      	str	r3, [r7, #20]
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d1ef      	bne.n	8015cb4 <tcp_listen_with_backlog_and_err+0xd8>
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	f7ff fb76 	bl	80153cc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	4a11      	ldr	r2, [pc, #68]	; (8015d28 <tcp_listen_with_backlog_and_err+0x14c>)
 8015ce4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015ce6:	4b11      	ldr	r3, [pc, #68]	; (8015d2c <tcp_listen_with_backlog_and_err+0x150>)
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	60da      	str	r2, [r3, #12]
 8015cee:	4a0f      	ldr	r2, [pc, #60]	; (8015d2c <tcp_listen_with_backlog_and_err+0x150>)
 8015cf0:	69fb      	ldr	r3, [r7, #28]
 8015cf2:	6013      	str	r3, [r2, #0]
 8015cf4:	f005 fd5e 	bl	801b7b4 <tcp_timer_needed>
  res = ERR_OK;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d002      	beq.n	8015d08 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	7efa      	ldrb	r2, [r7, #27]
 8015d06:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015d08:	69fb      	ldr	r3, [r7, #28]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3720      	adds	r7, #32
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	bf00      	nop
 8015d14:	080274dc 	.word	0x080274dc
 8015d18:	080276d0 	.word	0x080276d0
 8015d1c:	08027520 	.word	0x08027520
 8015d20:	08027700 	.word	0x08027700
 8015d24:	2001b1a8 	.word	0x2001b1a8
 8015d28:	08015b9d 	.word	0x08015b9d
 8015d2c:	2001b1a4 	.word	0x2001b1a4

08015d30 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b084      	sub	sp, #16
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d106      	bne.n	8015d4c <tcp_update_rcv_ann_wnd+0x1c>
 8015d3e:	4b25      	ldr	r3, [pc, #148]	; (8015dd4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015d40:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015d44:	4924      	ldr	r1, [pc, #144]	; (8015dd8 <tcp_update_rcv_ann_wnd+0xa8>)
 8015d46:	4825      	ldr	r0, [pc, #148]	; (8015ddc <tcp_update_rcv_ann_wnd+0xac>)
 8015d48:	f00b ffb0 	bl	8021cac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015d54:	4413      	add	r3, r2
 8015d56:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015d60:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015d64:	bf28      	it	cs
 8015d66:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015d6a:	b292      	uxth	r2, r2
 8015d6c:	4413      	add	r3, r2
 8015d6e:	68fa      	ldr	r2, [r7, #12]
 8015d70:	1ad3      	subs	r3, r2, r3
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	db08      	blt.n	8015d88 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d82:	68fa      	ldr	r2, [r7, #12]
 8015d84:	1ad3      	subs	r3, r2, r3
 8015d86:	e020      	b.n	8015dca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d90:	1ad3      	subs	r3, r2, r3
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	dd03      	ble.n	8015d9e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015d9c:	e014      	b.n	8015dc8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da6:	1ad3      	subs	r3, r2, r3
 8015da8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015db0:	d306      	bcc.n	8015dc0 <tcp_update_rcv_ann_wnd+0x90>
 8015db2:	4b08      	ldr	r3, [pc, #32]	; (8015dd4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015db4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015db8:	4909      	ldr	r1, [pc, #36]	; (8015de0 <tcp_update_rcv_ann_wnd+0xb0>)
 8015dba:	4808      	ldr	r0, [pc, #32]	; (8015ddc <tcp_update_rcv_ann_wnd+0xac>)
 8015dbc:	f00b ff76 	bl	8021cac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	b29a      	uxth	r2, r3
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015dc8:	2300      	movs	r3, #0
  }
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3710      	adds	r7, #16
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}
 8015dd2:	bf00      	nop
 8015dd4:	080274dc 	.word	0x080274dc
 8015dd8:	08027738 	.word	0x08027738
 8015ddc:	08027520 	.word	0x08027520
 8015de0:	0802775c 	.word	0x0802775c

08015de4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b084      	sub	sp, #16
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	460b      	mov	r3, r1
 8015dee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d107      	bne.n	8015e06 <tcp_recved+0x22>
 8015df6:	4b1f      	ldr	r3, [pc, #124]	; (8015e74 <tcp_recved+0x90>)
 8015df8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015dfc:	491e      	ldr	r1, [pc, #120]	; (8015e78 <tcp_recved+0x94>)
 8015dfe:	481f      	ldr	r0, [pc, #124]	; (8015e7c <tcp_recved+0x98>)
 8015e00:	f00b ff54 	bl	8021cac <iprintf>
 8015e04:	e032      	b.n	8015e6c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7d1b      	ldrb	r3, [r3, #20]
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	d106      	bne.n	8015e1c <tcp_recved+0x38>
 8015e0e:	4b19      	ldr	r3, [pc, #100]	; (8015e74 <tcp_recved+0x90>)
 8015e10:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015e14:	491a      	ldr	r1, [pc, #104]	; (8015e80 <tcp_recved+0x9c>)
 8015e16:	4819      	ldr	r0, [pc, #100]	; (8015e7c <tcp_recved+0x98>)
 8015e18:	f00b ff48 	bl	8021cac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015e20:	887b      	ldrh	r3, [r7, #2]
 8015e22:	4413      	add	r3, r2
 8015e24:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015e26:	89fb      	ldrh	r3, [r7, #14]
 8015e28:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015e2c:	d804      	bhi.n	8015e38 <tcp_recved+0x54>
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e32:	89fa      	ldrh	r2, [r7, #14]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d204      	bcs.n	8015e42 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015e3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8015e40:	e002      	b.n	8015e48 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	89fa      	ldrh	r2, [r7, #14]
 8015e46:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f7ff ff71 	bl	8015d30 <tcp_update_rcv_ann_wnd>
 8015e4e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015e56:	d309      	bcc.n	8015e6c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	8b5b      	ldrh	r3, [r3, #26]
 8015e5c:	f043 0302 	orr.w	r3, r3, #2
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f004 fd22 	bl	801a8b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015e6c:	3710      	adds	r7, #16
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	080274dc 	.word	0x080274dc
 8015e78:	08027778 	.word	0x08027778
 8015e7c:	08027520 	.word	0x08027520
 8015e80:	08027790 	.word	0x08027790

08015e84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015e84:	b480      	push	{r7}
 8015e86:	b083      	sub	sp, #12
 8015e88:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015e8e:	4b1e      	ldr	r3, [pc, #120]	; (8015f08 <tcp_new_port+0x84>)
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	3301      	adds	r3, #1
 8015e94:	b29a      	uxth	r2, r3
 8015e96:	4b1c      	ldr	r3, [pc, #112]	; (8015f08 <tcp_new_port+0x84>)
 8015e98:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015e9a:	4b1b      	ldr	r3, [pc, #108]	; (8015f08 <tcp_new_port+0x84>)
 8015e9c:	881b      	ldrh	r3, [r3, #0]
 8015e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d103      	bne.n	8015eae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015ea6:	4b18      	ldr	r3, [pc, #96]	; (8015f08 <tcp_new_port+0x84>)
 8015ea8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015eac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015eae:	2300      	movs	r3, #0
 8015eb0:	71fb      	strb	r3, [r7, #7]
 8015eb2:	e01e      	b.n	8015ef2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015eb4:	79fb      	ldrb	r3, [r7, #7]
 8015eb6:	4a15      	ldr	r2, [pc, #84]	; (8015f0c <tcp_new_port+0x88>)
 8015eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	603b      	str	r3, [r7, #0]
 8015ec0:	e011      	b.n	8015ee6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	8ada      	ldrh	r2, [r3, #22]
 8015ec6:	4b10      	ldr	r3, [pc, #64]	; (8015f08 <tcp_new_port+0x84>)
 8015ec8:	881b      	ldrh	r3, [r3, #0]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d108      	bne.n	8015ee0 <tcp_new_port+0x5c>
        n++;
 8015ece:	88bb      	ldrh	r3, [r7, #4]
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015ed4:	88bb      	ldrh	r3, [r7, #4]
 8015ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015eda:	d3d8      	bcc.n	8015e8e <tcp_new_port+0xa>
          return 0;
 8015edc:	2300      	movs	r3, #0
 8015ede:	e00d      	b.n	8015efc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	68db      	ldr	r3, [r3, #12]
 8015ee4:	603b      	str	r3, [r7, #0]
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d1ea      	bne.n	8015ec2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015eec:	79fb      	ldrb	r3, [r7, #7]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	71fb      	strb	r3, [r7, #7]
 8015ef2:	79fb      	ldrb	r3, [r7, #7]
 8015ef4:	2b03      	cmp	r3, #3
 8015ef6:	d9dd      	bls.n	8015eb4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015ef8:	4b03      	ldr	r3, [pc, #12]	; (8015f08 <tcp_new_port+0x84>)
 8015efa:	881b      	ldrh	r3, [r3, #0]
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	370c      	adds	r7, #12
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr
 8015f08:	20000064 	.word	0x20000064
 8015f0c:	08029aa8 	.word	0x08029aa8

08015f10 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b08a      	sub	sp, #40	; 0x28
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	60b9      	str	r1, [r7, #8]
 8015f1a:	603b      	str	r3, [r7, #0]
 8015f1c:	4613      	mov	r3, r2
 8015f1e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8015f20:	2300      	movs	r3, #0
 8015f22:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d109      	bne.n	8015f3e <tcp_connect+0x2e>
 8015f2a:	4b7d      	ldr	r3, [pc, #500]	; (8016120 <tcp_connect+0x210>)
 8015f2c:	f240 4235 	movw	r2, #1077	; 0x435
 8015f30:	497c      	ldr	r1, [pc, #496]	; (8016124 <tcp_connect+0x214>)
 8015f32:	487d      	ldr	r0, [pc, #500]	; (8016128 <tcp_connect+0x218>)
 8015f34:	f00b feba 	bl	8021cac <iprintf>
 8015f38:	f06f 030f 	mvn.w	r3, #15
 8015f3c:	e0ec      	b.n	8016118 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d109      	bne.n	8015f58 <tcp_connect+0x48>
 8015f44:	4b76      	ldr	r3, [pc, #472]	; (8016120 <tcp_connect+0x210>)
 8015f46:	f240 4236 	movw	r2, #1078	; 0x436
 8015f4a:	4978      	ldr	r1, [pc, #480]	; (801612c <tcp_connect+0x21c>)
 8015f4c:	4876      	ldr	r0, [pc, #472]	; (8016128 <tcp_connect+0x218>)
 8015f4e:	f00b fead 	bl	8021cac <iprintf>
 8015f52:	f06f 030f 	mvn.w	r3, #15
 8015f56:	e0df      	b.n	8016118 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	7d1b      	ldrb	r3, [r3, #20]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d009      	beq.n	8015f74 <tcp_connect+0x64>
 8015f60:	4b6f      	ldr	r3, [pc, #444]	; (8016120 <tcp_connect+0x210>)
 8015f62:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8015f66:	4972      	ldr	r1, [pc, #456]	; (8016130 <tcp_connect+0x220>)
 8015f68:	486f      	ldr	r0, [pc, #444]	; (8016128 <tcp_connect+0x218>)
 8015f6a:	f00b fe9f 	bl	8021cac <iprintf>
 8015f6e:	f06f 0309 	mvn.w	r3, #9
 8015f72:	e0d1      	b.n	8016118 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d002      	beq.n	8015f80 <tcp_connect+0x70>
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	e000      	b.n	8015f82 <tcp_connect+0x72>
 8015f80:	2300      	movs	r3, #0
 8015f82:	68fa      	ldr	r2, [r7, #12]
 8015f84:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	88fa      	ldrh	r2, [r7, #6]
 8015f8a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	7a1b      	ldrb	r3, [r3, #8]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d006      	beq.n	8015fa2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	7a1b      	ldrb	r3, [r3, #8]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fe fa1f 	bl	80143dc <netif_get_by_index>
 8015f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8015fa0:	e005      	b.n	8015fae <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	3304      	adds	r3, #4
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f009 fb00 	bl	801f5ac <ip4_route>
 8015fac:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8015fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d102      	bne.n	8015fba <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8015fb4:	f06f 0303 	mvn.w	r3, #3
 8015fb8:	e0ae      	b.n	8016118 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d003      	beq.n	8015fc8 <tcp_connect+0xb8>
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d111      	bne.n	8015fec <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8015fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d002      	beq.n	8015fd4 <tcp_connect+0xc4>
 8015fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd0:	3304      	adds	r3, #4
 8015fd2:	e000      	b.n	8015fd6 <tcp_connect+0xc6>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8015fd8:	69fb      	ldr	r3, [r7, #28]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d102      	bne.n	8015fe4 <tcp_connect+0xd4>
      return ERR_RTE;
 8015fde:	f06f 0303 	mvn.w	r3, #3
 8015fe2:	e099      	b.n	8016118 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	8adb      	ldrh	r3, [r3, #22]
 8015ff0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	8adb      	ldrh	r3, [r3, #22]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d10c      	bne.n	8016014 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8015ffa:	f7ff ff43 	bl	8015e84 <tcp_new_port>
 8015ffe:	4603      	mov	r3, r0
 8016000:	461a      	mov	r2, r3
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	8adb      	ldrh	r3, [r3, #22]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d102      	bne.n	8016014 <tcp_connect+0x104>
      return ERR_BUF;
 801600e:	f06f 0301 	mvn.w	r3, #1
 8016012:	e081      	b.n	8016118 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	f001 f867 	bl	80170e8 <tcp_next_iss>
 801601a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2200      	movs	r2, #0
 8016020:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	697a      	ldr	r2, [r7, #20]
 8016026:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	1e5a      	subs	r2, r3, #1
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	1e5a      	subs	r2, r3, #1
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	1e5a      	subs	r2, r3, #1
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801605e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016068:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	3304      	adds	r3, #4
 8016072:	461a      	mov	r2, r3
 8016074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016076:	f001 f85d 	bl	8017134 <tcp_eff_send_mss_netif>
 801607a:	4603      	mov	r3, r0
 801607c:	461a      	mov	r2, r3
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	2201      	movs	r2, #1
 8016086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	683a      	ldr	r2, [r7, #0]
 801608e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016092:	2102      	movs	r1, #2
 8016094:	68f8      	ldr	r0, [r7, #12]
 8016096:	f004 fb1d 	bl	801a6d4 <tcp_enqueue_flags>
 801609a:	4603      	mov	r3, r0
 801609c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801609e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d136      	bne.n	8016114 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	2202      	movs	r2, #2
 80160aa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80160ac:	8b7b      	ldrh	r3, [r7, #26]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d021      	beq.n	80160f6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80160b2:	4b20      	ldr	r3, [pc, #128]	; (8016134 <tcp_connect+0x224>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	68fa      	ldr	r2, [r7, #12]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d105      	bne.n	80160c8 <tcp_connect+0x1b8>
 80160bc:	4b1d      	ldr	r3, [pc, #116]	; (8016134 <tcp_connect+0x224>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	4a1c      	ldr	r2, [pc, #112]	; (8016134 <tcp_connect+0x224>)
 80160c4:	6013      	str	r3, [r2, #0]
 80160c6:	e013      	b.n	80160f0 <tcp_connect+0x1e0>
 80160c8:	4b1a      	ldr	r3, [pc, #104]	; (8016134 <tcp_connect+0x224>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	623b      	str	r3, [r7, #32]
 80160ce:	e00c      	b.n	80160ea <tcp_connect+0x1da>
 80160d0:	6a3b      	ldr	r3, [r7, #32]
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	68fa      	ldr	r2, [r7, #12]
 80160d6:	429a      	cmp	r2, r3
 80160d8:	d104      	bne.n	80160e4 <tcp_connect+0x1d4>
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	68da      	ldr	r2, [r3, #12]
 80160de:	6a3b      	ldr	r3, [r7, #32]
 80160e0:	60da      	str	r2, [r3, #12]
 80160e2:	e005      	b.n	80160f0 <tcp_connect+0x1e0>
 80160e4:	6a3b      	ldr	r3, [r7, #32]
 80160e6:	68db      	ldr	r3, [r3, #12]
 80160e8:	623b      	str	r3, [r7, #32]
 80160ea:	6a3b      	ldr	r3, [r7, #32]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d1ef      	bne.n	80160d0 <tcp_connect+0x1c0>
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2200      	movs	r2, #0
 80160f4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80160f6:	4b10      	ldr	r3, [pc, #64]	; (8016138 <tcp_connect+0x228>)
 80160f8:	681a      	ldr	r2, [r3, #0]
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	60da      	str	r2, [r3, #12]
 80160fe:	4a0e      	ldr	r2, [pc, #56]	; (8016138 <tcp_connect+0x228>)
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	6013      	str	r3, [r2, #0]
 8016104:	f005 fb56 	bl	801b7b4 <tcp_timer_needed>
 8016108:	4b0c      	ldr	r3, [pc, #48]	; (801613c <tcp_connect+0x22c>)
 801610a:	2201      	movs	r2, #1
 801610c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f004 fbce 	bl	801a8b0 <tcp_output>
  }
  return ret;
 8016114:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016118:	4618      	mov	r0, r3
 801611a:	3728      	adds	r7, #40	; 0x28
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}
 8016120:	080274dc 	.word	0x080274dc
 8016124:	080277b8 	.word	0x080277b8
 8016128:	08027520 	.word	0x08027520
 801612c:	080277d4 	.word	0x080277d4
 8016130:	080277f0 	.word	0x080277f0
 8016134:	2001b1a8 	.word	0x2001b1a8
 8016138:	2001b19c 	.word	0x2001b19c
 801613c:	2001b198 	.word	0x2001b198

08016140 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016140:	b5b0      	push	{r4, r5, r7, lr}
 8016142:	b090      	sub	sp, #64	; 0x40
 8016144:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016146:	2300      	movs	r3, #0
 8016148:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801614c:	4b94      	ldr	r3, [pc, #592]	; (80163a0 <tcp_slowtmr+0x260>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	3301      	adds	r3, #1
 8016152:	4a93      	ldr	r2, [pc, #588]	; (80163a0 <tcp_slowtmr+0x260>)
 8016154:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016156:	4b93      	ldr	r3, [pc, #588]	; (80163a4 <tcp_slowtmr+0x264>)
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	3301      	adds	r3, #1
 801615c:	b2da      	uxtb	r2, r3
 801615e:	4b91      	ldr	r3, [pc, #580]	; (80163a4 <tcp_slowtmr+0x264>)
 8016160:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016162:	2300      	movs	r3, #0
 8016164:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016166:	4b90      	ldr	r3, [pc, #576]	; (80163a8 <tcp_slowtmr+0x268>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801616c:	e29f      	b.n	80166ae <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016170:	7d1b      	ldrb	r3, [r3, #20]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d106      	bne.n	8016184 <tcp_slowtmr+0x44>
 8016176:	4b8d      	ldr	r3, [pc, #564]	; (80163ac <tcp_slowtmr+0x26c>)
 8016178:	f240 42be 	movw	r2, #1214	; 0x4be
 801617c:	498c      	ldr	r1, [pc, #560]	; (80163b0 <tcp_slowtmr+0x270>)
 801617e:	488d      	ldr	r0, [pc, #564]	; (80163b4 <tcp_slowtmr+0x274>)
 8016180:	f00b fd94 	bl	8021cac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016186:	7d1b      	ldrb	r3, [r3, #20]
 8016188:	2b01      	cmp	r3, #1
 801618a:	d106      	bne.n	801619a <tcp_slowtmr+0x5a>
 801618c:	4b87      	ldr	r3, [pc, #540]	; (80163ac <tcp_slowtmr+0x26c>)
 801618e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016192:	4989      	ldr	r1, [pc, #548]	; (80163b8 <tcp_slowtmr+0x278>)
 8016194:	4887      	ldr	r0, [pc, #540]	; (80163b4 <tcp_slowtmr+0x274>)
 8016196:	f00b fd89 	bl	8021cac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619c:	7d1b      	ldrb	r3, [r3, #20]
 801619e:	2b0a      	cmp	r3, #10
 80161a0:	d106      	bne.n	80161b0 <tcp_slowtmr+0x70>
 80161a2:	4b82      	ldr	r3, [pc, #520]	; (80163ac <tcp_slowtmr+0x26c>)
 80161a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80161a8:	4984      	ldr	r1, [pc, #528]	; (80163bc <tcp_slowtmr+0x27c>)
 80161aa:	4882      	ldr	r0, [pc, #520]	; (80163b4 <tcp_slowtmr+0x274>)
 80161ac:	f00b fd7e 	bl	8021cac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	7f9a      	ldrb	r2, [r3, #30]
 80161b4:	4b7b      	ldr	r3, [pc, #492]	; (80163a4 <tcp_slowtmr+0x264>)
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d105      	bne.n	80161c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80161bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	68db      	ldr	r3, [r3, #12]
 80161c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80161c6:	e272      	b.n	80166ae <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80161c8:	4b76      	ldr	r3, [pc, #472]	; (80163a4 <tcp_slowtmr+0x264>)
 80161ca:	781a      	ldrb	r2, [r3, #0]
 80161cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80161d0:	2300      	movs	r3, #0
 80161d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80161d6:	2300      	movs	r3, #0
 80161d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80161dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161de:	7d1b      	ldrb	r3, [r3, #20]
 80161e0:	2b02      	cmp	r3, #2
 80161e2:	d10a      	bne.n	80161fa <tcp_slowtmr+0xba>
 80161e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80161ea:	2b05      	cmp	r3, #5
 80161ec:	d905      	bls.n	80161fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80161ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f2:	3301      	adds	r3, #1
 80161f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80161f8:	e11e      	b.n	8016438 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80161fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016200:	2b0b      	cmp	r3, #11
 8016202:	d905      	bls.n	8016210 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016208:	3301      	adds	r3, #1
 801620a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801620e:	e113      	b.n	8016438 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016212:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016216:	2b00      	cmp	r3, #0
 8016218:	d075      	beq.n	8016306 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801621e:	2b00      	cmp	r3, #0
 8016220:	d006      	beq.n	8016230 <tcp_slowtmr+0xf0>
 8016222:	4b62      	ldr	r3, [pc, #392]	; (80163ac <tcp_slowtmr+0x26c>)
 8016224:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016228:	4965      	ldr	r1, [pc, #404]	; (80163c0 <tcp_slowtmr+0x280>)
 801622a:	4862      	ldr	r0, [pc, #392]	; (80163b4 <tcp_slowtmr+0x274>)
 801622c:	f00b fd3e 	bl	8021cac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016234:	2b00      	cmp	r3, #0
 8016236:	d106      	bne.n	8016246 <tcp_slowtmr+0x106>
 8016238:	4b5c      	ldr	r3, [pc, #368]	; (80163ac <tcp_slowtmr+0x26c>)
 801623a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801623e:	4961      	ldr	r1, [pc, #388]	; (80163c4 <tcp_slowtmr+0x284>)
 8016240:	485c      	ldr	r0, [pc, #368]	; (80163b4 <tcp_slowtmr+0x274>)
 8016242:	f00b fd33 	bl	8021cac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016248:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801624c:	2b0b      	cmp	r3, #11
 801624e:	d905      	bls.n	801625c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016254:	3301      	adds	r3, #1
 8016256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801625a:	e0ed      	b.n	8016438 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016262:	3b01      	subs	r3, #1
 8016264:	4a58      	ldr	r2, [pc, #352]	; (80163c8 <tcp_slowtmr+0x288>)
 8016266:	5cd3      	ldrb	r3, [r2, r3]
 8016268:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016270:	7c7a      	ldrb	r2, [r7, #17]
 8016272:	429a      	cmp	r2, r3
 8016274:	d907      	bls.n	8016286 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016278:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801627c:	3301      	adds	r3, #1
 801627e:	b2da      	uxtb	r2, r3
 8016280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016282:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016288:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801628c:	7c7a      	ldrb	r2, [r7, #17]
 801628e:	429a      	cmp	r2, r3
 8016290:	f200 80d2 	bhi.w	8016438 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016294:	2301      	movs	r3, #1
 8016296:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d108      	bne.n	80162b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80162a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162a4:	f005 f9b8 	bl	801b618 <tcp_zero_window_probe>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d014      	beq.n	80162d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80162ae:	2300      	movs	r3, #0
 80162b0:	623b      	str	r3, [r7, #32]
 80162b2:	e011      	b.n	80162d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162ba:	4619      	mov	r1, r3
 80162bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162be:	f004 f86d 	bl	801a39c <tcp_split_unsent_seg>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d107      	bne.n	80162d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80162c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162ca:	f004 faf1 	bl	801a8b0 <tcp_output>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d101      	bne.n	80162d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80162d4:	2300      	movs	r3, #0
 80162d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80162d8:	6a3b      	ldr	r3, [r7, #32]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f000 80ac 	beq.w	8016438 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80162e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e2:	2200      	movs	r2, #0
 80162e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80162e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80162ee:	2b06      	cmp	r3, #6
 80162f0:	f200 80a2 	bhi.w	8016438 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80162f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80162fa:	3301      	adds	r3, #1
 80162fc:	b2da      	uxtb	r2, r3
 80162fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016300:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016304:	e098      	b.n	8016438 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801630c:	2b00      	cmp	r3, #0
 801630e:	db0f      	blt.n	8016330 <tcp_slowtmr+0x1f0>
 8016310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016312:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016316:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801631a:	4293      	cmp	r3, r2
 801631c:	d008      	beq.n	8016330 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016320:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016324:	b29b      	uxth	r3, r3
 8016326:	3301      	adds	r3, #1
 8016328:	b29b      	uxth	r3, r3
 801632a:	b21a      	sxth	r2, r3
 801632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016332:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016338:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801633c:	429a      	cmp	r2, r3
 801633e:	db7b      	blt.n	8016438 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016342:	f004 fda9 	bl	801ae98 <tcp_rexmit_rto_prepare>
 8016346:	4603      	mov	r3, r0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d007      	beq.n	801635c <tcp_slowtmr+0x21c>
 801634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016350:	2b00      	cmp	r3, #0
 8016352:	d171      	bne.n	8016438 <tcp_slowtmr+0x2f8>
 8016354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016358:	2b00      	cmp	r3, #0
 801635a:	d06d      	beq.n	8016438 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635e:	7d1b      	ldrb	r3, [r3, #20]
 8016360:	2b02      	cmp	r3, #2
 8016362:	d03a      	beq.n	80163da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801636a:	2b0c      	cmp	r3, #12
 801636c:	bf28      	it	cs
 801636e:	230c      	movcs	r3, #12
 8016370:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016374:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016378:	10db      	asrs	r3, r3, #3
 801637a:	b21b      	sxth	r3, r3
 801637c:	461a      	mov	r2, r3
 801637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016380:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016384:	4413      	add	r3, r2
 8016386:	7efa      	ldrb	r2, [r7, #27]
 8016388:	4910      	ldr	r1, [pc, #64]	; (80163cc <tcp_slowtmr+0x28c>)
 801638a:	5c8a      	ldrb	r2, [r1, r2]
 801638c:	4093      	lsls	r3, r2
 801638e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016396:	4293      	cmp	r3, r2
 8016398:	dc1a      	bgt.n	80163d0 <tcp_slowtmr+0x290>
 801639a:	697b      	ldr	r3, [r7, #20]
 801639c:	b21a      	sxth	r2, r3
 801639e:	e019      	b.n	80163d4 <tcp_slowtmr+0x294>
 80163a0:	2001b1a0 	.word	0x2001b1a0
 80163a4:	2001437e 	.word	0x2001437e
 80163a8:	2001b19c 	.word	0x2001b19c
 80163ac:	080274dc 	.word	0x080274dc
 80163b0:	08027820 	.word	0x08027820
 80163b4:	08027520 	.word	0x08027520
 80163b8:	0802784c 	.word	0x0802784c
 80163bc:	08027878 	.word	0x08027878
 80163c0:	080278a8 	.word	0x080278a8
 80163c4:	080278dc 	.word	0x080278dc
 80163c8:	08029aa0 	.word	0x08029aa0
 80163cc:	08029a90 	.word	0x08029a90
 80163d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80163d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80163da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163dc:	2200      	movs	r2, #0
 80163de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80163e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80163e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80163ec:	4293      	cmp	r3, r2
 80163ee:	bf28      	it	cs
 80163f0:	4613      	movcs	r3, r2
 80163f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80163f4:	8a7b      	ldrh	r3, [r7, #18]
 80163f6:	085b      	lsrs	r3, r3, #1
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016402:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	b29b      	uxth	r3, r3
 801640e:	429a      	cmp	r2, r3
 8016410:	d206      	bcs.n	8016420 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016414:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	b29a      	uxth	r2, r3
 801641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016422:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016426:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642c:	2200      	movs	r2, #0
 801642e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016434:	f004 fdaa 	bl	801af8c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643a:	7d1b      	ldrb	r3, [r3, #20]
 801643c:	2b06      	cmp	r3, #6
 801643e:	d111      	bne.n	8016464 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016442:	8b5b      	ldrh	r3, [r3, #26]
 8016444:	f003 0310 	and.w	r3, r3, #16
 8016448:	2b00      	cmp	r3, #0
 801644a:	d00b      	beq.n	8016464 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801644c:	4b9d      	ldr	r3, [pc, #628]	; (80166c4 <tcp_slowtmr+0x584>)
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016452:	6a1b      	ldr	r3, [r3, #32]
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	2b28      	cmp	r3, #40	; 0x28
 8016458:	d904      	bls.n	8016464 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801645a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801645e:	3301      	adds	r3, #1
 8016460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016466:	7a5b      	ldrb	r3, [r3, #9]
 8016468:	f003 0308 	and.w	r3, r3, #8
 801646c:	2b00      	cmp	r3, #0
 801646e:	d04c      	beq.n	801650a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016472:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016474:	2b04      	cmp	r3, #4
 8016476:	d003      	beq.n	8016480 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801647c:	2b07      	cmp	r3, #7
 801647e:	d144      	bne.n	801650a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016480:	4b90      	ldr	r3, [pc, #576]	; (80166c4 <tcp_slowtmr+0x584>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016486:	6a1b      	ldr	r3, [r3, #32]
 8016488:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016490:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8016494:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8016498:	498b      	ldr	r1, [pc, #556]	; (80166c8 <tcp_slowtmr+0x588>)
 801649a:	fba1 1303 	umull	r1, r3, r1, r3
 801649e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d90a      	bls.n	80164ba <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80164a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164a8:	3301      	adds	r3, #1
 80164aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80164ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80164b2:	3301      	adds	r3, #1
 80164b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80164b8:	e027      	b.n	801650a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80164ba:	4b82      	ldr	r3, [pc, #520]	; (80166c4 <tcp_slowtmr+0x584>)
 80164bc:	681a      	ldr	r2, [r3, #0]
 80164be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c0:	6a1b      	ldr	r3, [r3, #32]
 80164c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80164c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80164ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80164d0:	4618      	mov	r0, r3
 80164d2:	4b7e      	ldr	r3, [pc, #504]	; (80166cc <tcp_slowtmr+0x58c>)
 80164d4:	fb03 f300 	mul.w	r3, r3, r0
 80164d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80164da:	497b      	ldr	r1, [pc, #492]	; (80166c8 <tcp_slowtmr+0x588>)
 80164dc:	fba1 1303 	umull	r1, r3, r1, r3
 80164e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d911      	bls.n	801650a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80164e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164e8:	f005 f856 	bl	801b598 <tcp_keepalive>
 80164ec:	4603      	mov	r3, r0
 80164ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80164f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d107      	bne.n	801650a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80164fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016500:	3301      	adds	r3, #1
 8016502:	b2da      	uxtb	r2, r3
 8016504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016506:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801650c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801650e:	2b00      	cmp	r3, #0
 8016510:	d011      	beq.n	8016536 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016512:	4b6c      	ldr	r3, [pc, #432]	; (80166c4 <tcp_slowtmr+0x584>)
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016518:	6a1b      	ldr	r3, [r3, #32]
 801651a:	1ad2      	subs	r2, r2, r3
 801651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016522:	4619      	mov	r1, r3
 8016524:	460b      	mov	r3, r1
 8016526:	005b      	lsls	r3, r3, #1
 8016528:	440b      	add	r3, r1
 801652a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801652c:	429a      	cmp	r2, r3
 801652e:	d302      	bcc.n	8016536 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016532:	f000 fea9 	bl	8017288 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016538:	7d1b      	ldrb	r3, [r3, #20]
 801653a:	2b03      	cmp	r3, #3
 801653c:	d10b      	bne.n	8016556 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801653e:	4b61      	ldr	r3, [pc, #388]	; (80166c4 <tcp_slowtmr+0x584>)
 8016540:	681a      	ldr	r2, [r3, #0]
 8016542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016544:	6a1b      	ldr	r3, [r3, #32]
 8016546:	1ad3      	subs	r3, r2, r3
 8016548:	2b28      	cmp	r3, #40	; 0x28
 801654a:	d904      	bls.n	8016556 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801654c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016550:	3301      	adds	r3, #1
 8016552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016558:	7d1b      	ldrb	r3, [r3, #20]
 801655a:	2b09      	cmp	r3, #9
 801655c:	d10b      	bne.n	8016576 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801655e:	4b59      	ldr	r3, [pc, #356]	; (80166c4 <tcp_slowtmr+0x584>)
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016564:	6a1b      	ldr	r3, [r3, #32]
 8016566:	1ad3      	subs	r3, r2, r3
 8016568:	2bf0      	cmp	r3, #240	; 0xf0
 801656a:	d904      	bls.n	8016576 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801656c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016570:	3301      	adds	r3, #1
 8016572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801657a:	2b00      	cmp	r3, #0
 801657c:	d060      	beq.n	8016640 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016584:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016588:	f000 fcca 	bl	8016f20 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658e:	2b00      	cmp	r3, #0
 8016590:	d010      	beq.n	80165b4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016592:	4b4f      	ldr	r3, [pc, #316]	; (80166d0 <tcp_slowtmr+0x590>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016598:	429a      	cmp	r2, r3
 801659a:	d106      	bne.n	80165aa <tcp_slowtmr+0x46a>
 801659c:	4b4d      	ldr	r3, [pc, #308]	; (80166d4 <tcp_slowtmr+0x594>)
 801659e:	f240 526d 	movw	r2, #1389	; 0x56d
 80165a2:	494d      	ldr	r1, [pc, #308]	; (80166d8 <tcp_slowtmr+0x598>)
 80165a4:	484d      	ldr	r0, [pc, #308]	; (80166dc <tcp_slowtmr+0x59c>)
 80165a6:	f00b fb81 	bl	8021cac <iprintf>
        prev->next = pcb->next;
 80165aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ac:	68da      	ldr	r2, [r3, #12]
 80165ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b0:	60da      	str	r2, [r3, #12]
 80165b2:	e00f      	b.n	80165d4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80165b4:	4b46      	ldr	r3, [pc, #280]	; (80166d0 <tcp_slowtmr+0x590>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d006      	beq.n	80165cc <tcp_slowtmr+0x48c>
 80165be:	4b45      	ldr	r3, [pc, #276]	; (80166d4 <tcp_slowtmr+0x594>)
 80165c0:	f240 5271 	movw	r2, #1393	; 0x571
 80165c4:	4946      	ldr	r1, [pc, #280]	; (80166e0 <tcp_slowtmr+0x5a0>)
 80165c6:	4845      	ldr	r0, [pc, #276]	; (80166dc <tcp_slowtmr+0x59c>)
 80165c8:	f00b fb70 	bl	8021cac <iprintf>
        tcp_active_pcbs = pcb->next;
 80165cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	4a3f      	ldr	r2, [pc, #252]	; (80166d0 <tcp_slowtmr+0x590>)
 80165d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80165d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d013      	beq.n	8016604 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80165dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80165e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80165e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80165e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e8:	3304      	adds	r3, #4
 80165ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165ec:	8ad2      	ldrh	r2, [r2, #22]
 80165ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80165f0:	8b09      	ldrh	r1, [r1, #24]
 80165f2:	9102      	str	r1, [sp, #8]
 80165f4:	9201      	str	r2, [sp, #4]
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	462b      	mov	r3, r5
 80165fa:	4622      	mov	r2, r4
 80165fc:	4601      	mov	r1, r0
 80165fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016600:	f004 ff16 	bl	801b430 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016606:	691b      	ldr	r3, [r3, #16]
 8016608:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660c:	7d1b      	ldrb	r3, [r3, #20]
 801660e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016612:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801661a:	6838      	ldr	r0, [r7, #0]
 801661c:	f7fe fed6 	bl	80153cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016620:	4b30      	ldr	r3, [pc, #192]	; (80166e4 <tcp_slowtmr+0x5a4>)
 8016622:	2200      	movs	r2, #0
 8016624:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d004      	beq.n	8016636 <tcp_slowtmr+0x4f6>
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	f06f 010c 	mvn.w	r1, #12
 8016632:	68b8      	ldr	r0, [r7, #8]
 8016634:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016636:	4b2b      	ldr	r3, [pc, #172]	; (80166e4 <tcp_slowtmr+0x5a4>)
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d037      	beq.n	80166ae <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801663e:	e590      	b.n	8016162 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016642:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016646:	68db      	ldr	r3, [r3, #12]
 8016648:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801664c:	7f1b      	ldrb	r3, [r3, #28]
 801664e:	3301      	adds	r3, #1
 8016650:	b2da      	uxtb	r2, r3
 8016652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016654:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016658:	7f1a      	ldrb	r2, [r3, #28]
 801665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665c:	7f5b      	ldrb	r3, [r3, #29]
 801665e:	429a      	cmp	r2, r3
 8016660:	d325      	bcc.n	80166ae <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016664:	2200      	movs	r2, #0
 8016666:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016668:	4b1e      	ldr	r3, [pc, #120]	; (80166e4 <tcp_slowtmr+0x5a4>)
 801666a:	2200      	movs	r2, #0
 801666c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016674:	2b00      	cmp	r3, #0
 8016676:	d00b      	beq.n	8016690 <tcp_slowtmr+0x550>
 8016678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801667e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016680:	6912      	ldr	r2, [r2, #16]
 8016682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016684:	4610      	mov	r0, r2
 8016686:	4798      	blx	r3
 8016688:	4603      	mov	r3, r0
 801668a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801668e:	e002      	b.n	8016696 <tcp_slowtmr+0x556>
 8016690:	2300      	movs	r3, #0
 8016692:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016696:	4b13      	ldr	r3, [pc, #76]	; (80166e4 <tcp_slowtmr+0x5a4>)
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d000      	beq.n	80166a0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801669e:	e560      	b.n	8016162 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80166a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d102      	bne.n	80166ae <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80166a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166aa:	f004 f901 	bl	801a8b0 <tcp_output>
  while (pcb != NULL) {
 80166ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	f47f ad5c 	bne.w	801616e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80166b6:	2300      	movs	r3, #0
 80166b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80166ba:	4b0b      	ldr	r3, [pc, #44]	; (80166e8 <tcp_slowtmr+0x5a8>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80166c0:	e067      	b.n	8016792 <tcp_slowtmr+0x652>
 80166c2:	bf00      	nop
 80166c4:	2001b1a0 	.word	0x2001b1a0
 80166c8:	10624dd3 	.word	0x10624dd3
 80166cc:	000124f8 	.word	0x000124f8
 80166d0:	2001b19c 	.word	0x2001b19c
 80166d4:	080274dc 	.word	0x080274dc
 80166d8:	08027914 	.word	0x08027914
 80166dc:	08027520 	.word	0x08027520
 80166e0:	08027940 	.word	0x08027940
 80166e4:	2001b198 	.word	0x2001b198
 80166e8:	2001b1ac 	.word	0x2001b1ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80166ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ee:	7d1b      	ldrb	r3, [r3, #20]
 80166f0:	2b0a      	cmp	r3, #10
 80166f2:	d006      	beq.n	8016702 <tcp_slowtmr+0x5c2>
 80166f4:	4b2b      	ldr	r3, [pc, #172]	; (80167a4 <tcp_slowtmr+0x664>)
 80166f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80166fa:	492b      	ldr	r1, [pc, #172]	; (80167a8 <tcp_slowtmr+0x668>)
 80166fc:	482b      	ldr	r0, [pc, #172]	; (80167ac <tcp_slowtmr+0x66c>)
 80166fe:	f00b fad5 	bl	8021cac <iprintf>
    pcb_remove = 0;
 8016702:	2300      	movs	r3, #0
 8016704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016708:	4b29      	ldr	r3, [pc, #164]	; (80167b0 <tcp_slowtmr+0x670>)
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801670e:	6a1b      	ldr	r3, [r3, #32]
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	2bf0      	cmp	r3, #240	; 0xf0
 8016714:	d904      	bls.n	8016720 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8016716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801671a:	3301      	adds	r3, #1
 801671c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016724:	2b00      	cmp	r3, #0
 8016726:	d02f      	beq.n	8016788 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801672a:	f000 fbf9 	bl	8016f20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016730:	2b00      	cmp	r3, #0
 8016732:	d010      	beq.n	8016756 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016734:	4b1f      	ldr	r3, [pc, #124]	; (80167b4 <tcp_slowtmr+0x674>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801673a:	429a      	cmp	r2, r3
 801673c:	d106      	bne.n	801674c <tcp_slowtmr+0x60c>
 801673e:	4b19      	ldr	r3, [pc, #100]	; (80167a4 <tcp_slowtmr+0x664>)
 8016740:	f240 52af 	movw	r2, #1455	; 0x5af
 8016744:	491c      	ldr	r1, [pc, #112]	; (80167b8 <tcp_slowtmr+0x678>)
 8016746:	4819      	ldr	r0, [pc, #100]	; (80167ac <tcp_slowtmr+0x66c>)
 8016748:	f00b fab0 	bl	8021cac <iprintf>
        prev->next = pcb->next;
 801674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674e:	68da      	ldr	r2, [r3, #12]
 8016750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016752:	60da      	str	r2, [r3, #12]
 8016754:	e00f      	b.n	8016776 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016756:	4b17      	ldr	r3, [pc, #92]	; (80167b4 <tcp_slowtmr+0x674>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801675c:	429a      	cmp	r2, r3
 801675e:	d006      	beq.n	801676e <tcp_slowtmr+0x62e>
 8016760:	4b10      	ldr	r3, [pc, #64]	; (80167a4 <tcp_slowtmr+0x664>)
 8016762:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016766:	4915      	ldr	r1, [pc, #84]	; (80167bc <tcp_slowtmr+0x67c>)
 8016768:	4810      	ldr	r0, [pc, #64]	; (80167ac <tcp_slowtmr+0x66c>)
 801676a:	f00b fa9f 	bl	8021cac <iprintf>
        tcp_tw_pcbs = pcb->next;
 801676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016770:	68db      	ldr	r3, [r3, #12]
 8016772:	4a10      	ldr	r2, [pc, #64]	; (80167b4 <tcp_slowtmr+0x674>)
 8016774:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016778:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677c:	68db      	ldr	r3, [r3, #12]
 801677e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016780:	69f8      	ldr	r0, [r7, #28]
 8016782:	f7fe fe23 	bl	80153cc <tcp_free>
 8016786:	e004      	b.n	8016792 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678e:	68db      	ldr	r3, [r3, #12]
 8016790:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016794:	2b00      	cmp	r3, #0
 8016796:	d1a9      	bne.n	80166ec <tcp_slowtmr+0x5ac>
    }
  }
}
 8016798:	bf00      	nop
 801679a:	bf00      	nop
 801679c:	3730      	adds	r7, #48	; 0x30
 801679e:	46bd      	mov	sp, r7
 80167a0:	bdb0      	pop	{r4, r5, r7, pc}
 80167a2:	bf00      	nop
 80167a4:	080274dc 	.word	0x080274dc
 80167a8:	0802796c 	.word	0x0802796c
 80167ac:	08027520 	.word	0x08027520
 80167b0:	2001b1a0 	.word	0x2001b1a0
 80167b4:	2001b1ac 	.word	0x2001b1ac
 80167b8:	0802799c 	.word	0x0802799c
 80167bc:	080279c4 	.word	0x080279c4

080167c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80167c6:	4b2d      	ldr	r3, [pc, #180]	; (801687c <tcp_fasttmr+0xbc>)
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	3301      	adds	r3, #1
 80167cc:	b2da      	uxtb	r2, r3
 80167ce:	4b2b      	ldr	r3, [pc, #172]	; (801687c <tcp_fasttmr+0xbc>)
 80167d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80167d2:	4b2b      	ldr	r3, [pc, #172]	; (8016880 <tcp_fasttmr+0xc0>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80167d8:	e048      	b.n	801686c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	7f9a      	ldrb	r2, [r3, #30]
 80167de:	4b27      	ldr	r3, [pc, #156]	; (801687c <tcp_fasttmr+0xbc>)
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d03f      	beq.n	8016866 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80167e6:	4b25      	ldr	r3, [pc, #148]	; (801687c <tcp_fasttmr+0xbc>)
 80167e8:	781a      	ldrb	r2, [r3, #0]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	8b5b      	ldrh	r3, [r3, #26]
 80167f2:	f003 0301 	and.w	r3, r3, #1
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d010      	beq.n	801681c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	8b5b      	ldrh	r3, [r3, #26]
 80167fe:	f043 0302 	orr.w	r3, r3, #2
 8016802:	b29a      	uxth	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016808:	6878      	ldr	r0, [r7, #4]
 801680a:	f004 f851 	bl	801a8b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	8b5b      	ldrh	r3, [r3, #26]
 8016812:	f023 0303 	bic.w	r3, r3, #3
 8016816:	b29a      	uxth	r2, r3
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	8b5b      	ldrh	r3, [r3, #26]
 8016820:	f003 0308 	and.w	r3, r3, #8
 8016824:	2b00      	cmp	r3, #0
 8016826:	d009      	beq.n	801683c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	8b5b      	ldrh	r3, [r3, #26]
 801682c:	f023 0308 	bic.w	r3, r3, #8
 8016830:	b29a      	uxth	r2, r3
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f7fe ff5c 	bl	80156f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	68db      	ldr	r3, [r3, #12]
 8016840:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016846:	2b00      	cmp	r3, #0
 8016848:	d00a      	beq.n	8016860 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801684a:	4b0e      	ldr	r3, [pc, #56]	; (8016884 <tcp_fasttmr+0xc4>)
 801684c:	2200      	movs	r2, #0
 801684e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f000 f819 	bl	8016888 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016856:	4b0b      	ldr	r3, [pc, #44]	; (8016884 <tcp_fasttmr+0xc4>)
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d000      	beq.n	8016860 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801685e:	e7b8      	b.n	80167d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	607b      	str	r3, [r7, #4]
 8016864:	e002      	b.n	801686c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	68db      	ldr	r3, [r3, #12]
 801686a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d1b3      	bne.n	80167da <tcp_fasttmr+0x1a>
    }
  }
}
 8016872:	bf00      	nop
 8016874:	bf00      	nop
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}
 801687c:	2001437e 	.word	0x2001437e
 8016880:	2001b19c 	.word	0x2001b19c
 8016884:	2001b198 	.word	0x2001b198

08016888 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016888:	b590      	push	{r4, r7, lr}
 801688a:	b085      	sub	sp, #20
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d109      	bne.n	80168aa <tcp_process_refused_data+0x22>
 8016896:	4b37      	ldr	r3, [pc, #220]	; (8016974 <tcp_process_refused_data+0xec>)
 8016898:	f240 6209 	movw	r2, #1545	; 0x609
 801689c:	4936      	ldr	r1, [pc, #216]	; (8016978 <tcp_process_refused_data+0xf0>)
 801689e:	4837      	ldr	r0, [pc, #220]	; (801697c <tcp_process_refused_data+0xf4>)
 80168a0:	f00b fa04 	bl	8021cac <iprintf>
 80168a4:	f06f 030f 	mvn.w	r3, #15
 80168a8:	e060      	b.n	801696c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80168ae:	7b5b      	ldrb	r3, [r3, #13]
 80168b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80168b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2200      	movs	r2, #0
 80168bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d00b      	beq.n	80168e0 <tcp_process_refused_data+0x58>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6918      	ldr	r0, [r3, #16]
 80168d2:	2300      	movs	r3, #0
 80168d4:	68ba      	ldr	r2, [r7, #8]
 80168d6:	6879      	ldr	r1, [r7, #4]
 80168d8:	47a0      	blx	r4
 80168da:	4603      	mov	r3, r0
 80168dc:	73fb      	strb	r3, [r7, #15]
 80168de:	e007      	b.n	80168f0 <tcp_process_refused_data+0x68>
 80168e0:	2300      	movs	r3, #0
 80168e2:	68ba      	ldr	r2, [r7, #8]
 80168e4:	6879      	ldr	r1, [r7, #4]
 80168e6:	2000      	movs	r0, #0
 80168e8:	f000 f8a4 	bl	8016a34 <tcp_recv_null>
 80168ec:	4603      	mov	r3, r0
 80168ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80168f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d12a      	bne.n	801694e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80168f8:	7bbb      	ldrb	r3, [r7, #14]
 80168fa:	f003 0320 	and.w	r3, r3, #32
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d033      	beq.n	801696a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016906:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801690a:	d005      	beq.n	8016918 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016910:	3301      	adds	r3, #1
 8016912:	b29a      	uxth	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801691e:	2b00      	cmp	r3, #0
 8016920:	d00b      	beq.n	801693a <tcp_process_refused_data+0xb2>
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6918      	ldr	r0, [r3, #16]
 801692c:	2300      	movs	r3, #0
 801692e:	2200      	movs	r2, #0
 8016930:	6879      	ldr	r1, [r7, #4]
 8016932:	47a0      	blx	r4
 8016934:	4603      	mov	r3, r0
 8016936:	73fb      	strb	r3, [r7, #15]
 8016938:	e001      	b.n	801693e <tcp_process_refused_data+0xb6>
 801693a:	2300      	movs	r3, #0
 801693c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801693e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016942:	f113 0f0d 	cmn.w	r3, #13
 8016946:	d110      	bne.n	801696a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016948:	f06f 030c 	mvn.w	r3, #12
 801694c:	e00e      	b.n	801696c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801694e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016952:	f113 0f0d 	cmn.w	r3, #13
 8016956:	d102      	bne.n	801695e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016958:	f06f 030c 	mvn.w	r3, #12
 801695c:	e006      	b.n	801696c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	68ba      	ldr	r2, [r7, #8]
 8016962:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016964:	f06f 0304 	mvn.w	r3, #4
 8016968:	e000      	b.n	801696c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801696a:	2300      	movs	r3, #0
}
 801696c:	4618      	mov	r0, r3
 801696e:	3714      	adds	r7, #20
 8016970:	46bd      	mov	sp, r7
 8016972:	bd90      	pop	{r4, r7, pc}
 8016974:	080274dc 	.word	0x080274dc
 8016978:	080279ec 	.word	0x080279ec
 801697c:	08027520 	.word	0x08027520

08016980 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b084      	sub	sp, #16
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016988:	e007      	b.n	801699a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f000 f80a 	bl	80169aa <tcp_seg_free>
    seg = next;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d1f4      	bne.n	801698a <tcp_segs_free+0xa>
  }
}
 80169a0:	bf00      	nop
 80169a2:	bf00      	nop
 80169a4:	3710      	adds	r7, #16
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}

080169aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b082      	sub	sp, #8
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d00c      	beq.n	80169d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d004      	beq.n	80169ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	685b      	ldr	r3, [r3, #4]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7fe f8c9 	bl	8014b5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80169ca:	6879      	ldr	r1, [r7, #4]
 80169cc:	2003      	movs	r0, #3
 80169ce:	f7fd f9e3 	bl	8013d98 <memp_free>
  }
}
 80169d2:	bf00      	nop
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
	...

080169dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d106      	bne.n	80169f8 <tcp_seg_copy+0x1c>
 80169ea:	4b0f      	ldr	r3, [pc, #60]	; (8016a28 <tcp_seg_copy+0x4c>)
 80169ec:	f240 6282 	movw	r2, #1666	; 0x682
 80169f0:	490e      	ldr	r1, [pc, #56]	; (8016a2c <tcp_seg_copy+0x50>)
 80169f2:	480f      	ldr	r0, [pc, #60]	; (8016a30 <tcp_seg_copy+0x54>)
 80169f4:	f00b f95a 	bl	8021cac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80169f8:	2003      	movs	r0, #3
 80169fa:	f7fd f97b 	bl	8013cf4 <memp_malloc>
 80169fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d101      	bne.n	8016a0a <tcp_seg_copy+0x2e>
    return NULL;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e00a      	b.n	8016a20 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016a0a:	2214      	movs	r2, #20
 8016a0c:	6879      	ldr	r1, [r7, #4]
 8016a0e:	68f8      	ldr	r0, [r7, #12]
 8016a10:	f00a fc08 	bl	8021224 <memcpy>
  pbuf_ref(cseg->p);
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	685b      	ldr	r3, [r3, #4]
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7fe f945 	bl	8014ca8 <pbuf_ref>
  return cseg;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3710      	adds	r7, #16
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	080274dc 	.word	0x080274dc
 8016a2c:	08027a30 	.word	0x08027a30
 8016a30:	08027520 	.word	0x08027520

08016a34 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b084      	sub	sp, #16
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	60b9      	str	r1, [r7, #8]
 8016a3e:	607a      	str	r2, [r7, #4]
 8016a40:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d109      	bne.n	8016a5c <tcp_recv_null+0x28>
 8016a48:	4b12      	ldr	r3, [pc, #72]	; (8016a94 <tcp_recv_null+0x60>)
 8016a4a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016a4e:	4912      	ldr	r1, [pc, #72]	; (8016a98 <tcp_recv_null+0x64>)
 8016a50:	4812      	ldr	r0, [pc, #72]	; (8016a9c <tcp_recv_null+0x68>)
 8016a52:	f00b f92b 	bl	8021cac <iprintf>
 8016a56:	f06f 030f 	mvn.w	r3, #15
 8016a5a:	e016      	b.n	8016a8a <tcp_recv_null+0x56>

  if (p != NULL) {
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d009      	beq.n	8016a76 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	891b      	ldrh	r3, [r3, #8]
 8016a66:	4619      	mov	r1, r3
 8016a68:	68b8      	ldr	r0, [r7, #8]
 8016a6a:	f7ff f9bb 	bl	8015de4 <tcp_recved>
    pbuf_free(p);
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f7fe f874 	bl	8014b5c <pbuf_free>
 8016a74:	e008      	b.n	8016a88 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d104      	bne.n	8016a88 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016a7e:	68b8      	ldr	r0, [r7, #8]
 8016a80:	f7fe fea2 	bl	80157c8 <tcp_close>
 8016a84:	4603      	mov	r3, r0
 8016a86:	e000      	b.n	8016a8a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016a88:	2300      	movs	r3, #0
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3710      	adds	r7, #16
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	080274dc 	.word	0x080274dc
 8016a98:	08027a4c 	.word	0x08027a4c
 8016a9c:	08027520 	.word	0x08027520

08016aa0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b086      	sub	sp, #24
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	db01      	blt.n	8016ab6 <tcp_kill_prio+0x16>
 8016ab2:	79fb      	ldrb	r3, [r7, #7]
 8016ab4:	e000      	b.n	8016ab8 <tcp_kill_prio+0x18>
 8016ab6:	237f      	movs	r3, #127	; 0x7f
 8016ab8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016aba:	7afb      	ldrb	r3, [r7, #11]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d034      	beq.n	8016b2a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016ac0:	7afb      	ldrb	r3, [r7, #11]
 8016ac2:	3b01      	subs	r3, #1
 8016ac4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016aca:	2300      	movs	r3, #0
 8016acc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ace:	4b19      	ldr	r3, [pc, #100]	; (8016b34 <tcp_kill_prio+0x94>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	617b      	str	r3, [r7, #20]
 8016ad4:	e01f      	b.n	8016b16 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	7d5b      	ldrb	r3, [r3, #21]
 8016ada:	7afa      	ldrb	r2, [r7, #11]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d80c      	bhi.n	8016afa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016ae4:	7afa      	ldrb	r2, [r7, #11]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d112      	bne.n	8016b10 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016aea:	4b13      	ldr	r3, [pc, #76]	; (8016b38 <tcp_kill_prio+0x98>)
 8016aec:	681a      	ldr	r2, [r3, #0]
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	6a1b      	ldr	r3, [r3, #32]
 8016af2:	1ad3      	subs	r3, r2, r3
 8016af4:	68fa      	ldr	r2, [r7, #12]
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d80a      	bhi.n	8016b10 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016afa:	4b0f      	ldr	r3, [pc, #60]	; (8016b38 <tcp_kill_prio+0x98>)
 8016afc:	681a      	ldr	r2, [r3, #0]
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	6a1b      	ldr	r3, [r3, #32]
 8016b02:	1ad3      	subs	r3, r2, r3
 8016b04:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016b0a:	697b      	ldr	r3, [r7, #20]
 8016b0c:	7d5b      	ldrb	r3, [r3, #21]
 8016b0e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	68db      	ldr	r3, [r3, #12]
 8016b14:	617b      	str	r3, [r7, #20]
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d1dc      	bne.n	8016ad6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d004      	beq.n	8016b2c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016b22:	6938      	ldr	r0, [r7, #16]
 8016b24:	f7fe ff96 	bl	8015a54 <tcp_abort>
 8016b28:	e000      	b.n	8016b2c <tcp_kill_prio+0x8c>
    return;
 8016b2a:	bf00      	nop
  }
}
 8016b2c:	3718      	adds	r7, #24
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
 8016b32:	bf00      	nop
 8016b34:	2001b19c 	.word	0x2001b19c
 8016b38:	2001b1a0 	.word	0x2001b1a0

08016b3c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b086      	sub	sp, #24
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	4603      	mov	r3, r0
 8016b44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016b46:	79fb      	ldrb	r3, [r7, #7]
 8016b48:	2b08      	cmp	r3, #8
 8016b4a:	d009      	beq.n	8016b60 <tcp_kill_state+0x24>
 8016b4c:	79fb      	ldrb	r3, [r7, #7]
 8016b4e:	2b09      	cmp	r3, #9
 8016b50:	d006      	beq.n	8016b60 <tcp_kill_state+0x24>
 8016b52:	4b1a      	ldr	r3, [pc, #104]	; (8016bbc <tcp_kill_state+0x80>)
 8016b54:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016b58:	4919      	ldr	r1, [pc, #100]	; (8016bc0 <tcp_kill_state+0x84>)
 8016b5a:	481a      	ldr	r0, [pc, #104]	; (8016bc4 <tcp_kill_state+0x88>)
 8016b5c:	f00b f8a6 	bl	8021cac <iprintf>

  inactivity = 0;
 8016b60:	2300      	movs	r3, #0
 8016b62:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016b64:	2300      	movs	r3, #0
 8016b66:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b68:	4b17      	ldr	r3, [pc, #92]	; (8016bc8 <tcp_kill_state+0x8c>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	617b      	str	r3, [r7, #20]
 8016b6e:	e017      	b.n	8016ba0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	7d1b      	ldrb	r3, [r3, #20]
 8016b74:	79fa      	ldrb	r2, [r7, #7]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d10f      	bne.n	8016b9a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016b7a:	4b14      	ldr	r3, [pc, #80]	; (8016bcc <tcp_kill_state+0x90>)
 8016b7c:	681a      	ldr	r2, [r3, #0]
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	6a1b      	ldr	r3, [r3, #32]
 8016b82:	1ad3      	subs	r3, r2, r3
 8016b84:	68fa      	ldr	r2, [r7, #12]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d807      	bhi.n	8016b9a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016b8a:	4b10      	ldr	r3, [pc, #64]	; (8016bcc <tcp_kill_state+0x90>)
 8016b8c:	681a      	ldr	r2, [r3, #0]
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	6a1b      	ldr	r3, [r3, #32]
 8016b92:	1ad3      	subs	r3, r2, r3
 8016b94:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b9a:	697b      	ldr	r3, [r7, #20]
 8016b9c:	68db      	ldr	r3, [r3, #12]
 8016b9e:	617b      	str	r3, [r7, #20]
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1e4      	bne.n	8016b70 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016ba6:	693b      	ldr	r3, [r7, #16]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d003      	beq.n	8016bb4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016bac:	2100      	movs	r1, #0
 8016bae:	6938      	ldr	r0, [r7, #16]
 8016bb0:	f7fe fe92 	bl	80158d8 <tcp_abandon>
  }
}
 8016bb4:	bf00      	nop
 8016bb6:	3718      	adds	r7, #24
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}
 8016bbc:	080274dc 	.word	0x080274dc
 8016bc0:	08027a68 	.word	0x08027a68
 8016bc4:	08027520 	.word	0x08027520
 8016bc8:	2001b19c 	.word	0x2001b19c
 8016bcc:	2001b1a0 	.word	0x2001b1a0

08016bd0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b084      	sub	sp, #16
 8016bd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016bde:	4b12      	ldr	r3, [pc, #72]	; (8016c28 <tcp_kill_timewait+0x58>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	60fb      	str	r3, [r7, #12]
 8016be4:	e012      	b.n	8016c0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016be6:	4b11      	ldr	r3, [pc, #68]	; (8016c2c <tcp_kill_timewait+0x5c>)
 8016be8:	681a      	ldr	r2, [r3, #0]
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	6a1b      	ldr	r3, [r3, #32]
 8016bee:	1ad3      	subs	r3, r2, r3
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d807      	bhi.n	8016c06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016bf6:	4b0d      	ldr	r3, [pc, #52]	; (8016c2c <tcp_kill_timewait+0x5c>)
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	6a1b      	ldr	r3, [r3, #32]
 8016bfe:	1ad3      	subs	r3, r2, r3
 8016c00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	68db      	ldr	r3, [r3, #12]
 8016c0a:	60fb      	str	r3, [r7, #12]
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d1e9      	bne.n	8016be6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d002      	beq.n	8016c1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016c18:	68b8      	ldr	r0, [r7, #8]
 8016c1a:	f7fe ff1b 	bl	8015a54 <tcp_abort>
  }
}
 8016c1e:	bf00      	nop
 8016c20:	3710      	adds	r7, #16
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}
 8016c26:	bf00      	nop
 8016c28:	2001b1ac 	.word	0x2001b1ac
 8016c2c:	2001b1a0 	.word	0x2001b1a0

08016c30 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016c36:	4b10      	ldr	r3, [pc, #64]	; (8016c78 <tcp_handle_closepend+0x48>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016c3c:	e014      	b.n	8016c68 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	8b5b      	ldrh	r3, [r3, #26]
 8016c48:	f003 0308 	and.w	r3, r3, #8
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d009      	beq.n	8016c64 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	8b5b      	ldrh	r3, [r3, #26]
 8016c54:	f023 0308 	bic.w	r3, r3, #8
 8016c58:	b29a      	uxth	r2, r3
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f7fe fd48 	bl	80156f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1e7      	bne.n	8016c3e <tcp_handle_closepend+0xe>
  }
}
 8016c6e:	bf00      	nop
 8016c70:	bf00      	nop
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}
 8016c78:	2001b19c 	.word	0x2001b19c

08016c7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b084      	sub	sp, #16
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	4603      	mov	r3, r0
 8016c84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016c86:	2001      	movs	r0, #1
 8016c88:	f7fd f834 	bl	8013cf4 <memp_malloc>
 8016c8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d126      	bne.n	8016ce2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016c94:	f7ff ffcc 	bl	8016c30 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016c98:	f7ff ff9a 	bl	8016bd0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016c9c:	2001      	movs	r0, #1
 8016c9e:	f7fd f829 	bl	8013cf4 <memp_malloc>
 8016ca2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d11b      	bne.n	8016ce2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016caa:	2009      	movs	r0, #9
 8016cac:	f7ff ff46 	bl	8016b3c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	f7fd f81f 	bl	8013cf4 <memp_malloc>
 8016cb6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d111      	bne.n	8016ce2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016cbe:	2008      	movs	r0, #8
 8016cc0:	f7ff ff3c 	bl	8016b3c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016cc4:	2001      	movs	r0, #1
 8016cc6:	f7fd f815 	bl	8013cf4 <memp_malloc>
 8016cca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d107      	bne.n	8016ce2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016cd2:	79fb      	ldrb	r3, [r7, #7]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7ff fee3 	bl	8016aa0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016cda:	2001      	movs	r0, #1
 8016cdc:	f7fd f80a 	bl	8013cf4 <memp_malloc>
 8016ce0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d03f      	beq.n	8016d68 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016ce8:	229c      	movs	r2, #156	; 0x9c
 8016cea:	2100      	movs	r1, #0
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	f00a fac1 	bl	8021274 <memset>
    pcb->prio = prio;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	79fa      	ldrb	r2, [r7, #7]
 8016cf6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016cfe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016d08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	22ff      	movs	r2, #255	; 0xff
 8016d16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016d1e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2206      	movs	r2, #6
 8016d24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	2206      	movs	r2, #6
 8016d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d34:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	2201      	movs	r2, #1
 8016d3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016d3e:	4b0d      	ldr	r3, [pc, #52]	; (8016d74 <tcp_alloc+0xf8>)
 8016d40:	681a      	ldr	r2, [r3, #0]
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016d46:	4b0c      	ldr	r3, [pc, #48]	; (8016d78 <tcp_alloc+0xfc>)
 8016d48:	781a      	ldrb	r2, [r3, #0]
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016d54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	4a08      	ldr	r2, [pc, #32]	; (8016d7c <tcp_alloc+0x100>)
 8016d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	4a07      	ldr	r2, [pc, #28]	; (8016d80 <tcp_alloc+0x104>)
 8016d64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016d68:	68fb      	ldr	r3, [r7, #12]
}
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	3710      	adds	r7, #16
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}
 8016d72:	bf00      	nop
 8016d74:	2001b1a0 	.word	0x2001b1a0
 8016d78:	2001437e 	.word	0x2001437e
 8016d7c:	08016a35 	.word	0x08016a35
 8016d80:	006ddd00 	.word	0x006ddd00

08016d84 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b084      	sub	sp, #16
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016d8e:	2040      	movs	r0, #64	; 0x40
 8016d90:	f7ff ff74 	bl	8016c7c <tcp_alloc>
 8016d94:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016d96:	68fb      	ldr	r3, [r7, #12]
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	3710      	adds	r7, #16
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	bd80      	pop	{r7, pc}

08016da0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d002      	beq.n	8016db6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	683a      	ldr	r2, [r7, #0]
 8016db4:	611a      	str	r2, [r3, #16]
  }
}
 8016db6:	bf00      	nop
 8016db8:	370c      	adds	r7, #12
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc0:	4770      	bx	lr
	...

08016dc4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
 8016dcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d00e      	beq.n	8016df2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	7d1b      	ldrb	r3, [r3, #20]
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d106      	bne.n	8016dea <tcp_recv+0x26>
 8016ddc:	4b07      	ldr	r3, [pc, #28]	; (8016dfc <tcp_recv+0x38>)
 8016dde:	f240 72df 	movw	r2, #2015	; 0x7df
 8016de2:	4907      	ldr	r1, [pc, #28]	; (8016e00 <tcp_recv+0x3c>)
 8016de4:	4807      	ldr	r0, [pc, #28]	; (8016e04 <tcp_recv+0x40>)
 8016de6:	f00a ff61 	bl	8021cac <iprintf>
    pcb->recv = recv;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	683a      	ldr	r2, [r7, #0]
 8016dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8016df2:	bf00      	nop
 8016df4:	3708      	adds	r7, #8
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	080274dc 	.word	0x080274dc
 8016e00:	08027a78 	.word	0x08027a78
 8016e04:	08027520 	.word	0x08027520

08016e08 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b082      	sub	sp, #8
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
 8016e10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d00e      	beq.n	8016e36 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	7d1b      	ldrb	r3, [r3, #20]
 8016e1c:	2b01      	cmp	r3, #1
 8016e1e:	d106      	bne.n	8016e2e <tcp_sent+0x26>
 8016e20:	4b07      	ldr	r3, [pc, #28]	; (8016e40 <tcp_sent+0x38>)
 8016e22:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8016e26:	4907      	ldr	r1, [pc, #28]	; (8016e44 <tcp_sent+0x3c>)
 8016e28:	4807      	ldr	r0, [pc, #28]	; (8016e48 <tcp_sent+0x40>)
 8016e2a:	f00a ff3f 	bl	8021cac <iprintf>
    pcb->sent = sent;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	683a      	ldr	r2, [r7, #0]
 8016e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8016e36:	bf00      	nop
 8016e38:	3708      	adds	r7, #8
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	080274dc 	.word	0x080274dc
 8016e44:	08027aa0 	.word	0x08027aa0
 8016e48:	08027520 	.word	0x08027520

08016e4c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d00e      	beq.n	8016e7a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	7d1b      	ldrb	r3, [r3, #20]
 8016e60:	2b01      	cmp	r3, #1
 8016e62:	d106      	bne.n	8016e72 <tcp_err+0x26>
 8016e64:	4b07      	ldr	r3, [pc, #28]	; (8016e84 <tcp_err+0x38>)
 8016e66:	f640 020d 	movw	r2, #2061	; 0x80d
 8016e6a:	4907      	ldr	r1, [pc, #28]	; (8016e88 <tcp_err+0x3c>)
 8016e6c:	4807      	ldr	r0, [pc, #28]	; (8016e8c <tcp_err+0x40>)
 8016e6e:	f00a ff1d 	bl	8021cac <iprintf>
    pcb->errf = err;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	683a      	ldr	r2, [r7, #0]
 8016e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016e7a:	bf00      	nop
 8016e7c:	3708      	adds	r7, #8
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}
 8016e82:	bf00      	nop
 8016e84:	080274dc 	.word	0x080274dc
 8016e88:	08027ac8 	.word	0x08027ac8
 8016e8c:	08027520 	.word	0x08027520

08016e90 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016e90:	b480      	push	{r7}
 8016e92:	b085      	sub	sp, #20
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d008      	beq.n	8016eb2 <tcp_accept+0x22>
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	7d1b      	ldrb	r3, [r3, #20]
 8016ea4:	2b01      	cmp	r3, #1
 8016ea6:	d104      	bne.n	8016eb2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	683a      	ldr	r2, [r7, #0]
 8016eb0:	619a      	str	r2, [r3, #24]
  }
}
 8016eb2:	bf00      	nop
 8016eb4:	3714      	adds	r7, #20
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebc:	4770      	bx	lr
	...

08016ec0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b084      	sub	sp, #16
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	60f8      	str	r0, [r7, #12]
 8016ec8:	60b9      	str	r1, [r7, #8]
 8016eca:	4613      	mov	r3, r2
 8016ecc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d107      	bne.n	8016ee4 <tcp_poll+0x24>
 8016ed4:	4b0e      	ldr	r3, [pc, #56]	; (8016f10 <tcp_poll+0x50>)
 8016ed6:	f640 023d 	movw	r2, #2109	; 0x83d
 8016eda:	490e      	ldr	r1, [pc, #56]	; (8016f14 <tcp_poll+0x54>)
 8016edc:	480e      	ldr	r0, [pc, #56]	; (8016f18 <tcp_poll+0x58>)
 8016ede:	f00a fee5 	bl	8021cac <iprintf>
 8016ee2:	e011      	b.n	8016f08 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	7d1b      	ldrb	r3, [r3, #20]
 8016ee8:	2b01      	cmp	r3, #1
 8016eea:	d106      	bne.n	8016efa <tcp_poll+0x3a>
 8016eec:	4b08      	ldr	r3, [pc, #32]	; (8016f10 <tcp_poll+0x50>)
 8016eee:	f640 023e 	movw	r2, #2110	; 0x83e
 8016ef2:	490a      	ldr	r1, [pc, #40]	; (8016f1c <tcp_poll+0x5c>)
 8016ef4:	4808      	ldr	r0, [pc, #32]	; (8016f18 <tcp_poll+0x58>)
 8016ef6:	f00a fed9 	bl	8021cac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	68ba      	ldr	r2, [r7, #8]
 8016efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	79fa      	ldrb	r2, [r7, #7]
 8016f06:	775a      	strb	r2, [r3, #29]
}
 8016f08:	3710      	adds	r7, #16
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	080274dc 	.word	0x080274dc
 8016f14:	08027af0 	.word	0x08027af0
 8016f18:	08027520 	.word	0x08027520
 8016f1c:	08027b08 	.word	0x08027b08

08016f20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d107      	bne.n	8016f3e <tcp_pcb_purge+0x1e>
 8016f2e:	4b21      	ldr	r3, [pc, #132]	; (8016fb4 <tcp_pcb_purge+0x94>)
 8016f30:	f640 0251 	movw	r2, #2129	; 0x851
 8016f34:	4920      	ldr	r1, [pc, #128]	; (8016fb8 <tcp_pcb_purge+0x98>)
 8016f36:	4821      	ldr	r0, [pc, #132]	; (8016fbc <tcp_pcb_purge+0x9c>)
 8016f38:	f00a feb8 	bl	8021cac <iprintf>
 8016f3c:	e037      	b.n	8016fae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	7d1b      	ldrb	r3, [r3, #20]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d033      	beq.n	8016fae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016f4a:	2b0a      	cmp	r3, #10
 8016f4c:	d02f      	beq.n	8016fae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d02b      	beq.n	8016fae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d007      	beq.n	8016f6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7fd fdfa 	bl	8014b5c <pbuf_free>
      pcb->refused_data = NULL;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d002      	beq.n	8016f7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	f000 f986 	bl	8017288 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f82:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7ff fcf9 	bl	8016980 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ff fcf4 	bl	8016980 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016fae:	3708      	adds	r7, #8
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	080274dc 	.word	0x080274dc
 8016fb8:	08027b28 	.word	0x08027b28
 8016fbc:	08027520 	.word	0x08027520

08016fc0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b084      	sub	sp, #16
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d106      	bne.n	8016fde <tcp_pcb_remove+0x1e>
 8016fd0:	4b3e      	ldr	r3, [pc, #248]	; (80170cc <tcp_pcb_remove+0x10c>)
 8016fd2:	f640 0283 	movw	r2, #2179	; 0x883
 8016fd6:	493e      	ldr	r1, [pc, #248]	; (80170d0 <tcp_pcb_remove+0x110>)
 8016fd8:	483e      	ldr	r0, [pc, #248]	; (80170d4 <tcp_pcb_remove+0x114>)
 8016fda:	f00a fe67 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d106      	bne.n	8016ff2 <tcp_pcb_remove+0x32>
 8016fe4:	4b39      	ldr	r3, [pc, #228]	; (80170cc <tcp_pcb_remove+0x10c>)
 8016fe6:	f640 0284 	movw	r2, #2180	; 0x884
 8016fea:	493b      	ldr	r1, [pc, #236]	; (80170d8 <tcp_pcb_remove+0x118>)
 8016fec:	4839      	ldr	r0, [pc, #228]	; (80170d4 <tcp_pcb_remove+0x114>)
 8016fee:	f00a fe5d 	bl	8021cac <iprintf>

  TCP_RMV(pcblist, pcb);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	683a      	ldr	r2, [r7, #0]
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d105      	bne.n	8017008 <tcp_pcb_remove+0x48>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	68da      	ldr	r2, [r3, #12]
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	601a      	str	r2, [r3, #0]
 8017006:	e013      	b.n	8017030 <tcp_pcb_remove+0x70>
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	60fb      	str	r3, [r7, #12]
 801700e:	e00c      	b.n	801702a <tcp_pcb_remove+0x6a>
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	683a      	ldr	r2, [r7, #0]
 8017016:	429a      	cmp	r2, r3
 8017018:	d104      	bne.n	8017024 <tcp_pcb_remove+0x64>
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	68da      	ldr	r2, [r3, #12]
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	60da      	str	r2, [r3, #12]
 8017022:	e005      	b.n	8017030 <tcp_pcb_remove+0x70>
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	68db      	ldr	r3, [r3, #12]
 8017028:	60fb      	str	r3, [r7, #12]
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d1ef      	bne.n	8017010 <tcp_pcb_remove+0x50>
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	2200      	movs	r2, #0
 8017034:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017036:	6838      	ldr	r0, [r7, #0]
 8017038:	f7ff ff72 	bl	8016f20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	2b0a      	cmp	r3, #10
 8017042:	d013      	beq.n	801706c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017048:	2b01      	cmp	r3, #1
 801704a:	d00f      	beq.n	801706c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	8b5b      	ldrh	r3, [r3, #26]
 8017050:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017054:	2b00      	cmp	r3, #0
 8017056:	d009      	beq.n	801706c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	8b5b      	ldrh	r3, [r3, #26]
 801705c:	f043 0302 	orr.w	r3, r3, #2
 8017060:	b29a      	uxth	r2, r3
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017066:	6838      	ldr	r0, [r7, #0]
 8017068:	f003 fc22 	bl	801a8b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	7d1b      	ldrb	r3, [r3, #20]
 8017070:	2b01      	cmp	r3, #1
 8017072:	d020      	beq.n	80170b6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017078:	2b00      	cmp	r3, #0
 801707a:	d006      	beq.n	801708a <tcp_pcb_remove+0xca>
 801707c:	4b13      	ldr	r3, [pc, #76]	; (80170cc <tcp_pcb_remove+0x10c>)
 801707e:	f640 0293 	movw	r2, #2195	; 0x893
 8017082:	4916      	ldr	r1, [pc, #88]	; (80170dc <tcp_pcb_remove+0x11c>)
 8017084:	4813      	ldr	r0, [pc, #76]	; (80170d4 <tcp_pcb_remove+0x114>)
 8017086:	f00a fe11 	bl	8021cac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801708e:	2b00      	cmp	r3, #0
 8017090:	d006      	beq.n	80170a0 <tcp_pcb_remove+0xe0>
 8017092:	4b0e      	ldr	r3, [pc, #56]	; (80170cc <tcp_pcb_remove+0x10c>)
 8017094:	f640 0294 	movw	r2, #2196	; 0x894
 8017098:	4911      	ldr	r1, [pc, #68]	; (80170e0 <tcp_pcb_remove+0x120>)
 801709a:	480e      	ldr	r0, [pc, #56]	; (80170d4 <tcp_pcb_remove+0x114>)
 801709c:	f00a fe06 	bl	8021cac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d006      	beq.n	80170b6 <tcp_pcb_remove+0xf6>
 80170a8:	4b08      	ldr	r3, [pc, #32]	; (80170cc <tcp_pcb_remove+0x10c>)
 80170aa:	f640 0296 	movw	r2, #2198	; 0x896
 80170ae:	490d      	ldr	r1, [pc, #52]	; (80170e4 <tcp_pcb_remove+0x124>)
 80170b0:	4808      	ldr	r0, [pc, #32]	; (80170d4 <tcp_pcb_remove+0x114>)
 80170b2:	f00a fdfb 	bl	8021cac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	2200      	movs	r2, #0
 80170ba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	2200      	movs	r2, #0
 80170c0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80170c2:	bf00      	nop
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	bf00      	nop
 80170cc:	080274dc 	.word	0x080274dc
 80170d0:	08027b44 	.word	0x08027b44
 80170d4:	08027520 	.word	0x08027520
 80170d8:	08027b60 	.word	0x08027b60
 80170dc:	08027b80 	.word	0x08027b80
 80170e0:	08027b98 	.word	0x08027b98
 80170e4:	08027bb4 	.word	0x08027bb4

080170e8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d106      	bne.n	8017104 <tcp_next_iss+0x1c>
 80170f6:	4b0a      	ldr	r3, [pc, #40]	; (8017120 <tcp_next_iss+0x38>)
 80170f8:	f640 02af 	movw	r2, #2223	; 0x8af
 80170fc:	4909      	ldr	r1, [pc, #36]	; (8017124 <tcp_next_iss+0x3c>)
 80170fe:	480a      	ldr	r0, [pc, #40]	; (8017128 <tcp_next_iss+0x40>)
 8017100:	f00a fdd4 	bl	8021cac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017104:	4b09      	ldr	r3, [pc, #36]	; (801712c <tcp_next_iss+0x44>)
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	4b09      	ldr	r3, [pc, #36]	; (8017130 <tcp_next_iss+0x48>)
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	4413      	add	r3, r2
 801710e:	4a07      	ldr	r2, [pc, #28]	; (801712c <tcp_next_iss+0x44>)
 8017110:	6013      	str	r3, [r2, #0]
  return iss;
 8017112:	4b06      	ldr	r3, [pc, #24]	; (801712c <tcp_next_iss+0x44>)
 8017114:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017116:	4618      	mov	r0, r3
 8017118:	3708      	adds	r7, #8
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	080274dc 	.word	0x080274dc
 8017124:	08027bcc 	.word	0x08027bcc
 8017128:	08027520 	.word	0x08027520
 801712c:	20000068 	.word	0x20000068
 8017130:	2001b1a0 	.word	0x2001b1a0

08017134 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b086      	sub	sp, #24
 8017138:	af00      	add	r7, sp, #0
 801713a:	4603      	mov	r3, r0
 801713c:	60b9      	str	r1, [r7, #8]
 801713e:	607a      	str	r2, [r7, #4]
 8017140:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d106      	bne.n	8017156 <tcp_eff_send_mss_netif+0x22>
 8017148:	4b14      	ldr	r3, [pc, #80]	; (801719c <tcp_eff_send_mss_netif+0x68>)
 801714a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801714e:	4914      	ldr	r1, [pc, #80]	; (80171a0 <tcp_eff_send_mss_netif+0x6c>)
 8017150:	4814      	ldr	r0, [pc, #80]	; (80171a4 <tcp_eff_send_mss_netif+0x70>)
 8017152:	f00a fdab 	bl	8021cac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d101      	bne.n	8017160 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801715c:	89fb      	ldrh	r3, [r7, #14]
 801715e:	e019      	b.n	8017194 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017164:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017166:	8afb      	ldrh	r3, [r7, #22]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d012      	beq.n	8017192 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801716c:	2328      	movs	r3, #40	; 0x28
 801716e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017170:	8afa      	ldrh	r2, [r7, #22]
 8017172:	8abb      	ldrh	r3, [r7, #20]
 8017174:	429a      	cmp	r2, r3
 8017176:	d904      	bls.n	8017182 <tcp_eff_send_mss_netif+0x4e>
 8017178:	8afa      	ldrh	r2, [r7, #22]
 801717a:	8abb      	ldrh	r3, [r7, #20]
 801717c:	1ad3      	subs	r3, r2, r3
 801717e:	b29b      	uxth	r3, r3
 8017180:	e000      	b.n	8017184 <tcp_eff_send_mss_netif+0x50>
 8017182:	2300      	movs	r3, #0
 8017184:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017186:	8a7a      	ldrh	r2, [r7, #18]
 8017188:	89fb      	ldrh	r3, [r7, #14]
 801718a:	4293      	cmp	r3, r2
 801718c:	bf28      	it	cs
 801718e:	4613      	movcs	r3, r2
 8017190:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017192:	89fb      	ldrh	r3, [r7, #14]
}
 8017194:	4618      	mov	r0, r3
 8017196:	3718      	adds	r7, #24
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	080274dc 	.word	0x080274dc
 80171a0:	08027be8 	.word	0x08027be8
 80171a4:	08027520 	.word	0x08027520

080171a8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80171b2:	683b      	ldr	r3, [r7, #0]
 80171b4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d119      	bne.n	80171f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80171bc:	4b10      	ldr	r3, [pc, #64]	; (8017200 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80171be:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80171c2:	4910      	ldr	r1, [pc, #64]	; (8017204 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80171c4:	4810      	ldr	r0, [pc, #64]	; (8017208 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80171c6:	f00a fd71 	bl	8021cac <iprintf>

  while (pcb != NULL) {
 80171ca:	e011      	b.n	80171f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d108      	bne.n	80171ea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	68db      	ldr	r3, [r3, #12]
 80171dc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	f7fe fc38 	bl	8015a54 <tcp_abort>
      pcb = next;
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	60fb      	str	r3, [r7, #12]
 80171e8:	e002      	b.n	80171f0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	68db      	ldr	r3, [r3, #12]
 80171ee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d1ea      	bne.n	80171cc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80171f6:	bf00      	nop
 80171f8:	bf00      	nop
 80171fa:	3710      	adds	r7, #16
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	080274dc 	.word	0x080274dc
 8017204:	08027c10 	.word	0x08027c10
 8017208:	08027520 	.word	0x08027520

0801720c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b084      	sub	sp, #16
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d02a      	beq.n	8017272 <tcp_netif_ip_addr_changed+0x66>
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d026      	beq.n	8017272 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017224:	4b15      	ldr	r3, [pc, #84]	; (801727c <tcp_netif_ip_addr_changed+0x70>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	4619      	mov	r1, r3
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f7ff ffbc 	bl	80171a8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017230:	4b13      	ldr	r3, [pc, #76]	; (8017280 <tcp_netif_ip_addr_changed+0x74>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	4619      	mov	r1, r3
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f7ff ffb6 	bl	80171a8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d017      	beq.n	8017272 <tcp_netif_ip_addr_changed+0x66>
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d013      	beq.n	8017272 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801724a:	4b0e      	ldr	r3, [pc, #56]	; (8017284 <tcp_netif_ip_addr_changed+0x78>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	60fb      	str	r3, [r7, #12]
 8017250:	e00c      	b.n	801726c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	681a      	ldr	r2, [r3, #0]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	429a      	cmp	r2, r3
 801725c:	d103      	bne.n	8017266 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	68db      	ldr	r3, [r3, #12]
 801726a:	60fb      	str	r3, [r7, #12]
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1ef      	bne.n	8017252 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017272:	bf00      	nop
 8017274:	3710      	adds	r7, #16
 8017276:	46bd      	mov	sp, r7
 8017278:	bd80      	pop	{r7, pc}
 801727a:	bf00      	nop
 801727c:	2001b19c 	.word	0x2001b19c
 8017280:	2001b1a8 	.word	0x2001b1a8
 8017284:	2001b1a4 	.word	0x2001b1a4

08017288 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017294:	2b00      	cmp	r3, #0
 8017296:	d007      	beq.n	80172a8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801729c:	4618      	mov	r0, r3
 801729e:	f7ff fb6f 	bl	8016980 <tcp_segs_free>
    pcb->ooseq = NULL;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2200      	movs	r2, #0
 80172a6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80172a8:	bf00      	nop
 80172aa:	3708      	adds	r7, #8
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80172b0:	b590      	push	{r4, r7, lr}
 80172b2:	b08d      	sub	sp, #52	; 0x34
 80172b4:	af04      	add	r7, sp, #16
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d105      	bne.n	80172cc <tcp_input+0x1c>
 80172c0:	4b9b      	ldr	r3, [pc, #620]	; (8017530 <tcp_input+0x280>)
 80172c2:	2283      	movs	r2, #131	; 0x83
 80172c4:	499b      	ldr	r1, [pc, #620]	; (8017534 <tcp_input+0x284>)
 80172c6:	489c      	ldr	r0, [pc, #624]	; (8017538 <tcp_input+0x288>)
 80172c8:	f00a fcf0 	bl	8021cac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	685b      	ldr	r3, [r3, #4]
 80172d0:	4a9a      	ldr	r2, [pc, #616]	; (801753c <tcp_input+0x28c>)
 80172d2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	895b      	ldrh	r3, [r3, #10]
 80172d8:	2b13      	cmp	r3, #19
 80172da:	f240 83c4 	bls.w	8017a66 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80172de:	4b98      	ldr	r3, [pc, #608]	; (8017540 <tcp_input+0x290>)
 80172e0:	695b      	ldr	r3, [r3, #20]
 80172e2:	4a97      	ldr	r2, [pc, #604]	; (8017540 <tcp_input+0x290>)
 80172e4:	6812      	ldr	r2, [r2, #0]
 80172e6:	4611      	mov	r1, r2
 80172e8:	4618      	mov	r0, r3
 80172ea:	f008 fc13 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 80172ee:	4603      	mov	r3, r0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f040 83ba 	bne.w	8017a6a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80172f6:	4b92      	ldr	r3, [pc, #584]	; (8017540 <tcp_input+0x290>)
 80172f8:	695b      	ldr	r3, [r3, #20]
 80172fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80172fe:	2be0      	cmp	r3, #224	; 0xe0
 8017300:	f000 83b3 	beq.w	8017a6a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017304:	4b8d      	ldr	r3, [pc, #564]	; (801753c <tcp_input+0x28c>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	899b      	ldrh	r3, [r3, #12]
 801730a:	b29b      	uxth	r3, r3
 801730c:	4618      	mov	r0, r3
 801730e:	f7fb f865 	bl	80123dc <lwip_htons>
 8017312:	4603      	mov	r3, r0
 8017314:	0b1b      	lsrs	r3, r3, #12
 8017316:	b29b      	uxth	r3, r3
 8017318:	b2db      	uxtb	r3, r3
 801731a:	009b      	lsls	r3, r3, #2
 801731c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801731e:	7cbb      	ldrb	r3, [r7, #18]
 8017320:	2b13      	cmp	r3, #19
 8017322:	f240 83a4 	bls.w	8017a6e <tcp_input+0x7be>
 8017326:	7cbb      	ldrb	r3, [r7, #18]
 8017328:	b29a      	uxth	r2, r3
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	891b      	ldrh	r3, [r3, #8]
 801732e:	429a      	cmp	r2, r3
 8017330:	f200 839d 	bhi.w	8017a6e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017334:	7cbb      	ldrb	r3, [r7, #18]
 8017336:	b29b      	uxth	r3, r3
 8017338:	3b14      	subs	r3, #20
 801733a:	b29a      	uxth	r2, r3
 801733c:	4b81      	ldr	r3, [pc, #516]	; (8017544 <tcp_input+0x294>)
 801733e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017340:	4b81      	ldr	r3, [pc, #516]	; (8017548 <tcp_input+0x298>)
 8017342:	2200      	movs	r2, #0
 8017344:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	895a      	ldrh	r2, [r3, #10]
 801734a:	7cbb      	ldrb	r3, [r7, #18]
 801734c:	b29b      	uxth	r3, r3
 801734e:	429a      	cmp	r2, r3
 8017350:	d309      	bcc.n	8017366 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017352:	4b7c      	ldr	r3, [pc, #496]	; (8017544 <tcp_input+0x294>)
 8017354:	881a      	ldrh	r2, [r3, #0]
 8017356:	4b7d      	ldr	r3, [pc, #500]	; (801754c <tcp_input+0x29c>)
 8017358:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801735a:	7cbb      	ldrb	r3, [r7, #18]
 801735c:	4619      	mov	r1, r3
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f7fd fb44 	bl	80149ec <pbuf_remove_header>
 8017364:	e04e      	b.n	8017404 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d105      	bne.n	801737a <tcp_input+0xca>
 801736e:	4b70      	ldr	r3, [pc, #448]	; (8017530 <tcp_input+0x280>)
 8017370:	22c2      	movs	r2, #194	; 0xc2
 8017372:	4977      	ldr	r1, [pc, #476]	; (8017550 <tcp_input+0x2a0>)
 8017374:	4870      	ldr	r0, [pc, #448]	; (8017538 <tcp_input+0x288>)
 8017376:	f00a fc99 	bl	8021cac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801737a:	2114      	movs	r1, #20
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7fd fb35 	bl	80149ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	895a      	ldrh	r2, [r3, #10]
 8017386:	4b71      	ldr	r3, [pc, #452]	; (801754c <tcp_input+0x29c>)
 8017388:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801738a:	4b6e      	ldr	r3, [pc, #440]	; (8017544 <tcp_input+0x294>)
 801738c:	881a      	ldrh	r2, [r3, #0]
 801738e:	4b6f      	ldr	r3, [pc, #444]	; (801754c <tcp_input+0x29c>)
 8017390:	881b      	ldrh	r3, [r3, #0]
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017396:	4b6d      	ldr	r3, [pc, #436]	; (801754c <tcp_input+0x29c>)
 8017398:	881b      	ldrh	r3, [r3, #0]
 801739a:	4619      	mov	r1, r3
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f7fd fb25 	bl	80149ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	895b      	ldrh	r3, [r3, #10]
 80173a8:	8a3a      	ldrh	r2, [r7, #16]
 80173aa:	429a      	cmp	r2, r3
 80173ac:	f200 8361 	bhi.w	8017a72 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	685b      	ldr	r3, [r3, #4]
 80173b6:	4a64      	ldr	r2, [pc, #400]	; (8017548 <tcp_input+0x298>)
 80173b8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	8a3a      	ldrh	r2, [r7, #16]
 80173c0:	4611      	mov	r1, r2
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7fd fb12 	bl	80149ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	891a      	ldrh	r2, [r3, #8]
 80173cc:	8a3b      	ldrh	r3, [r7, #16]
 80173ce:	1ad3      	subs	r3, r2, r3
 80173d0:	b29a      	uxth	r2, r3
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	895b      	ldrh	r3, [r3, #10]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d005      	beq.n	80173ea <tcp_input+0x13a>
 80173de:	4b54      	ldr	r3, [pc, #336]	; (8017530 <tcp_input+0x280>)
 80173e0:	22df      	movs	r2, #223	; 0xdf
 80173e2:	495c      	ldr	r1, [pc, #368]	; (8017554 <tcp_input+0x2a4>)
 80173e4:	4854      	ldr	r0, [pc, #336]	; (8017538 <tcp_input+0x288>)
 80173e6:	f00a fc61 	bl	8021cac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	891a      	ldrh	r2, [r3, #8]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	891b      	ldrh	r3, [r3, #8]
 80173f4:	429a      	cmp	r2, r3
 80173f6:	d005      	beq.n	8017404 <tcp_input+0x154>
 80173f8:	4b4d      	ldr	r3, [pc, #308]	; (8017530 <tcp_input+0x280>)
 80173fa:	22e0      	movs	r2, #224	; 0xe0
 80173fc:	4956      	ldr	r1, [pc, #344]	; (8017558 <tcp_input+0x2a8>)
 80173fe:	484e      	ldr	r0, [pc, #312]	; (8017538 <tcp_input+0x288>)
 8017400:	f00a fc54 	bl	8021cac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017404:	4b4d      	ldr	r3, [pc, #308]	; (801753c <tcp_input+0x28c>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	b29b      	uxth	r3, r3
 801740c:	4a4b      	ldr	r2, [pc, #300]	; (801753c <tcp_input+0x28c>)
 801740e:	6814      	ldr	r4, [r2, #0]
 8017410:	4618      	mov	r0, r3
 8017412:	f7fa ffe3 	bl	80123dc <lwip_htons>
 8017416:	4603      	mov	r3, r0
 8017418:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801741a:	4b48      	ldr	r3, [pc, #288]	; (801753c <tcp_input+0x28c>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	885b      	ldrh	r3, [r3, #2]
 8017420:	b29b      	uxth	r3, r3
 8017422:	4a46      	ldr	r2, [pc, #280]	; (801753c <tcp_input+0x28c>)
 8017424:	6814      	ldr	r4, [r2, #0]
 8017426:	4618      	mov	r0, r3
 8017428:	f7fa ffd8 	bl	80123dc <lwip_htons>
 801742c:	4603      	mov	r3, r0
 801742e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017430:	4b42      	ldr	r3, [pc, #264]	; (801753c <tcp_input+0x28c>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	4a41      	ldr	r2, [pc, #260]	; (801753c <tcp_input+0x28c>)
 8017438:	6814      	ldr	r4, [r2, #0]
 801743a:	4618      	mov	r0, r3
 801743c:	f7fa ffe3 	bl	8012406 <lwip_htonl>
 8017440:	4603      	mov	r3, r0
 8017442:	6063      	str	r3, [r4, #4]
 8017444:	6863      	ldr	r3, [r4, #4]
 8017446:	4a45      	ldr	r2, [pc, #276]	; (801755c <tcp_input+0x2ac>)
 8017448:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801744a:	4b3c      	ldr	r3, [pc, #240]	; (801753c <tcp_input+0x28c>)
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	689b      	ldr	r3, [r3, #8]
 8017450:	4a3a      	ldr	r2, [pc, #232]	; (801753c <tcp_input+0x28c>)
 8017452:	6814      	ldr	r4, [r2, #0]
 8017454:	4618      	mov	r0, r3
 8017456:	f7fa ffd6 	bl	8012406 <lwip_htonl>
 801745a:	4603      	mov	r3, r0
 801745c:	60a3      	str	r3, [r4, #8]
 801745e:	68a3      	ldr	r3, [r4, #8]
 8017460:	4a3f      	ldr	r2, [pc, #252]	; (8017560 <tcp_input+0x2b0>)
 8017462:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017464:	4b35      	ldr	r3, [pc, #212]	; (801753c <tcp_input+0x28c>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	89db      	ldrh	r3, [r3, #14]
 801746a:	b29b      	uxth	r3, r3
 801746c:	4a33      	ldr	r2, [pc, #204]	; (801753c <tcp_input+0x28c>)
 801746e:	6814      	ldr	r4, [r2, #0]
 8017470:	4618      	mov	r0, r3
 8017472:	f7fa ffb3 	bl	80123dc <lwip_htons>
 8017476:	4603      	mov	r3, r0
 8017478:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801747a:	4b30      	ldr	r3, [pc, #192]	; (801753c <tcp_input+0x28c>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	899b      	ldrh	r3, [r3, #12]
 8017480:	b29b      	uxth	r3, r3
 8017482:	4618      	mov	r0, r3
 8017484:	f7fa ffaa 	bl	80123dc <lwip_htons>
 8017488:	4603      	mov	r3, r0
 801748a:	b2db      	uxtb	r3, r3
 801748c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017490:	b2da      	uxtb	r2, r3
 8017492:	4b34      	ldr	r3, [pc, #208]	; (8017564 <tcp_input+0x2b4>)
 8017494:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	891a      	ldrh	r2, [r3, #8]
 801749a:	4b33      	ldr	r3, [pc, #204]	; (8017568 <tcp_input+0x2b8>)
 801749c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801749e:	4b31      	ldr	r3, [pc, #196]	; (8017564 <tcp_input+0x2b4>)
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	f003 0303 	and.w	r3, r3, #3
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d00c      	beq.n	80174c4 <tcp_input+0x214>
    tcplen++;
 80174aa:	4b2f      	ldr	r3, [pc, #188]	; (8017568 <tcp_input+0x2b8>)
 80174ac:	881b      	ldrh	r3, [r3, #0]
 80174ae:	3301      	adds	r3, #1
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	4b2d      	ldr	r3, [pc, #180]	; (8017568 <tcp_input+0x2b8>)
 80174b4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	891a      	ldrh	r2, [r3, #8]
 80174ba:	4b2b      	ldr	r3, [pc, #172]	; (8017568 <tcp_input+0x2b8>)
 80174bc:	881b      	ldrh	r3, [r3, #0]
 80174be:	429a      	cmp	r2, r3
 80174c0:	f200 82d9 	bhi.w	8017a76 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80174c4:	2300      	movs	r3, #0
 80174c6:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174c8:	4b28      	ldr	r3, [pc, #160]	; (801756c <tcp_input+0x2bc>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	61bb      	str	r3, [r7, #24]
 80174ce:	e09d      	b.n	801760c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80174d0:	69bb      	ldr	r3, [r7, #24]
 80174d2:	7d1b      	ldrb	r3, [r3, #20]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d105      	bne.n	80174e4 <tcp_input+0x234>
 80174d8:	4b15      	ldr	r3, [pc, #84]	; (8017530 <tcp_input+0x280>)
 80174da:	22fb      	movs	r2, #251	; 0xfb
 80174dc:	4924      	ldr	r1, [pc, #144]	; (8017570 <tcp_input+0x2c0>)
 80174de:	4816      	ldr	r0, [pc, #88]	; (8017538 <tcp_input+0x288>)
 80174e0:	f00a fbe4 	bl	8021cac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80174e4:	69bb      	ldr	r3, [r7, #24]
 80174e6:	7d1b      	ldrb	r3, [r3, #20]
 80174e8:	2b0a      	cmp	r3, #10
 80174ea:	d105      	bne.n	80174f8 <tcp_input+0x248>
 80174ec:	4b10      	ldr	r3, [pc, #64]	; (8017530 <tcp_input+0x280>)
 80174ee:	22fc      	movs	r2, #252	; 0xfc
 80174f0:	4920      	ldr	r1, [pc, #128]	; (8017574 <tcp_input+0x2c4>)
 80174f2:	4811      	ldr	r0, [pc, #68]	; (8017538 <tcp_input+0x288>)
 80174f4:	f00a fbda 	bl	8021cac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	7d1b      	ldrb	r3, [r3, #20]
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	d105      	bne.n	801750c <tcp_input+0x25c>
 8017500:	4b0b      	ldr	r3, [pc, #44]	; (8017530 <tcp_input+0x280>)
 8017502:	22fd      	movs	r2, #253	; 0xfd
 8017504:	491c      	ldr	r1, [pc, #112]	; (8017578 <tcp_input+0x2c8>)
 8017506:	480c      	ldr	r0, [pc, #48]	; (8017538 <tcp_input+0x288>)
 8017508:	f00a fbd0 	bl	8021cac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801750c:	69bb      	ldr	r3, [r7, #24]
 801750e:	7a1b      	ldrb	r3, [r3, #8]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d033      	beq.n	801757c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017514:	69bb      	ldr	r3, [r7, #24]
 8017516:	7a1a      	ldrb	r2, [r3, #8]
 8017518:	4b09      	ldr	r3, [pc, #36]	; (8017540 <tcp_input+0x290>)
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017520:	3301      	adds	r3, #1
 8017522:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017524:	429a      	cmp	r2, r3
 8017526:	d029      	beq.n	801757c <tcp_input+0x2cc>
      prev = pcb;
 8017528:	69bb      	ldr	r3, [r7, #24]
 801752a:	61fb      	str	r3, [r7, #28]
      continue;
 801752c:	e06b      	b.n	8017606 <tcp_input+0x356>
 801752e:	bf00      	nop
 8017530:	08027c44 	.word	0x08027c44
 8017534:	08027c78 	.word	0x08027c78
 8017538:	08027c90 	.word	0x08027c90
 801753c:	20014394 	.word	0x20014394
 8017540:	200177a8 	.word	0x200177a8
 8017544:	20014398 	.word	0x20014398
 8017548:	2001439c 	.word	0x2001439c
 801754c:	2001439a 	.word	0x2001439a
 8017550:	08027cb8 	.word	0x08027cb8
 8017554:	08027cc8 	.word	0x08027cc8
 8017558:	08027cd4 	.word	0x08027cd4
 801755c:	200143a4 	.word	0x200143a4
 8017560:	200143a8 	.word	0x200143a8
 8017564:	200143b0 	.word	0x200143b0
 8017568:	200143ae 	.word	0x200143ae
 801756c:	2001b19c 	.word	0x2001b19c
 8017570:	08027cf4 	.word	0x08027cf4
 8017574:	08027d1c 	.word	0x08027d1c
 8017578:	08027d48 	.word	0x08027d48
    }

    if (pcb->remote_port == tcphdr->src &&
 801757c:	69bb      	ldr	r3, [r7, #24]
 801757e:	8b1a      	ldrh	r2, [r3, #24]
 8017580:	4b94      	ldr	r3, [pc, #592]	; (80177d4 <tcp_input+0x524>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	881b      	ldrh	r3, [r3, #0]
 8017586:	b29b      	uxth	r3, r3
 8017588:	429a      	cmp	r2, r3
 801758a:	d13a      	bne.n	8017602 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	8ada      	ldrh	r2, [r3, #22]
 8017590:	4b90      	ldr	r3, [pc, #576]	; (80177d4 <tcp_input+0x524>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	885b      	ldrh	r3, [r3, #2]
 8017596:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017598:	429a      	cmp	r2, r3
 801759a:	d132      	bne.n	8017602 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801759c:	69bb      	ldr	r3, [r7, #24]
 801759e:	685a      	ldr	r2, [r3, #4]
 80175a0:	4b8d      	ldr	r3, [pc, #564]	; (80177d8 <tcp_input+0x528>)
 80175a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d12c      	bne.n	8017602 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80175a8:	69bb      	ldr	r3, [r7, #24]
 80175aa:	681a      	ldr	r2, [r3, #0]
 80175ac:	4b8a      	ldr	r3, [pc, #552]	; (80177d8 <tcp_input+0x528>)
 80175ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d126      	bne.n	8017602 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	68db      	ldr	r3, [r3, #12]
 80175b8:	69ba      	ldr	r2, [r7, #24]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d106      	bne.n	80175cc <tcp_input+0x31c>
 80175be:	4b87      	ldr	r3, [pc, #540]	; (80177dc <tcp_input+0x52c>)
 80175c0:	f240 120d 	movw	r2, #269	; 0x10d
 80175c4:	4986      	ldr	r1, [pc, #536]	; (80177e0 <tcp_input+0x530>)
 80175c6:	4887      	ldr	r0, [pc, #540]	; (80177e4 <tcp_input+0x534>)
 80175c8:	f00a fb70 	bl	8021cac <iprintf>
      if (prev != NULL) {
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00a      	beq.n	80175e8 <tcp_input+0x338>
        prev->next = pcb->next;
 80175d2:	69bb      	ldr	r3, [r7, #24]
 80175d4:	68da      	ldr	r2, [r3, #12]
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80175da:	4b83      	ldr	r3, [pc, #524]	; (80177e8 <tcp_input+0x538>)
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	69bb      	ldr	r3, [r7, #24]
 80175e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80175e2:	4a81      	ldr	r2, [pc, #516]	; (80177e8 <tcp_input+0x538>)
 80175e4:	69bb      	ldr	r3, [r7, #24]
 80175e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80175e8:	69bb      	ldr	r3, [r7, #24]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	69ba      	ldr	r2, [r7, #24]
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d111      	bne.n	8017616 <tcp_input+0x366>
 80175f2:	4b7a      	ldr	r3, [pc, #488]	; (80177dc <tcp_input+0x52c>)
 80175f4:	f240 1215 	movw	r2, #277	; 0x115
 80175f8:	497c      	ldr	r1, [pc, #496]	; (80177ec <tcp_input+0x53c>)
 80175fa:	487a      	ldr	r0, [pc, #488]	; (80177e4 <tcp_input+0x534>)
 80175fc:	f00a fb56 	bl	8021cac <iprintf>
      break;
 8017600:	e009      	b.n	8017616 <tcp_input+0x366>
    }
    prev = pcb;
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017606:	69bb      	ldr	r3, [r7, #24]
 8017608:	68db      	ldr	r3, [r3, #12]
 801760a:	61bb      	str	r3, [r7, #24]
 801760c:	69bb      	ldr	r3, [r7, #24]
 801760e:	2b00      	cmp	r3, #0
 8017610:	f47f af5e 	bne.w	80174d0 <tcp_input+0x220>
 8017614:	e000      	b.n	8017618 <tcp_input+0x368>
      break;
 8017616:	bf00      	nop
  }

  if (pcb == NULL) {
 8017618:	69bb      	ldr	r3, [r7, #24]
 801761a:	2b00      	cmp	r3, #0
 801761c:	f040 8095 	bne.w	801774a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017620:	4b73      	ldr	r3, [pc, #460]	; (80177f0 <tcp_input+0x540>)
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	61bb      	str	r3, [r7, #24]
 8017626:	e03f      	b.n	80176a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017628:	69bb      	ldr	r3, [r7, #24]
 801762a:	7d1b      	ldrb	r3, [r3, #20]
 801762c:	2b0a      	cmp	r3, #10
 801762e:	d006      	beq.n	801763e <tcp_input+0x38e>
 8017630:	4b6a      	ldr	r3, [pc, #424]	; (80177dc <tcp_input+0x52c>)
 8017632:	f240 121f 	movw	r2, #287	; 0x11f
 8017636:	496f      	ldr	r1, [pc, #444]	; (80177f4 <tcp_input+0x544>)
 8017638:	486a      	ldr	r0, [pc, #424]	; (80177e4 <tcp_input+0x534>)
 801763a:	f00a fb37 	bl	8021cac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801763e:	69bb      	ldr	r3, [r7, #24]
 8017640:	7a1b      	ldrb	r3, [r3, #8]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d009      	beq.n	801765a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017646:	69bb      	ldr	r3, [r7, #24]
 8017648:	7a1a      	ldrb	r2, [r3, #8]
 801764a:	4b63      	ldr	r3, [pc, #396]	; (80177d8 <tcp_input+0x528>)
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017652:	3301      	adds	r3, #1
 8017654:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017656:	429a      	cmp	r2, r3
 8017658:	d122      	bne.n	80176a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801765a:	69bb      	ldr	r3, [r7, #24]
 801765c:	8b1a      	ldrh	r2, [r3, #24]
 801765e:	4b5d      	ldr	r3, [pc, #372]	; (80177d4 <tcp_input+0x524>)
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	881b      	ldrh	r3, [r3, #0]
 8017664:	b29b      	uxth	r3, r3
 8017666:	429a      	cmp	r2, r3
 8017668:	d11b      	bne.n	80176a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801766a:	69bb      	ldr	r3, [r7, #24]
 801766c:	8ada      	ldrh	r2, [r3, #22]
 801766e:	4b59      	ldr	r3, [pc, #356]	; (80177d4 <tcp_input+0x524>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	885b      	ldrh	r3, [r3, #2]
 8017674:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017676:	429a      	cmp	r2, r3
 8017678:	d113      	bne.n	80176a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801767a:	69bb      	ldr	r3, [r7, #24]
 801767c:	685a      	ldr	r2, [r3, #4]
 801767e:	4b56      	ldr	r3, [pc, #344]	; (80177d8 <tcp_input+0x528>)
 8017680:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017682:	429a      	cmp	r2, r3
 8017684:	d10d      	bne.n	80176a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017686:	69bb      	ldr	r3, [r7, #24]
 8017688:	681a      	ldr	r2, [r3, #0]
 801768a:	4b53      	ldr	r3, [pc, #332]	; (80177d8 <tcp_input+0x528>)
 801768c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801768e:	429a      	cmp	r2, r3
 8017690:	d107      	bne.n	80176a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017692:	69b8      	ldr	r0, [r7, #24]
 8017694:	f000 fb54 	bl	8017d40 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017698:	6878      	ldr	r0, [r7, #4]
 801769a:	f7fd fa5f 	bl	8014b5c <pbuf_free>
        return;
 801769e:	e1f0      	b.n	8017a82 <tcp_input+0x7d2>
        continue;
 80176a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80176a2:	69bb      	ldr	r3, [r7, #24]
 80176a4:	68db      	ldr	r3, [r3, #12]
 80176a6:	61bb      	str	r3, [r7, #24]
 80176a8:	69bb      	ldr	r3, [r7, #24]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d1bc      	bne.n	8017628 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80176ae:	2300      	movs	r3, #0
 80176b0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80176b2:	4b51      	ldr	r3, [pc, #324]	; (80177f8 <tcp_input+0x548>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	617b      	str	r3, [r7, #20]
 80176b8:	e02a      	b.n	8017710 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	7a1b      	ldrb	r3, [r3, #8]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d00c      	beq.n	80176dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	7a1a      	ldrb	r2, [r3, #8]
 80176c6:	4b44      	ldr	r3, [pc, #272]	; (80177d8 <tcp_input+0x528>)
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80176ce:	3301      	adds	r3, #1
 80176d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d002      	beq.n	80176dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80176d6:	697b      	ldr	r3, [r7, #20]
 80176d8:	61fb      	str	r3, [r7, #28]
        continue;
 80176da:	e016      	b.n	801770a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80176dc:	697b      	ldr	r3, [r7, #20]
 80176de:	8ada      	ldrh	r2, [r3, #22]
 80176e0:	4b3c      	ldr	r3, [pc, #240]	; (80177d4 <tcp_input+0x524>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	885b      	ldrh	r3, [r3, #2]
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	429a      	cmp	r2, r3
 80176ea:	d10c      	bne.n	8017706 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	681a      	ldr	r2, [r3, #0]
 80176f0:	4b39      	ldr	r3, [pc, #228]	; (80177d8 <tcp_input+0x528>)
 80176f2:	695b      	ldr	r3, [r3, #20]
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d00f      	beq.n	8017718 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d00d      	beq.n	801771a <tcp_input+0x46a>
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d009      	beq.n	801771a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	68db      	ldr	r3, [r3, #12]
 801770e:	617b      	str	r3, [r7, #20]
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d1d1      	bne.n	80176ba <tcp_input+0x40a>
 8017716:	e000      	b.n	801771a <tcp_input+0x46a>
            break;
 8017718:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801771a:	697b      	ldr	r3, [r7, #20]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d014      	beq.n	801774a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017720:	69fb      	ldr	r3, [r7, #28]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d00a      	beq.n	801773c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017726:	697b      	ldr	r3, [r7, #20]
 8017728:	68da      	ldr	r2, [r3, #12]
 801772a:	69fb      	ldr	r3, [r7, #28]
 801772c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801772e:	4b32      	ldr	r3, [pc, #200]	; (80177f8 <tcp_input+0x548>)
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	697b      	ldr	r3, [r7, #20]
 8017734:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017736:	4a30      	ldr	r2, [pc, #192]	; (80177f8 <tcp_input+0x548>)
 8017738:	697b      	ldr	r3, [r7, #20]
 801773a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801773c:	6978      	ldr	r0, [r7, #20]
 801773e:	f000 fa01 	bl	8017b44 <tcp_listen_input>
      }
      pbuf_free(p);
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7fd fa0a 	bl	8014b5c <pbuf_free>
      return;
 8017748:	e19b      	b.n	8017a82 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	2b00      	cmp	r3, #0
 801774e:	f000 8160 	beq.w	8017a12 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017752:	4b2a      	ldr	r3, [pc, #168]	; (80177fc <tcp_input+0x54c>)
 8017754:	2200      	movs	r2, #0
 8017756:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	891a      	ldrh	r2, [r3, #8]
 801775c:	4b27      	ldr	r3, [pc, #156]	; (80177fc <tcp_input+0x54c>)
 801775e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017760:	4a26      	ldr	r2, [pc, #152]	; (80177fc <tcp_input+0x54c>)
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017766:	4b1b      	ldr	r3, [pc, #108]	; (80177d4 <tcp_input+0x524>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	4a24      	ldr	r2, [pc, #144]	; (80177fc <tcp_input+0x54c>)
 801776c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801776e:	4b24      	ldr	r3, [pc, #144]	; (8017800 <tcp_input+0x550>)
 8017770:	2200      	movs	r2, #0
 8017772:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017774:	4b23      	ldr	r3, [pc, #140]	; (8017804 <tcp_input+0x554>)
 8017776:	2200      	movs	r2, #0
 8017778:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801777a:	4b23      	ldr	r3, [pc, #140]	; (8017808 <tcp_input+0x558>)
 801777c:	2200      	movs	r2, #0
 801777e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017780:	4b22      	ldr	r3, [pc, #136]	; (801780c <tcp_input+0x55c>)
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	f003 0308 	and.w	r3, r3, #8
 8017788:	2b00      	cmp	r3, #0
 801778a:	d006      	beq.n	801779a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	7b5b      	ldrb	r3, [r3, #13]
 8017790:	f043 0301 	orr.w	r3, r3, #1
 8017794:	b2da      	uxtb	r2, r3
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801779a:	69bb      	ldr	r3, [r7, #24]
 801779c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d038      	beq.n	8017814 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80177a2:	69b8      	ldr	r0, [r7, #24]
 80177a4:	f7ff f870 	bl	8016888 <tcp_process_refused_data>
 80177a8:	4603      	mov	r3, r0
 80177aa:	f113 0f0d 	cmn.w	r3, #13
 80177ae:	d007      	beq.n	80177c0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80177b0:	69bb      	ldr	r3, [r7, #24]
 80177b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d02d      	beq.n	8017814 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80177b8:	4b15      	ldr	r3, [pc, #84]	; (8017810 <tcp_input+0x560>)
 80177ba:	881b      	ldrh	r3, [r3, #0]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d029      	beq.n	8017814 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80177c0:	69bb      	ldr	r3, [r7, #24]
 80177c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	f040 8104 	bne.w	80179d2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80177ca:	69b8      	ldr	r0, [r7, #24]
 80177cc:	f003 fe82 	bl	801b4d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80177d0:	e0ff      	b.n	80179d2 <tcp_input+0x722>
 80177d2:	bf00      	nop
 80177d4:	20014394 	.word	0x20014394
 80177d8:	200177a8 	.word	0x200177a8
 80177dc:	08027c44 	.word	0x08027c44
 80177e0:	08027d70 	.word	0x08027d70
 80177e4:	08027c90 	.word	0x08027c90
 80177e8:	2001b19c 	.word	0x2001b19c
 80177ec:	08027d9c 	.word	0x08027d9c
 80177f0:	2001b1ac 	.word	0x2001b1ac
 80177f4:	08027dc8 	.word	0x08027dc8
 80177f8:	2001b1a4 	.word	0x2001b1a4
 80177fc:	20014380 	.word	0x20014380
 8017800:	200143b4 	.word	0x200143b4
 8017804:	200143b1 	.word	0x200143b1
 8017808:	200143ac 	.word	0x200143ac
 801780c:	200143b0 	.word	0x200143b0
 8017810:	200143ae 	.word	0x200143ae
      }
    }
    tcp_input_pcb = pcb;
 8017814:	4a9c      	ldr	r2, [pc, #624]	; (8017a88 <tcp_input+0x7d8>)
 8017816:	69bb      	ldr	r3, [r7, #24]
 8017818:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801781a:	69b8      	ldr	r0, [r7, #24]
 801781c:	f000 fb0a 	bl	8017e34 <tcp_process>
 8017820:	4603      	mov	r3, r0
 8017822:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017828:	f113 0f0d 	cmn.w	r3, #13
 801782c:	f000 80d3 	beq.w	80179d6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017830:	4b96      	ldr	r3, [pc, #600]	; (8017a8c <tcp_input+0x7dc>)
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	f003 0308 	and.w	r3, r3, #8
 8017838:	2b00      	cmp	r3, #0
 801783a:	d015      	beq.n	8017868 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801783c:	69bb      	ldr	r3, [r7, #24]
 801783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017842:	2b00      	cmp	r3, #0
 8017844:	d008      	beq.n	8017858 <tcp_input+0x5a8>
 8017846:	69bb      	ldr	r3, [r7, #24]
 8017848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801784c:	69ba      	ldr	r2, [r7, #24]
 801784e:	6912      	ldr	r2, [r2, #16]
 8017850:	f06f 010d 	mvn.w	r1, #13
 8017854:	4610      	mov	r0, r2
 8017856:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017858:	69b9      	ldr	r1, [r7, #24]
 801785a:	488d      	ldr	r0, [pc, #564]	; (8017a90 <tcp_input+0x7e0>)
 801785c:	f7ff fbb0 	bl	8016fc0 <tcp_pcb_remove>
        tcp_free(pcb);
 8017860:	69b8      	ldr	r0, [r7, #24]
 8017862:	f7fd fdb3 	bl	80153cc <tcp_free>
 8017866:	e0c1      	b.n	80179ec <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8017868:	2300      	movs	r3, #0
 801786a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801786c:	4b89      	ldr	r3, [pc, #548]	; (8017a94 <tcp_input+0x7e4>)
 801786e:	881b      	ldrh	r3, [r3, #0]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d01d      	beq.n	80178b0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017874:	4b87      	ldr	r3, [pc, #540]	; (8017a94 <tcp_input+0x7e4>)
 8017876:	881b      	ldrh	r3, [r3, #0]
 8017878:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801787a:	69bb      	ldr	r3, [r7, #24]
 801787c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017880:	2b00      	cmp	r3, #0
 8017882:	d00a      	beq.n	801789a <tcp_input+0x5ea>
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801788a:	69ba      	ldr	r2, [r7, #24]
 801788c:	6910      	ldr	r0, [r2, #16]
 801788e:	89fa      	ldrh	r2, [r7, #14]
 8017890:	69b9      	ldr	r1, [r7, #24]
 8017892:	4798      	blx	r3
 8017894:	4603      	mov	r3, r0
 8017896:	74fb      	strb	r3, [r7, #19]
 8017898:	e001      	b.n	801789e <tcp_input+0x5ee>
 801789a:	2300      	movs	r3, #0
 801789c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801789e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80178a2:	f113 0f0d 	cmn.w	r3, #13
 80178a6:	f000 8098 	beq.w	80179da <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80178aa:	4b7a      	ldr	r3, [pc, #488]	; (8017a94 <tcp_input+0x7e4>)
 80178ac:	2200      	movs	r2, #0
 80178ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80178b0:	69b8      	ldr	r0, [r7, #24]
 80178b2:	f000 f907 	bl	8017ac4 <tcp_input_delayed_close>
 80178b6:	4603      	mov	r3, r0
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	f040 8090 	bne.w	80179de <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80178be:	4b76      	ldr	r3, [pc, #472]	; (8017a98 <tcp_input+0x7e8>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d041      	beq.n	801794a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80178c6:	69bb      	ldr	r3, [r7, #24]
 80178c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d006      	beq.n	80178dc <tcp_input+0x62c>
 80178ce:	4b73      	ldr	r3, [pc, #460]	; (8017a9c <tcp_input+0x7ec>)
 80178d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80178d4:	4972      	ldr	r1, [pc, #456]	; (8017aa0 <tcp_input+0x7f0>)
 80178d6:	4873      	ldr	r0, [pc, #460]	; (8017aa4 <tcp_input+0x7f4>)
 80178d8:	f00a f9e8 	bl	8021cac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80178dc:	69bb      	ldr	r3, [r7, #24]
 80178de:	8b5b      	ldrh	r3, [r3, #26]
 80178e0:	f003 0310 	and.w	r3, r3, #16
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d008      	beq.n	80178fa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80178e8:	4b6b      	ldr	r3, [pc, #428]	; (8017a98 <tcp_input+0x7e8>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	4618      	mov	r0, r3
 80178ee:	f7fd f935 	bl	8014b5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80178f2:	69b8      	ldr	r0, [r7, #24]
 80178f4:	f7fe f8ae 	bl	8015a54 <tcp_abort>
            goto aborted;
 80178f8:	e078      	b.n	80179ec <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80178fa:	69bb      	ldr	r3, [r7, #24]
 80178fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017900:	2b00      	cmp	r3, #0
 8017902:	d00c      	beq.n	801791e <tcp_input+0x66e>
 8017904:	69bb      	ldr	r3, [r7, #24]
 8017906:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	6918      	ldr	r0, [r3, #16]
 801790e:	4b62      	ldr	r3, [pc, #392]	; (8017a98 <tcp_input+0x7e8>)
 8017910:	681a      	ldr	r2, [r3, #0]
 8017912:	2300      	movs	r3, #0
 8017914:	69b9      	ldr	r1, [r7, #24]
 8017916:	47a0      	blx	r4
 8017918:	4603      	mov	r3, r0
 801791a:	74fb      	strb	r3, [r7, #19]
 801791c:	e008      	b.n	8017930 <tcp_input+0x680>
 801791e:	4b5e      	ldr	r3, [pc, #376]	; (8017a98 <tcp_input+0x7e8>)
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	2300      	movs	r3, #0
 8017924:	69b9      	ldr	r1, [r7, #24]
 8017926:	2000      	movs	r0, #0
 8017928:	f7ff f884 	bl	8016a34 <tcp_recv_null>
 801792c:	4603      	mov	r3, r0
 801792e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017934:	f113 0f0d 	cmn.w	r3, #13
 8017938:	d053      	beq.n	80179e2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801793a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d003      	beq.n	801794a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017942:	4b55      	ldr	r3, [pc, #340]	; (8017a98 <tcp_input+0x7e8>)
 8017944:	681a      	ldr	r2, [r3, #0]
 8017946:	69bb      	ldr	r3, [r7, #24]
 8017948:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801794a:	4b50      	ldr	r3, [pc, #320]	; (8017a8c <tcp_input+0x7dc>)
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	f003 0320 	and.w	r3, r3, #32
 8017952:	2b00      	cmp	r3, #0
 8017954:	d030      	beq.n	80179b8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8017956:	69bb      	ldr	r3, [r7, #24]
 8017958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801795a:	2b00      	cmp	r3, #0
 801795c:	d009      	beq.n	8017972 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801795e:	69bb      	ldr	r3, [r7, #24]
 8017960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017962:	7b5a      	ldrb	r2, [r3, #13]
 8017964:	69bb      	ldr	r3, [r7, #24]
 8017966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017968:	f042 0220 	orr.w	r2, r2, #32
 801796c:	b2d2      	uxtb	r2, r2
 801796e:	735a      	strb	r2, [r3, #13]
 8017970:	e022      	b.n	80179b8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017976:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801797a:	d005      	beq.n	8017988 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801797c:	69bb      	ldr	r3, [r7, #24]
 801797e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017980:	3301      	adds	r3, #1
 8017982:	b29a      	uxth	r2, r3
 8017984:	69bb      	ldr	r3, [r7, #24]
 8017986:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017988:	69bb      	ldr	r3, [r7, #24]
 801798a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801798e:	2b00      	cmp	r3, #0
 8017990:	d00b      	beq.n	80179aa <tcp_input+0x6fa>
 8017992:	69bb      	ldr	r3, [r7, #24]
 8017994:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017998:	69bb      	ldr	r3, [r7, #24]
 801799a:	6918      	ldr	r0, [r3, #16]
 801799c:	2300      	movs	r3, #0
 801799e:	2200      	movs	r2, #0
 80179a0:	69b9      	ldr	r1, [r7, #24]
 80179a2:	47a0      	blx	r4
 80179a4:	4603      	mov	r3, r0
 80179a6:	74fb      	strb	r3, [r7, #19]
 80179a8:	e001      	b.n	80179ae <tcp_input+0x6fe>
 80179aa:	2300      	movs	r3, #0
 80179ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80179ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80179b2:	f113 0f0d 	cmn.w	r3, #13
 80179b6:	d016      	beq.n	80179e6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80179b8:	4b33      	ldr	r3, [pc, #204]	; (8017a88 <tcp_input+0x7d8>)
 80179ba:	2200      	movs	r2, #0
 80179bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80179be:	69b8      	ldr	r0, [r7, #24]
 80179c0:	f000 f880 	bl	8017ac4 <tcp_input_delayed_close>
 80179c4:	4603      	mov	r3, r0
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d10f      	bne.n	80179ea <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80179ca:	69b8      	ldr	r0, [r7, #24]
 80179cc:	f002 ff70 	bl	801a8b0 <tcp_output>
 80179d0:	e00c      	b.n	80179ec <tcp_input+0x73c>
        goto aborted;
 80179d2:	bf00      	nop
 80179d4:	e00a      	b.n	80179ec <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80179d6:	bf00      	nop
 80179d8:	e008      	b.n	80179ec <tcp_input+0x73c>
              goto aborted;
 80179da:	bf00      	nop
 80179dc:	e006      	b.n	80179ec <tcp_input+0x73c>
          goto aborted;
 80179de:	bf00      	nop
 80179e0:	e004      	b.n	80179ec <tcp_input+0x73c>
            goto aborted;
 80179e2:	bf00      	nop
 80179e4:	e002      	b.n	80179ec <tcp_input+0x73c>
              goto aborted;
 80179e6:	bf00      	nop
 80179e8:	e000      	b.n	80179ec <tcp_input+0x73c>
          goto aborted;
 80179ea:	bf00      	nop
    tcp_input_pcb = NULL;
 80179ec:	4b26      	ldr	r3, [pc, #152]	; (8017a88 <tcp_input+0x7d8>)
 80179ee:	2200      	movs	r2, #0
 80179f0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80179f2:	4b29      	ldr	r3, [pc, #164]	; (8017a98 <tcp_input+0x7e8>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80179f8:	4b2b      	ldr	r3, [pc, #172]	; (8017aa8 <tcp_input+0x7f8>)
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d03f      	beq.n	8017a80 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8017a00:	4b29      	ldr	r3, [pc, #164]	; (8017aa8 <tcp_input+0x7f8>)
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7fd f8a9 	bl	8014b5c <pbuf_free>
      inseg.p = NULL;
 8017a0a:	4b27      	ldr	r3, [pc, #156]	; (8017aa8 <tcp_input+0x7f8>)
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017a10:	e036      	b.n	8017a80 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017a12:	4b26      	ldr	r3, [pc, #152]	; (8017aac <tcp_input+0x7fc>)
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	899b      	ldrh	r3, [r3, #12]
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7fa fcde 	bl	80123dc <lwip_htons>
 8017a20:	4603      	mov	r3, r0
 8017a22:	b2db      	uxtb	r3, r3
 8017a24:	f003 0304 	and.w	r3, r3, #4
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d118      	bne.n	8017a5e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a2c:	4b20      	ldr	r3, [pc, #128]	; (8017ab0 <tcp_input+0x800>)
 8017a2e:	6819      	ldr	r1, [r3, #0]
 8017a30:	4b20      	ldr	r3, [pc, #128]	; (8017ab4 <tcp_input+0x804>)
 8017a32:	881b      	ldrh	r3, [r3, #0]
 8017a34:	461a      	mov	r2, r3
 8017a36:	4b20      	ldr	r3, [pc, #128]	; (8017ab8 <tcp_input+0x808>)
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a3c:	4b1b      	ldr	r3, [pc, #108]	; (8017aac <tcp_input+0x7fc>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a40:	885b      	ldrh	r3, [r3, #2]
 8017a42:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a44:	4a19      	ldr	r2, [pc, #100]	; (8017aac <tcp_input+0x7fc>)
 8017a46:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a48:	8812      	ldrh	r2, [r2, #0]
 8017a4a:	b292      	uxth	r2, r2
 8017a4c:	9202      	str	r2, [sp, #8]
 8017a4e:	9301      	str	r3, [sp, #4]
 8017a50:	4b1a      	ldr	r3, [pc, #104]	; (8017abc <tcp_input+0x80c>)
 8017a52:	9300      	str	r3, [sp, #0]
 8017a54:	4b1a      	ldr	r3, [pc, #104]	; (8017ac0 <tcp_input+0x810>)
 8017a56:	4602      	mov	r2, r0
 8017a58:	2000      	movs	r0, #0
 8017a5a:	f003 fce9 	bl	801b430 <tcp_rst>
    pbuf_free(p);
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f7fd f87c 	bl	8014b5c <pbuf_free>
  return;
 8017a64:	e00c      	b.n	8017a80 <tcp_input+0x7d0>
    goto dropped;
 8017a66:	bf00      	nop
 8017a68:	e006      	b.n	8017a78 <tcp_input+0x7c8>
    goto dropped;
 8017a6a:	bf00      	nop
 8017a6c:	e004      	b.n	8017a78 <tcp_input+0x7c8>
    goto dropped;
 8017a6e:	bf00      	nop
 8017a70:	e002      	b.n	8017a78 <tcp_input+0x7c8>
      goto dropped;
 8017a72:	bf00      	nop
 8017a74:	e000      	b.n	8017a78 <tcp_input+0x7c8>
      goto dropped;
 8017a76:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7fd f86f 	bl	8014b5c <pbuf_free>
 8017a7e:	e000      	b.n	8017a82 <tcp_input+0x7d2>
  return;
 8017a80:	bf00      	nop
}
 8017a82:	3724      	adds	r7, #36	; 0x24
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd90      	pop	{r4, r7, pc}
 8017a88:	2001b1b0 	.word	0x2001b1b0
 8017a8c:	200143b1 	.word	0x200143b1
 8017a90:	2001b19c 	.word	0x2001b19c
 8017a94:	200143ac 	.word	0x200143ac
 8017a98:	200143b4 	.word	0x200143b4
 8017a9c:	08027c44 	.word	0x08027c44
 8017aa0:	08027df8 	.word	0x08027df8
 8017aa4:	08027c90 	.word	0x08027c90
 8017aa8:	20014380 	.word	0x20014380
 8017aac:	20014394 	.word	0x20014394
 8017ab0:	200143a8 	.word	0x200143a8
 8017ab4:	200143ae 	.word	0x200143ae
 8017ab8:	200143a4 	.word	0x200143a4
 8017abc:	200177b8 	.word	0x200177b8
 8017ac0:	200177bc 	.word	0x200177bc

08017ac4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d106      	bne.n	8017ae0 <tcp_input_delayed_close+0x1c>
 8017ad2:	4b17      	ldr	r3, [pc, #92]	; (8017b30 <tcp_input_delayed_close+0x6c>)
 8017ad4:	f240 225a 	movw	r2, #602	; 0x25a
 8017ad8:	4916      	ldr	r1, [pc, #88]	; (8017b34 <tcp_input_delayed_close+0x70>)
 8017ada:	4817      	ldr	r0, [pc, #92]	; (8017b38 <tcp_input_delayed_close+0x74>)
 8017adc:	f00a f8e6 	bl	8021cac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017ae0:	4b16      	ldr	r3, [pc, #88]	; (8017b3c <tcp_input_delayed_close+0x78>)
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	f003 0310 	and.w	r3, r3, #16
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d01c      	beq.n	8017b26 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	8b5b      	ldrh	r3, [r3, #26]
 8017af0:	f003 0310 	and.w	r3, r3, #16
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d10d      	bne.n	8017b14 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d008      	beq.n	8017b14 <tcp_input_delayed_close+0x50>
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b08:	687a      	ldr	r2, [r7, #4]
 8017b0a:	6912      	ldr	r2, [r2, #16]
 8017b0c:	f06f 010e 	mvn.w	r1, #14
 8017b10:	4610      	mov	r0, r2
 8017b12:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017b14:	6879      	ldr	r1, [r7, #4]
 8017b16:	480a      	ldr	r0, [pc, #40]	; (8017b40 <tcp_input_delayed_close+0x7c>)
 8017b18:	f7ff fa52 	bl	8016fc0 <tcp_pcb_remove>
    tcp_free(pcb);
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f7fd fc55 	bl	80153cc <tcp_free>
    return 1;
 8017b22:	2301      	movs	r3, #1
 8017b24:	e000      	b.n	8017b28 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017b26:	2300      	movs	r3, #0
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	08027c44 	.word	0x08027c44
 8017b34:	08027e14 	.word	0x08027e14
 8017b38:	08027c90 	.word	0x08027c90
 8017b3c:	200143b1 	.word	0x200143b1
 8017b40:	2001b19c 	.word	0x2001b19c

08017b44 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017b44:	b590      	push	{r4, r7, lr}
 8017b46:	b08b      	sub	sp, #44	; 0x2c
 8017b48:	af04      	add	r7, sp, #16
 8017b4a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017b4c:	4b6f      	ldr	r3, [pc, #444]	; (8017d0c <tcp_listen_input+0x1c8>)
 8017b4e:	781b      	ldrb	r3, [r3, #0]
 8017b50:	f003 0304 	and.w	r3, r3, #4
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	f040 80d2 	bne.w	8017cfe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d106      	bne.n	8017b6e <tcp_listen_input+0x2a>
 8017b60:	4b6b      	ldr	r3, [pc, #428]	; (8017d10 <tcp_listen_input+0x1cc>)
 8017b62:	f240 2281 	movw	r2, #641	; 0x281
 8017b66:	496b      	ldr	r1, [pc, #428]	; (8017d14 <tcp_listen_input+0x1d0>)
 8017b68:	486b      	ldr	r0, [pc, #428]	; (8017d18 <tcp_listen_input+0x1d4>)
 8017b6a:	f00a f89f 	bl	8021cac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017b6e:	4b67      	ldr	r3, [pc, #412]	; (8017d0c <tcp_listen_input+0x1c8>)
 8017b70:	781b      	ldrb	r3, [r3, #0]
 8017b72:	f003 0310 	and.w	r3, r3, #16
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d019      	beq.n	8017bae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b7a:	4b68      	ldr	r3, [pc, #416]	; (8017d1c <tcp_listen_input+0x1d8>)
 8017b7c:	6819      	ldr	r1, [r3, #0]
 8017b7e:	4b68      	ldr	r3, [pc, #416]	; (8017d20 <tcp_listen_input+0x1dc>)
 8017b80:	881b      	ldrh	r3, [r3, #0]
 8017b82:	461a      	mov	r2, r3
 8017b84:	4b67      	ldr	r3, [pc, #412]	; (8017d24 <tcp_listen_input+0x1e0>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b8a:	4b67      	ldr	r3, [pc, #412]	; (8017d28 <tcp_listen_input+0x1e4>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b8e:	885b      	ldrh	r3, [r3, #2]
 8017b90:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b92:	4a65      	ldr	r2, [pc, #404]	; (8017d28 <tcp_listen_input+0x1e4>)
 8017b94:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b96:	8812      	ldrh	r2, [r2, #0]
 8017b98:	b292      	uxth	r2, r2
 8017b9a:	9202      	str	r2, [sp, #8]
 8017b9c:	9301      	str	r3, [sp, #4]
 8017b9e:	4b63      	ldr	r3, [pc, #396]	; (8017d2c <tcp_listen_input+0x1e8>)
 8017ba0:	9300      	str	r3, [sp, #0]
 8017ba2:	4b63      	ldr	r3, [pc, #396]	; (8017d30 <tcp_listen_input+0x1ec>)
 8017ba4:	4602      	mov	r2, r0
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f003 fc42 	bl	801b430 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017bac:	e0a9      	b.n	8017d02 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017bae:	4b57      	ldr	r3, [pc, #348]	; (8017d0c <tcp_listen_input+0x1c8>)
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	f003 0302 	and.w	r3, r3, #2
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	f000 80a3 	beq.w	8017d02 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	7d5b      	ldrb	r3, [r3, #21]
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7ff f85b 	bl	8016c7c <tcp_alloc>
 8017bc6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d111      	bne.n	8017bf2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	699b      	ldr	r3, [r3, #24]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d00a      	beq.n	8017bec <tcp_listen_input+0xa8>
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	699b      	ldr	r3, [r3, #24]
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	6910      	ldr	r0, [r2, #16]
 8017bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017be2:	2100      	movs	r1, #0
 8017be4:	4798      	blx	r3
 8017be6:	4603      	mov	r3, r0
 8017be8:	73bb      	strb	r3, [r7, #14]
      return;
 8017bea:	e08b      	b.n	8017d04 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017bec:	23f0      	movs	r3, #240	; 0xf0
 8017bee:	73bb      	strb	r3, [r7, #14]
      return;
 8017bf0:	e088      	b.n	8017d04 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017bf2:	4b50      	ldr	r3, [pc, #320]	; (8017d34 <tcp_listen_input+0x1f0>)
 8017bf4:	695a      	ldr	r2, [r3, #20]
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017bfa:	4b4e      	ldr	r3, [pc, #312]	; (8017d34 <tcp_listen_input+0x1f0>)
 8017bfc:	691a      	ldr	r2, [r3, #16]
 8017bfe:	697b      	ldr	r3, [r7, #20]
 8017c00:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	8ada      	ldrh	r2, [r3, #22]
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017c0a:	4b47      	ldr	r3, [pc, #284]	; (8017d28 <tcp_listen_input+0x1e4>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	881b      	ldrh	r3, [r3, #0]
 8017c10:	b29a      	uxth	r2, r3
 8017c12:	697b      	ldr	r3, [r7, #20]
 8017c14:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	2203      	movs	r2, #3
 8017c1a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017c1c:	4b41      	ldr	r3, [pc, #260]	; (8017d24 <tcp_listen_input+0x1e0>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	1c5a      	adds	r2, r3, #1
 8017c22:	697b      	ldr	r3, [r7, #20]
 8017c24:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017c26:	697b      	ldr	r3, [r7, #20]
 8017c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017c2e:	6978      	ldr	r0, [r7, #20]
 8017c30:	f7ff fa5a 	bl	80170e8 <tcp_next_iss>
 8017c34:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	693a      	ldr	r2, [r7, #16]
 8017c3a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	693a      	ldr	r2, [r7, #16]
 8017c40:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	693a      	ldr	r2, [r7, #16]
 8017c46:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	693a      	ldr	r2, [r7, #16]
 8017c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017c4e:	4b35      	ldr	r3, [pc, #212]	; (8017d24 <tcp_listen_input+0x1e0>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	1e5a      	subs	r2, r3, #1
 8017c54:	697b      	ldr	r3, [r7, #20]
 8017c56:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	691a      	ldr	r2, [r3, #16]
 8017c5c:	697b      	ldr	r3, [r7, #20]
 8017c5e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	687a      	ldr	r2, [r7, #4]
 8017c64:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	7a5b      	ldrb	r3, [r3, #9]
 8017c6a:	f003 030c 	and.w	r3, r3, #12
 8017c6e:	b2da      	uxtb	r2, r3
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	7a1a      	ldrb	r2, [r3, #8]
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017c7c:	4b2e      	ldr	r3, [pc, #184]	; (8017d38 <tcp_listen_input+0x1f4>)
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	60da      	str	r2, [r3, #12]
 8017c84:	4a2c      	ldr	r2, [pc, #176]	; (8017d38 <tcp_listen_input+0x1f4>)
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	6013      	str	r3, [r2, #0]
 8017c8a:	f003 fd93 	bl	801b7b4 <tcp_timer_needed>
 8017c8e:	4b2b      	ldr	r3, [pc, #172]	; (8017d3c <tcp_listen_input+0x1f8>)
 8017c90:	2201      	movs	r2, #1
 8017c92:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017c94:	6978      	ldr	r0, [r7, #20]
 8017c96:	f001 fd8d 	bl	80197b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017c9a:	4b23      	ldr	r3, [pc, #140]	; (8017d28 <tcp_listen_input+0x1e4>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	89db      	ldrh	r3, [r3, #14]
 8017ca0:	b29a      	uxth	r2, r3
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	3304      	adds	r3, #4
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f007 fc75 	bl	801f5ac <ip4_route>
 8017cc2:	4601      	mov	r1, r0
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	3304      	adds	r3, #4
 8017cc8:	461a      	mov	r2, r3
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f7ff fa32 	bl	8017134 <tcp_eff_send_mss_netif>
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	461a      	mov	r2, r3
 8017cd4:	697b      	ldr	r3, [r7, #20]
 8017cd6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017cd8:	2112      	movs	r1, #18
 8017cda:	6978      	ldr	r0, [r7, #20]
 8017cdc:	f002 fcfa 	bl	801a6d4 <tcp_enqueue_flags>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d004      	beq.n	8017cf6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017cec:	2100      	movs	r1, #0
 8017cee:	6978      	ldr	r0, [r7, #20]
 8017cf0:	f7fd fdf2 	bl	80158d8 <tcp_abandon>
      return;
 8017cf4:	e006      	b.n	8017d04 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017cf6:	6978      	ldr	r0, [r7, #20]
 8017cf8:	f002 fdda 	bl	801a8b0 <tcp_output>
  return;
 8017cfc:	e001      	b.n	8017d02 <tcp_listen_input+0x1be>
    return;
 8017cfe:	bf00      	nop
 8017d00:	e000      	b.n	8017d04 <tcp_listen_input+0x1c0>
  return;
 8017d02:	bf00      	nop
}
 8017d04:	371c      	adds	r7, #28
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd90      	pop	{r4, r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	200143b0 	.word	0x200143b0
 8017d10:	08027c44 	.word	0x08027c44
 8017d14:	08027e3c 	.word	0x08027e3c
 8017d18:	08027c90 	.word	0x08027c90
 8017d1c:	200143a8 	.word	0x200143a8
 8017d20:	200143ae 	.word	0x200143ae
 8017d24:	200143a4 	.word	0x200143a4
 8017d28:	20014394 	.word	0x20014394
 8017d2c:	200177b8 	.word	0x200177b8
 8017d30:	200177bc 	.word	0x200177bc
 8017d34:	200177a8 	.word	0x200177a8
 8017d38:	2001b19c 	.word	0x2001b19c
 8017d3c:	2001b198 	.word	0x2001b198

08017d40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b086      	sub	sp, #24
 8017d44:	af04      	add	r7, sp, #16
 8017d46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017d48:	4b2f      	ldr	r3, [pc, #188]	; (8017e08 <tcp_timewait_input+0xc8>)
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	f003 0304 	and.w	r3, r3, #4
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d153      	bne.n	8017dfc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d106      	bne.n	8017d68 <tcp_timewait_input+0x28>
 8017d5a:	4b2c      	ldr	r3, [pc, #176]	; (8017e0c <tcp_timewait_input+0xcc>)
 8017d5c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017d60:	492b      	ldr	r1, [pc, #172]	; (8017e10 <tcp_timewait_input+0xd0>)
 8017d62:	482c      	ldr	r0, [pc, #176]	; (8017e14 <tcp_timewait_input+0xd4>)
 8017d64:	f009 ffa2 	bl	8021cac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017d68:	4b27      	ldr	r3, [pc, #156]	; (8017e08 <tcp_timewait_input+0xc8>)
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	f003 0302 	and.w	r3, r3, #2
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d02a      	beq.n	8017dca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017d74:	4b28      	ldr	r3, [pc, #160]	; (8017e18 <tcp_timewait_input+0xd8>)
 8017d76:	681a      	ldr	r2, [r3, #0]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d7c:	1ad3      	subs	r3, r2, r3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	db2d      	blt.n	8017dde <tcp_timewait_input+0x9e>
 8017d82:	4b25      	ldr	r3, [pc, #148]	; (8017e18 <tcp_timewait_input+0xd8>)
 8017d84:	681a      	ldr	r2, [r3, #0]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d8a:	6879      	ldr	r1, [r7, #4]
 8017d8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017d8e:	440b      	add	r3, r1
 8017d90:	1ad3      	subs	r3, r2, r3
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	dc23      	bgt.n	8017dde <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d96:	4b21      	ldr	r3, [pc, #132]	; (8017e1c <tcp_timewait_input+0xdc>)
 8017d98:	6819      	ldr	r1, [r3, #0]
 8017d9a:	4b21      	ldr	r3, [pc, #132]	; (8017e20 <tcp_timewait_input+0xe0>)
 8017d9c:	881b      	ldrh	r3, [r3, #0]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	4b1d      	ldr	r3, [pc, #116]	; (8017e18 <tcp_timewait_input+0xd8>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017da6:	4b1f      	ldr	r3, [pc, #124]	; (8017e24 <tcp_timewait_input+0xe4>)
 8017da8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017daa:	885b      	ldrh	r3, [r3, #2]
 8017dac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017dae:	4a1d      	ldr	r2, [pc, #116]	; (8017e24 <tcp_timewait_input+0xe4>)
 8017db0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017db2:	8812      	ldrh	r2, [r2, #0]
 8017db4:	b292      	uxth	r2, r2
 8017db6:	9202      	str	r2, [sp, #8]
 8017db8:	9301      	str	r3, [sp, #4]
 8017dba:	4b1b      	ldr	r3, [pc, #108]	; (8017e28 <tcp_timewait_input+0xe8>)
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	4b1b      	ldr	r3, [pc, #108]	; (8017e2c <tcp_timewait_input+0xec>)
 8017dc0:	4602      	mov	r2, r0
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f003 fb34 	bl	801b430 <tcp_rst>
      return;
 8017dc8:	e01b      	b.n	8017e02 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017dca:	4b0f      	ldr	r3, [pc, #60]	; (8017e08 <tcp_timewait_input+0xc8>)
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	f003 0301 	and.w	r3, r3, #1
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d003      	beq.n	8017dde <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017dd6:	4b16      	ldr	r3, [pc, #88]	; (8017e30 <tcp_timewait_input+0xf0>)
 8017dd8:	681a      	ldr	r2, [r3, #0]
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017dde:	4b10      	ldr	r3, [pc, #64]	; (8017e20 <tcp_timewait_input+0xe0>)
 8017de0:	881b      	ldrh	r3, [r3, #0]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d00c      	beq.n	8017e00 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	8b5b      	ldrh	r3, [r3, #26]
 8017dea:	f043 0302 	orr.w	r3, r3, #2
 8017dee:	b29a      	uxth	r2, r3
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f002 fd5b 	bl	801a8b0 <tcp_output>
  }
  return;
 8017dfa:	e001      	b.n	8017e00 <tcp_timewait_input+0xc0>
    return;
 8017dfc:	bf00      	nop
 8017dfe:	e000      	b.n	8017e02 <tcp_timewait_input+0xc2>
  return;
 8017e00:	bf00      	nop
}
 8017e02:	3708      	adds	r7, #8
 8017e04:	46bd      	mov	sp, r7
 8017e06:	bd80      	pop	{r7, pc}
 8017e08:	200143b0 	.word	0x200143b0
 8017e0c:	08027c44 	.word	0x08027c44
 8017e10:	08027e5c 	.word	0x08027e5c
 8017e14:	08027c90 	.word	0x08027c90
 8017e18:	200143a4 	.word	0x200143a4
 8017e1c:	200143a8 	.word	0x200143a8
 8017e20:	200143ae 	.word	0x200143ae
 8017e24:	20014394 	.word	0x20014394
 8017e28:	200177b8 	.word	0x200177b8
 8017e2c:	200177bc 	.word	0x200177bc
 8017e30:	2001b1a0 	.word	0x2001b1a0

08017e34 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017e34:	b590      	push	{r4, r7, lr}
 8017e36:	b08d      	sub	sp, #52	; 0x34
 8017e38:	af04      	add	r7, sp, #16
 8017e3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8017e40:	2300      	movs	r3, #0
 8017e42:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d106      	bne.n	8017e58 <tcp_process+0x24>
 8017e4a:	4ba5      	ldr	r3, [pc, #660]	; (80180e0 <tcp_process+0x2ac>)
 8017e4c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017e50:	49a4      	ldr	r1, [pc, #656]	; (80180e4 <tcp_process+0x2b0>)
 8017e52:	48a5      	ldr	r0, [pc, #660]	; (80180e8 <tcp_process+0x2b4>)
 8017e54:	f009 ff2a 	bl	8021cac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017e58:	4ba4      	ldr	r3, [pc, #656]	; (80180ec <tcp_process+0x2b8>)
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	f003 0304 	and.w	r3, r3, #4
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d04e      	beq.n	8017f02 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	7d1b      	ldrb	r3, [r3, #20]
 8017e68:	2b02      	cmp	r3, #2
 8017e6a:	d108      	bne.n	8017e7e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017e70:	4b9f      	ldr	r3, [pc, #636]	; (80180f0 <tcp_process+0x2bc>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d123      	bne.n	8017ec0 <tcp_process+0x8c>
        acceptable = 1;
 8017e78:	2301      	movs	r3, #1
 8017e7a:	77fb      	strb	r3, [r7, #31]
 8017e7c:	e020      	b.n	8017ec0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e82:	4b9c      	ldr	r3, [pc, #624]	; (80180f4 <tcp_process+0x2c0>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d102      	bne.n	8017e90 <tcp_process+0x5c>
        acceptable = 1;
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	77fb      	strb	r3, [r7, #31]
 8017e8e:	e017      	b.n	8017ec0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017e90:	4b98      	ldr	r3, [pc, #608]	; (80180f4 <tcp_process+0x2c0>)
 8017e92:	681a      	ldr	r2, [r3, #0]
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e98:	1ad3      	subs	r3, r2, r3
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	db10      	blt.n	8017ec0 <tcp_process+0x8c>
 8017e9e:	4b95      	ldr	r3, [pc, #596]	; (80180f4 <tcp_process+0x2c0>)
 8017ea0:	681a      	ldr	r2, [r3, #0]
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ea6:	6879      	ldr	r1, [r7, #4]
 8017ea8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017eaa:	440b      	add	r3, r1
 8017eac:	1ad3      	subs	r3, r2, r3
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	dc06      	bgt.n	8017ec0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	8b5b      	ldrh	r3, [r3, #26]
 8017eb6:	f043 0302 	orr.w	r3, r3, #2
 8017eba:	b29a      	uxth	r2, r3
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017ec0:	7ffb      	ldrb	r3, [r7, #31]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d01b      	beq.n	8017efe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	7d1b      	ldrb	r3, [r3, #20]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d106      	bne.n	8017edc <tcp_process+0xa8>
 8017ece:	4b84      	ldr	r3, [pc, #528]	; (80180e0 <tcp_process+0x2ac>)
 8017ed0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017ed4:	4988      	ldr	r1, [pc, #544]	; (80180f8 <tcp_process+0x2c4>)
 8017ed6:	4884      	ldr	r0, [pc, #528]	; (80180e8 <tcp_process+0x2b4>)
 8017ed8:	f009 fee8 	bl	8021cac <iprintf>
      recv_flags |= TF_RESET;
 8017edc:	4b87      	ldr	r3, [pc, #540]	; (80180fc <tcp_process+0x2c8>)
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	f043 0308 	orr.w	r3, r3, #8
 8017ee4:	b2da      	uxtb	r2, r3
 8017ee6:	4b85      	ldr	r3, [pc, #532]	; (80180fc <tcp_process+0x2c8>)
 8017ee8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	8b5b      	ldrh	r3, [r3, #26]
 8017eee:	f023 0301 	bic.w	r3, r3, #1
 8017ef2:	b29a      	uxth	r2, r3
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017ef8:	f06f 030d 	mvn.w	r3, #13
 8017efc:	e37a      	b.n	80185f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017efe:	2300      	movs	r3, #0
 8017f00:	e378      	b.n	80185f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017f02:	4b7a      	ldr	r3, [pc, #488]	; (80180ec <tcp_process+0x2b8>)
 8017f04:	781b      	ldrb	r3, [r3, #0]
 8017f06:	f003 0302 	and.w	r3, r3, #2
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d010      	beq.n	8017f30 <tcp_process+0xfc>
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	7d1b      	ldrb	r3, [r3, #20]
 8017f12:	2b02      	cmp	r3, #2
 8017f14:	d00c      	beq.n	8017f30 <tcp_process+0xfc>
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	7d1b      	ldrb	r3, [r3, #20]
 8017f1a:	2b03      	cmp	r3, #3
 8017f1c:	d008      	beq.n	8017f30 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	8b5b      	ldrh	r3, [r3, #26]
 8017f22:	f043 0302 	orr.w	r3, r3, #2
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	e361      	b.n	80185f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	8b5b      	ldrh	r3, [r3, #26]
 8017f34:	f003 0310 	and.w	r3, r3, #16
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d103      	bne.n	8017f44 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017f3c:	4b70      	ldr	r3, [pc, #448]	; (8018100 <tcp_process+0x2cc>)
 8017f3e:	681a      	ldr	r2, [r3, #0]
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2200      	movs	r2, #0
 8017f48:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f001 fc2d 	bl	80197b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	7d1b      	ldrb	r3, [r3, #20]
 8017f5e:	3b02      	subs	r3, #2
 8017f60:	2b07      	cmp	r3, #7
 8017f62:	f200 8337 	bhi.w	80185d4 <tcp_process+0x7a0>
 8017f66:	a201      	add	r2, pc, #4	; (adr r2, 8017f6c <tcp_process+0x138>)
 8017f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f6c:	08017f8d 	.word	0x08017f8d
 8017f70:	080181bd 	.word	0x080181bd
 8017f74:	08018335 	.word	0x08018335
 8017f78:	0801835f 	.word	0x0801835f
 8017f7c:	08018483 	.word	0x08018483
 8017f80:	08018335 	.word	0x08018335
 8017f84:	0801850f 	.word	0x0801850f
 8017f88:	0801859f 	.word	0x0801859f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017f8c:	4b57      	ldr	r3, [pc, #348]	; (80180ec <tcp_process+0x2b8>)
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	f003 0310 	and.w	r3, r3, #16
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f000 80e4 	beq.w	8018162 <tcp_process+0x32e>
 8017f9a:	4b54      	ldr	r3, [pc, #336]	; (80180ec <tcp_process+0x2b8>)
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	f003 0302 	and.w	r3, r3, #2
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	f000 80dd 	beq.w	8018162 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fac:	1c5a      	adds	r2, r3, #1
 8017fae:	4b50      	ldr	r3, [pc, #320]	; (80180f0 <tcp_process+0x2bc>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	f040 80d5 	bne.w	8018162 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017fb8:	4b4e      	ldr	r3, [pc, #312]	; (80180f4 <tcp_process+0x2c0>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	1c5a      	adds	r2, r3, #1
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017fca:	4b49      	ldr	r3, [pc, #292]	; (80180f0 <tcp_process+0x2bc>)
 8017fcc:	681a      	ldr	r2, [r3, #0]
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017fd2:	4b4c      	ldr	r3, [pc, #304]	; (8018104 <tcp_process+0x2d0>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	89db      	ldrh	r3, [r3, #14]
 8017fd8:	b29a      	uxth	r2, r3
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017fec:	4b41      	ldr	r3, [pc, #260]	; (80180f4 <tcp_process+0x2c0>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	1e5a      	subs	r2, r3, #1
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2204      	movs	r2, #4
 8017ffa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	3304      	adds	r3, #4
 8018004:	4618      	mov	r0, r3
 8018006:	f007 fad1 	bl	801f5ac <ip4_route>
 801800a:	4601      	mov	r1, r0
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	3304      	adds	r3, #4
 8018010:	461a      	mov	r2, r3
 8018012:	4620      	mov	r0, r4
 8018014:	f7ff f88e 	bl	8017134 <tcp_eff_send_mss_netif>
 8018018:	4603      	mov	r3, r0
 801801a:	461a      	mov	r2, r3
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018024:	009a      	lsls	r2, r3, #2
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801802a:	005b      	lsls	r3, r3, #1
 801802c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018030:	428b      	cmp	r3, r1
 8018032:	bf38      	it	cc
 8018034:	460b      	movcc	r3, r1
 8018036:	429a      	cmp	r2, r3
 8018038:	d204      	bcs.n	8018044 <tcp_process+0x210>
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801803e:	009b      	lsls	r3, r3, #2
 8018040:	b29b      	uxth	r3, r3
 8018042:	e00d      	b.n	8018060 <tcp_process+0x22c>
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018048:	005b      	lsls	r3, r3, #1
 801804a:	f241 121c 	movw	r2, #4380	; 0x111c
 801804e:	4293      	cmp	r3, r2
 8018050:	d904      	bls.n	801805c <tcp_process+0x228>
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018056:	005b      	lsls	r3, r3, #1
 8018058:	b29b      	uxth	r3, r3
 801805a:	e001      	b.n	8018060 <tcp_process+0x22c>
 801805c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018060:	687a      	ldr	r2, [r7, #4]
 8018062:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801806c:	2b00      	cmp	r3, #0
 801806e:	d106      	bne.n	801807e <tcp_process+0x24a>
 8018070:	4b1b      	ldr	r3, [pc, #108]	; (80180e0 <tcp_process+0x2ac>)
 8018072:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018076:	4924      	ldr	r1, [pc, #144]	; (8018108 <tcp_process+0x2d4>)
 8018078:	481b      	ldr	r0, [pc, #108]	; (80180e8 <tcp_process+0x2b4>)
 801807a:	f009 fe17 	bl	8021cac <iprintf>
        --pcb->snd_queuelen;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018084:	3b01      	subs	r3, #1
 8018086:	b29a      	uxth	r2, r3
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018092:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8018094:	697b      	ldr	r3, [r7, #20]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d111      	bne.n	80180be <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801809e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80180a0:	697b      	ldr	r3, [r7, #20]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d106      	bne.n	80180b4 <tcp_process+0x280>
 80180a6:	4b0e      	ldr	r3, [pc, #56]	; (80180e0 <tcp_process+0x2ac>)
 80180a8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80180ac:	4917      	ldr	r1, [pc, #92]	; (801810c <tcp_process+0x2d8>)
 80180ae:	480e      	ldr	r0, [pc, #56]	; (80180e8 <tcp_process+0x2b4>)
 80180b0:	f009 fdfc 	bl	8021cac <iprintf>
          pcb->unsent = rseg->next;
 80180b4:	697b      	ldr	r3, [r7, #20]
 80180b6:	681a      	ldr	r2, [r3, #0]
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80180bc:	e003      	b.n	80180c6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80180be:	697b      	ldr	r3, [r7, #20]
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80180c6:	6978      	ldr	r0, [r7, #20]
 80180c8:	f7fe fc6f 	bl	80169aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d11d      	bne.n	8018110 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180da:	861a      	strh	r2, [r3, #48]	; 0x30
 80180dc:	e01f      	b.n	801811e <tcp_process+0x2ea>
 80180de:	bf00      	nop
 80180e0:	08027c44 	.word	0x08027c44
 80180e4:	08027e7c 	.word	0x08027e7c
 80180e8:	08027c90 	.word	0x08027c90
 80180ec:	200143b0 	.word	0x200143b0
 80180f0:	200143a8 	.word	0x200143a8
 80180f4:	200143a4 	.word	0x200143a4
 80180f8:	08027e98 	.word	0x08027e98
 80180fc:	200143b1 	.word	0x200143b1
 8018100:	2001b1a0 	.word	0x2001b1a0
 8018104:	20014394 	.word	0x20014394
 8018108:	08027eb8 	.word	0x08027eb8
 801810c:	08027ed0 	.word	0x08027ed0
        } else {
          pcb->rtime = 0;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2200      	movs	r2, #0
 8018114:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	2200      	movs	r2, #0
 801811a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018124:	2b00      	cmp	r3, #0
 8018126:	d00a      	beq.n	801813e <tcp_process+0x30a>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	6910      	ldr	r0, [r2, #16]
 8018132:	2200      	movs	r2, #0
 8018134:	6879      	ldr	r1, [r7, #4]
 8018136:	4798      	blx	r3
 8018138:	4603      	mov	r3, r0
 801813a:	77bb      	strb	r3, [r7, #30]
 801813c:	e001      	b.n	8018142 <tcp_process+0x30e>
 801813e:	2300      	movs	r3, #0
 8018140:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8018142:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018146:	f113 0f0d 	cmn.w	r3, #13
 801814a:	d102      	bne.n	8018152 <tcp_process+0x31e>
          return ERR_ABRT;
 801814c:	f06f 030c 	mvn.w	r3, #12
 8018150:	e250      	b.n	80185f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	8b5b      	ldrh	r3, [r3, #26]
 8018156:	f043 0302 	orr.w	r3, r3, #2
 801815a:	b29a      	uxth	r2, r3
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018160:	e23a      	b.n	80185d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018162:	4b9d      	ldr	r3, [pc, #628]	; (80183d8 <tcp_process+0x5a4>)
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	f003 0310 	and.w	r3, r3, #16
 801816a:	2b00      	cmp	r3, #0
 801816c:	f000 8234 	beq.w	80185d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018170:	4b9a      	ldr	r3, [pc, #616]	; (80183dc <tcp_process+0x5a8>)
 8018172:	6819      	ldr	r1, [r3, #0]
 8018174:	4b9a      	ldr	r3, [pc, #616]	; (80183e0 <tcp_process+0x5ac>)
 8018176:	881b      	ldrh	r3, [r3, #0]
 8018178:	461a      	mov	r2, r3
 801817a:	4b9a      	ldr	r3, [pc, #616]	; (80183e4 <tcp_process+0x5b0>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018180:	4b99      	ldr	r3, [pc, #612]	; (80183e8 <tcp_process+0x5b4>)
 8018182:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018184:	885b      	ldrh	r3, [r3, #2]
 8018186:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018188:	4a97      	ldr	r2, [pc, #604]	; (80183e8 <tcp_process+0x5b4>)
 801818a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801818c:	8812      	ldrh	r2, [r2, #0]
 801818e:	b292      	uxth	r2, r2
 8018190:	9202      	str	r2, [sp, #8]
 8018192:	9301      	str	r3, [sp, #4]
 8018194:	4b95      	ldr	r3, [pc, #596]	; (80183ec <tcp_process+0x5b8>)
 8018196:	9300      	str	r3, [sp, #0]
 8018198:	4b95      	ldr	r3, [pc, #596]	; (80183f0 <tcp_process+0x5bc>)
 801819a:	4602      	mov	r2, r0
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f003 f947 	bl	801b430 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80181a8:	2b05      	cmp	r3, #5
 80181aa:	f200 8215 	bhi.w	80185d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2200      	movs	r2, #0
 80181b2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80181b4:	6878      	ldr	r0, [r7, #4]
 80181b6:	f002 ff11 	bl	801afdc <tcp_rexmit_rto>
      break;
 80181ba:	e20d      	b.n	80185d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80181bc:	4b86      	ldr	r3, [pc, #536]	; (80183d8 <tcp_process+0x5a4>)
 80181be:	781b      	ldrb	r3, [r3, #0]
 80181c0:	f003 0310 	and.w	r3, r3, #16
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	f000 80a1 	beq.w	801830c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80181ca:	4b84      	ldr	r3, [pc, #528]	; (80183dc <tcp_process+0x5a8>)
 80181cc:	681a      	ldr	r2, [r3, #0]
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181d2:	1ad3      	subs	r3, r2, r3
 80181d4:	3b01      	subs	r3, #1
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	db7e      	blt.n	80182d8 <tcp_process+0x4a4>
 80181da:	4b80      	ldr	r3, [pc, #512]	; (80183dc <tcp_process+0x5a8>)
 80181dc:	681a      	ldr	r2, [r3, #0]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181e2:	1ad3      	subs	r3, r2, r3
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	dc77      	bgt.n	80182d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2204      	movs	r2, #4
 80181ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d102      	bne.n	80181fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80181f6:	23fa      	movs	r3, #250	; 0xfa
 80181f8:	77bb      	strb	r3, [r7, #30]
 80181fa:	e01d      	b.n	8018238 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018200:	699b      	ldr	r3, [r3, #24]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d106      	bne.n	8018214 <tcp_process+0x3e0>
 8018206:	4b7b      	ldr	r3, [pc, #492]	; (80183f4 <tcp_process+0x5c0>)
 8018208:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801820c:	497a      	ldr	r1, [pc, #488]	; (80183f8 <tcp_process+0x5c4>)
 801820e:	487b      	ldr	r0, [pc, #492]	; (80183fc <tcp_process+0x5c8>)
 8018210:	f009 fd4c 	bl	8021cac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018218:	699b      	ldr	r3, [r3, #24]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d00a      	beq.n	8018234 <tcp_process+0x400>
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018222:	699b      	ldr	r3, [r3, #24]
 8018224:	687a      	ldr	r2, [r7, #4]
 8018226:	6910      	ldr	r0, [r2, #16]
 8018228:	2200      	movs	r2, #0
 801822a:	6879      	ldr	r1, [r7, #4]
 801822c:	4798      	blx	r3
 801822e:	4603      	mov	r3, r0
 8018230:	77bb      	strb	r3, [r7, #30]
 8018232:	e001      	b.n	8018238 <tcp_process+0x404>
 8018234:	23f0      	movs	r3, #240	; 0xf0
 8018236:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8018238:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d00a      	beq.n	8018256 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018240:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018244:	f113 0f0d 	cmn.w	r3, #13
 8018248:	d002      	beq.n	8018250 <tcp_process+0x41c>
              tcp_abort(pcb);
 801824a:	6878      	ldr	r0, [r7, #4]
 801824c:	f7fd fc02 	bl	8015a54 <tcp_abort>
            }
            return ERR_ABRT;
 8018250:	f06f 030c 	mvn.w	r3, #12
 8018254:	e1ce      	b.n	80185f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f000 fae0 	bl	801881c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801825c:	4b68      	ldr	r3, [pc, #416]	; (8018400 <tcp_process+0x5cc>)
 801825e:	881b      	ldrh	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d005      	beq.n	8018270 <tcp_process+0x43c>
            recv_acked--;
 8018264:	4b66      	ldr	r3, [pc, #408]	; (8018400 <tcp_process+0x5cc>)
 8018266:	881b      	ldrh	r3, [r3, #0]
 8018268:	3b01      	subs	r3, #1
 801826a:	b29a      	uxth	r2, r3
 801826c:	4b64      	ldr	r3, [pc, #400]	; (8018400 <tcp_process+0x5cc>)
 801826e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018274:	009a      	lsls	r2, r3, #2
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018280:	428b      	cmp	r3, r1
 8018282:	bf38      	it	cc
 8018284:	460b      	movcc	r3, r1
 8018286:	429a      	cmp	r2, r3
 8018288:	d204      	bcs.n	8018294 <tcp_process+0x460>
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801828e:	009b      	lsls	r3, r3, #2
 8018290:	b29b      	uxth	r3, r3
 8018292:	e00d      	b.n	80182b0 <tcp_process+0x47c>
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	f241 121c 	movw	r2, #4380	; 0x111c
 801829e:	4293      	cmp	r3, r2
 80182a0:	d904      	bls.n	80182ac <tcp_process+0x478>
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	e001      	b.n	80182b0 <tcp_process+0x47c>
 80182ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80182b0:	687a      	ldr	r2, [r7, #4]
 80182b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80182b6:	4b53      	ldr	r3, [pc, #332]	; (8018404 <tcp_process+0x5d0>)
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	f003 0320 	and.w	r3, r3, #32
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d037      	beq.n	8018332 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	8b5b      	ldrh	r3, [r3, #26]
 80182c6:	f043 0302 	orr.w	r3, r3, #2
 80182ca:	b29a      	uxth	r2, r3
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2207      	movs	r2, #7
 80182d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80182d6:	e02c      	b.n	8018332 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80182d8:	4b40      	ldr	r3, [pc, #256]	; (80183dc <tcp_process+0x5a8>)
 80182da:	6819      	ldr	r1, [r3, #0]
 80182dc:	4b40      	ldr	r3, [pc, #256]	; (80183e0 <tcp_process+0x5ac>)
 80182de:	881b      	ldrh	r3, [r3, #0]
 80182e0:	461a      	mov	r2, r3
 80182e2:	4b40      	ldr	r3, [pc, #256]	; (80183e4 <tcp_process+0x5b0>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80182e8:	4b3f      	ldr	r3, [pc, #252]	; (80183e8 <tcp_process+0x5b4>)
 80182ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80182ec:	885b      	ldrh	r3, [r3, #2]
 80182ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80182f0:	4a3d      	ldr	r2, [pc, #244]	; (80183e8 <tcp_process+0x5b4>)
 80182f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80182f4:	8812      	ldrh	r2, [r2, #0]
 80182f6:	b292      	uxth	r2, r2
 80182f8:	9202      	str	r2, [sp, #8]
 80182fa:	9301      	str	r3, [sp, #4]
 80182fc:	4b3b      	ldr	r3, [pc, #236]	; (80183ec <tcp_process+0x5b8>)
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	4b3b      	ldr	r3, [pc, #236]	; (80183f0 <tcp_process+0x5bc>)
 8018302:	4602      	mov	r2, r0
 8018304:	6878      	ldr	r0, [r7, #4]
 8018306:	f003 f893 	bl	801b430 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801830a:	e167      	b.n	80185dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801830c:	4b32      	ldr	r3, [pc, #200]	; (80183d8 <tcp_process+0x5a4>)
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	f003 0302 	and.w	r3, r3, #2
 8018314:	2b00      	cmp	r3, #0
 8018316:	f000 8161 	beq.w	80185dc <tcp_process+0x7a8>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801831e:	1e5a      	subs	r2, r3, #1
 8018320:	4b30      	ldr	r3, [pc, #192]	; (80183e4 <tcp_process+0x5b0>)
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	429a      	cmp	r2, r3
 8018326:	f040 8159 	bne.w	80185dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f002 fe78 	bl	801b020 <tcp_rexmit>
      break;
 8018330:	e154      	b.n	80185dc <tcp_process+0x7a8>
 8018332:	e153      	b.n	80185dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f000 fa71 	bl	801881c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801833a:	4b32      	ldr	r3, [pc, #200]	; (8018404 <tcp_process+0x5d0>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	f003 0320 	and.w	r3, r3, #32
 8018342:	2b00      	cmp	r3, #0
 8018344:	f000 814c 	beq.w	80185e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	8b5b      	ldrh	r3, [r3, #26]
 801834c:	f043 0302 	orr.w	r3, r3, #2
 8018350:	b29a      	uxth	r2, r3
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	2207      	movs	r2, #7
 801835a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801835c:	e140      	b.n	80185e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801835e:	6878      	ldr	r0, [r7, #4]
 8018360:	f000 fa5c 	bl	801881c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018364:	4b27      	ldr	r3, [pc, #156]	; (8018404 <tcp_process+0x5d0>)
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	f003 0320 	and.w	r3, r3, #32
 801836c:	2b00      	cmp	r3, #0
 801836e:	d071      	beq.n	8018454 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018370:	4b19      	ldr	r3, [pc, #100]	; (80183d8 <tcp_process+0x5a4>)
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	f003 0310 	and.w	r3, r3, #16
 8018378:	2b00      	cmp	r3, #0
 801837a:	d060      	beq.n	801843e <tcp_process+0x60a>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018380:	4b16      	ldr	r3, [pc, #88]	; (80183dc <tcp_process+0x5a8>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	429a      	cmp	r2, r3
 8018386:	d15a      	bne.n	801843e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801838c:	2b00      	cmp	r3, #0
 801838e:	d156      	bne.n	801843e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	8b5b      	ldrh	r3, [r3, #26]
 8018394:	f043 0302 	orr.w	r3, r3, #2
 8018398:	b29a      	uxth	r2, r3
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f7fe fdbe 	bl	8016f20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80183a4:	4b18      	ldr	r3, [pc, #96]	; (8018408 <tcp_process+0x5d4>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	687a      	ldr	r2, [r7, #4]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d105      	bne.n	80183ba <tcp_process+0x586>
 80183ae:	4b16      	ldr	r3, [pc, #88]	; (8018408 <tcp_process+0x5d4>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	68db      	ldr	r3, [r3, #12]
 80183b4:	4a14      	ldr	r2, [pc, #80]	; (8018408 <tcp_process+0x5d4>)
 80183b6:	6013      	str	r3, [r2, #0]
 80183b8:	e02e      	b.n	8018418 <tcp_process+0x5e4>
 80183ba:	4b13      	ldr	r3, [pc, #76]	; (8018408 <tcp_process+0x5d4>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	613b      	str	r3, [r7, #16]
 80183c0:	e027      	b.n	8018412 <tcp_process+0x5de>
 80183c2:	693b      	ldr	r3, [r7, #16]
 80183c4:	68db      	ldr	r3, [r3, #12]
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d11f      	bne.n	801840c <tcp_process+0x5d8>
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	68da      	ldr	r2, [r3, #12]
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	60da      	str	r2, [r3, #12]
 80183d4:	e020      	b.n	8018418 <tcp_process+0x5e4>
 80183d6:	bf00      	nop
 80183d8:	200143b0 	.word	0x200143b0
 80183dc:	200143a8 	.word	0x200143a8
 80183e0:	200143ae 	.word	0x200143ae
 80183e4:	200143a4 	.word	0x200143a4
 80183e8:	20014394 	.word	0x20014394
 80183ec:	200177b8 	.word	0x200177b8
 80183f0:	200177bc 	.word	0x200177bc
 80183f4:	08027c44 	.word	0x08027c44
 80183f8:	08027ee4 	.word	0x08027ee4
 80183fc:	08027c90 	.word	0x08027c90
 8018400:	200143ac 	.word	0x200143ac
 8018404:	200143b1 	.word	0x200143b1
 8018408:	2001b19c 	.word	0x2001b19c
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	68db      	ldr	r3, [r3, #12]
 8018410:	613b      	str	r3, [r7, #16]
 8018412:	693b      	ldr	r3, [r7, #16]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d1d4      	bne.n	80183c2 <tcp_process+0x58e>
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	2200      	movs	r2, #0
 801841c:	60da      	str	r2, [r3, #12]
 801841e:	4b77      	ldr	r3, [pc, #476]	; (80185fc <tcp_process+0x7c8>)
 8018420:	2201      	movs	r2, #1
 8018422:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	220a      	movs	r2, #10
 8018428:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801842a:	4b75      	ldr	r3, [pc, #468]	; (8018600 <tcp_process+0x7cc>)
 801842c:	681a      	ldr	r2, [r3, #0]
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	60da      	str	r2, [r3, #12]
 8018432:	4a73      	ldr	r2, [pc, #460]	; (8018600 <tcp_process+0x7cc>)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6013      	str	r3, [r2, #0]
 8018438:	f003 f9bc 	bl	801b7b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801843c:	e0d2      	b.n	80185e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	8b5b      	ldrh	r3, [r3, #26]
 8018442:	f043 0302 	orr.w	r3, r3, #2
 8018446:	b29a      	uxth	r2, r3
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2208      	movs	r2, #8
 8018450:	751a      	strb	r2, [r3, #20]
      break;
 8018452:	e0c7      	b.n	80185e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018454:	4b6b      	ldr	r3, [pc, #428]	; (8018604 <tcp_process+0x7d0>)
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	f003 0310 	and.w	r3, r3, #16
 801845c:	2b00      	cmp	r3, #0
 801845e:	f000 80c1 	beq.w	80185e4 <tcp_process+0x7b0>
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018466:	4b68      	ldr	r3, [pc, #416]	; (8018608 <tcp_process+0x7d4>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	429a      	cmp	r2, r3
 801846c:	f040 80ba 	bne.w	80185e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018474:	2b00      	cmp	r3, #0
 8018476:	f040 80b5 	bne.w	80185e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2206      	movs	r2, #6
 801847e:	751a      	strb	r2, [r3, #20]
      break;
 8018480:	e0b0      	b.n	80185e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f000 f9ca 	bl	801881c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018488:	4b60      	ldr	r3, [pc, #384]	; (801860c <tcp_process+0x7d8>)
 801848a:	781b      	ldrb	r3, [r3, #0]
 801848c:	f003 0320 	and.w	r3, r3, #32
 8018490:	2b00      	cmp	r3, #0
 8018492:	f000 80a9 	beq.w	80185e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	8b5b      	ldrh	r3, [r3, #26]
 801849a:	f043 0302 	orr.w	r3, r3, #2
 801849e:	b29a      	uxth	r2, r3
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80184a4:	6878      	ldr	r0, [r7, #4]
 80184a6:	f7fe fd3b 	bl	8016f20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80184aa:	4b59      	ldr	r3, [pc, #356]	; (8018610 <tcp_process+0x7dc>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	687a      	ldr	r2, [r7, #4]
 80184b0:	429a      	cmp	r2, r3
 80184b2:	d105      	bne.n	80184c0 <tcp_process+0x68c>
 80184b4:	4b56      	ldr	r3, [pc, #344]	; (8018610 <tcp_process+0x7dc>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	68db      	ldr	r3, [r3, #12]
 80184ba:	4a55      	ldr	r2, [pc, #340]	; (8018610 <tcp_process+0x7dc>)
 80184bc:	6013      	str	r3, [r2, #0]
 80184be:	e013      	b.n	80184e8 <tcp_process+0x6b4>
 80184c0:	4b53      	ldr	r3, [pc, #332]	; (8018610 <tcp_process+0x7dc>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	60fb      	str	r3, [r7, #12]
 80184c6:	e00c      	b.n	80184e2 <tcp_process+0x6ae>
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	68db      	ldr	r3, [r3, #12]
 80184cc:	687a      	ldr	r2, [r7, #4]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	d104      	bne.n	80184dc <tcp_process+0x6a8>
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	68da      	ldr	r2, [r3, #12]
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	60da      	str	r2, [r3, #12]
 80184da:	e005      	b.n	80184e8 <tcp_process+0x6b4>
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	68db      	ldr	r3, [r3, #12]
 80184e0:	60fb      	str	r3, [r7, #12]
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d1ef      	bne.n	80184c8 <tcp_process+0x694>
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	2200      	movs	r2, #0
 80184ec:	60da      	str	r2, [r3, #12]
 80184ee:	4b43      	ldr	r3, [pc, #268]	; (80185fc <tcp_process+0x7c8>)
 80184f0:	2201      	movs	r2, #1
 80184f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	220a      	movs	r2, #10
 80184f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80184fa:	4b41      	ldr	r3, [pc, #260]	; (8018600 <tcp_process+0x7cc>)
 80184fc:	681a      	ldr	r2, [r3, #0]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	60da      	str	r2, [r3, #12]
 8018502:	4a3f      	ldr	r2, [pc, #252]	; (8018600 <tcp_process+0x7cc>)
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6013      	str	r3, [r2, #0]
 8018508:	f003 f954 	bl	801b7b4 <tcp_timer_needed>
      }
      break;
 801850c:	e06c      	b.n	80185e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f000 f984 	bl	801881c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018514:	4b3b      	ldr	r3, [pc, #236]	; (8018604 <tcp_process+0x7d0>)
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	f003 0310 	and.w	r3, r3, #16
 801851c:	2b00      	cmp	r3, #0
 801851e:	d065      	beq.n	80185ec <tcp_process+0x7b8>
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018524:	4b38      	ldr	r3, [pc, #224]	; (8018608 <tcp_process+0x7d4>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	429a      	cmp	r2, r3
 801852a:	d15f      	bne.n	80185ec <tcp_process+0x7b8>
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018530:	2b00      	cmp	r3, #0
 8018532:	d15b      	bne.n	80185ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018534:	6878      	ldr	r0, [r7, #4]
 8018536:	f7fe fcf3 	bl	8016f20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801853a:	4b35      	ldr	r3, [pc, #212]	; (8018610 <tcp_process+0x7dc>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	687a      	ldr	r2, [r7, #4]
 8018540:	429a      	cmp	r2, r3
 8018542:	d105      	bne.n	8018550 <tcp_process+0x71c>
 8018544:	4b32      	ldr	r3, [pc, #200]	; (8018610 <tcp_process+0x7dc>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	68db      	ldr	r3, [r3, #12]
 801854a:	4a31      	ldr	r2, [pc, #196]	; (8018610 <tcp_process+0x7dc>)
 801854c:	6013      	str	r3, [r2, #0]
 801854e:	e013      	b.n	8018578 <tcp_process+0x744>
 8018550:	4b2f      	ldr	r3, [pc, #188]	; (8018610 <tcp_process+0x7dc>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	61bb      	str	r3, [r7, #24]
 8018556:	e00c      	b.n	8018572 <tcp_process+0x73e>
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	68db      	ldr	r3, [r3, #12]
 801855c:	687a      	ldr	r2, [r7, #4]
 801855e:	429a      	cmp	r2, r3
 8018560:	d104      	bne.n	801856c <tcp_process+0x738>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	68da      	ldr	r2, [r3, #12]
 8018566:	69bb      	ldr	r3, [r7, #24]
 8018568:	60da      	str	r2, [r3, #12]
 801856a:	e005      	b.n	8018578 <tcp_process+0x744>
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	68db      	ldr	r3, [r3, #12]
 8018570:	61bb      	str	r3, [r7, #24]
 8018572:	69bb      	ldr	r3, [r7, #24]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d1ef      	bne.n	8018558 <tcp_process+0x724>
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2200      	movs	r2, #0
 801857c:	60da      	str	r2, [r3, #12]
 801857e:	4b1f      	ldr	r3, [pc, #124]	; (80185fc <tcp_process+0x7c8>)
 8018580:	2201      	movs	r2, #1
 8018582:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	220a      	movs	r2, #10
 8018588:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801858a:	4b1d      	ldr	r3, [pc, #116]	; (8018600 <tcp_process+0x7cc>)
 801858c:	681a      	ldr	r2, [r3, #0]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	60da      	str	r2, [r3, #12]
 8018592:	4a1b      	ldr	r2, [pc, #108]	; (8018600 <tcp_process+0x7cc>)
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6013      	str	r3, [r2, #0]
 8018598:	f003 f90c 	bl	801b7b4 <tcp_timer_needed>
      }
      break;
 801859c:	e026      	b.n	80185ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801859e:	6878      	ldr	r0, [r7, #4]
 80185a0:	f000 f93c 	bl	801881c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80185a4:	4b17      	ldr	r3, [pc, #92]	; (8018604 <tcp_process+0x7d0>)
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	f003 0310 	and.w	r3, r3, #16
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d01f      	beq.n	80185f0 <tcp_process+0x7bc>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80185b4:	4b14      	ldr	r3, [pc, #80]	; (8018608 <tcp_process+0x7d4>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d119      	bne.n	80185f0 <tcp_process+0x7bc>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d115      	bne.n	80185f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80185c4:	4b11      	ldr	r3, [pc, #68]	; (801860c <tcp_process+0x7d8>)
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	f043 0310 	orr.w	r3, r3, #16
 80185cc:	b2da      	uxtb	r2, r3
 80185ce:	4b0f      	ldr	r3, [pc, #60]	; (801860c <tcp_process+0x7d8>)
 80185d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80185d2:	e00d      	b.n	80185f0 <tcp_process+0x7bc>
    default:
      break;
 80185d4:	bf00      	nop
 80185d6:	e00c      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185d8:	bf00      	nop
 80185da:	e00a      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185dc:	bf00      	nop
 80185de:	e008      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185e0:	bf00      	nop
 80185e2:	e006      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185e4:	bf00      	nop
 80185e6:	e004      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185e8:	bf00      	nop
 80185ea:	e002      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185ec:	bf00      	nop
 80185ee:	e000      	b.n	80185f2 <tcp_process+0x7be>
      break;
 80185f0:	bf00      	nop
  }
  return ERR_OK;
 80185f2:	2300      	movs	r3, #0
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3724      	adds	r7, #36	; 0x24
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd90      	pop	{r4, r7, pc}
 80185fc:	2001b198 	.word	0x2001b198
 8018600:	2001b1ac 	.word	0x2001b1ac
 8018604:	200143b0 	.word	0x200143b0
 8018608:	200143a8 	.word	0x200143a8
 801860c:	200143b1 	.word	0x200143b1
 8018610:	2001b19c 	.word	0x2001b19c

08018614 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018614:	b590      	push	{r4, r7, lr}
 8018616:	b085      	sub	sp, #20
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d106      	bne.n	8018632 <tcp_oos_insert_segment+0x1e>
 8018624:	4b3b      	ldr	r3, [pc, #236]	; (8018714 <tcp_oos_insert_segment+0x100>)
 8018626:	f240 421f 	movw	r2, #1055	; 0x41f
 801862a:	493b      	ldr	r1, [pc, #236]	; (8018718 <tcp_oos_insert_segment+0x104>)
 801862c:	483b      	ldr	r0, [pc, #236]	; (801871c <tcp_oos_insert_segment+0x108>)
 801862e:	f009 fb3d 	bl	8021cac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	691b      	ldr	r3, [r3, #16]
 8018636:	899b      	ldrh	r3, [r3, #12]
 8018638:	b29b      	uxth	r3, r3
 801863a:	4618      	mov	r0, r3
 801863c:	f7f9 fece 	bl	80123dc <lwip_htons>
 8018640:	4603      	mov	r3, r0
 8018642:	b2db      	uxtb	r3, r3
 8018644:	f003 0301 	and.w	r3, r3, #1
 8018648:	2b00      	cmp	r3, #0
 801864a:	d028      	beq.n	801869e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801864c:	6838      	ldr	r0, [r7, #0]
 801864e:	f7fe f997 	bl	8016980 <tcp_segs_free>
    next = NULL;
 8018652:	2300      	movs	r3, #0
 8018654:	603b      	str	r3, [r7, #0]
 8018656:	e056      	b.n	8018706 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	691b      	ldr	r3, [r3, #16]
 801865c:	899b      	ldrh	r3, [r3, #12]
 801865e:	b29b      	uxth	r3, r3
 8018660:	4618      	mov	r0, r3
 8018662:	f7f9 febb 	bl	80123dc <lwip_htons>
 8018666:	4603      	mov	r3, r0
 8018668:	b2db      	uxtb	r3, r3
 801866a:	f003 0301 	and.w	r3, r3, #1
 801866e:	2b00      	cmp	r3, #0
 8018670:	d00d      	beq.n	801868e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	691b      	ldr	r3, [r3, #16]
 8018676:	899b      	ldrh	r3, [r3, #12]
 8018678:	b29c      	uxth	r4, r3
 801867a:	2001      	movs	r0, #1
 801867c:	f7f9 feae 	bl	80123dc <lwip_htons>
 8018680:	4603      	mov	r3, r0
 8018682:	461a      	mov	r2, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	691b      	ldr	r3, [r3, #16]
 8018688:	4322      	orrs	r2, r4
 801868a:	b292      	uxth	r2, r2
 801868c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018698:	68f8      	ldr	r0, [r7, #12]
 801869a:	f7fe f986 	bl	80169aa <tcp_seg_free>
    while (next &&
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d00e      	beq.n	80186c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	891b      	ldrh	r3, [r3, #8]
 80186a8:	461a      	mov	r2, r3
 80186aa:	4b1d      	ldr	r3, [pc, #116]	; (8018720 <tcp_oos_insert_segment+0x10c>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	441a      	add	r2, r3
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	691b      	ldr	r3, [r3, #16]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	6839      	ldr	r1, [r7, #0]
 80186b8:	8909      	ldrh	r1, [r1, #8]
 80186ba:	440b      	add	r3, r1
 80186bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80186be:	2b00      	cmp	r3, #0
 80186c0:	daca      	bge.n	8018658 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d01e      	beq.n	8018706 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	891b      	ldrh	r3, [r3, #8]
 80186cc:	461a      	mov	r2, r3
 80186ce:	4b14      	ldr	r3, [pc, #80]	; (8018720 <tcp_oos_insert_segment+0x10c>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	441a      	add	r2, r3
 80186d4:	683b      	ldr	r3, [r7, #0]
 80186d6:	691b      	ldr	r3, [r3, #16]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80186dc:	2b00      	cmp	r3, #0
 80186de:	dd12      	ble.n	8018706 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	691b      	ldr	r3, [r3, #16]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	b29a      	uxth	r2, r3
 80186e8:	4b0d      	ldr	r3, [pc, #52]	; (8018720 <tcp_oos_insert_segment+0x10c>)
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	1ad3      	subs	r3, r2, r3
 80186f0:	b29a      	uxth	r2, r3
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	685a      	ldr	r2, [r3, #4]
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	891b      	ldrh	r3, [r3, #8]
 80186fe:	4619      	mov	r1, r3
 8018700:	4610      	mov	r0, r2
 8018702:	f7fc f873 	bl	80147ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	683a      	ldr	r2, [r7, #0]
 801870a:	601a      	str	r2, [r3, #0]
}
 801870c:	bf00      	nop
 801870e:	3714      	adds	r7, #20
 8018710:	46bd      	mov	sp, r7
 8018712:	bd90      	pop	{r4, r7, pc}
 8018714:	08027c44 	.word	0x08027c44
 8018718:	08027f04 	.word	0x08027f04
 801871c:	08027c90 	.word	0x08027c90
 8018720:	200143a4 	.word	0x200143a4

08018724 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018724:	b5b0      	push	{r4, r5, r7, lr}
 8018726:	b086      	sub	sp, #24
 8018728:	af00      	add	r7, sp, #0
 801872a:	60f8      	str	r0, [r7, #12]
 801872c:	60b9      	str	r1, [r7, #8]
 801872e:	607a      	str	r2, [r7, #4]
 8018730:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018732:	e03e      	b.n	80187b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	685b      	ldr	r3, [r3, #4]
 8018742:	4618      	mov	r0, r3
 8018744:	f7fc fa98 	bl	8014c78 <pbuf_clen>
 8018748:	4603      	mov	r3, r0
 801874a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018752:	8a7a      	ldrh	r2, [r7, #18]
 8018754:	429a      	cmp	r2, r3
 8018756:	d906      	bls.n	8018766 <tcp_free_acked_segments+0x42>
 8018758:	4b2a      	ldr	r3, [pc, #168]	; (8018804 <tcp_free_acked_segments+0xe0>)
 801875a:	f240 4257 	movw	r2, #1111	; 0x457
 801875e:	492a      	ldr	r1, [pc, #168]	; (8018808 <tcp_free_acked_segments+0xe4>)
 8018760:	482a      	ldr	r0, [pc, #168]	; (801880c <tcp_free_acked_segments+0xe8>)
 8018762:	f009 faa3 	bl	8021cac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801876c:	8a7b      	ldrh	r3, [r7, #18]
 801876e:	1ad3      	subs	r3, r2, r3
 8018770:	b29a      	uxth	r2, r3
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	891a      	ldrh	r2, [r3, #8]
 801877c:	4b24      	ldr	r3, [pc, #144]	; (8018810 <tcp_free_acked_segments+0xec>)
 801877e:	881b      	ldrh	r3, [r3, #0]
 8018780:	4413      	add	r3, r2
 8018782:	b29a      	uxth	r2, r3
 8018784:	4b22      	ldr	r3, [pc, #136]	; (8018810 <tcp_free_acked_segments+0xec>)
 8018786:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018788:	6978      	ldr	r0, [r7, #20]
 801878a:	f7fe f90e 	bl	80169aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018794:	2b00      	cmp	r3, #0
 8018796:	d00c      	beq.n	80187b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018798:	68bb      	ldr	r3, [r7, #8]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d109      	bne.n	80187b2 <tcp_free_acked_segments+0x8e>
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d106      	bne.n	80187b2 <tcp_free_acked_segments+0x8e>
 80187a4:	4b17      	ldr	r3, [pc, #92]	; (8018804 <tcp_free_acked_segments+0xe0>)
 80187a6:	f240 4261 	movw	r2, #1121	; 0x461
 80187aa:	491a      	ldr	r1, [pc, #104]	; (8018814 <tcp_free_acked_segments+0xf0>)
 80187ac:	4817      	ldr	r0, [pc, #92]	; (801880c <tcp_free_acked_segments+0xe8>)
 80187ae:	f009 fa7d 	bl	8021cac <iprintf>
  while (seg_list != NULL &&
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d020      	beq.n	80187fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80187b8:	68bb      	ldr	r3, [r7, #8]
 80187ba:	691b      	ldr	r3, [r3, #16]
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	4618      	mov	r0, r3
 80187c0:	f7f9 fe21 	bl	8012406 <lwip_htonl>
 80187c4:	4604      	mov	r4, r0
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	891b      	ldrh	r3, [r3, #8]
 80187ca:	461d      	mov	r5, r3
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	691b      	ldr	r3, [r3, #16]
 80187d0:	899b      	ldrh	r3, [r3, #12]
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7f9 fe01 	bl	80123dc <lwip_htons>
 80187da:	4603      	mov	r3, r0
 80187dc:	b2db      	uxtb	r3, r3
 80187de:	f003 0303 	and.w	r3, r3, #3
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d001      	beq.n	80187ea <tcp_free_acked_segments+0xc6>
 80187e6:	2301      	movs	r3, #1
 80187e8:	e000      	b.n	80187ec <tcp_free_acked_segments+0xc8>
 80187ea:	2300      	movs	r3, #0
 80187ec:	442b      	add	r3, r5
 80187ee:	18e2      	adds	r2, r4, r3
 80187f0:	4b09      	ldr	r3, [pc, #36]	; (8018818 <tcp_free_acked_segments+0xf4>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	dd9c      	ble.n	8018734 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80187fa:	68bb      	ldr	r3, [r7, #8]
}
 80187fc:	4618      	mov	r0, r3
 80187fe:	3718      	adds	r7, #24
 8018800:	46bd      	mov	sp, r7
 8018802:	bdb0      	pop	{r4, r5, r7, pc}
 8018804:	08027c44 	.word	0x08027c44
 8018808:	08027f2c 	.word	0x08027f2c
 801880c:	08027c90 	.word	0x08027c90
 8018810:	200143ac 	.word	0x200143ac
 8018814:	08027f54 	.word	0x08027f54
 8018818:	200143a8 	.word	0x200143a8

0801881c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801881c:	b5b0      	push	{r4, r5, r7, lr}
 801881e:	b094      	sub	sp, #80	; 0x50
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018824:	2300      	movs	r3, #0
 8018826:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d106      	bne.n	801883c <tcp_receive+0x20>
 801882e:	4ba6      	ldr	r3, [pc, #664]	; (8018ac8 <tcp_receive+0x2ac>)
 8018830:	f240 427b 	movw	r2, #1147	; 0x47b
 8018834:	49a5      	ldr	r1, [pc, #660]	; (8018acc <tcp_receive+0x2b0>)
 8018836:	48a6      	ldr	r0, [pc, #664]	; (8018ad0 <tcp_receive+0x2b4>)
 8018838:	f009 fa38 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	7d1b      	ldrb	r3, [r3, #20]
 8018840:	2b03      	cmp	r3, #3
 8018842:	d806      	bhi.n	8018852 <tcp_receive+0x36>
 8018844:	4ba0      	ldr	r3, [pc, #640]	; (8018ac8 <tcp_receive+0x2ac>)
 8018846:	f240 427c 	movw	r2, #1148	; 0x47c
 801884a:	49a2      	ldr	r1, [pc, #648]	; (8018ad4 <tcp_receive+0x2b8>)
 801884c:	48a0      	ldr	r0, [pc, #640]	; (8018ad0 <tcp_receive+0x2b4>)
 801884e:	f009 fa2d 	bl	8021cac <iprintf>

  if (flags & TCP_ACK) {
 8018852:	4ba1      	ldr	r3, [pc, #644]	; (8018ad8 <tcp_receive+0x2bc>)
 8018854:	781b      	ldrb	r3, [r3, #0]
 8018856:	f003 0310 	and.w	r3, r3, #16
 801885a:	2b00      	cmp	r3, #0
 801885c:	f000 8263 	beq.w	8018d26 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018866:	461a      	mov	r2, r3
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801886c:	4413      	add	r3, r2
 801886e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018874:	4b99      	ldr	r3, [pc, #612]	; (8018adc <tcp_receive+0x2c0>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	1ad3      	subs	r3, r2, r3
 801887a:	2b00      	cmp	r3, #0
 801887c:	db1b      	blt.n	80188b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018882:	4b96      	ldr	r3, [pc, #600]	; (8018adc <tcp_receive+0x2c0>)
 8018884:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018886:	429a      	cmp	r2, r3
 8018888:	d106      	bne.n	8018898 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801888e:	4b94      	ldr	r3, [pc, #592]	; (8018ae0 <tcp_receive+0x2c4>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	1ad3      	subs	r3, r2, r3
 8018894:	2b00      	cmp	r3, #0
 8018896:	db0e      	blt.n	80188b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801889c:	4b90      	ldr	r3, [pc, #576]	; (8018ae0 <tcp_receive+0x2c4>)
 801889e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d125      	bne.n	80188f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80188a4:	4b8f      	ldr	r3, [pc, #572]	; (8018ae4 <tcp_receive+0x2c8>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	89db      	ldrh	r3, [r3, #14]
 80188aa:	b29a      	uxth	r2, r3
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80188b2:	429a      	cmp	r2, r3
 80188b4:	d91c      	bls.n	80188f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80188b6:	4b8b      	ldr	r3, [pc, #556]	; (8018ae4 <tcp_receive+0x2c8>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	89db      	ldrh	r3, [r3, #14]
 80188bc:	b29a      	uxth	r2, r3
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d205      	bcs.n	80188e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80188e0:	4b7e      	ldr	r3, [pc, #504]	; (8018adc <tcp_receive+0x2c0>)
 80188e2:	681a      	ldr	r2, [r3, #0]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80188e8:	4b7d      	ldr	r3, [pc, #500]	; (8018ae0 <tcp_receive+0x2c4>)
 80188ea:	681a      	ldr	r2, [r3, #0]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80188f0:	4b7b      	ldr	r3, [pc, #492]	; (8018ae0 <tcp_receive+0x2c4>)
 80188f2:	681a      	ldr	r2, [r3, #0]
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188f8:	1ad3      	subs	r3, r2, r3
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	dc58      	bgt.n	80189b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80188fe:	4b7a      	ldr	r3, [pc, #488]	; (8018ae8 <tcp_receive+0x2cc>)
 8018900:	881b      	ldrh	r3, [r3, #0]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d14b      	bne.n	801899e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801890a:	687a      	ldr	r2, [r7, #4]
 801890c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018910:	4413      	add	r3, r2
 8018912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018914:	429a      	cmp	r2, r3
 8018916:	d142      	bne.n	801899e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801891e:	2b00      	cmp	r3, #0
 8018920:	db3d      	blt.n	801899e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018926:	4b6e      	ldr	r3, [pc, #440]	; (8018ae0 <tcp_receive+0x2c4>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	429a      	cmp	r2, r3
 801892c:	d137      	bne.n	801899e <tcp_receive+0x182>
              found_dupack = 1;
 801892e:	2301      	movs	r3, #1
 8018930:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018938:	2bff      	cmp	r3, #255	; 0xff
 801893a:	d007      	beq.n	801894c <tcp_receive+0x130>
                ++pcb->dupacks;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018942:	3301      	adds	r3, #1
 8018944:	b2da      	uxtb	r2, r3
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018952:	2b03      	cmp	r3, #3
 8018954:	d91b      	bls.n	801898e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018960:	4413      	add	r3, r2
 8018962:	b29a      	uxth	r2, r3
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801896a:	429a      	cmp	r2, r3
 801896c:	d30a      	bcc.n	8018984 <tcp_receive+0x168>
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018978:	4413      	add	r3, r2
 801897a:	b29a      	uxth	r2, r3
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018982:	e004      	b.n	801898e <tcp_receive+0x172>
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801898a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018994:	2b02      	cmp	r3, #2
 8018996:	d902      	bls.n	801899e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f002 fbad 	bl	801b0f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801899e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	f040 8160 	bne.w	8018c66 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80189ae:	e15a      	b.n	8018c66 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80189b0:	4b4b      	ldr	r3, [pc, #300]	; (8018ae0 <tcp_receive+0x2c4>)
 80189b2:	681a      	ldr	r2, [r3, #0]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189b8:	1ad3      	subs	r3, r2, r3
 80189ba:	3b01      	subs	r3, #1
 80189bc:	2b00      	cmp	r3, #0
 80189be:	f2c0 814d 	blt.w	8018c5c <tcp_receive+0x440>
 80189c2:	4b47      	ldr	r3, [pc, #284]	; (8018ae0 <tcp_receive+0x2c4>)
 80189c4:	681a      	ldr	r2, [r3, #0]
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189ca:	1ad3      	subs	r3, r2, r3
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f300 8145 	bgt.w	8018c5c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	8b5b      	ldrh	r3, [r3, #26]
 80189d6:	f003 0304 	and.w	r3, r3, #4
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d010      	beq.n	8018a00 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	8b5b      	ldrh	r3, [r3, #26]
 80189e2:	f023 0304 	bic.w	r3, r3, #4
 80189e6:	b29a      	uxth	r2, r3
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2200      	movs	r2, #0
 80189fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018a0e:	10db      	asrs	r3, r3, #3
 8018a10:	b21b      	sxth	r3, r3
 8018a12:	b29a      	uxth	r2, r3
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	4413      	add	r3, r2
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	b21a      	sxth	r2, r3
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018a28:	4b2d      	ldr	r3, [pc, #180]	; (8018ae0 <tcp_receive+0x2c4>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	b29a      	uxth	r2, r3
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	1ad3      	subs	r3, r2, r3
 8018a36:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018a40:	4b27      	ldr	r3, [pc, #156]	; (8018ae0 <tcp_receive+0x2c4>)
 8018a42:	681a      	ldr	r2, [r3, #0]
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	7d1b      	ldrb	r3, [r3, #20]
 8018a4c:	2b03      	cmp	r3, #3
 8018a4e:	f240 8096 	bls.w	8018b7e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	d244      	bcs.n	8018aec <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	8b5b      	ldrh	r3, [r3, #26]
 8018a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d001      	beq.n	8018a72 <tcp_receive+0x256>
 8018a6e:	2301      	movs	r3, #1
 8018a70:	e000      	b.n	8018a74 <tcp_receive+0x258>
 8018a72:	2302      	movs	r3, #2
 8018a74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8018a7c:	b29a      	uxth	r2, r3
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a82:	fb12 f303 	smulbb	r3, r2, r3
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	bf28      	it	cs
 8018a8e:	4613      	movcs	r3, r2
 8018a90:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a9a:	4413      	add	r3, r2
 8018a9c:	b29a      	uxth	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018aa4:	429a      	cmp	r2, r3
 8018aa6:	d309      	bcc.n	8018abc <tcp_receive+0x2a0>
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018aae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ab0:	4413      	add	r3, r2
 8018ab2:	b29a      	uxth	r2, r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018aba:	e060      	b.n	8018b7e <tcp_receive+0x362>
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018ac6:	e05a      	b.n	8018b7e <tcp_receive+0x362>
 8018ac8:	08027c44 	.word	0x08027c44
 8018acc:	08027f74 	.word	0x08027f74
 8018ad0:	08027c90 	.word	0x08027c90
 8018ad4:	08027f90 	.word	0x08027f90
 8018ad8:	200143b0 	.word	0x200143b0
 8018adc:	200143a4 	.word	0x200143a4
 8018ae0:	200143a8 	.word	0x200143a8
 8018ae4:	20014394 	.word	0x20014394
 8018ae8:	200143ae 	.word	0x200143ae
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018af2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018af4:	4413      	add	r3, r2
 8018af6:	b29a      	uxth	r2, r3
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d309      	bcc.n	8018b16 <tcp_receive+0x2fa>
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018b08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018b0a:	4413      	add	r3, r2
 8018b0c:	b29a      	uxth	r2, r3
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8018b14:	e004      	b.n	8018b20 <tcp_receive+0x304>
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018b2c:	429a      	cmp	r2, r3
 8018b2e:	d326      	bcc.n	8018b7e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018b3c:	1ad3      	subs	r3, r2, r3
 8018b3e:	b29a      	uxth	r2, r3
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b50:	4413      	add	r3, r2
 8018b52:	b29a      	uxth	r2, r3
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d30a      	bcc.n	8018b74 <tcp_receive+0x358>
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b68:	4413      	add	r3, r2
 8018b6a:	b29a      	uxth	r2, r3
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018b72:	e004      	b.n	8018b7e <tcp_receive+0x362>
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018b86:	4a98      	ldr	r2, [pc, #608]	; (8018de8 <tcp_receive+0x5cc>)
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f7ff fdcb 	bl	8018724 <tcp_free_acked_segments>
 8018b8e:	4602      	mov	r2, r0
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b9c:	4a93      	ldr	r2, [pc, #588]	; (8018dec <tcp_receive+0x5d0>)
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f7ff fdc0 	bl	8018724 <tcp_free_acked_segments>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d104      	bne.n	8018bbc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018bb8:	861a      	strh	r2, [r3, #48]	; 0x30
 8018bba:	e002      	b.n	8018bc2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d103      	bne.n	8018bd8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018bde:	4b84      	ldr	r3, [pc, #528]	; (8018df0 <tcp_receive+0x5d4>)
 8018be0:	881b      	ldrh	r3, [r3, #0]
 8018be2:	4413      	add	r3, r2
 8018be4:	b29a      	uxth	r2, r3
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	8b5b      	ldrh	r3, [r3, #26]
 8018bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d035      	beq.n	8018c64 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d118      	bne.n	8018c32 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d00c      	beq.n	8018c22 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c10:	691b      	ldr	r3, [r3, #16]
 8018c12:	685b      	ldr	r3, [r3, #4]
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7f9 fbf6 	bl	8012406 <lwip_htonl>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	dc20      	bgt.n	8018c64 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	8b5b      	ldrh	r3, [r3, #26]
 8018c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018c2a:	b29a      	uxth	r2, r3
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018c30:	e018      	b.n	8018c64 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c3a:	691b      	ldr	r3, [r3, #16]
 8018c3c:	685b      	ldr	r3, [r3, #4]
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7f9 fbe1 	bl	8012406 <lwip_htonl>
 8018c44:	4603      	mov	r3, r0
 8018c46:	1ae3      	subs	r3, r4, r3
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	dc0b      	bgt.n	8018c64 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	8b5b      	ldrh	r3, [r3, #26]
 8018c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018c54:	b29a      	uxth	r2, r3
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018c5a:	e003      	b.n	8018c64 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f002 fc39 	bl	801b4d4 <tcp_send_empty_ack>
 8018c62:	e000      	b.n	8018c66 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018c64:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d05b      	beq.n	8018d26 <tcp_receive+0x50a>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018c72:	4b60      	ldr	r3, [pc, #384]	; (8018df4 <tcp_receive+0x5d8>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	1ad3      	subs	r3, r2, r3
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	da54      	bge.n	8018d26 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018c7c:	4b5e      	ldr	r3, [pc, #376]	; (8018df8 <tcp_receive+0x5dc>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	b29a      	uxth	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	1ad3      	subs	r3, r2, r3
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018c90:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018c9a:	10db      	asrs	r3, r3, #3
 8018c9c:	b21b      	sxth	r3, r3
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	1ad3      	subs	r3, r2, r3
 8018ca2:	b29b      	uxth	r3, r3
 8018ca4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018cae:	b29a      	uxth	r2, r3
 8018cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018cb4:	4413      	add	r3, r2
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	b21a      	sxth	r2, r3
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018cbe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	da05      	bge.n	8018cd2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8018cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018cca:	425b      	negs	r3, r3
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018cd2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018cdc:	109b      	asrs	r3, r3, #2
 8018cde:	b21b      	sxth	r3, r3
 8018ce0:	b29b      	uxth	r3, r3
 8018ce2:	1ad3      	subs	r3, r2, r3
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018cf0:	b29a      	uxth	r2, r3
 8018cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018cf6:	4413      	add	r3, r2
 8018cf8:	b29b      	uxth	r3, r3
 8018cfa:	b21a      	sxth	r2, r3
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018d06:	10db      	asrs	r3, r3, #3
 8018d08:	b21b      	sxth	r3, r3
 8018d0a:	b29a      	uxth	r2, r3
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	4413      	add	r3, r2
 8018d16:	b29b      	uxth	r3, r3
 8018d18:	b21a      	sxth	r2, r3
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	2200      	movs	r2, #0
 8018d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018d26:	4b35      	ldr	r3, [pc, #212]	; (8018dfc <tcp_receive+0x5e0>)
 8018d28:	881b      	ldrh	r3, [r3, #0]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	f000 84e1 	beq.w	80196f2 <tcp_receive+0xed6>
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	7d1b      	ldrb	r3, [r3, #20]
 8018d34:	2b06      	cmp	r3, #6
 8018d36:	f200 84dc 	bhi.w	80196f2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d3e:	4b30      	ldr	r3, [pc, #192]	; (8018e00 <tcp_receive+0x5e4>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	1ad3      	subs	r3, r2, r3
 8018d44:	3b01      	subs	r3, #1
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	f2c0 808e 	blt.w	8018e68 <tcp_receive+0x64c>
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d50:	4b2a      	ldr	r3, [pc, #168]	; (8018dfc <tcp_receive+0x5e0>)
 8018d52:	881b      	ldrh	r3, [r3, #0]
 8018d54:	4619      	mov	r1, r3
 8018d56:	4b2a      	ldr	r3, [pc, #168]	; (8018e00 <tcp_receive+0x5e4>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	440b      	add	r3, r1
 8018d5c:	1ad3      	subs	r3, r2, r3
 8018d5e:	3301      	adds	r3, #1
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	f300 8081 	bgt.w	8018e68 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018d66:	4b27      	ldr	r3, [pc, #156]	; (8018e04 <tcp_receive+0x5e8>)
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d70:	4b23      	ldr	r3, [pc, #140]	; (8018e00 <tcp_receive+0x5e4>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	1ad3      	subs	r3, r2, r3
 8018d76:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018d78:	4b22      	ldr	r3, [pc, #136]	; (8018e04 <tcp_receive+0x5e8>)
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d106      	bne.n	8018d8e <tcp_receive+0x572>
 8018d80:	4b21      	ldr	r3, [pc, #132]	; (8018e08 <tcp_receive+0x5ec>)
 8018d82:	f240 5294 	movw	r2, #1428	; 0x594
 8018d86:	4921      	ldr	r1, [pc, #132]	; (8018e0c <tcp_receive+0x5f0>)
 8018d88:	4821      	ldr	r0, [pc, #132]	; (8018e10 <tcp_receive+0x5f4>)
 8018d8a:	f008 ff8f 	bl	8021cac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018d94:	4293      	cmp	r3, r2
 8018d96:	d906      	bls.n	8018da6 <tcp_receive+0x58a>
 8018d98:	4b1b      	ldr	r3, [pc, #108]	; (8018e08 <tcp_receive+0x5ec>)
 8018d9a:	f240 5295 	movw	r2, #1429	; 0x595
 8018d9e:	491d      	ldr	r1, [pc, #116]	; (8018e14 <tcp_receive+0x5f8>)
 8018da0:	481b      	ldr	r0, [pc, #108]	; (8018e10 <tcp_receive+0x5f4>)
 8018da2:	f008 ff83 	bl	8021cac <iprintf>
      off = (u16_t)off32;
 8018da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018da8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018dac:	4b15      	ldr	r3, [pc, #84]	; (8018e04 <tcp_receive+0x5e8>)
 8018dae:	685b      	ldr	r3, [r3, #4]
 8018db0:	891b      	ldrh	r3, [r3, #8]
 8018db2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018db6:	429a      	cmp	r2, r3
 8018db8:	d906      	bls.n	8018dc8 <tcp_receive+0x5ac>
 8018dba:	4b13      	ldr	r3, [pc, #76]	; (8018e08 <tcp_receive+0x5ec>)
 8018dbc:	f240 5297 	movw	r2, #1431	; 0x597
 8018dc0:	4915      	ldr	r1, [pc, #84]	; (8018e18 <tcp_receive+0x5fc>)
 8018dc2:	4813      	ldr	r0, [pc, #76]	; (8018e10 <tcp_receive+0x5f4>)
 8018dc4:	f008 ff72 	bl	8021cac <iprintf>
      inseg.len -= off;
 8018dc8:	4b0e      	ldr	r3, [pc, #56]	; (8018e04 <tcp_receive+0x5e8>)
 8018dca:	891a      	ldrh	r2, [r3, #8]
 8018dcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018dd0:	1ad3      	subs	r3, r2, r3
 8018dd2:	b29a      	uxth	r2, r3
 8018dd4:	4b0b      	ldr	r3, [pc, #44]	; (8018e04 <tcp_receive+0x5e8>)
 8018dd6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018dd8:	4b0a      	ldr	r3, [pc, #40]	; (8018e04 <tcp_receive+0x5e8>)
 8018dda:	685b      	ldr	r3, [r3, #4]
 8018ddc:	891a      	ldrh	r2, [r3, #8]
 8018dde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018de2:	1ad3      	subs	r3, r2, r3
 8018de4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018de6:	e029      	b.n	8018e3c <tcp_receive+0x620>
 8018de8:	08027fac 	.word	0x08027fac
 8018dec:	08027fb4 	.word	0x08027fb4
 8018df0:	200143ac 	.word	0x200143ac
 8018df4:	200143a8 	.word	0x200143a8
 8018df8:	2001b1a0 	.word	0x2001b1a0
 8018dfc:	200143ae 	.word	0x200143ae
 8018e00:	200143a4 	.word	0x200143a4
 8018e04:	20014380 	.word	0x20014380
 8018e08:	08027c44 	.word	0x08027c44
 8018e0c:	08027fbc 	.word	0x08027fbc
 8018e10:	08027c90 	.word	0x08027c90
 8018e14:	08027fcc 	.word	0x08027fcc
 8018e18:	08027fdc 	.word	0x08027fdc
        off -= p->len;
 8018e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e1e:	895b      	ldrh	r3, [r3, #10]
 8018e20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e24:	1ad3      	subs	r3, r2, r3
 8018e26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018e2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e32:	2200      	movs	r2, #0
 8018e34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e3e:	895b      	ldrh	r3, [r3, #10]
 8018e40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e44:	429a      	cmp	r2, r3
 8018e46:	d8e9      	bhi.n	8018e1c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018e48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018e4c:	4619      	mov	r1, r3
 8018e4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018e50:	f7fb fdcc 	bl	80149ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e58:	4a91      	ldr	r2, [pc, #580]	; (80190a0 <tcp_receive+0x884>)
 8018e5a:	6013      	str	r3, [r2, #0]
 8018e5c:	4b91      	ldr	r3, [pc, #580]	; (80190a4 <tcp_receive+0x888>)
 8018e5e:	691b      	ldr	r3, [r3, #16]
 8018e60:	4a8f      	ldr	r2, [pc, #572]	; (80190a0 <tcp_receive+0x884>)
 8018e62:	6812      	ldr	r2, [r2, #0]
 8018e64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018e66:	e00d      	b.n	8018e84 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018e68:	4b8d      	ldr	r3, [pc, #564]	; (80190a0 <tcp_receive+0x884>)
 8018e6a:	681a      	ldr	r2, [r3, #0]
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e70:	1ad3      	subs	r3, r2, r3
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	da06      	bge.n	8018e84 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	8b5b      	ldrh	r3, [r3, #26]
 8018e7a:	f043 0302 	orr.w	r3, r3, #2
 8018e7e:	b29a      	uxth	r2, r3
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018e84:	4b86      	ldr	r3, [pc, #536]	; (80190a0 <tcp_receive+0x884>)
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e8c:	1ad3      	subs	r3, r2, r3
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	f2c0 842a 	blt.w	80196e8 <tcp_receive+0xecc>
 8018e94:	4b82      	ldr	r3, [pc, #520]	; (80190a0 <tcp_receive+0x884>)
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e9c:	6879      	ldr	r1, [r7, #4]
 8018e9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018ea0:	440b      	add	r3, r1
 8018ea2:	1ad3      	subs	r3, r2, r3
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	f300 841e 	bgt.w	80196e8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018eb0:	4b7b      	ldr	r3, [pc, #492]	; (80190a0 <tcp_receive+0x884>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	f040 829a 	bne.w	80193ee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018eba:	4b7a      	ldr	r3, [pc, #488]	; (80190a4 <tcp_receive+0x888>)
 8018ebc:	891c      	ldrh	r4, [r3, #8]
 8018ebe:	4b79      	ldr	r3, [pc, #484]	; (80190a4 <tcp_receive+0x888>)
 8018ec0:	691b      	ldr	r3, [r3, #16]
 8018ec2:	899b      	ldrh	r3, [r3, #12]
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7f9 fa88 	bl	80123dc <lwip_htons>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	b2db      	uxtb	r3, r3
 8018ed0:	f003 0303 	and.w	r3, r3, #3
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d001      	beq.n	8018edc <tcp_receive+0x6c0>
 8018ed8:	2301      	movs	r3, #1
 8018eda:	e000      	b.n	8018ede <tcp_receive+0x6c2>
 8018edc:	2300      	movs	r3, #0
 8018ede:	4423      	add	r3, r4
 8018ee0:	b29a      	uxth	r2, r3
 8018ee2:	4b71      	ldr	r3, [pc, #452]	; (80190a8 <tcp_receive+0x88c>)
 8018ee4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018eea:	4b6f      	ldr	r3, [pc, #444]	; (80190a8 <tcp_receive+0x88c>)
 8018eec:	881b      	ldrh	r3, [r3, #0]
 8018eee:	429a      	cmp	r2, r3
 8018ef0:	d275      	bcs.n	8018fde <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018ef2:	4b6c      	ldr	r3, [pc, #432]	; (80190a4 <tcp_receive+0x888>)
 8018ef4:	691b      	ldr	r3, [r3, #16]
 8018ef6:	899b      	ldrh	r3, [r3, #12]
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7f9 fa6e 	bl	80123dc <lwip_htons>
 8018f00:	4603      	mov	r3, r0
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	f003 0301 	and.w	r3, r3, #1
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d01f      	beq.n	8018f4c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018f0c:	4b65      	ldr	r3, [pc, #404]	; (80190a4 <tcp_receive+0x888>)
 8018f0e:	691b      	ldr	r3, [r3, #16]
 8018f10:	899b      	ldrh	r3, [r3, #12]
 8018f12:	b29b      	uxth	r3, r3
 8018f14:	b21b      	sxth	r3, r3
 8018f16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018f1a:	b21c      	sxth	r4, r3
 8018f1c:	4b61      	ldr	r3, [pc, #388]	; (80190a4 <tcp_receive+0x888>)
 8018f1e:	691b      	ldr	r3, [r3, #16]
 8018f20:	899b      	ldrh	r3, [r3, #12]
 8018f22:	b29b      	uxth	r3, r3
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f9 fa59 	bl	80123dc <lwip_htons>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	b29b      	uxth	r3, r3
 8018f30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018f34:	b29b      	uxth	r3, r3
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7f9 fa50 	bl	80123dc <lwip_htons>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	b21b      	sxth	r3, r3
 8018f40:	4323      	orrs	r3, r4
 8018f42:	b21a      	sxth	r2, r3
 8018f44:	4b57      	ldr	r3, [pc, #348]	; (80190a4 <tcp_receive+0x888>)
 8018f46:	691b      	ldr	r3, [r3, #16]
 8018f48:	b292      	uxth	r2, r2
 8018f4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018f50:	4b54      	ldr	r3, [pc, #336]	; (80190a4 <tcp_receive+0x888>)
 8018f52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018f54:	4b53      	ldr	r3, [pc, #332]	; (80190a4 <tcp_receive+0x888>)
 8018f56:	691b      	ldr	r3, [r3, #16]
 8018f58:	899b      	ldrh	r3, [r3, #12]
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7f9 fa3d 	bl	80123dc <lwip_htons>
 8018f62:	4603      	mov	r3, r0
 8018f64:	b2db      	uxtb	r3, r3
 8018f66:	f003 0302 	and.w	r3, r3, #2
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d005      	beq.n	8018f7a <tcp_receive+0x75e>
            inseg.len -= 1;
 8018f6e:	4b4d      	ldr	r3, [pc, #308]	; (80190a4 <tcp_receive+0x888>)
 8018f70:	891b      	ldrh	r3, [r3, #8]
 8018f72:	3b01      	subs	r3, #1
 8018f74:	b29a      	uxth	r2, r3
 8018f76:	4b4b      	ldr	r3, [pc, #300]	; (80190a4 <tcp_receive+0x888>)
 8018f78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018f7a:	4b4a      	ldr	r3, [pc, #296]	; (80190a4 <tcp_receive+0x888>)
 8018f7c:	685b      	ldr	r3, [r3, #4]
 8018f7e:	4a49      	ldr	r2, [pc, #292]	; (80190a4 <tcp_receive+0x888>)
 8018f80:	8912      	ldrh	r2, [r2, #8]
 8018f82:	4611      	mov	r1, r2
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7fb fc31 	bl	80147ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018f8a:	4b46      	ldr	r3, [pc, #280]	; (80190a4 <tcp_receive+0x888>)
 8018f8c:	891c      	ldrh	r4, [r3, #8]
 8018f8e:	4b45      	ldr	r3, [pc, #276]	; (80190a4 <tcp_receive+0x888>)
 8018f90:	691b      	ldr	r3, [r3, #16]
 8018f92:	899b      	ldrh	r3, [r3, #12]
 8018f94:	b29b      	uxth	r3, r3
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7f9 fa20 	bl	80123dc <lwip_htons>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	b2db      	uxtb	r3, r3
 8018fa0:	f003 0303 	and.w	r3, r3, #3
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d001      	beq.n	8018fac <tcp_receive+0x790>
 8018fa8:	2301      	movs	r3, #1
 8018faa:	e000      	b.n	8018fae <tcp_receive+0x792>
 8018fac:	2300      	movs	r3, #0
 8018fae:	4423      	add	r3, r4
 8018fb0:	b29a      	uxth	r2, r3
 8018fb2:	4b3d      	ldr	r3, [pc, #244]	; (80190a8 <tcp_receive+0x88c>)
 8018fb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018fb6:	4b3c      	ldr	r3, [pc, #240]	; (80190a8 <tcp_receive+0x88c>)
 8018fb8:	881b      	ldrh	r3, [r3, #0]
 8018fba:	461a      	mov	r2, r3
 8018fbc:	4b38      	ldr	r3, [pc, #224]	; (80190a0 <tcp_receive+0x884>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	441a      	add	r2, r3
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc6:	6879      	ldr	r1, [r7, #4]
 8018fc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018fca:	440b      	add	r3, r1
 8018fcc:	429a      	cmp	r2, r3
 8018fce:	d006      	beq.n	8018fde <tcp_receive+0x7c2>
 8018fd0:	4b36      	ldr	r3, [pc, #216]	; (80190ac <tcp_receive+0x890>)
 8018fd2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018fd6:	4936      	ldr	r1, [pc, #216]	; (80190b0 <tcp_receive+0x894>)
 8018fd8:	4836      	ldr	r0, [pc, #216]	; (80190b4 <tcp_receive+0x898>)
 8018fda:	f008 fe67 	bl	8021cac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f000 80e7 	beq.w	80191b6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018fe8:	4b2e      	ldr	r3, [pc, #184]	; (80190a4 <tcp_receive+0x888>)
 8018fea:	691b      	ldr	r3, [r3, #16]
 8018fec:	899b      	ldrh	r3, [r3, #12]
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7f9 f9f3 	bl	80123dc <lwip_htons>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	f003 0301 	and.w	r3, r3, #1
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d010      	beq.n	8019024 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019002:	e00a      	b.n	801901a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019008:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801900e:	681a      	ldr	r2, [r3, #0]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019014:	68f8      	ldr	r0, [r7, #12]
 8019016:	f7fd fcc8 	bl	80169aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801901e:	2b00      	cmp	r3, #0
 8019020:	d1f0      	bne.n	8019004 <tcp_receive+0x7e8>
 8019022:	e0c8      	b.n	80191b6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019028:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801902a:	e052      	b.n	80190d2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801902c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801902e:	691b      	ldr	r3, [r3, #16]
 8019030:	899b      	ldrh	r3, [r3, #12]
 8019032:	b29b      	uxth	r3, r3
 8019034:	4618      	mov	r0, r3
 8019036:	f7f9 f9d1 	bl	80123dc <lwip_htons>
 801903a:	4603      	mov	r3, r0
 801903c:	b2db      	uxtb	r3, r3
 801903e:	f003 0301 	and.w	r3, r3, #1
 8019042:	2b00      	cmp	r3, #0
 8019044:	d03d      	beq.n	80190c2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019046:	4b17      	ldr	r3, [pc, #92]	; (80190a4 <tcp_receive+0x888>)
 8019048:	691b      	ldr	r3, [r3, #16]
 801904a:	899b      	ldrh	r3, [r3, #12]
 801904c:	b29b      	uxth	r3, r3
 801904e:	4618      	mov	r0, r3
 8019050:	f7f9 f9c4 	bl	80123dc <lwip_htons>
 8019054:	4603      	mov	r3, r0
 8019056:	b2db      	uxtb	r3, r3
 8019058:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801905c:	2b00      	cmp	r3, #0
 801905e:	d130      	bne.n	80190c2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019060:	4b10      	ldr	r3, [pc, #64]	; (80190a4 <tcp_receive+0x888>)
 8019062:	691b      	ldr	r3, [r3, #16]
 8019064:	899b      	ldrh	r3, [r3, #12]
 8019066:	b29c      	uxth	r4, r3
 8019068:	2001      	movs	r0, #1
 801906a:	f7f9 f9b7 	bl	80123dc <lwip_htons>
 801906e:	4603      	mov	r3, r0
 8019070:	461a      	mov	r2, r3
 8019072:	4b0c      	ldr	r3, [pc, #48]	; (80190a4 <tcp_receive+0x888>)
 8019074:	691b      	ldr	r3, [r3, #16]
 8019076:	4322      	orrs	r2, r4
 8019078:	b292      	uxth	r2, r2
 801907a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801907c:	4b09      	ldr	r3, [pc, #36]	; (80190a4 <tcp_receive+0x888>)
 801907e:	891c      	ldrh	r4, [r3, #8]
 8019080:	4b08      	ldr	r3, [pc, #32]	; (80190a4 <tcp_receive+0x888>)
 8019082:	691b      	ldr	r3, [r3, #16]
 8019084:	899b      	ldrh	r3, [r3, #12]
 8019086:	b29b      	uxth	r3, r3
 8019088:	4618      	mov	r0, r3
 801908a:	f7f9 f9a7 	bl	80123dc <lwip_htons>
 801908e:	4603      	mov	r3, r0
 8019090:	b2db      	uxtb	r3, r3
 8019092:	f003 0303 	and.w	r3, r3, #3
 8019096:	2b00      	cmp	r3, #0
 8019098:	d00e      	beq.n	80190b8 <tcp_receive+0x89c>
 801909a:	2301      	movs	r3, #1
 801909c:	e00d      	b.n	80190ba <tcp_receive+0x89e>
 801909e:	bf00      	nop
 80190a0:	200143a4 	.word	0x200143a4
 80190a4:	20014380 	.word	0x20014380
 80190a8:	200143ae 	.word	0x200143ae
 80190ac:	08027c44 	.word	0x08027c44
 80190b0:	08027fec 	.word	0x08027fec
 80190b4:	08027c90 	.word	0x08027c90
 80190b8:	2300      	movs	r3, #0
 80190ba:	4423      	add	r3, r4
 80190bc:	b29a      	uxth	r2, r3
 80190be:	4b98      	ldr	r3, [pc, #608]	; (8019320 <tcp_receive+0xb04>)
 80190c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80190c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80190c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80190cc:	6938      	ldr	r0, [r7, #16]
 80190ce:	f7fd fc6c 	bl	80169aa <tcp_seg_free>
            while (next &&
 80190d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d00e      	beq.n	80190f6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80190d8:	4b91      	ldr	r3, [pc, #580]	; (8019320 <tcp_receive+0xb04>)
 80190da:	881b      	ldrh	r3, [r3, #0]
 80190dc:	461a      	mov	r2, r3
 80190de:	4b91      	ldr	r3, [pc, #580]	; (8019324 <tcp_receive+0xb08>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	441a      	add	r2, r3
 80190e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190e6:	691b      	ldr	r3, [r3, #16]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80190ec:	8909      	ldrh	r1, [r1, #8]
 80190ee:	440b      	add	r3, r1
 80190f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	da9a      	bge.n	801902c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80190f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d059      	beq.n	80191b0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80190fc:	4b88      	ldr	r3, [pc, #544]	; (8019320 <tcp_receive+0xb04>)
 80190fe:	881b      	ldrh	r3, [r3, #0]
 8019100:	461a      	mov	r2, r3
 8019102:	4b88      	ldr	r3, [pc, #544]	; (8019324 <tcp_receive+0xb08>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	441a      	add	r2, r3
 8019108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801910a:	691b      	ldr	r3, [r3, #16]
 801910c:	685b      	ldr	r3, [r3, #4]
 801910e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019110:	2b00      	cmp	r3, #0
 8019112:	dd4d      	ble.n	80191b0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019116:	691b      	ldr	r3, [r3, #16]
 8019118:	685b      	ldr	r3, [r3, #4]
 801911a:	b29a      	uxth	r2, r3
 801911c:	4b81      	ldr	r3, [pc, #516]	; (8019324 <tcp_receive+0xb08>)
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	b29b      	uxth	r3, r3
 8019122:	1ad3      	subs	r3, r2, r3
 8019124:	b29a      	uxth	r2, r3
 8019126:	4b80      	ldr	r3, [pc, #512]	; (8019328 <tcp_receive+0xb0c>)
 8019128:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801912a:	4b7f      	ldr	r3, [pc, #508]	; (8019328 <tcp_receive+0xb0c>)
 801912c:	691b      	ldr	r3, [r3, #16]
 801912e:	899b      	ldrh	r3, [r3, #12]
 8019130:	b29b      	uxth	r3, r3
 8019132:	4618      	mov	r0, r3
 8019134:	f7f9 f952 	bl	80123dc <lwip_htons>
 8019138:	4603      	mov	r3, r0
 801913a:	b2db      	uxtb	r3, r3
 801913c:	f003 0302 	and.w	r3, r3, #2
 8019140:	2b00      	cmp	r3, #0
 8019142:	d005      	beq.n	8019150 <tcp_receive+0x934>
                inseg.len -= 1;
 8019144:	4b78      	ldr	r3, [pc, #480]	; (8019328 <tcp_receive+0xb0c>)
 8019146:	891b      	ldrh	r3, [r3, #8]
 8019148:	3b01      	subs	r3, #1
 801914a:	b29a      	uxth	r2, r3
 801914c:	4b76      	ldr	r3, [pc, #472]	; (8019328 <tcp_receive+0xb0c>)
 801914e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019150:	4b75      	ldr	r3, [pc, #468]	; (8019328 <tcp_receive+0xb0c>)
 8019152:	685b      	ldr	r3, [r3, #4]
 8019154:	4a74      	ldr	r2, [pc, #464]	; (8019328 <tcp_receive+0xb0c>)
 8019156:	8912      	ldrh	r2, [r2, #8]
 8019158:	4611      	mov	r1, r2
 801915a:	4618      	mov	r0, r3
 801915c:	f7fb fb46 	bl	80147ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019160:	4b71      	ldr	r3, [pc, #452]	; (8019328 <tcp_receive+0xb0c>)
 8019162:	891c      	ldrh	r4, [r3, #8]
 8019164:	4b70      	ldr	r3, [pc, #448]	; (8019328 <tcp_receive+0xb0c>)
 8019166:	691b      	ldr	r3, [r3, #16]
 8019168:	899b      	ldrh	r3, [r3, #12]
 801916a:	b29b      	uxth	r3, r3
 801916c:	4618      	mov	r0, r3
 801916e:	f7f9 f935 	bl	80123dc <lwip_htons>
 8019172:	4603      	mov	r3, r0
 8019174:	b2db      	uxtb	r3, r3
 8019176:	f003 0303 	and.w	r3, r3, #3
 801917a:	2b00      	cmp	r3, #0
 801917c:	d001      	beq.n	8019182 <tcp_receive+0x966>
 801917e:	2301      	movs	r3, #1
 8019180:	e000      	b.n	8019184 <tcp_receive+0x968>
 8019182:	2300      	movs	r3, #0
 8019184:	4423      	add	r3, r4
 8019186:	b29a      	uxth	r2, r3
 8019188:	4b65      	ldr	r3, [pc, #404]	; (8019320 <tcp_receive+0xb04>)
 801918a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801918c:	4b64      	ldr	r3, [pc, #400]	; (8019320 <tcp_receive+0xb04>)
 801918e:	881b      	ldrh	r3, [r3, #0]
 8019190:	461a      	mov	r2, r3
 8019192:	4b64      	ldr	r3, [pc, #400]	; (8019324 <tcp_receive+0xb08>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	441a      	add	r2, r3
 8019198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801919a:	691b      	ldr	r3, [r3, #16]
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	429a      	cmp	r2, r3
 80191a0:	d006      	beq.n	80191b0 <tcp_receive+0x994>
 80191a2:	4b62      	ldr	r3, [pc, #392]	; (801932c <tcp_receive+0xb10>)
 80191a4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80191a8:	4961      	ldr	r1, [pc, #388]	; (8019330 <tcp_receive+0xb14>)
 80191aa:	4862      	ldr	r0, [pc, #392]	; (8019334 <tcp_receive+0xb18>)
 80191ac:	f008 fd7e 	bl	8021cac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80191b4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80191b6:	4b5a      	ldr	r3, [pc, #360]	; (8019320 <tcp_receive+0xb04>)
 80191b8:	881b      	ldrh	r3, [r3, #0]
 80191ba:	461a      	mov	r2, r3
 80191bc:	4b59      	ldr	r3, [pc, #356]	; (8019324 <tcp_receive+0xb08>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	441a      	add	r2, r3
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80191ca:	4b55      	ldr	r3, [pc, #340]	; (8019320 <tcp_receive+0xb04>)
 80191cc:	881b      	ldrh	r3, [r3, #0]
 80191ce:	429a      	cmp	r2, r3
 80191d0:	d206      	bcs.n	80191e0 <tcp_receive+0x9c4>
 80191d2:	4b56      	ldr	r3, [pc, #344]	; (801932c <tcp_receive+0xb10>)
 80191d4:	f240 6207 	movw	r2, #1543	; 0x607
 80191d8:	4957      	ldr	r1, [pc, #348]	; (8019338 <tcp_receive+0xb1c>)
 80191da:	4856      	ldr	r0, [pc, #344]	; (8019334 <tcp_receive+0xb18>)
 80191dc:	f008 fd66 	bl	8021cac <iprintf>
        pcb->rcv_wnd -= tcplen;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80191e4:	4b4e      	ldr	r3, [pc, #312]	; (8019320 <tcp_receive+0xb04>)
 80191e6:	881b      	ldrh	r3, [r3, #0]
 80191e8:	1ad3      	subs	r3, r2, r3
 80191ea:	b29a      	uxth	r2, r3
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80191f0:	6878      	ldr	r0, [r7, #4]
 80191f2:	f7fc fd9d 	bl	8015d30 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80191f6:	4b4c      	ldr	r3, [pc, #304]	; (8019328 <tcp_receive+0xb0c>)
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	891b      	ldrh	r3, [r3, #8]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d006      	beq.n	801920e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019200:	4b49      	ldr	r3, [pc, #292]	; (8019328 <tcp_receive+0xb0c>)
 8019202:	685b      	ldr	r3, [r3, #4]
 8019204:	4a4d      	ldr	r2, [pc, #308]	; (801933c <tcp_receive+0xb20>)
 8019206:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019208:	4b47      	ldr	r3, [pc, #284]	; (8019328 <tcp_receive+0xb0c>)
 801920a:	2200      	movs	r2, #0
 801920c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801920e:	4b46      	ldr	r3, [pc, #280]	; (8019328 <tcp_receive+0xb0c>)
 8019210:	691b      	ldr	r3, [r3, #16]
 8019212:	899b      	ldrh	r3, [r3, #12]
 8019214:	b29b      	uxth	r3, r3
 8019216:	4618      	mov	r0, r3
 8019218:	f7f9 f8e0 	bl	80123dc <lwip_htons>
 801921c:	4603      	mov	r3, r0
 801921e:	b2db      	uxtb	r3, r3
 8019220:	f003 0301 	and.w	r3, r3, #1
 8019224:	2b00      	cmp	r3, #0
 8019226:	f000 80b8 	beq.w	801939a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801922a:	4b45      	ldr	r3, [pc, #276]	; (8019340 <tcp_receive+0xb24>)
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	f043 0320 	orr.w	r3, r3, #32
 8019232:	b2da      	uxtb	r2, r3
 8019234:	4b42      	ldr	r3, [pc, #264]	; (8019340 <tcp_receive+0xb24>)
 8019236:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019238:	e0af      	b.n	801939a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801923e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019244:	691b      	ldr	r3, [r3, #16]
 8019246:	685b      	ldr	r3, [r3, #4]
 8019248:	4a36      	ldr	r2, [pc, #216]	; (8019324 <tcp_receive+0xb08>)
 801924a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	891b      	ldrh	r3, [r3, #8]
 8019250:	461c      	mov	r4, r3
 8019252:	68bb      	ldr	r3, [r7, #8]
 8019254:	691b      	ldr	r3, [r3, #16]
 8019256:	899b      	ldrh	r3, [r3, #12]
 8019258:	b29b      	uxth	r3, r3
 801925a:	4618      	mov	r0, r3
 801925c:	f7f9 f8be 	bl	80123dc <lwip_htons>
 8019260:	4603      	mov	r3, r0
 8019262:	b2db      	uxtb	r3, r3
 8019264:	f003 0303 	and.w	r3, r3, #3
 8019268:	2b00      	cmp	r3, #0
 801926a:	d001      	beq.n	8019270 <tcp_receive+0xa54>
 801926c:	2301      	movs	r3, #1
 801926e:	e000      	b.n	8019272 <tcp_receive+0xa56>
 8019270:	2300      	movs	r3, #0
 8019272:	191a      	adds	r2, r3, r4
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019278:	441a      	add	r2, r3
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019282:	461c      	mov	r4, r3
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	891b      	ldrh	r3, [r3, #8]
 8019288:	461d      	mov	r5, r3
 801928a:	68bb      	ldr	r3, [r7, #8]
 801928c:	691b      	ldr	r3, [r3, #16]
 801928e:	899b      	ldrh	r3, [r3, #12]
 8019290:	b29b      	uxth	r3, r3
 8019292:	4618      	mov	r0, r3
 8019294:	f7f9 f8a2 	bl	80123dc <lwip_htons>
 8019298:	4603      	mov	r3, r0
 801929a:	b2db      	uxtb	r3, r3
 801929c:	f003 0303 	and.w	r3, r3, #3
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d001      	beq.n	80192a8 <tcp_receive+0xa8c>
 80192a4:	2301      	movs	r3, #1
 80192a6:	e000      	b.n	80192aa <tcp_receive+0xa8e>
 80192a8:	2300      	movs	r3, #0
 80192aa:	442b      	add	r3, r5
 80192ac:	429c      	cmp	r4, r3
 80192ae:	d206      	bcs.n	80192be <tcp_receive+0xaa2>
 80192b0:	4b1e      	ldr	r3, [pc, #120]	; (801932c <tcp_receive+0xb10>)
 80192b2:	f240 622b 	movw	r2, #1579	; 0x62b
 80192b6:	4923      	ldr	r1, [pc, #140]	; (8019344 <tcp_receive+0xb28>)
 80192b8:	481e      	ldr	r0, [pc, #120]	; (8019334 <tcp_receive+0xb18>)
 80192ba:	f008 fcf7 	bl	8021cac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80192be:	68bb      	ldr	r3, [r7, #8]
 80192c0:	891b      	ldrh	r3, [r3, #8]
 80192c2:	461c      	mov	r4, r3
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	691b      	ldr	r3, [r3, #16]
 80192c8:	899b      	ldrh	r3, [r3, #12]
 80192ca:	b29b      	uxth	r3, r3
 80192cc:	4618      	mov	r0, r3
 80192ce:	f7f9 f885 	bl	80123dc <lwip_htons>
 80192d2:	4603      	mov	r3, r0
 80192d4:	b2db      	uxtb	r3, r3
 80192d6:	f003 0303 	and.w	r3, r3, #3
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d001      	beq.n	80192e2 <tcp_receive+0xac6>
 80192de:	2301      	movs	r3, #1
 80192e0:	e000      	b.n	80192e4 <tcp_receive+0xac8>
 80192e2:	2300      	movs	r3, #0
 80192e4:	1919      	adds	r1, r3, r4
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80192ea:	b28b      	uxth	r3, r1
 80192ec:	1ad3      	subs	r3, r2, r3
 80192ee:	b29a      	uxth	r2, r3
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	f7fc fd1b 	bl	8015d30 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	685b      	ldr	r3, [r3, #4]
 80192fe:	891b      	ldrh	r3, [r3, #8]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d028      	beq.n	8019356 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019304:	4b0d      	ldr	r3, [pc, #52]	; (801933c <tcp_receive+0xb20>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d01d      	beq.n	8019348 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801930c:	4b0b      	ldr	r3, [pc, #44]	; (801933c <tcp_receive+0xb20>)
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	685b      	ldr	r3, [r3, #4]
 8019314:	4619      	mov	r1, r3
 8019316:	4610      	mov	r0, r2
 8019318:	f7fb fcee 	bl	8014cf8 <pbuf_cat>
 801931c:	e018      	b.n	8019350 <tcp_receive+0xb34>
 801931e:	bf00      	nop
 8019320:	200143ae 	.word	0x200143ae
 8019324:	200143a4 	.word	0x200143a4
 8019328:	20014380 	.word	0x20014380
 801932c:	08027c44 	.word	0x08027c44
 8019330:	08028024 	.word	0x08028024
 8019334:	08027c90 	.word	0x08027c90
 8019338:	08028060 	.word	0x08028060
 801933c:	200143b4 	.word	0x200143b4
 8019340:	200143b1 	.word	0x200143b1
 8019344:	08028080 	.word	0x08028080
            } else {
              recv_data = cseg->p;
 8019348:	68bb      	ldr	r3, [r7, #8]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	4a70      	ldr	r2, [pc, #448]	; (8019510 <tcp_receive+0xcf4>)
 801934e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	2200      	movs	r2, #0
 8019354:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	691b      	ldr	r3, [r3, #16]
 801935a:	899b      	ldrh	r3, [r3, #12]
 801935c:	b29b      	uxth	r3, r3
 801935e:	4618      	mov	r0, r3
 8019360:	f7f9 f83c 	bl	80123dc <lwip_htons>
 8019364:	4603      	mov	r3, r0
 8019366:	b2db      	uxtb	r3, r3
 8019368:	f003 0301 	and.w	r3, r3, #1
 801936c:	2b00      	cmp	r3, #0
 801936e:	d00d      	beq.n	801938c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019370:	4b68      	ldr	r3, [pc, #416]	; (8019514 <tcp_receive+0xcf8>)
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	f043 0320 	orr.w	r3, r3, #32
 8019378:	b2da      	uxtb	r2, r3
 801937a:	4b66      	ldr	r3, [pc, #408]	; (8019514 <tcp_receive+0xcf8>)
 801937c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	7d1b      	ldrb	r3, [r3, #20]
 8019382:	2b04      	cmp	r3, #4
 8019384:	d102      	bne.n	801938c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	2207      	movs	r2, #7
 801938a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	681a      	ldr	r2, [r3, #0]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019394:	68b8      	ldr	r0, [r7, #8]
 8019396:	f7fd fb08 	bl	80169aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d008      	beq.n	80193b4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80193a6:	691b      	ldr	r3, [r3, #16]
 80193a8:	685a      	ldr	r2, [r3, #4]
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80193ae:	429a      	cmp	r2, r3
 80193b0:	f43f af43 	beq.w	801923a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	8b5b      	ldrh	r3, [r3, #26]
 80193b8:	f003 0301 	and.w	r3, r3, #1
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d00e      	beq.n	80193de <tcp_receive+0xbc2>
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	8b5b      	ldrh	r3, [r3, #26]
 80193c4:	f023 0301 	bic.w	r3, r3, #1
 80193c8:	b29a      	uxth	r2, r3
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	835a      	strh	r2, [r3, #26]
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	8b5b      	ldrh	r3, [r3, #26]
 80193d2:	f043 0302 	orr.w	r3, r3, #2
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80193dc:	e188      	b.n	80196f0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	8b5b      	ldrh	r3, [r3, #26]
 80193e2:	f043 0301 	orr.w	r3, r3, #1
 80193e6:	b29a      	uxth	r2, r3
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80193ec:	e180      	b.n	80196f0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d106      	bne.n	8019404 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80193f6:	4848      	ldr	r0, [pc, #288]	; (8019518 <tcp_receive+0xcfc>)
 80193f8:	f7fd faf0 	bl	80169dc <tcp_seg_copy>
 80193fc:	4602      	mov	r2, r0
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	675a      	str	r2, [r3, #116]	; 0x74
 8019402:	e16d      	b.n	80196e0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019404:	2300      	movs	r3, #0
 8019406:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801940c:	63bb      	str	r3, [r7, #56]	; 0x38
 801940e:	e157      	b.n	80196c0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019412:	691b      	ldr	r3, [r3, #16]
 8019414:	685a      	ldr	r2, [r3, #4]
 8019416:	4b41      	ldr	r3, [pc, #260]	; (801951c <tcp_receive+0xd00>)
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	429a      	cmp	r2, r3
 801941c:	d11d      	bne.n	801945a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801941e:	4b3e      	ldr	r3, [pc, #248]	; (8019518 <tcp_receive+0xcfc>)
 8019420:	891a      	ldrh	r2, [r3, #8]
 8019422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019424:	891b      	ldrh	r3, [r3, #8]
 8019426:	429a      	cmp	r2, r3
 8019428:	f240 814f 	bls.w	80196ca <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801942c:	483a      	ldr	r0, [pc, #232]	; (8019518 <tcp_receive+0xcfc>)
 801942e:	f7fd fad5 	bl	80169dc <tcp_seg_copy>
 8019432:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019434:	697b      	ldr	r3, [r7, #20]
 8019436:	2b00      	cmp	r3, #0
 8019438:	f000 8149 	beq.w	80196ce <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801943c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801943e:	2b00      	cmp	r3, #0
 8019440:	d003      	beq.n	801944a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019444:	697a      	ldr	r2, [r7, #20]
 8019446:	601a      	str	r2, [r3, #0]
 8019448:	e002      	b.n	8019450 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	697a      	ldr	r2, [r7, #20]
 801944e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019452:	6978      	ldr	r0, [r7, #20]
 8019454:	f7ff f8de 	bl	8018614 <tcp_oos_insert_segment>
                }
                break;
 8019458:	e139      	b.n	80196ce <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801945c:	2b00      	cmp	r3, #0
 801945e:	d117      	bne.n	8019490 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019460:	4b2e      	ldr	r3, [pc, #184]	; (801951c <tcp_receive+0xd00>)
 8019462:	681a      	ldr	r2, [r3, #0]
 8019464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019466:	691b      	ldr	r3, [r3, #16]
 8019468:	685b      	ldr	r3, [r3, #4]
 801946a:	1ad3      	subs	r3, r2, r3
 801946c:	2b00      	cmp	r3, #0
 801946e:	da57      	bge.n	8019520 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019470:	4829      	ldr	r0, [pc, #164]	; (8019518 <tcp_receive+0xcfc>)
 8019472:	f7fd fab3 	bl	80169dc <tcp_seg_copy>
 8019476:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019478:	69bb      	ldr	r3, [r7, #24]
 801947a:	2b00      	cmp	r3, #0
 801947c:	f000 8129 	beq.w	80196d2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	69ba      	ldr	r2, [r7, #24]
 8019484:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019486:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019488:	69b8      	ldr	r0, [r7, #24]
 801948a:	f7ff f8c3 	bl	8018614 <tcp_oos_insert_segment>
                  }
                  break;
 801948e:	e120      	b.n	80196d2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019490:	4b22      	ldr	r3, [pc, #136]	; (801951c <tcp_receive+0xd00>)
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019496:	691b      	ldr	r3, [r3, #16]
 8019498:	685b      	ldr	r3, [r3, #4]
 801949a:	1ad3      	subs	r3, r2, r3
 801949c:	3b01      	subs	r3, #1
 801949e:	2b00      	cmp	r3, #0
 80194a0:	db3e      	blt.n	8019520 <tcp_receive+0xd04>
 80194a2:	4b1e      	ldr	r3, [pc, #120]	; (801951c <tcp_receive+0xd00>)
 80194a4:	681a      	ldr	r2, [r3, #0]
 80194a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194a8:	691b      	ldr	r3, [r3, #16]
 80194aa:	685b      	ldr	r3, [r3, #4]
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	3301      	adds	r3, #1
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	dc35      	bgt.n	8019520 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80194b4:	4818      	ldr	r0, [pc, #96]	; (8019518 <tcp_receive+0xcfc>)
 80194b6:	f7fd fa91 	bl	80169dc <tcp_seg_copy>
 80194ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80194bc:	69fb      	ldr	r3, [r7, #28]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	f000 8109 	beq.w	80196d6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80194c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194c6:	691b      	ldr	r3, [r3, #16]
 80194c8:	685b      	ldr	r3, [r3, #4]
 80194ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80194cc:	8912      	ldrh	r2, [r2, #8]
 80194ce:	441a      	add	r2, r3
 80194d0:	4b12      	ldr	r3, [pc, #72]	; (801951c <tcp_receive+0xd00>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	1ad3      	subs	r3, r2, r3
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	dd12      	ble.n	8019500 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80194da:	4b10      	ldr	r3, [pc, #64]	; (801951c <tcp_receive+0xd00>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	b29a      	uxth	r2, r3
 80194e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194e2:	691b      	ldr	r3, [r3, #16]
 80194e4:	685b      	ldr	r3, [r3, #4]
 80194e6:	b29b      	uxth	r3, r3
 80194e8:	1ad3      	subs	r3, r2, r3
 80194ea:	b29a      	uxth	r2, r3
 80194ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80194f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194f2:	685a      	ldr	r2, [r3, #4]
 80194f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194f6:	891b      	ldrh	r3, [r3, #8]
 80194f8:	4619      	mov	r1, r3
 80194fa:	4610      	mov	r0, r2
 80194fc:	f7fb f976 	bl	80147ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019502:	69fa      	ldr	r2, [r7, #28]
 8019504:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019508:	69f8      	ldr	r0, [r7, #28]
 801950a:	f7ff f883 	bl	8018614 <tcp_oos_insert_segment>
                  }
                  break;
 801950e:	e0e2      	b.n	80196d6 <tcp_receive+0xeba>
 8019510:	200143b4 	.word	0x200143b4
 8019514:	200143b1 	.word	0x200143b1
 8019518:	20014380 	.word	0x20014380
 801951c:	200143a4 	.word	0x200143a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019522:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	2b00      	cmp	r3, #0
 801952a:	f040 80c6 	bne.w	80196ba <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801952e:	4b80      	ldr	r3, [pc, #512]	; (8019730 <tcp_receive+0xf14>)
 8019530:	681a      	ldr	r2, [r3, #0]
 8019532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019534:	691b      	ldr	r3, [r3, #16]
 8019536:	685b      	ldr	r3, [r3, #4]
 8019538:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801953a:	2b00      	cmp	r3, #0
 801953c:	f340 80bd 	ble.w	80196ba <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019542:	691b      	ldr	r3, [r3, #16]
 8019544:	899b      	ldrh	r3, [r3, #12]
 8019546:	b29b      	uxth	r3, r3
 8019548:	4618      	mov	r0, r3
 801954a:	f7f8 ff47 	bl	80123dc <lwip_htons>
 801954e:	4603      	mov	r3, r0
 8019550:	b2db      	uxtb	r3, r3
 8019552:	f003 0301 	and.w	r3, r3, #1
 8019556:	2b00      	cmp	r3, #0
 8019558:	f040 80bf 	bne.w	80196da <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801955c:	4875      	ldr	r0, [pc, #468]	; (8019734 <tcp_receive+0xf18>)
 801955e:	f7fd fa3d 	bl	80169dc <tcp_seg_copy>
 8019562:	4602      	mov	r2, r0
 8019564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019566:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	2b00      	cmp	r3, #0
 801956e:	f000 80b6 	beq.w	80196de <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019574:	691b      	ldr	r3, [r3, #16]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801957a:	8912      	ldrh	r2, [r2, #8]
 801957c:	441a      	add	r2, r3
 801957e:	4b6c      	ldr	r3, [pc, #432]	; (8019730 <tcp_receive+0xf14>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	1ad3      	subs	r3, r2, r3
 8019584:	2b00      	cmp	r3, #0
 8019586:	dd12      	ble.n	80195ae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019588:	4b69      	ldr	r3, [pc, #420]	; (8019730 <tcp_receive+0xf14>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	b29a      	uxth	r2, r3
 801958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019590:	691b      	ldr	r3, [r3, #16]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	b29b      	uxth	r3, r3
 8019596:	1ad3      	subs	r3, r2, r3
 8019598:	b29a      	uxth	r2, r3
 801959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801959c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a0:	685a      	ldr	r2, [r3, #4]
 80195a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a4:	891b      	ldrh	r3, [r3, #8]
 80195a6:	4619      	mov	r1, r3
 80195a8:	4610      	mov	r0, r2
 80195aa:	f7fb f91f 	bl	80147ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80195ae:	4b62      	ldr	r3, [pc, #392]	; (8019738 <tcp_receive+0xf1c>)
 80195b0:	881b      	ldrh	r3, [r3, #0]
 80195b2:	461a      	mov	r2, r3
 80195b4:	4b5e      	ldr	r3, [pc, #376]	; (8019730 <tcp_receive+0xf14>)
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	441a      	add	r2, r3
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195be:	6879      	ldr	r1, [r7, #4]
 80195c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80195c2:	440b      	add	r3, r1
 80195c4:	1ad3      	subs	r3, r2, r3
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	f340 8089 	ble.w	80196de <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80195cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	691b      	ldr	r3, [r3, #16]
 80195d2:	899b      	ldrh	r3, [r3, #12]
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	4618      	mov	r0, r3
 80195d8:	f7f8 ff00 	bl	80123dc <lwip_htons>
 80195dc:	4603      	mov	r3, r0
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	f003 0301 	and.w	r3, r3, #1
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d022      	beq.n	801962e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80195e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	691b      	ldr	r3, [r3, #16]
 80195ee:	899b      	ldrh	r3, [r3, #12]
 80195f0:	b29b      	uxth	r3, r3
 80195f2:	b21b      	sxth	r3, r3
 80195f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80195f8:	b21c      	sxth	r4, r3
 80195fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	691b      	ldr	r3, [r3, #16]
 8019600:	899b      	ldrh	r3, [r3, #12]
 8019602:	b29b      	uxth	r3, r3
 8019604:	4618      	mov	r0, r3
 8019606:	f7f8 fee9 	bl	80123dc <lwip_htons>
 801960a:	4603      	mov	r3, r0
 801960c:	b2db      	uxtb	r3, r3
 801960e:	b29b      	uxth	r3, r3
 8019610:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019614:	b29b      	uxth	r3, r3
 8019616:	4618      	mov	r0, r3
 8019618:	f7f8 fee0 	bl	80123dc <lwip_htons>
 801961c:	4603      	mov	r3, r0
 801961e:	b21b      	sxth	r3, r3
 8019620:	4323      	orrs	r3, r4
 8019622:	b21a      	sxth	r2, r3
 8019624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	691b      	ldr	r3, [r3, #16]
 801962a:	b292      	uxth	r2, r2
 801962c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019632:	b29a      	uxth	r2, r3
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019638:	4413      	add	r3, r2
 801963a:	b299      	uxth	r1, r3
 801963c:	4b3c      	ldr	r3, [pc, #240]	; (8019730 <tcp_receive+0xf14>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	b29a      	uxth	r2, r3
 8019642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	1a8a      	subs	r2, r1, r2
 8019648:	b292      	uxth	r2, r2
 801964a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	685a      	ldr	r2, [r3, #4]
 8019652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	891b      	ldrh	r3, [r3, #8]
 8019658:	4619      	mov	r1, r3
 801965a:	4610      	mov	r0, r2
 801965c:	f7fb f8c6 	bl	80147ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	891c      	ldrh	r4, [r3, #8]
 8019666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	691b      	ldr	r3, [r3, #16]
 801966c:	899b      	ldrh	r3, [r3, #12]
 801966e:	b29b      	uxth	r3, r3
 8019670:	4618      	mov	r0, r3
 8019672:	f7f8 feb3 	bl	80123dc <lwip_htons>
 8019676:	4603      	mov	r3, r0
 8019678:	b2db      	uxtb	r3, r3
 801967a:	f003 0303 	and.w	r3, r3, #3
 801967e:	2b00      	cmp	r3, #0
 8019680:	d001      	beq.n	8019686 <tcp_receive+0xe6a>
 8019682:	2301      	movs	r3, #1
 8019684:	e000      	b.n	8019688 <tcp_receive+0xe6c>
 8019686:	2300      	movs	r3, #0
 8019688:	4423      	add	r3, r4
 801968a:	b29a      	uxth	r2, r3
 801968c:	4b2a      	ldr	r3, [pc, #168]	; (8019738 <tcp_receive+0xf1c>)
 801968e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019690:	4b29      	ldr	r3, [pc, #164]	; (8019738 <tcp_receive+0xf1c>)
 8019692:	881b      	ldrh	r3, [r3, #0]
 8019694:	461a      	mov	r2, r3
 8019696:	4b26      	ldr	r3, [pc, #152]	; (8019730 <tcp_receive+0xf14>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	441a      	add	r2, r3
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a0:	6879      	ldr	r1, [r7, #4]
 80196a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80196a4:	440b      	add	r3, r1
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d019      	beq.n	80196de <tcp_receive+0xec2>
 80196aa:	4b24      	ldr	r3, [pc, #144]	; (801973c <tcp_receive+0xf20>)
 80196ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80196b0:	4923      	ldr	r1, [pc, #140]	; (8019740 <tcp_receive+0xf24>)
 80196b2:	4824      	ldr	r0, [pc, #144]	; (8019744 <tcp_receive+0xf28>)
 80196b4:	f008 fafa 	bl	8021cac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80196b8:	e011      	b.n	80196de <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80196ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	63bb      	str	r3, [r7, #56]	; 0x38
 80196c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	f47f aea4 	bne.w	8019410 <tcp_receive+0xbf4>
 80196c8:	e00a      	b.n	80196e0 <tcp_receive+0xec4>
                break;
 80196ca:	bf00      	nop
 80196cc:	e008      	b.n	80196e0 <tcp_receive+0xec4>
                break;
 80196ce:	bf00      	nop
 80196d0:	e006      	b.n	80196e0 <tcp_receive+0xec4>
                  break;
 80196d2:	bf00      	nop
 80196d4:	e004      	b.n	80196e0 <tcp_receive+0xec4>
                  break;
 80196d6:	bf00      	nop
 80196d8:	e002      	b.n	80196e0 <tcp_receive+0xec4>
                  break;
 80196da:	bf00      	nop
 80196dc:	e000      	b.n	80196e0 <tcp_receive+0xec4>
                break;
 80196de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80196e0:	6878      	ldr	r0, [r7, #4]
 80196e2:	f001 fef7 	bl	801b4d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80196e6:	e003      	b.n	80196f0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80196e8:	6878      	ldr	r0, [r7, #4]
 80196ea:	f001 fef3 	bl	801b4d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80196ee:	e01a      	b.n	8019726 <tcp_receive+0xf0a>
 80196f0:	e019      	b.n	8019726 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80196f2:	4b0f      	ldr	r3, [pc, #60]	; (8019730 <tcp_receive+0xf14>)
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196fa:	1ad3      	subs	r3, r2, r3
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	db0a      	blt.n	8019716 <tcp_receive+0xefa>
 8019700:	4b0b      	ldr	r3, [pc, #44]	; (8019730 <tcp_receive+0xf14>)
 8019702:	681a      	ldr	r2, [r3, #0]
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019708:	6879      	ldr	r1, [r7, #4]
 801970a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801970c:	440b      	add	r3, r1
 801970e:	1ad3      	subs	r3, r2, r3
 8019710:	3301      	adds	r3, #1
 8019712:	2b00      	cmp	r3, #0
 8019714:	dd07      	ble.n	8019726 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	8b5b      	ldrh	r3, [r3, #26]
 801971a:	f043 0302 	orr.w	r3, r3, #2
 801971e:	b29a      	uxth	r2, r3
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019724:	e7ff      	b.n	8019726 <tcp_receive+0xf0a>
 8019726:	bf00      	nop
 8019728:	3750      	adds	r7, #80	; 0x50
 801972a:	46bd      	mov	sp, r7
 801972c:	bdb0      	pop	{r4, r5, r7, pc}
 801972e:	bf00      	nop
 8019730:	200143a4 	.word	0x200143a4
 8019734:	20014380 	.word	0x20014380
 8019738:	200143ae 	.word	0x200143ae
 801973c:	08027c44 	.word	0x08027c44
 8019740:	08027fec 	.word	0x08027fec
 8019744:	08027c90 	.word	0x08027c90

08019748 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019748:	b480      	push	{r7}
 801974a:	b083      	sub	sp, #12
 801974c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801974e:	4b15      	ldr	r3, [pc, #84]	; (80197a4 <tcp_get_next_optbyte+0x5c>)
 8019750:	881b      	ldrh	r3, [r3, #0]
 8019752:	1c5a      	adds	r2, r3, #1
 8019754:	b291      	uxth	r1, r2
 8019756:	4a13      	ldr	r2, [pc, #76]	; (80197a4 <tcp_get_next_optbyte+0x5c>)
 8019758:	8011      	strh	r1, [r2, #0]
 801975a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801975c:	4b12      	ldr	r3, [pc, #72]	; (80197a8 <tcp_get_next_optbyte+0x60>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d004      	beq.n	801976e <tcp_get_next_optbyte+0x26>
 8019764:	4b11      	ldr	r3, [pc, #68]	; (80197ac <tcp_get_next_optbyte+0x64>)
 8019766:	881b      	ldrh	r3, [r3, #0]
 8019768:	88fa      	ldrh	r2, [r7, #6]
 801976a:	429a      	cmp	r2, r3
 801976c:	d208      	bcs.n	8019780 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801976e:	4b10      	ldr	r3, [pc, #64]	; (80197b0 <tcp_get_next_optbyte+0x68>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	3314      	adds	r3, #20
 8019774:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019776:	88fb      	ldrh	r3, [r7, #6]
 8019778:	683a      	ldr	r2, [r7, #0]
 801977a:	4413      	add	r3, r2
 801977c:	781b      	ldrb	r3, [r3, #0]
 801977e:	e00b      	b.n	8019798 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019780:	88fb      	ldrh	r3, [r7, #6]
 8019782:	b2da      	uxtb	r2, r3
 8019784:	4b09      	ldr	r3, [pc, #36]	; (80197ac <tcp_get_next_optbyte+0x64>)
 8019786:	881b      	ldrh	r3, [r3, #0]
 8019788:	b2db      	uxtb	r3, r3
 801978a:	1ad3      	subs	r3, r2, r3
 801978c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801978e:	4b06      	ldr	r3, [pc, #24]	; (80197a8 <tcp_get_next_optbyte+0x60>)
 8019790:	681a      	ldr	r2, [r3, #0]
 8019792:	797b      	ldrb	r3, [r7, #5]
 8019794:	4413      	add	r3, r2
 8019796:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019798:	4618      	mov	r0, r3
 801979a:	370c      	adds	r7, #12
 801979c:	46bd      	mov	sp, r7
 801979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a2:	4770      	bx	lr
 80197a4:	200143a0 	.word	0x200143a0
 80197a8:	2001439c 	.word	0x2001439c
 80197ac:	2001439a 	.word	0x2001439a
 80197b0:	20014394 	.word	0x20014394

080197b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d106      	bne.n	80197d0 <tcp_parseopt+0x1c>
 80197c2:	4b32      	ldr	r3, [pc, #200]	; (801988c <tcp_parseopt+0xd8>)
 80197c4:	f240 727d 	movw	r2, #1917	; 0x77d
 80197c8:	4931      	ldr	r1, [pc, #196]	; (8019890 <tcp_parseopt+0xdc>)
 80197ca:	4832      	ldr	r0, [pc, #200]	; (8019894 <tcp_parseopt+0xe0>)
 80197cc:	f008 fa6e 	bl	8021cac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80197d0:	4b31      	ldr	r3, [pc, #196]	; (8019898 <tcp_parseopt+0xe4>)
 80197d2:	881b      	ldrh	r3, [r3, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d055      	beq.n	8019884 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80197d8:	4b30      	ldr	r3, [pc, #192]	; (801989c <tcp_parseopt+0xe8>)
 80197da:	2200      	movs	r2, #0
 80197dc:	801a      	strh	r2, [r3, #0]
 80197de:	e045      	b.n	801986c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80197e0:	f7ff ffb2 	bl	8019748 <tcp_get_next_optbyte>
 80197e4:	4603      	mov	r3, r0
 80197e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80197e8:	7bfb      	ldrb	r3, [r7, #15]
 80197ea:	2b02      	cmp	r3, #2
 80197ec:	d006      	beq.n	80197fc <tcp_parseopt+0x48>
 80197ee:	2b02      	cmp	r3, #2
 80197f0:	dc2b      	bgt.n	801984a <tcp_parseopt+0x96>
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d041      	beq.n	801987a <tcp_parseopt+0xc6>
 80197f6:	2b01      	cmp	r3, #1
 80197f8:	d127      	bne.n	801984a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80197fa:	e037      	b.n	801986c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80197fc:	f7ff ffa4 	bl	8019748 <tcp_get_next_optbyte>
 8019800:	4603      	mov	r3, r0
 8019802:	2b04      	cmp	r3, #4
 8019804:	d13b      	bne.n	801987e <tcp_parseopt+0xca>
 8019806:	4b25      	ldr	r3, [pc, #148]	; (801989c <tcp_parseopt+0xe8>)
 8019808:	881b      	ldrh	r3, [r3, #0]
 801980a:	3301      	adds	r3, #1
 801980c:	4a22      	ldr	r2, [pc, #136]	; (8019898 <tcp_parseopt+0xe4>)
 801980e:	8812      	ldrh	r2, [r2, #0]
 8019810:	4293      	cmp	r3, r2
 8019812:	da34      	bge.n	801987e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019814:	f7ff ff98 	bl	8019748 <tcp_get_next_optbyte>
 8019818:	4603      	mov	r3, r0
 801981a:	b29b      	uxth	r3, r3
 801981c:	021b      	lsls	r3, r3, #8
 801981e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019820:	f7ff ff92 	bl	8019748 <tcp_get_next_optbyte>
 8019824:	4603      	mov	r3, r0
 8019826:	b29a      	uxth	r2, r3
 8019828:	89bb      	ldrh	r3, [r7, #12]
 801982a:	4313      	orrs	r3, r2
 801982c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801982e:	89bb      	ldrh	r3, [r7, #12]
 8019830:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019834:	d804      	bhi.n	8019840 <tcp_parseopt+0x8c>
 8019836:	89bb      	ldrh	r3, [r7, #12]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d001      	beq.n	8019840 <tcp_parseopt+0x8c>
 801983c:	89ba      	ldrh	r2, [r7, #12]
 801983e:	e001      	b.n	8019844 <tcp_parseopt+0x90>
 8019840:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019848:	e010      	b.n	801986c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801984a:	f7ff ff7d 	bl	8019748 <tcp_get_next_optbyte>
 801984e:	4603      	mov	r3, r0
 8019850:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019852:	7afb      	ldrb	r3, [r7, #11]
 8019854:	2b01      	cmp	r3, #1
 8019856:	d914      	bls.n	8019882 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019858:	7afb      	ldrb	r3, [r7, #11]
 801985a:	b29a      	uxth	r2, r3
 801985c:	4b0f      	ldr	r3, [pc, #60]	; (801989c <tcp_parseopt+0xe8>)
 801985e:	881b      	ldrh	r3, [r3, #0]
 8019860:	4413      	add	r3, r2
 8019862:	b29b      	uxth	r3, r3
 8019864:	3b02      	subs	r3, #2
 8019866:	b29a      	uxth	r2, r3
 8019868:	4b0c      	ldr	r3, [pc, #48]	; (801989c <tcp_parseopt+0xe8>)
 801986a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801986c:	4b0b      	ldr	r3, [pc, #44]	; (801989c <tcp_parseopt+0xe8>)
 801986e:	881a      	ldrh	r2, [r3, #0]
 8019870:	4b09      	ldr	r3, [pc, #36]	; (8019898 <tcp_parseopt+0xe4>)
 8019872:	881b      	ldrh	r3, [r3, #0]
 8019874:	429a      	cmp	r2, r3
 8019876:	d3b3      	bcc.n	80197e0 <tcp_parseopt+0x2c>
 8019878:	e004      	b.n	8019884 <tcp_parseopt+0xd0>
          return;
 801987a:	bf00      	nop
 801987c:	e002      	b.n	8019884 <tcp_parseopt+0xd0>
            return;
 801987e:	bf00      	nop
 8019880:	e000      	b.n	8019884 <tcp_parseopt+0xd0>
            return;
 8019882:	bf00      	nop
      }
    }
  }
}
 8019884:	3710      	adds	r7, #16
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	08027c44 	.word	0x08027c44
 8019890:	080280a8 	.word	0x080280a8
 8019894:	08027c90 	.word	0x08027c90
 8019898:	20014398 	.word	0x20014398
 801989c:	200143a0 	.word	0x200143a0

080198a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80198a0:	b480      	push	{r7}
 80198a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80198a4:	4b05      	ldr	r3, [pc, #20]	; (80198bc <tcp_trigger_input_pcb_close+0x1c>)
 80198a6:	781b      	ldrb	r3, [r3, #0]
 80198a8:	f043 0310 	orr.w	r3, r3, #16
 80198ac:	b2da      	uxtb	r2, r3
 80198ae:	4b03      	ldr	r3, [pc, #12]	; (80198bc <tcp_trigger_input_pcb_close+0x1c>)
 80198b0:	701a      	strb	r2, [r3, #0]
}
 80198b2:	bf00      	nop
 80198b4:	46bd      	mov	sp, r7
 80198b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ba:	4770      	bx	lr
 80198bc:	200143b1 	.word	0x200143b1

080198c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b084      	sub	sp, #16
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	60f8      	str	r0, [r7, #12]
 80198c8:	60b9      	str	r1, [r7, #8]
 80198ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80198cc:	68fb      	ldr	r3, [r7, #12]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d00a      	beq.n	80198e8 <tcp_route+0x28>
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	7a1b      	ldrb	r3, [r3, #8]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d006      	beq.n	80198e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	7a1b      	ldrb	r3, [r3, #8]
 80198de:	4618      	mov	r0, r3
 80198e0:	f7fa fd7c 	bl	80143dc <netif_get_by_index>
 80198e4:	4603      	mov	r3, r0
 80198e6:	e003      	b.n	80198f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80198e8:	6878      	ldr	r0, [r7, #4]
 80198ea:	f005 fe5f 	bl	801f5ac <ip4_route>
 80198ee:	4603      	mov	r3, r0
  }
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	3710      	adds	r7, #16
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}

080198f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80198f8:	b590      	push	{r4, r7, lr}
 80198fa:	b087      	sub	sp, #28
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	60f8      	str	r0, [r7, #12]
 8019900:	60b9      	str	r1, [r7, #8]
 8019902:	603b      	str	r3, [r7, #0]
 8019904:	4613      	mov	r3, r2
 8019906:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d105      	bne.n	801991a <tcp_create_segment+0x22>
 801990e:	4b45      	ldr	r3, [pc, #276]	; (8019a24 <tcp_create_segment+0x12c>)
 8019910:	22a3      	movs	r2, #163	; 0xa3
 8019912:	4945      	ldr	r1, [pc, #276]	; (8019a28 <tcp_create_segment+0x130>)
 8019914:	4845      	ldr	r0, [pc, #276]	; (8019a2c <tcp_create_segment+0x134>)
 8019916:	f008 f9c9 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801991a:	68bb      	ldr	r3, [r7, #8]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d105      	bne.n	801992c <tcp_create_segment+0x34>
 8019920:	4b40      	ldr	r3, [pc, #256]	; (8019a24 <tcp_create_segment+0x12c>)
 8019922:	22a4      	movs	r2, #164	; 0xa4
 8019924:	4942      	ldr	r1, [pc, #264]	; (8019a30 <tcp_create_segment+0x138>)
 8019926:	4841      	ldr	r0, [pc, #260]	; (8019a2c <tcp_create_segment+0x134>)
 8019928:	f008 f9c0 	bl	8021cac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801992c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019930:	009b      	lsls	r3, r3, #2
 8019932:	b2db      	uxtb	r3, r3
 8019934:	f003 0304 	and.w	r3, r3, #4
 8019938:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801993a:	2003      	movs	r0, #3
 801993c:	f7fa f9da 	bl	8013cf4 <memp_malloc>
 8019940:	6138      	str	r0, [r7, #16]
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d104      	bne.n	8019952 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019948:	68b8      	ldr	r0, [r7, #8]
 801994a:	f7fb f907 	bl	8014b5c <pbuf_free>
    return NULL;
 801994e:	2300      	movs	r3, #0
 8019950:	e064      	b.n	8019a1c <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019958:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801995a:	693b      	ldr	r3, [r7, #16]
 801995c:	2200      	movs	r2, #0
 801995e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019960:	693b      	ldr	r3, [r7, #16]
 8019962:	68ba      	ldr	r2, [r7, #8]
 8019964:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	891a      	ldrh	r2, [r3, #8]
 801996a:	7dfb      	ldrb	r3, [r7, #23]
 801996c:	b29b      	uxth	r3, r3
 801996e:	429a      	cmp	r2, r3
 8019970:	d205      	bcs.n	801997e <tcp_create_segment+0x86>
 8019972:	4b2c      	ldr	r3, [pc, #176]	; (8019a24 <tcp_create_segment+0x12c>)
 8019974:	22b0      	movs	r2, #176	; 0xb0
 8019976:	492f      	ldr	r1, [pc, #188]	; (8019a34 <tcp_create_segment+0x13c>)
 8019978:	482c      	ldr	r0, [pc, #176]	; (8019a2c <tcp_create_segment+0x134>)
 801997a:	f008 f997 	bl	8021cac <iprintf>
  seg->len = p->tot_len - optlen;
 801997e:	68bb      	ldr	r3, [r7, #8]
 8019980:	891a      	ldrh	r2, [r3, #8]
 8019982:	7dfb      	ldrb	r3, [r7, #23]
 8019984:	b29b      	uxth	r3, r3
 8019986:	1ad3      	subs	r3, r2, r3
 8019988:	b29a      	uxth	r2, r3
 801998a:	693b      	ldr	r3, [r7, #16]
 801998c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801998e:	693b      	ldr	r3, [r7, #16]
 8019990:	2200      	movs	r2, #0
 8019992:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019994:	2114      	movs	r1, #20
 8019996:	68b8      	ldr	r0, [r7, #8]
 8019998:	f7fb f818 	bl	80149cc <pbuf_add_header>
 801999c:	4603      	mov	r3, r0
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d004      	beq.n	80199ac <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80199a2:	6938      	ldr	r0, [r7, #16]
 80199a4:	f7fd f801 	bl	80169aa <tcp_seg_free>
    return NULL;
 80199a8:	2300      	movs	r3, #0
 80199aa:	e037      	b.n	8019a1c <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80199ac:	693b      	ldr	r3, [r7, #16]
 80199ae:	685b      	ldr	r3, [r3, #4]
 80199b0:	685a      	ldr	r2, [r3, #4]
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	8ada      	ldrh	r2, [r3, #22]
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	691c      	ldr	r4, [r3, #16]
 80199be:	4610      	mov	r0, r2
 80199c0:	f7f8 fd0c 	bl	80123dc <lwip_htons>
 80199c4:	4603      	mov	r3, r0
 80199c6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	8b1a      	ldrh	r2, [r3, #24]
 80199cc:	693b      	ldr	r3, [r7, #16]
 80199ce:	691c      	ldr	r4, [r3, #16]
 80199d0:	4610      	mov	r0, r2
 80199d2:	f7f8 fd03 	bl	80123dc <lwip_htons>
 80199d6:	4603      	mov	r3, r0
 80199d8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80199da:	693b      	ldr	r3, [r7, #16]
 80199dc:	691c      	ldr	r4, [r3, #16]
 80199de:	6838      	ldr	r0, [r7, #0]
 80199e0:	f7f8 fd11 	bl	8012406 <lwip_htonl>
 80199e4:	4603      	mov	r3, r0
 80199e6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80199e8:	7dfb      	ldrb	r3, [r7, #23]
 80199ea:	089b      	lsrs	r3, r3, #2
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	b29b      	uxth	r3, r3
 80199f0:	3305      	adds	r3, #5
 80199f2:	b29b      	uxth	r3, r3
 80199f4:	031b      	lsls	r3, r3, #12
 80199f6:	b29a      	uxth	r2, r3
 80199f8:	79fb      	ldrb	r3, [r7, #7]
 80199fa:	b29b      	uxth	r3, r3
 80199fc:	4313      	orrs	r3, r2
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	691c      	ldr	r4, [r3, #16]
 8019a04:	4610      	mov	r0, r2
 8019a06:	f7f8 fce9 	bl	80123dc <lwip_htons>
 8019a0a:	4603      	mov	r3, r0
 8019a0c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019a0e:	693b      	ldr	r3, [r7, #16]
 8019a10:	691b      	ldr	r3, [r3, #16]
 8019a12:	2200      	movs	r2, #0
 8019a14:	749a      	strb	r2, [r3, #18]
 8019a16:	2200      	movs	r2, #0
 8019a18:	74da      	strb	r2, [r3, #19]
  return seg;
 8019a1a:	693b      	ldr	r3, [r7, #16]
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	371c      	adds	r7, #28
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd90      	pop	{r4, r7, pc}
 8019a24:	080280c4 	.word	0x080280c4
 8019a28:	080280f8 	.word	0x080280f8
 8019a2c:	08028118 	.word	0x08028118
 8019a30:	08028140 	.word	0x08028140
 8019a34:	08028164 	.word	0x08028164

08019a38 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b086      	sub	sp, #24
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	607b      	str	r3, [r7, #4]
 8019a40:	4603      	mov	r3, r0
 8019a42:	73fb      	strb	r3, [r7, #15]
 8019a44:	460b      	mov	r3, r1
 8019a46:	81bb      	strh	r3, [r7, #12]
 8019a48:	4613      	mov	r3, r2
 8019a4a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019a4c:	89bb      	ldrh	r3, [r7, #12]
 8019a4e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d105      	bne.n	8019a62 <tcp_pbuf_prealloc+0x2a>
 8019a56:	4b30      	ldr	r3, [pc, #192]	; (8019b18 <tcp_pbuf_prealloc+0xe0>)
 8019a58:	22e8      	movs	r2, #232	; 0xe8
 8019a5a:	4930      	ldr	r1, [pc, #192]	; (8019b1c <tcp_pbuf_prealloc+0xe4>)
 8019a5c:	4830      	ldr	r0, [pc, #192]	; (8019b20 <tcp_pbuf_prealloc+0xe8>)
 8019a5e:	f008 f925 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019a62:	6a3b      	ldr	r3, [r7, #32]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d105      	bne.n	8019a74 <tcp_pbuf_prealloc+0x3c>
 8019a68:	4b2b      	ldr	r3, [pc, #172]	; (8019b18 <tcp_pbuf_prealloc+0xe0>)
 8019a6a:	22e9      	movs	r2, #233	; 0xe9
 8019a6c:	492d      	ldr	r1, [pc, #180]	; (8019b24 <tcp_pbuf_prealloc+0xec>)
 8019a6e:	482c      	ldr	r0, [pc, #176]	; (8019b20 <tcp_pbuf_prealloc+0xe8>)
 8019a70:	f008 f91c 	bl	8021cac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019a74:	89ba      	ldrh	r2, [r7, #12]
 8019a76:	897b      	ldrh	r3, [r7, #10]
 8019a78:	429a      	cmp	r2, r3
 8019a7a:	d221      	bcs.n	8019ac0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a80:	f003 0302 	and.w	r3, r3, #2
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d111      	bne.n	8019aac <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019a88:	6a3b      	ldr	r3, [r7, #32]
 8019a8a:	8b5b      	ldrh	r3, [r3, #26]
 8019a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d115      	bne.n	8019ac0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019a94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d007      	beq.n	8019aac <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019a9c:	6a3b      	ldr	r3, [r7, #32]
 8019a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d103      	bne.n	8019aac <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019aa4:	6a3b      	ldr	r3, [r7, #32]
 8019aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d009      	beq.n	8019ac0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019aac:	89bb      	ldrh	r3, [r7, #12]
 8019aae:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8019ab2:	f023 0203 	bic.w	r2, r3, #3
 8019ab6:	897b      	ldrh	r3, [r7, #10]
 8019ab8:	4293      	cmp	r3, r2
 8019aba:	bf28      	it	cs
 8019abc:	4613      	movcs	r3, r2
 8019abe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019ac0:	8af9      	ldrh	r1, [r7, #22]
 8019ac2:	7bfb      	ldrb	r3, [r7, #15]
 8019ac4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f7fa fd31 	bl	8014530 <pbuf_alloc>
 8019ace:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019ad0:	693b      	ldr	r3, [r7, #16]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d101      	bne.n	8019ada <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	e019      	b.n	8019b0e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019ada:	693b      	ldr	r3, [r7, #16]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d006      	beq.n	8019af0 <tcp_pbuf_prealloc+0xb8>
 8019ae2:	4b0d      	ldr	r3, [pc, #52]	; (8019b18 <tcp_pbuf_prealloc+0xe0>)
 8019ae4:	f240 120b 	movw	r2, #267	; 0x10b
 8019ae8:	490f      	ldr	r1, [pc, #60]	; (8019b28 <tcp_pbuf_prealloc+0xf0>)
 8019aea:	480d      	ldr	r0, [pc, #52]	; (8019b20 <tcp_pbuf_prealloc+0xe8>)
 8019aec:	f008 f8de 	bl	8021cac <iprintf>
  *oversize = p->len - length;
 8019af0:	693b      	ldr	r3, [r7, #16]
 8019af2:	895a      	ldrh	r2, [r3, #10]
 8019af4:	89bb      	ldrh	r3, [r7, #12]
 8019af6:	1ad3      	subs	r3, r2, r3
 8019af8:	b29a      	uxth	r2, r3
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019afe:	693b      	ldr	r3, [r7, #16]
 8019b00:	89ba      	ldrh	r2, [r7, #12]
 8019b02:	811a      	strh	r2, [r3, #8]
 8019b04:	693b      	ldr	r3, [r7, #16]
 8019b06:	891a      	ldrh	r2, [r3, #8]
 8019b08:	693b      	ldr	r3, [r7, #16]
 8019b0a:	815a      	strh	r2, [r3, #10]
  return p;
 8019b0c:	693b      	ldr	r3, [r7, #16]
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3718      	adds	r7, #24
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	080280c4 	.word	0x080280c4
 8019b1c:	0802817c 	.word	0x0802817c
 8019b20:	08028118 	.word	0x08028118
 8019b24:	080281a0 	.word	0x080281a0
 8019b28:	080281c0 	.word	0x080281c0

08019b2c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
 8019b34:	460b      	mov	r3, r1
 8019b36:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d106      	bne.n	8019b4c <tcp_write_checks+0x20>
 8019b3e:	4b33      	ldr	r3, [pc, #204]	; (8019c0c <tcp_write_checks+0xe0>)
 8019b40:	f240 1233 	movw	r2, #307	; 0x133
 8019b44:	4932      	ldr	r1, [pc, #200]	; (8019c10 <tcp_write_checks+0xe4>)
 8019b46:	4833      	ldr	r0, [pc, #204]	; (8019c14 <tcp_write_checks+0xe8>)
 8019b48:	f008 f8b0 	bl	8021cac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	7d1b      	ldrb	r3, [r3, #20]
 8019b50:	2b04      	cmp	r3, #4
 8019b52:	d00e      	beq.n	8019b72 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019b58:	2b07      	cmp	r3, #7
 8019b5a:	d00a      	beq.n	8019b72 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019b60:	2b02      	cmp	r3, #2
 8019b62:	d006      	beq.n	8019b72 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019b68:	2b03      	cmp	r3, #3
 8019b6a:	d002      	beq.n	8019b72 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019b6c:	f06f 030a 	mvn.w	r3, #10
 8019b70:	e048      	b.n	8019c04 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019b72:	887b      	ldrh	r3, [r7, #2]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d101      	bne.n	8019b7c <tcp_write_checks+0x50>
    return ERR_OK;
 8019b78:	2300      	movs	r3, #0
 8019b7a:	e043      	b.n	8019c04 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019b82:	887a      	ldrh	r2, [r7, #2]
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d909      	bls.n	8019b9c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	8b5b      	ldrh	r3, [r3, #26]
 8019b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b90:	b29a      	uxth	r2, r3
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b9a:	e033      	b.n	8019c04 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ba2:	2b08      	cmp	r3, #8
 8019ba4:	d909      	bls.n	8019bba <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	8b5b      	ldrh	r3, [r3, #26]
 8019baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bae:	b29a      	uxth	r2, r3
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bb8:	e024      	b.n	8019c04 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d00f      	beq.n	8019be4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d11a      	bne.n	8019c02 <tcp_write_checks+0xd6>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d116      	bne.n	8019c02 <tcp_write_checks+0xd6>
 8019bd4:	4b0d      	ldr	r3, [pc, #52]	; (8019c0c <tcp_write_checks+0xe0>)
 8019bd6:	f240 1255 	movw	r2, #341	; 0x155
 8019bda:	490f      	ldr	r1, [pc, #60]	; (8019c18 <tcp_write_checks+0xec>)
 8019bdc:	480d      	ldr	r0, [pc, #52]	; (8019c14 <tcp_write_checks+0xe8>)
 8019bde:	f008 f865 	bl	8021cac <iprintf>
 8019be2:	e00e      	b.n	8019c02 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d103      	bne.n	8019bf4 <tcp_write_checks+0xc8>
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d006      	beq.n	8019c02 <tcp_write_checks+0xd6>
 8019bf4:	4b05      	ldr	r3, [pc, #20]	; (8019c0c <tcp_write_checks+0xe0>)
 8019bf6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8019bfa:	4908      	ldr	r1, [pc, #32]	; (8019c1c <tcp_write_checks+0xf0>)
 8019bfc:	4805      	ldr	r0, [pc, #20]	; (8019c14 <tcp_write_checks+0xe8>)
 8019bfe:	f008 f855 	bl	8021cac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019c02:	2300      	movs	r3, #0
}
 8019c04:	4618      	mov	r0, r3
 8019c06:	3708      	adds	r7, #8
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	080280c4 	.word	0x080280c4
 8019c10:	080281d4 	.word	0x080281d4
 8019c14:	08028118 	.word	0x08028118
 8019c18:	080281f4 	.word	0x080281f4
 8019c1c:	08028230 	.word	0x08028230

08019c20 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019c20:	b590      	push	{r4, r7, lr}
 8019c22:	b09d      	sub	sp, #116	; 0x74
 8019c24:	af04      	add	r7, sp, #16
 8019c26:	60f8      	str	r0, [r7, #12]
 8019c28:	60b9      	str	r1, [r7, #8]
 8019c2a:	4611      	mov	r1, r2
 8019c2c:	461a      	mov	r2, r3
 8019c2e:	460b      	mov	r3, r1
 8019c30:	80fb      	strh	r3, [r7, #6]
 8019c32:	4613      	mov	r3, r2
 8019c34:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019c36:	2300      	movs	r3, #0
 8019c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8019c3e:	2300      	movs	r3, #0
 8019c40:	657b      	str	r3, [r7, #84]	; 0x54
 8019c42:	2300      	movs	r3, #0
 8019c44:	653b      	str	r3, [r7, #80]	; 0x50
 8019c46:	2300      	movs	r3, #0
 8019c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019c50:	2300      	movs	r3, #0
 8019c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019c56:	2300      	movs	r3, #0
 8019c58:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8019c60:	2300      	movs	r3, #0
 8019c62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019c66:	2300      	movs	r3, #0
 8019c68:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d109      	bne.n	8019c86 <tcp_write+0x66>
 8019c72:	4bad      	ldr	r3, [pc, #692]	; (8019f28 <tcp_write+0x308>)
 8019c74:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019c78:	49ac      	ldr	r1, [pc, #688]	; (8019f2c <tcp_write+0x30c>)
 8019c7a:	48ad      	ldr	r0, [pc, #692]	; (8019f30 <tcp_write+0x310>)
 8019c7c:	f008 f816 	bl	8021cac <iprintf>
 8019c80:	f06f 030f 	mvn.w	r3, #15
 8019c84:	e37d      	b.n	801a382 <tcp_write+0x762>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019c8c:	085b      	lsrs	r3, r3, #1
 8019c8e:	b29a      	uxth	r2, r3
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019c94:	4293      	cmp	r3, r2
 8019c96:	bf28      	it	cs
 8019c98:	4613      	movcs	r3, r2
 8019c9a:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8019c9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d102      	bne.n	8019ca8 <tcp_write+0x88>
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ca6:	e000      	b.n	8019caa <tcp_write+0x8a>
 8019ca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019caa:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d109      	bne.n	8019cc6 <tcp_write+0xa6>
 8019cb2:	4b9d      	ldr	r3, [pc, #628]	; (8019f28 <tcp_write+0x308>)
 8019cb4:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019cb8:	499e      	ldr	r1, [pc, #632]	; (8019f34 <tcp_write+0x314>)
 8019cba:	489d      	ldr	r0, [pc, #628]	; (8019f30 <tcp_write+0x310>)
 8019cbc:	f007 fff6 	bl	8021cac <iprintf>
 8019cc0:	f06f 030f 	mvn.w	r3, #15
 8019cc4:	e35d      	b.n	801a382 <tcp_write+0x762>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019cc6:	88fb      	ldrh	r3, [r7, #6]
 8019cc8:	4619      	mov	r1, r3
 8019cca:	68f8      	ldr	r0, [r7, #12]
 8019ccc:	f7ff ff2e 	bl	8019b2c <tcp_write_checks>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8019cd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d002      	beq.n	8019ce4 <tcp_write+0xc4>
    return err;
 8019cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019ce2:	e34e      	b.n	801a382 <tcp_write+0x762>
  }
  queuelen = pcb->snd_queuelen;
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019cea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019cee:	2300      	movs	r3, #0
 8019cf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	f000 8127 	beq.w	8019f4c <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d02:	643b      	str	r3, [r7, #64]	; 0x40
 8019d04:	e002      	b.n	8019d0c <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8019d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d1f8      	bne.n	8019d06 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d16:	7b1b      	ldrb	r3, [r3, #12]
 8019d18:	009b      	lsls	r3, r3, #2
 8019d1a:	b29b      	uxth	r3, r3
 8019d1c:	f003 0304 	and.w	r3, r3, #4
 8019d20:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019d22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d26:	891b      	ldrh	r3, [r3, #8]
 8019d28:	4619      	mov	r1, r3
 8019d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d2c:	440b      	add	r3, r1
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	da06      	bge.n	8019d40 <tcp_write+0x120>
 8019d32:	4b7d      	ldr	r3, [pc, #500]	; (8019f28 <tcp_write+0x308>)
 8019d34:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019d38:	497f      	ldr	r1, [pc, #508]	; (8019f38 <tcp_write+0x318>)
 8019d3a:	487d      	ldr	r0, [pc, #500]	; (8019f30 <tcp_write+0x310>)
 8019d3c:	f007 ffb6 	bl	8021cac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d42:	891a      	ldrh	r2, [r3, #8]
 8019d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d46:	4413      	add	r3, r2
 8019d48:	b29b      	uxth	r3, r3
 8019d4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019d4c:	1ad3      	subs	r3, r2, r3
 8019d4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8019d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d5a:	895b      	ldrh	r3, [r3, #10]
 8019d5c:	429a      	cmp	r2, r3
 8019d5e:	d006      	beq.n	8019d6e <tcp_write+0x14e>
 8019d60:	4b71      	ldr	r3, [pc, #452]	; (8019f28 <tcp_write+0x308>)
 8019d62:	f240 12f3 	movw	r2, #499	; 0x1f3
 8019d66:	4975      	ldr	r1, [pc, #468]	; (8019f3c <tcp_write+0x31c>)
 8019d68:	4871      	ldr	r0, [pc, #452]	; (8019f30 <tcp_write+0x310>)
 8019d6a:	f007 ff9f 	bl	8021cac <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019d74:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8019d76:	8afb      	ldrh	r3, [r7, #22]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d02e      	beq.n	8019dda <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019d7c:	8afb      	ldrh	r3, [r7, #22]
 8019d7e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019d82:	429a      	cmp	r2, r3
 8019d84:	d206      	bcs.n	8019d94 <tcp_write+0x174>
 8019d86:	4b68      	ldr	r3, [pc, #416]	; (8019f28 <tcp_write+0x308>)
 8019d88:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8019d8c:	496c      	ldr	r1, [pc, #432]	; (8019f40 <tcp_write+0x320>)
 8019d8e:	4868      	ldr	r0, [pc, #416]	; (8019f30 <tcp_write+0x310>)
 8019d90:	f007 ff8c 	bl	8021cac <iprintf>
      seg = last_unsent;
 8019d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d96:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019d98:	8afb      	ldrh	r3, [r7, #22]
 8019d9a:	88fa      	ldrh	r2, [r7, #6]
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	bf28      	it	cs
 8019da0:	4613      	movcs	r3, r2
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019da8:	4293      	cmp	r3, r2
 8019daa:	bf28      	it	cs
 8019dac:	4613      	movcs	r3, r2
 8019dae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8019db2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019db6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019dba:	4413      	add	r3, r2
 8019dbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8019dc0:	8afa      	ldrh	r2, [r7, #22]
 8019dc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019dc6:	1ad3      	subs	r3, r2, r3
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8019dcc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019dd4:	1ad3      	subs	r3, r2, r3
 8019dd6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019dda:	8afb      	ldrh	r3, [r7, #22]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d00b      	beq.n	8019df8 <tcp_write+0x1d8>
 8019de0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019de4:	88fb      	ldrh	r3, [r7, #6]
 8019de6:	429a      	cmp	r2, r3
 8019de8:	d006      	beq.n	8019df8 <tcp_write+0x1d8>
 8019dea:	4b4f      	ldr	r3, [pc, #316]	; (8019f28 <tcp_write+0x308>)
 8019dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019df0:	4954      	ldr	r1, [pc, #336]	; (8019f44 <tcp_write+0x324>)
 8019df2:	484f      	ldr	r0, [pc, #316]	; (8019f30 <tcp_write+0x310>)
 8019df4:	f007 ff5a 	bl	8021cac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019df8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019dfc:	88fb      	ldrh	r3, [r7, #6]
 8019dfe:	429a      	cmp	r2, r3
 8019e00:	f080 8172 	bcs.w	801a0e8 <tcp_write+0x4c8>
 8019e04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	f000 816d 	beq.w	801a0e8 <tcp_write+0x4c8>
 8019e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e10:	891b      	ldrh	r3, [r3, #8]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	f000 8168 	beq.w	801a0e8 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019e18:	88fa      	ldrh	r2, [r7, #6]
 8019e1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019e1e:	1ad2      	subs	r2, r2, r3
 8019e20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019e24:	4293      	cmp	r3, r2
 8019e26:	bfa8      	it	ge
 8019e28:	4613      	movge	r3, r2
 8019e2a:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8019e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e2e:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019e30:	797b      	ldrb	r3, [r7, #5]
 8019e32:	f003 0301 	and.w	r3, r3, #1
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d02b      	beq.n	8019e92 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019e3a:	f107 0016 	add.w	r0, r7, #22
 8019e3e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019e42:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8019e44:	2301      	movs	r3, #1
 8019e46:	9302      	str	r3, [sp, #8]
 8019e48:	797b      	ldrb	r3, [r7, #5]
 8019e4a:	9301      	str	r3, [sp, #4]
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	9300      	str	r3, [sp, #0]
 8019e50:	4603      	mov	r3, r0
 8019e52:	2000      	movs	r0, #0
 8019e54:	f7ff fdf0 	bl	8019a38 <tcp_pbuf_prealloc>
 8019e58:	63f8      	str	r0, [r7, #60]	; 0x3c
 8019e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	f000 825e 	beq.w	801a31e <tcp_write+0x6fe>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8019e62:	8afb      	ldrh	r3, [r7, #22]
 8019e64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e6a:	6858      	ldr	r0, [r3, #4]
 8019e6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019e70:	68ba      	ldr	r2, [r7, #8]
 8019e72:	4413      	add	r3, r2
 8019e74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019e76:	4619      	mov	r1, r3
 8019e78:	f007 f9d4 	bl	8021224 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019e7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019e7e:	f7fa fefb 	bl	8014c78 <pbuf_clen>
 8019e82:	4603      	mov	r3, r0
 8019e84:	461a      	mov	r2, r3
 8019e86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019e8a:	4413      	add	r3, r2
 8019e8c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019e90:	e042      	b.n	8019f18 <tcp_write+0x2f8>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e94:	685b      	ldr	r3, [r3, #4]
 8019e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8019e98:	e002      	b.n	8019ea0 <tcp_write+0x280>
 8019e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8019ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d1f8      	bne.n	8019e9a <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eaa:	7b1b      	ldrb	r3, [r3, #12]
 8019eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d116      	bne.n	8019ee2 <tcp_write+0x2c2>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb6:	685b      	ldr	r3, [r3, #4]
 8019eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019eba:	8952      	ldrh	r2, [r2, #10]
 8019ebc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019ebe:	68ba      	ldr	r2, [r7, #8]
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	d10e      	bne.n	8019ee2 <tcp_write+0x2c2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019ec4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d006      	beq.n	8019eda <tcp_write+0x2ba>
 8019ecc:	4b16      	ldr	r3, [pc, #88]	; (8019f28 <tcp_write+0x308>)
 8019ece:	f240 2231 	movw	r2, #561	; 0x231
 8019ed2:	491d      	ldr	r1, [pc, #116]	; (8019f48 <tcp_write+0x328>)
 8019ed4:	4816      	ldr	r0, [pc, #88]	; (8019f30 <tcp_write+0x310>)
 8019ed6:	f007 fee9 	bl	8021cac <iprintf>
          extendlen = seglen;
 8019eda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019edc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019ee0:	e01a      	b.n	8019f18 <tcp_write+0x2f8>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ee4:	2201      	movs	r2, #1
 8019ee6:	4619      	mov	r1, r3
 8019ee8:	2000      	movs	r0, #0
 8019eea:	f7fa fb21 	bl	8014530 <pbuf_alloc>
 8019eee:	63f8      	str	r0, [r7, #60]	; 0x3c
 8019ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	f000 8215 	beq.w	801a322 <tcp_write+0x702>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019ef8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019efc:	68ba      	ldr	r2, [r7, #8]
 8019efe:	441a      	add	r2, r3
 8019f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f02:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019f04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019f06:	f7fa feb7 	bl	8014c78 <pbuf_clen>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019f12:	4413      	add	r3, r2
 8019f14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019f18:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019f1e:	4413      	add	r3, r2
 8019f20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8019f24:	e0e0      	b.n	801a0e8 <tcp_write+0x4c8>
 8019f26:	bf00      	nop
 8019f28:	080280c4 	.word	0x080280c4
 8019f2c:	08028264 	.word	0x08028264
 8019f30:	08028118 	.word	0x08028118
 8019f34:	0802827c 	.word	0x0802827c
 8019f38:	080282b0 	.word	0x080282b0
 8019f3c:	080282c8 	.word	0x080282c8
 8019f40:	080282f8 	.word	0x080282f8
 8019f44:	08028318 	.word	0x08028318
 8019f48:	08028338 	.word	0x08028338
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	f000 80c8 	beq.w	801a0e8 <tcp_write+0x4c8>
 8019f58:	4ba3      	ldr	r3, [pc, #652]	; (801a1e8 <tcp_write+0x5c8>)
 8019f5a:	f240 224a 	movw	r2, #586	; 0x24a
 8019f5e:	49a3      	ldr	r1, [pc, #652]	; (801a1ec <tcp_write+0x5cc>)
 8019f60:	48a3      	ldr	r0, [pc, #652]	; (801a1f0 <tcp_write+0x5d0>)
 8019f62:	f007 fea3 	bl	8021cac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019f66:	e0bf      	b.n	801a0e8 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8019f68:	88fa      	ldrh	r2, [r7, #6]
 8019f6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019f6e:	1ad3      	subs	r3, r2, r3
 8019f70:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8019f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f76:	b29b      	uxth	r3, r3
 8019f78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019f7a:	1ad3      	subs	r3, r2, r3
 8019f7c:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019f7e:	8bfa      	ldrh	r2, [r7, #30]
 8019f80:	8c3b      	ldrh	r3, [r7, #32]
 8019f82:	4293      	cmp	r3, r2
 8019f84:	bf28      	it	cs
 8019f86:	4613      	movcs	r3, r2
 8019f88:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019f8a:	797b      	ldrb	r3, [r7, #5]
 8019f8c:	f003 0301 	and.w	r3, r3, #1
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d036      	beq.n	801a002 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f98:	b29a      	uxth	r2, r3
 8019f9a:	8bbb      	ldrh	r3, [r7, #28]
 8019f9c:	4413      	add	r3, r2
 8019f9e:	b299      	uxth	r1, r3
 8019fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	bf0c      	ite	eq
 8019fa6:	2301      	moveq	r3, #1
 8019fa8:	2300      	movne	r3, #0
 8019faa:	b2db      	uxtb	r3, r3
 8019fac:	f107 0016 	add.w	r0, r7, #22
 8019fb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019fb2:	9302      	str	r3, [sp, #8]
 8019fb4:	797b      	ldrb	r3, [r7, #5]
 8019fb6:	9301      	str	r3, [sp, #4]
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	9300      	str	r3, [sp, #0]
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	2036      	movs	r0, #54	; 0x36
 8019fc0:	f7ff fd3a 	bl	8019a38 <tcp_pbuf_prealloc>
 8019fc4:	6378      	str	r0, [r7, #52]	; 0x34
 8019fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	f000 81ac 	beq.w	801a326 <tcp_write+0x706>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fd0:	895b      	ldrh	r3, [r3, #10]
 8019fd2:	8bba      	ldrh	r2, [r7, #28]
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	d906      	bls.n	8019fe6 <tcp_write+0x3c6>
 8019fd8:	4b83      	ldr	r3, [pc, #524]	; (801a1e8 <tcp_write+0x5c8>)
 8019fda:	f240 2266 	movw	r2, #614	; 0x266
 8019fde:	4985      	ldr	r1, [pc, #532]	; (801a1f4 <tcp_write+0x5d4>)
 8019fe0:	4883      	ldr	r0, [pc, #524]	; (801a1f0 <tcp_write+0x5d0>)
 8019fe2:	f007 fe63 	bl	8021cac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fe8:	685a      	ldr	r2, [r3, #4]
 8019fea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019fee:	18d0      	adds	r0, r2, r3
 8019ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019ff4:	68ba      	ldr	r2, [r7, #8]
 8019ff6:	4413      	add	r3, r2
 8019ff8:	8bba      	ldrh	r2, [r7, #28]
 8019ffa:	4619      	mov	r1, r3
 8019ffc:	f007 f912 	bl	8021224 <memcpy>
 801a000:	e02f      	b.n	801a062 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a002:	8afb      	ldrh	r3, [r7, #22]
 801a004:	2b00      	cmp	r3, #0
 801a006:	d006      	beq.n	801a016 <tcp_write+0x3f6>
 801a008:	4b77      	ldr	r3, [pc, #476]	; (801a1e8 <tcp_write+0x5c8>)
 801a00a:	f240 2271 	movw	r2, #625	; 0x271
 801a00e:	497a      	ldr	r1, [pc, #488]	; (801a1f8 <tcp_write+0x5d8>)
 801a010:	4877      	ldr	r0, [pc, #476]	; (801a1f0 <tcp_write+0x5d0>)
 801a012:	f007 fe4b 	bl	8021cac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a016:	8bbb      	ldrh	r3, [r7, #28]
 801a018:	2201      	movs	r2, #1
 801a01a:	4619      	mov	r1, r3
 801a01c:	2036      	movs	r0, #54	; 0x36
 801a01e:	f7fa fa87 	bl	8014530 <pbuf_alloc>
 801a022:	61b8      	str	r0, [r7, #24]
 801a024:	69bb      	ldr	r3, [r7, #24]
 801a026:	2b00      	cmp	r3, #0
 801a028:	f000 817f 	beq.w	801a32a <tcp_write+0x70a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a02c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801a030:	68ba      	ldr	r2, [r7, #8]
 801a032:	441a      	add	r2, r3
 801a034:	69bb      	ldr	r3, [r7, #24]
 801a036:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a042:	4619      	mov	r1, r3
 801a044:	2036      	movs	r0, #54	; 0x36
 801a046:	f7fa fa73 	bl	8014530 <pbuf_alloc>
 801a04a:	6378      	str	r0, [r7, #52]	; 0x34
 801a04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d103      	bne.n	801a05a <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a052:	69b8      	ldr	r0, [r7, #24]
 801a054:	f7fa fd82 	bl	8014b5c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a058:	e16a      	b.n	801a330 <tcp_write+0x710>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a05a:	69b9      	ldr	r1, [r7, #24]
 801a05c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a05e:	f7fa fe4b 	bl	8014cf8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a062:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a064:	f7fa fe08 	bl	8014c78 <pbuf_clen>
 801a068:	4603      	mov	r3, r0
 801a06a:	461a      	mov	r2, r3
 801a06c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a070:	4413      	add	r3, r2
 801a072:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a076:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801a07a:	2b09      	cmp	r3, #9
 801a07c:	d903      	bls.n	801a086 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a07e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a080:	f7fa fd6c 	bl	8014b5c <pbuf_free>
      goto memerr;
 801a084:	e154      	b.n	801a330 <tcp_write+0x710>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a08a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801a08e:	441a      	add	r2, r3
 801a090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a094:	9300      	str	r3, [sp, #0]
 801a096:	4613      	mov	r3, r2
 801a098:	2200      	movs	r2, #0
 801a09a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a09c:	68f8      	ldr	r0, [r7, #12]
 801a09e:	f7ff fc2b 	bl	80198f8 <tcp_create_segment>
 801a0a2:	6578      	str	r0, [r7, #84]	; 0x54
 801a0a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	f000 8141 	beq.w	801a32e <tcp_write+0x70e>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801a0ac:	8afa      	ldrh	r2, [r7, #22]
 801a0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0b0:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d102      	bne.n	801a0be <tcp_write+0x49e>
      queue = seg;
 801a0b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a0bc:	e00c      	b.n	801a0d8 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d106      	bne.n	801a0d2 <tcp_write+0x4b2>
 801a0c4:	4b48      	ldr	r3, [pc, #288]	; (801a1e8 <tcp_write+0x5c8>)
 801a0c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a0ca:	494c      	ldr	r1, [pc, #304]	; (801a1fc <tcp_write+0x5dc>)
 801a0cc:	4848      	ldr	r0, [pc, #288]	; (801a1f0 <tcp_write+0x5d0>)
 801a0ce:	f007 fded 	bl	8021cac <iprintf>
      prev_seg->next = seg;
 801a0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a0d6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0da:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a0dc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801a0e0:	8bbb      	ldrh	r3, [r7, #28]
 801a0e2:	4413      	add	r3, r2
 801a0e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 801a0e8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801a0ec:	88fb      	ldrh	r3, [r7, #6]
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	f4ff af3a 	bcc.w	8019f68 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801a0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d00b      	beq.n	801a112 <tcp_write+0x4f2>
 801a0fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d007      	beq.n	801a112 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801a102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a104:	895a      	ldrh	r2, [r3, #10]
 801a106:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801a10a:	4413      	add	r3, r2
 801a10c:	b29a      	uxth	r2, r3
 801a10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a110:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a116:	2b00      	cmp	r3, #0
 801a118:	d045      	beq.n	801a1a6 <tcp_write+0x586>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	633b      	str	r3, [r7, #48]	; 0x30
 801a120:	e021      	b.n	801a166 <tcp_write+0x546>
      p->tot_len += oversize_used;
 801a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a124:	891a      	ldrh	r2, [r3, #8]
 801a126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a12a:	4413      	add	r3, r2
 801a12c:	b29a      	uxth	r2, r3
 801a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a130:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d112      	bne.n	801a160 <tcp_write+0x540>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a13c:	685b      	ldr	r3, [r3, #4]
 801a13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a140:	8952      	ldrh	r2, [r2, #10]
 801a142:	4413      	add	r3, r2
 801a144:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a148:	68b9      	ldr	r1, [r7, #8]
 801a14a:	4618      	mov	r0, r3
 801a14c:	f007 f86a 	bl	8021224 <memcpy>
        p->len += oversize_used;
 801a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a152:	895a      	ldrh	r2, [r3, #10]
 801a154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a158:	4413      	add	r3, r2
 801a15a:	b29a      	uxth	r2, r3
 801a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a15e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	633b      	str	r3, [r7, #48]	; 0x30
 801a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d1da      	bne.n	801a122 <tcp_write+0x502>
      }
    }
    last_unsent->len += oversize_used;
 801a16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a16e:	891a      	ldrh	r2, [r3, #8]
 801a170:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a174:	4413      	add	r3, r2
 801a176:	b29a      	uxth	r2, r3
 801a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a17a:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a17e:	895b      	ldrh	r3, [r3, #10]
 801a180:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a184:	429a      	cmp	r2, r3
 801a186:	d906      	bls.n	801a196 <tcp_write+0x576>
 801a188:	4b17      	ldr	r3, [pc, #92]	; (801a1e8 <tcp_write+0x5c8>)
 801a18a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801a18e:	491c      	ldr	r1, [pc, #112]	; (801a200 <tcp_write+0x5e0>)
 801a190:	4817      	ldr	r0, [pc, #92]	; (801a1f0 <tcp_write+0x5d0>)
 801a192:	f007 fd8b 	bl	8021cac <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801a196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a198:	895a      	ldrh	r2, [r3, #10]
 801a19a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a19e:	1ad3      	subs	r3, r2, r3
 801a1a0:	b29a      	uxth	r2, r3
 801a1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1a4:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a1a6:	8afa      	ldrh	r2, [r7, #22]
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d029      	beq.n	801a208 <tcp_write+0x5e8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d106      	bne.n	801a1c8 <tcp_write+0x5a8>
 801a1ba:	4b0b      	ldr	r3, [pc, #44]	; (801a1e8 <tcp_write+0x5c8>)
 801a1bc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801a1c0:	4910      	ldr	r1, [pc, #64]	; (801a204 <tcp_write+0x5e4>)
 801a1c2:	480b      	ldr	r0, [pc, #44]	; (801a1f0 <tcp_write+0x5d0>)
 801a1c4:	f007 fd72 	bl	8021cac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a1c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1ca:	685b      	ldr	r3, [r3, #4]
 801a1cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f7fa fd92 	bl	8014cf8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1d6:	891a      	ldrh	r2, [r3, #8]
 801a1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1da:	891b      	ldrh	r3, [r3, #8]
 801a1dc:	4413      	add	r3, r2
 801a1de:	b29a      	uxth	r2, r3
 801a1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1e2:	811a      	strh	r2, [r3, #8]
 801a1e4:	e04d      	b.n	801a282 <tcp_write+0x662>
 801a1e6:	bf00      	nop
 801a1e8:	080280c4 	.word	0x080280c4
 801a1ec:	08028364 	.word	0x08028364
 801a1f0:	08028118 	.word	0x08028118
 801a1f4:	08028394 	.word	0x08028394
 801a1f8:	080283d4 	.word	0x080283d4
 801a1fc:	080283e4 	.word	0x080283e4
 801a200:	080283f8 	.word	0x080283f8
 801a204:	08028424 	.word	0x08028424
  } else if (extendlen > 0) {
 801a208:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d038      	beq.n	801a282 <tcp_write+0x662>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a212:	2b00      	cmp	r3, #0
 801a214:	d003      	beq.n	801a21e <tcp_write+0x5fe>
 801a216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d106      	bne.n	801a22c <tcp_write+0x60c>
 801a21e:	4b5b      	ldr	r3, [pc, #364]	; (801a38c <tcp_write+0x76c>)
 801a220:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a224:	495a      	ldr	r1, [pc, #360]	; (801a390 <tcp_write+0x770>)
 801a226:	485b      	ldr	r0, [pc, #364]	; (801a394 <tcp_write+0x774>)
 801a228:	f007 fd40 	bl	8021cac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a22e:	685b      	ldr	r3, [r3, #4]
 801a230:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a232:	e00a      	b.n	801a24a <tcp_write+0x62a>
      p->tot_len += extendlen;
 801a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a236:	891a      	ldrh	r2, [r3, #8]
 801a238:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a23c:	4413      	add	r3, r2
 801a23e:	b29a      	uxth	r2, r3
 801a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a242:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d1f0      	bne.n	801a234 <tcp_write+0x614>
    }
    p->tot_len += extendlen;
 801a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a254:	891a      	ldrh	r2, [r3, #8]
 801a256:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a25a:	4413      	add	r3, r2
 801a25c:	b29a      	uxth	r2, r3
 801a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a260:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a264:	895a      	ldrh	r2, [r3, #10]
 801a266:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a26a:	4413      	add	r3, r2
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a270:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a274:	891a      	ldrh	r2, [r3, #8]
 801a276:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a27a:	4413      	add	r3, r2
 801a27c:	b29a      	uxth	r2, r3
 801a27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a280:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a284:	2b00      	cmp	r3, #0
 801a286:	d103      	bne.n	801a290 <tcp_write+0x670>
    pcb->unsent = queue;
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a28c:	66da      	str	r2, [r3, #108]	; 0x6c
 801a28e:	e002      	b.n	801a296 <tcp_write+0x676>
  } else {
    last_unsent->next = queue;
 801a290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a294:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a29a:	88fb      	ldrh	r3, [r7, #6]
 801a29c:	441a      	add	r2, r3
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a2a8:	88fb      	ldrh	r3, [r7, #6]
 801a2aa:	1ad3      	subs	r3, r2, r3
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801a2ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d00e      	beq.n	801a2e6 <tcp_write+0x6c6>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d10a      	bne.n	801a2e6 <tcp_write+0x6c6>
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d106      	bne.n	801a2e6 <tcp_write+0x6c6>
 801a2d8:	4b2c      	ldr	r3, [pc, #176]	; (801a38c <tcp_write+0x76c>)
 801a2da:	f240 3212 	movw	r2, #786	; 0x312
 801a2de:	492e      	ldr	r1, [pc, #184]	; (801a398 <tcp_write+0x778>)
 801a2e0:	482c      	ldr	r0, [pc, #176]	; (801a394 <tcp_write+0x774>)
 801a2e2:	f007 fce3 	bl	8021cac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d016      	beq.n	801a31a <tcp_write+0x6fa>
 801a2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2ee:	691b      	ldr	r3, [r3, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d012      	beq.n	801a31a <tcp_write+0x6fa>
 801a2f4:	797b      	ldrb	r3, [r7, #5]
 801a2f6:	f003 0302 	and.w	r3, r3, #2
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d10d      	bne.n	801a31a <tcp_write+0x6fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a300:	691b      	ldr	r3, [r3, #16]
 801a302:	899b      	ldrh	r3, [r3, #12]
 801a304:	b29c      	uxth	r4, r3
 801a306:	2008      	movs	r0, #8
 801a308:	f7f8 f868 	bl	80123dc <lwip_htons>
 801a30c:	4603      	mov	r3, r0
 801a30e:	461a      	mov	r2, r3
 801a310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a312:	691b      	ldr	r3, [r3, #16]
 801a314:	4322      	orrs	r2, r4
 801a316:	b292      	uxth	r2, r2
 801a318:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a31a:	2300      	movs	r3, #0
 801a31c:	e031      	b.n	801a382 <tcp_write+0x762>
          goto memerr;
 801a31e:	bf00      	nop
 801a320:	e006      	b.n	801a330 <tcp_write+0x710>
            goto memerr;
 801a322:	bf00      	nop
 801a324:	e004      	b.n	801a330 <tcp_write+0x710>
        goto memerr;
 801a326:	bf00      	nop
 801a328:	e002      	b.n	801a330 <tcp_write+0x710>
        goto memerr;
 801a32a:	bf00      	nop
 801a32c:	e000      	b.n	801a330 <tcp_write+0x710>
      goto memerr;
 801a32e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	8b5b      	ldrh	r3, [r3, #26]
 801a334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a338:	b29a      	uxth	r2, r3
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a340:	2b00      	cmp	r3, #0
 801a342:	d002      	beq.n	801a34a <tcp_write+0x72a>
    pbuf_free(concat_p);
 801a344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a346:	f7fa fc09 	bl	8014b5c <pbuf_free>
  }
  if (queue != NULL) {
 801a34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d002      	beq.n	801a356 <tcp_write+0x736>
    tcp_segs_free(queue);
 801a350:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a352:	f7fc fb15 	bl	8016980 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d00e      	beq.n	801a37e <tcp_write+0x75e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a364:	2b00      	cmp	r3, #0
 801a366:	d10a      	bne.n	801a37e <tcp_write+0x75e>
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d106      	bne.n	801a37e <tcp_write+0x75e>
 801a370:	4b06      	ldr	r3, [pc, #24]	; (801a38c <tcp_write+0x76c>)
 801a372:	f240 3227 	movw	r2, #807	; 0x327
 801a376:	4908      	ldr	r1, [pc, #32]	; (801a398 <tcp_write+0x778>)
 801a378:	4806      	ldr	r0, [pc, #24]	; (801a394 <tcp_write+0x774>)
 801a37a:	f007 fc97 	bl	8021cac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a382:	4618      	mov	r0, r3
 801a384:	3764      	adds	r7, #100	; 0x64
 801a386:	46bd      	mov	sp, r7
 801a388:	bd90      	pop	{r4, r7, pc}
 801a38a:	bf00      	nop
 801a38c:	080280c4 	.word	0x080280c4
 801a390:	0802845c 	.word	0x0802845c
 801a394:	08028118 	.word	0x08028118
 801a398:	08028494 	.word	0x08028494

0801a39c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a39c:	b590      	push	{r4, r7, lr}
 801a39e:	b08b      	sub	sp, #44	; 0x2c
 801a3a0:	af02      	add	r7, sp, #8
 801a3a2:	6078      	str	r0, [r7, #4]
 801a3a4:	460b      	mov	r3, r1
 801a3a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	61bb      	str	r3, [r7, #24]
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d106      	bne.n	801a3c8 <tcp_split_unsent_seg+0x2c>
 801a3ba:	4b97      	ldr	r3, [pc, #604]	; (801a618 <tcp_split_unsent_seg+0x27c>)
 801a3bc:	f240 324b 	movw	r2, #843	; 0x34b
 801a3c0:	4996      	ldr	r1, [pc, #600]	; (801a61c <tcp_split_unsent_seg+0x280>)
 801a3c2:	4897      	ldr	r0, [pc, #604]	; (801a620 <tcp_split_unsent_seg+0x284>)
 801a3c4:	f007 fc72 	bl	8021cac <iprintf>

  useg = pcb->unsent;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a3ce:	697b      	ldr	r3, [r7, #20]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d102      	bne.n	801a3da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a3d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a3d8:	e119      	b.n	801a60e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801a3da:	887b      	ldrh	r3, [r7, #2]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d109      	bne.n	801a3f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a3e0:	4b8d      	ldr	r3, [pc, #564]	; (801a618 <tcp_split_unsent_seg+0x27c>)
 801a3e2:	f240 3253 	movw	r2, #851	; 0x353
 801a3e6:	498f      	ldr	r1, [pc, #572]	; (801a624 <tcp_split_unsent_seg+0x288>)
 801a3e8:	488d      	ldr	r0, [pc, #564]	; (801a620 <tcp_split_unsent_seg+0x284>)
 801a3ea:	f007 fc5f 	bl	8021cac <iprintf>
    return ERR_VAL;
 801a3ee:	f06f 0305 	mvn.w	r3, #5
 801a3f2:	e10c      	b.n	801a60e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 801a3f4:	697b      	ldr	r3, [r7, #20]
 801a3f6:	891b      	ldrh	r3, [r3, #8]
 801a3f8:	887a      	ldrh	r2, [r7, #2]
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d301      	bcc.n	801a402 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e105      	b.n	801a60e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a406:	887a      	ldrh	r2, [r7, #2]
 801a408:	429a      	cmp	r2, r3
 801a40a:	d906      	bls.n	801a41a <tcp_split_unsent_seg+0x7e>
 801a40c:	4b82      	ldr	r3, [pc, #520]	; (801a618 <tcp_split_unsent_seg+0x27c>)
 801a40e:	f240 325b 	movw	r2, #859	; 0x35b
 801a412:	4985      	ldr	r1, [pc, #532]	; (801a628 <tcp_split_unsent_seg+0x28c>)
 801a414:	4882      	ldr	r0, [pc, #520]	; (801a620 <tcp_split_unsent_seg+0x284>)
 801a416:	f007 fc49 	bl	8021cac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a41a:	697b      	ldr	r3, [r7, #20]
 801a41c:	891b      	ldrh	r3, [r3, #8]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d106      	bne.n	801a430 <tcp_split_unsent_seg+0x94>
 801a422:	4b7d      	ldr	r3, [pc, #500]	; (801a618 <tcp_split_unsent_seg+0x27c>)
 801a424:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a428:	4980      	ldr	r1, [pc, #512]	; (801a62c <tcp_split_unsent_seg+0x290>)
 801a42a:	487d      	ldr	r0, [pc, #500]	; (801a620 <tcp_split_unsent_seg+0x284>)
 801a42c:	f007 fc3e 	bl	8021cac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a430:	697b      	ldr	r3, [r7, #20]
 801a432:	7b1b      	ldrb	r3, [r3, #12]
 801a434:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a436:	7bfb      	ldrb	r3, [r7, #15]
 801a438:	009b      	lsls	r3, r3, #2
 801a43a:	b2db      	uxtb	r3, r3
 801a43c:	f003 0304 	and.w	r3, r3, #4
 801a440:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a442:	697b      	ldr	r3, [r7, #20]
 801a444:	891a      	ldrh	r2, [r3, #8]
 801a446:	887b      	ldrh	r3, [r7, #2]
 801a448:	1ad3      	subs	r3, r2, r3
 801a44a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a44c:	7bbb      	ldrb	r3, [r7, #14]
 801a44e:	b29a      	uxth	r2, r3
 801a450:	89bb      	ldrh	r3, [r7, #12]
 801a452:	4413      	add	r3, r2
 801a454:	b29b      	uxth	r3, r3
 801a456:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a45a:	4619      	mov	r1, r3
 801a45c:	2036      	movs	r0, #54	; 0x36
 801a45e:	f7fa f867 	bl	8014530 <pbuf_alloc>
 801a462:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a464:	693b      	ldr	r3, [r7, #16]
 801a466:	2b00      	cmp	r3, #0
 801a468:	f000 80ba 	beq.w	801a5e0 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a46c:	697b      	ldr	r3, [r7, #20]
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	891a      	ldrh	r2, [r3, #8]
 801a472:	697b      	ldr	r3, [r7, #20]
 801a474:	891b      	ldrh	r3, [r3, #8]
 801a476:	1ad3      	subs	r3, r2, r3
 801a478:	b29a      	uxth	r2, r3
 801a47a:	887b      	ldrh	r3, [r7, #2]
 801a47c:	4413      	add	r3, r2
 801a47e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	6858      	ldr	r0, [r3, #4]
 801a484:	693b      	ldr	r3, [r7, #16]
 801a486:	685a      	ldr	r2, [r3, #4]
 801a488:	7bbb      	ldrb	r3, [r7, #14]
 801a48a:	18d1      	adds	r1, r2, r3
 801a48c:	897b      	ldrh	r3, [r7, #10]
 801a48e:	89ba      	ldrh	r2, [r7, #12]
 801a490:	f7fa fd6a 	bl	8014f68 <pbuf_copy_partial>
 801a494:	4603      	mov	r3, r0
 801a496:	461a      	mov	r2, r3
 801a498:	89bb      	ldrh	r3, [r7, #12]
 801a49a:	4293      	cmp	r3, r2
 801a49c:	f040 80a2 	bne.w	801a5e4 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	691b      	ldr	r3, [r3, #16]
 801a4a4:	899b      	ldrh	r3, [r3, #12]
 801a4a6:	b29b      	uxth	r3, r3
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	f7f7 ff97 	bl	80123dc <lwip_htons>
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a4b6:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801a4bc:	7ffb      	ldrb	r3, [r7, #31]
 801a4be:	f003 0308 	and.w	r3, r3, #8
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d007      	beq.n	801a4d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a4c6:	7ffb      	ldrb	r3, [r7, #31]
 801a4c8:	f023 0308 	bic.w	r3, r3, #8
 801a4cc:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801a4ce:	7fbb      	ldrb	r3, [r7, #30]
 801a4d0:	f043 0308 	orr.w	r3, r3, #8
 801a4d4:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801a4d6:	7ffb      	ldrb	r3, [r7, #31]
 801a4d8:	f003 0301 	and.w	r3, r3, #1
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d007      	beq.n	801a4f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a4e0:	7ffb      	ldrb	r3, [r7, #31]
 801a4e2:	f023 0301 	bic.w	r3, r3, #1
 801a4e6:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801a4e8:	7fbb      	ldrb	r3, [r7, #30]
 801a4ea:	f043 0301 	orr.w	r3, r3, #1
 801a4ee:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a4f0:	697b      	ldr	r3, [r7, #20]
 801a4f2:	691b      	ldr	r3, [r3, #16]
 801a4f4:	685b      	ldr	r3, [r3, #4]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7f7 ff85 	bl	8012406 <lwip_htonl>
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	887b      	ldrh	r3, [r7, #2]
 801a500:	18d1      	adds	r1, r2, r3
 801a502:	7fba      	ldrb	r2, [r7, #30]
 801a504:	7bfb      	ldrb	r3, [r7, #15]
 801a506:	9300      	str	r3, [sp, #0]
 801a508:	460b      	mov	r3, r1
 801a50a:	6939      	ldr	r1, [r7, #16]
 801a50c:	6878      	ldr	r0, [r7, #4]
 801a50e:	f7ff f9f3 	bl	80198f8 <tcp_create_segment>
 801a512:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801a514:	69bb      	ldr	r3, [r7, #24]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d066      	beq.n	801a5e8 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a51a:	697b      	ldr	r3, [r7, #20]
 801a51c:	685b      	ldr	r3, [r3, #4]
 801a51e:	4618      	mov	r0, r3
 801a520:	f7fa fbaa 	bl	8014c78 <pbuf_clen>
 801a524:	4603      	mov	r3, r0
 801a526:	461a      	mov	r2, r3
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a52e:	1a9b      	subs	r3, r3, r2
 801a530:	b29a      	uxth	r2, r3
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a538:	697b      	ldr	r3, [r7, #20]
 801a53a:	6858      	ldr	r0, [r3, #4]
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	685b      	ldr	r3, [r3, #4]
 801a540:	891a      	ldrh	r2, [r3, #8]
 801a542:	89bb      	ldrh	r3, [r7, #12]
 801a544:	1ad3      	subs	r3, r2, r3
 801a546:	b29b      	uxth	r3, r3
 801a548:	4619      	mov	r1, r3
 801a54a:	f7fa f94f 	bl	80147ec <pbuf_realloc>
  useg->len -= remainder;
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	891a      	ldrh	r2, [r3, #8]
 801a552:	89bb      	ldrh	r3, [r7, #12]
 801a554:	1ad3      	subs	r3, r2, r3
 801a556:	b29a      	uxth	r2, r3
 801a558:	697b      	ldr	r3, [r7, #20]
 801a55a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a55c:	697b      	ldr	r3, [r7, #20]
 801a55e:	691b      	ldr	r3, [r3, #16]
 801a560:	899b      	ldrh	r3, [r3, #12]
 801a562:	b29c      	uxth	r4, r3
 801a564:	7ffb      	ldrb	r3, [r7, #31]
 801a566:	b29b      	uxth	r3, r3
 801a568:	4618      	mov	r0, r3
 801a56a:	f7f7 ff37 	bl	80123dc <lwip_htons>
 801a56e:	4603      	mov	r3, r0
 801a570:	461a      	mov	r2, r3
 801a572:	697b      	ldr	r3, [r7, #20]
 801a574:	691b      	ldr	r3, [r3, #16]
 801a576:	4322      	orrs	r2, r4
 801a578:	b292      	uxth	r2, r2
 801a57a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801a57c:	697b      	ldr	r3, [r7, #20]
 801a57e:	2200      	movs	r2, #0
 801a580:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a582:	697b      	ldr	r3, [r7, #20]
 801a584:	685b      	ldr	r3, [r3, #4]
 801a586:	4618      	mov	r0, r3
 801a588:	f7fa fb76 	bl	8014c78 <pbuf_clen>
 801a58c:	4603      	mov	r3, r0
 801a58e:	461a      	mov	r2, r3
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a596:	4413      	add	r3, r2
 801a598:	b29a      	uxth	r2, r3
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a5a0:	69bb      	ldr	r3, [r7, #24]
 801a5a2:	685b      	ldr	r3, [r3, #4]
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7fa fb67 	bl	8014c78 <pbuf_clen>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a5b4:	4413      	add	r3, r2
 801a5b6:	b29a      	uxth	r2, r3
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a5be:	697b      	ldr	r3, [r7, #20]
 801a5c0:	681a      	ldr	r2, [r3, #0]
 801a5c2:	69bb      	ldr	r3, [r7, #24]
 801a5c4:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a5c6:	697b      	ldr	r3, [r7, #20]
 801a5c8:	69ba      	ldr	r2, [r7, #24]
 801a5ca:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a5cc:	69bb      	ldr	r3, [r7, #24]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d103      	bne.n	801a5dc <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a5dc:	2300      	movs	r3, #0
 801a5de:	e016      	b.n	801a60e <tcp_split_unsent_seg+0x272>
    goto memerr;
 801a5e0:	bf00      	nop
 801a5e2:	e002      	b.n	801a5ea <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a5e4:	bf00      	nop
 801a5e6:	e000      	b.n	801a5ea <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a5e8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a5ea:	69bb      	ldr	r3, [r7, #24]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d006      	beq.n	801a5fe <tcp_split_unsent_seg+0x262>
 801a5f0:	4b09      	ldr	r3, [pc, #36]	; (801a618 <tcp_split_unsent_seg+0x27c>)
 801a5f2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a5f6:	490e      	ldr	r1, [pc, #56]	; (801a630 <tcp_split_unsent_seg+0x294>)
 801a5f8:	4809      	ldr	r0, [pc, #36]	; (801a620 <tcp_split_unsent_seg+0x284>)
 801a5fa:	f007 fb57 	bl	8021cac <iprintf>
  if (p != NULL) {
 801a5fe:	693b      	ldr	r3, [r7, #16]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d002      	beq.n	801a60a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801a604:	6938      	ldr	r0, [r7, #16]
 801a606:	f7fa faa9 	bl	8014b5c <pbuf_free>
  }

  return ERR_MEM;
 801a60a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a60e:	4618      	mov	r0, r3
 801a610:	3724      	adds	r7, #36	; 0x24
 801a612:	46bd      	mov	sp, r7
 801a614:	bd90      	pop	{r4, r7, pc}
 801a616:	bf00      	nop
 801a618:	080280c4 	.word	0x080280c4
 801a61c:	080284b4 	.word	0x080284b4
 801a620:	08028118 	.word	0x08028118
 801a624:	080284d8 	.word	0x080284d8
 801a628:	080284fc 	.word	0x080284fc
 801a62c:	0802850c 	.word	0x0802850c
 801a630:	0802851c 	.word	0x0802851c

0801a634 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a634:	b590      	push	{r4, r7, lr}
 801a636:	b085      	sub	sp, #20
 801a638:	af00      	add	r7, sp, #0
 801a63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d106      	bne.n	801a650 <tcp_send_fin+0x1c>
 801a642:	4b21      	ldr	r3, [pc, #132]	; (801a6c8 <tcp_send_fin+0x94>)
 801a644:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a648:	4920      	ldr	r1, [pc, #128]	; (801a6cc <tcp_send_fin+0x98>)
 801a64a:	4821      	ldr	r0, [pc, #132]	; (801a6d0 <tcp_send_fin+0x9c>)
 801a64c:	f007 fb2e 	bl	8021cac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a654:	2b00      	cmp	r3, #0
 801a656:	d02e      	beq.n	801a6b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a65c:	60fb      	str	r3, [r7, #12]
 801a65e:	e002      	b.n	801a666 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d1f8      	bne.n	801a660 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	691b      	ldr	r3, [r3, #16]
 801a672:	899b      	ldrh	r3, [r3, #12]
 801a674:	b29b      	uxth	r3, r3
 801a676:	4618      	mov	r0, r3
 801a678:	f7f7 feb0 	bl	80123dc <lwip_htons>
 801a67c:	4603      	mov	r3, r0
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	f003 0307 	and.w	r3, r3, #7
 801a684:	2b00      	cmp	r3, #0
 801a686:	d116      	bne.n	801a6b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	691b      	ldr	r3, [r3, #16]
 801a68c:	899b      	ldrh	r3, [r3, #12]
 801a68e:	b29c      	uxth	r4, r3
 801a690:	2001      	movs	r0, #1
 801a692:	f7f7 fea3 	bl	80123dc <lwip_htons>
 801a696:	4603      	mov	r3, r0
 801a698:	461a      	mov	r2, r3
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	691b      	ldr	r3, [r3, #16]
 801a69e:	4322      	orrs	r2, r4
 801a6a0:	b292      	uxth	r2, r2
 801a6a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	8b5b      	ldrh	r3, [r3, #26]
 801a6a8:	f043 0320 	orr.w	r3, r3, #32
 801a6ac:	b29a      	uxth	r2, r3
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	e004      	b.n	801a6c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a6b6:	2101      	movs	r1, #1
 801a6b8:	6878      	ldr	r0, [r7, #4]
 801a6ba:	f000 f80b 	bl	801a6d4 <tcp_enqueue_flags>
 801a6be:	4603      	mov	r3, r0
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3714      	adds	r7, #20
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd90      	pop	{r4, r7, pc}
 801a6c8:	080280c4 	.word	0x080280c4
 801a6cc:	08028528 	.word	0x08028528
 801a6d0:	08028118 	.word	0x08028118

0801a6d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b088      	sub	sp, #32
 801a6d8:	af02      	add	r7, sp, #8
 801a6da:	6078      	str	r0, [r7, #4]
 801a6dc:	460b      	mov	r3, r1
 801a6de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a6e8:	78fb      	ldrb	r3, [r7, #3]
 801a6ea:	f003 0303 	and.w	r3, r3, #3
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d106      	bne.n	801a700 <tcp_enqueue_flags+0x2c>
 801a6f2:	4b67      	ldr	r3, [pc, #412]	; (801a890 <tcp_enqueue_flags+0x1bc>)
 801a6f4:	f240 4211 	movw	r2, #1041	; 0x411
 801a6f8:	4966      	ldr	r1, [pc, #408]	; (801a894 <tcp_enqueue_flags+0x1c0>)
 801a6fa:	4867      	ldr	r0, [pc, #412]	; (801a898 <tcp_enqueue_flags+0x1c4>)
 801a6fc:	f007 fad6 	bl	8021cac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d106      	bne.n	801a714 <tcp_enqueue_flags+0x40>
 801a706:	4b62      	ldr	r3, [pc, #392]	; (801a890 <tcp_enqueue_flags+0x1bc>)
 801a708:	f240 4213 	movw	r2, #1043	; 0x413
 801a70c:	4963      	ldr	r1, [pc, #396]	; (801a89c <tcp_enqueue_flags+0x1c8>)
 801a70e:	4862      	ldr	r0, [pc, #392]	; (801a898 <tcp_enqueue_flags+0x1c4>)
 801a710:	f007 facc 	bl	8021cac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a714:	78fb      	ldrb	r3, [r7, #3]
 801a716:	f003 0302 	and.w	r3, r3, #2
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d001      	beq.n	801a722 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a71e:	2301      	movs	r3, #1
 801a720:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a722:	7dfb      	ldrb	r3, [r7, #23]
 801a724:	009b      	lsls	r3, r3, #2
 801a726:	b2db      	uxtb	r3, r3
 801a728:	f003 0304 	and.w	r3, r3, #4
 801a72c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a72e:	7dbb      	ldrb	r3, [r7, #22]
 801a730:	b29b      	uxth	r3, r3
 801a732:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a736:	4619      	mov	r1, r3
 801a738:	2036      	movs	r0, #54	; 0x36
 801a73a:	f7f9 fef9 	bl	8014530 <pbuf_alloc>
 801a73e:	60f8      	str	r0, [r7, #12]
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d109      	bne.n	801a75a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	8b5b      	ldrh	r3, [r3, #26]
 801a74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a74e:	b29a      	uxth	r2, r3
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a758:	e095      	b.n	801a886 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	895a      	ldrh	r2, [r3, #10]
 801a75e:	7dbb      	ldrb	r3, [r7, #22]
 801a760:	b29b      	uxth	r3, r3
 801a762:	429a      	cmp	r2, r3
 801a764:	d206      	bcs.n	801a774 <tcp_enqueue_flags+0xa0>
 801a766:	4b4a      	ldr	r3, [pc, #296]	; (801a890 <tcp_enqueue_flags+0x1bc>)
 801a768:	f240 4239 	movw	r2, #1081	; 0x439
 801a76c:	494c      	ldr	r1, [pc, #304]	; (801a8a0 <tcp_enqueue_flags+0x1cc>)
 801a76e:	484a      	ldr	r0, [pc, #296]	; (801a898 <tcp_enqueue_flags+0x1c4>)
 801a770:	f007 fa9c 	bl	8021cac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a778:	78fa      	ldrb	r2, [r7, #3]
 801a77a:	7dfb      	ldrb	r3, [r7, #23]
 801a77c:	9300      	str	r3, [sp, #0]
 801a77e:	460b      	mov	r3, r1
 801a780:	68f9      	ldr	r1, [r7, #12]
 801a782:	6878      	ldr	r0, [r7, #4]
 801a784:	f7ff f8b8 	bl	80198f8 <tcp_create_segment>
 801a788:	60b8      	str	r0, [r7, #8]
 801a78a:	68bb      	ldr	r3, [r7, #8]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d109      	bne.n	801a7a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	8b5b      	ldrh	r3, [r3, #26]
 801a794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a798:	b29a      	uxth	r2, r3
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7a2:	e070      	b.n	801a886 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	691b      	ldr	r3, [r3, #16]
 801a7a8:	f003 0303 	and.w	r3, r3, #3
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d006      	beq.n	801a7be <tcp_enqueue_flags+0xea>
 801a7b0:	4b37      	ldr	r3, [pc, #220]	; (801a890 <tcp_enqueue_flags+0x1bc>)
 801a7b2:	f240 4242 	movw	r2, #1090	; 0x442
 801a7b6:	493b      	ldr	r1, [pc, #236]	; (801a8a4 <tcp_enqueue_flags+0x1d0>)
 801a7b8:	4837      	ldr	r0, [pc, #220]	; (801a898 <tcp_enqueue_flags+0x1c4>)
 801a7ba:	f007 fa77 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	891b      	ldrh	r3, [r3, #8]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d006      	beq.n	801a7d4 <tcp_enqueue_flags+0x100>
 801a7c6:	4b32      	ldr	r3, [pc, #200]	; (801a890 <tcp_enqueue_flags+0x1bc>)
 801a7c8:	f240 4243 	movw	r2, #1091	; 0x443
 801a7cc:	4936      	ldr	r1, [pc, #216]	; (801a8a8 <tcp_enqueue_flags+0x1d4>)
 801a7ce:	4832      	ldr	r0, [pc, #200]	; (801a898 <tcp_enqueue_flags+0x1c4>)
 801a7d0:	f007 fa6c 	bl	8021cac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d103      	bne.n	801a7e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	68ba      	ldr	r2, [r7, #8]
 801a7e0:	66da      	str	r2, [r3, #108]	; 0x6c
 801a7e2:	e00d      	b.n	801a800 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7e8:	613b      	str	r3, [r7, #16]
 801a7ea:	e002      	b.n	801a7f2 <tcp_enqueue_flags+0x11e>
 801a7ec:	693b      	ldr	r3, [r7, #16]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	613b      	str	r3, [r7, #16]
 801a7f2:	693b      	ldr	r3, [r7, #16]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d1f8      	bne.n	801a7ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a7fa:	693b      	ldr	r3, [r7, #16]
 801a7fc:	68ba      	ldr	r2, [r7, #8]
 801a7fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2200      	movs	r2, #0
 801a804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a808:	78fb      	ldrb	r3, [r7, #3]
 801a80a:	f003 0302 	and.w	r3, r3, #2
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d104      	bne.n	801a81c <tcp_enqueue_flags+0x148>
 801a812:	78fb      	ldrb	r3, [r7, #3]
 801a814:	f003 0301 	and.w	r3, r3, #1
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d004      	beq.n	801a826 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a820:	1c5a      	adds	r2, r3, #1
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a826:	78fb      	ldrb	r3, [r7, #3]
 801a828:	f003 0301 	and.w	r3, r3, #1
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d006      	beq.n	801a83e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	8b5b      	ldrh	r3, [r3, #26]
 801a834:	f043 0320 	orr.w	r3, r3, #32
 801a838:	b29a      	uxth	r2, r3
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	685b      	ldr	r3, [r3, #4]
 801a842:	4618      	mov	r0, r3
 801a844:	f7fa fa18 	bl	8014c78 <pbuf_clen>
 801a848:	4603      	mov	r3, r0
 801a84a:	461a      	mov	r2, r3
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a852:	4413      	add	r3, r2
 801a854:	b29a      	uxth	r2, r3
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a862:	2b00      	cmp	r3, #0
 801a864:	d00e      	beq.n	801a884 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d10a      	bne.n	801a884 <tcp_enqueue_flags+0x1b0>
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a872:	2b00      	cmp	r3, #0
 801a874:	d106      	bne.n	801a884 <tcp_enqueue_flags+0x1b0>
 801a876:	4b06      	ldr	r3, [pc, #24]	; (801a890 <tcp_enqueue_flags+0x1bc>)
 801a878:	f240 4265 	movw	r2, #1125	; 0x465
 801a87c:	490b      	ldr	r1, [pc, #44]	; (801a8ac <tcp_enqueue_flags+0x1d8>)
 801a87e:	4806      	ldr	r0, [pc, #24]	; (801a898 <tcp_enqueue_flags+0x1c4>)
 801a880:	f007 fa14 	bl	8021cac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a884:	2300      	movs	r3, #0
}
 801a886:	4618      	mov	r0, r3
 801a888:	3718      	adds	r7, #24
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}
 801a88e:	bf00      	nop
 801a890:	080280c4 	.word	0x080280c4
 801a894:	08028544 	.word	0x08028544
 801a898:	08028118 	.word	0x08028118
 801a89c:	0802859c 	.word	0x0802859c
 801a8a0:	080285bc 	.word	0x080285bc
 801a8a4:	080285f8 	.word	0x080285f8
 801a8a8:	08028610 	.word	0x08028610
 801a8ac:	0802863c 	.word	0x0802863c

0801a8b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a8b0:	b5b0      	push	{r4, r5, r7, lr}
 801a8b2:	b08a      	sub	sp, #40	; 0x28
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d106      	bne.n	801a8cc <tcp_output+0x1c>
 801a8be:	4b9f      	ldr	r3, [pc, #636]	; (801ab3c <tcp_output+0x28c>)
 801a8c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801a8c4:	499e      	ldr	r1, [pc, #632]	; (801ab40 <tcp_output+0x290>)
 801a8c6:	489f      	ldr	r0, [pc, #636]	; (801ab44 <tcp_output+0x294>)
 801a8c8:	f007 f9f0 	bl	8021cac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	7d1b      	ldrb	r3, [r3, #20]
 801a8d0:	2b01      	cmp	r3, #1
 801a8d2:	d106      	bne.n	801a8e2 <tcp_output+0x32>
 801a8d4:	4b99      	ldr	r3, [pc, #612]	; (801ab3c <tcp_output+0x28c>)
 801a8d6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801a8da:	499b      	ldr	r1, [pc, #620]	; (801ab48 <tcp_output+0x298>)
 801a8dc:	4899      	ldr	r0, [pc, #612]	; (801ab44 <tcp_output+0x294>)
 801a8de:	f007 f9e5 	bl	8021cac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a8e2:	4b9a      	ldr	r3, [pc, #616]	; (801ab4c <tcp_output+0x29c>)
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	687a      	ldr	r2, [r7, #4]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d101      	bne.n	801a8f0 <tcp_output+0x40>
    return ERR_OK;
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	e1d0      	b.n	801ac92 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	bf28      	it	cs
 801a900:	4613      	movcs	r3, r2
 801a902:	b29b      	uxth	r3, r3
 801a904:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a90a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d10b      	bne.n	801a92a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	8b5b      	ldrh	r3, [r3, #26]
 801a916:	f003 0302 	and.w	r3, r3, #2
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	f000 81ac 	beq.w	801ac78 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a920:	6878      	ldr	r0, [r7, #4]
 801a922:	f000 fdd7 	bl	801b4d4 <tcp_send_empty_ack>
 801a926:	4603      	mov	r3, r0
 801a928:	e1b3      	b.n	801ac92 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a92a:	6879      	ldr	r1, [r7, #4]
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	3304      	adds	r3, #4
 801a930:	461a      	mov	r2, r3
 801a932:	6878      	ldr	r0, [r7, #4]
 801a934:	f7fe ffc4 	bl	80198c0 <tcp_route>
 801a938:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d102      	bne.n	801a946 <tcp_output+0x96>
    return ERR_RTE;
 801a940:	f06f 0303 	mvn.w	r3, #3
 801a944:	e1a5      	b.n	801ac92 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d003      	beq.n	801a954 <tcp_output+0xa4>
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d111      	bne.n	801a978 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d002      	beq.n	801a960 <tcp_output+0xb0>
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	3304      	adds	r3, #4
 801a95e:	e000      	b.n	801a962 <tcp_output+0xb2>
 801a960:	2300      	movs	r3, #0
 801a962:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a964:	693b      	ldr	r3, [r7, #16]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d102      	bne.n	801a970 <tcp_output+0xc0>
      return ERR_RTE;
 801a96a:	f06f 0303 	mvn.w	r3, #3
 801a96e:	e190      	b.n	801ac92 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a970:	693b      	ldr	r3, [r7, #16]
 801a972:	681a      	ldr	r2, [r3, #0]
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a97a:	691b      	ldr	r3, [r3, #16]
 801a97c:	685b      	ldr	r3, [r3, #4]
 801a97e:	4618      	mov	r0, r3
 801a980:	f7f7 fd41 	bl	8012406 <lwip_htonl>
 801a984:	4602      	mov	r2, r0
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a98a:	1ad3      	subs	r3, r2, r3
 801a98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a98e:	8912      	ldrh	r2, [r2, #8]
 801a990:	4413      	add	r3, r2
 801a992:	69ba      	ldr	r2, [r7, #24]
 801a994:	429a      	cmp	r2, r3
 801a996:	d227      	bcs.n	801a9e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a99e:	461a      	mov	r2, r3
 801a9a0:	69bb      	ldr	r3, [r7, #24]
 801a9a2:	4293      	cmp	r3, r2
 801a9a4:	d114      	bne.n	801a9d0 <tcp_output+0x120>
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d110      	bne.n	801a9d0 <tcp_output+0x120>
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d10b      	bne.n	801a9d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2201      	movs	r2, #1
 801a9c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	8b5b      	ldrh	r3, [r3, #26]
 801a9d4:	f003 0302 	and.w	r3, r3, #2
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	f000 814f 	beq.w	801ac7c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f000 fd78 	bl	801b4d4 <tcp_send_empty_ack>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	e154      	b.n	801ac92 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	2200      	movs	r2, #0
 801a9ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a9f6:	6a3b      	ldr	r3, [r7, #32]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	f000 811e 	beq.w	801ac3a <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801a9fe:	e002      	b.n	801aa06 <tcp_output+0x156>
 801aa00:	6a3b      	ldr	r3, [r7, #32]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	623b      	str	r3, [r7, #32]
 801aa06:	6a3b      	ldr	r3, [r7, #32]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d1f8      	bne.n	801aa00 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801aa0e:	e114      	b.n	801ac3a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa12:	691b      	ldr	r3, [r3, #16]
 801aa14:	899b      	ldrh	r3, [r3, #12]
 801aa16:	b29b      	uxth	r3, r3
 801aa18:	4618      	mov	r0, r3
 801aa1a:	f7f7 fcdf 	bl	80123dc <lwip_htons>
 801aa1e:	4603      	mov	r3, r0
 801aa20:	b2db      	uxtb	r3, r3
 801aa22:	f003 0304 	and.w	r3, r3, #4
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d006      	beq.n	801aa38 <tcp_output+0x188>
 801aa2a:	4b44      	ldr	r3, [pc, #272]	; (801ab3c <tcp_output+0x28c>)
 801aa2c:	f240 5236 	movw	r2, #1334	; 0x536
 801aa30:	4947      	ldr	r1, [pc, #284]	; (801ab50 <tcp_output+0x2a0>)
 801aa32:	4844      	ldr	r0, [pc, #272]	; (801ab44 <tcp_output+0x294>)
 801aa34:	f007 f93a 	bl	8021cac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d01f      	beq.n	801aa80 <tcp_output+0x1d0>
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	8b5b      	ldrh	r3, [r3, #26]
 801aa44:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d119      	bne.n	801aa80 <tcp_output+0x1d0>
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d00b      	beq.n	801aa6c <tcp_output+0x1bc>
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d110      	bne.n	801aa80 <tcp_output+0x1d0>
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa62:	891a      	ldrh	r2, [r3, #8]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	d209      	bcs.n	801aa80 <tcp_output+0x1d0>
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d004      	beq.n	801aa80 <tcp_output+0x1d0>
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa7c:	2b08      	cmp	r3, #8
 801aa7e:	d901      	bls.n	801aa84 <tcp_output+0x1d4>
 801aa80:	2301      	movs	r3, #1
 801aa82:	e000      	b.n	801aa86 <tcp_output+0x1d6>
 801aa84:	2300      	movs	r3, #0
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d106      	bne.n	801aa98 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	8b5b      	ldrh	r3, [r3, #26]
 801aa8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	f000 80e6 	beq.w	801ac64 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	7d1b      	ldrb	r3, [r3, #20]
 801aa9c:	2b02      	cmp	r3, #2
 801aa9e:	d00d      	beq.n	801aabc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa2:	691b      	ldr	r3, [r3, #16]
 801aaa4:	899b      	ldrh	r3, [r3, #12]
 801aaa6:	b29c      	uxth	r4, r3
 801aaa8:	2010      	movs	r0, #16
 801aaaa:	f7f7 fc97 	bl	80123dc <lwip_htons>
 801aaae:	4603      	mov	r3, r0
 801aab0:	461a      	mov	r2, r3
 801aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aab4:	691b      	ldr	r3, [r3, #16]
 801aab6:	4322      	orrs	r2, r4
 801aab8:	b292      	uxth	r2, r2
 801aaba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801aabc:	697a      	ldr	r2, [r7, #20]
 801aabe:	6879      	ldr	r1, [r7, #4]
 801aac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aac2:	f000 f90b 	bl	801acdc <tcp_output_segment>
 801aac6:	4603      	mov	r3, r0
 801aac8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801aaca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d009      	beq.n	801aae6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	8b5b      	ldrh	r3, [r3, #26]
 801aad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aada:	b29a      	uxth	r2, r3
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	835a      	strh	r2, [r3, #26]
      return err;
 801aae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aae4:	e0d5      	b.n	801ac92 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae8:	2200      	movs	r2, #0
 801aaea:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaee:	681a      	ldr	r2, [r3, #0]
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	7d1b      	ldrb	r3, [r3, #20]
 801aaf8:	2b02      	cmp	r3, #2
 801aafa:	d006      	beq.n	801ab0a <tcp_output+0x25a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	8b5b      	ldrh	r3, [r3, #26]
 801ab00:	f023 0303 	bic.w	r3, r3, #3
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab0c:	691b      	ldr	r3, [r3, #16]
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7f7 fc78 	bl	8012406 <lwip_htonl>
 801ab16:	4604      	mov	r4, r0
 801ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab1a:	891b      	ldrh	r3, [r3, #8]
 801ab1c:	461d      	mov	r5, r3
 801ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab20:	691b      	ldr	r3, [r3, #16]
 801ab22:	899b      	ldrh	r3, [r3, #12]
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	4618      	mov	r0, r3
 801ab28:	f7f7 fc58 	bl	80123dc <lwip_htons>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	f003 0303 	and.w	r3, r3, #3
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d00d      	beq.n	801ab54 <tcp_output+0x2a4>
 801ab38:	2301      	movs	r3, #1
 801ab3a:	e00c      	b.n	801ab56 <tcp_output+0x2a6>
 801ab3c:	080280c4 	.word	0x080280c4
 801ab40:	08028664 	.word	0x08028664
 801ab44:	08028118 	.word	0x08028118
 801ab48:	0802867c 	.word	0x0802867c
 801ab4c:	2001b1b0 	.word	0x2001b1b0
 801ab50:	080286a4 	.word	0x080286a4
 801ab54:	2300      	movs	r3, #0
 801ab56:	442b      	add	r3, r5
 801ab58:	4423      	add	r3, r4
 801ab5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	1ad3      	subs	r3, r2, r3
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	da02      	bge.n	801ab6e <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	68ba      	ldr	r2, [r7, #8]
 801ab6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab70:	891b      	ldrh	r3, [r3, #8]
 801ab72:	461c      	mov	r4, r3
 801ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab76:	691b      	ldr	r3, [r3, #16]
 801ab78:	899b      	ldrh	r3, [r3, #12]
 801ab7a:	b29b      	uxth	r3, r3
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	f7f7 fc2d 	bl	80123dc <lwip_htons>
 801ab82:	4603      	mov	r3, r0
 801ab84:	b2db      	uxtb	r3, r3
 801ab86:	f003 0303 	and.w	r3, r3, #3
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d001      	beq.n	801ab92 <tcp_output+0x2e2>
 801ab8e:	2301      	movs	r3, #1
 801ab90:	e000      	b.n	801ab94 <tcp_output+0x2e4>
 801ab92:	2300      	movs	r3, #0
 801ab94:	4423      	add	r3, r4
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d049      	beq.n	801ac2e <tcp_output+0x37e>
      seg->next = NULL;
 801ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d105      	bne.n	801abb4 <tcp_output+0x304>
        pcb->unacked = seg;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abb0:	623b      	str	r3, [r7, #32]
 801abb2:	e03f      	b.n	801ac34 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abb6:	691b      	ldr	r3, [r3, #16]
 801abb8:	685b      	ldr	r3, [r3, #4]
 801abba:	4618      	mov	r0, r3
 801abbc:	f7f7 fc23 	bl	8012406 <lwip_htonl>
 801abc0:	4604      	mov	r4, r0
 801abc2:	6a3b      	ldr	r3, [r7, #32]
 801abc4:	691b      	ldr	r3, [r3, #16]
 801abc6:	685b      	ldr	r3, [r3, #4]
 801abc8:	4618      	mov	r0, r3
 801abca:	f7f7 fc1c 	bl	8012406 <lwip_htonl>
 801abce:	4603      	mov	r3, r0
 801abd0:	1ae3      	subs	r3, r4, r3
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	da24      	bge.n	801ac20 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	3370      	adds	r3, #112	; 0x70
 801abda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801abdc:	e002      	b.n	801abe4 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801abde:	69fb      	ldr	r3, [r7, #28]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801abe4:	69fb      	ldr	r3, [r7, #28]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d011      	beq.n	801ac10 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801abec:	69fb      	ldr	r3, [r7, #28]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	691b      	ldr	r3, [r3, #16]
 801abf2:	685b      	ldr	r3, [r3, #4]
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7f7 fc06 	bl	8012406 <lwip_htonl>
 801abfa:	4604      	mov	r4, r0
 801abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abfe:	691b      	ldr	r3, [r3, #16]
 801ac00:	685b      	ldr	r3, [r3, #4]
 801ac02:	4618      	mov	r0, r3
 801ac04:	f7f7 fbff 	bl	8012406 <lwip_htonl>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	dbe6      	blt.n	801abde <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 801ac10:	69fb      	ldr	r3, [r7, #28]
 801ac12:	681a      	ldr	r2, [r3, #0]
 801ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac16:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ac18:	69fb      	ldr	r3, [r7, #28]
 801ac1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac1c:	601a      	str	r2, [r3, #0]
 801ac1e:	e009      	b.n	801ac34 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ac20:	6a3b      	ldr	r3, [r7, #32]
 801ac22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac24:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ac26:	6a3b      	ldr	r3, [r7, #32]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	623b      	str	r3, [r7, #32]
 801ac2c:	e002      	b.n	801ac34 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ac2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac30:	f7fb febb 	bl	80169aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac38:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d012      	beq.n	801ac66 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac42:	691b      	ldr	r3, [r3, #16]
 801ac44:	685b      	ldr	r3, [r3, #4]
 801ac46:	4618      	mov	r0, r3
 801ac48:	f7f7 fbdd 	bl	8012406 <lwip_htonl>
 801ac4c:	4602      	mov	r2, r0
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac52:	1ad3      	subs	r3, r2, r3
 801ac54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac56:	8912      	ldrh	r2, [r2, #8]
 801ac58:	4413      	add	r3, r2
  while (seg != NULL &&
 801ac5a:	69ba      	ldr	r2, [r7, #24]
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	f4bf aed7 	bcs.w	801aa10 <tcp_output+0x160>
 801ac62:	e000      	b.n	801ac66 <tcp_output+0x3b6>
      break;
 801ac64:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d108      	bne.n	801ac80 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	2200      	movs	r2, #0
 801ac72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ac76:	e004      	b.n	801ac82 <tcp_output+0x3d2>
    goto output_done;
 801ac78:	bf00      	nop
 801ac7a:	e002      	b.n	801ac82 <tcp_output+0x3d2>
    goto output_done;
 801ac7c:	bf00      	nop
 801ac7e:	e000      	b.n	801ac82 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ac80:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	8b5b      	ldrh	r3, [r3, #26]
 801ac86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ac8a:	b29a      	uxth	r2, r3
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ac90:	2300      	movs	r3, #0
}
 801ac92:	4618      	mov	r0, r3
 801ac94:	3728      	adds	r7, #40	; 0x28
 801ac96:	46bd      	mov	sp, r7
 801ac98:	bdb0      	pop	{r4, r5, r7, pc}
 801ac9a:	bf00      	nop

0801ac9c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b082      	sub	sp, #8
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d106      	bne.n	801acb8 <tcp_output_segment_busy+0x1c>
 801acaa:	4b09      	ldr	r3, [pc, #36]	; (801acd0 <tcp_output_segment_busy+0x34>)
 801acac:	f240 529a 	movw	r2, #1434	; 0x59a
 801acb0:	4908      	ldr	r1, [pc, #32]	; (801acd4 <tcp_output_segment_busy+0x38>)
 801acb2:	4809      	ldr	r0, [pc, #36]	; (801acd8 <tcp_output_segment_busy+0x3c>)
 801acb4:	f006 fffa 	bl	8021cac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	685b      	ldr	r3, [r3, #4]
 801acbc:	7b9b      	ldrb	r3, [r3, #14]
 801acbe:	2b01      	cmp	r3, #1
 801acc0:	d001      	beq.n	801acc6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801acc2:	2301      	movs	r3, #1
 801acc4:	e000      	b.n	801acc8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801acc6:	2300      	movs	r3, #0
}
 801acc8:	4618      	mov	r0, r3
 801acca:	3708      	adds	r7, #8
 801accc:	46bd      	mov	sp, r7
 801acce:	bd80      	pop	{r7, pc}
 801acd0:	080280c4 	.word	0x080280c4
 801acd4:	080286bc 	.word	0x080286bc
 801acd8:	08028118 	.word	0x08028118

0801acdc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801acdc:	b5b0      	push	{r4, r5, r7, lr}
 801acde:	b08c      	sub	sp, #48	; 0x30
 801ace0:	af04      	add	r7, sp, #16
 801ace2:	60f8      	str	r0, [r7, #12]
 801ace4:	60b9      	str	r1, [r7, #8]
 801ace6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d106      	bne.n	801acfc <tcp_output_segment+0x20>
 801acee:	4b63      	ldr	r3, [pc, #396]	; (801ae7c <tcp_output_segment+0x1a0>)
 801acf0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801acf4:	4962      	ldr	r1, [pc, #392]	; (801ae80 <tcp_output_segment+0x1a4>)
 801acf6:	4863      	ldr	r0, [pc, #396]	; (801ae84 <tcp_output_segment+0x1a8>)
 801acf8:	f006 ffd8 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801acfc:	68bb      	ldr	r3, [r7, #8]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d106      	bne.n	801ad10 <tcp_output_segment+0x34>
 801ad02:	4b5e      	ldr	r3, [pc, #376]	; (801ae7c <tcp_output_segment+0x1a0>)
 801ad04:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ad08:	495f      	ldr	r1, [pc, #380]	; (801ae88 <tcp_output_segment+0x1ac>)
 801ad0a:	485e      	ldr	r0, [pc, #376]	; (801ae84 <tcp_output_segment+0x1a8>)
 801ad0c:	f006 ffce 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d106      	bne.n	801ad24 <tcp_output_segment+0x48>
 801ad16:	4b59      	ldr	r3, [pc, #356]	; (801ae7c <tcp_output_segment+0x1a0>)
 801ad18:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ad1c:	495b      	ldr	r1, [pc, #364]	; (801ae8c <tcp_output_segment+0x1b0>)
 801ad1e:	4859      	ldr	r0, [pc, #356]	; (801ae84 <tcp_output_segment+0x1a8>)
 801ad20:	f006 ffc4 	bl	8021cac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ad24:	68f8      	ldr	r0, [r7, #12]
 801ad26:	f7ff ffb9 	bl	801ac9c <tcp_output_segment_busy>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d001      	beq.n	801ad34 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ad30:	2300      	movs	r3, #0
 801ad32:	e09f      	b.n	801ae74 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	691c      	ldr	r4, [r3, #16]
 801ad3c:	4610      	mov	r0, r2
 801ad3e:	f7f7 fb62 	bl	8012406 <lwip_htonl>
 801ad42:	4603      	mov	r3, r0
 801ad44:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ad46:	68bb      	ldr	r3, [r7, #8]
 801ad48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	691c      	ldr	r4, [r3, #16]
 801ad4e:	4610      	mov	r0, r2
 801ad50:	f7f7 fb44 	bl	80123dc <lwip_htons>
 801ad54:	4603      	mov	r3, r0
 801ad56:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ad58:	68bb      	ldr	r3, [r7, #8]
 801ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad5c:	68ba      	ldr	r2, [r7, #8]
 801ad5e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ad60:	441a      	add	r2, r3
 801ad62:	68bb      	ldr	r3, [r7, #8]
 801ad64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	691b      	ldr	r3, [r3, #16]
 801ad6a:	3314      	adds	r3, #20
 801ad6c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	7b1b      	ldrb	r3, [r3, #12]
 801ad72:	f003 0301 	and.w	r3, r3, #1
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d015      	beq.n	801ada6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	3304      	adds	r3, #4
 801ad7e:	461a      	mov	r2, r3
 801ad80:	6879      	ldr	r1, [r7, #4]
 801ad82:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ad86:	f7fc f9d5 	bl	8017134 <tcp_eff_send_mss_netif>
 801ad8a:	4603      	mov	r3, r0
 801ad8c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ad8e:	8b7b      	ldrh	r3, [r7, #26]
 801ad90:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ad94:	4618      	mov	r0, r3
 801ad96:	f7f7 fb36 	bl	8012406 <lwip_htonl>
 801ad9a:	4602      	mov	r2, r0
 801ad9c:	69fb      	ldr	r3, [r7, #28]
 801ad9e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ada0:	69fb      	ldr	r3, [r7, #28]
 801ada2:	3304      	adds	r3, #4
 801ada4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ada6:	68bb      	ldr	r3, [r7, #8]
 801ada8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801adac:	2b00      	cmp	r3, #0
 801adae:	da02      	bge.n	801adb6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	2200      	movs	r2, #0
 801adb4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d10c      	bne.n	801add8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801adbe:	4b34      	ldr	r3, [pc, #208]	; (801ae90 <tcp_output_segment+0x1b4>)
 801adc0:	681a      	ldr	r2, [r3, #0]
 801adc2:	68bb      	ldr	r3, [r7, #8]
 801adc4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	691b      	ldr	r3, [r3, #16]
 801adca:	685b      	ldr	r3, [r3, #4]
 801adcc:	4618      	mov	r0, r3
 801adce:	f7f7 fb1a 	bl	8012406 <lwip_htonl>
 801add2:	4602      	mov	r2, r0
 801add4:	68bb      	ldr	r3, [r7, #8]
 801add6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	691a      	ldr	r2, [r3, #16]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	685b      	ldr	r3, [r3, #4]
 801ade2:	1ad3      	subs	r3, r2, r3
 801ade4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	685b      	ldr	r3, [r3, #4]
 801adea:	8959      	ldrh	r1, [r3, #10]
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	685b      	ldr	r3, [r3, #4]
 801adf0:	8b3a      	ldrh	r2, [r7, #24]
 801adf2:	1a8a      	subs	r2, r1, r2
 801adf4:	b292      	uxth	r2, r2
 801adf6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	685b      	ldr	r3, [r3, #4]
 801adfc:	8919      	ldrh	r1, [r3, #8]
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	685b      	ldr	r3, [r3, #4]
 801ae02:	8b3a      	ldrh	r2, [r7, #24]
 801ae04:	1a8a      	subs	r2, r1, r2
 801ae06:	b292      	uxth	r2, r2
 801ae08:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	685b      	ldr	r3, [r3, #4]
 801ae0e:	68fa      	ldr	r2, [r7, #12]
 801ae10:	6912      	ldr	r2, [r2, #16]
 801ae12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	691b      	ldr	r3, [r3, #16]
 801ae18:	2200      	movs	r2, #0
 801ae1a:	741a      	strb	r2, [r3, #16]
 801ae1c:	2200      	movs	r2, #0
 801ae1e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	691b      	ldr	r3, [r3, #16]
 801ae24:	f103 0214 	add.w	r2, r3, #20
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	7b1b      	ldrb	r3, [r3, #12]
 801ae2c:	009b      	lsls	r3, r3, #2
 801ae2e:	f003 0304 	and.w	r3, r3, #4
 801ae32:	4413      	add	r3, r2
 801ae34:	69fa      	ldr	r2, [r7, #28]
 801ae36:	429a      	cmp	r2, r3
 801ae38:	d006      	beq.n	801ae48 <tcp_output_segment+0x16c>
 801ae3a:	4b10      	ldr	r3, [pc, #64]	; (801ae7c <tcp_output_segment+0x1a0>)
 801ae3c:	f240 621c 	movw	r2, #1564	; 0x61c
 801ae40:	4914      	ldr	r1, [pc, #80]	; (801ae94 <tcp_output_segment+0x1b8>)
 801ae42:	4810      	ldr	r0, [pc, #64]	; (801ae84 <tcp_output_segment+0x1a8>)
 801ae44:	f006 ff32 	bl	8021cac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	6858      	ldr	r0, [r3, #4]
 801ae4c:	68b9      	ldr	r1, [r7, #8]
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	1d1c      	adds	r4, r3, #4
 801ae52:	68bb      	ldr	r3, [r7, #8]
 801ae54:	7add      	ldrb	r5, [r3, #11]
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	7a9b      	ldrb	r3, [r3, #10]
 801ae5a:	687a      	ldr	r2, [r7, #4]
 801ae5c:	9202      	str	r2, [sp, #8]
 801ae5e:	2206      	movs	r2, #6
 801ae60:	9201      	str	r2, [sp, #4]
 801ae62:	9300      	str	r3, [sp, #0]
 801ae64:	462b      	mov	r3, r5
 801ae66:	4622      	mov	r2, r4
 801ae68:	f004 fd7c 	bl	801f964 <ip4_output_if>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ae70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3720      	adds	r7, #32
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bdb0      	pop	{r4, r5, r7, pc}
 801ae7c:	080280c4 	.word	0x080280c4
 801ae80:	080286e4 	.word	0x080286e4
 801ae84:	08028118 	.word	0x08028118
 801ae88:	08028704 	.word	0x08028704
 801ae8c:	08028724 	.word	0x08028724
 801ae90:	2001b1a0 	.word	0x2001b1a0
 801ae94:	08028748 	.word	0x08028748

0801ae98 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ae98:	b5b0      	push	{r4, r5, r7, lr}
 801ae9a:	b084      	sub	sp, #16
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d106      	bne.n	801aeb4 <tcp_rexmit_rto_prepare+0x1c>
 801aea6:	4b36      	ldr	r3, [pc, #216]	; (801af80 <tcp_rexmit_rto_prepare+0xe8>)
 801aea8:	f240 6263 	movw	r2, #1635	; 0x663
 801aeac:	4935      	ldr	r1, [pc, #212]	; (801af84 <tcp_rexmit_rto_prepare+0xec>)
 801aeae:	4836      	ldr	r0, [pc, #216]	; (801af88 <tcp_rexmit_rto_prepare+0xf0>)
 801aeb0:	f006 fefc 	bl	8021cac <iprintf>

  if (pcb->unacked == NULL) {
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d102      	bne.n	801aec2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801aebc:	f06f 0305 	mvn.w	r3, #5
 801aec0:	e059      	b.n	801af76 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aec6:	60fb      	str	r3, [r7, #12]
 801aec8:	e00b      	b.n	801aee2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801aeca:	68f8      	ldr	r0, [r7, #12]
 801aecc:	f7ff fee6 	bl	801ac9c <tcp_output_segment_busy>
 801aed0:	4603      	mov	r3, r0
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d002      	beq.n	801aedc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801aed6:	f06f 0305 	mvn.w	r3, #5
 801aeda:	e04c      	b.n	801af76 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	60fb      	str	r3, [r7, #12]
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d1ef      	bne.n	801aeca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801aeea:	68f8      	ldr	r0, [r7, #12]
 801aeec:	f7ff fed6 	bl	801ac9c <tcp_output_segment_busy>
 801aef0:	4603      	mov	r3, r0
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d002      	beq.n	801aefc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801aef6:	f06f 0305 	mvn.w	r3, #5
 801aefa:	e03c      	b.n	801af76 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d104      	bne.n	801af16 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	895a      	ldrh	r2, [r3, #10]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	2200      	movs	r2, #0
 801af22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	8b5b      	ldrh	r3, [r3, #26]
 801af28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801af2c:	b29a      	uxth	r2, r3
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	691b      	ldr	r3, [r3, #16]
 801af36:	685b      	ldr	r3, [r3, #4]
 801af38:	4618      	mov	r0, r3
 801af3a:	f7f7 fa64 	bl	8012406 <lwip_htonl>
 801af3e:	4604      	mov	r4, r0
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	891b      	ldrh	r3, [r3, #8]
 801af44:	461d      	mov	r5, r3
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	691b      	ldr	r3, [r3, #16]
 801af4a:	899b      	ldrh	r3, [r3, #12]
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	4618      	mov	r0, r3
 801af50:	f7f7 fa44 	bl	80123dc <lwip_htons>
 801af54:	4603      	mov	r3, r0
 801af56:	b2db      	uxtb	r3, r3
 801af58:	f003 0303 	and.w	r3, r3, #3
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d001      	beq.n	801af64 <tcp_rexmit_rto_prepare+0xcc>
 801af60:	2301      	movs	r3, #1
 801af62:	e000      	b.n	801af66 <tcp_rexmit_rto_prepare+0xce>
 801af64:	2300      	movs	r3, #0
 801af66:	442b      	add	r3, r5
 801af68:	18e2      	adds	r2, r4, r3
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	2200      	movs	r2, #0
 801af72:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801af74:	2300      	movs	r3, #0
}
 801af76:	4618      	mov	r0, r3
 801af78:	3710      	adds	r7, #16
 801af7a:	46bd      	mov	sp, r7
 801af7c:	bdb0      	pop	{r4, r5, r7, pc}
 801af7e:	bf00      	nop
 801af80:	080280c4 	.word	0x080280c4
 801af84:	0802875c 	.word	0x0802875c
 801af88:	08028118 	.word	0x08028118

0801af8c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801af8c:	b580      	push	{r7, lr}
 801af8e:	b082      	sub	sp, #8
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d106      	bne.n	801afa8 <tcp_rexmit_rto_commit+0x1c>
 801af9a:	4b0d      	ldr	r3, [pc, #52]	; (801afd0 <tcp_rexmit_rto_commit+0x44>)
 801af9c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801afa0:	490c      	ldr	r1, [pc, #48]	; (801afd4 <tcp_rexmit_rto_commit+0x48>)
 801afa2:	480d      	ldr	r0, [pc, #52]	; (801afd8 <tcp_rexmit_rto_commit+0x4c>)
 801afa4:	f006 fe82 	bl	8021cac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801afae:	2bff      	cmp	r3, #255	; 0xff
 801afb0:	d007      	beq.n	801afc2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801afb8:	3301      	adds	r3, #1
 801afba:	b2da      	uxtb	r2, r3
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801afc2:	6878      	ldr	r0, [r7, #4]
 801afc4:	f7ff fc74 	bl	801a8b0 <tcp_output>
}
 801afc8:	bf00      	nop
 801afca:	3708      	adds	r7, #8
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}
 801afd0:	080280c4 	.word	0x080280c4
 801afd4:	08028780 	.word	0x08028780
 801afd8:	08028118 	.word	0x08028118

0801afdc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b082      	sub	sp, #8
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d106      	bne.n	801aff8 <tcp_rexmit_rto+0x1c>
 801afea:	4b0a      	ldr	r3, [pc, #40]	; (801b014 <tcp_rexmit_rto+0x38>)
 801afec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801aff0:	4909      	ldr	r1, [pc, #36]	; (801b018 <tcp_rexmit_rto+0x3c>)
 801aff2:	480a      	ldr	r0, [pc, #40]	; (801b01c <tcp_rexmit_rto+0x40>)
 801aff4:	f006 fe5a 	bl	8021cac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f7ff ff4d 	bl	801ae98 <tcp_rexmit_rto_prepare>
 801affe:	4603      	mov	r3, r0
 801b000:	2b00      	cmp	r3, #0
 801b002:	d102      	bne.n	801b00a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b004:	6878      	ldr	r0, [r7, #4]
 801b006:	f7ff ffc1 	bl	801af8c <tcp_rexmit_rto_commit>
  }
}
 801b00a:	bf00      	nop
 801b00c:	3708      	adds	r7, #8
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	080280c4 	.word	0x080280c4
 801b018:	080287a4 	.word	0x080287a4
 801b01c:	08028118 	.word	0x08028118

0801b020 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b020:	b590      	push	{r4, r7, lr}
 801b022:	b085      	sub	sp, #20
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d106      	bne.n	801b03c <tcp_rexmit+0x1c>
 801b02e:	4b2f      	ldr	r3, [pc, #188]	; (801b0ec <tcp_rexmit+0xcc>)
 801b030:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b034:	492e      	ldr	r1, [pc, #184]	; (801b0f0 <tcp_rexmit+0xd0>)
 801b036:	482f      	ldr	r0, [pc, #188]	; (801b0f4 <tcp_rexmit+0xd4>)
 801b038:	f006 fe38 	bl	8021cac <iprintf>

  if (pcb->unacked == NULL) {
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b040:	2b00      	cmp	r3, #0
 801b042:	d102      	bne.n	801b04a <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b044:	f06f 0305 	mvn.w	r3, #5
 801b048:	e04c      	b.n	801b0e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b04e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b050:	68b8      	ldr	r0, [r7, #8]
 801b052:	f7ff fe23 	bl	801ac9c <tcp_output_segment_busy>
 801b056:	4603      	mov	r3, r0
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d002      	beq.n	801b062 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b05c:	f06f 0305 	mvn.w	r3, #5
 801b060:	e040      	b.n	801b0e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b062:	68bb      	ldr	r3, [r7, #8]
 801b064:	681a      	ldr	r2, [r3, #0]
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	336c      	adds	r3, #108	; 0x6c
 801b06e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b070:	e002      	b.n	801b078 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d011      	beq.n	801b0a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	691b      	ldr	r3, [r3, #16]
 801b086:	685b      	ldr	r3, [r3, #4]
 801b088:	4618      	mov	r0, r3
 801b08a:	f7f7 f9bc 	bl	8012406 <lwip_htonl>
 801b08e:	4604      	mov	r4, r0
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	691b      	ldr	r3, [r3, #16]
 801b094:	685b      	ldr	r3, [r3, #4]
 801b096:	4618      	mov	r0, r3
 801b098:	f7f7 f9b5 	bl	8012406 <lwip_htonl>
 801b09c:	4603      	mov	r3, r0
 801b09e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	dbe6      	blt.n	801b072 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	681a      	ldr	r2, [r3, #0]
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	68ba      	ldr	r2, [r7, #8]
 801b0b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b0b2:	68bb      	ldr	r3, [r7, #8]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d103      	bne.n	801b0c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	2200      	movs	r2, #0
 801b0be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b0c8:	2bff      	cmp	r3, #255	; 0xff
 801b0ca:	d007      	beq.n	801b0dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b0d2:	3301      	adds	r3, #1
 801b0d4:	b2da      	uxtb	r2, r3
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	2200      	movs	r2, #0
 801b0e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b0e2:	2300      	movs	r3, #0
}
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3714      	adds	r7, #20
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd90      	pop	{r4, r7, pc}
 801b0ec:	080280c4 	.word	0x080280c4
 801b0f0:	080287c0 	.word	0x080287c0
 801b0f4:	08028118 	.word	0x08028118

0801b0f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b082      	sub	sp, #8
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d106      	bne.n	801b114 <tcp_rexmit_fast+0x1c>
 801b106:	4b2a      	ldr	r3, [pc, #168]	; (801b1b0 <tcp_rexmit_fast+0xb8>)
 801b108:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b10c:	4929      	ldr	r1, [pc, #164]	; (801b1b4 <tcp_rexmit_fast+0xbc>)
 801b10e:	482a      	ldr	r0, [pc, #168]	; (801b1b8 <tcp_rexmit_fast+0xc0>)
 801b110:	f006 fdcc 	bl	8021cac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d044      	beq.n	801b1a6 <tcp_rexmit_fast+0xae>
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	8b5b      	ldrh	r3, [r3, #26]
 801b120:	f003 0304 	and.w	r3, r3, #4
 801b124:	2b00      	cmp	r3, #0
 801b126:	d13e      	bne.n	801b1a6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	f7ff ff79 	bl	801b020 <tcp_rexmit>
 801b12e:	4603      	mov	r3, r0
 801b130:	2b00      	cmp	r3, #0
 801b132:	d138      	bne.n	801b1a6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b140:	4293      	cmp	r3, r2
 801b142:	bf28      	it	cs
 801b144:	4613      	movcs	r3, r2
 801b146:	b29b      	uxth	r3, r3
 801b148:	0fda      	lsrs	r2, r3, #31
 801b14a:	4413      	add	r3, r2
 801b14c:	105b      	asrs	r3, r3, #1
 801b14e:	b29a      	uxth	r2, r3
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b15c:	461a      	mov	r2, r3
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b162:	005b      	lsls	r3, r3, #1
 801b164:	429a      	cmp	r2, r3
 801b166:	d206      	bcs.n	801b176 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b16c:	005b      	lsls	r3, r3, #1
 801b16e:	b29a      	uxth	r2, r3
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b180:	4619      	mov	r1, r3
 801b182:	0049      	lsls	r1, r1, #1
 801b184:	440b      	add	r3, r1
 801b186:	b29b      	uxth	r3, r3
 801b188:	4413      	add	r3, r2
 801b18a:	b29a      	uxth	r2, r3
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	8b5b      	ldrh	r3, [r3, #26]
 801b196:	f043 0304 	orr.w	r3, r3, #4
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	2200      	movs	r2, #0
 801b1a4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b1a6:	bf00      	nop
 801b1a8:	3708      	adds	r7, #8
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	080280c4 	.word	0x080280c4
 801b1b4:	080287d8 	.word	0x080287d8
 801b1b8:	08028118 	.word	0x08028118

0801b1bc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b1bc:	b580      	push	{r7, lr}
 801b1be:	b086      	sub	sp, #24
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	60f8      	str	r0, [r7, #12]
 801b1c4:	607b      	str	r3, [r7, #4]
 801b1c6:	460b      	mov	r3, r1
 801b1c8:	817b      	strh	r3, [r7, #10]
 801b1ca:	4613      	mov	r3, r2
 801b1cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b1ce:	897a      	ldrh	r2, [r7, #10]
 801b1d0:	893b      	ldrh	r3, [r7, #8]
 801b1d2:	4413      	add	r3, r2
 801b1d4:	b29b      	uxth	r3, r3
 801b1d6:	3314      	adds	r3, #20
 801b1d8:	b29b      	uxth	r3, r3
 801b1da:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b1de:	4619      	mov	r1, r3
 801b1e0:	2022      	movs	r0, #34	; 0x22
 801b1e2:	f7f9 f9a5 	bl	8014530 <pbuf_alloc>
 801b1e6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d04d      	beq.n	801b28a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b1ee:	897b      	ldrh	r3, [r7, #10]
 801b1f0:	3313      	adds	r3, #19
 801b1f2:	697a      	ldr	r2, [r7, #20]
 801b1f4:	8952      	ldrh	r2, [r2, #10]
 801b1f6:	4293      	cmp	r3, r2
 801b1f8:	db06      	blt.n	801b208 <tcp_output_alloc_header_common+0x4c>
 801b1fa:	4b26      	ldr	r3, [pc, #152]	; (801b294 <tcp_output_alloc_header_common+0xd8>)
 801b1fc:	f240 7223 	movw	r2, #1827	; 0x723
 801b200:	4925      	ldr	r1, [pc, #148]	; (801b298 <tcp_output_alloc_header_common+0xdc>)
 801b202:	4826      	ldr	r0, [pc, #152]	; (801b29c <tcp_output_alloc_header_common+0xe0>)
 801b204:	f006 fd52 	bl	8021cac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b208:	697b      	ldr	r3, [r7, #20]
 801b20a:	685b      	ldr	r3, [r3, #4]
 801b20c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b20e:	8c3b      	ldrh	r3, [r7, #32]
 801b210:	4618      	mov	r0, r3
 801b212:	f7f7 f8e3 	bl	80123dc <lwip_htons>
 801b216:	4603      	mov	r3, r0
 801b218:	461a      	mov	r2, r3
 801b21a:	693b      	ldr	r3, [r7, #16]
 801b21c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b220:	4618      	mov	r0, r3
 801b222:	f7f7 f8db 	bl	80123dc <lwip_htons>
 801b226:	4603      	mov	r3, r0
 801b228:	461a      	mov	r2, r3
 801b22a:	693b      	ldr	r3, [r7, #16]
 801b22c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b22e:	693b      	ldr	r3, [r7, #16]
 801b230:	687a      	ldr	r2, [r7, #4]
 801b232:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b234:	68f8      	ldr	r0, [r7, #12]
 801b236:	f7f7 f8e6 	bl	8012406 <lwip_htonl>
 801b23a:	4602      	mov	r2, r0
 801b23c:	693b      	ldr	r3, [r7, #16]
 801b23e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b240:	897b      	ldrh	r3, [r7, #10]
 801b242:	089b      	lsrs	r3, r3, #2
 801b244:	b29b      	uxth	r3, r3
 801b246:	3305      	adds	r3, #5
 801b248:	b29b      	uxth	r3, r3
 801b24a:	031b      	lsls	r3, r3, #12
 801b24c:	b29a      	uxth	r2, r3
 801b24e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b252:	b29b      	uxth	r3, r3
 801b254:	4313      	orrs	r3, r2
 801b256:	b29b      	uxth	r3, r3
 801b258:	4618      	mov	r0, r3
 801b25a:	f7f7 f8bf 	bl	80123dc <lwip_htons>
 801b25e:	4603      	mov	r3, r0
 801b260:	461a      	mov	r2, r3
 801b262:	693b      	ldr	r3, [r7, #16]
 801b264:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b266:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b268:	4618      	mov	r0, r3
 801b26a:	f7f7 f8b7 	bl	80123dc <lwip_htons>
 801b26e:	4603      	mov	r3, r0
 801b270:	461a      	mov	r2, r3
 801b272:	693b      	ldr	r3, [r7, #16]
 801b274:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b276:	693b      	ldr	r3, [r7, #16]
 801b278:	2200      	movs	r2, #0
 801b27a:	741a      	strb	r2, [r3, #16]
 801b27c:	2200      	movs	r2, #0
 801b27e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b280:	693b      	ldr	r3, [r7, #16]
 801b282:	2200      	movs	r2, #0
 801b284:	749a      	strb	r2, [r3, #18]
 801b286:	2200      	movs	r2, #0
 801b288:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b28a:	697b      	ldr	r3, [r7, #20]
}
 801b28c:	4618      	mov	r0, r3
 801b28e:	3718      	adds	r7, #24
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}
 801b294:	080280c4 	.word	0x080280c4
 801b298:	080287f8 	.word	0x080287f8
 801b29c:	08028118 	.word	0x08028118

0801b2a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b2a0:	b5b0      	push	{r4, r5, r7, lr}
 801b2a2:	b08a      	sub	sp, #40	; 0x28
 801b2a4:	af04      	add	r7, sp, #16
 801b2a6:	60f8      	str	r0, [r7, #12]
 801b2a8:	607b      	str	r3, [r7, #4]
 801b2aa:	460b      	mov	r3, r1
 801b2ac:	817b      	strh	r3, [r7, #10]
 801b2ae:	4613      	mov	r3, r2
 801b2b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d106      	bne.n	801b2c6 <tcp_output_alloc_header+0x26>
 801b2b8:	4b15      	ldr	r3, [pc, #84]	; (801b310 <tcp_output_alloc_header+0x70>)
 801b2ba:	f240 7242 	movw	r2, #1858	; 0x742
 801b2be:	4915      	ldr	r1, [pc, #84]	; (801b314 <tcp_output_alloc_header+0x74>)
 801b2c0:	4815      	ldr	r0, [pc, #84]	; (801b318 <tcp_output_alloc_header+0x78>)
 801b2c2:	f006 fcf3 	bl	8021cac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	8adb      	ldrh	r3, [r3, #22]
 801b2ce:	68fa      	ldr	r2, [r7, #12]
 801b2d0:	8b12      	ldrh	r2, [r2, #24]
 801b2d2:	68f9      	ldr	r1, [r7, #12]
 801b2d4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b2d6:	893d      	ldrh	r5, [r7, #8]
 801b2d8:	897c      	ldrh	r4, [r7, #10]
 801b2da:	9103      	str	r1, [sp, #12]
 801b2dc:	2110      	movs	r1, #16
 801b2de:	9102      	str	r1, [sp, #8]
 801b2e0:	9201      	str	r2, [sp, #4]
 801b2e2:	9300      	str	r3, [sp, #0]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	462a      	mov	r2, r5
 801b2e8:	4621      	mov	r1, r4
 801b2ea:	f7ff ff67 	bl	801b1bc <tcp_output_alloc_header_common>
 801b2ee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d006      	beq.n	801b304 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2fa:	68fa      	ldr	r2, [r7, #12]
 801b2fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b2fe:	441a      	add	r2, r3
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b304:	697b      	ldr	r3, [r7, #20]
}
 801b306:	4618      	mov	r0, r3
 801b308:	3718      	adds	r7, #24
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bdb0      	pop	{r4, r5, r7, pc}
 801b30e:	bf00      	nop
 801b310:	080280c4 	.word	0x080280c4
 801b314:	08028828 	.word	0x08028828
 801b318:	08028118 	.word	0x08028118

0801b31c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b088      	sub	sp, #32
 801b320:	af00      	add	r7, sp, #0
 801b322:	60f8      	str	r0, [r7, #12]
 801b324:	60b9      	str	r1, [r7, #8]
 801b326:	4611      	mov	r1, r2
 801b328:	461a      	mov	r2, r3
 801b32a:	460b      	mov	r3, r1
 801b32c:	71fb      	strb	r3, [r7, #7]
 801b32e:	4613      	mov	r3, r2
 801b330:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b332:	2300      	movs	r3, #0
 801b334:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b336:	68bb      	ldr	r3, [r7, #8]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d106      	bne.n	801b34a <tcp_output_fill_options+0x2e>
 801b33c:	4b13      	ldr	r3, [pc, #76]	; (801b38c <tcp_output_fill_options+0x70>)
 801b33e:	f240 7256 	movw	r2, #1878	; 0x756
 801b342:	4913      	ldr	r1, [pc, #76]	; (801b390 <tcp_output_fill_options+0x74>)
 801b344:	4813      	ldr	r0, [pc, #76]	; (801b394 <tcp_output_fill_options+0x78>)
 801b346:	f006 fcb1 	bl	8021cac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b34a:	68bb      	ldr	r3, [r7, #8]
 801b34c:	685b      	ldr	r3, [r3, #4]
 801b34e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b350:	69bb      	ldr	r3, [r7, #24]
 801b352:	3314      	adds	r3, #20
 801b354:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b356:	69bb      	ldr	r3, [r7, #24]
 801b358:	f103 0214 	add.w	r2, r3, #20
 801b35c:	8bfb      	ldrh	r3, [r7, #30]
 801b35e:	009b      	lsls	r3, r3, #2
 801b360:	4619      	mov	r1, r3
 801b362:	79fb      	ldrb	r3, [r7, #7]
 801b364:	009b      	lsls	r3, r3, #2
 801b366:	f003 0304 	and.w	r3, r3, #4
 801b36a:	440b      	add	r3, r1
 801b36c:	4413      	add	r3, r2
 801b36e:	697a      	ldr	r2, [r7, #20]
 801b370:	429a      	cmp	r2, r3
 801b372:	d006      	beq.n	801b382 <tcp_output_fill_options+0x66>
 801b374:	4b05      	ldr	r3, [pc, #20]	; (801b38c <tcp_output_fill_options+0x70>)
 801b376:	f240 7275 	movw	r2, #1909	; 0x775
 801b37a:	4907      	ldr	r1, [pc, #28]	; (801b398 <tcp_output_fill_options+0x7c>)
 801b37c:	4805      	ldr	r0, [pc, #20]	; (801b394 <tcp_output_fill_options+0x78>)
 801b37e:	f006 fc95 	bl	8021cac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b382:	bf00      	nop
 801b384:	3720      	adds	r7, #32
 801b386:	46bd      	mov	sp, r7
 801b388:	bd80      	pop	{r7, pc}
 801b38a:	bf00      	nop
 801b38c:	080280c4 	.word	0x080280c4
 801b390:	08028850 	.word	0x08028850
 801b394:	08028118 	.word	0x08028118
 801b398:	08028748 	.word	0x08028748

0801b39c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b08a      	sub	sp, #40	; 0x28
 801b3a0:	af04      	add	r7, sp, #16
 801b3a2:	60f8      	str	r0, [r7, #12]
 801b3a4:	60b9      	str	r1, [r7, #8]
 801b3a6:	607a      	str	r2, [r7, #4]
 801b3a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b3aa:	68bb      	ldr	r3, [r7, #8]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d106      	bne.n	801b3be <tcp_output_control_segment+0x22>
 801b3b0:	4b1c      	ldr	r3, [pc, #112]	; (801b424 <tcp_output_control_segment+0x88>)
 801b3b2:	f240 7287 	movw	r2, #1927	; 0x787
 801b3b6:	491c      	ldr	r1, [pc, #112]	; (801b428 <tcp_output_control_segment+0x8c>)
 801b3b8:	481c      	ldr	r0, [pc, #112]	; (801b42c <tcp_output_control_segment+0x90>)
 801b3ba:	f006 fc77 	bl	8021cac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b3be:	683a      	ldr	r2, [r7, #0]
 801b3c0:	6879      	ldr	r1, [r7, #4]
 801b3c2:	68f8      	ldr	r0, [r7, #12]
 801b3c4:	f7fe fa7c 	bl	80198c0 <tcp_route>
 801b3c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b3ca:	693b      	ldr	r3, [r7, #16]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d102      	bne.n	801b3d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b3d0:	23fc      	movs	r3, #252	; 0xfc
 801b3d2:	75fb      	strb	r3, [r7, #23]
 801b3d4:	e01c      	b.n	801b410 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d006      	beq.n	801b3ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	7adb      	ldrb	r3, [r3, #11]
 801b3e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	7a9b      	ldrb	r3, [r3, #10]
 801b3e6:	757b      	strb	r3, [r7, #21]
 801b3e8:	e003      	b.n	801b3f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b3ea:	23ff      	movs	r3, #255	; 0xff
 801b3ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b3f2:	7dba      	ldrb	r2, [r7, #22]
 801b3f4:	693b      	ldr	r3, [r7, #16]
 801b3f6:	9302      	str	r3, [sp, #8]
 801b3f8:	2306      	movs	r3, #6
 801b3fa:	9301      	str	r3, [sp, #4]
 801b3fc:	7d7b      	ldrb	r3, [r7, #21]
 801b3fe:	9300      	str	r3, [sp, #0]
 801b400:	4613      	mov	r3, r2
 801b402:	683a      	ldr	r2, [r7, #0]
 801b404:	6879      	ldr	r1, [r7, #4]
 801b406:	68b8      	ldr	r0, [r7, #8]
 801b408:	f004 faac 	bl	801f964 <ip4_output_if>
 801b40c:	4603      	mov	r3, r0
 801b40e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b410:	68b8      	ldr	r0, [r7, #8]
 801b412:	f7f9 fba3 	bl	8014b5c <pbuf_free>
  return err;
 801b416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b41a:	4618      	mov	r0, r3
 801b41c:	3718      	adds	r7, #24
 801b41e:	46bd      	mov	sp, r7
 801b420:	bd80      	pop	{r7, pc}
 801b422:	bf00      	nop
 801b424:	080280c4 	.word	0x080280c4
 801b428:	08028878 	.word	0x08028878
 801b42c:	08028118 	.word	0x08028118

0801b430 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b430:	b590      	push	{r4, r7, lr}
 801b432:	b08b      	sub	sp, #44	; 0x2c
 801b434:	af04      	add	r7, sp, #16
 801b436:	60f8      	str	r0, [r7, #12]
 801b438:	60b9      	str	r1, [r7, #8]
 801b43a:	607a      	str	r2, [r7, #4]
 801b43c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b43e:	683b      	ldr	r3, [r7, #0]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d106      	bne.n	801b452 <tcp_rst+0x22>
 801b444:	4b1f      	ldr	r3, [pc, #124]	; (801b4c4 <tcp_rst+0x94>)
 801b446:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b44a:	491f      	ldr	r1, [pc, #124]	; (801b4c8 <tcp_rst+0x98>)
 801b44c:	481f      	ldr	r0, [pc, #124]	; (801b4cc <tcp_rst+0x9c>)
 801b44e:	f006 fc2d 	bl	8021cac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b454:	2b00      	cmp	r3, #0
 801b456:	d106      	bne.n	801b466 <tcp_rst+0x36>
 801b458:	4b1a      	ldr	r3, [pc, #104]	; (801b4c4 <tcp_rst+0x94>)
 801b45a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b45e:	491c      	ldr	r1, [pc, #112]	; (801b4d0 <tcp_rst+0xa0>)
 801b460:	481a      	ldr	r0, [pc, #104]	; (801b4cc <tcp_rst+0x9c>)
 801b462:	f006 fc23 	bl	8021cac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b466:	2300      	movs	r3, #0
 801b468:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b46a:	f246 0308 	movw	r3, #24584	; 0x6008
 801b46e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b470:	7dfb      	ldrb	r3, [r7, #23]
 801b472:	b29c      	uxth	r4, r3
 801b474:	68b8      	ldr	r0, [r7, #8]
 801b476:	f7f6 ffc6 	bl	8012406 <lwip_htonl>
 801b47a:	4602      	mov	r2, r0
 801b47c:	8abb      	ldrh	r3, [r7, #20]
 801b47e:	9303      	str	r3, [sp, #12]
 801b480:	2314      	movs	r3, #20
 801b482:	9302      	str	r3, [sp, #8]
 801b484:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b486:	9301      	str	r3, [sp, #4]
 801b488:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b48a:	9300      	str	r3, [sp, #0]
 801b48c:	4613      	mov	r3, r2
 801b48e:	2200      	movs	r2, #0
 801b490:	4621      	mov	r1, r4
 801b492:	6878      	ldr	r0, [r7, #4]
 801b494:	f7ff fe92 	bl	801b1bc <tcp_output_alloc_header_common>
 801b498:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d00c      	beq.n	801b4ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b4a0:	7dfb      	ldrb	r3, [r7, #23]
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	6939      	ldr	r1, [r7, #16]
 801b4a6:	68f8      	ldr	r0, [r7, #12]
 801b4a8:	f7ff ff38 	bl	801b31c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4ae:	683a      	ldr	r2, [r7, #0]
 801b4b0:	6939      	ldr	r1, [r7, #16]
 801b4b2:	68f8      	ldr	r0, [r7, #12]
 801b4b4:	f7ff ff72 	bl	801b39c <tcp_output_control_segment>
 801b4b8:	e000      	b.n	801b4bc <tcp_rst+0x8c>
    return;
 801b4ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b4bc:	371c      	adds	r7, #28
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd90      	pop	{r4, r7, pc}
 801b4c2:	bf00      	nop
 801b4c4:	080280c4 	.word	0x080280c4
 801b4c8:	080288a4 	.word	0x080288a4
 801b4cc:	08028118 	.word	0x08028118
 801b4d0:	080288c0 	.word	0x080288c0

0801b4d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b4d4:	b590      	push	{r4, r7, lr}
 801b4d6:	b087      	sub	sp, #28
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b4dc:	2300      	movs	r3, #0
 801b4de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d106      	bne.n	801b4f8 <tcp_send_empty_ack+0x24>
 801b4ea:	4b28      	ldr	r3, [pc, #160]	; (801b58c <tcp_send_empty_ack+0xb8>)
 801b4ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b4f0:	4927      	ldr	r1, [pc, #156]	; (801b590 <tcp_send_empty_ack+0xbc>)
 801b4f2:	4828      	ldr	r0, [pc, #160]	; (801b594 <tcp_send_empty_ack+0xc0>)
 801b4f4:	f006 fbda 	bl	8021cac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b4f8:	7dfb      	ldrb	r3, [r7, #23]
 801b4fa:	009b      	lsls	r3, r3, #2
 801b4fc:	b2db      	uxtb	r3, r3
 801b4fe:	f003 0304 	and.w	r3, r3, #4
 801b502:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b504:	7d7b      	ldrb	r3, [r7, #21]
 801b506:	b29c      	uxth	r4, r3
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b50c:	4618      	mov	r0, r3
 801b50e:	f7f6 ff7a 	bl	8012406 <lwip_htonl>
 801b512:	4603      	mov	r3, r0
 801b514:	2200      	movs	r2, #0
 801b516:	4621      	mov	r1, r4
 801b518:	6878      	ldr	r0, [r7, #4]
 801b51a:	f7ff fec1 	bl	801b2a0 <tcp_output_alloc_header>
 801b51e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b520:	693b      	ldr	r3, [r7, #16]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d109      	bne.n	801b53a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	8b5b      	ldrh	r3, [r3, #26]
 801b52a:	f043 0303 	orr.w	r3, r3, #3
 801b52e:	b29a      	uxth	r2, r3
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b534:	f06f 0301 	mvn.w	r3, #1
 801b538:	e023      	b.n	801b582 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b53a:	7dbb      	ldrb	r3, [r7, #22]
 801b53c:	7dfa      	ldrb	r2, [r7, #23]
 801b53e:	6939      	ldr	r1, [r7, #16]
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f7ff feeb 	bl	801b31c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b546:	687a      	ldr	r2, [r7, #4]
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	3304      	adds	r3, #4
 801b54c:	6939      	ldr	r1, [r7, #16]
 801b54e:	6878      	ldr	r0, [r7, #4]
 801b550:	f7ff ff24 	bl	801b39c <tcp_output_control_segment>
 801b554:	4603      	mov	r3, r0
 801b556:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d007      	beq.n	801b570 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	8b5b      	ldrh	r3, [r3, #26]
 801b564:	f043 0303 	orr.w	r3, r3, #3
 801b568:	b29a      	uxth	r2, r3
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	835a      	strh	r2, [r3, #26]
 801b56e:	e006      	b.n	801b57e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	8b5b      	ldrh	r3, [r3, #26]
 801b574:	f023 0303 	bic.w	r3, r3, #3
 801b578:	b29a      	uxth	r2, r3
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b582:	4618      	mov	r0, r3
 801b584:	371c      	adds	r7, #28
 801b586:	46bd      	mov	sp, r7
 801b588:	bd90      	pop	{r4, r7, pc}
 801b58a:	bf00      	nop
 801b58c:	080280c4 	.word	0x080280c4
 801b590:	080288dc 	.word	0x080288dc
 801b594:	08028118 	.word	0x08028118

0801b598 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b598:	b590      	push	{r4, r7, lr}
 801b59a:	b085      	sub	sp, #20
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d106      	bne.n	801b5b8 <tcp_keepalive+0x20>
 801b5aa:	4b18      	ldr	r3, [pc, #96]	; (801b60c <tcp_keepalive+0x74>)
 801b5ac:	f640 0224 	movw	r2, #2084	; 0x824
 801b5b0:	4917      	ldr	r1, [pc, #92]	; (801b610 <tcp_keepalive+0x78>)
 801b5b2:	4818      	ldr	r0, [pc, #96]	; (801b614 <tcp_keepalive+0x7c>)
 801b5b4:	f006 fb7a 	bl	8021cac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b5b8:	7abb      	ldrb	r3, [r7, #10]
 801b5ba:	b29c      	uxth	r4, r3
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5c0:	3b01      	subs	r3, #1
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f7f6 ff1f 	bl	8012406 <lwip_htonl>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	4621      	mov	r1, r4
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	f7ff fe66 	bl	801b2a0 <tcp_output_alloc_header>
 801b5d4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d102      	bne.n	801b5e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b5dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5e0:	e010      	b.n	801b604 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b5e2:	7abb      	ldrb	r3, [r7, #10]
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	68f9      	ldr	r1, [r7, #12]
 801b5e8:	6878      	ldr	r0, [r7, #4]
 801b5ea:	f7ff fe97 	bl	801b31c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b5ee:	687a      	ldr	r2, [r7, #4]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	3304      	adds	r3, #4
 801b5f4:	68f9      	ldr	r1, [r7, #12]
 801b5f6:	6878      	ldr	r0, [r7, #4]
 801b5f8:	f7ff fed0 	bl	801b39c <tcp_output_control_segment>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b600:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b604:	4618      	mov	r0, r3
 801b606:	3714      	adds	r7, #20
 801b608:	46bd      	mov	sp, r7
 801b60a:	bd90      	pop	{r4, r7, pc}
 801b60c:	080280c4 	.word	0x080280c4
 801b610:	080288fc 	.word	0x080288fc
 801b614:	08028118 	.word	0x08028118

0801b618 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b618:	b590      	push	{r4, r7, lr}
 801b61a:	b08b      	sub	sp, #44	; 0x2c
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b620:	2300      	movs	r3, #0
 801b622:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d106      	bne.n	801b638 <tcp_zero_window_probe+0x20>
 801b62a:	4b4d      	ldr	r3, [pc, #308]	; (801b760 <tcp_zero_window_probe+0x148>)
 801b62c:	f640 024f 	movw	r2, #2127	; 0x84f
 801b630:	494c      	ldr	r1, [pc, #304]	; (801b764 <tcp_zero_window_probe+0x14c>)
 801b632:	484d      	ldr	r0, [pc, #308]	; (801b768 <tcp_zero_window_probe+0x150>)
 801b634:	f006 fb3a 	bl	8021cac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b63c:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 801b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b640:	2b00      	cmp	r3, #0
 801b642:	d101      	bne.n	801b648 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b644:	2300      	movs	r3, #0
 801b646:	e087      	b.n	801b758 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b64e:	2bff      	cmp	r3, #255	; 0xff
 801b650:	d007      	beq.n	801b662 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b658:	3301      	adds	r3, #1
 801b65a:	b2da      	uxtb	r2, r3
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b664:	691b      	ldr	r3, [r3, #16]
 801b666:	899b      	ldrh	r3, [r3, #12]
 801b668:	b29b      	uxth	r3, r3
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7f6 feb6 	bl	80123dc <lwip_htons>
 801b670:	4603      	mov	r3, r0
 801b672:	b2db      	uxtb	r3, r3
 801b674:	f003 0301 	and.w	r3, r3, #1
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d005      	beq.n	801b688 <tcp_zero_window_probe+0x70>
 801b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b67e:	891b      	ldrh	r3, [r3, #8]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d101      	bne.n	801b688 <tcp_zero_window_probe+0x70>
 801b684:	2301      	movs	r3, #1
 801b686:	e000      	b.n	801b68a <tcp_zero_window_probe+0x72>
 801b688:	2300      	movs	r3, #0
 801b68a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b68e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b692:	2b00      	cmp	r3, #0
 801b694:	bf0c      	ite	eq
 801b696:	2301      	moveq	r3, #1
 801b698:	2300      	movne	r3, #0
 801b69a:	b2db      	uxtb	r3, r3
 801b69c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b69e:	7cfb      	ldrb	r3, [r7, #19]
 801b6a0:	b299      	uxth	r1, r3
 801b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6a4:	691b      	ldr	r3, [r3, #16]
 801b6a6:	685b      	ldr	r3, [r3, #4]
 801b6a8:	8c3a      	ldrh	r2, [r7, #32]
 801b6aa:	6878      	ldr	r0, [r7, #4]
 801b6ac:	f7ff fdf8 	bl	801b2a0 <tcp_output_alloc_header>
 801b6b0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b6b2:	69fb      	ldr	r3, [r7, #28]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d102      	bne.n	801b6be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b6bc:	e04c      	b.n	801b758 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b6be:	69fb      	ldr	r3, [r7, #28]
 801b6c0:	685b      	ldr	r3, [r3, #4]
 801b6c2:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801b6c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d011      	beq.n	801b6f0 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b6cc:	69bb      	ldr	r3, [r7, #24]
 801b6ce:	899b      	ldrh	r3, [r3, #12]
 801b6d0:	b29b      	uxth	r3, r3
 801b6d2:	b21b      	sxth	r3, r3
 801b6d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b6d8:	b21c      	sxth	r4, r3
 801b6da:	2011      	movs	r0, #17
 801b6dc:	f7f6 fe7e 	bl	80123dc <lwip_htons>
 801b6e0:	4603      	mov	r3, r0
 801b6e2:	b21b      	sxth	r3, r3
 801b6e4:	4323      	orrs	r3, r4
 801b6e6:	b21b      	sxth	r3, r3
 801b6e8:	b29a      	uxth	r2, r3
 801b6ea:	69bb      	ldr	r3, [r7, #24]
 801b6ec:	819a      	strh	r2, [r3, #12]
 801b6ee:	e010      	b.n	801b712 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b6f0:	69fb      	ldr	r3, [r7, #28]
 801b6f2:	685b      	ldr	r3, [r3, #4]
 801b6f4:	3314      	adds	r3, #20
 801b6f6:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6fa:	6858      	ldr	r0, [r3, #4]
 801b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	891a      	ldrh	r2, [r3, #8]
 801b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b704:	891b      	ldrh	r3, [r3, #8]
 801b706:	1ad3      	subs	r3, r2, r3
 801b708:	b29b      	uxth	r3, r3
 801b70a:	2201      	movs	r2, #1
 801b70c:	6979      	ldr	r1, [r7, #20]
 801b70e:	f7f9 fc2b 	bl	8014f68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b714:	691b      	ldr	r3, [r3, #16]
 801b716:	685b      	ldr	r3, [r3, #4]
 801b718:	4618      	mov	r0, r3
 801b71a:	f7f6 fe74 	bl	8012406 <lwip_htonl>
 801b71e:	4603      	mov	r3, r0
 801b720:	3301      	adds	r3, #1
 801b722:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	1ad3      	subs	r3, r2, r3
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	da02      	bge.n	801b736 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	68fa      	ldr	r2, [r7, #12]
 801b734:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b736:	7cfb      	ldrb	r3, [r7, #19]
 801b738:	2200      	movs	r2, #0
 801b73a:	69f9      	ldr	r1, [r7, #28]
 801b73c:	6878      	ldr	r0, [r7, #4]
 801b73e:	f7ff fded 	bl	801b31c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b742:	687a      	ldr	r2, [r7, #4]
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	3304      	adds	r3, #4
 801b748:	69f9      	ldr	r1, [r7, #28]
 801b74a:	6878      	ldr	r0, [r7, #4]
 801b74c:	f7ff fe26 	bl	801b39c <tcp_output_control_segment>
 801b750:	4603      	mov	r3, r0
 801b752:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b754:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b758:	4618      	mov	r0, r3
 801b75a:	372c      	adds	r7, #44	; 0x2c
 801b75c:	46bd      	mov	sp, r7
 801b75e:	bd90      	pop	{r4, r7, pc}
 801b760:	080280c4 	.word	0x080280c4
 801b764:	08028918 	.word	0x08028918
 801b768:	08028118 	.word	0x08028118

0801b76c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b76c:	b580      	push	{r7, lr}
 801b76e:	b082      	sub	sp, #8
 801b770:	af00      	add	r7, sp, #0
 801b772:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b774:	f7f9 fe62 	bl	801543c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b778:	4b0a      	ldr	r3, [pc, #40]	; (801b7a4 <tcpip_tcp_timer+0x38>)
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d103      	bne.n	801b788 <tcpip_tcp_timer+0x1c>
 801b780:	4b09      	ldr	r3, [pc, #36]	; (801b7a8 <tcpip_tcp_timer+0x3c>)
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	2b00      	cmp	r3, #0
 801b786:	d005      	beq.n	801b794 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b788:	2200      	movs	r2, #0
 801b78a:	4908      	ldr	r1, [pc, #32]	; (801b7ac <tcpip_tcp_timer+0x40>)
 801b78c:	20fa      	movs	r0, #250	; 0xfa
 801b78e:	f000 f8f3 	bl	801b978 <sys_timeout>
 801b792:	e003      	b.n	801b79c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b794:	4b06      	ldr	r3, [pc, #24]	; (801b7b0 <tcpip_tcp_timer+0x44>)
 801b796:	2200      	movs	r2, #0
 801b798:	601a      	str	r2, [r3, #0]
  }
}
 801b79a:	bf00      	nop
 801b79c:	bf00      	nop
 801b79e:	3708      	adds	r7, #8
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	bd80      	pop	{r7, pc}
 801b7a4:	2001b19c 	.word	0x2001b19c
 801b7a8:	2001b1ac 	.word	0x2001b1ac
 801b7ac:	0801b76d 	.word	0x0801b76d
 801b7b0:	200143c0 	.word	0x200143c0

0801b7b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b7b8:	4b0a      	ldr	r3, [pc, #40]	; (801b7e4 <tcp_timer_needed+0x30>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d10f      	bne.n	801b7e0 <tcp_timer_needed+0x2c>
 801b7c0:	4b09      	ldr	r3, [pc, #36]	; (801b7e8 <tcp_timer_needed+0x34>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d103      	bne.n	801b7d0 <tcp_timer_needed+0x1c>
 801b7c8:	4b08      	ldr	r3, [pc, #32]	; (801b7ec <tcp_timer_needed+0x38>)
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d007      	beq.n	801b7e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b7d0:	4b04      	ldr	r3, [pc, #16]	; (801b7e4 <tcp_timer_needed+0x30>)
 801b7d2:	2201      	movs	r2, #1
 801b7d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	4905      	ldr	r1, [pc, #20]	; (801b7f0 <tcp_timer_needed+0x3c>)
 801b7da:	20fa      	movs	r0, #250	; 0xfa
 801b7dc:	f000 f8cc 	bl	801b978 <sys_timeout>
  }
}
 801b7e0:	bf00      	nop
 801b7e2:	bd80      	pop	{r7, pc}
 801b7e4:	200143c0 	.word	0x200143c0
 801b7e8:	2001b19c 	.word	0x2001b19c
 801b7ec:	2001b1ac 	.word	0x2001b1ac
 801b7f0:	0801b76d 	.word	0x0801b76d

0801b7f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b086      	sub	sp, #24
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	60f8      	str	r0, [r7, #12]
 801b7fc:	60b9      	str	r1, [r7, #8]
 801b7fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b800:	200a      	movs	r0, #10
 801b802:	f7f8 fa77 	bl	8013cf4 <memp_malloc>
 801b806:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d109      	bne.n	801b822 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b80e:	693b      	ldr	r3, [r7, #16]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d151      	bne.n	801b8b8 <sys_timeout_abs+0xc4>
 801b814:	4b2a      	ldr	r3, [pc, #168]	; (801b8c0 <sys_timeout_abs+0xcc>)
 801b816:	22be      	movs	r2, #190	; 0xbe
 801b818:	492a      	ldr	r1, [pc, #168]	; (801b8c4 <sys_timeout_abs+0xd0>)
 801b81a:	482b      	ldr	r0, [pc, #172]	; (801b8c8 <sys_timeout_abs+0xd4>)
 801b81c:	f006 fa46 	bl	8021cac <iprintf>
    return;
 801b820:	e04a      	b.n	801b8b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b822:	693b      	ldr	r3, [r7, #16]
 801b824:	2200      	movs	r2, #0
 801b826:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b828:	693b      	ldr	r3, [r7, #16]
 801b82a:	68ba      	ldr	r2, [r7, #8]
 801b82c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b82e:	693b      	ldr	r3, [r7, #16]
 801b830:	687a      	ldr	r2, [r7, #4]
 801b832:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b834:	693b      	ldr	r3, [r7, #16]
 801b836:	68fa      	ldr	r2, [r7, #12]
 801b838:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b83a:	4b24      	ldr	r3, [pc, #144]	; (801b8cc <sys_timeout_abs+0xd8>)
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d103      	bne.n	801b84a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b842:	4a22      	ldr	r2, [pc, #136]	; (801b8cc <sys_timeout_abs+0xd8>)
 801b844:	693b      	ldr	r3, [r7, #16]
 801b846:	6013      	str	r3, [r2, #0]
    return;
 801b848:	e037      	b.n	801b8ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b84a:	693b      	ldr	r3, [r7, #16]
 801b84c:	685a      	ldr	r2, [r3, #4]
 801b84e:	4b1f      	ldr	r3, [pc, #124]	; (801b8cc <sys_timeout_abs+0xd8>)
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	685b      	ldr	r3, [r3, #4]
 801b854:	1ad3      	subs	r3, r2, r3
 801b856:	0fdb      	lsrs	r3, r3, #31
 801b858:	f003 0301 	and.w	r3, r3, #1
 801b85c:	b2db      	uxtb	r3, r3
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d007      	beq.n	801b872 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b862:	4b1a      	ldr	r3, [pc, #104]	; (801b8cc <sys_timeout_abs+0xd8>)
 801b864:	681a      	ldr	r2, [r3, #0]
 801b866:	693b      	ldr	r3, [r7, #16]
 801b868:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b86a:	4a18      	ldr	r2, [pc, #96]	; (801b8cc <sys_timeout_abs+0xd8>)
 801b86c:	693b      	ldr	r3, [r7, #16]
 801b86e:	6013      	str	r3, [r2, #0]
 801b870:	e023      	b.n	801b8ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b872:	4b16      	ldr	r3, [pc, #88]	; (801b8cc <sys_timeout_abs+0xd8>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	617b      	str	r3, [r7, #20]
 801b878:	e01a      	b.n	801b8b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b87a:	697b      	ldr	r3, [r7, #20]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d00b      	beq.n	801b89a <sys_timeout_abs+0xa6>
 801b882:	693b      	ldr	r3, [r7, #16]
 801b884:	685a      	ldr	r2, [r3, #4]
 801b886:	697b      	ldr	r3, [r7, #20]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	685b      	ldr	r3, [r3, #4]
 801b88c:	1ad3      	subs	r3, r2, r3
 801b88e:	0fdb      	lsrs	r3, r3, #31
 801b890:	f003 0301 	and.w	r3, r3, #1
 801b894:	b2db      	uxtb	r3, r3
 801b896:	2b00      	cmp	r3, #0
 801b898:	d007      	beq.n	801b8aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b89a:	697b      	ldr	r3, [r7, #20]
 801b89c:	681a      	ldr	r2, [r3, #0]
 801b89e:	693b      	ldr	r3, [r7, #16]
 801b8a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b8a2:	697b      	ldr	r3, [r7, #20]
 801b8a4:	693a      	ldr	r2, [r7, #16]
 801b8a6:	601a      	str	r2, [r3, #0]
        break;
 801b8a8:	e007      	b.n	801b8ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b8aa:	697b      	ldr	r3, [r7, #20]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	617b      	str	r3, [r7, #20]
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d1e1      	bne.n	801b87a <sys_timeout_abs+0x86>
 801b8b6:	e000      	b.n	801b8ba <sys_timeout_abs+0xc6>
    return;
 801b8b8:	bf00      	nop
      }
    }
  }
}
 801b8ba:	3718      	adds	r7, #24
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	bd80      	pop	{r7, pc}
 801b8c0:	0802893c 	.word	0x0802893c
 801b8c4:	08028970 	.word	0x08028970
 801b8c8:	080289b0 	.word	0x080289b0
 801b8cc:	200143b8 	.word	0x200143b8

0801b8d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b8d0:	b580      	push	{r7, lr}
 801b8d2:	b086      	sub	sp, #24
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	4798      	blx	r3

  now = sys_now();
 801b8e2:	f7ee fe51 	bl	800a588 <sys_now>
 801b8e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	681a      	ldr	r2, [r3, #0]
 801b8ec:	4b0f      	ldr	r3, [pc, #60]	; (801b92c <lwip_cyclic_timer+0x5c>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	4413      	add	r3, r2
 801b8f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b8f4:	68fa      	ldr	r2, [r7, #12]
 801b8f6:	693b      	ldr	r3, [r7, #16]
 801b8f8:	1ad3      	subs	r3, r2, r3
 801b8fa:	0fdb      	lsrs	r3, r3, #31
 801b8fc:	f003 0301 	and.w	r3, r3, #1
 801b900:	b2db      	uxtb	r3, r3
 801b902:	2b00      	cmp	r3, #0
 801b904:	d009      	beq.n	801b91a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b906:	697b      	ldr	r3, [r7, #20]
 801b908:	681a      	ldr	r2, [r3, #0]
 801b90a:	693b      	ldr	r3, [r7, #16]
 801b90c:	4413      	add	r3, r2
 801b90e:	687a      	ldr	r2, [r7, #4]
 801b910:	4907      	ldr	r1, [pc, #28]	; (801b930 <lwip_cyclic_timer+0x60>)
 801b912:	4618      	mov	r0, r3
 801b914:	f7ff ff6e 	bl	801b7f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b918:	e004      	b.n	801b924 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b91a:	687a      	ldr	r2, [r7, #4]
 801b91c:	4904      	ldr	r1, [pc, #16]	; (801b930 <lwip_cyclic_timer+0x60>)
 801b91e:	68f8      	ldr	r0, [r7, #12]
 801b920:	f7ff ff68 	bl	801b7f4 <sys_timeout_abs>
}
 801b924:	bf00      	nop
 801b926:	3718      	adds	r7, #24
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	200143bc 	.word	0x200143bc
 801b930:	0801b8d1 	.word	0x0801b8d1

0801b934 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b082      	sub	sp, #8
 801b938:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b93a:	2301      	movs	r3, #1
 801b93c:	607b      	str	r3, [r7, #4]
 801b93e:	e00e      	b.n	801b95e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b940:	4a0b      	ldr	r2, [pc, #44]	; (801b970 <sys_timeouts_init+0x3c>)
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	00db      	lsls	r3, r3, #3
 801b94c:	4a08      	ldr	r2, [pc, #32]	; (801b970 <sys_timeouts_init+0x3c>)
 801b94e:	4413      	add	r3, r2
 801b950:	461a      	mov	r2, r3
 801b952:	4908      	ldr	r1, [pc, #32]	; (801b974 <sys_timeouts_init+0x40>)
 801b954:	f000 f810 	bl	801b978 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	3301      	adds	r3, #1
 801b95c:	607b      	str	r3, [r7, #4]
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	2b05      	cmp	r3, #5
 801b962:	d9ed      	bls.n	801b940 <sys_timeouts_init+0xc>
  }
}
 801b964:	bf00      	nop
 801b966:	bf00      	nop
 801b968:	3708      	adds	r7, #8
 801b96a:	46bd      	mov	sp, r7
 801b96c:	bd80      	pop	{r7, pc}
 801b96e:	bf00      	nop
 801b970:	08029ab8 	.word	0x08029ab8
 801b974:	0801b8d1 	.word	0x0801b8d1

0801b978 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b978:	b580      	push	{r7, lr}
 801b97a:	b086      	sub	sp, #24
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	60f8      	str	r0, [r7, #12]
 801b980:	60b9      	str	r1, [r7, #8]
 801b982:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b98a:	d306      	bcc.n	801b99a <sys_timeout+0x22>
 801b98c:	4b0a      	ldr	r3, [pc, #40]	; (801b9b8 <sys_timeout+0x40>)
 801b98e:	f240 1229 	movw	r2, #297	; 0x129
 801b992:	490a      	ldr	r1, [pc, #40]	; (801b9bc <sys_timeout+0x44>)
 801b994:	480a      	ldr	r0, [pc, #40]	; (801b9c0 <sys_timeout+0x48>)
 801b996:	f006 f989 	bl	8021cac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b99a:	f7ee fdf5 	bl	800a588 <sys_now>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	4413      	add	r3, r2
 801b9a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b9a6:	687a      	ldr	r2, [r7, #4]
 801b9a8:	68b9      	ldr	r1, [r7, #8]
 801b9aa:	6978      	ldr	r0, [r7, #20]
 801b9ac:	f7ff ff22 	bl	801b7f4 <sys_timeout_abs>
#endif
}
 801b9b0:	bf00      	nop
 801b9b2:	3718      	adds	r7, #24
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	bd80      	pop	{r7, pc}
 801b9b8:	0802893c 	.word	0x0802893c
 801b9bc:	080289d8 	.word	0x080289d8
 801b9c0:	080289b0 	.word	0x080289b0

0801b9c4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b084      	sub	sp, #16
 801b9c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b9ca:	f7ee fddd 	bl	800a588 <sys_now>
 801b9ce:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b9d0:	4b17      	ldr	r3, [pc, #92]	; (801ba30 <sys_check_timeouts+0x6c>)
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d022      	beq.n	801ba22 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	685b      	ldr	r3, [r3, #4]
 801b9e0:	68fa      	ldr	r2, [r7, #12]
 801b9e2:	1ad3      	subs	r3, r2, r3
 801b9e4:	0fdb      	lsrs	r3, r3, #31
 801b9e6:	f003 0301 	and.w	r3, r3, #1
 801b9ea:	b2db      	uxtb	r3, r3
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d11a      	bne.n	801ba26 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b9f0:	68bb      	ldr	r3, [r7, #8]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	4a0e      	ldr	r2, [pc, #56]	; (801ba30 <sys_check_timeouts+0x6c>)
 801b9f6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b9fe:	68bb      	ldr	r3, [r7, #8]
 801ba00:	68db      	ldr	r3, [r3, #12]
 801ba02:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ba04:	68bb      	ldr	r3, [r7, #8]
 801ba06:	685b      	ldr	r3, [r3, #4]
 801ba08:	4a0a      	ldr	r2, [pc, #40]	; (801ba34 <sys_check_timeouts+0x70>)
 801ba0a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ba0c:	68b9      	ldr	r1, [r7, #8]
 801ba0e:	200a      	movs	r0, #10
 801ba10:	f7f8 f9c2 	bl	8013d98 <memp_free>
    if (handler != NULL) {
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d0da      	beq.n	801b9d0 <sys_check_timeouts+0xc>
      handler(arg);
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	6838      	ldr	r0, [r7, #0]
 801ba1e:	4798      	blx	r3
  do {
 801ba20:	e7d6      	b.n	801b9d0 <sys_check_timeouts+0xc>
      return;
 801ba22:	bf00      	nop
 801ba24:	e000      	b.n	801ba28 <sys_check_timeouts+0x64>
      return;
 801ba26:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ba28:	3710      	adds	r7, #16
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	bd80      	pop	{r7, pc}
 801ba2e:	bf00      	nop
 801ba30:	200143b8 	.word	0x200143b8
 801ba34:	200143bc 	.word	0x200143bc

0801ba38 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b082      	sub	sp, #8
 801ba3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ba3e:	4b16      	ldr	r3, [pc, #88]	; (801ba98 <sys_timeouts_sleeptime+0x60>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d102      	bne.n	801ba4c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ba46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba4a:	e020      	b.n	801ba8e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ba4c:	f7ee fd9c 	bl	800a588 <sys_now>
 801ba50:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ba52:	4b11      	ldr	r3, [pc, #68]	; (801ba98 <sys_timeouts_sleeptime+0x60>)
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	685a      	ldr	r2, [r3, #4]
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	1ad3      	subs	r3, r2, r3
 801ba5c:	0fdb      	lsrs	r3, r3, #31
 801ba5e:	f003 0301 	and.w	r3, r3, #1
 801ba62:	b2db      	uxtb	r3, r3
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d001      	beq.n	801ba6c <sys_timeouts_sleeptime+0x34>
    return 0;
 801ba68:	2300      	movs	r3, #0
 801ba6a:	e010      	b.n	801ba8e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ba6c:	4b0a      	ldr	r3, [pc, #40]	; (801ba98 <sys_timeouts_sleeptime+0x60>)
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	685a      	ldr	r2, [r3, #4]
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	1ad3      	subs	r3, r2, r3
 801ba76:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ba78:	683b      	ldr	r3, [r7, #0]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	da06      	bge.n	801ba8c <sys_timeouts_sleeptime+0x54>
 801ba7e:	4b07      	ldr	r3, [pc, #28]	; (801ba9c <sys_timeouts_sleeptime+0x64>)
 801ba80:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ba84:	4906      	ldr	r1, [pc, #24]	; (801baa0 <sys_timeouts_sleeptime+0x68>)
 801ba86:	4807      	ldr	r0, [pc, #28]	; (801baa4 <sys_timeouts_sleeptime+0x6c>)
 801ba88:	f006 f910 	bl	8021cac <iprintf>
    return ret;
 801ba8c:	683b      	ldr	r3, [r7, #0]
  }
}
 801ba8e:	4618      	mov	r0, r3
 801ba90:	3708      	adds	r7, #8
 801ba92:	46bd      	mov	sp, r7
 801ba94:	bd80      	pop	{r7, pc}
 801ba96:	bf00      	nop
 801ba98:	200143b8 	.word	0x200143b8
 801ba9c:	0802893c 	.word	0x0802893c
 801baa0:	08028a10 	.word	0x08028a10
 801baa4:	080289b0 	.word	0x080289b0

0801baa8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801baac:	f006 f98c 	bl	8021dc8 <rand>
 801bab0:	4603      	mov	r3, r0
 801bab2:	b29b      	uxth	r3, r3
 801bab4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bab8:	b29b      	uxth	r3, r3
 801baba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801babe:	b29a      	uxth	r2, r3
 801bac0:	4b01      	ldr	r3, [pc, #4]	; (801bac8 <udp_init+0x20>)
 801bac2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bac4:	bf00      	nop
 801bac6:	bd80      	pop	{r7, pc}
 801bac8:	2000006c 	.word	0x2000006c

0801bacc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bacc:	b480      	push	{r7}
 801bace:	b083      	sub	sp, #12
 801bad0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bad2:	2300      	movs	r3, #0
 801bad4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bad6:	4b17      	ldr	r3, [pc, #92]	; (801bb34 <udp_new_port+0x68>)
 801bad8:	881b      	ldrh	r3, [r3, #0]
 801bada:	1c5a      	adds	r2, r3, #1
 801badc:	b291      	uxth	r1, r2
 801bade:	4a15      	ldr	r2, [pc, #84]	; (801bb34 <udp_new_port+0x68>)
 801bae0:	8011      	strh	r1, [r2, #0]
 801bae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bae6:	4293      	cmp	r3, r2
 801bae8:	d103      	bne.n	801baf2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801baea:	4b12      	ldr	r3, [pc, #72]	; (801bb34 <udp_new_port+0x68>)
 801baec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801baf0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801baf2:	4b11      	ldr	r3, [pc, #68]	; (801bb38 <udp_new_port+0x6c>)
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	603b      	str	r3, [r7, #0]
 801baf8:	e011      	b.n	801bb1e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801bafa:	683b      	ldr	r3, [r7, #0]
 801bafc:	8a5a      	ldrh	r2, [r3, #18]
 801bafe:	4b0d      	ldr	r3, [pc, #52]	; (801bb34 <udp_new_port+0x68>)
 801bb00:	881b      	ldrh	r3, [r3, #0]
 801bb02:	429a      	cmp	r2, r3
 801bb04:	d108      	bne.n	801bb18 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bb06:	88fb      	ldrh	r3, [r7, #6]
 801bb08:	3301      	adds	r3, #1
 801bb0a:	80fb      	strh	r3, [r7, #6]
 801bb0c:	88fb      	ldrh	r3, [r7, #6]
 801bb0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bb12:	d3e0      	bcc.n	801bad6 <udp_new_port+0xa>
        return 0;
 801bb14:	2300      	movs	r3, #0
 801bb16:	e007      	b.n	801bb28 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb18:	683b      	ldr	r3, [r7, #0]
 801bb1a:	68db      	ldr	r3, [r3, #12]
 801bb1c:	603b      	str	r3, [r7, #0]
 801bb1e:	683b      	ldr	r3, [r7, #0]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d1ea      	bne.n	801bafa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bb24:	4b03      	ldr	r3, [pc, #12]	; (801bb34 <udp_new_port+0x68>)
 801bb26:	881b      	ldrh	r3, [r3, #0]
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	370c      	adds	r7, #12
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb32:	4770      	bx	lr
 801bb34:	2000006c 	.word	0x2000006c
 801bb38:	2001b1b4 	.word	0x2001b1b4

0801bb3c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b084      	sub	sp, #16
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	60f8      	str	r0, [r7, #12]
 801bb44:	60b9      	str	r1, [r7, #8]
 801bb46:	4613      	mov	r3, r2
 801bb48:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d105      	bne.n	801bb5c <udp_input_local_match+0x20>
 801bb50:	4b27      	ldr	r3, [pc, #156]	; (801bbf0 <udp_input_local_match+0xb4>)
 801bb52:	2287      	movs	r2, #135	; 0x87
 801bb54:	4927      	ldr	r1, [pc, #156]	; (801bbf4 <udp_input_local_match+0xb8>)
 801bb56:	4828      	ldr	r0, [pc, #160]	; (801bbf8 <udp_input_local_match+0xbc>)
 801bb58:	f006 f8a8 	bl	8021cac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bb5c:	68bb      	ldr	r3, [r7, #8]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d105      	bne.n	801bb6e <udp_input_local_match+0x32>
 801bb62:	4b23      	ldr	r3, [pc, #140]	; (801bbf0 <udp_input_local_match+0xb4>)
 801bb64:	2288      	movs	r2, #136	; 0x88
 801bb66:	4925      	ldr	r1, [pc, #148]	; (801bbfc <udp_input_local_match+0xc0>)
 801bb68:	4823      	ldr	r0, [pc, #140]	; (801bbf8 <udp_input_local_match+0xbc>)
 801bb6a:	f006 f89f 	bl	8021cac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	7a1b      	ldrb	r3, [r3, #8]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d00b      	beq.n	801bb8e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	7a1a      	ldrb	r2, [r3, #8]
 801bb7a:	4b21      	ldr	r3, [pc, #132]	; (801bc00 <udp_input_local_match+0xc4>)
 801bb7c:	685b      	ldr	r3, [r3, #4]
 801bb7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bb82:	3301      	adds	r3, #1
 801bb84:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bb86:	429a      	cmp	r2, r3
 801bb88:	d001      	beq.n	801bb8e <udp_input_local_match+0x52>
    return 0;
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	e02b      	b.n	801bbe6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bb8e:	79fb      	ldrb	r3, [r7, #7]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d018      	beq.n	801bbc6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d013      	beq.n	801bbc2 <udp_input_local_match+0x86>
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d00f      	beq.n	801bbc2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bba2:	4b17      	ldr	r3, [pc, #92]	; (801bc00 <udp_input_local_match+0xc4>)
 801bba4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bbaa:	d00a      	beq.n	801bbc2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	681a      	ldr	r2, [r3, #0]
 801bbb0:	4b13      	ldr	r3, [pc, #76]	; (801bc00 <udp_input_local_match+0xc4>)
 801bbb2:	695b      	ldr	r3, [r3, #20]
 801bbb4:	405a      	eors	r2, r3
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	3308      	adds	r3, #8
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d110      	bne.n	801bbe4 <udp_input_local_match+0xa8>
          return 1;
 801bbc2:	2301      	movs	r3, #1
 801bbc4:	e00f      	b.n	801bbe6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d009      	beq.n	801bbe0 <udp_input_local_match+0xa4>
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d005      	beq.n	801bbe0 <udp_input_local_match+0xa4>
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	681a      	ldr	r2, [r3, #0]
 801bbd8:	4b09      	ldr	r3, [pc, #36]	; (801bc00 <udp_input_local_match+0xc4>)
 801bbda:	695b      	ldr	r3, [r3, #20]
 801bbdc:	429a      	cmp	r2, r3
 801bbde:	d101      	bne.n	801bbe4 <udp_input_local_match+0xa8>
        return 1;
 801bbe0:	2301      	movs	r3, #1
 801bbe2:	e000      	b.n	801bbe6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bbe4:	2300      	movs	r3, #0
}
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	3710      	adds	r7, #16
 801bbea:	46bd      	mov	sp, r7
 801bbec:	bd80      	pop	{r7, pc}
 801bbee:	bf00      	nop
 801bbf0:	08028a24 	.word	0x08028a24
 801bbf4:	08028a54 	.word	0x08028a54
 801bbf8:	08028a78 	.word	0x08028a78
 801bbfc:	08028aa0 	.word	0x08028aa0
 801bc00:	200177a8 	.word	0x200177a8

0801bc04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bc04:	b590      	push	{r4, r7, lr}
 801bc06:	b08d      	sub	sp, #52	; 0x34
 801bc08:	af02      	add	r7, sp, #8
 801bc0a:	6078      	str	r0, [r7, #4]
 801bc0c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bc0e:	2300      	movs	r3, #0
 801bc10:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d105      	bne.n	801bc24 <udp_input+0x20>
 801bc18:	4b7c      	ldr	r3, [pc, #496]	; (801be0c <udp_input+0x208>)
 801bc1a:	22cf      	movs	r2, #207	; 0xcf
 801bc1c:	497c      	ldr	r1, [pc, #496]	; (801be10 <udp_input+0x20c>)
 801bc1e:	487d      	ldr	r0, [pc, #500]	; (801be14 <udp_input+0x210>)
 801bc20:	f006 f844 	bl	8021cac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801bc24:	683b      	ldr	r3, [r7, #0]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d105      	bne.n	801bc36 <udp_input+0x32>
 801bc2a:	4b78      	ldr	r3, [pc, #480]	; (801be0c <udp_input+0x208>)
 801bc2c:	22d0      	movs	r2, #208	; 0xd0
 801bc2e:	497a      	ldr	r1, [pc, #488]	; (801be18 <udp_input+0x214>)
 801bc30:	4878      	ldr	r0, [pc, #480]	; (801be14 <udp_input+0x210>)
 801bc32:	f006 f83b 	bl	8021cac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	895b      	ldrh	r3, [r3, #10]
 801bc3a:	2b07      	cmp	r3, #7
 801bc3c:	d803      	bhi.n	801bc46 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801bc3e:	6878      	ldr	r0, [r7, #4]
 801bc40:	f7f8 ff8c 	bl	8014b5c <pbuf_free>
    goto end;
 801bc44:	e0de      	b.n	801be04 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	685b      	ldr	r3, [r3, #4]
 801bc4a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801bc4c:	4b73      	ldr	r3, [pc, #460]	; (801be1c <udp_input+0x218>)
 801bc4e:	695b      	ldr	r3, [r3, #20]
 801bc50:	4a72      	ldr	r2, [pc, #456]	; (801be1c <udp_input+0x218>)
 801bc52:	6812      	ldr	r2, [r2, #0]
 801bc54:	4611      	mov	r1, r2
 801bc56:	4618      	mov	r0, r3
 801bc58:	f003 ff5c 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801bc5c:	4603      	mov	r3, r0
 801bc5e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	881b      	ldrh	r3, [r3, #0]
 801bc64:	b29b      	uxth	r3, r3
 801bc66:	4618      	mov	r0, r3
 801bc68:	f7f6 fbb8 	bl	80123dc <lwip_htons>
 801bc6c:	4603      	mov	r3, r0
 801bc6e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801bc70:	697b      	ldr	r3, [r7, #20]
 801bc72:	885b      	ldrh	r3, [r3, #2]
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	4618      	mov	r0, r3
 801bc78:	f7f6 fbb0 	bl	80123dc <lwip_htons>
 801bc7c:	4603      	mov	r3, r0
 801bc7e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801bc80:	2300      	movs	r3, #0
 801bc82:	623b      	str	r3, [r7, #32]
  prev = NULL;
 801bc84:	2300      	movs	r3, #0
 801bc86:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 801bc88:	2300      	movs	r3, #0
 801bc8a:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc8c:	4b64      	ldr	r3, [pc, #400]	; (801be20 <udp_input+0x21c>)
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	623b      	str	r3, [r7, #32]
 801bc92:	e054      	b.n	801bd3e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801bc94:	6a3b      	ldr	r3, [r7, #32]
 801bc96:	8a5b      	ldrh	r3, [r3, #18]
 801bc98:	89fa      	ldrh	r2, [r7, #14]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	d14a      	bne.n	801bd34 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801bc9e:	7cfb      	ldrb	r3, [r7, #19]
 801bca0:	461a      	mov	r2, r3
 801bca2:	6839      	ldr	r1, [r7, #0]
 801bca4:	6a38      	ldr	r0, [r7, #32]
 801bca6:	f7ff ff49 	bl	801bb3c <udp_input_local_match>
 801bcaa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d041      	beq.n	801bd34 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801bcb0:	6a3b      	ldr	r3, [r7, #32]
 801bcb2:	7c1b      	ldrb	r3, [r3, #16]
 801bcb4:	f003 0304 	and.w	r3, r3, #4
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d11d      	bne.n	801bcf8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801bcbc:	69bb      	ldr	r3, [r7, #24]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d102      	bne.n	801bcc8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801bcc2:	6a3b      	ldr	r3, [r7, #32]
 801bcc4:	61bb      	str	r3, [r7, #24]
 801bcc6:	e017      	b.n	801bcf8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801bcc8:	7cfb      	ldrb	r3, [r7, #19]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d014      	beq.n	801bcf8 <udp_input+0xf4>
 801bcce:	4b53      	ldr	r3, [pc, #332]	; (801be1c <udp_input+0x218>)
 801bcd0:	695b      	ldr	r3, [r3, #20]
 801bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bcd6:	d10f      	bne.n	801bcf8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801bcd8:	69bb      	ldr	r3, [r7, #24]
 801bcda:	681a      	ldr	r2, [r3, #0]
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	3304      	adds	r3, #4
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	429a      	cmp	r2, r3
 801bce4:	d008      	beq.n	801bcf8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801bce6:	6a3b      	ldr	r3, [r7, #32]
 801bce8:	681a      	ldr	r2, [r3, #0]
 801bcea:	683b      	ldr	r3, [r7, #0]
 801bcec:	3304      	adds	r3, #4
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d101      	bne.n	801bcf8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801bcf4:	6a3b      	ldr	r3, [r7, #32]
 801bcf6:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801bcf8:	6a3b      	ldr	r3, [r7, #32]
 801bcfa:	8a9b      	ldrh	r3, [r3, #20]
 801bcfc:	8a3a      	ldrh	r2, [r7, #16]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d118      	bne.n	801bd34 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bd02:	6a3b      	ldr	r3, [r7, #32]
 801bd04:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d005      	beq.n	801bd16 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801bd0a:	6a3b      	ldr	r3, [r7, #32]
 801bd0c:	685a      	ldr	r2, [r3, #4]
 801bd0e:	4b43      	ldr	r3, [pc, #268]	; (801be1c <udp_input+0x218>)
 801bd10:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bd12:	429a      	cmp	r2, r3
 801bd14:	d10e      	bne.n	801bd34 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d014      	beq.n	801bd46 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801bd1c:	6a3b      	ldr	r3, [r7, #32]
 801bd1e:	68da      	ldr	r2, [r3, #12]
 801bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd22:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801bd24:	4b3e      	ldr	r3, [pc, #248]	; (801be20 <udp_input+0x21c>)
 801bd26:	681a      	ldr	r2, [r3, #0]
 801bd28:	6a3b      	ldr	r3, [r7, #32]
 801bd2a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801bd2c:	4a3c      	ldr	r2, [pc, #240]	; (801be20 <udp_input+0x21c>)
 801bd2e:	6a3b      	ldr	r3, [r7, #32]
 801bd30:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801bd32:	e008      	b.n	801bd46 <udp_input+0x142>
      }
    }

    prev = pcb;
 801bd34:	6a3b      	ldr	r3, [r7, #32]
 801bd36:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd38:	6a3b      	ldr	r3, [r7, #32]
 801bd3a:	68db      	ldr	r3, [r3, #12]
 801bd3c:	623b      	str	r3, [r7, #32]
 801bd3e:	6a3b      	ldr	r3, [r7, #32]
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d1a7      	bne.n	801bc94 <udp_input+0x90>
 801bd44:	e000      	b.n	801bd48 <udp_input+0x144>
        break;
 801bd46:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801bd48:	6a3b      	ldr	r3, [r7, #32]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d101      	bne.n	801bd52 <udp_input+0x14e>
    pcb = uncon_pcb;
 801bd4e:	69bb      	ldr	r3, [r7, #24]
 801bd50:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801bd52:	6a3b      	ldr	r3, [r7, #32]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d002      	beq.n	801bd5e <udp_input+0x15a>
    for_us = 1;
 801bd58:	2301      	movs	r3, #1
 801bd5a:	77fb      	strb	r3, [r7, #31]
 801bd5c:	e00a      	b.n	801bd74 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bd5e:	683b      	ldr	r3, [r7, #0]
 801bd60:	3304      	adds	r3, #4
 801bd62:	681a      	ldr	r2, [r3, #0]
 801bd64:	4b2d      	ldr	r3, [pc, #180]	; (801be1c <udp_input+0x218>)
 801bd66:	695b      	ldr	r3, [r3, #20]
 801bd68:	429a      	cmp	r2, r3
 801bd6a:	bf0c      	ite	eq
 801bd6c:	2301      	moveq	r3, #1
 801bd6e:	2300      	movne	r3, #0
 801bd70:	b2db      	uxtb	r3, r3
 801bd72:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bd74:	7ffb      	ldrb	r3, [r7, #31]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d041      	beq.n	801bdfe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801bd7a:	2108      	movs	r1, #8
 801bd7c:	6878      	ldr	r0, [r7, #4]
 801bd7e:	f7f8 fe35 	bl	80149ec <pbuf_remove_header>
 801bd82:	4603      	mov	r3, r0
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d00a      	beq.n	801bd9e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bd88:	4b20      	ldr	r3, [pc, #128]	; (801be0c <udp_input+0x208>)
 801bd8a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801bd8e:	4925      	ldr	r1, [pc, #148]	; (801be24 <udp_input+0x220>)
 801bd90:	4820      	ldr	r0, [pc, #128]	; (801be14 <udp_input+0x210>)
 801bd92:	f005 ff8b 	bl	8021cac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bd96:	6878      	ldr	r0, [r7, #4]
 801bd98:	f7f8 fee0 	bl	8014b5c <pbuf_free>
      goto end;
 801bd9c:	e032      	b.n	801be04 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801bd9e:	6a3b      	ldr	r3, [r7, #32]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d012      	beq.n	801bdca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bda4:	6a3b      	ldr	r3, [r7, #32]
 801bda6:	699b      	ldr	r3, [r3, #24]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d00a      	beq.n	801bdc2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bdac:	6a3b      	ldr	r3, [r7, #32]
 801bdae:	699c      	ldr	r4, [r3, #24]
 801bdb0:	6a3b      	ldr	r3, [r7, #32]
 801bdb2:	69d8      	ldr	r0, [r3, #28]
 801bdb4:	8a3b      	ldrh	r3, [r7, #16]
 801bdb6:	9300      	str	r3, [sp, #0]
 801bdb8:	4b1b      	ldr	r3, [pc, #108]	; (801be28 <udp_input+0x224>)
 801bdba:	687a      	ldr	r2, [r7, #4]
 801bdbc:	6a39      	ldr	r1, [r7, #32]
 801bdbe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bdc0:	e021      	b.n	801be06 <udp_input+0x202>
        pbuf_free(p);
 801bdc2:	6878      	ldr	r0, [r7, #4]
 801bdc4:	f7f8 feca 	bl	8014b5c <pbuf_free>
        goto end;
 801bdc8:	e01c      	b.n	801be04 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bdca:	7cfb      	ldrb	r3, [r7, #19]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d112      	bne.n	801bdf6 <udp_input+0x1f2>
 801bdd0:	4b12      	ldr	r3, [pc, #72]	; (801be1c <udp_input+0x218>)
 801bdd2:	695b      	ldr	r3, [r3, #20]
 801bdd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bdd8:	2be0      	cmp	r3, #224	; 0xe0
 801bdda:	d00c      	beq.n	801bdf6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bddc:	4b0f      	ldr	r3, [pc, #60]	; (801be1c <udp_input+0x218>)
 801bdde:	899b      	ldrh	r3, [r3, #12]
 801bde0:	3308      	adds	r3, #8
 801bde2:	b29b      	uxth	r3, r3
 801bde4:	b21b      	sxth	r3, r3
 801bde6:	4619      	mov	r1, r3
 801bde8:	6878      	ldr	r0, [r7, #4]
 801bdea:	f7f8 fe72 	bl	8014ad2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bdee:	2103      	movs	r1, #3
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f003 fb51 	bl	801f498 <icmp_dest_unreach>
      pbuf_free(p);
 801bdf6:	6878      	ldr	r0, [r7, #4]
 801bdf8:	f7f8 feb0 	bl	8014b5c <pbuf_free>
  return;
 801bdfc:	e003      	b.n	801be06 <udp_input+0x202>
    pbuf_free(p);
 801bdfe:	6878      	ldr	r0, [r7, #4]
 801be00:	f7f8 feac 	bl	8014b5c <pbuf_free>
  return;
 801be04:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801be06:	372c      	adds	r7, #44	; 0x2c
 801be08:	46bd      	mov	sp, r7
 801be0a:	bd90      	pop	{r4, r7, pc}
 801be0c:	08028a24 	.word	0x08028a24
 801be10:	08028ac8 	.word	0x08028ac8
 801be14:	08028a78 	.word	0x08028a78
 801be18:	08028ae0 	.word	0x08028ae0
 801be1c:	200177a8 	.word	0x200177a8
 801be20:	2001b1b4 	.word	0x2001b1b4
 801be24:	08028afc 	.word	0x08028afc
 801be28:	200177b8 	.word	0x200177b8

0801be2c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801be2c:	b580      	push	{r7, lr}
 801be2e:	b082      	sub	sp, #8
 801be30:	af00      	add	r7, sp, #0
 801be32:	6078      	str	r0, [r7, #4]
 801be34:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d109      	bne.n	801be50 <udp_send+0x24>
 801be3c:	4b11      	ldr	r3, [pc, #68]	; (801be84 <udp_send+0x58>)
 801be3e:	f240 12d5 	movw	r2, #469	; 0x1d5
 801be42:	4911      	ldr	r1, [pc, #68]	; (801be88 <udp_send+0x5c>)
 801be44:	4811      	ldr	r0, [pc, #68]	; (801be8c <udp_send+0x60>)
 801be46:	f005 ff31 	bl	8021cac <iprintf>
 801be4a:	f06f 030f 	mvn.w	r3, #15
 801be4e:	e015      	b.n	801be7c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d109      	bne.n	801be6a <udp_send+0x3e>
 801be56:	4b0b      	ldr	r3, [pc, #44]	; (801be84 <udp_send+0x58>)
 801be58:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801be5c:	490c      	ldr	r1, [pc, #48]	; (801be90 <udp_send+0x64>)
 801be5e:	480b      	ldr	r0, [pc, #44]	; (801be8c <udp_send+0x60>)
 801be60:	f005 ff24 	bl	8021cac <iprintf>
 801be64:	f06f 030f 	mvn.w	r3, #15
 801be68:	e008      	b.n	801be7c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	1d1a      	adds	r2, r3, #4
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	8a9b      	ldrh	r3, [r3, #20]
 801be72:	6839      	ldr	r1, [r7, #0]
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	f000 f80d 	bl	801be94 <udp_sendto>
 801be7a:	4603      	mov	r3, r0
}
 801be7c:	4618      	mov	r0, r3
 801be7e:	3708      	adds	r7, #8
 801be80:	46bd      	mov	sp, r7
 801be82:	bd80      	pop	{r7, pc}
 801be84:	08028a24 	.word	0x08028a24
 801be88:	08028b18 	.word	0x08028b18
 801be8c:	08028a78 	.word	0x08028a78
 801be90:	08028b30 	.word	0x08028b30

0801be94 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b088      	sub	sp, #32
 801be98:	af02      	add	r7, sp, #8
 801be9a:	60f8      	str	r0, [r7, #12]
 801be9c:	60b9      	str	r1, [r7, #8]
 801be9e:	607a      	str	r2, [r7, #4]
 801bea0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d109      	bne.n	801bebc <udp_sendto+0x28>
 801bea8:	4b23      	ldr	r3, [pc, #140]	; (801bf38 <udp_sendto+0xa4>)
 801beaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 801beae:	4923      	ldr	r1, [pc, #140]	; (801bf3c <udp_sendto+0xa8>)
 801beb0:	4823      	ldr	r0, [pc, #140]	; (801bf40 <udp_sendto+0xac>)
 801beb2:	f005 fefb 	bl	8021cac <iprintf>
 801beb6:	f06f 030f 	mvn.w	r3, #15
 801beba:	e038      	b.n	801bf2e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bebc:	68bb      	ldr	r3, [r7, #8]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d109      	bne.n	801bed6 <udp_sendto+0x42>
 801bec2:	4b1d      	ldr	r3, [pc, #116]	; (801bf38 <udp_sendto+0xa4>)
 801bec4:	f240 2219 	movw	r2, #537	; 0x219
 801bec8:	491e      	ldr	r1, [pc, #120]	; (801bf44 <udp_sendto+0xb0>)
 801beca:	481d      	ldr	r0, [pc, #116]	; (801bf40 <udp_sendto+0xac>)
 801becc:	f005 feee 	bl	8021cac <iprintf>
 801bed0:	f06f 030f 	mvn.w	r3, #15
 801bed4:	e02b      	b.n	801bf2e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d109      	bne.n	801bef0 <udp_sendto+0x5c>
 801bedc:	4b16      	ldr	r3, [pc, #88]	; (801bf38 <udp_sendto+0xa4>)
 801bede:	f240 221a 	movw	r2, #538	; 0x21a
 801bee2:	4919      	ldr	r1, [pc, #100]	; (801bf48 <udp_sendto+0xb4>)
 801bee4:	4816      	ldr	r0, [pc, #88]	; (801bf40 <udp_sendto+0xac>)
 801bee6:	f005 fee1 	bl	8021cac <iprintf>
 801beea:	f06f 030f 	mvn.w	r3, #15
 801beee:	e01e      	b.n	801bf2e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	7a1b      	ldrb	r3, [r3, #8]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d006      	beq.n	801bf06 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	7a1b      	ldrb	r3, [r3, #8]
 801befc:	4618      	mov	r0, r3
 801befe:	f7f8 fa6d 	bl	80143dc <netif_get_by_index>
 801bf02:	6178      	str	r0, [r7, #20]
 801bf04:	e003      	b.n	801bf0e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bf06:	6878      	ldr	r0, [r7, #4]
 801bf08:	f003 fb50 	bl	801f5ac <ip4_route>
 801bf0c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d102      	bne.n	801bf1a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801bf14:	f06f 0303 	mvn.w	r3, #3
 801bf18:	e009      	b.n	801bf2e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bf1a:	887a      	ldrh	r2, [r7, #2]
 801bf1c:	697b      	ldr	r3, [r7, #20]
 801bf1e:	9300      	str	r3, [sp, #0]
 801bf20:	4613      	mov	r3, r2
 801bf22:	687a      	ldr	r2, [r7, #4]
 801bf24:	68b9      	ldr	r1, [r7, #8]
 801bf26:	68f8      	ldr	r0, [r7, #12]
 801bf28:	f000 f810 	bl	801bf4c <udp_sendto_if>
 801bf2c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bf2e:	4618      	mov	r0, r3
 801bf30:	3718      	adds	r7, #24
 801bf32:	46bd      	mov	sp, r7
 801bf34:	bd80      	pop	{r7, pc}
 801bf36:	bf00      	nop
 801bf38:	08028a24 	.word	0x08028a24
 801bf3c:	08028b48 	.word	0x08028b48
 801bf40:	08028a78 	.word	0x08028a78
 801bf44:	08028b60 	.word	0x08028b60
 801bf48:	08028b7c 	.word	0x08028b7c

0801bf4c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b088      	sub	sp, #32
 801bf50:	af02      	add	r7, sp, #8
 801bf52:	60f8      	str	r0, [r7, #12]
 801bf54:	60b9      	str	r1, [r7, #8]
 801bf56:	607a      	str	r2, [r7, #4]
 801bf58:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d109      	bne.n	801bf74 <udp_sendto_if+0x28>
 801bf60:	4b2e      	ldr	r3, [pc, #184]	; (801c01c <udp_sendto_if+0xd0>)
 801bf62:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bf66:	492e      	ldr	r1, [pc, #184]	; (801c020 <udp_sendto_if+0xd4>)
 801bf68:	482e      	ldr	r0, [pc, #184]	; (801c024 <udp_sendto_if+0xd8>)
 801bf6a:	f005 fe9f 	bl	8021cac <iprintf>
 801bf6e:	f06f 030f 	mvn.w	r3, #15
 801bf72:	e04f      	b.n	801c014 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bf74:	68bb      	ldr	r3, [r7, #8]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d109      	bne.n	801bf8e <udp_sendto_if+0x42>
 801bf7a:	4b28      	ldr	r3, [pc, #160]	; (801c01c <udp_sendto_if+0xd0>)
 801bf7c:	f240 2281 	movw	r2, #641	; 0x281
 801bf80:	4929      	ldr	r1, [pc, #164]	; (801c028 <udp_sendto_if+0xdc>)
 801bf82:	4828      	ldr	r0, [pc, #160]	; (801c024 <udp_sendto_if+0xd8>)
 801bf84:	f005 fe92 	bl	8021cac <iprintf>
 801bf88:	f06f 030f 	mvn.w	r3, #15
 801bf8c:	e042      	b.n	801c014 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d109      	bne.n	801bfa8 <udp_sendto_if+0x5c>
 801bf94:	4b21      	ldr	r3, [pc, #132]	; (801c01c <udp_sendto_if+0xd0>)
 801bf96:	f240 2282 	movw	r2, #642	; 0x282
 801bf9a:	4924      	ldr	r1, [pc, #144]	; (801c02c <udp_sendto_if+0xe0>)
 801bf9c:	4821      	ldr	r0, [pc, #132]	; (801c024 <udp_sendto_if+0xd8>)
 801bf9e:	f005 fe85 	bl	8021cac <iprintf>
 801bfa2:	f06f 030f 	mvn.w	r3, #15
 801bfa6:	e035      	b.n	801c014 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bfa8:	6a3b      	ldr	r3, [r7, #32]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d109      	bne.n	801bfc2 <udp_sendto_if+0x76>
 801bfae:	4b1b      	ldr	r3, [pc, #108]	; (801c01c <udp_sendto_if+0xd0>)
 801bfb0:	f240 2283 	movw	r2, #643	; 0x283
 801bfb4:	491e      	ldr	r1, [pc, #120]	; (801c030 <udp_sendto_if+0xe4>)
 801bfb6:	481b      	ldr	r0, [pc, #108]	; (801c024 <udp_sendto_if+0xd8>)
 801bfb8:	f005 fe78 	bl	8021cac <iprintf>
 801bfbc:	f06f 030f 	mvn.w	r3, #15
 801bfc0:	e028      	b.n	801c014 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d009      	beq.n	801bfdc <udp_sendto_if+0x90>
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d005      	beq.n	801bfdc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bfd8:	2be0      	cmp	r3, #224	; 0xe0
 801bfda:	d103      	bne.n	801bfe4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bfdc:	6a3b      	ldr	r3, [r7, #32]
 801bfde:	3304      	adds	r3, #4
 801bfe0:	617b      	str	r3, [r7, #20]
 801bfe2:	e00b      	b.n	801bffc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	681a      	ldr	r2, [r3, #0]
 801bfe8:	6a3b      	ldr	r3, [r7, #32]
 801bfea:	3304      	adds	r3, #4
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	429a      	cmp	r2, r3
 801bff0:	d002      	beq.n	801bff8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bff2:	f06f 0303 	mvn.w	r3, #3
 801bff6:	e00d      	b.n	801c014 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bffc:	887a      	ldrh	r2, [r7, #2]
 801bffe:	697b      	ldr	r3, [r7, #20]
 801c000:	9301      	str	r3, [sp, #4]
 801c002:	6a3b      	ldr	r3, [r7, #32]
 801c004:	9300      	str	r3, [sp, #0]
 801c006:	4613      	mov	r3, r2
 801c008:	687a      	ldr	r2, [r7, #4]
 801c00a:	68b9      	ldr	r1, [r7, #8]
 801c00c:	68f8      	ldr	r0, [r7, #12]
 801c00e:	f000 f811 	bl	801c034 <udp_sendto_if_src>
 801c012:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c014:	4618      	mov	r0, r3
 801c016:	3718      	adds	r7, #24
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}
 801c01c:	08028a24 	.word	0x08028a24
 801c020:	08028b98 	.word	0x08028b98
 801c024:	08028a78 	.word	0x08028a78
 801c028:	08028bb4 	.word	0x08028bb4
 801c02c:	08028bd0 	.word	0x08028bd0
 801c030:	08028bf0 	.word	0x08028bf0

0801c034 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b08c      	sub	sp, #48	; 0x30
 801c038:	af04      	add	r7, sp, #16
 801c03a:	60f8      	str	r0, [r7, #12]
 801c03c:	60b9      	str	r1, [r7, #8]
 801c03e:	607a      	str	r2, [r7, #4]
 801c040:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d109      	bne.n	801c05c <udp_sendto_if_src+0x28>
 801c048:	4b65      	ldr	r3, [pc, #404]	; (801c1e0 <udp_sendto_if_src+0x1ac>)
 801c04a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c04e:	4965      	ldr	r1, [pc, #404]	; (801c1e4 <udp_sendto_if_src+0x1b0>)
 801c050:	4865      	ldr	r0, [pc, #404]	; (801c1e8 <udp_sendto_if_src+0x1b4>)
 801c052:	f005 fe2b 	bl	8021cac <iprintf>
 801c056:	f06f 030f 	mvn.w	r3, #15
 801c05a:	e0bc      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c05c:	68bb      	ldr	r3, [r7, #8]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d109      	bne.n	801c076 <udp_sendto_if_src+0x42>
 801c062:	4b5f      	ldr	r3, [pc, #380]	; (801c1e0 <udp_sendto_if_src+0x1ac>)
 801c064:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c068:	4960      	ldr	r1, [pc, #384]	; (801c1ec <udp_sendto_if_src+0x1b8>)
 801c06a:	485f      	ldr	r0, [pc, #380]	; (801c1e8 <udp_sendto_if_src+0x1b4>)
 801c06c:	f005 fe1e 	bl	8021cac <iprintf>
 801c070:	f06f 030f 	mvn.w	r3, #15
 801c074:	e0af      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d109      	bne.n	801c090 <udp_sendto_if_src+0x5c>
 801c07c:	4b58      	ldr	r3, [pc, #352]	; (801c1e0 <udp_sendto_if_src+0x1ac>)
 801c07e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c082:	495b      	ldr	r1, [pc, #364]	; (801c1f0 <udp_sendto_if_src+0x1bc>)
 801c084:	4858      	ldr	r0, [pc, #352]	; (801c1e8 <udp_sendto_if_src+0x1b4>)
 801c086:	f005 fe11 	bl	8021cac <iprintf>
 801c08a:	f06f 030f 	mvn.w	r3, #15
 801c08e:	e0a2      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c092:	2b00      	cmp	r3, #0
 801c094:	d109      	bne.n	801c0aa <udp_sendto_if_src+0x76>
 801c096:	4b52      	ldr	r3, [pc, #328]	; (801c1e0 <udp_sendto_if_src+0x1ac>)
 801c098:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c09c:	4955      	ldr	r1, [pc, #340]	; (801c1f4 <udp_sendto_if_src+0x1c0>)
 801c09e:	4852      	ldr	r0, [pc, #328]	; (801c1e8 <udp_sendto_if_src+0x1b4>)
 801c0a0:	f005 fe04 	bl	8021cac <iprintf>
 801c0a4:	f06f 030f 	mvn.w	r3, #15
 801c0a8:	e095      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d109      	bne.n	801c0c4 <udp_sendto_if_src+0x90>
 801c0b0:	4b4b      	ldr	r3, [pc, #300]	; (801c1e0 <udp_sendto_if_src+0x1ac>)
 801c0b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c0b6:	4950      	ldr	r1, [pc, #320]	; (801c1f8 <udp_sendto_if_src+0x1c4>)
 801c0b8:	484b      	ldr	r0, [pc, #300]	; (801c1e8 <udp_sendto_if_src+0x1b4>)
 801c0ba:	f005 fdf7 	bl	8021cac <iprintf>
 801c0be:	f06f 030f 	mvn.w	r3, #15
 801c0c2:	e088      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	8a5b      	ldrh	r3, [r3, #18]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d10f      	bne.n	801c0ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c0cc:	68f9      	ldr	r1, [r7, #12]
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	8a5b      	ldrh	r3, [r3, #18]
 801c0d2:	461a      	mov	r2, r3
 801c0d4:	68f8      	ldr	r0, [r7, #12]
 801c0d6:	f000 f893 	bl	801c200 <udp_bind>
 801c0da:	4603      	mov	r3, r0
 801c0dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c0de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d002      	beq.n	801c0ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c0e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c0ea:	e074      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	891b      	ldrh	r3, [r3, #8]
 801c0f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c0f4:	4293      	cmp	r3, r2
 801c0f6:	d902      	bls.n	801c0fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c0fc:	e06b      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c0fe:	2108      	movs	r1, #8
 801c100:	68b8      	ldr	r0, [r7, #8]
 801c102:	f7f8 fc63 	bl	80149cc <pbuf_add_header>
 801c106:	4603      	mov	r3, r0
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d015      	beq.n	801c138 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c10c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c110:	2108      	movs	r1, #8
 801c112:	2022      	movs	r0, #34	; 0x22
 801c114:	f7f8 fa0c 	bl	8014530 <pbuf_alloc>
 801c118:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c11a:	69fb      	ldr	r3, [r7, #28]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d102      	bne.n	801c126 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c124:	e057      	b.n	801c1d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c126:	68bb      	ldr	r3, [r7, #8]
 801c128:	891b      	ldrh	r3, [r3, #8]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d006      	beq.n	801c13c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c12e:	68b9      	ldr	r1, [r7, #8]
 801c130:	69f8      	ldr	r0, [r7, #28]
 801c132:	f7f8 fe37 	bl	8014da4 <pbuf_chain>
 801c136:	e001      	b.n	801c13c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c138:	68bb      	ldr	r3, [r7, #8]
 801c13a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c13c:	69fb      	ldr	r3, [r7, #28]
 801c13e:	895b      	ldrh	r3, [r3, #10]
 801c140:	2b07      	cmp	r3, #7
 801c142:	d806      	bhi.n	801c152 <udp_sendto_if_src+0x11e>
 801c144:	4b26      	ldr	r3, [pc, #152]	; (801c1e0 <udp_sendto_if_src+0x1ac>)
 801c146:	f240 320d 	movw	r2, #781	; 0x30d
 801c14a:	492c      	ldr	r1, [pc, #176]	; (801c1fc <udp_sendto_if_src+0x1c8>)
 801c14c:	4826      	ldr	r0, [pc, #152]	; (801c1e8 <udp_sendto_if_src+0x1b4>)
 801c14e:	f005 fdad 	bl	8021cac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c152:	69fb      	ldr	r3, [r7, #28]
 801c154:	685b      	ldr	r3, [r3, #4]
 801c156:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	8a5b      	ldrh	r3, [r3, #18]
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7f6 f93d 	bl	80123dc <lwip_htons>
 801c162:	4603      	mov	r3, r0
 801c164:	461a      	mov	r2, r3
 801c166:	697b      	ldr	r3, [r7, #20]
 801c168:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c16a:	887b      	ldrh	r3, [r7, #2]
 801c16c:	4618      	mov	r0, r3
 801c16e:	f7f6 f935 	bl	80123dc <lwip_htons>
 801c172:	4603      	mov	r3, r0
 801c174:	461a      	mov	r2, r3
 801c176:	697b      	ldr	r3, [r7, #20]
 801c178:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c17a:	697b      	ldr	r3, [r7, #20]
 801c17c:	2200      	movs	r2, #0
 801c17e:	719a      	strb	r2, [r3, #6]
 801c180:	2200      	movs	r2, #0
 801c182:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c184:	69fb      	ldr	r3, [r7, #28]
 801c186:	891b      	ldrh	r3, [r3, #8]
 801c188:	4618      	mov	r0, r3
 801c18a:	f7f6 f927 	bl	80123dc <lwip_htons>
 801c18e:	4603      	mov	r3, r0
 801c190:	461a      	mov	r2, r3
 801c192:	697b      	ldr	r3, [r7, #20]
 801c194:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c196:	2311      	movs	r3, #17
 801c198:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	7adb      	ldrb	r3, [r3, #11]
 801c19e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	7a9b      	ldrb	r3, [r3, #10]
 801c1a4:	7cb9      	ldrb	r1, [r7, #18]
 801c1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c1a8:	9202      	str	r2, [sp, #8]
 801c1aa:	7cfa      	ldrb	r2, [r7, #19]
 801c1ac:	9201      	str	r2, [sp, #4]
 801c1ae:	9300      	str	r3, [sp, #0]
 801c1b0:	460b      	mov	r3, r1
 801c1b2:	687a      	ldr	r2, [r7, #4]
 801c1b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c1b6:	69f8      	ldr	r0, [r7, #28]
 801c1b8:	f003 fbfe 	bl	801f9b8 <ip4_output_if_src>
 801c1bc:	4603      	mov	r3, r0
 801c1be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c1c0:	69fa      	ldr	r2, [r7, #28]
 801c1c2:	68bb      	ldr	r3, [r7, #8]
 801c1c4:	429a      	cmp	r2, r3
 801c1c6:	d004      	beq.n	801c1d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c1c8:	69f8      	ldr	r0, [r7, #28]
 801c1ca:	f7f8 fcc7 	bl	8014b5c <pbuf_free>
    q = NULL;
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c1d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3720      	adds	r7, #32
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	08028a24 	.word	0x08028a24
 801c1e4:	08028c10 	.word	0x08028c10
 801c1e8:	08028a78 	.word	0x08028a78
 801c1ec:	08028c30 	.word	0x08028c30
 801c1f0:	08028c50 	.word	0x08028c50
 801c1f4:	08028c74 	.word	0x08028c74
 801c1f8:	08028c98 	.word	0x08028c98
 801c1fc:	08028cbc 	.word	0x08028cbc

0801c200 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c200:	b580      	push	{r7, lr}
 801c202:	b086      	sub	sp, #24
 801c204:	af00      	add	r7, sp, #0
 801c206:	60f8      	str	r0, [r7, #12]
 801c208:	60b9      	str	r1, [r7, #8]
 801c20a:	4613      	mov	r3, r2
 801c20c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d101      	bne.n	801c218 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c214:	4b39      	ldr	r3, [pc, #228]	; (801c2fc <udp_bind+0xfc>)
 801c216:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d109      	bne.n	801c232 <udp_bind+0x32>
 801c21e:	4b38      	ldr	r3, [pc, #224]	; (801c300 <udp_bind+0x100>)
 801c220:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c224:	4937      	ldr	r1, [pc, #220]	; (801c304 <udp_bind+0x104>)
 801c226:	4838      	ldr	r0, [pc, #224]	; (801c308 <udp_bind+0x108>)
 801c228:	f005 fd40 	bl	8021cac <iprintf>
 801c22c:	f06f 030f 	mvn.w	r3, #15
 801c230:	e060      	b.n	801c2f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c232:	2300      	movs	r3, #0
 801c234:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c236:	4b35      	ldr	r3, [pc, #212]	; (801c30c <udp_bind+0x10c>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	617b      	str	r3, [r7, #20]
 801c23c:	e009      	b.n	801c252 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c23e:	68fa      	ldr	r2, [r7, #12]
 801c240:	697b      	ldr	r3, [r7, #20]
 801c242:	429a      	cmp	r2, r3
 801c244:	d102      	bne.n	801c24c <udp_bind+0x4c>
      rebind = 1;
 801c246:	2301      	movs	r3, #1
 801c248:	74fb      	strb	r3, [r7, #19]
      break;
 801c24a:	e005      	b.n	801c258 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c24c:	697b      	ldr	r3, [r7, #20]
 801c24e:	68db      	ldr	r3, [r3, #12]
 801c250:	617b      	str	r3, [r7, #20]
 801c252:	697b      	ldr	r3, [r7, #20]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d1f2      	bne.n	801c23e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c258:	88fb      	ldrh	r3, [r7, #6]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d109      	bne.n	801c272 <udp_bind+0x72>
    port = udp_new_port();
 801c25e:	f7ff fc35 	bl	801bacc <udp_new_port>
 801c262:	4603      	mov	r3, r0
 801c264:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c266:	88fb      	ldrh	r3, [r7, #6]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d12c      	bne.n	801c2c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c26c:	f06f 0307 	mvn.w	r3, #7
 801c270:	e040      	b.n	801c2f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c272:	4b26      	ldr	r3, [pc, #152]	; (801c30c <udp_bind+0x10c>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	617b      	str	r3, [r7, #20]
 801c278:	e022      	b.n	801c2c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c27a:	68fa      	ldr	r2, [r7, #12]
 801c27c:	697b      	ldr	r3, [r7, #20]
 801c27e:	429a      	cmp	r2, r3
 801c280:	d01b      	beq.n	801c2ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c282:	697b      	ldr	r3, [r7, #20]
 801c284:	8a5b      	ldrh	r3, [r3, #18]
 801c286:	88fa      	ldrh	r2, [r7, #6]
 801c288:	429a      	cmp	r2, r3
 801c28a:	d116      	bne.n	801c2ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c28c:	697b      	ldr	r3, [r7, #20]
 801c28e:	681a      	ldr	r2, [r3, #0]
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c294:	429a      	cmp	r2, r3
 801c296:	d00d      	beq.n	801c2b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d00a      	beq.n	801c2b4 <udp_bind+0xb4>
 801c29e:	68bb      	ldr	r3, [r7, #8]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d006      	beq.n	801c2b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c2a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d003      	beq.n	801c2b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d102      	bne.n	801c2ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c2b4:	f06f 0307 	mvn.w	r3, #7
 801c2b8:	e01c      	b.n	801c2f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2ba:	697b      	ldr	r3, [r7, #20]
 801c2bc:	68db      	ldr	r3, [r3, #12]
 801c2be:	617b      	str	r3, [r7, #20]
 801c2c0:	697b      	ldr	r3, [r7, #20]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d1d9      	bne.n	801c27a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c2c6:	68bb      	ldr	r3, [r7, #8]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d002      	beq.n	801c2d2 <udp_bind+0xd2>
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	e000      	b.n	801c2d4 <udp_bind+0xd4>
 801c2d2:	2300      	movs	r3, #0
 801c2d4:	68fa      	ldr	r2, [r7, #12]
 801c2d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	88fa      	ldrh	r2, [r7, #6]
 801c2dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c2de:	7cfb      	ldrb	r3, [r7, #19]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d106      	bne.n	801c2f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c2e4:	4b09      	ldr	r3, [pc, #36]	; (801c30c <udp_bind+0x10c>)
 801c2e6:	681a      	ldr	r2, [r3, #0]
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c2ec:	4a07      	ldr	r2, [pc, #28]	; (801c30c <udp_bind+0x10c>)
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c2f2:	2300      	movs	r3, #0
}
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	3718      	adds	r7, #24
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	bd80      	pop	{r7, pc}
 801c2fc:	08029ae8 	.word	0x08029ae8
 801c300:	08028a24 	.word	0x08028a24
 801c304:	08028cec 	.word	0x08028cec
 801c308:	08028a78 	.word	0x08028a78
 801c30c:	2001b1b4 	.word	0x2001b1b4

0801c310 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b086      	sub	sp, #24
 801c314:	af00      	add	r7, sp, #0
 801c316:	60f8      	str	r0, [r7, #12]
 801c318:	60b9      	str	r1, [r7, #8]
 801c31a:	4613      	mov	r3, r2
 801c31c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d109      	bne.n	801c338 <udp_connect+0x28>
 801c324:	4b2c      	ldr	r3, [pc, #176]	; (801c3d8 <udp_connect+0xc8>)
 801c326:	f240 4235 	movw	r2, #1077	; 0x435
 801c32a:	492c      	ldr	r1, [pc, #176]	; (801c3dc <udp_connect+0xcc>)
 801c32c:	482c      	ldr	r0, [pc, #176]	; (801c3e0 <udp_connect+0xd0>)
 801c32e:	f005 fcbd 	bl	8021cac <iprintf>
 801c332:	f06f 030f 	mvn.w	r3, #15
 801c336:	e04b      	b.n	801c3d0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c338:	68bb      	ldr	r3, [r7, #8]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d109      	bne.n	801c352 <udp_connect+0x42>
 801c33e:	4b26      	ldr	r3, [pc, #152]	; (801c3d8 <udp_connect+0xc8>)
 801c340:	f240 4236 	movw	r2, #1078	; 0x436
 801c344:	4927      	ldr	r1, [pc, #156]	; (801c3e4 <udp_connect+0xd4>)
 801c346:	4826      	ldr	r0, [pc, #152]	; (801c3e0 <udp_connect+0xd0>)
 801c348:	f005 fcb0 	bl	8021cac <iprintf>
 801c34c:	f06f 030f 	mvn.w	r3, #15
 801c350:	e03e      	b.n	801c3d0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	8a5b      	ldrh	r3, [r3, #18]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d10f      	bne.n	801c37a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c35a:	68f9      	ldr	r1, [r7, #12]
 801c35c:	68fb      	ldr	r3, [r7, #12]
 801c35e:	8a5b      	ldrh	r3, [r3, #18]
 801c360:	461a      	mov	r2, r3
 801c362:	68f8      	ldr	r0, [r7, #12]
 801c364:	f7ff ff4c 	bl	801c200 <udp_bind>
 801c368:	4603      	mov	r3, r0
 801c36a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801c36c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d002      	beq.n	801c37a <udp_connect+0x6a>
      return err;
 801c374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c378:	e02a      	b.n	801c3d0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c37a:	68bb      	ldr	r3, [r7, #8]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d002      	beq.n	801c386 <udp_connect+0x76>
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	e000      	b.n	801c388 <udp_connect+0x78>
 801c386:	2300      	movs	r3, #0
 801c388:	68fa      	ldr	r2, [r7, #12]
 801c38a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	88fa      	ldrh	r2, [r7, #6]
 801c390:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	7c1b      	ldrb	r3, [r3, #16]
 801c396:	f043 0304 	orr.w	r3, r3, #4
 801c39a:	b2da      	uxtb	r2, r3
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c3a0:	4b11      	ldr	r3, [pc, #68]	; (801c3e8 <udp_connect+0xd8>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	613b      	str	r3, [r7, #16]
 801c3a6:	e008      	b.n	801c3ba <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c3a8:	68fa      	ldr	r2, [r7, #12]
 801c3aa:	693b      	ldr	r3, [r7, #16]
 801c3ac:	429a      	cmp	r2, r3
 801c3ae:	d101      	bne.n	801c3b4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c3b0:	2300      	movs	r3, #0
 801c3b2:	e00d      	b.n	801c3d0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c3b4:	693b      	ldr	r3, [r7, #16]
 801c3b6:	68db      	ldr	r3, [r3, #12]
 801c3b8:	613b      	str	r3, [r7, #16]
 801c3ba:	693b      	ldr	r3, [r7, #16]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d1f3      	bne.n	801c3a8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c3c0:	4b09      	ldr	r3, [pc, #36]	; (801c3e8 <udp_connect+0xd8>)
 801c3c2:	681a      	ldr	r2, [r3, #0]
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c3c8:	4a07      	ldr	r2, [pc, #28]	; (801c3e8 <udp_connect+0xd8>)
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c3ce:	2300      	movs	r3, #0
}
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	3718      	adds	r7, #24
 801c3d4:	46bd      	mov	sp, r7
 801c3d6:	bd80      	pop	{r7, pc}
 801c3d8:	08028a24 	.word	0x08028a24
 801c3dc:	08028d04 	.word	0x08028d04
 801c3e0:	08028a78 	.word	0x08028a78
 801c3e4:	08028d20 	.word	0x08028d20
 801c3e8:	2001b1b4 	.word	0x2001b1b4

0801c3ec <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b082      	sub	sp, #8
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d107      	bne.n	801c40a <udp_disconnect+0x1e>
 801c3fa:	4b0d      	ldr	r3, [pc, #52]	; (801c430 <udp_disconnect+0x44>)
 801c3fc:	f240 426a 	movw	r2, #1130	; 0x46a
 801c400:	490c      	ldr	r1, [pc, #48]	; (801c434 <udp_disconnect+0x48>)
 801c402:	480d      	ldr	r0, [pc, #52]	; (801c438 <udp_disconnect+0x4c>)
 801c404:	f005 fc52 	bl	8021cac <iprintf>
 801c408:	e00f      	b.n	801c42a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	2200      	movs	r2, #0
 801c40e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	2200      	movs	r2, #0
 801c414:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	2200      	movs	r2, #0
 801c41a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	7c1b      	ldrb	r3, [r3, #16]
 801c420:	f023 0304 	bic.w	r3, r3, #4
 801c424:	b2da      	uxtb	r2, r3
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	741a      	strb	r2, [r3, #16]
}
 801c42a:	3708      	adds	r7, #8
 801c42c:	46bd      	mov	sp, r7
 801c42e:	bd80      	pop	{r7, pc}
 801c430:	08028a24 	.word	0x08028a24
 801c434:	08028d3c 	.word	0x08028d3c
 801c438:	08028a78 	.word	0x08028a78

0801c43c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b084      	sub	sp, #16
 801c440:	af00      	add	r7, sp, #0
 801c442:	60f8      	str	r0, [r7, #12]
 801c444:	60b9      	str	r1, [r7, #8]
 801c446:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d107      	bne.n	801c45e <udp_recv+0x22>
 801c44e:	4b08      	ldr	r3, [pc, #32]	; (801c470 <udp_recv+0x34>)
 801c450:	f240 428a 	movw	r2, #1162	; 0x48a
 801c454:	4907      	ldr	r1, [pc, #28]	; (801c474 <udp_recv+0x38>)
 801c456:	4808      	ldr	r0, [pc, #32]	; (801c478 <udp_recv+0x3c>)
 801c458:	f005 fc28 	bl	8021cac <iprintf>
 801c45c:	e005      	b.n	801c46a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	68ba      	ldr	r2, [r7, #8]
 801c462:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	687a      	ldr	r2, [r7, #4]
 801c468:	61da      	str	r2, [r3, #28]
}
 801c46a:	3710      	adds	r7, #16
 801c46c:	46bd      	mov	sp, r7
 801c46e:	bd80      	pop	{r7, pc}
 801c470:	08028a24 	.word	0x08028a24
 801c474:	08028d58 	.word	0x08028d58
 801c478:	08028a78 	.word	0x08028a78

0801c47c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c47c:	b580      	push	{r7, lr}
 801c47e:	b084      	sub	sp, #16
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d107      	bne.n	801c49a <udp_remove+0x1e>
 801c48a:	4b19      	ldr	r3, [pc, #100]	; (801c4f0 <udp_remove+0x74>)
 801c48c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c490:	4918      	ldr	r1, [pc, #96]	; (801c4f4 <udp_remove+0x78>)
 801c492:	4819      	ldr	r0, [pc, #100]	; (801c4f8 <udp_remove+0x7c>)
 801c494:	f005 fc0a 	bl	8021cac <iprintf>
 801c498:	e026      	b.n	801c4e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c49a:	4b18      	ldr	r3, [pc, #96]	; (801c4fc <udp_remove+0x80>)
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	429a      	cmp	r2, r3
 801c4a2:	d105      	bne.n	801c4b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c4a4:	4b15      	ldr	r3, [pc, #84]	; (801c4fc <udp_remove+0x80>)
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	68db      	ldr	r3, [r3, #12]
 801c4aa:	4a14      	ldr	r2, [pc, #80]	; (801c4fc <udp_remove+0x80>)
 801c4ac:	6013      	str	r3, [r2, #0]
 801c4ae:	e017      	b.n	801c4e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c4b0:	4b12      	ldr	r3, [pc, #72]	; (801c4fc <udp_remove+0x80>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	60fb      	str	r3, [r7, #12]
 801c4b6:	e010      	b.n	801c4da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	68db      	ldr	r3, [r3, #12]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d009      	beq.n	801c4d4 <udp_remove+0x58>
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	68db      	ldr	r3, [r3, #12]
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	429a      	cmp	r2, r3
 801c4c8:	d104      	bne.n	801c4d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	68da      	ldr	r2, [r3, #12]
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	60da      	str	r2, [r3, #12]
        break;
 801c4d2:	e005      	b.n	801c4e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	68db      	ldr	r3, [r3, #12]
 801c4d8:	60fb      	str	r3, [r7, #12]
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d1eb      	bne.n	801c4b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c4e0:	6879      	ldr	r1, [r7, #4]
 801c4e2:	2000      	movs	r0, #0
 801c4e4:	f7f7 fc58 	bl	8013d98 <memp_free>
}
 801c4e8:	3710      	adds	r7, #16
 801c4ea:	46bd      	mov	sp, r7
 801c4ec:	bd80      	pop	{r7, pc}
 801c4ee:	bf00      	nop
 801c4f0:	08028a24 	.word	0x08028a24
 801c4f4:	08028d70 	.word	0x08028d70
 801c4f8:	08028a78 	.word	0x08028a78
 801c4fc:	2001b1b4 	.word	0x2001b1b4

0801c500 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b082      	sub	sp, #8
 801c504:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c506:	2000      	movs	r0, #0
 801c508:	f7f7 fbf4 	bl	8013cf4 <memp_malloc>
 801c50c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d007      	beq.n	801c524 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c514:	2220      	movs	r2, #32
 801c516:	2100      	movs	r1, #0
 801c518:	6878      	ldr	r0, [r7, #4]
 801c51a:	f004 feab 	bl	8021274 <memset>
    pcb->ttl = UDP_TTL;
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	22ff      	movs	r2, #255	; 0xff
 801c522:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c524:	687b      	ldr	r3, [r7, #4]
}
 801c526:	4618      	mov	r0, r3
 801c528:	3708      	adds	r7, #8
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}

0801c52e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c52e:	b580      	push	{r7, lr}
 801c530:	b084      	sub	sp, #16
 801c532:	af00      	add	r7, sp, #0
 801c534:	4603      	mov	r3, r0
 801c536:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c538:	f7ff ffe2 	bl	801c500 <udp_new>
 801c53c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c53e:	68fb      	ldr	r3, [r7, #12]
}
 801c540:	4618      	mov	r0, r3
 801c542:	3710      	adds	r7, #16
 801c544:	46bd      	mov	sp, r7
 801c546:	bd80      	pop	{r7, pc}

0801c548 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c548:	b480      	push	{r7}
 801c54a:	b085      	sub	sp, #20
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
 801c550:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d01e      	beq.n	801c596 <udp_netif_ip_addr_changed+0x4e>
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d01a      	beq.n	801c596 <udp_netif_ip_addr_changed+0x4e>
 801c560:	683b      	ldr	r3, [r7, #0]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d017      	beq.n	801c596 <udp_netif_ip_addr_changed+0x4e>
 801c566:	683b      	ldr	r3, [r7, #0]
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d013      	beq.n	801c596 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c56e:	4b0d      	ldr	r3, [pc, #52]	; (801c5a4 <udp_netif_ip_addr_changed+0x5c>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	60fb      	str	r3, [r7, #12]
 801c574:	e00c      	b.n	801c590 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	681a      	ldr	r2, [r3, #0]
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	429a      	cmp	r2, r3
 801c580:	d103      	bne.n	801c58a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	681a      	ldr	r2, [r3, #0]
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	68db      	ldr	r3, [r3, #12]
 801c58e:	60fb      	str	r3, [r7, #12]
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d1ef      	bne.n	801c576 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c596:	bf00      	nop
 801c598:	3714      	adds	r7, #20
 801c59a:	46bd      	mov	sp, r7
 801c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a0:	4770      	bx	lr
 801c5a2:	bf00      	nop
 801c5a4:	2001b1b4 	.word	0x2001b1b4

0801c5a8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c5ac:	4b20      	ldr	r3, [pc, #128]	; (801c630 <dhcp_inc_pcb_refcount+0x88>)
 801c5ae:	781b      	ldrb	r3, [r3, #0]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d133      	bne.n	801c61c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c5b4:	4b1f      	ldr	r3, [pc, #124]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d005      	beq.n	801c5c8 <dhcp_inc_pcb_refcount+0x20>
 801c5bc:	4b1e      	ldr	r3, [pc, #120]	; (801c638 <dhcp_inc_pcb_refcount+0x90>)
 801c5be:	22e5      	movs	r2, #229	; 0xe5
 801c5c0:	491e      	ldr	r1, [pc, #120]	; (801c63c <dhcp_inc_pcb_refcount+0x94>)
 801c5c2:	481f      	ldr	r0, [pc, #124]	; (801c640 <dhcp_inc_pcb_refcount+0x98>)
 801c5c4:	f005 fb72 	bl	8021cac <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c5c8:	f7ff ff9a 	bl	801c500 <udp_new>
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	4a19      	ldr	r2, [pc, #100]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c5d0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801c5d2:	4b18      	ldr	r3, [pc, #96]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d102      	bne.n	801c5e0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c5de:	e024      	b.n	801c62a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c5e0:	4b14      	ldr	r3, [pc, #80]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	7a5a      	ldrb	r2, [r3, #9]
 801c5e6:	4b13      	ldr	r3, [pc, #76]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	f042 0220 	orr.w	r2, r2, #32
 801c5ee:	b2d2      	uxtb	r2, r2
 801c5f0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c5f2:	4b10      	ldr	r3, [pc, #64]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	2244      	movs	r2, #68	; 0x44
 801c5f8:	4912      	ldr	r1, [pc, #72]	; (801c644 <dhcp_inc_pcb_refcount+0x9c>)
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7ff fe00 	bl	801c200 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c600:	4b0c      	ldr	r3, [pc, #48]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	2243      	movs	r2, #67	; 0x43
 801c606:	490f      	ldr	r1, [pc, #60]	; (801c644 <dhcp_inc_pcb_refcount+0x9c>)
 801c608:	4618      	mov	r0, r3
 801c60a:	f7ff fe81 	bl	801c310 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c60e:	4b09      	ldr	r3, [pc, #36]	; (801c634 <dhcp_inc_pcb_refcount+0x8c>)
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	2200      	movs	r2, #0
 801c614:	490c      	ldr	r1, [pc, #48]	; (801c648 <dhcp_inc_pcb_refcount+0xa0>)
 801c616:	4618      	mov	r0, r3
 801c618:	f7ff ff10 	bl	801c43c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c61c:	4b04      	ldr	r3, [pc, #16]	; (801c630 <dhcp_inc_pcb_refcount+0x88>)
 801c61e:	781b      	ldrb	r3, [r3, #0]
 801c620:	3301      	adds	r3, #1
 801c622:	b2da      	uxtb	r2, r3
 801c624:	4b02      	ldr	r3, [pc, #8]	; (801c630 <dhcp_inc_pcb_refcount+0x88>)
 801c626:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c628:	2300      	movs	r3, #0
}
 801c62a:	4618      	mov	r0, r3
 801c62c:	bd80      	pop	{r7, pc}
 801c62e:	bf00      	nop
 801c630:	200143c8 	.word	0x200143c8
 801c634:	200143c4 	.word	0x200143c4
 801c638:	08028d88 	.word	0x08028d88
 801c63c:	08028dc0 	.word	0x08028dc0
 801c640:	08028de8 	.word	0x08028de8
 801c644:	08029ae8 	.word	0x08029ae8
 801c648:	0801dfa1 	.word	0x0801dfa1

0801c64c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c650:	4b0e      	ldr	r3, [pc, #56]	; (801c68c <dhcp_dec_pcb_refcount+0x40>)
 801c652:	781b      	ldrb	r3, [r3, #0]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d105      	bne.n	801c664 <dhcp_dec_pcb_refcount+0x18>
 801c658:	4b0d      	ldr	r3, [pc, #52]	; (801c690 <dhcp_dec_pcb_refcount+0x44>)
 801c65a:	22ff      	movs	r2, #255	; 0xff
 801c65c:	490d      	ldr	r1, [pc, #52]	; (801c694 <dhcp_dec_pcb_refcount+0x48>)
 801c65e:	480e      	ldr	r0, [pc, #56]	; (801c698 <dhcp_dec_pcb_refcount+0x4c>)
 801c660:	f005 fb24 	bl	8021cac <iprintf>
  dhcp_pcb_refcount--;
 801c664:	4b09      	ldr	r3, [pc, #36]	; (801c68c <dhcp_dec_pcb_refcount+0x40>)
 801c666:	781b      	ldrb	r3, [r3, #0]
 801c668:	3b01      	subs	r3, #1
 801c66a:	b2da      	uxtb	r2, r3
 801c66c:	4b07      	ldr	r3, [pc, #28]	; (801c68c <dhcp_dec_pcb_refcount+0x40>)
 801c66e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c670:	4b06      	ldr	r3, [pc, #24]	; (801c68c <dhcp_dec_pcb_refcount+0x40>)
 801c672:	781b      	ldrb	r3, [r3, #0]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d107      	bne.n	801c688 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c678:	4b08      	ldr	r3, [pc, #32]	; (801c69c <dhcp_dec_pcb_refcount+0x50>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	4618      	mov	r0, r3
 801c67e:	f7ff fefd 	bl	801c47c <udp_remove>
    dhcp_pcb = NULL;
 801c682:	4b06      	ldr	r3, [pc, #24]	; (801c69c <dhcp_dec_pcb_refcount+0x50>)
 801c684:	2200      	movs	r2, #0
 801c686:	601a      	str	r2, [r3, #0]
  }
}
 801c688:	bf00      	nop
 801c68a:	bd80      	pop	{r7, pc}
 801c68c:	200143c8 	.word	0x200143c8
 801c690:	08028d88 	.word	0x08028d88
 801c694:	08028e10 	.word	0x08028e10
 801c698:	08028de8 	.word	0x08028de8
 801c69c:	200143c4 	.word	0x200143c4

0801c6a0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b084      	sub	sp, #16
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6ac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c6ae:	210c      	movs	r1, #12
 801c6b0:	68f8      	ldr	r0, [r7, #12]
 801c6b2:	f001 f875 	bl	801d7a0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c6b6:	4b06      	ldr	r3, [pc, #24]	; (801c6d0 <dhcp_handle_nak+0x30>)
 801c6b8:	4a05      	ldr	r2, [pc, #20]	; (801c6d0 <dhcp_handle_nak+0x30>)
 801c6ba:	4905      	ldr	r1, [pc, #20]	; (801c6d0 <dhcp_handle_nak+0x30>)
 801c6bc:	6878      	ldr	r0, [r7, #4]
 801c6be:	f7f7 fd0d 	bl	80140dc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c6c2:	6878      	ldr	r0, [r7, #4]
 801c6c4:	f000 fc68 	bl	801cf98 <dhcp_discover>
}
 801c6c8:	bf00      	nop
 801c6ca:	3710      	adds	r7, #16
 801c6cc:	46bd      	mov	sp, r7
 801c6ce:	bd80      	pop	{r7, pc}
 801c6d0:	08029ae8 	.word	0x08029ae8

0801c6d4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b084      	sub	sp, #16
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6e0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c6e2:	2108      	movs	r1, #8
 801c6e4:	68f8      	ldr	r0, [r7, #12]
 801c6e6:	f001 f85b 	bl	801d7a0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	331c      	adds	r3, #28
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	4619      	mov	r1, r3
 801c6f2:	6878      	ldr	r0, [r7, #4]
 801c6f4:	f002 fbc8 	bl	801ee88 <etharp_query>
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	799b      	ldrb	r3, [r3, #6]
 801c700:	2bff      	cmp	r3, #255	; 0xff
 801c702:	d005      	beq.n	801c710 <dhcp_check+0x3c>
    dhcp->tries++;
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	799b      	ldrb	r3, [r3, #6]
 801c708:	3301      	adds	r3, #1
 801c70a:	b2da      	uxtb	r2, r3
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801c710:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c714:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c716:	893b      	ldrh	r3, [r7, #8]
 801c718:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c71c:	4a06      	ldr	r2, [pc, #24]	; (801c738 <dhcp_check+0x64>)
 801c71e:	fb82 1203 	smull	r1, r2, r2, r3
 801c722:	1152      	asrs	r2, r2, #5
 801c724:	17db      	asrs	r3, r3, #31
 801c726:	1ad3      	subs	r3, r2, r3
 801c728:	b29a      	uxth	r2, r3
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c72e:	bf00      	nop
 801c730:	3710      	adds	r7, #16
 801c732:	46bd      	mov	sp, r7
 801c734:	bd80      	pop	{r7, pc}
 801c736:	bf00      	nop
 801c738:	10624dd3 	.word	0x10624dd3

0801c73c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b084      	sub	sp, #16
 801c740:	af00      	add	r7, sp, #0
 801c742:	6078      	str	r0, [r7, #4]
 801c744:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c74a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c74c:	4b0c      	ldr	r3, [pc, #48]	; (801c780 <dhcp_handle_offer+0x44>)
 801c74e:	789b      	ldrb	r3, [r3, #2]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d011      	beq.n	801c778 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	2200      	movs	r2, #0
 801c758:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c75a:	4b0a      	ldr	r3, [pc, #40]	; (801c784 <dhcp_handle_offer+0x48>)
 801c75c:	689b      	ldr	r3, [r3, #8]
 801c75e:	4618      	mov	r0, r3
 801c760:	f7f5 fe51 	bl	8012406 <lwip_htonl>
 801c764:	4602      	mov	r2, r0
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	691a      	ldr	r2, [r3, #16]
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c772:	6878      	ldr	r0, [r7, #4]
 801c774:	f000 f808 	bl	801c788 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801c778:	bf00      	nop
 801c77a:	3710      	adds	r7, #16
 801c77c:	46bd      	mov	sp, r7
 801c77e:	bd80      	pop	{r7, pc}
 801c780:	2001b1b8 	.word	0x2001b1b8
 801c784:	2001b1c4 	.word	0x2001b1c4

0801c788 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c788:	b5b0      	push	{r4, r5, r7, lr}
 801c78a:	b08a      	sub	sp, #40	; 0x28
 801c78c:	af02      	add	r7, sp, #8
 801c78e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d109      	bne.n	801c7aa <dhcp_select+0x22>
 801c796:	4b71      	ldr	r3, [pc, #452]	; (801c95c <dhcp_select+0x1d4>)
 801c798:	f240 1277 	movw	r2, #375	; 0x177
 801c79c:	4970      	ldr	r1, [pc, #448]	; (801c960 <dhcp_select+0x1d8>)
 801c79e:	4871      	ldr	r0, [pc, #452]	; (801c964 <dhcp_select+0x1dc>)
 801c7a0:	f005 fa84 	bl	8021cac <iprintf>
 801c7a4:	f06f 030f 	mvn.w	r3, #15
 801c7a8:	e0d3      	b.n	801c952 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7ae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c7b0:	69bb      	ldr	r3, [r7, #24]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d109      	bne.n	801c7ca <dhcp_select+0x42>
 801c7b6:	4b69      	ldr	r3, [pc, #420]	; (801c95c <dhcp_select+0x1d4>)
 801c7b8:	f240 1279 	movw	r2, #377	; 0x179
 801c7bc:	496a      	ldr	r1, [pc, #424]	; (801c968 <dhcp_select+0x1e0>)
 801c7be:	4869      	ldr	r0, [pc, #420]	; (801c964 <dhcp_select+0x1dc>)
 801c7c0:	f005 fa74 	bl	8021cac <iprintf>
 801c7c4:	f06f 0305 	mvn.w	r3, #5
 801c7c8:	e0c3      	b.n	801c952 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c7ca:	2101      	movs	r1, #1
 801c7cc:	69b8      	ldr	r0, [r7, #24]
 801c7ce:	f000 ffe7 	bl	801d7a0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c7d2:	f107 030c 	add.w	r3, r7, #12
 801c7d6:	2203      	movs	r2, #3
 801c7d8:	69b9      	ldr	r1, [r7, #24]
 801c7da:	6878      	ldr	r0, [r7, #4]
 801c7dc:	f001 fcaa 	bl	801e134 <dhcp_create_msg>
 801c7e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c7e2:	697b      	ldr	r3, [r7, #20]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	f000 8085 	beq.w	801c8f4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c7ea:	697b      	ldr	r3, [r7, #20]
 801c7ec:	685b      	ldr	r3, [r3, #4]
 801c7ee:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c7f0:	89b8      	ldrh	r0, [r7, #12]
 801c7f2:	693b      	ldr	r3, [r7, #16]
 801c7f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c7f8:	2302      	movs	r3, #2
 801c7fa:	2239      	movs	r2, #57	; 0x39
 801c7fc:	f000 ffea 	bl	801d7d4 <dhcp_option>
 801c800:	4603      	mov	r3, r0
 801c802:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c804:	89b8      	ldrh	r0, [r7, #12]
 801c806:	693b      	ldr	r3, [r7, #16]
 801c808:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c810:	461a      	mov	r2, r3
 801c812:	f001 f839 	bl	801d888 <dhcp_option_short>
 801c816:	4603      	mov	r3, r0
 801c818:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c81a:	89b8      	ldrh	r0, [r7, #12]
 801c81c:	693b      	ldr	r3, [r7, #16]
 801c81e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c822:	2304      	movs	r3, #4
 801c824:	2232      	movs	r2, #50	; 0x32
 801c826:	f000 ffd5 	bl	801d7d4 <dhcp_option>
 801c82a:	4603      	mov	r3, r0
 801c82c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c82e:	89bc      	ldrh	r4, [r7, #12]
 801c830:	693b      	ldr	r3, [r7, #16]
 801c832:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c836:	69bb      	ldr	r3, [r7, #24]
 801c838:	69db      	ldr	r3, [r3, #28]
 801c83a:	4618      	mov	r0, r3
 801c83c:	f7f5 fde3 	bl	8012406 <lwip_htonl>
 801c840:	4603      	mov	r3, r0
 801c842:	461a      	mov	r2, r3
 801c844:	4629      	mov	r1, r5
 801c846:	4620      	mov	r0, r4
 801c848:	f001 f850 	bl	801d8ec <dhcp_option_long>
 801c84c:	4603      	mov	r3, r0
 801c84e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c850:	89b8      	ldrh	r0, [r7, #12]
 801c852:	693b      	ldr	r3, [r7, #16]
 801c854:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c858:	2304      	movs	r3, #4
 801c85a:	2236      	movs	r2, #54	; 0x36
 801c85c:	f000 ffba 	bl	801d7d4 <dhcp_option>
 801c860:	4603      	mov	r3, r0
 801c862:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c864:	89bc      	ldrh	r4, [r7, #12]
 801c866:	693b      	ldr	r3, [r7, #16]
 801c868:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c86c:	69bb      	ldr	r3, [r7, #24]
 801c86e:	699b      	ldr	r3, [r3, #24]
 801c870:	4618      	mov	r0, r3
 801c872:	f7f5 fdc8 	bl	8012406 <lwip_htonl>
 801c876:	4603      	mov	r3, r0
 801c878:	461a      	mov	r2, r3
 801c87a:	4629      	mov	r1, r5
 801c87c:	4620      	mov	r0, r4
 801c87e:	f001 f835 	bl	801d8ec <dhcp_option_long>
 801c882:	4603      	mov	r3, r0
 801c884:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c886:	89b8      	ldrh	r0, [r7, #12]
 801c888:	693b      	ldr	r3, [r7, #16]
 801c88a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c88e:	2304      	movs	r3, #4
 801c890:	2237      	movs	r2, #55	; 0x37
 801c892:	f000 ff9f 	bl	801d7d4 <dhcp_option>
 801c896:	4603      	mov	r3, r0
 801c898:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c89a:	2300      	movs	r3, #0
 801c89c:	77fb      	strb	r3, [r7, #31]
 801c89e:	e00e      	b.n	801c8be <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c8a0:	89b8      	ldrh	r0, [r7, #12]
 801c8a2:	693b      	ldr	r3, [r7, #16]
 801c8a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c8a8:	7ffb      	ldrb	r3, [r7, #31]
 801c8aa:	4a30      	ldr	r2, [pc, #192]	; (801c96c <dhcp_select+0x1e4>)
 801c8ac:	5cd3      	ldrb	r3, [r2, r3]
 801c8ae:	461a      	mov	r2, r3
 801c8b0:	f000 ffc4 	bl	801d83c <dhcp_option_byte>
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c8b8:	7ffb      	ldrb	r3, [r7, #31]
 801c8ba:	3301      	adds	r3, #1
 801c8bc:	77fb      	strb	r3, [r7, #31]
 801c8be:	7ffb      	ldrb	r3, [r7, #31]
 801c8c0:	2b03      	cmp	r3, #3
 801c8c2:	d9ed      	bls.n	801c8a0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c8c4:	89b8      	ldrh	r0, [r7, #12]
 801c8c6:	693b      	ldr	r3, [r7, #16]
 801c8c8:	33f0      	adds	r3, #240	; 0xf0
 801c8ca:	697a      	ldr	r2, [r7, #20]
 801c8cc:	4619      	mov	r1, r3
 801c8ce:	f001 fd07 	bl	801e2e0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c8d2:	4b27      	ldr	r3, [pc, #156]	; (801c970 <dhcp_select+0x1e8>)
 801c8d4:	6818      	ldr	r0, [r3, #0]
 801c8d6:	4b27      	ldr	r3, [pc, #156]	; (801c974 <dhcp_select+0x1ec>)
 801c8d8:	9301      	str	r3, [sp, #4]
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	9300      	str	r3, [sp, #0]
 801c8de:	2343      	movs	r3, #67	; 0x43
 801c8e0:	4a25      	ldr	r2, [pc, #148]	; (801c978 <dhcp_select+0x1f0>)
 801c8e2:	6979      	ldr	r1, [r7, #20]
 801c8e4:	f7ff fba6 	bl	801c034 <udp_sendto_if_src>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 801c8ec:	6978      	ldr	r0, [r7, #20]
 801c8ee:	f7f8 f935 	bl	8014b5c <pbuf_free>
 801c8f2:	e001      	b.n	801c8f8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c8f4:	23ff      	movs	r3, #255	; 0xff
 801c8f6:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 801c8f8:	69bb      	ldr	r3, [r7, #24]
 801c8fa:	799b      	ldrb	r3, [r3, #6]
 801c8fc:	2bff      	cmp	r3, #255	; 0xff
 801c8fe:	d005      	beq.n	801c90c <dhcp_select+0x184>
    dhcp->tries++;
 801c900:	69bb      	ldr	r3, [r7, #24]
 801c902:	799b      	ldrb	r3, [r3, #6]
 801c904:	3301      	adds	r3, #1
 801c906:	b2da      	uxtb	r2, r3
 801c908:	69bb      	ldr	r3, [r7, #24]
 801c90a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c90c:	69bb      	ldr	r3, [r7, #24]
 801c90e:	799b      	ldrb	r3, [r3, #6]
 801c910:	2b05      	cmp	r3, #5
 801c912:	d80d      	bhi.n	801c930 <dhcp_select+0x1a8>
 801c914:	69bb      	ldr	r3, [r7, #24]
 801c916:	799b      	ldrb	r3, [r3, #6]
 801c918:	461a      	mov	r2, r3
 801c91a:	2301      	movs	r3, #1
 801c91c:	4093      	lsls	r3, r2
 801c91e:	b29b      	uxth	r3, r3
 801c920:	461a      	mov	r2, r3
 801c922:	0152      	lsls	r2, r2, #5
 801c924:	1ad2      	subs	r2, r2, r3
 801c926:	0092      	lsls	r2, r2, #2
 801c928:	4413      	add	r3, r2
 801c92a:	00db      	lsls	r3, r3, #3
 801c92c:	b29b      	uxth	r3, r3
 801c92e:	e001      	b.n	801c934 <dhcp_select+0x1ac>
 801c930:	f64e 2360 	movw	r3, #60000	; 0xea60
 801c934:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c936:	89fb      	ldrh	r3, [r7, #14]
 801c938:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c93c:	4a0f      	ldr	r2, [pc, #60]	; (801c97c <dhcp_select+0x1f4>)
 801c93e:	fb82 1203 	smull	r1, r2, r2, r3
 801c942:	1152      	asrs	r2, r2, #5
 801c944:	17db      	asrs	r3, r3, #31
 801c946:	1ad3      	subs	r3, r2, r3
 801c948:	b29a      	uxth	r2, r3
 801c94a:	69bb      	ldr	r3, [r7, #24]
 801c94c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c94e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801c952:	4618      	mov	r0, r3
 801c954:	3720      	adds	r7, #32
 801c956:	46bd      	mov	sp, r7
 801c958:	bdb0      	pop	{r4, r5, r7, pc}
 801c95a:	bf00      	nop
 801c95c:	08028d88 	.word	0x08028d88
 801c960:	08028e34 	.word	0x08028e34
 801c964:	08028de8 	.word	0x08028de8
 801c968:	08028e50 	.word	0x08028e50
 801c96c:	20000070 	.word	0x20000070
 801c970:	200143c4 	.word	0x200143c4
 801c974:	08029ae8 	.word	0x08029ae8
 801c978:	08029aec 	.word	0x08029aec
 801c97c:	10624dd3 	.word	0x10624dd3

0801c980 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b082      	sub	sp, #8
 801c984:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801c986:	4b27      	ldr	r3, [pc, #156]	; (801ca24 <dhcp_coarse_tmr+0xa4>)
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	607b      	str	r3, [r7, #4]
 801c98c:	e042      	b.n	801ca14 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c992:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c994:	683b      	ldr	r3, [r7, #0]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d039      	beq.n	801ca0e <dhcp_coarse_tmr+0x8e>
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	795b      	ldrb	r3, [r3, #5]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d035      	beq.n	801ca0e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c9a2:	683b      	ldr	r3, [r7, #0]
 801c9a4:	8a9b      	ldrh	r3, [r3, #20]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d012      	beq.n	801c9d0 <dhcp_coarse_tmr+0x50>
 801c9aa:	683b      	ldr	r3, [r7, #0]
 801c9ac:	8a5b      	ldrh	r3, [r3, #18]
 801c9ae:	3301      	adds	r3, #1
 801c9b0:	b29a      	uxth	r2, r3
 801c9b2:	683b      	ldr	r3, [r7, #0]
 801c9b4:	825a      	strh	r2, [r3, #18]
 801c9b6:	683b      	ldr	r3, [r7, #0]
 801c9b8:	8a5a      	ldrh	r2, [r3, #18]
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	8a9b      	ldrh	r3, [r3, #20]
 801c9be:	429a      	cmp	r2, r3
 801c9c0:	d106      	bne.n	801c9d0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801c9c2:	6878      	ldr	r0, [r7, #4]
 801c9c4:	f000 fe52 	bl	801d66c <dhcp_release_and_stop>
        dhcp_start(netif);
 801c9c8:	6878      	ldr	r0, [r7, #4]
 801c9ca:	f000 f989 	bl	801cce0 <dhcp_start>
 801c9ce:	e01e      	b.n	801ca0e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c9d0:	683b      	ldr	r3, [r7, #0]
 801c9d2:	8a1b      	ldrh	r3, [r3, #16]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d00b      	beq.n	801c9f0 <dhcp_coarse_tmr+0x70>
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	8a1b      	ldrh	r3, [r3, #16]
 801c9dc:	1e5a      	subs	r2, r3, #1
 801c9de:	b291      	uxth	r1, r2
 801c9e0:	683a      	ldr	r2, [r7, #0]
 801c9e2:	8211      	strh	r1, [r2, #16]
 801c9e4:	2b01      	cmp	r3, #1
 801c9e6:	d103      	bne.n	801c9f0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c9e8:	6878      	ldr	r0, [r7, #4]
 801c9ea:	f000 f8c6 	bl	801cb7a <dhcp_t2_timeout>
 801c9ee:	e00e      	b.n	801ca0e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c9f0:	683b      	ldr	r3, [r7, #0]
 801c9f2:	89db      	ldrh	r3, [r3, #14]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d00a      	beq.n	801ca0e <dhcp_coarse_tmr+0x8e>
 801c9f8:	683b      	ldr	r3, [r7, #0]
 801c9fa:	89db      	ldrh	r3, [r3, #14]
 801c9fc:	1e5a      	subs	r2, r3, #1
 801c9fe:	b291      	uxth	r1, r2
 801ca00:	683a      	ldr	r2, [r7, #0]
 801ca02:	81d1      	strh	r1, [r2, #14]
 801ca04:	2b01      	cmp	r3, #1
 801ca06:	d102      	bne.n	801ca0e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801ca08:	6878      	ldr	r0, [r7, #4]
 801ca0a:	f000 f888 	bl	801cb1e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	607b      	str	r3, [r7, #4]
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d1b9      	bne.n	801c98e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801ca1a:	bf00      	nop
 801ca1c:	bf00      	nop
 801ca1e:	3708      	adds	r7, #8
 801ca20:	46bd      	mov	sp, r7
 801ca22:	bd80      	pop	{r7, pc}
 801ca24:	2001b18c 	.word	0x2001b18c

0801ca28 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b082      	sub	sp, #8
 801ca2c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801ca2e:	4b16      	ldr	r3, [pc, #88]	; (801ca88 <dhcp_fine_tmr+0x60>)
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	607b      	str	r3, [r7, #4]
 801ca34:	e020      	b.n	801ca78 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca3a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801ca3c:	683b      	ldr	r3, [r7, #0]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d017      	beq.n	801ca72 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	891b      	ldrh	r3, [r3, #8]
 801ca46:	2b01      	cmp	r3, #1
 801ca48:	d906      	bls.n	801ca58 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801ca4a:	683b      	ldr	r3, [r7, #0]
 801ca4c:	891b      	ldrh	r3, [r3, #8]
 801ca4e:	3b01      	subs	r3, #1
 801ca50:	b29a      	uxth	r2, r3
 801ca52:	683b      	ldr	r3, [r7, #0]
 801ca54:	811a      	strh	r2, [r3, #8]
 801ca56:	e00c      	b.n	801ca72 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	891b      	ldrh	r3, [r3, #8]
 801ca5c:	2b01      	cmp	r3, #1
 801ca5e:	d108      	bne.n	801ca72 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801ca60:	683b      	ldr	r3, [r7, #0]
 801ca62:	891b      	ldrh	r3, [r3, #8]
 801ca64:	3b01      	subs	r3, #1
 801ca66:	b29a      	uxth	r2, r3
 801ca68:	683b      	ldr	r3, [r7, #0]
 801ca6a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801ca6c:	6878      	ldr	r0, [r7, #4]
 801ca6e:	f000 f80d 	bl	801ca8c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	607b      	str	r3, [r7, #4]
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d1db      	bne.n	801ca36 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801ca7e:	bf00      	nop
 801ca80:	bf00      	nop
 801ca82:	3708      	adds	r7, #8
 801ca84:	46bd      	mov	sp, r7
 801ca86:	bd80      	pop	{r7, pc}
 801ca88:	2001b18c 	.word	0x2001b18c

0801ca8c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b084      	sub	sp, #16
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca98:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	795b      	ldrb	r3, [r3, #5]
 801ca9e:	2b0c      	cmp	r3, #12
 801caa0:	d003      	beq.n	801caaa <dhcp_timeout+0x1e>
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	795b      	ldrb	r3, [r3, #5]
 801caa6:	2b06      	cmp	r3, #6
 801caa8:	d103      	bne.n	801cab2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801caaa:	6878      	ldr	r0, [r7, #4]
 801caac:	f000 fa74 	bl	801cf98 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801cab0:	e031      	b.n	801cb16 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	795b      	ldrb	r3, [r3, #5]
 801cab6:	2b01      	cmp	r3, #1
 801cab8:	d10e      	bne.n	801cad8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	799b      	ldrb	r3, [r3, #6]
 801cabe:	2b05      	cmp	r3, #5
 801cac0:	d803      	bhi.n	801caca <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801cac2:	6878      	ldr	r0, [r7, #4]
 801cac4:	f7ff fe60 	bl	801c788 <dhcp_select>
}
 801cac8:	e025      	b.n	801cb16 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801caca:	6878      	ldr	r0, [r7, #4]
 801cacc:	f000 fdce 	bl	801d66c <dhcp_release_and_stop>
      dhcp_start(netif);
 801cad0:	6878      	ldr	r0, [r7, #4]
 801cad2:	f000 f905 	bl	801cce0 <dhcp_start>
}
 801cad6:	e01e      	b.n	801cb16 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	795b      	ldrb	r3, [r3, #5]
 801cadc:	2b08      	cmp	r3, #8
 801cade:	d10b      	bne.n	801caf8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	799b      	ldrb	r3, [r3, #6]
 801cae4:	2b01      	cmp	r3, #1
 801cae6:	d803      	bhi.n	801caf0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801cae8:	6878      	ldr	r0, [r7, #4]
 801caea:	f7ff fdf3 	bl	801c6d4 <dhcp_check>
}
 801caee:	e012      	b.n	801cb16 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801caf0:	6878      	ldr	r0, [r7, #4]
 801caf2:	f000 faf3 	bl	801d0dc <dhcp_bind>
}
 801caf6:	e00e      	b.n	801cb16 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	795b      	ldrb	r3, [r3, #5]
 801cafc:	2b03      	cmp	r3, #3
 801cafe:	d10a      	bne.n	801cb16 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	799b      	ldrb	r3, [r3, #6]
 801cb04:	2b01      	cmp	r3, #1
 801cb06:	d803      	bhi.n	801cb10 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	f000 fcf9 	bl	801d500 <dhcp_reboot>
}
 801cb0e:	e002      	b.n	801cb16 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801cb10:	6878      	ldr	r0, [r7, #4]
 801cb12:	f000 fa41 	bl	801cf98 <dhcp_discover>
}
 801cb16:	bf00      	nop
 801cb18:	3710      	adds	r7, #16
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	bd80      	pop	{r7, pc}

0801cb1e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801cb1e:	b580      	push	{r7, lr}
 801cb20:	b084      	sub	sp, #16
 801cb22:	af00      	add	r7, sp, #0
 801cb24:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cb2c:	68fb      	ldr	r3, [r7, #12]
 801cb2e:	795b      	ldrb	r3, [r3, #5]
 801cb30:	2b01      	cmp	r3, #1
 801cb32:	d007      	beq.n	801cb44 <dhcp_t1_timeout+0x26>
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	795b      	ldrb	r3, [r3, #5]
 801cb38:	2b0a      	cmp	r3, #10
 801cb3a:	d003      	beq.n	801cb44 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801cb3c:	68fb      	ldr	r3, [r7, #12]
 801cb3e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cb40:	2b05      	cmp	r3, #5
 801cb42:	d116      	bne.n	801cb72 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801cb44:	6878      	ldr	r0, [r7, #4]
 801cb46:	f000 fba3 	bl	801d290 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	899b      	ldrh	r3, [r3, #12]
 801cb4e:	461a      	mov	r2, r3
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	8a5b      	ldrh	r3, [r3, #18]
 801cb54:	1ad3      	subs	r3, r2, r3
 801cb56:	2b01      	cmp	r3, #1
 801cb58:	dd0b      	ble.n	801cb72 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	899b      	ldrh	r3, [r3, #12]
 801cb5e:	461a      	mov	r2, r3
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	8a5b      	ldrh	r3, [r3, #18]
 801cb64:	1ad3      	subs	r3, r2, r3
 801cb66:	0fda      	lsrs	r2, r3, #31
 801cb68:	4413      	add	r3, r2
 801cb6a:	105b      	asrs	r3, r3, #1
 801cb6c:	b29a      	uxth	r2, r3
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801cb72:	bf00      	nop
 801cb74:	3710      	adds	r7, #16
 801cb76:	46bd      	mov	sp, r7
 801cb78:	bd80      	pop	{r7, pc}

0801cb7a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801cb7a:	b580      	push	{r7, lr}
 801cb7c:	b084      	sub	sp, #16
 801cb7e:	af00      	add	r7, sp, #0
 801cb80:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb86:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	795b      	ldrb	r3, [r3, #5]
 801cb8c:	2b01      	cmp	r3, #1
 801cb8e:	d00b      	beq.n	801cba8 <dhcp_t2_timeout+0x2e>
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	795b      	ldrb	r3, [r3, #5]
 801cb94:	2b0a      	cmp	r3, #10
 801cb96:	d007      	beq.n	801cba8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cb9c:	2b05      	cmp	r3, #5
 801cb9e:	d003      	beq.n	801cba8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	795b      	ldrb	r3, [r3, #5]
 801cba4:	2b04      	cmp	r3, #4
 801cba6:	d116      	bne.n	801cbd6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801cba8:	6878      	ldr	r0, [r7, #4]
 801cbaa:	f000 fc0d 	bl	801d3c8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	8a9b      	ldrh	r3, [r3, #20]
 801cbb2:	461a      	mov	r2, r3
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	8a5b      	ldrh	r3, [r3, #18]
 801cbb8:	1ad3      	subs	r3, r2, r3
 801cbba:	2b01      	cmp	r3, #1
 801cbbc:	dd0b      	ble.n	801cbd6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	8a9b      	ldrh	r3, [r3, #20]
 801cbc2:	461a      	mov	r2, r3
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	8a5b      	ldrh	r3, [r3, #18]
 801cbc8:	1ad3      	subs	r3, r2, r3
 801cbca:	0fda      	lsrs	r2, r3, #31
 801cbcc:	4413      	add	r3, r2
 801cbce:	105b      	asrs	r3, r3, #1
 801cbd0:	b29a      	uxth	r2, r3
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801cbd6:	bf00      	nop
 801cbd8:	3710      	adds	r7, #16
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	bd80      	pop	{r7, pc}
	...

0801cbe0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b086      	sub	sp, #24
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]
 801cbe8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbee:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801cbf0:	693b      	ldr	r3, [r7, #16]
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801cbf6:	693b      	ldr	r3, [r7, #16]
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801cbfc:	4b36      	ldr	r3, [pc, #216]	; (801ccd8 <dhcp_handle_ack+0xf8>)
 801cbfe:	78db      	ldrb	r3, [r3, #3]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d003      	beq.n	801cc0c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801cc04:	4b35      	ldr	r3, [pc, #212]	; (801ccdc <dhcp_handle_ack+0xfc>)
 801cc06:	68da      	ldr	r2, [r3, #12]
 801cc08:	693b      	ldr	r3, [r7, #16]
 801cc0a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801cc0c:	4b32      	ldr	r3, [pc, #200]	; (801ccd8 <dhcp_handle_ack+0xf8>)
 801cc0e:	791b      	ldrb	r3, [r3, #4]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d004      	beq.n	801cc1e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801cc14:	4b31      	ldr	r3, [pc, #196]	; (801ccdc <dhcp_handle_ack+0xfc>)
 801cc16:	691a      	ldr	r2, [r3, #16]
 801cc18:	693b      	ldr	r3, [r7, #16]
 801cc1a:	62da      	str	r2, [r3, #44]	; 0x2c
 801cc1c:	e004      	b.n	801cc28 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801cc1e:	693b      	ldr	r3, [r7, #16]
 801cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc22:	085a      	lsrs	r2, r3, #1
 801cc24:	693b      	ldr	r3, [r7, #16]
 801cc26:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801cc28:	4b2b      	ldr	r3, [pc, #172]	; (801ccd8 <dhcp_handle_ack+0xf8>)
 801cc2a:	795b      	ldrb	r3, [r3, #5]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d004      	beq.n	801cc3a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801cc30:	4b2a      	ldr	r3, [pc, #168]	; (801ccdc <dhcp_handle_ack+0xfc>)
 801cc32:	695a      	ldr	r2, [r3, #20]
 801cc34:	693b      	ldr	r3, [r7, #16]
 801cc36:	631a      	str	r2, [r3, #48]	; 0x30
 801cc38:	e007      	b.n	801cc4a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801cc3a:	693b      	ldr	r3, [r7, #16]
 801cc3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cc3e:	4613      	mov	r3, r2
 801cc40:	00db      	lsls	r3, r3, #3
 801cc42:	1a9b      	subs	r3, r3, r2
 801cc44:	08da      	lsrs	r2, r3, #3
 801cc46:	693b      	ldr	r3, [r7, #16]
 801cc48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cc4a:	683b      	ldr	r3, [r7, #0]
 801cc4c:	691a      	ldr	r2, [r3, #16]
 801cc4e:	693b      	ldr	r3, [r7, #16]
 801cc50:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801cc52:	4b21      	ldr	r3, [pc, #132]	; (801ccd8 <dhcp_handle_ack+0xf8>)
 801cc54:	799b      	ldrb	r3, [r3, #6]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d00b      	beq.n	801cc72 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801cc5a:	4b20      	ldr	r3, [pc, #128]	; (801ccdc <dhcp_handle_ack+0xfc>)
 801cc5c:	699b      	ldr	r3, [r3, #24]
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7f5 fbd1 	bl	8012406 <lwip_htonl>
 801cc64:	4602      	mov	r2, r0
 801cc66:	693b      	ldr	r3, [r7, #16]
 801cc68:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801cc6a:	693b      	ldr	r3, [r7, #16]
 801cc6c:	2201      	movs	r2, #1
 801cc6e:	71da      	strb	r2, [r3, #7]
 801cc70:	e002      	b.n	801cc78 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801cc72:	693b      	ldr	r3, [r7, #16]
 801cc74:	2200      	movs	r2, #0
 801cc76:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801cc78:	4b17      	ldr	r3, [pc, #92]	; (801ccd8 <dhcp_handle_ack+0xf8>)
 801cc7a:	79db      	ldrb	r3, [r3, #7]
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d007      	beq.n	801cc90 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801cc80:	4b16      	ldr	r3, [pc, #88]	; (801ccdc <dhcp_handle_ack+0xfc>)
 801cc82:	69db      	ldr	r3, [r3, #28]
 801cc84:	4618      	mov	r0, r3
 801cc86:	f7f5 fbbe 	bl	8012406 <lwip_htonl>
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	693b      	ldr	r3, [r7, #16]
 801cc8e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801cc90:	2300      	movs	r3, #0
 801cc92:	75fb      	strb	r3, [r7, #23]
 801cc94:	e013      	b.n	801ccbe <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801cc96:	7dfb      	ldrb	r3, [r7, #23]
 801cc98:	3308      	adds	r3, #8
 801cc9a:	4a10      	ldr	r2, [pc, #64]	; (801ccdc <dhcp_handle_ack+0xfc>)
 801cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cca0:	4618      	mov	r0, r3
 801cca2:	f7f5 fbb0 	bl	8012406 <lwip_htonl>
 801cca6:	4603      	mov	r3, r0
 801cca8:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801ccaa:	f107 020c 	add.w	r2, r7, #12
 801ccae:	7dfb      	ldrb	r3, [r7, #23]
 801ccb0:	4611      	mov	r1, r2
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	f7f5 fc02 	bl	80124bc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801ccb8:	7dfb      	ldrb	r3, [r7, #23]
 801ccba:	3301      	adds	r3, #1
 801ccbc:	75fb      	strb	r3, [r7, #23]
 801ccbe:	7dfb      	ldrb	r3, [r7, #23]
 801ccc0:	2b01      	cmp	r3, #1
 801ccc2:	d805      	bhi.n	801ccd0 <dhcp_handle_ack+0xf0>
 801ccc4:	7dfb      	ldrb	r3, [r7, #23]
 801ccc6:	3308      	adds	r3, #8
 801ccc8:	4a03      	ldr	r2, [pc, #12]	; (801ccd8 <dhcp_handle_ack+0xf8>)
 801ccca:	5cd3      	ldrb	r3, [r2, r3]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d1e2      	bne.n	801cc96 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801ccd0:	bf00      	nop
 801ccd2:	3718      	adds	r7, #24
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	2001b1b8 	.word	0x2001b1b8
 801ccdc:	2001b1c4 	.word	0x2001b1c4

0801cce0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b084      	sub	sp, #16
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d109      	bne.n	801cd02 <dhcp_start+0x22>
 801ccee:	4b37      	ldr	r3, [pc, #220]	; (801cdcc <dhcp_start+0xec>)
 801ccf0:	f240 22e7 	movw	r2, #743	; 0x2e7
 801ccf4:	4936      	ldr	r1, [pc, #216]	; (801cdd0 <dhcp_start+0xf0>)
 801ccf6:	4837      	ldr	r0, [pc, #220]	; (801cdd4 <dhcp_start+0xf4>)
 801ccf8:	f004 ffd8 	bl	8021cac <iprintf>
 801ccfc:	f06f 030f 	mvn.w	r3, #15
 801cd00:	e060      	b.n	801cdc4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd08:	f003 0301 	and.w	r3, r3, #1
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d109      	bne.n	801cd24 <dhcp_start+0x44>
 801cd10:	4b2e      	ldr	r3, [pc, #184]	; (801cdcc <dhcp_start+0xec>)
 801cd12:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801cd16:	4930      	ldr	r1, [pc, #192]	; (801cdd8 <dhcp_start+0xf8>)
 801cd18:	482e      	ldr	r0, [pc, #184]	; (801cdd4 <dhcp_start+0xf4>)
 801cd1a:	f004 ffc7 	bl	8021cac <iprintf>
 801cd1e:	f06f 030f 	mvn.w	r3, #15
 801cd22:	e04f      	b.n	801cdc4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd28:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd2e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801cd32:	d202      	bcs.n	801cd3a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801cd34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd38:	e044      	b.n	801cdc4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d10d      	bne.n	801cd5c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cd40:	2034      	movs	r0, #52	; 0x34
 801cd42:	f7f6 fe55 	bl	80139f0 <mem_malloc>
 801cd46:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d102      	bne.n	801cd54 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801cd4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd52:	e037      	b.n	801cdc4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	68fa      	ldr	r2, [r7, #12]
 801cd58:	625a      	str	r2, [r3, #36]	; 0x24
 801cd5a:	e005      	b.n	801cd68 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	791b      	ldrb	r3, [r3, #4]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d001      	beq.n	801cd68 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cd64:	f7ff fc72 	bl	801c64c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801cd68:	2234      	movs	r2, #52	; 0x34
 801cd6a:	2100      	movs	r1, #0
 801cd6c:	68f8      	ldr	r0, [r7, #12]
 801cd6e:	f004 fa81 	bl	8021274 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801cd72:	f7ff fc19 	bl	801c5a8 <dhcp_inc_pcb_refcount>
 801cd76:	4603      	mov	r3, r0
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d002      	beq.n	801cd82 <dhcp_start+0xa2>
    return ERR_MEM;
 801cd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd80:	e020      	b.n	801cdc4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	2201      	movs	r2, #1
 801cd86:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd8e:	f003 0304 	and.w	r3, r3, #4
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d105      	bne.n	801cda2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801cd96:	2102      	movs	r1, #2
 801cd98:	68f8      	ldr	r0, [r7, #12]
 801cd9a:	f000 fd01 	bl	801d7a0 <dhcp_set_state>
    return ERR_OK;
 801cd9e:	2300      	movs	r3, #0
 801cda0:	e010      	b.n	801cdc4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801cda2:	6878      	ldr	r0, [r7, #4]
 801cda4:	f000 f8f8 	bl	801cf98 <dhcp_discover>
 801cda8:	4603      	mov	r3, r0
 801cdaa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801cdac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d005      	beq.n	801cdc0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801cdb4:	6878      	ldr	r0, [r7, #4]
 801cdb6:	f000 fc59 	bl	801d66c <dhcp_release_and_stop>
    return ERR_MEM;
 801cdba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cdbe:	e001      	b.n	801cdc4 <dhcp_start+0xe4>
  }
  return result;
 801cdc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	3710      	adds	r7, #16
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}
 801cdcc:	08028d88 	.word	0x08028d88
 801cdd0:	08028e6c 	.word	0x08028e6c
 801cdd4:	08028de8 	.word	0x08028de8
 801cdd8:	08028eb0 	.word	0x08028eb0

0801cddc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801cddc:	b580      	push	{r7, lr}
 801cdde:	b084      	sub	sp, #16
 801cde0:	af00      	add	r7, sp, #0
 801cde2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cde8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d025      	beq.n	801ce3c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	795b      	ldrb	r3, [r3, #5]
 801cdf4:	2b0a      	cmp	r3, #10
 801cdf6:	d008      	beq.n	801ce0a <dhcp_network_changed+0x2e>
 801cdf8:	2b0a      	cmp	r3, #10
 801cdfa:	dc0d      	bgt.n	801ce18 <dhcp_network_changed+0x3c>
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d01f      	beq.n	801ce40 <dhcp_network_changed+0x64>
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	db09      	blt.n	801ce18 <dhcp_network_changed+0x3c>
 801ce04:	3b03      	subs	r3, #3
 801ce06:	2b02      	cmp	r3, #2
 801ce08:	d806      	bhi.n	801ce18 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801ce10:	6878      	ldr	r0, [r7, #4]
 801ce12:	f000 fb75 	bl	801d500 <dhcp_reboot>
      break;
 801ce16:	e014      	b.n	801ce42 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	795b      	ldrb	r3, [r3, #5]
 801ce1c:	2b0c      	cmp	r3, #12
 801ce1e:	d906      	bls.n	801ce2e <dhcp_network_changed+0x52>
 801ce20:	4b09      	ldr	r3, [pc, #36]	; (801ce48 <dhcp_network_changed+0x6c>)
 801ce22:	f240 326d 	movw	r2, #877	; 0x36d
 801ce26:	4909      	ldr	r1, [pc, #36]	; (801ce4c <dhcp_network_changed+0x70>)
 801ce28:	4809      	ldr	r0, [pc, #36]	; (801ce50 <dhcp_network_changed+0x74>)
 801ce2a:	f004 ff3f 	bl	8021cac <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	2200      	movs	r2, #0
 801ce32:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801ce34:	6878      	ldr	r0, [r7, #4]
 801ce36:	f000 f8af 	bl	801cf98 <dhcp_discover>
      break;
 801ce3a:	e002      	b.n	801ce42 <dhcp_network_changed+0x66>
    return;
 801ce3c:	bf00      	nop
 801ce3e:	e000      	b.n	801ce42 <dhcp_network_changed+0x66>
      break;
 801ce40:	bf00      	nop
  }
}
 801ce42:	3710      	adds	r7, #16
 801ce44:	46bd      	mov	sp, r7
 801ce46:	bd80      	pop	{r7, pc}
 801ce48:	08028d88 	.word	0x08028d88
 801ce4c:	08028ed4 	.word	0x08028ed4
 801ce50:	08028de8 	.word	0x08028de8

0801ce54 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b084      	sub	sp, #16
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d107      	bne.n	801ce74 <dhcp_arp_reply+0x20>
 801ce64:	4b0e      	ldr	r3, [pc, #56]	; (801cea0 <dhcp_arp_reply+0x4c>)
 801ce66:	f240 328b 	movw	r2, #907	; 0x38b
 801ce6a:	490e      	ldr	r1, [pc, #56]	; (801cea4 <dhcp_arp_reply+0x50>)
 801ce6c:	480e      	ldr	r0, [pc, #56]	; (801cea8 <dhcp_arp_reply+0x54>)
 801ce6e:	f004 ff1d 	bl	8021cac <iprintf>
 801ce72:	e012      	b.n	801ce9a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce78:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d00c      	beq.n	801ce9a <dhcp_arp_reply+0x46>
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	795b      	ldrb	r3, [r3, #5]
 801ce84:	2b08      	cmp	r3, #8
 801ce86:	d108      	bne.n	801ce9a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	681a      	ldr	r2, [r3, #0]
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	69db      	ldr	r3, [r3, #28]
 801ce90:	429a      	cmp	r2, r3
 801ce92:	d102      	bne.n	801ce9a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801ce94:	6878      	ldr	r0, [r7, #4]
 801ce96:	f000 f809 	bl	801ceac <dhcp_decline>
    }
  }
}
 801ce9a:	3710      	adds	r7, #16
 801ce9c:	46bd      	mov	sp, r7
 801ce9e:	bd80      	pop	{r7, pc}
 801cea0:	08028d88 	.word	0x08028d88
 801cea4:	08028e6c 	.word	0x08028e6c
 801cea8:	08028de8 	.word	0x08028de8

0801ceac <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801ceac:	b5b0      	push	{r4, r5, r7, lr}
 801ceae:	b08a      	sub	sp, #40	; 0x28
 801ceb0:	af02      	add	r7, sp, #8
 801ceb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ceb8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801ceba:	210c      	movs	r1, #12
 801cebc:	69b8      	ldr	r0, [r7, #24]
 801cebe:	f000 fc6f 	bl	801d7a0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801cec2:	f107 030c 	add.w	r3, r7, #12
 801cec6:	2204      	movs	r2, #4
 801cec8:	69b9      	ldr	r1, [r7, #24]
 801ceca:	6878      	ldr	r0, [r7, #4]
 801cecc:	f001 f932 	bl	801e134 <dhcp_create_msg>
 801ced0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ced2:	697b      	ldr	r3, [r7, #20]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d035      	beq.n	801cf44 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ced8:	697b      	ldr	r3, [r7, #20]
 801ceda:	685b      	ldr	r3, [r3, #4]
 801cedc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cede:	89b8      	ldrh	r0, [r7, #12]
 801cee0:	693b      	ldr	r3, [r7, #16]
 801cee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cee6:	2304      	movs	r3, #4
 801cee8:	2232      	movs	r2, #50	; 0x32
 801ceea:	f000 fc73 	bl	801d7d4 <dhcp_option>
 801ceee:	4603      	mov	r3, r0
 801cef0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cef2:	89bc      	ldrh	r4, [r7, #12]
 801cef4:	693b      	ldr	r3, [r7, #16]
 801cef6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801cefa:	69bb      	ldr	r3, [r7, #24]
 801cefc:	69db      	ldr	r3, [r3, #28]
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7f5 fa81 	bl	8012406 <lwip_htonl>
 801cf04:	4603      	mov	r3, r0
 801cf06:	461a      	mov	r2, r3
 801cf08:	4629      	mov	r1, r5
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	f000 fcee 	bl	801d8ec <dhcp_option_long>
 801cf10:	4603      	mov	r3, r0
 801cf12:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cf14:	89b8      	ldrh	r0, [r7, #12]
 801cf16:	693b      	ldr	r3, [r7, #16]
 801cf18:	33f0      	adds	r3, #240	; 0xf0
 801cf1a:	697a      	ldr	r2, [r7, #20]
 801cf1c:	4619      	mov	r1, r3
 801cf1e:	f001 f9df 	bl	801e2e0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801cf22:	4b19      	ldr	r3, [pc, #100]	; (801cf88 <dhcp_decline+0xdc>)
 801cf24:	6818      	ldr	r0, [r3, #0]
 801cf26:	4b19      	ldr	r3, [pc, #100]	; (801cf8c <dhcp_decline+0xe0>)
 801cf28:	9301      	str	r3, [sp, #4]
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	9300      	str	r3, [sp, #0]
 801cf2e:	2343      	movs	r3, #67	; 0x43
 801cf30:	4a17      	ldr	r2, [pc, #92]	; (801cf90 <dhcp_decline+0xe4>)
 801cf32:	6979      	ldr	r1, [r7, #20]
 801cf34:	f7ff f87e 	bl	801c034 <udp_sendto_if_src>
 801cf38:	4603      	mov	r3, r0
 801cf3a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801cf3c:	6978      	ldr	r0, [r7, #20]
 801cf3e:	f7f7 fe0d 	bl	8014b5c <pbuf_free>
 801cf42:	e001      	b.n	801cf48 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801cf44:	23ff      	movs	r3, #255	; 0xff
 801cf46:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801cf48:	69bb      	ldr	r3, [r7, #24]
 801cf4a:	799b      	ldrb	r3, [r3, #6]
 801cf4c:	2bff      	cmp	r3, #255	; 0xff
 801cf4e:	d005      	beq.n	801cf5c <dhcp_decline+0xb0>
    dhcp->tries++;
 801cf50:	69bb      	ldr	r3, [r7, #24]
 801cf52:	799b      	ldrb	r3, [r3, #6]
 801cf54:	3301      	adds	r3, #1
 801cf56:	b2da      	uxtb	r2, r3
 801cf58:	69bb      	ldr	r3, [r7, #24]
 801cf5a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801cf5c:	f242 7310 	movw	r3, #10000	; 0x2710
 801cf60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf62:	89fb      	ldrh	r3, [r7, #14]
 801cf64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cf68:	4a0a      	ldr	r2, [pc, #40]	; (801cf94 <dhcp_decline+0xe8>)
 801cf6a:	fb82 1203 	smull	r1, r2, r2, r3
 801cf6e:	1152      	asrs	r2, r2, #5
 801cf70:	17db      	asrs	r3, r3, #31
 801cf72:	1ad3      	subs	r3, r2, r3
 801cf74:	b29a      	uxth	r2, r3
 801cf76:	69bb      	ldr	r3, [r7, #24]
 801cf78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cf7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cf7e:	4618      	mov	r0, r3
 801cf80:	3720      	adds	r7, #32
 801cf82:	46bd      	mov	sp, r7
 801cf84:	bdb0      	pop	{r4, r5, r7, pc}
 801cf86:	bf00      	nop
 801cf88:	200143c4 	.word	0x200143c4
 801cf8c:	08029ae8 	.word	0x08029ae8
 801cf90:	08029aec 	.word	0x08029aec
 801cf94:	10624dd3 	.word	0x10624dd3

0801cf98 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b08a      	sub	sp, #40	; 0x28
 801cf9c:	af02      	add	r7, sp, #8
 801cf9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfa4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801cfaa:	69bb      	ldr	r3, [r7, #24]
 801cfac:	2200      	movs	r2, #0
 801cfae:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801cfb0:	2106      	movs	r1, #6
 801cfb2:	69b8      	ldr	r0, [r7, #24]
 801cfb4:	f000 fbf4 	bl	801d7a0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801cfb8:	f107 0308 	add.w	r3, r7, #8
 801cfbc:	2201      	movs	r2, #1
 801cfbe:	69b9      	ldr	r1, [r7, #24]
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	f001 f8b7 	bl	801e134 <dhcp_create_msg>
 801cfc6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801cfc8:	693b      	ldr	r3, [r7, #16]
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d04b      	beq.n	801d066 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cfce:	693b      	ldr	r3, [r7, #16]
 801cfd0:	685b      	ldr	r3, [r3, #4]
 801cfd2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cfd4:	8938      	ldrh	r0, [r7, #8]
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cfdc:	2302      	movs	r3, #2
 801cfde:	2239      	movs	r2, #57	; 0x39
 801cfe0:	f000 fbf8 	bl	801d7d4 <dhcp_option>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cfe8:	8938      	ldrh	r0, [r7, #8]
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cff4:	461a      	mov	r2, r3
 801cff6:	f000 fc47 	bl	801d888 <dhcp_option_short>
 801cffa:	4603      	mov	r3, r0
 801cffc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cffe:	8938      	ldrh	r0, [r7, #8]
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d006:	2304      	movs	r3, #4
 801d008:	2237      	movs	r2, #55	; 0x37
 801d00a:	f000 fbe3 	bl	801d7d4 <dhcp_option>
 801d00e:	4603      	mov	r3, r0
 801d010:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d012:	2300      	movs	r3, #0
 801d014:	77fb      	strb	r3, [r7, #31]
 801d016:	e00e      	b.n	801d036 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d018:	8938      	ldrh	r0, [r7, #8]
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d020:	7ffb      	ldrb	r3, [r7, #31]
 801d022:	4a29      	ldr	r2, [pc, #164]	; (801d0c8 <dhcp_discover+0x130>)
 801d024:	5cd3      	ldrb	r3, [r2, r3]
 801d026:	461a      	mov	r2, r3
 801d028:	f000 fc08 	bl	801d83c <dhcp_option_byte>
 801d02c:	4603      	mov	r3, r0
 801d02e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d030:	7ffb      	ldrb	r3, [r7, #31]
 801d032:	3301      	adds	r3, #1
 801d034:	77fb      	strb	r3, [r7, #31]
 801d036:	7ffb      	ldrb	r3, [r7, #31]
 801d038:	2b03      	cmp	r3, #3
 801d03a:	d9ed      	bls.n	801d018 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d03c:	8938      	ldrh	r0, [r7, #8]
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	33f0      	adds	r3, #240	; 0xf0
 801d042:	693a      	ldr	r2, [r7, #16]
 801d044:	4619      	mov	r1, r3
 801d046:	f001 f94b 	bl	801e2e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d04a:	4b20      	ldr	r3, [pc, #128]	; (801d0cc <dhcp_discover+0x134>)
 801d04c:	6818      	ldr	r0, [r3, #0]
 801d04e:	4b20      	ldr	r3, [pc, #128]	; (801d0d0 <dhcp_discover+0x138>)
 801d050:	9301      	str	r3, [sp, #4]
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	9300      	str	r3, [sp, #0]
 801d056:	2343      	movs	r3, #67	; 0x43
 801d058:	4a1e      	ldr	r2, [pc, #120]	; (801d0d4 <dhcp_discover+0x13c>)
 801d05a:	6939      	ldr	r1, [r7, #16]
 801d05c:	f7fe ffea 	bl	801c034 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801d060:	6938      	ldr	r0, [r7, #16]
 801d062:	f7f7 fd7b 	bl	8014b5c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d066:	69bb      	ldr	r3, [r7, #24]
 801d068:	799b      	ldrb	r3, [r3, #6]
 801d06a:	2bff      	cmp	r3, #255	; 0xff
 801d06c:	d005      	beq.n	801d07a <dhcp_discover+0xe2>
    dhcp->tries++;
 801d06e:	69bb      	ldr	r3, [r7, #24]
 801d070:	799b      	ldrb	r3, [r3, #6]
 801d072:	3301      	adds	r3, #1
 801d074:	b2da      	uxtb	r2, r3
 801d076:	69bb      	ldr	r3, [r7, #24]
 801d078:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d07a:	69bb      	ldr	r3, [r7, #24]
 801d07c:	799b      	ldrb	r3, [r3, #6]
 801d07e:	2b05      	cmp	r3, #5
 801d080:	d80d      	bhi.n	801d09e <dhcp_discover+0x106>
 801d082:	69bb      	ldr	r3, [r7, #24]
 801d084:	799b      	ldrb	r3, [r3, #6]
 801d086:	461a      	mov	r2, r3
 801d088:	2301      	movs	r3, #1
 801d08a:	4093      	lsls	r3, r2
 801d08c:	b29b      	uxth	r3, r3
 801d08e:	461a      	mov	r2, r3
 801d090:	0152      	lsls	r2, r2, #5
 801d092:	1ad2      	subs	r2, r2, r3
 801d094:	0092      	lsls	r2, r2, #2
 801d096:	4413      	add	r3, r2
 801d098:	00db      	lsls	r3, r3, #3
 801d09a:	b29b      	uxth	r3, r3
 801d09c:	e001      	b.n	801d0a2 <dhcp_discover+0x10a>
 801d09e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801d0a2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d0a4:	897b      	ldrh	r3, [r7, #10]
 801d0a6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d0aa:	4a0b      	ldr	r2, [pc, #44]	; (801d0d8 <dhcp_discover+0x140>)
 801d0ac:	fb82 1203 	smull	r1, r2, r2, r3
 801d0b0:	1152      	asrs	r2, r2, #5
 801d0b2:	17db      	asrs	r3, r3, #31
 801d0b4:	1ad3      	subs	r3, r2, r3
 801d0b6:	b29a      	uxth	r2, r3
 801d0b8:	69bb      	ldr	r3, [r7, #24]
 801d0ba:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d0bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	3720      	adds	r7, #32
 801d0c4:	46bd      	mov	sp, r7
 801d0c6:	bd80      	pop	{r7, pc}
 801d0c8:	20000070 	.word	0x20000070
 801d0cc:	200143c4 	.word	0x200143c4
 801d0d0:	08029ae8 	.word	0x08029ae8
 801d0d4:	08029aec 	.word	0x08029aec
 801d0d8:	10624dd3 	.word	0x10624dd3

0801d0dc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b088      	sub	sp, #32
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d107      	bne.n	801d0fa <dhcp_bind+0x1e>
 801d0ea:	4b64      	ldr	r3, [pc, #400]	; (801d27c <dhcp_bind+0x1a0>)
 801d0ec:	f240 4215 	movw	r2, #1045	; 0x415
 801d0f0:	4963      	ldr	r1, [pc, #396]	; (801d280 <dhcp_bind+0x1a4>)
 801d0f2:	4864      	ldr	r0, [pc, #400]	; (801d284 <dhcp_bind+0x1a8>)
 801d0f4:	f004 fdda 	bl	8021cac <iprintf>
 801d0f8:	e0bc      	b.n	801d274 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0fe:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801d100:	69fb      	ldr	r3, [r7, #28]
 801d102:	2b00      	cmp	r3, #0
 801d104:	d107      	bne.n	801d116 <dhcp_bind+0x3a>
 801d106:	4b5d      	ldr	r3, [pc, #372]	; (801d27c <dhcp_bind+0x1a0>)
 801d108:	f240 4217 	movw	r2, #1047	; 0x417
 801d10c:	495e      	ldr	r1, [pc, #376]	; (801d288 <dhcp_bind+0x1ac>)
 801d10e:	485d      	ldr	r0, [pc, #372]	; (801d284 <dhcp_bind+0x1a8>)
 801d110:	f004 fdcc 	bl	8021cac <iprintf>
 801d114:	e0ae      	b.n	801d274 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801d116:	69fb      	ldr	r3, [r7, #28]
 801d118:	2200      	movs	r2, #0
 801d11a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d11c:	69fb      	ldr	r3, [r7, #28]
 801d11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d124:	d019      	beq.n	801d15a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d126:	69fb      	ldr	r3, [r7, #28]
 801d128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d12a:	331e      	adds	r3, #30
 801d12c:	4a57      	ldr	r2, [pc, #348]	; (801d28c <dhcp_bind+0x1b0>)
 801d12e:	fba2 2303 	umull	r2, r3, r2, r3
 801d132:	095b      	lsrs	r3, r3, #5
 801d134:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801d136:	69bb      	ldr	r3, [r7, #24]
 801d138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d13c:	d302      	bcc.n	801d144 <dhcp_bind+0x68>
      timeout = 0xffff;
 801d13e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d142:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801d144:	69bb      	ldr	r3, [r7, #24]
 801d146:	b29a      	uxth	r2, r3
 801d148:	69fb      	ldr	r3, [r7, #28]
 801d14a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801d14c:	69fb      	ldr	r3, [r7, #28]
 801d14e:	8a9b      	ldrh	r3, [r3, #20]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d102      	bne.n	801d15a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801d154:	69fb      	ldr	r3, [r7, #28]
 801d156:	2201      	movs	r2, #1
 801d158:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d15a:	69fb      	ldr	r3, [r7, #28]
 801d15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d15e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d162:	d01d      	beq.n	801d1a0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d164:	69fb      	ldr	r3, [r7, #28]
 801d166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d168:	331e      	adds	r3, #30
 801d16a:	4a48      	ldr	r2, [pc, #288]	; (801d28c <dhcp_bind+0x1b0>)
 801d16c:	fba2 2303 	umull	r2, r3, r2, r3
 801d170:	095b      	lsrs	r3, r3, #5
 801d172:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801d174:	69bb      	ldr	r3, [r7, #24]
 801d176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d17a:	d302      	bcc.n	801d182 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801d17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d180:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801d182:	69bb      	ldr	r3, [r7, #24]
 801d184:	b29a      	uxth	r2, r3
 801d186:	69fb      	ldr	r3, [r7, #28]
 801d188:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801d18a:	69fb      	ldr	r3, [r7, #28]
 801d18c:	895b      	ldrh	r3, [r3, #10]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d102      	bne.n	801d198 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801d192:	69fb      	ldr	r3, [r7, #28]
 801d194:	2201      	movs	r2, #1
 801d196:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801d198:	69fb      	ldr	r3, [r7, #28]
 801d19a:	895a      	ldrh	r2, [r3, #10]
 801d19c:	69fb      	ldr	r3, [r7, #28]
 801d19e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d1a0:	69fb      	ldr	r3, [r7, #28]
 801d1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d1a8:	d01d      	beq.n	801d1e6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d1aa:	69fb      	ldr	r3, [r7, #28]
 801d1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1ae:	331e      	adds	r3, #30
 801d1b0:	4a36      	ldr	r2, [pc, #216]	; (801d28c <dhcp_bind+0x1b0>)
 801d1b2:	fba2 2303 	umull	r2, r3, r2, r3
 801d1b6:	095b      	lsrs	r3, r3, #5
 801d1b8:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801d1ba:	69bb      	ldr	r3, [r7, #24]
 801d1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d1c0:	d302      	bcc.n	801d1c8 <dhcp_bind+0xec>
      timeout = 0xffff;
 801d1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d1c6:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801d1c8:	69bb      	ldr	r3, [r7, #24]
 801d1ca:	b29a      	uxth	r2, r3
 801d1cc:	69fb      	ldr	r3, [r7, #28]
 801d1ce:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801d1d0:	69fb      	ldr	r3, [r7, #28]
 801d1d2:	899b      	ldrh	r3, [r3, #12]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d102      	bne.n	801d1de <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801d1d8:	69fb      	ldr	r3, [r7, #28]
 801d1da:	2201      	movs	r2, #1
 801d1dc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d1de:	69fb      	ldr	r3, [r7, #28]
 801d1e0:	899a      	ldrh	r2, [r3, #12]
 801d1e2:	69fb      	ldr	r3, [r7, #28]
 801d1e4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d1e6:	69fb      	ldr	r3, [r7, #28]
 801d1e8:	895a      	ldrh	r2, [r3, #10]
 801d1ea:	69fb      	ldr	r3, [r7, #28]
 801d1ec:	899b      	ldrh	r3, [r3, #12]
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	d306      	bcc.n	801d200 <dhcp_bind+0x124>
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	899b      	ldrh	r3, [r3, #12]
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d002      	beq.n	801d200 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801d1fa:	69fb      	ldr	r3, [r7, #28]
 801d1fc:	2200      	movs	r2, #0
 801d1fe:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801d200:	69fb      	ldr	r3, [r7, #28]
 801d202:	79db      	ldrb	r3, [r3, #7]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d003      	beq.n	801d210 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d208:	69fb      	ldr	r3, [r7, #28]
 801d20a:	6a1b      	ldr	r3, [r3, #32]
 801d20c:	613b      	str	r3, [r7, #16]
 801d20e:	e014      	b.n	801d23a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d210:	69fb      	ldr	r3, [r7, #28]
 801d212:	331c      	adds	r3, #28
 801d214:	781b      	ldrb	r3, [r3, #0]
 801d216:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801d218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	db02      	blt.n	801d226 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d220:	23ff      	movs	r3, #255	; 0xff
 801d222:	613b      	str	r3, [r7, #16]
 801d224:	e009      	b.n	801d23a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d226:	7dfb      	ldrb	r3, [r7, #23]
 801d228:	2bbf      	cmp	r3, #191	; 0xbf
 801d22a:	d903      	bls.n	801d234 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d22c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d230:	613b      	str	r3, [r7, #16]
 801d232:	e002      	b.n	801d23a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d238:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d23a:	69fb      	ldr	r3, [r7, #28]
 801d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d23e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d108      	bne.n	801d258 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d246:	69fb      	ldr	r3, [r7, #28]
 801d248:	69da      	ldr	r2, [r3, #28]
 801d24a:	693b      	ldr	r3, [r7, #16]
 801d24c:	4013      	ands	r3, r2
 801d24e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d256:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d258:	210a      	movs	r1, #10
 801d25a:	69f8      	ldr	r0, [r7, #28]
 801d25c:	f000 faa0 	bl	801d7a0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d260:	69fb      	ldr	r3, [r7, #28]
 801d262:	f103 011c 	add.w	r1, r3, #28
 801d266:	f107 030c 	add.w	r3, r7, #12
 801d26a:	f107 0210 	add.w	r2, r7, #16
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	f7f6 ff34 	bl	80140dc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d274:	3720      	adds	r7, #32
 801d276:	46bd      	mov	sp, r7
 801d278:	bd80      	pop	{r7, pc}
 801d27a:	bf00      	nop
 801d27c:	08028d88 	.word	0x08028d88
 801d280:	08028ee8 	.word	0x08028ee8
 801d284:	08028de8 	.word	0x08028de8
 801d288:	08028f04 	.word	0x08028f04
 801d28c:	88888889 	.word	0x88888889

0801d290 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d290:	b580      	push	{r7, lr}
 801d292:	b08a      	sub	sp, #40	; 0x28
 801d294:	af02      	add	r7, sp, #8
 801d296:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d29c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d29e:	2105      	movs	r1, #5
 801d2a0:	69b8      	ldr	r0, [r7, #24]
 801d2a2:	f000 fa7d 	bl	801d7a0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d2a6:	f107 030c 	add.w	r3, r7, #12
 801d2aa:	2203      	movs	r2, #3
 801d2ac:	69b9      	ldr	r1, [r7, #24]
 801d2ae:	6878      	ldr	r0, [r7, #4]
 801d2b0:	f000 ff40 	bl	801e134 <dhcp_create_msg>
 801d2b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d2b6:	697b      	ldr	r3, [r7, #20]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d04e      	beq.n	801d35a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d2bc:	697b      	ldr	r3, [r7, #20]
 801d2be:	685b      	ldr	r3, [r3, #4]
 801d2c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d2c2:	89b8      	ldrh	r0, [r7, #12]
 801d2c4:	693b      	ldr	r3, [r7, #16]
 801d2c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d2ca:	2302      	movs	r3, #2
 801d2cc:	2239      	movs	r2, #57	; 0x39
 801d2ce:	f000 fa81 	bl	801d7d4 <dhcp_option>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d2d6:	89b8      	ldrh	r0, [r7, #12]
 801d2d8:	693b      	ldr	r3, [r7, #16]
 801d2da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d2e2:	461a      	mov	r2, r3
 801d2e4:	f000 fad0 	bl	801d888 <dhcp_option_short>
 801d2e8:	4603      	mov	r3, r0
 801d2ea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d2ec:	89b8      	ldrh	r0, [r7, #12]
 801d2ee:	693b      	ldr	r3, [r7, #16]
 801d2f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d2f4:	2304      	movs	r3, #4
 801d2f6:	2237      	movs	r2, #55	; 0x37
 801d2f8:	f000 fa6c 	bl	801d7d4 <dhcp_option>
 801d2fc:	4603      	mov	r3, r0
 801d2fe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d300:	2300      	movs	r3, #0
 801d302:	77bb      	strb	r3, [r7, #30]
 801d304:	e00e      	b.n	801d324 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d306:	89b8      	ldrh	r0, [r7, #12]
 801d308:	693b      	ldr	r3, [r7, #16]
 801d30a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d30e:	7fbb      	ldrb	r3, [r7, #30]
 801d310:	4a2a      	ldr	r2, [pc, #168]	; (801d3bc <dhcp_renew+0x12c>)
 801d312:	5cd3      	ldrb	r3, [r2, r3]
 801d314:	461a      	mov	r2, r3
 801d316:	f000 fa91 	bl	801d83c <dhcp_option_byte>
 801d31a:	4603      	mov	r3, r0
 801d31c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d31e:	7fbb      	ldrb	r3, [r7, #30]
 801d320:	3301      	adds	r3, #1
 801d322:	77bb      	strb	r3, [r7, #30]
 801d324:	7fbb      	ldrb	r3, [r7, #30]
 801d326:	2b03      	cmp	r3, #3
 801d328:	d9ed      	bls.n	801d306 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d32a:	89b8      	ldrh	r0, [r7, #12]
 801d32c:	693b      	ldr	r3, [r7, #16]
 801d32e:	33f0      	adds	r3, #240	; 0xf0
 801d330:	697a      	ldr	r2, [r7, #20]
 801d332:	4619      	mov	r1, r3
 801d334:	f000 ffd4 	bl	801e2e0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d338:	4b21      	ldr	r3, [pc, #132]	; (801d3c0 <dhcp_renew+0x130>)
 801d33a:	6818      	ldr	r0, [r3, #0]
 801d33c:	69bb      	ldr	r3, [r7, #24]
 801d33e:	f103 0218 	add.w	r2, r3, #24
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	9300      	str	r3, [sp, #0]
 801d346:	2343      	movs	r3, #67	; 0x43
 801d348:	6979      	ldr	r1, [r7, #20]
 801d34a:	f7fe fdff 	bl	801bf4c <udp_sendto_if>
 801d34e:	4603      	mov	r3, r0
 801d350:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d352:	6978      	ldr	r0, [r7, #20]
 801d354:	f7f7 fc02 	bl	8014b5c <pbuf_free>
 801d358:	e001      	b.n	801d35e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d35a:	23ff      	movs	r3, #255	; 0xff
 801d35c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d35e:	69bb      	ldr	r3, [r7, #24]
 801d360:	799b      	ldrb	r3, [r3, #6]
 801d362:	2bff      	cmp	r3, #255	; 0xff
 801d364:	d005      	beq.n	801d372 <dhcp_renew+0xe2>
    dhcp->tries++;
 801d366:	69bb      	ldr	r3, [r7, #24]
 801d368:	799b      	ldrb	r3, [r3, #6]
 801d36a:	3301      	adds	r3, #1
 801d36c:	b2da      	uxtb	r2, r3
 801d36e:	69bb      	ldr	r3, [r7, #24]
 801d370:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d372:	69bb      	ldr	r3, [r7, #24]
 801d374:	799b      	ldrb	r3, [r3, #6]
 801d376:	2b09      	cmp	r3, #9
 801d378:	d80a      	bhi.n	801d390 <dhcp_renew+0x100>
 801d37a:	69bb      	ldr	r3, [r7, #24]
 801d37c:	799b      	ldrb	r3, [r3, #6]
 801d37e:	b29b      	uxth	r3, r3
 801d380:	461a      	mov	r2, r3
 801d382:	0152      	lsls	r2, r2, #5
 801d384:	1ad2      	subs	r2, r2, r3
 801d386:	0092      	lsls	r2, r2, #2
 801d388:	4413      	add	r3, r2
 801d38a:	011b      	lsls	r3, r3, #4
 801d38c:	b29b      	uxth	r3, r3
 801d38e:	e001      	b.n	801d394 <dhcp_renew+0x104>
 801d390:	f644 6320 	movw	r3, #20000	; 0x4e20
 801d394:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d396:	89fb      	ldrh	r3, [r7, #14]
 801d398:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d39c:	4a09      	ldr	r2, [pc, #36]	; (801d3c4 <dhcp_renew+0x134>)
 801d39e:	fb82 1203 	smull	r1, r2, r2, r3
 801d3a2:	1152      	asrs	r2, r2, #5
 801d3a4:	17db      	asrs	r3, r3, #31
 801d3a6:	1ad3      	subs	r3, r2, r3
 801d3a8:	b29a      	uxth	r2, r3
 801d3aa:	69bb      	ldr	r3, [r7, #24]
 801d3ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d3ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	3720      	adds	r7, #32
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd80      	pop	{r7, pc}
 801d3ba:	bf00      	nop
 801d3bc:	20000070 	.word	0x20000070
 801d3c0:	200143c4 	.word	0x200143c4
 801d3c4:	10624dd3 	.word	0x10624dd3

0801d3c8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d3c8:	b580      	push	{r7, lr}
 801d3ca:	b08a      	sub	sp, #40	; 0x28
 801d3cc:	af02      	add	r7, sp, #8
 801d3ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3d4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d3d6:	2104      	movs	r1, #4
 801d3d8:	69b8      	ldr	r0, [r7, #24]
 801d3da:	f000 f9e1 	bl	801d7a0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d3de:	f107 030c 	add.w	r3, r7, #12
 801d3e2:	2203      	movs	r2, #3
 801d3e4:	69b9      	ldr	r1, [r7, #24]
 801d3e6:	6878      	ldr	r0, [r7, #4]
 801d3e8:	f000 fea4 	bl	801e134 <dhcp_create_msg>
 801d3ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d3ee:	697b      	ldr	r3, [r7, #20]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d04c      	beq.n	801d48e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d3f4:	697b      	ldr	r3, [r7, #20]
 801d3f6:	685b      	ldr	r3, [r3, #4]
 801d3f8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d3fa:	89b8      	ldrh	r0, [r7, #12]
 801d3fc:	693b      	ldr	r3, [r7, #16]
 801d3fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d402:	2302      	movs	r3, #2
 801d404:	2239      	movs	r2, #57	; 0x39
 801d406:	f000 f9e5 	bl	801d7d4 <dhcp_option>
 801d40a:	4603      	mov	r3, r0
 801d40c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d40e:	89b8      	ldrh	r0, [r7, #12]
 801d410:	693b      	ldr	r3, [r7, #16]
 801d412:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d41a:	461a      	mov	r2, r3
 801d41c:	f000 fa34 	bl	801d888 <dhcp_option_short>
 801d420:	4603      	mov	r3, r0
 801d422:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d424:	89b8      	ldrh	r0, [r7, #12]
 801d426:	693b      	ldr	r3, [r7, #16]
 801d428:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d42c:	2304      	movs	r3, #4
 801d42e:	2237      	movs	r2, #55	; 0x37
 801d430:	f000 f9d0 	bl	801d7d4 <dhcp_option>
 801d434:	4603      	mov	r3, r0
 801d436:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d438:	2300      	movs	r3, #0
 801d43a:	77bb      	strb	r3, [r7, #30]
 801d43c:	e00e      	b.n	801d45c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d43e:	89b8      	ldrh	r0, [r7, #12]
 801d440:	693b      	ldr	r3, [r7, #16]
 801d442:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d446:	7fbb      	ldrb	r3, [r7, #30]
 801d448:	4a29      	ldr	r2, [pc, #164]	; (801d4f0 <dhcp_rebind+0x128>)
 801d44a:	5cd3      	ldrb	r3, [r2, r3]
 801d44c:	461a      	mov	r2, r3
 801d44e:	f000 f9f5 	bl	801d83c <dhcp_option_byte>
 801d452:	4603      	mov	r3, r0
 801d454:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d456:	7fbb      	ldrb	r3, [r7, #30]
 801d458:	3301      	adds	r3, #1
 801d45a:	77bb      	strb	r3, [r7, #30]
 801d45c:	7fbb      	ldrb	r3, [r7, #30]
 801d45e:	2b03      	cmp	r3, #3
 801d460:	d9ed      	bls.n	801d43e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d462:	89b8      	ldrh	r0, [r7, #12]
 801d464:	693b      	ldr	r3, [r7, #16]
 801d466:	33f0      	adds	r3, #240	; 0xf0
 801d468:	697a      	ldr	r2, [r7, #20]
 801d46a:	4619      	mov	r1, r3
 801d46c:	f000 ff38 	bl	801e2e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d470:	4b20      	ldr	r3, [pc, #128]	; (801d4f4 <dhcp_rebind+0x12c>)
 801d472:	6818      	ldr	r0, [r3, #0]
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	9300      	str	r3, [sp, #0]
 801d478:	2343      	movs	r3, #67	; 0x43
 801d47a:	4a1f      	ldr	r2, [pc, #124]	; (801d4f8 <dhcp_rebind+0x130>)
 801d47c:	6979      	ldr	r1, [r7, #20]
 801d47e:	f7fe fd65 	bl	801bf4c <udp_sendto_if>
 801d482:	4603      	mov	r3, r0
 801d484:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d486:	6978      	ldr	r0, [r7, #20]
 801d488:	f7f7 fb68 	bl	8014b5c <pbuf_free>
 801d48c:	e001      	b.n	801d492 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d48e:	23ff      	movs	r3, #255	; 0xff
 801d490:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d492:	69bb      	ldr	r3, [r7, #24]
 801d494:	799b      	ldrb	r3, [r3, #6]
 801d496:	2bff      	cmp	r3, #255	; 0xff
 801d498:	d005      	beq.n	801d4a6 <dhcp_rebind+0xde>
    dhcp->tries++;
 801d49a:	69bb      	ldr	r3, [r7, #24]
 801d49c:	799b      	ldrb	r3, [r3, #6]
 801d49e:	3301      	adds	r3, #1
 801d4a0:	b2da      	uxtb	r2, r3
 801d4a2:	69bb      	ldr	r3, [r7, #24]
 801d4a4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d4a6:	69bb      	ldr	r3, [r7, #24]
 801d4a8:	799b      	ldrb	r3, [r3, #6]
 801d4aa:	2b09      	cmp	r3, #9
 801d4ac:	d80a      	bhi.n	801d4c4 <dhcp_rebind+0xfc>
 801d4ae:	69bb      	ldr	r3, [r7, #24]
 801d4b0:	799b      	ldrb	r3, [r3, #6]
 801d4b2:	b29b      	uxth	r3, r3
 801d4b4:	461a      	mov	r2, r3
 801d4b6:	0152      	lsls	r2, r2, #5
 801d4b8:	1ad2      	subs	r2, r2, r3
 801d4ba:	0092      	lsls	r2, r2, #2
 801d4bc:	4413      	add	r3, r2
 801d4be:	00db      	lsls	r3, r3, #3
 801d4c0:	b29b      	uxth	r3, r3
 801d4c2:	e001      	b.n	801d4c8 <dhcp_rebind+0x100>
 801d4c4:	f242 7310 	movw	r3, #10000	; 0x2710
 801d4c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d4ca:	89fb      	ldrh	r3, [r7, #14]
 801d4cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d4d0:	4a0a      	ldr	r2, [pc, #40]	; (801d4fc <dhcp_rebind+0x134>)
 801d4d2:	fb82 1203 	smull	r1, r2, r2, r3
 801d4d6:	1152      	asrs	r2, r2, #5
 801d4d8:	17db      	asrs	r3, r3, #31
 801d4da:	1ad3      	subs	r3, r2, r3
 801d4dc:	b29a      	uxth	r2, r3
 801d4de:	69bb      	ldr	r3, [r7, #24]
 801d4e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d4e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	3720      	adds	r7, #32
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	bd80      	pop	{r7, pc}
 801d4ee:	bf00      	nop
 801d4f0:	20000070 	.word	0x20000070
 801d4f4:	200143c4 	.word	0x200143c4
 801d4f8:	08029aec 	.word	0x08029aec
 801d4fc:	10624dd3 	.word	0x10624dd3

0801d500 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d500:	b5b0      	push	{r4, r5, r7, lr}
 801d502:	b08a      	sub	sp, #40	; 0x28
 801d504:	af02      	add	r7, sp, #8
 801d506:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d50c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d50e:	2103      	movs	r1, #3
 801d510:	69b8      	ldr	r0, [r7, #24]
 801d512:	f000 f945 	bl	801d7a0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d516:	f107 030c 	add.w	r3, r7, #12
 801d51a:	2203      	movs	r2, #3
 801d51c:	69b9      	ldr	r1, [r7, #24]
 801d51e:	6878      	ldr	r0, [r7, #4]
 801d520:	f000 fe08 	bl	801e134 <dhcp_create_msg>
 801d524:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d526:	697b      	ldr	r3, [r7, #20]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d066      	beq.n	801d5fa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d52c:	697b      	ldr	r3, [r7, #20]
 801d52e:	685b      	ldr	r3, [r3, #4]
 801d530:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d532:	89b8      	ldrh	r0, [r7, #12]
 801d534:	693b      	ldr	r3, [r7, #16]
 801d536:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d53a:	2302      	movs	r3, #2
 801d53c:	2239      	movs	r2, #57	; 0x39
 801d53e:	f000 f949 	bl	801d7d4 <dhcp_option>
 801d542:	4603      	mov	r3, r0
 801d544:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d546:	89b8      	ldrh	r0, [r7, #12]
 801d548:	693b      	ldr	r3, [r7, #16]
 801d54a:	33f0      	adds	r3, #240	; 0xf0
 801d54c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d550:	4619      	mov	r1, r3
 801d552:	f000 f999 	bl	801d888 <dhcp_option_short>
 801d556:	4603      	mov	r3, r0
 801d558:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d55a:	89b8      	ldrh	r0, [r7, #12]
 801d55c:	693b      	ldr	r3, [r7, #16]
 801d55e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d562:	2304      	movs	r3, #4
 801d564:	2232      	movs	r2, #50	; 0x32
 801d566:	f000 f935 	bl	801d7d4 <dhcp_option>
 801d56a:	4603      	mov	r3, r0
 801d56c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d56e:	89bc      	ldrh	r4, [r7, #12]
 801d570:	693b      	ldr	r3, [r7, #16]
 801d572:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d576:	69bb      	ldr	r3, [r7, #24]
 801d578:	69db      	ldr	r3, [r3, #28]
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7f4 ff43 	bl	8012406 <lwip_htonl>
 801d580:	4603      	mov	r3, r0
 801d582:	461a      	mov	r2, r3
 801d584:	4629      	mov	r1, r5
 801d586:	4620      	mov	r0, r4
 801d588:	f000 f9b0 	bl	801d8ec <dhcp_option_long>
 801d58c:	4603      	mov	r3, r0
 801d58e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d590:	89b8      	ldrh	r0, [r7, #12]
 801d592:	693b      	ldr	r3, [r7, #16]
 801d594:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d598:	2304      	movs	r3, #4
 801d59a:	2237      	movs	r2, #55	; 0x37
 801d59c:	f000 f91a 	bl	801d7d4 <dhcp_option>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	77bb      	strb	r3, [r7, #30]
 801d5a8:	e00e      	b.n	801d5c8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d5aa:	89b8      	ldrh	r0, [r7, #12]
 801d5ac:	693b      	ldr	r3, [r7, #16]
 801d5ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d5b2:	7fbb      	ldrb	r3, [r7, #30]
 801d5b4:	4a29      	ldr	r2, [pc, #164]	; (801d65c <dhcp_reboot+0x15c>)
 801d5b6:	5cd3      	ldrb	r3, [r2, r3]
 801d5b8:	461a      	mov	r2, r3
 801d5ba:	f000 f93f 	bl	801d83c <dhcp_option_byte>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d5c2:	7fbb      	ldrb	r3, [r7, #30]
 801d5c4:	3301      	adds	r3, #1
 801d5c6:	77bb      	strb	r3, [r7, #30]
 801d5c8:	7fbb      	ldrb	r3, [r7, #30]
 801d5ca:	2b03      	cmp	r3, #3
 801d5cc:	d9ed      	bls.n	801d5aa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d5ce:	89b8      	ldrh	r0, [r7, #12]
 801d5d0:	693b      	ldr	r3, [r7, #16]
 801d5d2:	33f0      	adds	r3, #240	; 0xf0
 801d5d4:	697a      	ldr	r2, [r7, #20]
 801d5d6:	4619      	mov	r1, r3
 801d5d8:	f000 fe82 	bl	801e2e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d5dc:	4b20      	ldr	r3, [pc, #128]	; (801d660 <dhcp_reboot+0x160>)
 801d5de:	6818      	ldr	r0, [r3, #0]
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	9300      	str	r3, [sp, #0]
 801d5e4:	2343      	movs	r3, #67	; 0x43
 801d5e6:	4a1f      	ldr	r2, [pc, #124]	; (801d664 <dhcp_reboot+0x164>)
 801d5e8:	6979      	ldr	r1, [r7, #20]
 801d5ea:	f7fe fcaf 	bl	801bf4c <udp_sendto_if>
 801d5ee:	4603      	mov	r3, r0
 801d5f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d5f2:	6978      	ldr	r0, [r7, #20]
 801d5f4:	f7f7 fab2 	bl	8014b5c <pbuf_free>
 801d5f8:	e001      	b.n	801d5fe <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d5fa:	23ff      	movs	r3, #255	; 0xff
 801d5fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d5fe:	69bb      	ldr	r3, [r7, #24]
 801d600:	799b      	ldrb	r3, [r3, #6]
 801d602:	2bff      	cmp	r3, #255	; 0xff
 801d604:	d005      	beq.n	801d612 <dhcp_reboot+0x112>
    dhcp->tries++;
 801d606:	69bb      	ldr	r3, [r7, #24]
 801d608:	799b      	ldrb	r3, [r3, #6]
 801d60a:	3301      	adds	r3, #1
 801d60c:	b2da      	uxtb	r2, r3
 801d60e:	69bb      	ldr	r3, [r7, #24]
 801d610:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d612:	69bb      	ldr	r3, [r7, #24]
 801d614:	799b      	ldrb	r3, [r3, #6]
 801d616:	2b09      	cmp	r3, #9
 801d618:	d80a      	bhi.n	801d630 <dhcp_reboot+0x130>
 801d61a:	69bb      	ldr	r3, [r7, #24]
 801d61c:	799b      	ldrb	r3, [r3, #6]
 801d61e:	b29b      	uxth	r3, r3
 801d620:	461a      	mov	r2, r3
 801d622:	0152      	lsls	r2, r2, #5
 801d624:	1ad2      	subs	r2, r2, r3
 801d626:	0092      	lsls	r2, r2, #2
 801d628:	4413      	add	r3, r2
 801d62a:	00db      	lsls	r3, r3, #3
 801d62c:	b29b      	uxth	r3, r3
 801d62e:	e001      	b.n	801d634 <dhcp_reboot+0x134>
 801d630:	f242 7310 	movw	r3, #10000	; 0x2710
 801d634:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d636:	89fb      	ldrh	r3, [r7, #14]
 801d638:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d63c:	4a0a      	ldr	r2, [pc, #40]	; (801d668 <dhcp_reboot+0x168>)
 801d63e:	fb82 1203 	smull	r1, r2, r2, r3
 801d642:	1152      	asrs	r2, r2, #5
 801d644:	17db      	asrs	r3, r3, #31
 801d646:	1ad3      	subs	r3, r2, r3
 801d648:	b29a      	uxth	r2, r3
 801d64a:	69bb      	ldr	r3, [r7, #24]
 801d64c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d64e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d652:	4618      	mov	r0, r3
 801d654:	3720      	adds	r7, #32
 801d656:	46bd      	mov	sp, r7
 801d658:	bdb0      	pop	{r4, r5, r7, pc}
 801d65a:	bf00      	nop
 801d65c:	20000070 	.word	0x20000070
 801d660:	200143c4 	.word	0x200143c4
 801d664:	08029aec 	.word	0x08029aec
 801d668:	10624dd3 	.word	0x10624dd3

0801d66c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801d66c:	b5b0      	push	{r4, r5, r7, lr}
 801d66e:	b08a      	sub	sp, #40	; 0x28
 801d670:	af02      	add	r7, sp, #8
 801d672:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d678:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801d67a:	69fb      	ldr	r3, [r7, #28]
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	f000 8084 	beq.w	801d78a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801d682:	69fb      	ldr	r3, [r7, #28]
 801d684:	795b      	ldrb	r3, [r3, #5]
 801d686:	2b00      	cmp	r3, #0
 801d688:	f000 8081 	beq.w	801d78e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d68c:	69fb      	ldr	r3, [r7, #28]
 801d68e:	699b      	ldr	r3, [r3, #24]
 801d690:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d692:	69fb      	ldr	r3, [r7, #28]
 801d694:	2200      	movs	r2, #0
 801d696:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d698:	69fb      	ldr	r3, [r7, #28]
 801d69a:	2200      	movs	r2, #0
 801d69c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d69e:	69fb      	ldr	r3, [r7, #28]
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d6a4:	69fb      	ldr	r3, [r7, #28]
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d6aa:	69fb      	ldr	r3, [r7, #28]
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	631a      	str	r2, [r3, #48]	; 0x30
 801d6b0:	69fb      	ldr	r3, [r7, #28]
 801d6b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d6b4:	69fb      	ldr	r3, [r7, #28]
 801d6b6:	62da      	str	r2, [r3, #44]	; 0x2c
 801d6b8:	69fb      	ldr	r3, [r7, #28]
 801d6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d6bc:	69fb      	ldr	r3, [r7, #28]
 801d6be:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d6c0:	69fb      	ldr	r3, [r7, #28]
 801d6c2:	2200      	movs	r2, #0
 801d6c4:	829a      	strh	r2, [r3, #20]
 801d6c6:	69fb      	ldr	r3, [r7, #28]
 801d6c8:	8a9a      	ldrh	r2, [r3, #20]
 801d6ca:	69fb      	ldr	r3, [r7, #28]
 801d6cc:	825a      	strh	r2, [r3, #18]
 801d6ce:	69fb      	ldr	r3, [r7, #28]
 801d6d0:	8a5a      	ldrh	r2, [r3, #18]
 801d6d2:	69fb      	ldr	r3, [r7, #28]
 801d6d4:	821a      	strh	r2, [r3, #16]
 801d6d6:	69fb      	ldr	r3, [r7, #28]
 801d6d8:	8a1a      	ldrh	r2, [r3, #16]
 801d6da:	69fb      	ldr	r3, [r7, #28]
 801d6dc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801d6de:	6878      	ldr	r0, [r7, #4]
 801d6e0:	f000 fe2c 	bl	801e33c <dhcp_supplied_address>
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d03b      	beq.n	801d762 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d6ea:	f107 030e 	add.w	r3, r7, #14
 801d6ee:	2207      	movs	r2, #7
 801d6f0:	69f9      	ldr	r1, [r7, #28]
 801d6f2:	6878      	ldr	r0, [r7, #4]
 801d6f4:	f000 fd1e 	bl	801e134 <dhcp_create_msg>
 801d6f8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801d6fa:	69bb      	ldr	r3, [r7, #24]
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d030      	beq.n	801d762 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d700:	69bb      	ldr	r3, [r7, #24]
 801d702:	685b      	ldr	r3, [r3, #4]
 801d704:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d706:	89f8      	ldrh	r0, [r7, #14]
 801d708:	697b      	ldr	r3, [r7, #20]
 801d70a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d70e:	2304      	movs	r3, #4
 801d710:	2236      	movs	r2, #54	; 0x36
 801d712:	f000 f85f 	bl	801d7d4 <dhcp_option>
 801d716:	4603      	mov	r3, r0
 801d718:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d71a:	89fc      	ldrh	r4, [r7, #14]
 801d71c:	697b      	ldr	r3, [r7, #20]
 801d71e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d722:	693b      	ldr	r3, [r7, #16]
 801d724:	4618      	mov	r0, r3
 801d726:	f7f4 fe6e 	bl	8012406 <lwip_htonl>
 801d72a:	4603      	mov	r3, r0
 801d72c:	461a      	mov	r2, r3
 801d72e:	4629      	mov	r1, r5
 801d730:	4620      	mov	r0, r4
 801d732:	f000 f8db 	bl	801d8ec <dhcp_option_long>
 801d736:	4603      	mov	r3, r0
 801d738:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d73a:	89f8      	ldrh	r0, [r7, #14]
 801d73c:	697b      	ldr	r3, [r7, #20]
 801d73e:	33f0      	adds	r3, #240	; 0xf0
 801d740:	69ba      	ldr	r2, [r7, #24]
 801d742:	4619      	mov	r1, r3
 801d744:	f000 fdcc 	bl	801e2e0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d748:	4b13      	ldr	r3, [pc, #76]	; (801d798 <dhcp_release_and_stop+0x12c>)
 801d74a:	6818      	ldr	r0, [r3, #0]
 801d74c:	f107 0210 	add.w	r2, r7, #16
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	9300      	str	r3, [sp, #0]
 801d754:	2343      	movs	r3, #67	; 0x43
 801d756:	69b9      	ldr	r1, [r7, #24]
 801d758:	f7fe fbf8 	bl	801bf4c <udp_sendto_if>
      pbuf_free(p_out);
 801d75c:	69b8      	ldr	r0, [r7, #24]
 801d75e:	f7f7 f9fd 	bl	8014b5c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d762:	4b0e      	ldr	r3, [pc, #56]	; (801d79c <dhcp_release_and_stop+0x130>)
 801d764:	4a0d      	ldr	r2, [pc, #52]	; (801d79c <dhcp_release_and_stop+0x130>)
 801d766:	490d      	ldr	r1, [pc, #52]	; (801d79c <dhcp_release_and_stop+0x130>)
 801d768:	6878      	ldr	r0, [r7, #4]
 801d76a:	f7f6 fcb7 	bl	80140dc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d76e:	2100      	movs	r1, #0
 801d770:	69f8      	ldr	r0, [r7, #28]
 801d772:	f000 f815 	bl	801d7a0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801d776:	69fb      	ldr	r3, [r7, #28]
 801d778:	791b      	ldrb	r3, [r3, #4]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d008      	beq.n	801d790 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d77e:	f7fe ff65 	bl	801c64c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d782:	69fb      	ldr	r3, [r7, #28]
 801d784:	2200      	movs	r2, #0
 801d786:	711a      	strb	r2, [r3, #4]
 801d788:	e002      	b.n	801d790 <dhcp_release_and_stop+0x124>
    return;
 801d78a:	bf00      	nop
 801d78c:	e000      	b.n	801d790 <dhcp_release_and_stop+0x124>
    return;
 801d78e:	bf00      	nop
  }
}
 801d790:	3720      	adds	r7, #32
 801d792:	46bd      	mov	sp, r7
 801d794:	bdb0      	pop	{r4, r5, r7, pc}
 801d796:	bf00      	nop
 801d798:	200143c4 	.word	0x200143c4
 801d79c:	08029ae8 	.word	0x08029ae8

0801d7a0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d7a0:	b480      	push	{r7}
 801d7a2:	b083      	sub	sp, #12
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	6078      	str	r0, [r7, #4]
 801d7a8:	460b      	mov	r3, r1
 801d7aa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	795b      	ldrb	r3, [r3, #5]
 801d7b0:	78fa      	ldrb	r2, [r7, #3]
 801d7b2:	429a      	cmp	r2, r3
 801d7b4:	d008      	beq.n	801d7c8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	78fa      	ldrb	r2, [r7, #3]
 801d7ba:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	2200      	movs	r2, #0
 801d7c0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	2200      	movs	r2, #0
 801d7c6:	811a      	strh	r2, [r3, #8]
  }
}
 801d7c8:	bf00      	nop
 801d7ca:	370c      	adds	r7, #12
 801d7cc:	46bd      	mov	sp, r7
 801d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d2:	4770      	bx	lr

0801d7d4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801d7d4:	b580      	push	{r7, lr}
 801d7d6:	b082      	sub	sp, #8
 801d7d8:	af00      	add	r7, sp, #0
 801d7da:	6039      	str	r1, [r7, #0]
 801d7dc:	4611      	mov	r1, r2
 801d7de:	461a      	mov	r2, r3
 801d7e0:	4603      	mov	r3, r0
 801d7e2:	80fb      	strh	r3, [r7, #6]
 801d7e4:	460b      	mov	r3, r1
 801d7e6:	717b      	strb	r3, [r7, #5]
 801d7e8:	4613      	mov	r3, r2
 801d7ea:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d7ec:	88fa      	ldrh	r2, [r7, #6]
 801d7ee:	793b      	ldrb	r3, [r7, #4]
 801d7f0:	4413      	add	r3, r2
 801d7f2:	3302      	adds	r3, #2
 801d7f4:	2b44      	cmp	r3, #68	; 0x44
 801d7f6:	d906      	bls.n	801d806 <dhcp_option+0x32>
 801d7f8:	4b0d      	ldr	r3, [pc, #52]	; (801d830 <dhcp_option+0x5c>)
 801d7fa:	f240 529a 	movw	r2, #1434	; 0x59a
 801d7fe:	490d      	ldr	r1, [pc, #52]	; (801d834 <dhcp_option+0x60>)
 801d800:	480d      	ldr	r0, [pc, #52]	; (801d838 <dhcp_option+0x64>)
 801d802:	f004 fa53 	bl	8021cac <iprintf>
  options[options_out_len++] = option_type;
 801d806:	88fb      	ldrh	r3, [r7, #6]
 801d808:	1c5a      	adds	r2, r3, #1
 801d80a:	80fa      	strh	r2, [r7, #6]
 801d80c:	461a      	mov	r2, r3
 801d80e:	683b      	ldr	r3, [r7, #0]
 801d810:	4413      	add	r3, r2
 801d812:	797a      	ldrb	r2, [r7, #5]
 801d814:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801d816:	88fb      	ldrh	r3, [r7, #6]
 801d818:	1c5a      	adds	r2, r3, #1
 801d81a:	80fa      	strh	r2, [r7, #6]
 801d81c:	461a      	mov	r2, r3
 801d81e:	683b      	ldr	r3, [r7, #0]
 801d820:	4413      	add	r3, r2
 801d822:	793a      	ldrb	r2, [r7, #4]
 801d824:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d826:	88fb      	ldrh	r3, [r7, #6]
}
 801d828:	4618      	mov	r0, r3
 801d82a:	3708      	adds	r7, #8
 801d82c:	46bd      	mov	sp, r7
 801d82e:	bd80      	pop	{r7, pc}
 801d830:	08028d88 	.word	0x08028d88
 801d834:	08028f1c 	.word	0x08028f1c
 801d838:	08028de8 	.word	0x08028de8

0801d83c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801d83c:	b580      	push	{r7, lr}
 801d83e:	b082      	sub	sp, #8
 801d840:	af00      	add	r7, sp, #0
 801d842:	4603      	mov	r3, r0
 801d844:	6039      	str	r1, [r7, #0]
 801d846:	80fb      	strh	r3, [r7, #6]
 801d848:	4613      	mov	r3, r2
 801d84a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d84c:	88fb      	ldrh	r3, [r7, #6]
 801d84e:	2b43      	cmp	r3, #67	; 0x43
 801d850:	d906      	bls.n	801d860 <dhcp_option_byte+0x24>
 801d852:	4b0a      	ldr	r3, [pc, #40]	; (801d87c <dhcp_option_byte+0x40>)
 801d854:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d858:	4909      	ldr	r1, [pc, #36]	; (801d880 <dhcp_option_byte+0x44>)
 801d85a:	480a      	ldr	r0, [pc, #40]	; (801d884 <dhcp_option_byte+0x48>)
 801d85c:	f004 fa26 	bl	8021cac <iprintf>
  options[options_out_len++] = value;
 801d860:	88fb      	ldrh	r3, [r7, #6]
 801d862:	1c5a      	adds	r2, r3, #1
 801d864:	80fa      	strh	r2, [r7, #6]
 801d866:	461a      	mov	r2, r3
 801d868:	683b      	ldr	r3, [r7, #0]
 801d86a:	4413      	add	r3, r2
 801d86c:	797a      	ldrb	r2, [r7, #5]
 801d86e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d870:	88fb      	ldrh	r3, [r7, #6]
}
 801d872:	4618      	mov	r0, r3
 801d874:	3708      	adds	r7, #8
 801d876:	46bd      	mov	sp, r7
 801d878:	bd80      	pop	{r7, pc}
 801d87a:	bf00      	nop
 801d87c:	08028d88 	.word	0x08028d88
 801d880:	08028f60 	.word	0x08028f60
 801d884:	08028de8 	.word	0x08028de8

0801d888 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b082      	sub	sp, #8
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	4603      	mov	r3, r0
 801d890:	6039      	str	r1, [r7, #0]
 801d892:	80fb      	strh	r3, [r7, #6]
 801d894:	4613      	mov	r3, r2
 801d896:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d898:	88fb      	ldrh	r3, [r7, #6]
 801d89a:	3302      	adds	r3, #2
 801d89c:	2b44      	cmp	r3, #68	; 0x44
 801d89e:	d906      	bls.n	801d8ae <dhcp_option_short+0x26>
 801d8a0:	4b0f      	ldr	r3, [pc, #60]	; (801d8e0 <dhcp_option_short+0x58>)
 801d8a2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801d8a6:	490f      	ldr	r1, [pc, #60]	; (801d8e4 <dhcp_option_short+0x5c>)
 801d8a8:	480f      	ldr	r0, [pc, #60]	; (801d8e8 <dhcp_option_short+0x60>)
 801d8aa:	f004 f9ff 	bl	8021cac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d8ae:	88bb      	ldrh	r3, [r7, #4]
 801d8b0:	0a1b      	lsrs	r3, r3, #8
 801d8b2:	b29a      	uxth	r2, r3
 801d8b4:	88fb      	ldrh	r3, [r7, #6]
 801d8b6:	1c59      	adds	r1, r3, #1
 801d8b8:	80f9      	strh	r1, [r7, #6]
 801d8ba:	4619      	mov	r1, r3
 801d8bc:	683b      	ldr	r3, [r7, #0]
 801d8be:	440b      	add	r3, r1
 801d8c0:	b2d2      	uxtb	r2, r2
 801d8c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d8c4:	88fb      	ldrh	r3, [r7, #6]
 801d8c6:	1c5a      	adds	r2, r3, #1
 801d8c8:	80fa      	strh	r2, [r7, #6]
 801d8ca:	461a      	mov	r2, r3
 801d8cc:	683b      	ldr	r3, [r7, #0]
 801d8ce:	4413      	add	r3, r2
 801d8d0:	88ba      	ldrh	r2, [r7, #4]
 801d8d2:	b2d2      	uxtb	r2, r2
 801d8d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d8d6:	88fb      	ldrh	r3, [r7, #6]
}
 801d8d8:	4618      	mov	r0, r3
 801d8da:	3708      	adds	r7, #8
 801d8dc:	46bd      	mov	sp, r7
 801d8de:	bd80      	pop	{r7, pc}
 801d8e0:	08028d88 	.word	0x08028d88
 801d8e4:	08028f98 	.word	0x08028f98
 801d8e8:	08028de8 	.word	0x08028de8

0801d8ec <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	b084      	sub	sp, #16
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	60b9      	str	r1, [r7, #8]
 801d8f6:	607a      	str	r2, [r7, #4]
 801d8f8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d8fa:	89fb      	ldrh	r3, [r7, #14]
 801d8fc:	3304      	adds	r3, #4
 801d8fe:	2b44      	cmp	r3, #68	; 0x44
 801d900:	d906      	bls.n	801d910 <dhcp_option_long+0x24>
 801d902:	4b19      	ldr	r3, [pc, #100]	; (801d968 <dhcp_option_long+0x7c>)
 801d904:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801d908:	4918      	ldr	r1, [pc, #96]	; (801d96c <dhcp_option_long+0x80>)
 801d90a:	4819      	ldr	r0, [pc, #100]	; (801d970 <dhcp_option_long+0x84>)
 801d90c:	f004 f9ce 	bl	8021cac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	0e1a      	lsrs	r2, r3, #24
 801d914:	89fb      	ldrh	r3, [r7, #14]
 801d916:	1c59      	adds	r1, r3, #1
 801d918:	81f9      	strh	r1, [r7, #14]
 801d91a:	4619      	mov	r1, r3
 801d91c:	68bb      	ldr	r3, [r7, #8]
 801d91e:	440b      	add	r3, r1
 801d920:	b2d2      	uxtb	r2, r2
 801d922:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	0c1a      	lsrs	r2, r3, #16
 801d928:	89fb      	ldrh	r3, [r7, #14]
 801d92a:	1c59      	adds	r1, r3, #1
 801d92c:	81f9      	strh	r1, [r7, #14]
 801d92e:	4619      	mov	r1, r3
 801d930:	68bb      	ldr	r3, [r7, #8]
 801d932:	440b      	add	r3, r1
 801d934:	b2d2      	uxtb	r2, r2
 801d936:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	0a1a      	lsrs	r2, r3, #8
 801d93c:	89fb      	ldrh	r3, [r7, #14]
 801d93e:	1c59      	adds	r1, r3, #1
 801d940:	81f9      	strh	r1, [r7, #14]
 801d942:	4619      	mov	r1, r3
 801d944:	68bb      	ldr	r3, [r7, #8]
 801d946:	440b      	add	r3, r1
 801d948:	b2d2      	uxtb	r2, r2
 801d94a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d94c:	89fb      	ldrh	r3, [r7, #14]
 801d94e:	1c5a      	adds	r2, r3, #1
 801d950:	81fa      	strh	r2, [r7, #14]
 801d952:	461a      	mov	r2, r3
 801d954:	68bb      	ldr	r3, [r7, #8]
 801d956:	4413      	add	r3, r2
 801d958:	687a      	ldr	r2, [r7, #4]
 801d95a:	b2d2      	uxtb	r2, r2
 801d95c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d95e:	89fb      	ldrh	r3, [r7, #14]
}
 801d960:	4618      	mov	r0, r3
 801d962:	3710      	adds	r7, #16
 801d964:	46bd      	mov	sp, r7
 801d966:	bd80      	pop	{r7, pc}
 801d968:	08028d88 	.word	0x08028d88
 801d96c:	08028fd4 	.word	0x08028fd4
 801d970:	08028de8 	.word	0x08028de8

0801d974 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b092      	sub	sp, #72	; 0x48
 801d978:	af00      	add	r7, sp, #0
 801d97a:	6078      	str	r0, [r7, #4]
 801d97c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d97e:	2300      	movs	r3, #0
 801d980:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 801d982:	2300      	movs	r3, #0
 801d984:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d986:	220a      	movs	r2, #10
 801d988:	2100      	movs	r1, #0
 801d98a:	48bd      	ldr	r0, [pc, #756]	; (801dc80 <dhcp_parse_reply+0x30c>)
 801d98c:	f003 fc72 	bl	8021274 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	895b      	ldrh	r3, [r3, #10]
 801d994:	2b2b      	cmp	r3, #43	; 0x2b
 801d996:	d802      	bhi.n	801d99e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d998:	f06f 0301 	mvn.w	r3, #1
 801d99c:	e2fb      	b.n	801df96 <dhcp_parse_reply+0x622>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	685b      	ldr	r3, [r3, #4]
 801d9a2:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d9a4:	23f0      	movs	r3, #240	; 0xf0
 801d9a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	891b      	ldrh	r3, [r3, #8]
 801d9ac:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801d9b2:	e00c      	b.n	801d9ce <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801d9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9b6:	895b      	ldrh	r3, [r3, #10]
 801d9b8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801d9ba:	1ad3      	subs	r3, r2, r3
 801d9bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9c0:	895b      	ldrh	r3, [r3, #10]
 801d9c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d9c4:	1ad3      	subs	r3, r2, r3
 801d9c6:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801d9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801d9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d004      	beq.n	801d9de <dhcp_parse_reply+0x6a>
 801d9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9d6:	895b      	ldrh	r3, [r3, #10]
 801d9d8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801d9da:	429a      	cmp	r2, r3
 801d9dc:	d2ea      	bcs.n	801d9b4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801d9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d102      	bne.n	801d9ea <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801d9e4:	f06f 0301 	mvn.w	r3, #1
 801d9e8:	e2d5      	b.n	801df96 <dhcp_parse_reply+0x622>
  }
  offset = options_idx;
 801d9ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d9ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 801d9f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d9f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 801d9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9f6:	685b      	ldr	r3, [r3, #4]
 801d9f8:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d9fa:	e275      	b.n	801dee8 <dhcp_parse_reply+0x574>
    u8_t op = options[offset];
 801d9fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da02:	4413      	add	r3, r2
 801da04:	781b      	ldrb	r3, [r3, #0]
 801da06:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801da08:	2300      	movs	r3, #0
 801da0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 801da0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801da12:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 801da14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da18:	3302      	adds	r3, #2
 801da1a:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 801da1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801da1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da22:	429a      	cmp	r2, r3
 801da24:	d202      	bcs.n	801da2c <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801da26:	f06f 0301 	mvn.w	r3, #1
 801da2a:	e2b4      	b.n	801df96 <dhcp_parse_reply+0x622>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801da2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da30:	3301      	adds	r3, #1
 801da32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da34:	8952      	ldrh	r2, [r2, #10]
 801da36:	4293      	cmp	r3, r2
 801da38:	da08      	bge.n	801da4c <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801da3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da3e:	3301      	adds	r3, #1
 801da40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801da42:	4413      	add	r3, r2
 801da44:	781b      	ldrb	r3, [r3, #0]
 801da46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801da4a:	e00b      	b.n	801da64 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801da4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	2b00      	cmp	r3, #0
 801da52:	d004      	beq.n	801da5e <dhcp_parse_reply+0xea>
 801da54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	685b      	ldr	r3, [r3, #4]
 801da5a:	781b      	ldrb	r3, [r3, #0]
 801da5c:	e000      	b.n	801da60 <dhcp_parse_reply+0xec>
 801da5e:	2300      	movs	r3, #0
 801da60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801da64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801da68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 801da6c:	7efb      	ldrb	r3, [r7, #27]
 801da6e:	2b3b      	cmp	r3, #59	; 0x3b
 801da70:	f200 815a 	bhi.w	801dd28 <dhcp_parse_reply+0x3b4>
 801da74:	a201      	add	r2, pc, #4	; (adr r2, 801da7c <dhcp_parse_reply+0x108>)
 801da76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da7a:	bf00      	nop
 801da7c:	0801db6d 	.word	0x0801db6d
 801da80:	0801db7d 	.word	0x0801db7d
 801da84:	0801dd29 	.word	0x0801dd29
 801da88:	0801db9f 	.word	0x0801db9f
 801da8c:	0801dd29 	.word	0x0801dd29
 801da90:	0801dd29 	.word	0x0801dd29
 801da94:	0801dbcb 	.word	0x0801dbcb
 801da98:	0801dd29 	.word	0x0801dd29
 801da9c:	0801dd29 	.word	0x0801dd29
 801daa0:	0801dd29 	.word	0x0801dd29
 801daa4:	0801dd29 	.word	0x0801dd29
 801daa8:	0801dd29 	.word	0x0801dd29
 801daac:	0801dd29 	.word	0x0801dd29
 801dab0:	0801dd29 	.word	0x0801dd29
 801dab4:	0801dd29 	.word	0x0801dd29
 801dab8:	0801dd29 	.word	0x0801dd29
 801dabc:	0801dd29 	.word	0x0801dd29
 801dac0:	0801dd29 	.word	0x0801dd29
 801dac4:	0801dd29 	.word	0x0801dd29
 801dac8:	0801dd29 	.word	0x0801dd29
 801dacc:	0801dd29 	.word	0x0801dd29
 801dad0:	0801dd29 	.word	0x0801dd29
 801dad4:	0801dd29 	.word	0x0801dd29
 801dad8:	0801dd29 	.word	0x0801dd29
 801dadc:	0801dd29 	.word	0x0801dd29
 801dae0:	0801dd29 	.word	0x0801dd29
 801dae4:	0801dd29 	.word	0x0801dd29
 801dae8:	0801dd29 	.word	0x0801dd29
 801daec:	0801dd29 	.word	0x0801dd29
 801daf0:	0801dd29 	.word	0x0801dd29
 801daf4:	0801dd29 	.word	0x0801dd29
 801daf8:	0801dd29 	.word	0x0801dd29
 801dafc:	0801dd29 	.word	0x0801dd29
 801db00:	0801dd29 	.word	0x0801dd29
 801db04:	0801dd29 	.word	0x0801dd29
 801db08:	0801dd29 	.word	0x0801dd29
 801db0c:	0801dd29 	.word	0x0801dd29
 801db10:	0801dd29 	.word	0x0801dd29
 801db14:	0801dd29 	.word	0x0801dd29
 801db18:	0801dd29 	.word	0x0801dd29
 801db1c:	0801dd29 	.word	0x0801dd29
 801db20:	0801dd29 	.word	0x0801dd29
 801db24:	0801dd29 	.word	0x0801dd29
 801db28:	0801dd29 	.word	0x0801dd29
 801db2c:	0801dd29 	.word	0x0801dd29
 801db30:	0801dd29 	.word	0x0801dd29
 801db34:	0801dd29 	.word	0x0801dd29
 801db38:	0801dd29 	.word	0x0801dd29
 801db3c:	0801dd29 	.word	0x0801dd29
 801db40:	0801dd29 	.word	0x0801dd29
 801db44:	0801dd29 	.word	0x0801dd29
 801db48:	0801dc21 	.word	0x0801dc21
 801db4c:	0801dc43 	.word	0x0801dc43
 801db50:	0801dca1 	.word	0x0801dca1
 801db54:	0801dcc3 	.word	0x0801dcc3
 801db58:	0801dd29 	.word	0x0801dd29
 801db5c:	0801dd29 	.word	0x0801dd29
 801db60:	0801dd29 	.word	0x0801dd29
 801db64:	0801dce5 	.word	0x0801dce5
 801db68:	0801dd07 	.word	0x0801dd07
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801db6c:	2300      	movs	r3, #0
 801db6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801db72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801db76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801db7a:	e0d9      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801db7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801db80:	2b04      	cmp	r3, #4
 801db82:	d009      	beq.n	801db98 <dhcp_parse_reply+0x224>
 801db84:	4b3f      	ldr	r3, [pc, #252]	; (801dc84 <dhcp_parse_reply+0x310>)
 801db86:	f240 622e 	movw	r2, #1582	; 0x62e
 801db8a:	493f      	ldr	r1, [pc, #252]	; (801dc88 <dhcp_parse_reply+0x314>)
 801db8c:	483f      	ldr	r0, [pc, #252]	; (801dc8c <dhcp_parse_reply+0x318>)
 801db8e:	f004 f88d 	bl	8021cac <iprintf>
 801db92:	f06f 0305 	mvn.w	r3, #5
 801db96:	e1fe      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801db98:	2306      	movs	r3, #6
 801db9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801db9c:	e0c8      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801db9e:	2304      	movs	r3, #4
 801dba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801dba4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801dba8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dbac:	429a      	cmp	r2, r3
 801dbae:	d209      	bcs.n	801dbc4 <dhcp_parse_reply+0x250>
 801dbb0:	4b34      	ldr	r3, [pc, #208]	; (801dc84 <dhcp_parse_reply+0x310>)
 801dbb2:	f240 6233 	movw	r2, #1587	; 0x633
 801dbb6:	4936      	ldr	r1, [pc, #216]	; (801dc90 <dhcp_parse_reply+0x31c>)
 801dbb8:	4834      	ldr	r0, [pc, #208]	; (801dc8c <dhcp_parse_reply+0x318>)
 801dbba:	f004 f877 	bl	8021cac <iprintf>
 801dbbe:	f06f 0305 	mvn.w	r3, #5
 801dbc2:	e1e8      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801dbc4:	2307      	movs	r3, #7
 801dbc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dbc8:	e0b2      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801dbca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dbce:	f003 0303 	and.w	r3, r3, #3
 801dbd2:	b2db      	uxtb	r3, r3
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d009      	beq.n	801dbec <dhcp_parse_reply+0x278>
 801dbd8:	4b2a      	ldr	r3, [pc, #168]	; (801dc84 <dhcp_parse_reply+0x310>)
 801dbda:	f240 6239 	movw	r2, #1593	; 0x639
 801dbde:	492d      	ldr	r1, [pc, #180]	; (801dc94 <dhcp_parse_reply+0x320>)
 801dbe0:	482a      	ldr	r0, [pc, #168]	; (801dc8c <dhcp_parse_reply+0x318>)
 801dbe2:	f004 f863 	bl	8021cac <iprintf>
 801dbe6:	f06f 0305 	mvn.w	r3, #5
 801dbea:	e1d4      	b.n	801df96 <dhcp_parse_reply+0x622>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801dbec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dbf0:	2b08      	cmp	r3, #8
 801dbf2:	bf28      	it	cs
 801dbf4:	2308      	movcs	r3, #8
 801dbf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801dbfa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801dbfe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dc02:	429a      	cmp	r2, r3
 801dc04:	d209      	bcs.n	801dc1a <dhcp_parse_reply+0x2a6>
 801dc06:	4b1f      	ldr	r3, [pc, #124]	; (801dc84 <dhcp_parse_reply+0x310>)
 801dc08:	f240 623c 	movw	r2, #1596	; 0x63c
 801dc0c:	4920      	ldr	r1, [pc, #128]	; (801dc90 <dhcp_parse_reply+0x31c>)
 801dc0e:	481f      	ldr	r0, [pc, #124]	; (801dc8c <dhcp_parse_reply+0x318>)
 801dc10:	f004 f84c 	bl	8021cac <iprintf>
 801dc14:	f06f 0305 	mvn.w	r3, #5
 801dc18:	e1bd      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801dc1a:	2308      	movs	r3, #8
 801dc1c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dc1e:	e087      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dc20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dc24:	2b04      	cmp	r3, #4
 801dc26:	d009      	beq.n	801dc3c <dhcp_parse_reply+0x2c8>
 801dc28:	4b16      	ldr	r3, [pc, #88]	; (801dc84 <dhcp_parse_reply+0x310>)
 801dc2a:	f240 6241 	movw	r2, #1601	; 0x641
 801dc2e:	4916      	ldr	r1, [pc, #88]	; (801dc88 <dhcp_parse_reply+0x314>)
 801dc30:	4816      	ldr	r0, [pc, #88]	; (801dc8c <dhcp_parse_reply+0x318>)
 801dc32:	f004 f83b 	bl	8021cac <iprintf>
 801dc36:	f06f 0305 	mvn.w	r3, #5
 801dc3a:	e1ac      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801dc3c:	2303      	movs	r3, #3
 801dc3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dc40:	e076      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801dc42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dc46:	2b01      	cmp	r3, #1
 801dc48:	d009      	beq.n	801dc5e <dhcp_parse_reply+0x2ea>
 801dc4a:	4b0e      	ldr	r3, [pc, #56]	; (801dc84 <dhcp_parse_reply+0x310>)
 801dc4c:	f240 624f 	movw	r2, #1615	; 0x64f
 801dc50:	4911      	ldr	r1, [pc, #68]	; (801dc98 <dhcp_parse_reply+0x324>)
 801dc52:	480e      	ldr	r0, [pc, #56]	; (801dc8c <dhcp_parse_reply+0x318>)
 801dc54:	f004 f82a 	bl	8021cac <iprintf>
 801dc58:	f06f 0305 	mvn.w	r3, #5
 801dc5c:	e19b      	b.n	801df96 <dhcp_parse_reply+0x622>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801dc5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc60:	2bf0      	cmp	r3, #240	; 0xf0
 801dc62:	d009      	beq.n	801dc78 <dhcp_parse_reply+0x304>
 801dc64:	4b07      	ldr	r3, [pc, #28]	; (801dc84 <dhcp_parse_reply+0x310>)
 801dc66:	f240 6251 	movw	r2, #1617	; 0x651
 801dc6a:	490c      	ldr	r1, [pc, #48]	; (801dc9c <dhcp_parse_reply+0x328>)
 801dc6c:	4807      	ldr	r0, [pc, #28]	; (801dc8c <dhcp_parse_reply+0x318>)
 801dc6e:	f004 f81d 	bl	8021cac <iprintf>
 801dc72:	f06f 0305 	mvn.w	r3, #5
 801dc76:	e18e      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801dc78:	2300      	movs	r3, #0
 801dc7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dc7c:	e058      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
 801dc7e:	bf00      	nop
 801dc80:	2001b1b8 	.word	0x2001b1b8
 801dc84:	08028d88 	.word	0x08028d88
 801dc88:	08029010 	.word	0x08029010
 801dc8c:	08028de8 	.word	0x08028de8
 801dc90:	0802901c 	.word	0x0802901c
 801dc94:	08029030 	.word	0x08029030
 801dc98:	08029040 	.word	0x08029040
 801dc9c:	0802904c 	.word	0x0802904c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801dca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dca4:	2b01      	cmp	r3, #1
 801dca6:	d009      	beq.n	801dcbc <dhcp_parse_reply+0x348>
 801dca8:	4bab      	ldr	r3, [pc, #684]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dcaa:	f240 6255 	movw	r2, #1621	; 0x655
 801dcae:	49ab      	ldr	r1, [pc, #684]	; (801df5c <dhcp_parse_reply+0x5e8>)
 801dcb0:	48ab      	ldr	r0, [pc, #684]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801dcb2:	f003 fffb 	bl	8021cac <iprintf>
 801dcb6:	f06f 0305 	mvn.w	r3, #5
 801dcba:	e16c      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801dcbc:	2301      	movs	r3, #1
 801dcbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dcc0:	e036      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dcc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dcc6:	2b04      	cmp	r3, #4
 801dcc8:	d009      	beq.n	801dcde <dhcp_parse_reply+0x36a>
 801dcca:	4ba3      	ldr	r3, [pc, #652]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dccc:	f240 6259 	movw	r2, #1625	; 0x659
 801dcd0:	49a4      	ldr	r1, [pc, #656]	; (801df64 <dhcp_parse_reply+0x5f0>)
 801dcd2:	48a3      	ldr	r0, [pc, #652]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801dcd4:	f003 ffea 	bl	8021cac <iprintf>
 801dcd8:	f06f 0305 	mvn.w	r3, #5
 801dcdc:	e15b      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801dcde:	2302      	movs	r3, #2
 801dce0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dce2:	e025      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dce8:	2b04      	cmp	r3, #4
 801dcea:	d009      	beq.n	801dd00 <dhcp_parse_reply+0x38c>
 801dcec:	4b9a      	ldr	r3, [pc, #616]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dcee:	f240 625d 	movw	r2, #1629	; 0x65d
 801dcf2:	499c      	ldr	r1, [pc, #624]	; (801df64 <dhcp_parse_reply+0x5f0>)
 801dcf4:	489a      	ldr	r0, [pc, #616]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801dcf6:	f003 ffd9 	bl	8021cac <iprintf>
 801dcfa:	f06f 0305 	mvn.w	r3, #5
 801dcfe:	e14a      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T1;
 801dd00:	2304      	movs	r3, #4
 801dd02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dd04:	e014      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dd06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dd0a:	2b04      	cmp	r3, #4
 801dd0c:	d009      	beq.n	801dd22 <dhcp_parse_reply+0x3ae>
 801dd0e:	4b92      	ldr	r3, [pc, #584]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dd10:	f240 6261 	movw	r2, #1633	; 0x661
 801dd14:	4993      	ldr	r1, [pc, #588]	; (801df64 <dhcp_parse_reply+0x5f0>)
 801dd16:	4892      	ldr	r0, [pc, #584]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801dd18:	f003 ffc8 	bl	8021cac <iprintf>
 801dd1c:	f06f 0305 	mvn.w	r3, #5
 801dd20:	e139      	b.n	801df96 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T2;
 801dd22:	2305      	movs	r3, #5
 801dd24:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dd26:	e003      	b.n	801dd30 <dhcp_parse_reply+0x3bc>
      default:
        decode_len = 0;
 801dd28:	2300      	movs	r3, #0
 801dd2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801dd2e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801dd30:	7efb      	ldrb	r3, [r7, #27]
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d105      	bne.n	801dd42 <dhcp_parse_reply+0x3ce>
      offset++;
 801dd36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dd3a:	3301      	adds	r3, #1
 801dd3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801dd40:	e0a4      	b.n	801de8c <dhcp_parse_reply+0x518>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801dd42:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dd46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dd4a:	4413      	add	r3, r2
 801dd4c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801dd50:	4293      	cmp	r3, r2
 801dd52:	dd02      	ble.n	801dd5a <dhcp_parse_reply+0x3e6>
        /* overflow */
        return ERR_BUF;
 801dd54:	f06f 0301 	mvn.w	r3, #1
 801dd58:	e11d      	b.n	801df96 <dhcp_parse_reply+0x622>
      }
      offset = (u16_t)(offset + len + 2);
 801dd5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dd5e:	b29a      	uxth	r2, r3
 801dd60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dd64:	4413      	add	r3, r2
 801dd66:	b29b      	uxth	r3, r3
 801dd68:	3302      	adds	r3, #2
 801dd6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 801dd6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	f000 808a 	beq.w	801de8c <dhcp_parse_reply+0x518>
        u32_t value = 0;
 801dd78:	2300      	movs	r3, #0
 801dd7a:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	db02      	blt.n	801dd88 <dhcp_parse_reply+0x414>
 801dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd84:	2b09      	cmp	r3, #9
 801dd86:	dd06      	ble.n	801dd96 <dhcp_parse_reply+0x422>
 801dd88:	4b73      	ldr	r3, [pc, #460]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dd8a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801dd8e:	4976      	ldr	r1, [pc, #472]	; (801df68 <dhcp_parse_reply+0x5f4>)
 801dd90:	4873      	ldr	r0, [pc, #460]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801dd92:	f003 ff8b 	bl	8021cac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801dd96:	4a75      	ldr	r2, [pc, #468]	; (801df6c <dhcp_parse_reply+0x5f8>)
 801dd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd9a:	4413      	add	r3, r2
 801dd9c:	781b      	ldrb	r3, [r3, #0]
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	d174      	bne.n	801de8c <dhcp_parse_reply+0x518>
          copy_len = LWIP_MIN(decode_len, 4);
 801dda2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dda6:	2b04      	cmp	r3, #4
 801dda8:	bf28      	it	cs
 801ddaa:	2304      	movcs	r3, #4
 801ddac:	b2db      	uxtb	r3, r3
 801ddae:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801ddb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ddb2:	8b3a      	ldrh	r2, [r7, #24]
 801ddb4:	f107 010c 	add.w	r1, r7, #12
 801ddb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ddba:	f7f7 f8d5 	bl	8014f68 <pbuf_copy_partial>
 801ddbe:	4603      	mov	r3, r0
 801ddc0:	461a      	mov	r2, r3
 801ddc2:	8b3b      	ldrh	r3, [r7, #24]
 801ddc4:	4293      	cmp	r3, r2
 801ddc6:	d002      	beq.n	801ddce <dhcp_parse_reply+0x45a>
            return ERR_BUF;
 801ddc8:	f06f 0301 	mvn.w	r3, #1
 801ddcc:	e0e3      	b.n	801df96 <dhcp_parse_reply+0x622>
          }
          if (decode_len > 4) {
 801ddce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ddd2:	2b04      	cmp	r3, #4
 801ddd4:	d933      	bls.n	801de3e <dhcp_parse_reply+0x4ca>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801ddd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ddda:	f003 0303 	and.w	r3, r3, #3
 801ddde:	b2db      	uxtb	r3, r3
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d009      	beq.n	801ddf8 <dhcp_parse_reply+0x484>
 801dde4:	4b5c      	ldr	r3, [pc, #368]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dde6:	f240 6281 	movw	r2, #1665	; 0x681
 801ddea:	4961      	ldr	r1, [pc, #388]	; (801df70 <dhcp_parse_reply+0x5fc>)
 801ddec:	485c      	ldr	r0, [pc, #368]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801ddee:	f003 ff5d 	bl	8021cac <iprintf>
 801ddf2:	f06f 0305 	mvn.w	r3, #5
 801ddf6:	e0ce      	b.n	801df96 <dhcp_parse_reply+0x622>
            dhcp_got_option(dhcp, decode_idx);
 801ddf8:	4a5c      	ldr	r2, [pc, #368]	; (801df6c <dhcp_parse_reply+0x5f8>)
 801ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddfc:	4413      	add	r3, r2
 801ddfe:	2201      	movs	r2, #1
 801de00:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	4618      	mov	r0, r3
 801de06:	f7f4 fafe 	bl	8012406 <lwip_htonl>
 801de0a:	4602      	mov	r2, r0
 801de0c:	4959      	ldr	r1, [pc, #356]	; (801df74 <dhcp_parse_reply+0x600>)
 801de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801de14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801de18:	3b04      	subs	r3, #4
 801de1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 801de1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801de20:	3304      	adds	r3, #4
 801de22:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801de24:	8afa      	ldrh	r2, [r7, #22]
 801de26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801de28:	429a      	cmp	r2, r3
 801de2a:	d202      	bcs.n	801de32 <dhcp_parse_reply+0x4be>
              /* overflow */
              return ERR_BUF;
 801de2c:	f06f 0301 	mvn.w	r3, #1
 801de30:	e0b1      	b.n	801df96 <dhcp_parse_reply+0x622>
            }
            val_offset = next_val_offset;
 801de32:	8afb      	ldrh	r3, [r7, #22]
 801de34:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de38:	3301      	adds	r3, #1
 801de3a:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 801de3c:	e79e      	b.n	801dd7c <dhcp_parse_reply+0x408>
          } else if (decode_len == 4) {
 801de3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801de42:	2b04      	cmp	r3, #4
 801de44:	d106      	bne.n	801de54 <dhcp_parse_reply+0x4e0>
            value = lwip_ntohl(value);
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	4618      	mov	r0, r3
 801de4a:	f7f4 fadc 	bl	8012406 <lwip_htonl>
 801de4e:	4603      	mov	r3, r0
 801de50:	60fb      	str	r3, [r7, #12]
 801de52:	e011      	b.n	801de78 <dhcp_parse_reply+0x504>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801de54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801de58:	2b01      	cmp	r3, #1
 801de5a:	d009      	beq.n	801de70 <dhcp_parse_reply+0x4fc>
 801de5c:	4b3e      	ldr	r3, [pc, #248]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801de5e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801de62:	4945      	ldr	r1, [pc, #276]	; (801df78 <dhcp_parse_reply+0x604>)
 801de64:	483e      	ldr	r0, [pc, #248]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801de66:	f003 ff21 	bl	8021cac <iprintf>
 801de6a:	f06f 0305 	mvn.w	r3, #5
 801de6e:	e092      	b.n	801df96 <dhcp_parse_reply+0x622>
            value = ((u8_t *)&value)[0];
 801de70:	f107 030c 	add.w	r3, r7, #12
 801de74:	781b      	ldrb	r3, [r3, #0]
 801de76:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 801de78:	4a3c      	ldr	r2, [pc, #240]	; (801df6c <dhcp_parse_reply+0x5f8>)
 801de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de7c:	4413      	add	r3, r2
 801de7e:	2201      	movs	r2, #1
 801de80:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801de82:	68fa      	ldr	r2, [r7, #12]
 801de84:	493b      	ldr	r1, [pc, #236]	; (801df74 <dhcp_parse_reply+0x600>)
 801de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801de8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de8e:	895b      	ldrh	r3, [r3, #10]
 801de90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801de94:	429a      	cmp	r2, r3
 801de96:	d327      	bcc.n	801dee8 <dhcp_parse_reply+0x574>
      offset = (u16_t)(offset - q->len);
 801de98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de9a:	895b      	ldrh	r3, [r3, #10]
 801de9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dea0:	1ad3      	subs	r3, r2, r3
 801dea2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801dea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dea8:	895b      	ldrh	r3, [r3, #10]
 801deaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801deac:	1ad3      	subs	r3, r2, r3
 801deae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 801deb0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801deb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801deb6:	429a      	cmp	r2, r3
 801deb8:	d213      	bcs.n	801dee2 <dhcp_parse_reply+0x56e>
        q = q->next;
 801deba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801dec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d109      	bne.n	801deda <dhcp_parse_reply+0x566>
 801dec6:	4b24      	ldr	r3, [pc, #144]	; (801df58 <dhcp_parse_reply+0x5e4>)
 801dec8:	f240 629d 	movw	r2, #1693	; 0x69d
 801decc:	492b      	ldr	r1, [pc, #172]	; (801df7c <dhcp_parse_reply+0x608>)
 801dece:	4824      	ldr	r0, [pc, #144]	; (801df60 <dhcp_parse_reply+0x5ec>)
 801ded0:	f003 feec 	bl	8021cac <iprintf>
 801ded4:	f06f 0305 	mvn.w	r3, #5
 801ded8:	e05d      	b.n	801df96 <dhcp_parse_reply+0x622>
        options = (u8_t *)q->payload;
 801deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dedc:	685b      	ldr	r3, [r3, #4]
 801dede:	643b      	str	r3, [r7, #64]	; 0x40
 801dee0:	e002      	b.n	801dee8 <dhcp_parse_reply+0x574>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801dee2:	f06f 0301 	mvn.w	r3, #1
 801dee6:	e056      	b.n	801df96 <dhcp_parse_reply+0x622>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801dee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801deea:	2b00      	cmp	r3, #0
 801deec:	d00c      	beq.n	801df08 <dhcp_parse_reply+0x594>
 801deee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801def2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801def4:	429a      	cmp	r2, r3
 801def6:	d207      	bcs.n	801df08 <dhcp_parse_reply+0x594>
 801def8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801defc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801defe:	4413      	add	r3, r2
 801df00:	781b      	ldrb	r3, [r3, #0]
 801df02:	2bff      	cmp	r3, #255	; 0xff
 801df04:	f47f ad7a 	bne.w	801d9fc <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801df08:	4b18      	ldr	r3, [pc, #96]	; (801df6c <dhcp_parse_reply+0x5f8>)
 801df0a:	781b      	ldrb	r3, [r3, #0]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d018      	beq.n	801df42 <dhcp_parse_reply+0x5ce>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801df10:	4b18      	ldr	r3, [pc, #96]	; (801df74 <dhcp_parse_reply+0x600>)
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801df16:	4b15      	ldr	r3, [pc, #84]	; (801df6c <dhcp_parse_reply+0x5f8>)
 801df18:	2200      	movs	r2, #0
 801df1a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801df1c:	693b      	ldr	r3, [r7, #16]
 801df1e:	2b01      	cmp	r3, #1
 801df20:	d102      	bne.n	801df28 <dhcp_parse_reply+0x5b4>
      parse_file_as_options = 1;
 801df22:	2301      	movs	r3, #1
 801df24:	633b      	str	r3, [r7, #48]	; 0x30
 801df26:	e00c      	b.n	801df42 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801df28:	693b      	ldr	r3, [r7, #16]
 801df2a:	2b02      	cmp	r3, #2
 801df2c:	d102      	bne.n	801df34 <dhcp_parse_reply+0x5c0>
      parse_sname_as_options = 1;
 801df2e:	2301      	movs	r3, #1
 801df30:	62fb      	str	r3, [r7, #44]	; 0x2c
 801df32:	e006      	b.n	801df42 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801df34:	693b      	ldr	r3, [r7, #16]
 801df36:	2b03      	cmp	r3, #3
 801df38:	d103      	bne.n	801df42 <dhcp_parse_reply+0x5ce>
      parse_sname_as_options = 1;
 801df3a:	2301      	movs	r3, #1
 801df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 801df3e:	2301      	movs	r3, #1
 801df40:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df44:	2b00      	cmp	r3, #0
 801df46:	d01b      	beq.n	801df80 <dhcp_parse_reply+0x60c>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801df48:	2300      	movs	r3, #0
 801df4a:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 801df4c:	236c      	movs	r3, #108	; 0x6c
 801df4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801df50:	23ec      	movs	r3, #236	; 0xec
 801df52:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801df54:	e52b      	b.n	801d9ae <dhcp_parse_reply+0x3a>
 801df56:	bf00      	nop
 801df58:	08028d88 	.word	0x08028d88
 801df5c:	08029040 	.word	0x08029040
 801df60:	08028de8 	.word	0x08028de8
 801df64:	08029010 	.word	0x08029010
 801df68:	08029064 	.word	0x08029064
 801df6c:	2001b1b8 	.word	0x2001b1b8
 801df70:	08029078 	.word	0x08029078
 801df74:	2001b1c4 	.word	0x2001b1c4
 801df78:	08029090 	.word	0x08029090
 801df7c:	080290a4 	.word	0x080290a4
  } else if (parse_sname_as_options) {
 801df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df82:	2b00      	cmp	r3, #0
 801df84:	d006      	beq.n	801df94 <dhcp_parse_reply+0x620>
    parse_sname_as_options = 0;
 801df86:	2300      	movs	r3, #0
 801df88:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 801df8a:	232c      	movs	r3, #44	; 0x2c
 801df8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801df8e:	236c      	movs	r3, #108	; 0x6c
 801df90:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 801df92:	e50c      	b.n	801d9ae <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801df94:	2300      	movs	r3, #0
}
 801df96:	4618      	mov	r0, r3
 801df98:	3748      	adds	r7, #72	; 0x48
 801df9a:	46bd      	mov	sp, r7
 801df9c:	bd80      	pop	{r7, pc}
 801df9e:	bf00      	nop

0801dfa0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b08a      	sub	sp, #40	; 0x28
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	60f8      	str	r0, [r7, #12]
 801dfa8:	60b9      	str	r1, [r7, #8]
 801dfaa:	607a      	str	r2, [r7, #4]
 801dfac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801dfae:	4b5e      	ldr	r3, [pc, #376]	; (801e128 <dhcp_recv+0x188>)
 801dfb0:	685b      	ldr	r3, [r3, #4]
 801dfb2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dfb4:	69fb      	ldr	r3, [r7, #28]
 801dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfb8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	685b      	ldr	r3, [r3, #4]
 801dfbe:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801dfc0:	69bb      	ldr	r3, [r7, #24]
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	f000 809a 	beq.w	801e0fc <dhcp_recv+0x15c>
 801dfc8:	69bb      	ldr	r3, [r7, #24]
 801dfca:	791b      	ldrb	r3, [r3, #4]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	f000 8095 	beq.w	801e0fc <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	895b      	ldrh	r3, [r3, #10]
 801dfd6:	2b2b      	cmp	r3, #43	; 0x2b
 801dfd8:	f240 8092 	bls.w	801e100 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801dfdc:	697b      	ldr	r3, [r7, #20]
 801dfde:	781b      	ldrb	r3, [r3, #0]
 801dfe0:	2b02      	cmp	r3, #2
 801dfe2:	f040 808f 	bne.w	801e104 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	74fb      	strb	r3, [r7, #19]
 801dfea:	e00e      	b.n	801e00a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801dfec:	7cfb      	ldrb	r3, [r7, #19]
 801dfee:	69fa      	ldr	r2, [r7, #28]
 801dff0:	4413      	add	r3, r2
 801dff2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801dff6:	7cfb      	ldrb	r3, [r7, #19]
 801dff8:	6979      	ldr	r1, [r7, #20]
 801dffa:	440b      	add	r3, r1
 801dffc:	7f1b      	ldrb	r3, [r3, #28]
 801dffe:	429a      	cmp	r2, r3
 801e000:	f040 8082 	bne.w	801e108 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e004:	7cfb      	ldrb	r3, [r7, #19]
 801e006:	3301      	adds	r3, #1
 801e008:	74fb      	strb	r3, [r7, #19]
 801e00a:	69fb      	ldr	r3, [r7, #28]
 801e00c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e010:	7cfa      	ldrb	r2, [r7, #19]
 801e012:	429a      	cmp	r2, r3
 801e014:	d202      	bcs.n	801e01c <dhcp_recv+0x7c>
 801e016:	7cfb      	ldrb	r3, [r7, #19]
 801e018:	2b05      	cmp	r3, #5
 801e01a:	d9e7      	bls.n	801dfec <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801e01c:	697b      	ldr	r3, [r7, #20]
 801e01e:	685b      	ldr	r3, [r3, #4]
 801e020:	4618      	mov	r0, r3
 801e022:	f7f4 f9f0 	bl	8012406 <lwip_htonl>
 801e026:	4602      	mov	r2, r0
 801e028:	69bb      	ldr	r3, [r7, #24]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	429a      	cmp	r2, r3
 801e02e:	d16d      	bne.n	801e10c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801e030:	69b9      	ldr	r1, [r7, #24]
 801e032:	6878      	ldr	r0, [r7, #4]
 801e034:	f7ff fc9e 	bl	801d974 <dhcp_parse_reply>
 801e038:	4603      	mov	r3, r0
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d168      	bne.n	801e110 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801e03e:	4b3b      	ldr	r3, [pc, #236]	; (801e12c <dhcp_recv+0x18c>)
 801e040:	785b      	ldrb	r3, [r3, #1]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d066      	beq.n	801e114 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	685b      	ldr	r3, [r3, #4]
 801e04a:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801e04c:	4b38      	ldr	r3, [pc, #224]	; (801e130 <dhcp_recv+0x190>)
 801e04e:	685b      	ldr	r3, [r3, #4]
 801e050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801e054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e058:	2b05      	cmp	r3, #5
 801e05a:	d12a      	bne.n	801e0b2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801e05c:	69bb      	ldr	r3, [r7, #24]
 801e05e:	795b      	ldrb	r3, [r3, #5]
 801e060:	2b01      	cmp	r3, #1
 801e062:	d112      	bne.n	801e08a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 801e064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e066:	69f8      	ldr	r0, [r7, #28]
 801e068:	f7fe fdba 	bl	801cbe0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801e06c:	69fb      	ldr	r3, [r7, #28]
 801e06e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e072:	f003 0308 	and.w	r3, r3, #8
 801e076:	2b00      	cmp	r3, #0
 801e078:	d003      	beq.n	801e082 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801e07a:	69f8      	ldr	r0, [r7, #28]
 801e07c:	f7fe fb2a 	bl	801c6d4 <dhcp_check>
 801e080:	e04b      	b.n	801e11a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801e082:	69f8      	ldr	r0, [r7, #28]
 801e084:	f7ff f82a 	bl	801d0dc <dhcp_bind>
 801e088:	e047      	b.n	801e11a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e08a:	69bb      	ldr	r3, [r7, #24]
 801e08c:	795b      	ldrb	r3, [r3, #5]
 801e08e:	2b03      	cmp	r3, #3
 801e090:	d007      	beq.n	801e0a2 <dhcp_recv+0x102>
 801e092:	69bb      	ldr	r3, [r7, #24]
 801e094:	795b      	ldrb	r3, [r3, #5]
 801e096:	2b04      	cmp	r3, #4
 801e098:	d003      	beq.n	801e0a2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801e09a:	69bb      	ldr	r3, [r7, #24]
 801e09c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801e09e:	2b05      	cmp	r3, #5
 801e0a0:	d13b      	bne.n	801e11a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 801e0a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e0a4:	69f8      	ldr	r0, [r7, #28]
 801e0a6:	f7fe fd9b 	bl	801cbe0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801e0aa:	69f8      	ldr	r0, [r7, #28]
 801e0ac:	f7ff f816 	bl	801d0dc <dhcp_bind>
 801e0b0:	e033      	b.n	801e11a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801e0b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e0b6:	2b06      	cmp	r3, #6
 801e0b8:	d113      	bne.n	801e0e2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e0ba:	69bb      	ldr	r3, [r7, #24]
 801e0bc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801e0be:	2b03      	cmp	r3, #3
 801e0c0:	d00b      	beq.n	801e0da <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e0c2:	69bb      	ldr	r3, [r7, #24]
 801e0c4:	795b      	ldrb	r3, [r3, #5]
 801e0c6:	2b01      	cmp	r3, #1
 801e0c8:	d007      	beq.n	801e0da <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e0ca:	69bb      	ldr	r3, [r7, #24]
 801e0cc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801e0ce:	2b04      	cmp	r3, #4
 801e0d0:	d003      	beq.n	801e0da <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801e0d2:	69bb      	ldr	r3, [r7, #24]
 801e0d4:	795b      	ldrb	r3, [r3, #5]
 801e0d6:	2b05      	cmp	r3, #5
 801e0d8:	d103      	bne.n	801e0e2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801e0da:	69f8      	ldr	r0, [r7, #28]
 801e0dc:	f7fe fae0 	bl	801c6a0 <dhcp_handle_nak>
 801e0e0:	e01b      	b.n	801e11a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801e0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e0e6:	2b02      	cmp	r3, #2
 801e0e8:	d116      	bne.n	801e118 <dhcp_recv+0x178>
 801e0ea:	69bb      	ldr	r3, [r7, #24]
 801e0ec:	795b      	ldrb	r3, [r3, #5]
 801e0ee:	2b06      	cmp	r3, #6
 801e0f0:	d112      	bne.n	801e118 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801e0f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e0f4:	69f8      	ldr	r0, [r7, #28]
 801e0f6:	f7fe fb21 	bl	801c73c <dhcp_handle_offer>
 801e0fa:	e00e      	b.n	801e11a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801e0fc:	bf00      	nop
 801e0fe:	e00c      	b.n	801e11a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801e100:	bf00      	nop
 801e102:	e00a      	b.n	801e11a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801e104:	bf00      	nop
 801e106:	e008      	b.n	801e11a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 801e108:	bf00      	nop
 801e10a:	e006      	b.n	801e11a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801e10c:	bf00      	nop
 801e10e:	e004      	b.n	801e11a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801e110:	bf00      	nop
 801e112:	e002      	b.n	801e11a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801e114:	bf00      	nop
 801e116:	e000      	b.n	801e11a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 801e118:	bf00      	nop
  pbuf_free(p);
 801e11a:	6878      	ldr	r0, [r7, #4]
 801e11c:	f7f6 fd1e 	bl	8014b5c <pbuf_free>
}
 801e120:	bf00      	nop
 801e122:	3728      	adds	r7, #40	; 0x28
 801e124:	46bd      	mov	sp, r7
 801e126:	bd80      	pop	{r7, pc}
 801e128:	200177a8 	.word	0x200177a8
 801e12c:	2001b1b8 	.word	0x2001b1b8
 801e130:	2001b1c4 	.word	0x2001b1c4

0801e134 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b088      	sub	sp, #32
 801e138:	af00      	add	r7, sp, #0
 801e13a:	60f8      	str	r0, [r7, #12]
 801e13c:	60b9      	str	r1, [r7, #8]
 801e13e:	603b      	str	r3, [r7, #0]
 801e140:	4613      	mov	r3, r2
 801e142:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d108      	bne.n	801e15c <dhcp_create_msg+0x28>
 801e14a:	4b5f      	ldr	r3, [pc, #380]	; (801e2c8 <dhcp_create_msg+0x194>)
 801e14c:	f240 7269 	movw	r2, #1897	; 0x769
 801e150:	495e      	ldr	r1, [pc, #376]	; (801e2cc <dhcp_create_msg+0x198>)
 801e152:	485f      	ldr	r0, [pc, #380]	; (801e2d0 <dhcp_create_msg+0x19c>)
 801e154:	f003 fdaa 	bl	8021cac <iprintf>
 801e158:	2300      	movs	r3, #0
 801e15a:	e0b1      	b.n	801e2c0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801e15c:	68bb      	ldr	r3, [r7, #8]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d108      	bne.n	801e174 <dhcp_create_msg+0x40>
 801e162:	4b59      	ldr	r3, [pc, #356]	; (801e2c8 <dhcp_create_msg+0x194>)
 801e164:	f240 726a 	movw	r2, #1898	; 0x76a
 801e168:	495a      	ldr	r1, [pc, #360]	; (801e2d4 <dhcp_create_msg+0x1a0>)
 801e16a:	4859      	ldr	r0, [pc, #356]	; (801e2d0 <dhcp_create_msg+0x19c>)
 801e16c:	f003 fd9e 	bl	8021cac <iprintf>
 801e170:	2300      	movs	r3, #0
 801e172:	e0a5      	b.n	801e2c0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801e174:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e178:	f44f 719a 	mov.w	r1, #308	; 0x134
 801e17c:	2036      	movs	r0, #54	; 0x36
 801e17e:	f7f6 f9d7 	bl	8014530 <pbuf_alloc>
 801e182:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801e184:	69bb      	ldr	r3, [r7, #24]
 801e186:	2b00      	cmp	r3, #0
 801e188:	d101      	bne.n	801e18e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801e18a:	2300      	movs	r3, #0
 801e18c:	e098      	b.n	801e2c0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e18e:	69bb      	ldr	r3, [r7, #24]
 801e190:	895b      	ldrh	r3, [r3, #10]
 801e192:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801e196:	d206      	bcs.n	801e1a6 <dhcp_create_msg+0x72>
 801e198:	4b4b      	ldr	r3, [pc, #300]	; (801e2c8 <dhcp_create_msg+0x194>)
 801e19a:	f240 7271 	movw	r2, #1905	; 0x771
 801e19e:	494e      	ldr	r1, [pc, #312]	; (801e2d8 <dhcp_create_msg+0x1a4>)
 801e1a0:	484b      	ldr	r0, [pc, #300]	; (801e2d0 <dhcp_create_msg+0x19c>)
 801e1a2:	f003 fd83 	bl	8021cac <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e1a6:	79fb      	ldrb	r3, [r7, #7]
 801e1a8:	2b03      	cmp	r3, #3
 801e1aa:	d103      	bne.n	801e1b4 <dhcp_create_msg+0x80>
 801e1ac:	68bb      	ldr	r3, [r7, #8]
 801e1ae:	795b      	ldrb	r3, [r3, #5]
 801e1b0:	2b03      	cmp	r3, #3
 801e1b2:	d10d      	bne.n	801e1d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801e1b4:	68bb      	ldr	r3, [r7, #8]
 801e1b6:	799b      	ldrb	r3, [r3, #6]
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d105      	bne.n	801e1c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801e1bc:	f003 fe04 	bl	8021dc8 <rand>
 801e1c0:	4603      	mov	r3, r0
 801e1c2:	461a      	mov	r2, r3
 801e1c4:	4b45      	ldr	r3, [pc, #276]	; (801e2dc <dhcp_create_msg+0x1a8>)
 801e1c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801e1c8:	4b44      	ldr	r3, [pc, #272]	; (801e2dc <dhcp_create_msg+0x1a8>)
 801e1ca:	681a      	ldr	r2, [r3, #0]
 801e1cc:	68bb      	ldr	r3, [r7, #8]
 801e1ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801e1d0:	69bb      	ldr	r3, [r7, #24]
 801e1d2:	685b      	ldr	r3, [r3, #4]
 801e1d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801e1d6:	f44f 729a 	mov.w	r2, #308	; 0x134
 801e1da:	2100      	movs	r1, #0
 801e1dc:	6978      	ldr	r0, [r7, #20]
 801e1de:	f003 f849 	bl	8021274 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801e1e2:	697b      	ldr	r3, [r7, #20]
 801e1e4:	2201      	movs	r2, #1
 801e1e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801e1e8:	697b      	ldr	r3, [r7, #20]
 801e1ea:	2201      	movs	r2, #1
 801e1ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801e1f4:	697b      	ldr	r3, [r7, #20]
 801e1f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801e1f8:	68bb      	ldr	r3, [r7, #8]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	f7f4 f902 	bl	8012406 <lwip_htonl>
 801e202:	4602      	mov	r2, r0
 801e204:	697b      	ldr	r3, [r7, #20]
 801e206:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e208:	79fb      	ldrb	r3, [r7, #7]
 801e20a:	2b08      	cmp	r3, #8
 801e20c:	d010      	beq.n	801e230 <dhcp_create_msg+0xfc>
 801e20e:	79fb      	ldrb	r3, [r7, #7]
 801e210:	2b04      	cmp	r3, #4
 801e212:	d00d      	beq.n	801e230 <dhcp_create_msg+0xfc>
 801e214:	79fb      	ldrb	r3, [r7, #7]
 801e216:	2b07      	cmp	r3, #7
 801e218:	d00a      	beq.n	801e230 <dhcp_create_msg+0xfc>
 801e21a:	79fb      	ldrb	r3, [r7, #7]
 801e21c:	2b03      	cmp	r3, #3
 801e21e:	d10c      	bne.n	801e23a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e220:	68bb      	ldr	r3, [r7, #8]
 801e222:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801e224:	2b05      	cmp	r3, #5
 801e226:	d003      	beq.n	801e230 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e228:	68bb      	ldr	r3, [r7, #8]
 801e22a:	795b      	ldrb	r3, [r3, #5]
 801e22c:	2b04      	cmp	r3, #4
 801e22e:	d104      	bne.n	801e23a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	3304      	adds	r3, #4
 801e234:	681a      	ldr	r2, [r3, #0]
 801e236:	697b      	ldr	r3, [r7, #20]
 801e238:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e23a:	2300      	movs	r3, #0
 801e23c:	83fb      	strh	r3, [r7, #30]
 801e23e:	e00c      	b.n	801e25a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801e240:	8bfa      	ldrh	r2, [r7, #30]
 801e242:	8bfb      	ldrh	r3, [r7, #30]
 801e244:	68f9      	ldr	r1, [r7, #12]
 801e246:	440a      	add	r2, r1
 801e248:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801e24c:	697a      	ldr	r2, [r7, #20]
 801e24e:	4413      	add	r3, r2
 801e250:	460a      	mov	r2, r1
 801e252:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e254:	8bfb      	ldrh	r3, [r7, #30]
 801e256:	3301      	adds	r3, #1
 801e258:	83fb      	strh	r3, [r7, #30]
 801e25a:	8bfb      	ldrh	r3, [r7, #30]
 801e25c:	2b05      	cmp	r3, #5
 801e25e:	d9ef      	bls.n	801e240 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e260:	697b      	ldr	r3, [r7, #20]
 801e262:	2200      	movs	r2, #0
 801e264:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e268:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801e26c:	2200      	movs	r2, #0
 801e26e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801e272:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801e276:	2200      	movs	r2, #0
 801e278:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801e27c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801e280:	2200      	movs	r2, #0
 801e282:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e286:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e28a:	697b      	ldr	r3, [r7, #20]
 801e28c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e290:	2301      	movs	r3, #1
 801e292:	2235      	movs	r2, #53	; 0x35
 801e294:	2000      	movs	r0, #0
 801e296:	f7ff fa9d 	bl	801d7d4 <dhcp_option>
 801e29a:	4603      	mov	r3, r0
 801e29c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801e29e:	697b      	ldr	r3, [r7, #20]
 801e2a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e2a4:	79fa      	ldrb	r2, [r7, #7]
 801e2a6:	8a7b      	ldrh	r3, [r7, #18]
 801e2a8:	4618      	mov	r0, r3
 801e2aa:	f7ff fac7 	bl	801d83c <dhcp_option_byte>
 801e2ae:	4603      	mov	r3, r0
 801e2b0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d002      	beq.n	801e2be <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801e2b8:	683b      	ldr	r3, [r7, #0]
 801e2ba:	8a7a      	ldrh	r2, [r7, #18]
 801e2bc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801e2be:	69bb      	ldr	r3, [r7, #24]
}
 801e2c0:	4618      	mov	r0, r3
 801e2c2:	3720      	adds	r7, #32
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	bd80      	pop	{r7, pc}
 801e2c8:	08028d88 	.word	0x08028d88
 801e2cc:	080290b8 	.word	0x080290b8
 801e2d0:	08028de8 	.word	0x08028de8
 801e2d4:	080290d8 	.word	0x080290d8
 801e2d8:	080290f8 	.word	0x080290f8
 801e2dc:	200143cc 	.word	0x200143cc

0801e2e0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801e2e0:	b580      	push	{r7, lr}
 801e2e2:	b084      	sub	sp, #16
 801e2e4:	af00      	add	r7, sp, #0
 801e2e6:	4603      	mov	r3, r0
 801e2e8:	60b9      	str	r1, [r7, #8]
 801e2ea:	607a      	str	r2, [r7, #4]
 801e2ec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801e2ee:	89fb      	ldrh	r3, [r7, #14]
 801e2f0:	1c5a      	adds	r2, r3, #1
 801e2f2:	81fa      	strh	r2, [r7, #14]
 801e2f4:	461a      	mov	r2, r3
 801e2f6:	68bb      	ldr	r3, [r7, #8]
 801e2f8:	4413      	add	r3, r2
 801e2fa:	22ff      	movs	r2, #255	; 0xff
 801e2fc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e2fe:	e007      	b.n	801e310 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801e300:	89fb      	ldrh	r3, [r7, #14]
 801e302:	1c5a      	adds	r2, r3, #1
 801e304:	81fa      	strh	r2, [r7, #14]
 801e306:	461a      	mov	r2, r3
 801e308:	68bb      	ldr	r3, [r7, #8]
 801e30a:	4413      	add	r3, r2
 801e30c:	2200      	movs	r2, #0
 801e30e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e310:	89fb      	ldrh	r3, [r7, #14]
 801e312:	2b43      	cmp	r3, #67	; 0x43
 801e314:	d904      	bls.n	801e320 <dhcp_option_trailer+0x40>
 801e316:	89fb      	ldrh	r3, [r7, #14]
 801e318:	f003 0303 	and.w	r3, r3, #3
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d002      	beq.n	801e326 <dhcp_option_trailer+0x46>
 801e320:	89fb      	ldrh	r3, [r7, #14]
 801e322:	2b43      	cmp	r3, #67	; 0x43
 801e324:	d9ec      	bls.n	801e300 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e326:	89fb      	ldrh	r3, [r7, #14]
 801e328:	33f0      	adds	r3, #240	; 0xf0
 801e32a:	b29b      	uxth	r3, r3
 801e32c:	4619      	mov	r1, r3
 801e32e:	6878      	ldr	r0, [r7, #4]
 801e330:	f7f6 fa5c 	bl	80147ec <pbuf_realloc>
}
 801e334:	bf00      	nop
 801e336:	3710      	adds	r7, #16
 801e338:	46bd      	mov	sp, r7
 801e33a:	bd80      	pop	{r7, pc}

0801e33c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e33c:	b480      	push	{r7}
 801e33e:	b085      	sub	sp, #20
 801e340:	af00      	add	r7, sp, #0
 801e342:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	2b00      	cmp	r3, #0
 801e348:	d017      	beq.n	801e37a <dhcp_supplied_address+0x3e>
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d013      	beq.n	801e37a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e356:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	795b      	ldrb	r3, [r3, #5]
 801e35c:	2b0a      	cmp	r3, #10
 801e35e:	d007      	beq.n	801e370 <dhcp_supplied_address+0x34>
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	795b      	ldrb	r3, [r3, #5]
 801e364:	2b05      	cmp	r3, #5
 801e366:	d003      	beq.n	801e370 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e36c:	2b04      	cmp	r3, #4
 801e36e:	d101      	bne.n	801e374 <dhcp_supplied_address+0x38>
 801e370:	2301      	movs	r3, #1
 801e372:	e000      	b.n	801e376 <dhcp_supplied_address+0x3a>
 801e374:	2300      	movs	r3, #0
 801e376:	b2db      	uxtb	r3, r3
 801e378:	e000      	b.n	801e37c <dhcp_supplied_address+0x40>
  }
  return 0;
 801e37a:	2300      	movs	r3, #0
}
 801e37c:	4618      	mov	r0, r3
 801e37e:	3714      	adds	r7, #20
 801e380:	46bd      	mov	sp, r7
 801e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e386:	4770      	bx	lr

0801e388 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e388:	b580      	push	{r7, lr}
 801e38a:	b082      	sub	sp, #8
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e390:	492b      	ldr	r1, [pc, #172]	; (801e440 <etharp_free_entry+0xb8>)
 801e392:	687a      	ldr	r2, [r7, #4]
 801e394:	4613      	mov	r3, r2
 801e396:	005b      	lsls	r3, r3, #1
 801e398:	4413      	add	r3, r2
 801e39a:	00db      	lsls	r3, r3, #3
 801e39c:	440b      	add	r3, r1
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d013      	beq.n	801e3cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e3a4:	4926      	ldr	r1, [pc, #152]	; (801e440 <etharp_free_entry+0xb8>)
 801e3a6:	687a      	ldr	r2, [r7, #4]
 801e3a8:	4613      	mov	r3, r2
 801e3aa:	005b      	lsls	r3, r3, #1
 801e3ac:	4413      	add	r3, r2
 801e3ae:	00db      	lsls	r3, r3, #3
 801e3b0:	440b      	add	r3, r1
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	f7f6 fbd1 	bl	8014b5c <pbuf_free>
    arp_table[i].q = NULL;
 801e3ba:	4921      	ldr	r1, [pc, #132]	; (801e440 <etharp_free_entry+0xb8>)
 801e3bc:	687a      	ldr	r2, [r7, #4]
 801e3be:	4613      	mov	r3, r2
 801e3c0:	005b      	lsls	r3, r3, #1
 801e3c2:	4413      	add	r3, r2
 801e3c4:	00db      	lsls	r3, r3, #3
 801e3c6:	440b      	add	r3, r1
 801e3c8:	2200      	movs	r2, #0
 801e3ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e3cc:	491c      	ldr	r1, [pc, #112]	; (801e440 <etharp_free_entry+0xb8>)
 801e3ce:	687a      	ldr	r2, [r7, #4]
 801e3d0:	4613      	mov	r3, r2
 801e3d2:	005b      	lsls	r3, r3, #1
 801e3d4:	4413      	add	r3, r2
 801e3d6:	00db      	lsls	r3, r3, #3
 801e3d8:	440b      	add	r3, r1
 801e3da:	3314      	adds	r3, #20
 801e3dc:	2200      	movs	r2, #0
 801e3de:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801e3e0:	4917      	ldr	r1, [pc, #92]	; (801e440 <etharp_free_entry+0xb8>)
 801e3e2:	687a      	ldr	r2, [r7, #4]
 801e3e4:	4613      	mov	r3, r2
 801e3e6:	005b      	lsls	r3, r3, #1
 801e3e8:	4413      	add	r3, r2
 801e3ea:	00db      	lsls	r3, r3, #3
 801e3ec:	440b      	add	r3, r1
 801e3ee:	3312      	adds	r3, #18
 801e3f0:	2200      	movs	r2, #0
 801e3f2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801e3f4:	4912      	ldr	r1, [pc, #72]	; (801e440 <etharp_free_entry+0xb8>)
 801e3f6:	687a      	ldr	r2, [r7, #4]
 801e3f8:	4613      	mov	r3, r2
 801e3fa:	005b      	lsls	r3, r3, #1
 801e3fc:	4413      	add	r3, r2
 801e3fe:	00db      	lsls	r3, r3, #3
 801e400:	440b      	add	r3, r1
 801e402:	3308      	adds	r3, #8
 801e404:	2200      	movs	r2, #0
 801e406:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801e408:	490d      	ldr	r1, [pc, #52]	; (801e440 <etharp_free_entry+0xb8>)
 801e40a:	687a      	ldr	r2, [r7, #4]
 801e40c:	4613      	mov	r3, r2
 801e40e:	005b      	lsls	r3, r3, #1
 801e410:	4413      	add	r3, r2
 801e412:	00db      	lsls	r3, r3, #3
 801e414:	440b      	add	r3, r1
 801e416:	3304      	adds	r3, #4
 801e418:	2200      	movs	r2, #0
 801e41a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801e41c:	4908      	ldr	r1, [pc, #32]	; (801e440 <etharp_free_entry+0xb8>)
 801e41e:	687a      	ldr	r2, [r7, #4]
 801e420:	4613      	mov	r3, r2
 801e422:	005b      	lsls	r3, r3, #1
 801e424:	4413      	add	r3, r2
 801e426:	00db      	lsls	r3, r3, #3
 801e428:	440b      	add	r3, r1
 801e42a:	3308      	adds	r3, #8
 801e42c:	4a05      	ldr	r2, [pc, #20]	; (801e444 <etharp_free_entry+0xbc>)
 801e42e:	3304      	adds	r3, #4
 801e430:	6810      	ldr	r0, [r2, #0]
 801e432:	6018      	str	r0, [r3, #0]
 801e434:	8892      	ldrh	r2, [r2, #4]
 801e436:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801e438:	bf00      	nop
 801e43a:	3708      	adds	r7, #8
 801e43c:	46bd      	mov	sp, r7
 801e43e:	bd80      	pop	{r7, pc}
 801e440:	200143d0 	.word	0x200143d0
 801e444:	08029af8 	.word	0x08029af8

0801e448 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e448:	b580      	push	{r7, lr}
 801e44a:	b082      	sub	sp, #8
 801e44c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e44e:	2300      	movs	r3, #0
 801e450:	607b      	str	r3, [r7, #4]
 801e452:	e096      	b.n	801e582 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e454:	494f      	ldr	r1, [pc, #316]	; (801e594 <etharp_tmr+0x14c>)
 801e456:	687a      	ldr	r2, [r7, #4]
 801e458:	4613      	mov	r3, r2
 801e45a:	005b      	lsls	r3, r3, #1
 801e45c:	4413      	add	r3, r2
 801e45e:	00db      	lsls	r3, r3, #3
 801e460:	440b      	add	r3, r1
 801e462:	3314      	adds	r3, #20
 801e464:	781b      	ldrb	r3, [r3, #0]
 801e466:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e468:	78fb      	ldrb	r3, [r7, #3]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	f000 8086 	beq.w	801e57c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801e470:	4948      	ldr	r1, [pc, #288]	; (801e594 <etharp_tmr+0x14c>)
 801e472:	687a      	ldr	r2, [r7, #4]
 801e474:	4613      	mov	r3, r2
 801e476:	005b      	lsls	r3, r3, #1
 801e478:	4413      	add	r3, r2
 801e47a:	00db      	lsls	r3, r3, #3
 801e47c:	440b      	add	r3, r1
 801e47e:	3312      	adds	r3, #18
 801e480:	881b      	ldrh	r3, [r3, #0]
 801e482:	3301      	adds	r3, #1
 801e484:	b298      	uxth	r0, r3
 801e486:	4943      	ldr	r1, [pc, #268]	; (801e594 <etharp_tmr+0x14c>)
 801e488:	687a      	ldr	r2, [r7, #4]
 801e48a:	4613      	mov	r3, r2
 801e48c:	005b      	lsls	r3, r3, #1
 801e48e:	4413      	add	r3, r2
 801e490:	00db      	lsls	r3, r3, #3
 801e492:	440b      	add	r3, r1
 801e494:	3312      	adds	r3, #18
 801e496:	4602      	mov	r2, r0
 801e498:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e49a:	493e      	ldr	r1, [pc, #248]	; (801e594 <etharp_tmr+0x14c>)
 801e49c:	687a      	ldr	r2, [r7, #4]
 801e49e:	4613      	mov	r3, r2
 801e4a0:	005b      	lsls	r3, r3, #1
 801e4a2:	4413      	add	r3, r2
 801e4a4:	00db      	lsls	r3, r3, #3
 801e4a6:	440b      	add	r3, r1
 801e4a8:	3312      	adds	r3, #18
 801e4aa:	881b      	ldrh	r3, [r3, #0]
 801e4ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801e4b0:	d215      	bcs.n	801e4de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e4b2:	4938      	ldr	r1, [pc, #224]	; (801e594 <etharp_tmr+0x14c>)
 801e4b4:	687a      	ldr	r2, [r7, #4]
 801e4b6:	4613      	mov	r3, r2
 801e4b8:	005b      	lsls	r3, r3, #1
 801e4ba:	4413      	add	r3, r2
 801e4bc:	00db      	lsls	r3, r3, #3
 801e4be:	440b      	add	r3, r1
 801e4c0:	3314      	adds	r3, #20
 801e4c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e4c4:	2b01      	cmp	r3, #1
 801e4c6:	d10e      	bne.n	801e4e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e4c8:	4932      	ldr	r1, [pc, #200]	; (801e594 <etharp_tmr+0x14c>)
 801e4ca:	687a      	ldr	r2, [r7, #4]
 801e4cc:	4613      	mov	r3, r2
 801e4ce:	005b      	lsls	r3, r3, #1
 801e4d0:	4413      	add	r3, r2
 801e4d2:	00db      	lsls	r3, r3, #3
 801e4d4:	440b      	add	r3, r1
 801e4d6:	3312      	adds	r3, #18
 801e4d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e4da:	2b04      	cmp	r3, #4
 801e4dc:	d903      	bls.n	801e4e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e4de:	6878      	ldr	r0, [r7, #4]
 801e4e0:	f7ff ff52 	bl	801e388 <etharp_free_entry>
 801e4e4:	e04a      	b.n	801e57c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e4e6:	492b      	ldr	r1, [pc, #172]	; (801e594 <etharp_tmr+0x14c>)
 801e4e8:	687a      	ldr	r2, [r7, #4]
 801e4ea:	4613      	mov	r3, r2
 801e4ec:	005b      	lsls	r3, r3, #1
 801e4ee:	4413      	add	r3, r2
 801e4f0:	00db      	lsls	r3, r3, #3
 801e4f2:	440b      	add	r3, r1
 801e4f4:	3314      	adds	r3, #20
 801e4f6:	781b      	ldrb	r3, [r3, #0]
 801e4f8:	2b03      	cmp	r3, #3
 801e4fa:	d10a      	bne.n	801e512 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e4fc:	4925      	ldr	r1, [pc, #148]	; (801e594 <etharp_tmr+0x14c>)
 801e4fe:	687a      	ldr	r2, [r7, #4]
 801e500:	4613      	mov	r3, r2
 801e502:	005b      	lsls	r3, r3, #1
 801e504:	4413      	add	r3, r2
 801e506:	00db      	lsls	r3, r3, #3
 801e508:	440b      	add	r3, r1
 801e50a:	3314      	adds	r3, #20
 801e50c:	2204      	movs	r2, #4
 801e50e:	701a      	strb	r2, [r3, #0]
 801e510:	e034      	b.n	801e57c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e512:	4920      	ldr	r1, [pc, #128]	; (801e594 <etharp_tmr+0x14c>)
 801e514:	687a      	ldr	r2, [r7, #4]
 801e516:	4613      	mov	r3, r2
 801e518:	005b      	lsls	r3, r3, #1
 801e51a:	4413      	add	r3, r2
 801e51c:	00db      	lsls	r3, r3, #3
 801e51e:	440b      	add	r3, r1
 801e520:	3314      	adds	r3, #20
 801e522:	781b      	ldrb	r3, [r3, #0]
 801e524:	2b04      	cmp	r3, #4
 801e526:	d10a      	bne.n	801e53e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e528:	491a      	ldr	r1, [pc, #104]	; (801e594 <etharp_tmr+0x14c>)
 801e52a:	687a      	ldr	r2, [r7, #4]
 801e52c:	4613      	mov	r3, r2
 801e52e:	005b      	lsls	r3, r3, #1
 801e530:	4413      	add	r3, r2
 801e532:	00db      	lsls	r3, r3, #3
 801e534:	440b      	add	r3, r1
 801e536:	3314      	adds	r3, #20
 801e538:	2202      	movs	r2, #2
 801e53a:	701a      	strb	r2, [r3, #0]
 801e53c:	e01e      	b.n	801e57c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e53e:	4915      	ldr	r1, [pc, #84]	; (801e594 <etharp_tmr+0x14c>)
 801e540:	687a      	ldr	r2, [r7, #4]
 801e542:	4613      	mov	r3, r2
 801e544:	005b      	lsls	r3, r3, #1
 801e546:	4413      	add	r3, r2
 801e548:	00db      	lsls	r3, r3, #3
 801e54a:	440b      	add	r3, r1
 801e54c:	3314      	adds	r3, #20
 801e54e:	781b      	ldrb	r3, [r3, #0]
 801e550:	2b01      	cmp	r3, #1
 801e552:	d113      	bne.n	801e57c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e554:	490f      	ldr	r1, [pc, #60]	; (801e594 <etharp_tmr+0x14c>)
 801e556:	687a      	ldr	r2, [r7, #4]
 801e558:	4613      	mov	r3, r2
 801e55a:	005b      	lsls	r3, r3, #1
 801e55c:	4413      	add	r3, r2
 801e55e:	00db      	lsls	r3, r3, #3
 801e560:	440b      	add	r3, r1
 801e562:	3308      	adds	r3, #8
 801e564:	6818      	ldr	r0, [r3, #0]
 801e566:	687a      	ldr	r2, [r7, #4]
 801e568:	4613      	mov	r3, r2
 801e56a:	005b      	lsls	r3, r3, #1
 801e56c:	4413      	add	r3, r2
 801e56e:	00db      	lsls	r3, r3, #3
 801e570:	4a08      	ldr	r2, [pc, #32]	; (801e594 <etharp_tmr+0x14c>)
 801e572:	4413      	add	r3, r2
 801e574:	3304      	adds	r3, #4
 801e576:	4619      	mov	r1, r3
 801e578:	f000 fe72 	bl	801f260 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	3301      	adds	r3, #1
 801e580:	607b      	str	r3, [r7, #4]
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	2b09      	cmp	r3, #9
 801e586:	f77f af65 	ble.w	801e454 <etharp_tmr+0xc>
      }
    }
  }
}
 801e58a:	bf00      	nop
 801e58c:	bf00      	nop
 801e58e:	3708      	adds	r7, #8
 801e590:	46bd      	mov	sp, r7
 801e592:	bd80      	pop	{r7, pc}
 801e594:	200143d0 	.word	0x200143d0

0801e598 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e598:	b580      	push	{r7, lr}
 801e59a:	b08a      	sub	sp, #40	; 0x28
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	60f8      	str	r0, [r7, #12]
 801e5a0:	460b      	mov	r3, r1
 801e5a2:	607a      	str	r2, [r7, #4]
 801e5a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e5a6:	230a      	movs	r3, #10
 801e5a8:	843b      	strh	r3, [r7, #32]
 801e5aa:	230a      	movs	r3, #10
 801e5ac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801e5ae:	230a      	movs	r3, #10
 801e5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e5b6:	230a      	movs	r3, #10
 801e5b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e5ba:	2300      	movs	r3, #0
 801e5bc:	83bb      	strh	r3, [r7, #28]
 801e5be:	2300      	movs	r3, #0
 801e5c0:	837b      	strh	r3, [r7, #26]
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e5c6:	2300      	movs	r3, #0
 801e5c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e5ca:	e0ae      	b.n	801e72a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801e5cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e5d0:	49a6      	ldr	r1, [pc, #664]	; (801e86c <etharp_find_entry+0x2d4>)
 801e5d2:	4613      	mov	r3, r2
 801e5d4:	005b      	lsls	r3, r3, #1
 801e5d6:	4413      	add	r3, r2
 801e5d8:	00db      	lsls	r3, r3, #3
 801e5da:	440b      	add	r3, r1
 801e5dc:	3314      	adds	r3, #20
 801e5de:	781b      	ldrb	r3, [r3, #0]
 801e5e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e5e2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e5e6:	2b0a      	cmp	r3, #10
 801e5e8:	d105      	bne.n	801e5f6 <etharp_find_entry+0x5e>
 801e5ea:	7dfb      	ldrb	r3, [r7, #23]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d102      	bne.n	801e5f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801e5f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e5f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 801e5f4:	e095      	b.n	801e722 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e5f6:	7dfb      	ldrb	r3, [r7, #23]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	f000 8092 	beq.w	801e722 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e5fe:	7dfb      	ldrb	r3, [r7, #23]
 801e600:	2b01      	cmp	r3, #1
 801e602:	d009      	beq.n	801e618 <etharp_find_entry+0x80>
 801e604:	7dfb      	ldrb	r3, [r7, #23]
 801e606:	2b01      	cmp	r3, #1
 801e608:	d806      	bhi.n	801e618 <etharp_find_entry+0x80>
 801e60a:	4b99      	ldr	r3, [pc, #612]	; (801e870 <etharp_find_entry+0x2d8>)
 801e60c:	f240 1223 	movw	r2, #291	; 0x123
 801e610:	4998      	ldr	r1, [pc, #608]	; (801e874 <etharp_find_entry+0x2dc>)
 801e612:	4899      	ldr	r0, [pc, #612]	; (801e878 <etharp_find_entry+0x2e0>)
 801e614:	f003 fb4a 	bl	8021cac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d020      	beq.n	801e660 <etharp_find_entry+0xc8>
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	6819      	ldr	r1, [r3, #0]
 801e622:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e626:	4891      	ldr	r0, [pc, #580]	; (801e86c <etharp_find_entry+0x2d4>)
 801e628:	4613      	mov	r3, r2
 801e62a:	005b      	lsls	r3, r3, #1
 801e62c:	4413      	add	r3, r2
 801e62e:	00db      	lsls	r3, r3, #3
 801e630:	4403      	add	r3, r0
 801e632:	3304      	adds	r3, #4
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	4299      	cmp	r1, r3
 801e638:	d112      	bne.n	801e660 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d00c      	beq.n	801e65a <etharp_find_entry+0xc2>
 801e640:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e644:	4989      	ldr	r1, [pc, #548]	; (801e86c <etharp_find_entry+0x2d4>)
 801e646:	4613      	mov	r3, r2
 801e648:	005b      	lsls	r3, r3, #1
 801e64a:	4413      	add	r3, r2
 801e64c:	00db      	lsls	r3, r3, #3
 801e64e:	440b      	add	r3, r1
 801e650:	3308      	adds	r3, #8
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	687a      	ldr	r2, [r7, #4]
 801e656:	429a      	cmp	r2, r3
 801e658:	d102      	bne.n	801e660 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e65a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e65e:	e100      	b.n	801e862 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e660:	7dfb      	ldrb	r3, [r7, #23]
 801e662:	2b01      	cmp	r3, #1
 801e664:	d140      	bne.n	801e6e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e666:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e66a:	4980      	ldr	r1, [pc, #512]	; (801e86c <etharp_find_entry+0x2d4>)
 801e66c:	4613      	mov	r3, r2
 801e66e:	005b      	lsls	r3, r3, #1
 801e670:	4413      	add	r3, r2
 801e672:	00db      	lsls	r3, r3, #3
 801e674:	440b      	add	r3, r1
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d01a      	beq.n	801e6b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e67c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e680:	497a      	ldr	r1, [pc, #488]	; (801e86c <etharp_find_entry+0x2d4>)
 801e682:	4613      	mov	r3, r2
 801e684:	005b      	lsls	r3, r3, #1
 801e686:	4413      	add	r3, r2
 801e688:	00db      	lsls	r3, r3, #3
 801e68a:	440b      	add	r3, r1
 801e68c:	3312      	adds	r3, #18
 801e68e:	881b      	ldrh	r3, [r3, #0]
 801e690:	8bba      	ldrh	r2, [r7, #28]
 801e692:	429a      	cmp	r2, r3
 801e694:	d845      	bhi.n	801e722 <etharp_find_entry+0x18a>
            old_queue = i;
 801e696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e698:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e69a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e69e:	4973      	ldr	r1, [pc, #460]	; (801e86c <etharp_find_entry+0x2d4>)
 801e6a0:	4613      	mov	r3, r2
 801e6a2:	005b      	lsls	r3, r3, #1
 801e6a4:	4413      	add	r3, r2
 801e6a6:	00db      	lsls	r3, r3, #3
 801e6a8:	440b      	add	r3, r1
 801e6aa:	3312      	adds	r3, #18
 801e6ac:	881b      	ldrh	r3, [r3, #0]
 801e6ae:	83bb      	strh	r3, [r7, #28]
 801e6b0:	e037      	b.n	801e722 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e6b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e6b6:	496d      	ldr	r1, [pc, #436]	; (801e86c <etharp_find_entry+0x2d4>)
 801e6b8:	4613      	mov	r3, r2
 801e6ba:	005b      	lsls	r3, r3, #1
 801e6bc:	4413      	add	r3, r2
 801e6be:	00db      	lsls	r3, r3, #3
 801e6c0:	440b      	add	r3, r1
 801e6c2:	3312      	adds	r3, #18
 801e6c4:	881b      	ldrh	r3, [r3, #0]
 801e6c6:	8b7a      	ldrh	r2, [r7, #26]
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	d82a      	bhi.n	801e722 <etharp_find_entry+0x18a>
            old_pending = i;
 801e6cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e6ce:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801e6d0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e6d4:	4965      	ldr	r1, [pc, #404]	; (801e86c <etharp_find_entry+0x2d4>)
 801e6d6:	4613      	mov	r3, r2
 801e6d8:	005b      	lsls	r3, r3, #1
 801e6da:	4413      	add	r3, r2
 801e6dc:	00db      	lsls	r3, r3, #3
 801e6de:	440b      	add	r3, r1
 801e6e0:	3312      	adds	r3, #18
 801e6e2:	881b      	ldrh	r3, [r3, #0]
 801e6e4:	837b      	strh	r3, [r7, #26]
 801e6e6:	e01c      	b.n	801e722 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e6e8:	7dfb      	ldrb	r3, [r7, #23]
 801e6ea:	2b01      	cmp	r3, #1
 801e6ec:	d919      	bls.n	801e722 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e6ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e6f2:	495e      	ldr	r1, [pc, #376]	; (801e86c <etharp_find_entry+0x2d4>)
 801e6f4:	4613      	mov	r3, r2
 801e6f6:	005b      	lsls	r3, r3, #1
 801e6f8:	4413      	add	r3, r2
 801e6fa:	00db      	lsls	r3, r3, #3
 801e6fc:	440b      	add	r3, r1
 801e6fe:	3312      	adds	r3, #18
 801e700:	881b      	ldrh	r3, [r3, #0]
 801e702:	8b3a      	ldrh	r2, [r7, #24]
 801e704:	429a      	cmp	r2, r3
 801e706:	d80c      	bhi.n	801e722 <etharp_find_entry+0x18a>
            old_stable = i;
 801e708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e70a:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 801e70c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e710:	4956      	ldr	r1, [pc, #344]	; (801e86c <etharp_find_entry+0x2d4>)
 801e712:	4613      	mov	r3, r2
 801e714:	005b      	lsls	r3, r3, #1
 801e716:	4413      	add	r3, r2
 801e718:	00db      	lsls	r3, r3, #3
 801e71a:	440b      	add	r3, r1
 801e71c:	3312      	adds	r3, #18
 801e71e:	881b      	ldrh	r3, [r3, #0]
 801e720:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e724:	3301      	adds	r3, #1
 801e726:	b29b      	uxth	r3, r3
 801e728:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e72a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e72e:	2b09      	cmp	r3, #9
 801e730:	f77f af4c 	ble.w	801e5cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e734:	7afb      	ldrb	r3, [r7, #11]
 801e736:	f003 0302 	and.w	r3, r3, #2
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d108      	bne.n	801e750 <etharp_find_entry+0x1b8>
 801e73e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e742:	2b0a      	cmp	r3, #10
 801e744:	d107      	bne.n	801e756 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e746:	7afb      	ldrb	r3, [r7, #11]
 801e748:	f003 0301 	and.w	r3, r3, #1
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d102      	bne.n	801e756 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e754:	e085      	b.n	801e862 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e756:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e75a:	2b09      	cmp	r3, #9
 801e75c:	dc02      	bgt.n	801e764 <etharp_find_entry+0x1cc>
    i = empty;
 801e75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e760:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e762:	e039      	b.n	801e7d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e764:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e768:	2b09      	cmp	r3, #9
 801e76a:	dc14      	bgt.n	801e796 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e76e:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e770:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e774:	493d      	ldr	r1, [pc, #244]	; (801e86c <etharp_find_entry+0x2d4>)
 801e776:	4613      	mov	r3, r2
 801e778:	005b      	lsls	r3, r3, #1
 801e77a:	4413      	add	r3, r2
 801e77c:	00db      	lsls	r3, r3, #3
 801e77e:	440b      	add	r3, r1
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	2b00      	cmp	r3, #0
 801e784:	d018      	beq.n	801e7b8 <etharp_find_entry+0x220>
 801e786:	4b3a      	ldr	r3, [pc, #232]	; (801e870 <etharp_find_entry+0x2d8>)
 801e788:	f240 126d 	movw	r2, #365	; 0x16d
 801e78c:	493b      	ldr	r1, [pc, #236]	; (801e87c <etharp_find_entry+0x2e4>)
 801e78e:	483a      	ldr	r0, [pc, #232]	; (801e878 <etharp_find_entry+0x2e0>)
 801e790:	f003 fa8c 	bl	8021cac <iprintf>
 801e794:	e010      	b.n	801e7b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e796:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e79a:	2b09      	cmp	r3, #9
 801e79c:	dc02      	bgt.n	801e7a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e79e:	8c3b      	ldrh	r3, [r7, #32]
 801e7a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e7a2:	e009      	b.n	801e7b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e7a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e7a8:	2b09      	cmp	r3, #9
 801e7aa:	dc02      	bgt.n	801e7b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e7ac:	8bfb      	ldrh	r3, [r7, #30]
 801e7ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e7b0:	e002      	b.n	801e7b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e7b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e7b6:	e054      	b.n	801e862 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e7b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e7bc:	2b09      	cmp	r3, #9
 801e7be:	dd06      	ble.n	801e7ce <etharp_find_entry+0x236>
 801e7c0:	4b2b      	ldr	r3, [pc, #172]	; (801e870 <etharp_find_entry+0x2d8>)
 801e7c2:	f240 127f 	movw	r2, #383	; 0x17f
 801e7c6:	492e      	ldr	r1, [pc, #184]	; (801e880 <etharp_find_entry+0x2e8>)
 801e7c8:	482b      	ldr	r0, [pc, #172]	; (801e878 <etharp_find_entry+0x2e0>)
 801e7ca:	f003 fa6f 	bl	8021cac <iprintf>
    etharp_free_entry(i);
 801e7ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e7d2:	4618      	mov	r0, r3
 801e7d4:	f7ff fdd8 	bl	801e388 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e7d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e7dc:	2b09      	cmp	r3, #9
 801e7de:	dd06      	ble.n	801e7ee <etharp_find_entry+0x256>
 801e7e0:	4b23      	ldr	r3, [pc, #140]	; (801e870 <etharp_find_entry+0x2d8>)
 801e7e2:	f240 1283 	movw	r2, #387	; 0x183
 801e7e6:	4926      	ldr	r1, [pc, #152]	; (801e880 <etharp_find_entry+0x2e8>)
 801e7e8:	4823      	ldr	r0, [pc, #140]	; (801e878 <etharp_find_entry+0x2e0>)
 801e7ea:	f003 fa5f 	bl	8021cac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e7ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e7f2:	491e      	ldr	r1, [pc, #120]	; (801e86c <etharp_find_entry+0x2d4>)
 801e7f4:	4613      	mov	r3, r2
 801e7f6:	005b      	lsls	r3, r3, #1
 801e7f8:	4413      	add	r3, r2
 801e7fa:	00db      	lsls	r3, r3, #3
 801e7fc:	440b      	add	r3, r1
 801e7fe:	3314      	adds	r3, #20
 801e800:	781b      	ldrb	r3, [r3, #0]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d006      	beq.n	801e814 <etharp_find_entry+0x27c>
 801e806:	4b1a      	ldr	r3, [pc, #104]	; (801e870 <etharp_find_entry+0x2d8>)
 801e808:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801e80c:	491d      	ldr	r1, [pc, #116]	; (801e884 <etharp_find_entry+0x2ec>)
 801e80e:	481a      	ldr	r0, [pc, #104]	; (801e878 <etharp_find_entry+0x2e0>)
 801e810:	f003 fa4c 	bl	8021cac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d00b      	beq.n	801e832 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e81a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	6819      	ldr	r1, [r3, #0]
 801e822:	4812      	ldr	r0, [pc, #72]	; (801e86c <etharp_find_entry+0x2d4>)
 801e824:	4613      	mov	r3, r2
 801e826:	005b      	lsls	r3, r3, #1
 801e828:	4413      	add	r3, r2
 801e82a:	00db      	lsls	r3, r3, #3
 801e82c:	4403      	add	r3, r0
 801e82e:	3304      	adds	r3, #4
 801e830:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e832:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e836:	490d      	ldr	r1, [pc, #52]	; (801e86c <etharp_find_entry+0x2d4>)
 801e838:	4613      	mov	r3, r2
 801e83a:	005b      	lsls	r3, r3, #1
 801e83c:	4413      	add	r3, r2
 801e83e:	00db      	lsls	r3, r3, #3
 801e840:	440b      	add	r3, r1
 801e842:	3312      	adds	r3, #18
 801e844:	2200      	movs	r2, #0
 801e846:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e848:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e84c:	4907      	ldr	r1, [pc, #28]	; (801e86c <etharp_find_entry+0x2d4>)
 801e84e:	4613      	mov	r3, r2
 801e850:	005b      	lsls	r3, r3, #1
 801e852:	4413      	add	r3, r2
 801e854:	00db      	lsls	r3, r3, #3
 801e856:	440b      	add	r3, r1
 801e858:	3308      	adds	r3, #8
 801e85a:	687a      	ldr	r2, [r7, #4]
 801e85c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e85e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801e862:	4618      	mov	r0, r3
 801e864:	3728      	adds	r7, #40	; 0x28
 801e866:	46bd      	mov	sp, r7
 801e868:	bd80      	pop	{r7, pc}
 801e86a:	bf00      	nop
 801e86c:	200143d0 	.word	0x200143d0
 801e870:	08029138 	.word	0x08029138
 801e874:	08029170 	.word	0x08029170
 801e878:	080291b0 	.word	0x080291b0
 801e87c:	080291d8 	.word	0x080291d8
 801e880:	080291f0 	.word	0x080291f0
 801e884:	08029204 	.word	0x08029204

0801e888 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e888:	b580      	push	{r7, lr}
 801e88a:	b088      	sub	sp, #32
 801e88c:	af02      	add	r7, sp, #8
 801e88e:	60f8      	str	r0, [r7, #12]
 801e890:	60b9      	str	r1, [r7, #8]
 801e892:	607a      	str	r2, [r7, #4]
 801e894:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e89c:	2b06      	cmp	r3, #6
 801e89e:	d006      	beq.n	801e8ae <etharp_update_arp_entry+0x26>
 801e8a0:	4b48      	ldr	r3, [pc, #288]	; (801e9c4 <etharp_update_arp_entry+0x13c>)
 801e8a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e8a6:	4948      	ldr	r1, [pc, #288]	; (801e9c8 <etharp_update_arp_entry+0x140>)
 801e8a8:	4848      	ldr	r0, [pc, #288]	; (801e9cc <etharp_update_arp_entry+0x144>)
 801e8aa:	f003 f9ff 	bl	8021cac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e8ae:	68bb      	ldr	r3, [r7, #8]
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	d012      	beq.n	801e8da <etharp_update_arp_entry+0x52>
 801e8b4:	68bb      	ldr	r3, [r7, #8]
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d00e      	beq.n	801e8da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e8bc:	68bb      	ldr	r3, [r7, #8]
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	68f9      	ldr	r1, [r7, #12]
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	f001 f926 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801e8c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	d105      	bne.n	801e8da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e8ce:	68bb      	ldr	r3, [r7, #8]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e8d6:	2be0      	cmp	r3, #224	; 0xe0
 801e8d8:	d102      	bne.n	801e8e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e8da:	f06f 030f 	mvn.w	r3, #15
 801e8de:	e06c      	b.n	801e9ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e8e0:	78fb      	ldrb	r3, [r7, #3]
 801e8e2:	68fa      	ldr	r2, [r7, #12]
 801e8e4:	4619      	mov	r1, r3
 801e8e6:	68b8      	ldr	r0, [r7, #8]
 801e8e8:	f7ff fe56 	bl	801e598 <etharp_find_entry>
 801e8ec:	4603      	mov	r3, r0
 801e8ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e8f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	da02      	bge.n	801e8fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e8f8:	8afb      	ldrh	r3, [r7, #22]
 801e8fa:	b25b      	sxtb	r3, r3
 801e8fc:	e05d      	b.n	801e9ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e8fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e902:	4933      	ldr	r1, [pc, #204]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e904:	4613      	mov	r3, r2
 801e906:	005b      	lsls	r3, r3, #1
 801e908:	4413      	add	r3, r2
 801e90a:	00db      	lsls	r3, r3, #3
 801e90c:	440b      	add	r3, r1
 801e90e:	3314      	adds	r3, #20
 801e910:	2202      	movs	r2, #2
 801e912:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e914:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e918:	492d      	ldr	r1, [pc, #180]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e91a:	4613      	mov	r3, r2
 801e91c:	005b      	lsls	r3, r3, #1
 801e91e:	4413      	add	r3, r2
 801e920:	00db      	lsls	r3, r3, #3
 801e922:	440b      	add	r3, r1
 801e924:	3308      	adds	r3, #8
 801e926:	68fa      	ldr	r2, [r7, #12]
 801e928:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e92a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e92e:	4613      	mov	r3, r2
 801e930:	005b      	lsls	r3, r3, #1
 801e932:	4413      	add	r3, r2
 801e934:	00db      	lsls	r3, r3, #3
 801e936:	3308      	adds	r3, #8
 801e938:	4a25      	ldr	r2, [pc, #148]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e93a:	4413      	add	r3, r2
 801e93c:	3304      	adds	r3, #4
 801e93e:	2206      	movs	r2, #6
 801e940:	6879      	ldr	r1, [r7, #4]
 801e942:	4618      	mov	r0, r3
 801e944:	f002 fc6e 	bl	8021224 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e948:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e94c:	4920      	ldr	r1, [pc, #128]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e94e:	4613      	mov	r3, r2
 801e950:	005b      	lsls	r3, r3, #1
 801e952:	4413      	add	r3, r2
 801e954:	00db      	lsls	r3, r3, #3
 801e956:	440b      	add	r3, r1
 801e958:	3312      	adds	r3, #18
 801e95a:	2200      	movs	r2, #0
 801e95c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e95e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e962:	491b      	ldr	r1, [pc, #108]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e964:	4613      	mov	r3, r2
 801e966:	005b      	lsls	r3, r3, #1
 801e968:	4413      	add	r3, r2
 801e96a:	00db      	lsls	r3, r3, #3
 801e96c:	440b      	add	r3, r1
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d021      	beq.n	801e9b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e978:	4915      	ldr	r1, [pc, #84]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e97a:	4613      	mov	r3, r2
 801e97c:	005b      	lsls	r3, r3, #1
 801e97e:	4413      	add	r3, r2
 801e980:	00db      	lsls	r3, r3, #3
 801e982:	440b      	add	r3, r1
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e988:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e98c:	4910      	ldr	r1, [pc, #64]	; (801e9d0 <etharp_update_arp_entry+0x148>)
 801e98e:	4613      	mov	r3, r2
 801e990:	005b      	lsls	r3, r3, #1
 801e992:	4413      	add	r3, r2
 801e994:	00db      	lsls	r3, r3, #3
 801e996:	440b      	add	r3, r1
 801e998:	2200      	movs	r2, #0
 801e99a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801e9a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e9a6:	9300      	str	r3, [sp, #0]
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	6939      	ldr	r1, [r7, #16]
 801e9ac:	68f8      	ldr	r0, [r7, #12]
 801e9ae:	f002 f8e3 	bl	8020b78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e9b2:	6938      	ldr	r0, [r7, #16]
 801e9b4:	f7f6 f8d2 	bl	8014b5c <pbuf_free>
  }
  return ERR_OK;
 801e9b8:	2300      	movs	r3, #0
}
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	3718      	adds	r7, #24
 801e9be:	46bd      	mov	sp, r7
 801e9c0:	bd80      	pop	{r7, pc}
 801e9c2:	bf00      	nop
 801e9c4:	08029138 	.word	0x08029138
 801e9c8:	08029230 	.word	0x08029230
 801e9cc:	080291b0 	.word	0x080291b0
 801e9d0:	200143d0 	.word	0x200143d0

0801e9d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e9d4:	b580      	push	{r7, lr}
 801e9d6:	b084      	sub	sp, #16
 801e9d8:	af00      	add	r7, sp, #0
 801e9da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e9dc:	2300      	movs	r3, #0
 801e9de:	60fb      	str	r3, [r7, #12]
 801e9e0:	e01e      	b.n	801ea20 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e9e2:	4913      	ldr	r1, [pc, #76]	; (801ea30 <etharp_cleanup_netif+0x5c>)
 801e9e4:	68fa      	ldr	r2, [r7, #12]
 801e9e6:	4613      	mov	r3, r2
 801e9e8:	005b      	lsls	r3, r3, #1
 801e9ea:	4413      	add	r3, r2
 801e9ec:	00db      	lsls	r3, r3, #3
 801e9ee:	440b      	add	r3, r1
 801e9f0:	3314      	adds	r3, #20
 801e9f2:	781b      	ldrb	r3, [r3, #0]
 801e9f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e9f6:	7afb      	ldrb	r3, [r7, #11]
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	d00e      	beq.n	801ea1a <etharp_cleanup_netif+0x46>
 801e9fc:	490c      	ldr	r1, [pc, #48]	; (801ea30 <etharp_cleanup_netif+0x5c>)
 801e9fe:	68fa      	ldr	r2, [r7, #12]
 801ea00:	4613      	mov	r3, r2
 801ea02:	005b      	lsls	r3, r3, #1
 801ea04:	4413      	add	r3, r2
 801ea06:	00db      	lsls	r3, r3, #3
 801ea08:	440b      	add	r3, r1
 801ea0a:	3308      	adds	r3, #8
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	687a      	ldr	r2, [r7, #4]
 801ea10:	429a      	cmp	r2, r3
 801ea12:	d102      	bne.n	801ea1a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ea14:	68f8      	ldr	r0, [r7, #12]
 801ea16:	f7ff fcb7 	bl	801e388 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ea1a:	68fb      	ldr	r3, [r7, #12]
 801ea1c:	3301      	adds	r3, #1
 801ea1e:	60fb      	str	r3, [r7, #12]
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	2b09      	cmp	r3, #9
 801ea24:	dddd      	ble.n	801e9e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801ea26:	bf00      	nop
 801ea28:	bf00      	nop
 801ea2a:	3710      	adds	r7, #16
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	bd80      	pop	{r7, pc}
 801ea30:	200143d0 	.word	0x200143d0

0801ea34 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ea34:	b5b0      	push	{r4, r5, r7, lr}
 801ea36:	b08a      	sub	sp, #40	; 0x28
 801ea38:	af04      	add	r7, sp, #16
 801ea3a:	6078      	str	r0, [r7, #4]
 801ea3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d107      	bne.n	801ea54 <etharp_input+0x20>
 801ea44:	4b3f      	ldr	r3, [pc, #252]	; (801eb44 <etharp_input+0x110>)
 801ea46:	f240 228a 	movw	r2, #650	; 0x28a
 801ea4a:	493f      	ldr	r1, [pc, #252]	; (801eb48 <etharp_input+0x114>)
 801ea4c:	483f      	ldr	r0, [pc, #252]	; (801eb4c <etharp_input+0x118>)
 801ea4e:	f003 f92d 	bl	8021cac <iprintf>
 801ea52:	e074      	b.n	801eb3e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	685b      	ldr	r3, [r3, #4]
 801ea58:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ea5a:	697b      	ldr	r3, [r7, #20]
 801ea5c:	881b      	ldrh	r3, [r3, #0]
 801ea5e:	b29b      	uxth	r3, r3
 801ea60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ea64:	d10c      	bne.n	801ea80 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ea66:	697b      	ldr	r3, [r7, #20]
 801ea68:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ea6a:	2b06      	cmp	r3, #6
 801ea6c:	d108      	bne.n	801ea80 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ea6e:	697b      	ldr	r3, [r7, #20]
 801ea70:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ea72:	2b04      	cmp	r3, #4
 801ea74:	d104      	bne.n	801ea80 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ea76:	697b      	ldr	r3, [r7, #20]
 801ea78:	885b      	ldrh	r3, [r3, #2]
 801ea7a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ea7c:	2b08      	cmp	r3, #8
 801ea7e:	d003      	beq.n	801ea88 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ea80:	6878      	ldr	r0, [r7, #4]
 801ea82:	f7f6 f86b 	bl	8014b5c <pbuf_free>
    return;
 801ea86:	e05a      	b.n	801eb3e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ea88:	697b      	ldr	r3, [r7, #20]
 801ea8a:	330e      	adds	r3, #14
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ea90:	697b      	ldr	r3, [r7, #20]
 801ea92:	3318      	adds	r3, #24
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ea98:	683b      	ldr	r3, [r7, #0]
 801ea9a:	3304      	adds	r3, #4
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d102      	bne.n	801eaa8 <etharp_input+0x74>
    for_us = 0;
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	74fb      	strb	r3, [r7, #19]
 801eaa6:	e009      	b.n	801eabc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801eaa8:	68ba      	ldr	r2, [r7, #8]
 801eaaa:	683b      	ldr	r3, [r7, #0]
 801eaac:	3304      	adds	r3, #4
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	429a      	cmp	r2, r3
 801eab2:	bf0c      	ite	eq
 801eab4:	2301      	moveq	r3, #1
 801eab6:	2300      	movne	r3, #0
 801eab8:	b2db      	uxtb	r3, r3
 801eaba:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801eabc:	697b      	ldr	r3, [r7, #20]
 801eabe:	f103 0208 	add.w	r2, r3, #8
 801eac2:	7cfb      	ldrb	r3, [r7, #19]
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d001      	beq.n	801eacc <etharp_input+0x98>
 801eac8:	2301      	movs	r3, #1
 801eaca:	e000      	b.n	801eace <etharp_input+0x9a>
 801eacc:	2302      	movs	r3, #2
 801eace:	f107 010c 	add.w	r1, r7, #12
 801ead2:	6838      	ldr	r0, [r7, #0]
 801ead4:	f7ff fed8 	bl	801e888 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ead8:	697b      	ldr	r3, [r7, #20]
 801eada:	88db      	ldrh	r3, [r3, #6]
 801eadc:	b29b      	uxth	r3, r3
 801eade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eae2:	d003      	beq.n	801eaec <etharp_input+0xb8>
 801eae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eae8:	d01e      	beq.n	801eb28 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801eaea:	e025      	b.n	801eb38 <etharp_input+0x104>
      if (for_us) {
 801eaec:	7cfb      	ldrb	r3, [r7, #19]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d021      	beq.n	801eb36 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801eaf8:	697b      	ldr	r3, [r7, #20]
 801eafa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801eafe:	683b      	ldr	r3, [r7, #0]
 801eb00:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801eb04:	683b      	ldr	r3, [r7, #0]
 801eb06:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801eb08:	697a      	ldr	r2, [r7, #20]
 801eb0a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801eb0c:	2102      	movs	r1, #2
 801eb0e:	9103      	str	r1, [sp, #12]
 801eb10:	f107 010c 	add.w	r1, r7, #12
 801eb14:	9102      	str	r1, [sp, #8]
 801eb16:	9201      	str	r2, [sp, #4]
 801eb18:	9300      	str	r3, [sp, #0]
 801eb1a:	462b      	mov	r3, r5
 801eb1c:	4622      	mov	r2, r4
 801eb1e:	4601      	mov	r1, r0
 801eb20:	6838      	ldr	r0, [r7, #0]
 801eb22:	f000 faef 	bl	801f104 <etharp_raw>
      break;
 801eb26:	e006      	b.n	801eb36 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801eb28:	f107 030c 	add.w	r3, r7, #12
 801eb2c:	4619      	mov	r1, r3
 801eb2e:	6838      	ldr	r0, [r7, #0]
 801eb30:	f7fe f990 	bl	801ce54 <dhcp_arp_reply>
      break;
 801eb34:	e000      	b.n	801eb38 <etharp_input+0x104>
      break;
 801eb36:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801eb38:	6878      	ldr	r0, [r7, #4]
 801eb3a:	f7f6 f80f 	bl	8014b5c <pbuf_free>
}
 801eb3e:	3718      	adds	r7, #24
 801eb40:	46bd      	mov	sp, r7
 801eb42:	bdb0      	pop	{r4, r5, r7, pc}
 801eb44:	08029138 	.word	0x08029138
 801eb48:	08029288 	.word	0x08029288
 801eb4c:	080291b0 	.word	0x080291b0

0801eb50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801eb50:	b580      	push	{r7, lr}
 801eb52:	b086      	sub	sp, #24
 801eb54:	af02      	add	r7, sp, #8
 801eb56:	60f8      	str	r0, [r7, #12]
 801eb58:	60b9      	str	r1, [r7, #8]
 801eb5a:	4613      	mov	r3, r2
 801eb5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801eb5e:	79fa      	ldrb	r2, [r7, #7]
 801eb60:	4944      	ldr	r1, [pc, #272]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801eb62:	4613      	mov	r3, r2
 801eb64:	005b      	lsls	r3, r3, #1
 801eb66:	4413      	add	r3, r2
 801eb68:	00db      	lsls	r3, r3, #3
 801eb6a:	440b      	add	r3, r1
 801eb6c:	3314      	adds	r3, #20
 801eb6e:	781b      	ldrb	r3, [r3, #0]
 801eb70:	2b01      	cmp	r3, #1
 801eb72:	d806      	bhi.n	801eb82 <etharp_output_to_arp_index+0x32>
 801eb74:	4b40      	ldr	r3, [pc, #256]	; (801ec78 <etharp_output_to_arp_index+0x128>)
 801eb76:	f240 22ee 	movw	r2, #750	; 0x2ee
 801eb7a:	4940      	ldr	r1, [pc, #256]	; (801ec7c <etharp_output_to_arp_index+0x12c>)
 801eb7c:	4840      	ldr	r0, [pc, #256]	; (801ec80 <etharp_output_to_arp_index+0x130>)
 801eb7e:	f003 f895 	bl	8021cac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801eb82:	79fa      	ldrb	r2, [r7, #7]
 801eb84:	493b      	ldr	r1, [pc, #236]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801eb86:	4613      	mov	r3, r2
 801eb88:	005b      	lsls	r3, r3, #1
 801eb8a:	4413      	add	r3, r2
 801eb8c:	00db      	lsls	r3, r3, #3
 801eb8e:	440b      	add	r3, r1
 801eb90:	3314      	adds	r3, #20
 801eb92:	781b      	ldrb	r3, [r3, #0]
 801eb94:	2b02      	cmp	r3, #2
 801eb96:	d153      	bne.n	801ec40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801eb98:	79fa      	ldrb	r2, [r7, #7]
 801eb9a:	4936      	ldr	r1, [pc, #216]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801eb9c:	4613      	mov	r3, r2
 801eb9e:	005b      	lsls	r3, r3, #1
 801eba0:	4413      	add	r3, r2
 801eba2:	00db      	lsls	r3, r3, #3
 801eba4:	440b      	add	r3, r1
 801eba6:	3312      	adds	r3, #18
 801eba8:	881b      	ldrh	r3, [r3, #0]
 801ebaa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801ebae:	d919      	bls.n	801ebe4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ebb0:	79fa      	ldrb	r2, [r7, #7]
 801ebb2:	4613      	mov	r3, r2
 801ebb4:	005b      	lsls	r3, r3, #1
 801ebb6:	4413      	add	r3, r2
 801ebb8:	00db      	lsls	r3, r3, #3
 801ebba:	4a2e      	ldr	r2, [pc, #184]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ebbc:	4413      	add	r3, r2
 801ebbe:	3304      	adds	r3, #4
 801ebc0:	4619      	mov	r1, r3
 801ebc2:	68f8      	ldr	r0, [r7, #12]
 801ebc4:	f000 fb4c 	bl	801f260 <etharp_request>
 801ebc8:	4603      	mov	r3, r0
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d138      	bne.n	801ec40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ebce:	79fa      	ldrb	r2, [r7, #7]
 801ebd0:	4928      	ldr	r1, [pc, #160]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ebd2:	4613      	mov	r3, r2
 801ebd4:	005b      	lsls	r3, r3, #1
 801ebd6:	4413      	add	r3, r2
 801ebd8:	00db      	lsls	r3, r3, #3
 801ebda:	440b      	add	r3, r1
 801ebdc:	3314      	adds	r3, #20
 801ebde:	2203      	movs	r2, #3
 801ebe0:	701a      	strb	r2, [r3, #0]
 801ebe2:	e02d      	b.n	801ec40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801ebe4:	79fa      	ldrb	r2, [r7, #7]
 801ebe6:	4923      	ldr	r1, [pc, #140]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ebe8:	4613      	mov	r3, r2
 801ebea:	005b      	lsls	r3, r3, #1
 801ebec:	4413      	add	r3, r2
 801ebee:	00db      	lsls	r3, r3, #3
 801ebf0:	440b      	add	r3, r1
 801ebf2:	3312      	adds	r3, #18
 801ebf4:	881b      	ldrh	r3, [r3, #0]
 801ebf6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801ebfa:	d321      	bcc.n	801ec40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801ebfc:	79fa      	ldrb	r2, [r7, #7]
 801ebfe:	4613      	mov	r3, r2
 801ec00:	005b      	lsls	r3, r3, #1
 801ec02:	4413      	add	r3, r2
 801ec04:	00db      	lsls	r3, r3, #3
 801ec06:	4a1b      	ldr	r2, [pc, #108]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ec08:	4413      	add	r3, r2
 801ec0a:	1d19      	adds	r1, r3, #4
 801ec0c:	79fa      	ldrb	r2, [r7, #7]
 801ec0e:	4613      	mov	r3, r2
 801ec10:	005b      	lsls	r3, r3, #1
 801ec12:	4413      	add	r3, r2
 801ec14:	00db      	lsls	r3, r3, #3
 801ec16:	3308      	adds	r3, #8
 801ec18:	4a16      	ldr	r2, [pc, #88]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ec1a:	4413      	add	r3, r2
 801ec1c:	3304      	adds	r3, #4
 801ec1e:	461a      	mov	r2, r3
 801ec20:	68f8      	ldr	r0, [r7, #12]
 801ec22:	f000 fafb 	bl	801f21c <etharp_request_dst>
 801ec26:	4603      	mov	r3, r0
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d109      	bne.n	801ec40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ec2c:	79fa      	ldrb	r2, [r7, #7]
 801ec2e:	4911      	ldr	r1, [pc, #68]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ec30:	4613      	mov	r3, r2
 801ec32:	005b      	lsls	r3, r3, #1
 801ec34:	4413      	add	r3, r2
 801ec36:	00db      	lsls	r3, r3, #3
 801ec38:	440b      	add	r3, r1
 801ec3a:	3314      	adds	r3, #20
 801ec3c:	2203      	movs	r2, #3
 801ec3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801ec46:	79fa      	ldrb	r2, [r7, #7]
 801ec48:	4613      	mov	r3, r2
 801ec4a:	005b      	lsls	r3, r3, #1
 801ec4c:	4413      	add	r3, r2
 801ec4e:	00db      	lsls	r3, r3, #3
 801ec50:	3308      	adds	r3, #8
 801ec52:	4a08      	ldr	r2, [pc, #32]	; (801ec74 <etharp_output_to_arp_index+0x124>)
 801ec54:	4413      	add	r3, r2
 801ec56:	3304      	adds	r3, #4
 801ec58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ec5c:	9200      	str	r2, [sp, #0]
 801ec5e:	460a      	mov	r2, r1
 801ec60:	68b9      	ldr	r1, [r7, #8]
 801ec62:	68f8      	ldr	r0, [r7, #12]
 801ec64:	f001 ff88 	bl	8020b78 <ethernet_output>
 801ec68:	4603      	mov	r3, r0
}
 801ec6a:	4618      	mov	r0, r3
 801ec6c:	3710      	adds	r7, #16
 801ec6e:	46bd      	mov	sp, r7
 801ec70:	bd80      	pop	{r7, pc}
 801ec72:	bf00      	nop
 801ec74:	200143d0 	.word	0x200143d0
 801ec78:	08029138 	.word	0x08029138
 801ec7c:	080292a8 	.word	0x080292a8
 801ec80:	080291b0 	.word	0x080291b0

0801ec84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ec84:	b580      	push	{r7, lr}
 801ec86:	b08a      	sub	sp, #40	; 0x28
 801ec88:	af02      	add	r7, sp, #8
 801ec8a:	60f8      	str	r0, [r7, #12]
 801ec8c:	60b9      	str	r1, [r7, #8]
 801ec8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ec94:	68fb      	ldr	r3, [r7, #12]
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d106      	bne.n	801eca8 <etharp_output+0x24>
 801ec9a:	4b73      	ldr	r3, [pc, #460]	; (801ee68 <etharp_output+0x1e4>)
 801ec9c:	f240 321e 	movw	r2, #798	; 0x31e
 801eca0:	4972      	ldr	r1, [pc, #456]	; (801ee6c <etharp_output+0x1e8>)
 801eca2:	4873      	ldr	r0, [pc, #460]	; (801ee70 <etharp_output+0x1ec>)
 801eca4:	f003 f802 	bl	8021cac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801eca8:	68bb      	ldr	r3, [r7, #8]
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d106      	bne.n	801ecbc <etharp_output+0x38>
 801ecae:	4b6e      	ldr	r3, [pc, #440]	; (801ee68 <etharp_output+0x1e4>)
 801ecb0:	f240 321f 	movw	r2, #799	; 0x31f
 801ecb4:	496f      	ldr	r1, [pc, #444]	; (801ee74 <etharp_output+0x1f0>)
 801ecb6:	486e      	ldr	r0, [pc, #440]	; (801ee70 <etharp_output+0x1ec>)
 801ecb8:	f002 fff8 	bl	8021cac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d106      	bne.n	801ecd0 <etharp_output+0x4c>
 801ecc2:	4b69      	ldr	r3, [pc, #420]	; (801ee68 <etharp_output+0x1e4>)
 801ecc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801ecc8:	496b      	ldr	r1, [pc, #428]	; (801ee78 <etharp_output+0x1f4>)
 801ecca:	4869      	ldr	r0, [pc, #420]	; (801ee70 <etharp_output+0x1ec>)
 801eccc:	f002 ffee 	bl	8021cac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	68f9      	ldr	r1, [r7, #12]
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	f000 ff1c 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801ecdc:	4603      	mov	r3, r0
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d002      	beq.n	801ece8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ece2:	4b66      	ldr	r3, [pc, #408]	; (801ee7c <etharp_output+0x1f8>)
 801ece4:	61fb      	str	r3, [r7, #28]
 801ece6:	e0af      	b.n	801ee48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ecf0:	2be0      	cmp	r3, #224	; 0xe0
 801ecf2:	d118      	bne.n	801ed26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ecf4:	2301      	movs	r3, #1
 801ecf6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ecfc:	235e      	movs	r3, #94	; 0x5e
 801ecfe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	3301      	adds	r3, #1
 801ed04:	781b      	ldrb	r3, [r3, #0]
 801ed06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ed0a:	b2db      	uxtb	r3, r3
 801ed0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	3302      	adds	r3, #2
 801ed12:	781b      	ldrb	r3, [r3, #0]
 801ed14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	3303      	adds	r3, #3
 801ed1a:	781b      	ldrb	r3, [r3, #0]
 801ed1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ed1e:	f107 0310 	add.w	r3, r7, #16
 801ed22:	61fb      	str	r3, [r7, #28]
 801ed24:	e090      	b.n	801ee48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	681a      	ldr	r2, [r3, #0]
 801ed2a:	68fb      	ldr	r3, [r7, #12]
 801ed2c:	3304      	adds	r3, #4
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	405a      	eors	r2, r3
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	3308      	adds	r3, #8
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	4013      	ands	r3, r2
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d012      	beq.n	801ed64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ed44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ed48:	4293      	cmp	r3, r2
 801ed4a:	d00b      	beq.n	801ed64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	330c      	adds	r3, #12
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d003      	beq.n	801ed5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ed56:	68fb      	ldr	r3, [r7, #12]
 801ed58:	330c      	adds	r3, #12
 801ed5a:	61bb      	str	r3, [r7, #24]
 801ed5c:	e002      	b.n	801ed64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ed5e:	f06f 0303 	mvn.w	r3, #3
 801ed62:	e07d      	b.n	801ee60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ed64:	4b46      	ldr	r3, [pc, #280]	; (801ee80 <etharp_output+0x1fc>)
 801ed66:	781b      	ldrb	r3, [r3, #0]
 801ed68:	4619      	mov	r1, r3
 801ed6a:	4a46      	ldr	r2, [pc, #280]	; (801ee84 <etharp_output+0x200>)
 801ed6c:	460b      	mov	r3, r1
 801ed6e:	005b      	lsls	r3, r3, #1
 801ed70:	440b      	add	r3, r1
 801ed72:	00db      	lsls	r3, r3, #3
 801ed74:	4413      	add	r3, r2
 801ed76:	3314      	adds	r3, #20
 801ed78:	781b      	ldrb	r3, [r3, #0]
 801ed7a:	2b01      	cmp	r3, #1
 801ed7c:	d925      	bls.n	801edca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ed7e:	4b40      	ldr	r3, [pc, #256]	; (801ee80 <etharp_output+0x1fc>)
 801ed80:	781b      	ldrb	r3, [r3, #0]
 801ed82:	4619      	mov	r1, r3
 801ed84:	4a3f      	ldr	r2, [pc, #252]	; (801ee84 <etharp_output+0x200>)
 801ed86:	460b      	mov	r3, r1
 801ed88:	005b      	lsls	r3, r3, #1
 801ed8a:	440b      	add	r3, r1
 801ed8c:	00db      	lsls	r3, r3, #3
 801ed8e:	4413      	add	r3, r2
 801ed90:	3308      	adds	r3, #8
 801ed92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ed94:	68fa      	ldr	r2, [r7, #12]
 801ed96:	429a      	cmp	r2, r3
 801ed98:	d117      	bne.n	801edca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ed9a:	69bb      	ldr	r3, [r7, #24]
 801ed9c:	681a      	ldr	r2, [r3, #0]
 801ed9e:	4b38      	ldr	r3, [pc, #224]	; (801ee80 <etharp_output+0x1fc>)
 801eda0:	781b      	ldrb	r3, [r3, #0]
 801eda2:	4618      	mov	r0, r3
 801eda4:	4937      	ldr	r1, [pc, #220]	; (801ee84 <etharp_output+0x200>)
 801eda6:	4603      	mov	r3, r0
 801eda8:	005b      	lsls	r3, r3, #1
 801edaa:	4403      	add	r3, r0
 801edac:	00db      	lsls	r3, r3, #3
 801edae:	440b      	add	r3, r1
 801edb0:	3304      	adds	r3, #4
 801edb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801edb4:	429a      	cmp	r2, r3
 801edb6:	d108      	bne.n	801edca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801edb8:	4b31      	ldr	r3, [pc, #196]	; (801ee80 <etharp_output+0x1fc>)
 801edba:	781b      	ldrb	r3, [r3, #0]
 801edbc:	461a      	mov	r2, r3
 801edbe:	68b9      	ldr	r1, [r7, #8]
 801edc0:	68f8      	ldr	r0, [r7, #12]
 801edc2:	f7ff fec5 	bl	801eb50 <etharp_output_to_arp_index>
 801edc6:	4603      	mov	r3, r0
 801edc8:	e04a      	b.n	801ee60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801edca:	2300      	movs	r3, #0
 801edcc:	75fb      	strb	r3, [r7, #23]
 801edce:	e031      	b.n	801ee34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801edd0:	7dfa      	ldrb	r2, [r7, #23]
 801edd2:	492c      	ldr	r1, [pc, #176]	; (801ee84 <etharp_output+0x200>)
 801edd4:	4613      	mov	r3, r2
 801edd6:	005b      	lsls	r3, r3, #1
 801edd8:	4413      	add	r3, r2
 801edda:	00db      	lsls	r3, r3, #3
 801eddc:	440b      	add	r3, r1
 801edde:	3314      	adds	r3, #20
 801ede0:	781b      	ldrb	r3, [r3, #0]
 801ede2:	2b01      	cmp	r3, #1
 801ede4:	d923      	bls.n	801ee2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ede6:	7dfa      	ldrb	r2, [r7, #23]
 801ede8:	4926      	ldr	r1, [pc, #152]	; (801ee84 <etharp_output+0x200>)
 801edea:	4613      	mov	r3, r2
 801edec:	005b      	lsls	r3, r3, #1
 801edee:	4413      	add	r3, r2
 801edf0:	00db      	lsls	r3, r3, #3
 801edf2:	440b      	add	r3, r1
 801edf4:	3308      	adds	r3, #8
 801edf6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801edf8:	68fa      	ldr	r2, [r7, #12]
 801edfa:	429a      	cmp	r2, r3
 801edfc:	d117      	bne.n	801ee2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801edfe:	69bb      	ldr	r3, [r7, #24]
 801ee00:	6819      	ldr	r1, [r3, #0]
 801ee02:	7dfa      	ldrb	r2, [r7, #23]
 801ee04:	481f      	ldr	r0, [pc, #124]	; (801ee84 <etharp_output+0x200>)
 801ee06:	4613      	mov	r3, r2
 801ee08:	005b      	lsls	r3, r3, #1
 801ee0a:	4413      	add	r3, r2
 801ee0c:	00db      	lsls	r3, r3, #3
 801ee0e:	4403      	add	r3, r0
 801ee10:	3304      	adds	r3, #4
 801ee12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ee14:	4299      	cmp	r1, r3
 801ee16:	d10a      	bne.n	801ee2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ee18:	4a19      	ldr	r2, [pc, #100]	; (801ee80 <etharp_output+0x1fc>)
 801ee1a:	7dfb      	ldrb	r3, [r7, #23]
 801ee1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ee1e:	7dfb      	ldrb	r3, [r7, #23]
 801ee20:	461a      	mov	r2, r3
 801ee22:	68b9      	ldr	r1, [r7, #8]
 801ee24:	68f8      	ldr	r0, [r7, #12]
 801ee26:	f7ff fe93 	bl	801eb50 <etharp_output_to_arp_index>
 801ee2a:	4603      	mov	r3, r0
 801ee2c:	e018      	b.n	801ee60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ee2e:	7dfb      	ldrb	r3, [r7, #23]
 801ee30:	3301      	adds	r3, #1
 801ee32:	75fb      	strb	r3, [r7, #23]
 801ee34:	7dfb      	ldrb	r3, [r7, #23]
 801ee36:	2b09      	cmp	r3, #9
 801ee38:	d9ca      	bls.n	801edd0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ee3a:	68ba      	ldr	r2, [r7, #8]
 801ee3c:	69b9      	ldr	r1, [r7, #24]
 801ee3e:	68f8      	ldr	r0, [r7, #12]
 801ee40:	f000 f822 	bl	801ee88 <etharp_query>
 801ee44:	4603      	mov	r3, r0
 801ee46:	e00b      	b.n	801ee60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ee4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ee52:	9300      	str	r3, [sp, #0]
 801ee54:	69fb      	ldr	r3, [r7, #28]
 801ee56:	68b9      	ldr	r1, [r7, #8]
 801ee58:	68f8      	ldr	r0, [r7, #12]
 801ee5a:	f001 fe8d 	bl	8020b78 <ethernet_output>
 801ee5e:	4603      	mov	r3, r0
}
 801ee60:	4618      	mov	r0, r3
 801ee62:	3720      	adds	r7, #32
 801ee64:	46bd      	mov	sp, r7
 801ee66:	bd80      	pop	{r7, pc}
 801ee68:	08029138 	.word	0x08029138
 801ee6c:	08029288 	.word	0x08029288
 801ee70:	080291b0 	.word	0x080291b0
 801ee74:	080292d8 	.word	0x080292d8
 801ee78:	08029278 	.word	0x08029278
 801ee7c:	08029af0 	.word	0x08029af0
 801ee80:	200144c0 	.word	0x200144c0
 801ee84:	200143d0 	.word	0x200143d0

0801ee88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b08c      	sub	sp, #48	; 0x30
 801ee8c:	af02      	add	r7, sp, #8
 801ee8e:	60f8      	str	r0, [r7, #12]
 801ee90:	60b9      	str	r1, [r7, #8]
 801ee92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	332a      	adds	r3, #42	; 0x2a
 801ee98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ee9a:	23ff      	movs	r3, #255	; 0xff
 801ee9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801eea0:	2300      	movs	r3, #0
 801eea2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801eea4:	68bb      	ldr	r3, [r7, #8]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	68f9      	ldr	r1, [r7, #12]
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f000 fe32 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801eeb0:	4603      	mov	r3, r0
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d10c      	bne.n	801eed0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801eeb6:	68bb      	ldr	r3, [r7, #8]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801eebe:	2be0      	cmp	r3, #224	; 0xe0
 801eec0:	d006      	beq.n	801eed0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801eec2:	68bb      	ldr	r3, [r7, #8]
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d003      	beq.n	801eed0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801eec8:	68bb      	ldr	r3, [r7, #8]
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d102      	bne.n	801eed6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801eed0:	f06f 030f 	mvn.w	r3, #15
 801eed4:	e101      	b.n	801f0da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801eed6:	68fa      	ldr	r2, [r7, #12]
 801eed8:	2101      	movs	r1, #1
 801eeda:	68b8      	ldr	r0, [r7, #8]
 801eedc:	f7ff fb5c 	bl	801e598 <etharp_find_entry>
 801eee0:	4603      	mov	r3, r0
 801eee2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801eee4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	da02      	bge.n	801eef2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801eeec:	8a7b      	ldrh	r3, [r7, #18]
 801eeee:	b25b      	sxtb	r3, r3
 801eef0:	e0f3      	b.n	801f0da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801eef2:	8a7b      	ldrh	r3, [r7, #18]
 801eef4:	2b7e      	cmp	r3, #126	; 0x7e
 801eef6:	d906      	bls.n	801ef06 <etharp_query+0x7e>
 801eef8:	4b7a      	ldr	r3, [pc, #488]	; (801f0e4 <etharp_query+0x25c>)
 801eefa:	f240 32c1 	movw	r2, #961	; 0x3c1
 801eefe:	497a      	ldr	r1, [pc, #488]	; (801f0e8 <etharp_query+0x260>)
 801ef00:	487a      	ldr	r0, [pc, #488]	; (801f0ec <etharp_query+0x264>)
 801ef02:	f002 fed3 	bl	8021cac <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ef06:	8a7b      	ldrh	r3, [r7, #18]
 801ef08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ef0a:	7c7a      	ldrb	r2, [r7, #17]
 801ef0c:	4978      	ldr	r1, [pc, #480]	; (801f0f0 <etharp_query+0x268>)
 801ef0e:	4613      	mov	r3, r2
 801ef10:	005b      	lsls	r3, r3, #1
 801ef12:	4413      	add	r3, r2
 801ef14:	00db      	lsls	r3, r3, #3
 801ef16:	440b      	add	r3, r1
 801ef18:	3314      	adds	r3, #20
 801ef1a:	781b      	ldrb	r3, [r3, #0]
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	d115      	bne.n	801ef4c <etharp_query+0xc4>
    is_new_entry = 1;
 801ef20:	2301      	movs	r3, #1
 801ef22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ef24:	7c7a      	ldrb	r2, [r7, #17]
 801ef26:	4972      	ldr	r1, [pc, #456]	; (801f0f0 <etharp_query+0x268>)
 801ef28:	4613      	mov	r3, r2
 801ef2a:	005b      	lsls	r3, r3, #1
 801ef2c:	4413      	add	r3, r2
 801ef2e:	00db      	lsls	r3, r3, #3
 801ef30:	440b      	add	r3, r1
 801ef32:	3314      	adds	r3, #20
 801ef34:	2201      	movs	r2, #1
 801ef36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ef38:	7c7a      	ldrb	r2, [r7, #17]
 801ef3a:	496d      	ldr	r1, [pc, #436]	; (801f0f0 <etharp_query+0x268>)
 801ef3c:	4613      	mov	r3, r2
 801ef3e:	005b      	lsls	r3, r3, #1
 801ef40:	4413      	add	r3, r2
 801ef42:	00db      	lsls	r3, r3, #3
 801ef44:	440b      	add	r3, r1
 801ef46:	3308      	adds	r3, #8
 801ef48:	68fa      	ldr	r2, [r7, #12]
 801ef4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ef4c:	7c7a      	ldrb	r2, [r7, #17]
 801ef4e:	4968      	ldr	r1, [pc, #416]	; (801f0f0 <etharp_query+0x268>)
 801ef50:	4613      	mov	r3, r2
 801ef52:	005b      	lsls	r3, r3, #1
 801ef54:	4413      	add	r3, r2
 801ef56:	00db      	lsls	r3, r3, #3
 801ef58:	440b      	add	r3, r1
 801ef5a:	3314      	adds	r3, #20
 801ef5c:	781b      	ldrb	r3, [r3, #0]
 801ef5e:	2b01      	cmp	r3, #1
 801ef60:	d011      	beq.n	801ef86 <etharp_query+0xfe>
 801ef62:	7c7a      	ldrb	r2, [r7, #17]
 801ef64:	4962      	ldr	r1, [pc, #392]	; (801f0f0 <etharp_query+0x268>)
 801ef66:	4613      	mov	r3, r2
 801ef68:	005b      	lsls	r3, r3, #1
 801ef6a:	4413      	add	r3, r2
 801ef6c:	00db      	lsls	r3, r3, #3
 801ef6e:	440b      	add	r3, r1
 801ef70:	3314      	adds	r3, #20
 801ef72:	781b      	ldrb	r3, [r3, #0]
 801ef74:	2b01      	cmp	r3, #1
 801ef76:	d806      	bhi.n	801ef86 <etharp_query+0xfe>
 801ef78:	4b5a      	ldr	r3, [pc, #360]	; (801f0e4 <etharp_query+0x25c>)
 801ef7a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ef7e:	495d      	ldr	r1, [pc, #372]	; (801f0f4 <etharp_query+0x26c>)
 801ef80:	485a      	ldr	r0, [pc, #360]	; (801f0ec <etharp_query+0x264>)
 801ef82:	f002 fe93 	bl	8021cac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ef86:	6a3b      	ldr	r3, [r7, #32]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d102      	bne.n	801ef92 <etharp_query+0x10a>
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d10c      	bne.n	801efac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ef92:	68b9      	ldr	r1, [r7, #8]
 801ef94:	68f8      	ldr	r0, [r7, #12]
 801ef96:	f000 f963 	bl	801f260 <etharp_request>
 801ef9a:	4603      	mov	r3, r0
 801ef9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d102      	bne.n	801efac <etharp_query+0x124>
      return result;
 801efa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801efaa:	e096      	b.n	801f0da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d106      	bne.n	801efc0 <etharp_query+0x138>
 801efb2:	4b4c      	ldr	r3, [pc, #304]	; (801f0e4 <etharp_query+0x25c>)
 801efb4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801efb8:	494f      	ldr	r1, [pc, #316]	; (801f0f8 <etharp_query+0x270>)
 801efba:	484c      	ldr	r0, [pc, #304]	; (801f0ec <etharp_query+0x264>)
 801efbc:	f002 fe76 	bl	8021cac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801efc0:	7c7a      	ldrb	r2, [r7, #17]
 801efc2:	494b      	ldr	r1, [pc, #300]	; (801f0f0 <etharp_query+0x268>)
 801efc4:	4613      	mov	r3, r2
 801efc6:	005b      	lsls	r3, r3, #1
 801efc8:	4413      	add	r3, r2
 801efca:	00db      	lsls	r3, r3, #3
 801efcc:	440b      	add	r3, r1
 801efce:	3314      	adds	r3, #20
 801efd0:	781b      	ldrb	r3, [r3, #0]
 801efd2:	2b01      	cmp	r3, #1
 801efd4:	d917      	bls.n	801f006 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801efd6:	4a49      	ldr	r2, [pc, #292]	; (801f0fc <etharp_query+0x274>)
 801efd8:	7c7b      	ldrb	r3, [r7, #17]
 801efda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801efdc:	7c7a      	ldrb	r2, [r7, #17]
 801efde:	4613      	mov	r3, r2
 801efe0:	005b      	lsls	r3, r3, #1
 801efe2:	4413      	add	r3, r2
 801efe4:	00db      	lsls	r3, r3, #3
 801efe6:	3308      	adds	r3, #8
 801efe8:	4a41      	ldr	r2, [pc, #260]	; (801f0f0 <etharp_query+0x268>)
 801efea:	4413      	add	r3, r2
 801efec:	3304      	adds	r3, #4
 801efee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eff2:	9200      	str	r2, [sp, #0]
 801eff4:	697a      	ldr	r2, [r7, #20]
 801eff6:	6879      	ldr	r1, [r7, #4]
 801eff8:	68f8      	ldr	r0, [r7, #12]
 801effa:	f001 fdbd 	bl	8020b78 <ethernet_output>
 801effe:	4603      	mov	r3, r0
 801f000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f004:	e067      	b.n	801f0d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f006:	7c7a      	ldrb	r2, [r7, #17]
 801f008:	4939      	ldr	r1, [pc, #228]	; (801f0f0 <etharp_query+0x268>)
 801f00a:	4613      	mov	r3, r2
 801f00c:	005b      	lsls	r3, r3, #1
 801f00e:	4413      	add	r3, r2
 801f010:	00db      	lsls	r3, r3, #3
 801f012:	440b      	add	r3, r1
 801f014:	3314      	adds	r3, #20
 801f016:	781b      	ldrb	r3, [r3, #0]
 801f018:	2b01      	cmp	r3, #1
 801f01a:	d15c      	bne.n	801f0d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801f01c:	2300      	movs	r3, #0
 801f01e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f024:	e01c      	b.n	801f060 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f026:	69fb      	ldr	r3, [r7, #28]
 801f028:	895a      	ldrh	r2, [r3, #10]
 801f02a:	69fb      	ldr	r3, [r7, #28]
 801f02c:	891b      	ldrh	r3, [r3, #8]
 801f02e:	429a      	cmp	r2, r3
 801f030:	d10a      	bne.n	801f048 <etharp_query+0x1c0>
 801f032:	69fb      	ldr	r3, [r7, #28]
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	2b00      	cmp	r3, #0
 801f038:	d006      	beq.n	801f048 <etharp_query+0x1c0>
 801f03a:	4b2a      	ldr	r3, [pc, #168]	; (801f0e4 <etharp_query+0x25c>)
 801f03c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801f040:	492f      	ldr	r1, [pc, #188]	; (801f100 <etharp_query+0x278>)
 801f042:	482a      	ldr	r0, [pc, #168]	; (801f0ec <etharp_query+0x264>)
 801f044:	f002 fe32 	bl	8021cac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801f048:	69fb      	ldr	r3, [r7, #28]
 801f04a:	7b1b      	ldrb	r3, [r3, #12]
 801f04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f050:	2b00      	cmp	r3, #0
 801f052:	d002      	beq.n	801f05a <etharp_query+0x1d2>
        copy_needed = 1;
 801f054:	2301      	movs	r3, #1
 801f056:	61bb      	str	r3, [r7, #24]
        break;
 801f058:	e005      	b.n	801f066 <etharp_query+0x1de>
      }
      p = p->next;
 801f05a:	69fb      	ldr	r3, [r7, #28]
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f060:	69fb      	ldr	r3, [r7, #28]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d1df      	bne.n	801f026 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801f066:	69bb      	ldr	r3, [r7, #24]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d007      	beq.n	801f07c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801f06c:	687a      	ldr	r2, [r7, #4]
 801f06e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801f072:	200e      	movs	r0, #14
 801f074:	f7f6 f922 	bl	80152bc <pbuf_clone>
 801f078:	61f8      	str	r0, [r7, #28]
 801f07a:	e004      	b.n	801f086 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801f080:	69f8      	ldr	r0, [r7, #28]
 801f082:	f7f5 fe11 	bl	8014ca8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801f086:	69fb      	ldr	r3, [r7, #28]
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d021      	beq.n	801f0d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801f08c:	7c7a      	ldrb	r2, [r7, #17]
 801f08e:	4918      	ldr	r1, [pc, #96]	; (801f0f0 <etharp_query+0x268>)
 801f090:	4613      	mov	r3, r2
 801f092:	005b      	lsls	r3, r3, #1
 801f094:	4413      	add	r3, r2
 801f096:	00db      	lsls	r3, r3, #3
 801f098:	440b      	add	r3, r1
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d00a      	beq.n	801f0b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801f0a0:	7c7a      	ldrb	r2, [r7, #17]
 801f0a2:	4913      	ldr	r1, [pc, #76]	; (801f0f0 <etharp_query+0x268>)
 801f0a4:	4613      	mov	r3, r2
 801f0a6:	005b      	lsls	r3, r3, #1
 801f0a8:	4413      	add	r3, r2
 801f0aa:	00db      	lsls	r3, r3, #3
 801f0ac:	440b      	add	r3, r1
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	4618      	mov	r0, r3
 801f0b2:	f7f5 fd53 	bl	8014b5c <pbuf_free>
      }
      arp_table[i].q = p;
 801f0b6:	7c7a      	ldrb	r2, [r7, #17]
 801f0b8:	490d      	ldr	r1, [pc, #52]	; (801f0f0 <etharp_query+0x268>)
 801f0ba:	4613      	mov	r3, r2
 801f0bc:	005b      	lsls	r3, r3, #1
 801f0be:	4413      	add	r3, r2
 801f0c0:	00db      	lsls	r3, r3, #3
 801f0c2:	440b      	add	r3, r1
 801f0c4:	69fa      	ldr	r2, [r7, #28]
 801f0c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801f0c8:	2300      	movs	r3, #0
 801f0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f0ce:	e002      	b.n	801f0d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801f0d0:	23ff      	movs	r3, #255	; 0xff
 801f0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801f0d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801f0da:	4618      	mov	r0, r3
 801f0dc:	3728      	adds	r7, #40	; 0x28
 801f0de:	46bd      	mov	sp, r7
 801f0e0:	bd80      	pop	{r7, pc}
 801f0e2:	bf00      	nop
 801f0e4:	08029138 	.word	0x08029138
 801f0e8:	080292e4 	.word	0x080292e4
 801f0ec:	080291b0 	.word	0x080291b0
 801f0f0:	200143d0 	.word	0x200143d0
 801f0f4:	080292f4 	.word	0x080292f4
 801f0f8:	080292d8 	.word	0x080292d8
 801f0fc:	200144c0 	.word	0x200144c0
 801f100:	0802931c 	.word	0x0802931c

0801f104 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f104:	b580      	push	{r7, lr}
 801f106:	b08a      	sub	sp, #40	; 0x28
 801f108:	af02      	add	r7, sp, #8
 801f10a:	60f8      	str	r0, [r7, #12]
 801f10c:	60b9      	str	r1, [r7, #8]
 801f10e:	607a      	str	r2, [r7, #4]
 801f110:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801f112:	2300      	movs	r3, #0
 801f114:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d106      	bne.n	801f12a <etharp_raw+0x26>
 801f11c:	4b3a      	ldr	r3, [pc, #232]	; (801f208 <etharp_raw+0x104>)
 801f11e:	f240 4257 	movw	r2, #1111	; 0x457
 801f122:	493a      	ldr	r1, [pc, #232]	; (801f20c <etharp_raw+0x108>)
 801f124:	483a      	ldr	r0, [pc, #232]	; (801f210 <etharp_raw+0x10c>)
 801f126:	f002 fdc1 	bl	8021cac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f12a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f12e:	211c      	movs	r1, #28
 801f130:	200e      	movs	r0, #14
 801f132:	f7f5 f9fd 	bl	8014530 <pbuf_alloc>
 801f136:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f138:	69bb      	ldr	r3, [r7, #24]
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	d102      	bne.n	801f144 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801f13e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f142:	e05d      	b.n	801f200 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f144:	69bb      	ldr	r3, [r7, #24]
 801f146:	895b      	ldrh	r3, [r3, #10]
 801f148:	2b1b      	cmp	r3, #27
 801f14a:	d806      	bhi.n	801f15a <etharp_raw+0x56>
 801f14c:	4b2e      	ldr	r3, [pc, #184]	; (801f208 <etharp_raw+0x104>)
 801f14e:	f240 4262 	movw	r2, #1122	; 0x462
 801f152:	4930      	ldr	r1, [pc, #192]	; (801f214 <etharp_raw+0x110>)
 801f154:	482e      	ldr	r0, [pc, #184]	; (801f210 <etharp_raw+0x10c>)
 801f156:	f002 fda9 	bl	8021cac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f15a:	69bb      	ldr	r3, [r7, #24]
 801f15c:	685b      	ldr	r3, [r3, #4]
 801f15e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f160:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801f162:	4618      	mov	r0, r3
 801f164:	f7f3 f93a 	bl	80123dc <lwip_htons>
 801f168:	4603      	mov	r3, r0
 801f16a:	461a      	mov	r2, r3
 801f16c:	697b      	ldr	r3, [r7, #20]
 801f16e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f176:	2b06      	cmp	r3, #6
 801f178:	d006      	beq.n	801f188 <etharp_raw+0x84>
 801f17a:	4b23      	ldr	r3, [pc, #140]	; (801f208 <etharp_raw+0x104>)
 801f17c:	f240 4269 	movw	r2, #1129	; 0x469
 801f180:	4925      	ldr	r1, [pc, #148]	; (801f218 <etharp_raw+0x114>)
 801f182:	4823      	ldr	r0, [pc, #140]	; (801f210 <etharp_raw+0x10c>)
 801f184:	f002 fd92 	bl	8021cac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f188:	697b      	ldr	r3, [r7, #20]
 801f18a:	3308      	adds	r3, #8
 801f18c:	2206      	movs	r2, #6
 801f18e:	6839      	ldr	r1, [r7, #0]
 801f190:	4618      	mov	r0, r3
 801f192:	f002 f847 	bl	8021224 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f196:	697b      	ldr	r3, [r7, #20]
 801f198:	3312      	adds	r3, #18
 801f19a:	2206      	movs	r2, #6
 801f19c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f19e:	4618      	mov	r0, r3
 801f1a0:	f002 f840 	bl	8021224 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801f1a4:	697b      	ldr	r3, [r7, #20]
 801f1a6:	330e      	adds	r3, #14
 801f1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f1aa:	6812      	ldr	r2, [r2, #0]
 801f1ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f1ae:	697b      	ldr	r3, [r7, #20]
 801f1b0:	3318      	adds	r3, #24
 801f1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f1b4:	6812      	ldr	r2, [r2, #0]
 801f1b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f1b8:	697b      	ldr	r3, [r7, #20]
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	701a      	strb	r2, [r3, #0]
 801f1be:	2200      	movs	r2, #0
 801f1c0:	f042 0201 	orr.w	r2, r2, #1
 801f1c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f1c6:	697b      	ldr	r3, [r7, #20]
 801f1c8:	2200      	movs	r2, #0
 801f1ca:	f042 0208 	orr.w	r2, r2, #8
 801f1ce:	709a      	strb	r2, [r3, #2]
 801f1d0:	2200      	movs	r2, #0
 801f1d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f1d4:	697b      	ldr	r3, [r7, #20]
 801f1d6:	2206      	movs	r2, #6
 801f1d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f1da:	697b      	ldr	r3, [r7, #20]
 801f1dc:	2204      	movs	r2, #4
 801f1de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f1e0:	f640 0306 	movw	r3, #2054	; 0x806
 801f1e4:	9300      	str	r3, [sp, #0]
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	68ba      	ldr	r2, [r7, #8]
 801f1ea:	69b9      	ldr	r1, [r7, #24]
 801f1ec:	68f8      	ldr	r0, [r7, #12]
 801f1ee:	f001 fcc3 	bl	8020b78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801f1f2:	69b8      	ldr	r0, [r7, #24]
 801f1f4:	f7f5 fcb2 	bl	8014b5c <pbuf_free>
  p = NULL;
 801f1f8:	2300      	movs	r3, #0
 801f1fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f1fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f200:	4618      	mov	r0, r3
 801f202:	3720      	adds	r7, #32
 801f204:	46bd      	mov	sp, r7
 801f206:	bd80      	pop	{r7, pc}
 801f208:	08029138 	.word	0x08029138
 801f20c:	08029288 	.word	0x08029288
 801f210:	080291b0 	.word	0x080291b0
 801f214:	08029338 	.word	0x08029338
 801f218:	0802936c 	.word	0x0802936c

0801f21c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	b088      	sub	sp, #32
 801f220:	af04      	add	r7, sp, #16
 801f222:	60f8      	str	r0, [r7, #12]
 801f224:	60b9      	str	r1, [r7, #8]
 801f226:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f228:	68fb      	ldr	r3, [r7, #12]
 801f22a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f22e:	68fb      	ldr	r3, [r7, #12]
 801f230:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f238:	2201      	movs	r2, #1
 801f23a:	9203      	str	r2, [sp, #12]
 801f23c:	68ba      	ldr	r2, [r7, #8]
 801f23e:	9202      	str	r2, [sp, #8]
 801f240:	4a06      	ldr	r2, [pc, #24]	; (801f25c <etharp_request_dst+0x40>)
 801f242:	9201      	str	r2, [sp, #4]
 801f244:	9300      	str	r3, [sp, #0]
 801f246:	4603      	mov	r3, r0
 801f248:	687a      	ldr	r2, [r7, #4]
 801f24a:	68f8      	ldr	r0, [r7, #12]
 801f24c:	f7ff ff5a 	bl	801f104 <etharp_raw>
 801f250:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f252:	4618      	mov	r0, r3
 801f254:	3710      	adds	r7, #16
 801f256:	46bd      	mov	sp, r7
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	bf00      	nop
 801f25c:	08029af8 	.word	0x08029af8

0801f260 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f260:	b580      	push	{r7, lr}
 801f262:	b082      	sub	sp, #8
 801f264:	af00      	add	r7, sp, #0
 801f266:	6078      	str	r0, [r7, #4]
 801f268:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f26a:	4a05      	ldr	r2, [pc, #20]	; (801f280 <etharp_request+0x20>)
 801f26c:	6839      	ldr	r1, [r7, #0]
 801f26e:	6878      	ldr	r0, [r7, #4]
 801f270:	f7ff ffd4 	bl	801f21c <etharp_request_dst>
 801f274:	4603      	mov	r3, r0
}
 801f276:	4618      	mov	r0, r3
 801f278:	3708      	adds	r7, #8
 801f27a:	46bd      	mov	sp, r7
 801f27c:	bd80      	pop	{r7, pc}
 801f27e:	bf00      	nop
 801f280:	08029af0 	.word	0x08029af0

0801f284 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f284:	b580      	push	{r7, lr}
 801f286:	b08e      	sub	sp, #56	; 0x38
 801f288:	af04      	add	r7, sp, #16
 801f28a:	6078      	str	r0, [r7, #4]
 801f28c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801f28e:	4b7c      	ldr	r3, [pc, #496]	; (801f480 <icmp_input+0x1fc>)
 801f290:	689b      	ldr	r3, [r3, #8]
 801f292:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f296:	781b      	ldrb	r3, [r3, #0]
 801f298:	f003 030f 	and.w	r3, r3, #15
 801f29c:	b2db      	uxtb	r3, r3
 801f29e:	009b      	lsls	r3, r3, #2
 801f2a0:	b2db      	uxtb	r3, r3
 801f2a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801f2a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f2a6:	2b13      	cmp	r3, #19
 801f2a8:	f240 80d2 	bls.w	801f450 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	895b      	ldrh	r3, [r3, #10]
 801f2b0:	2b03      	cmp	r3, #3
 801f2b2:	f240 80cf 	bls.w	801f454 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	685b      	ldr	r3, [r3, #4]
 801f2ba:	781b      	ldrb	r3, [r3, #0]
 801f2bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	685b      	ldr	r3, [r3, #4]
 801f2c4:	785b      	ldrb	r3, [r3, #1]
 801f2c6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f2ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	f000 80b7 	beq.w	801f442 <icmp_input+0x1be>
 801f2d4:	2b08      	cmp	r3, #8
 801f2d6:	f040 80b7 	bne.w	801f448 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801f2da:	4b6a      	ldr	r3, [pc, #424]	; (801f484 <icmp_input+0x200>)
 801f2dc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f2de:	4b68      	ldr	r3, [pc, #416]	; (801f480 <icmp_input+0x1fc>)
 801f2e0:	695b      	ldr	r3, [r3, #20]
 801f2e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f2e6:	2be0      	cmp	r3, #224	; 0xe0
 801f2e8:	f000 80bb 	beq.w	801f462 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f2ec:	4b64      	ldr	r3, [pc, #400]	; (801f480 <icmp_input+0x1fc>)
 801f2ee:	695b      	ldr	r3, [r3, #20]
 801f2f0:	4a63      	ldr	r2, [pc, #396]	; (801f480 <icmp_input+0x1fc>)
 801f2f2:	6812      	ldr	r2, [r2, #0]
 801f2f4:	4611      	mov	r1, r2
 801f2f6:	4618      	mov	r0, r3
 801f2f8:	f000 fc0c 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	f040 80b1 	bne.w	801f466 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	891b      	ldrh	r3, [r3, #8]
 801f308:	2b07      	cmp	r3, #7
 801f30a:	f240 80a5 	bls.w	801f458 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f30e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f310:	330e      	adds	r3, #14
 801f312:	4619      	mov	r1, r3
 801f314:	6878      	ldr	r0, [r7, #4]
 801f316:	f7f5 fb59 	bl	80149cc <pbuf_add_header>
 801f31a:	4603      	mov	r3, r0
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d04b      	beq.n	801f3b8 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	891a      	ldrh	r2, [r3, #8]
 801f324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f326:	4413      	add	r3, r2
 801f328:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	891b      	ldrh	r3, [r3, #8]
 801f32e:	8b7a      	ldrh	r2, [r7, #26]
 801f330:	429a      	cmp	r2, r3
 801f332:	f0c0 809a 	bcc.w	801f46a <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f336:	8b7b      	ldrh	r3, [r7, #26]
 801f338:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f33c:	4619      	mov	r1, r3
 801f33e:	200e      	movs	r0, #14
 801f340:	f7f5 f8f6 	bl	8014530 <pbuf_alloc>
 801f344:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f346:	697b      	ldr	r3, [r7, #20]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	f000 8090 	beq.w	801f46e <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f34e:	697b      	ldr	r3, [r7, #20]
 801f350:	895b      	ldrh	r3, [r3, #10]
 801f352:	461a      	mov	r2, r3
 801f354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f356:	3308      	adds	r3, #8
 801f358:	429a      	cmp	r2, r3
 801f35a:	d203      	bcs.n	801f364 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f35c:	6978      	ldr	r0, [r7, #20]
 801f35e:	f7f5 fbfd 	bl	8014b5c <pbuf_free>
          goto icmperr;
 801f362:	e085      	b.n	801f470 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f364:	697b      	ldr	r3, [r7, #20]
 801f366:	685b      	ldr	r3, [r3, #4]
 801f368:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f36a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f36c:	4618      	mov	r0, r3
 801f36e:	f001 ff59 	bl	8021224 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f374:	4619      	mov	r1, r3
 801f376:	6978      	ldr	r0, [r7, #20]
 801f378:	f7f5 fb38 	bl	80149ec <pbuf_remove_header>
 801f37c:	4603      	mov	r3, r0
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d009      	beq.n	801f396 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f382:	4b41      	ldr	r3, [pc, #260]	; (801f488 <icmp_input+0x204>)
 801f384:	22b6      	movs	r2, #182	; 0xb6
 801f386:	4941      	ldr	r1, [pc, #260]	; (801f48c <icmp_input+0x208>)
 801f388:	4841      	ldr	r0, [pc, #260]	; (801f490 <icmp_input+0x20c>)
 801f38a:	f002 fc8f 	bl	8021cac <iprintf>
          pbuf_free(r);
 801f38e:	6978      	ldr	r0, [r7, #20]
 801f390:	f7f5 fbe4 	bl	8014b5c <pbuf_free>
          goto icmperr;
 801f394:	e06c      	b.n	801f470 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f396:	6879      	ldr	r1, [r7, #4]
 801f398:	6978      	ldr	r0, [r7, #20]
 801f39a:	f7f5 fd13 	bl	8014dc4 <pbuf_copy>
 801f39e:	4603      	mov	r3, r0
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d003      	beq.n	801f3ac <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f3a4:	6978      	ldr	r0, [r7, #20]
 801f3a6:	f7f5 fbd9 	bl	8014b5c <pbuf_free>
          goto icmperr;
 801f3aa:	e061      	b.n	801f470 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 801f3ac:	6878      	ldr	r0, [r7, #4]
 801f3ae:	f7f5 fbd5 	bl	8014b5c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f3b2:	697b      	ldr	r3, [r7, #20]
 801f3b4:	607b      	str	r3, [r7, #4]
 801f3b6:	e00f      	b.n	801f3d8 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f3b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f3ba:	330e      	adds	r3, #14
 801f3bc:	4619      	mov	r1, r3
 801f3be:	6878      	ldr	r0, [r7, #4]
 801f3c0:	f7f5 fb14 	bl	80149ec <pbuf_remove_header>
 801f3c4:	4603      	mov	r3, r0
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d006      	beq.n	801f3d8 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f3ca:	4b2f      	ldr	r3, [pc, #188]	; (801f488 <icmp_input+0x204>)
 801f3cc:	22c7      	movs	r2, #199	; 0xc7
 801f3ce:	4931      	ldr	r1, [pc, #196]	; (801f494 <icmp_input+0x210>)
 801f3d0:	482f      	ldr	r0, [pc, #188]	; (801f490 <icmp_input+0x20c>)
 801f3d2:	f002 fc6b 	bl	8021cac <iprintf>
          goto icmperr;
 801f3d6:	e04b      	b.n	801f470 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	685b      	ldr	r3, [r3, #4]
 801f3dc:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f3de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f3e0:	4619      	mov	r1, r3
 801f3e2:	6878      	ldr	r0, [r7, #4]
 801f3e4:	f7f5 faf2 	bl	80149cc <pbuf_add_header>
 801f3e8:	4603      	mov	r3, r0
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d12b      	bne.n	801f446 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	685b      	ldr	r3, [r3, #4]
 801f3f2:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f3f4:	69fb      	ldr	r3, [r7, #28]
 801f3f6:	681a      	ldr	r2, [r3, #0]
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f3fc:	4b20      	ldr	r3, [pc, #128]	; (801f480 <icmp_input+0x1fc>)
 801f3fe:	691a      	ldr	r2, [r3, #16]
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f404:	693b      	ldr	r3, [r7, #16]
 801f406:	2200      	movs	r2, #0
 801f408:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f40a:	693b      	ldr	r3, [r7, #16]
 801f40c:	2200      	movs	r2, #0
 801f40e:	709a      	strb	r2, [r3, #2]
 801f410:	2200      	movs	r2, #0
 801f412:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	22ff      	movs	r2, #255	; 0xff
 801f418:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	2200      	movs	r2, #0
 801f41e:	729a      	strb	r2, [r3, #10]
 801f420:	2200      	movs	r2, #0
 801f422:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f424:	683b      	ldr	r3, [r7, #0]
 801f426:	9302      	str	r3, [sp, #8]
 801f428:	2301      	movs	r3, #1
 801f42a:	9301      	str	r3, [sp, #4]
 801f42c:	2300      	movs	r3, #0
 801f42e:	9300      	str	r3, [sp, #0]
 801f430:	23ff      	movs	r3, #255	; 0xff
 801f432:	2200      	movs	r2, #0
 801f434:	69f9      	ldr	r1, [r7, #28]
 801f436:	6878      	ldr	r0, [r7, #4]
 801f438:	f000 fa94 	bl	801f964 <ip4_output_if>
 801f43c:	4603      	mov	r3, r0
 801f43e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f440:	e001      	b.n	801f446 <icmp_input+0x1c2>
      break;
 801f442:	bf00      	nop
 801f444:	e000      	b.n	801f448 <icmp_input+0x1c4>
      break;
 801f446:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f448:	6878      	ldr	r0, [r7, #4]
 801f44a:	f7f5 fb87 	bl	8014b5c <pbuf_free>
  return;
 801f44e:	e013      	b.n	801f478 <icmp_input+0x1f4>
    goto lenerr;
 801f450:	bf00      	nop
 801f452:	e002      	b.n	801f45a <icmp_input+0x1d6>
    goto lenerr;
 801f454:	bf00      	nop
 801f456:	e000      	b.n	801f45a <icmp_input+0x1d6>
        goto lenerr;
 801f458:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f45a:	6878      	ldr	r0, [r7, #4]
 801f45c:	f7f5 fb7e 	bl	8014b5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f460:	e00a      	b.n	801f478 <icmp_input+0x1f4>
        goto icmperr;
 801f462:	bf00      	nop
 801f464:	e004      	b.n	801f470 <icmp_input+0x1ec>
        goto icmperr;
 801f466:	bf00      	nop
 801f468:	e002      	b.n	801f470 <icmp_input+0x1ec>
          goto icmperr;
 801f46a:	bf00      	nop
 801f46c:	e000      	b.n	801f470 <icmp_input+0x1ec>
          goto icmperr;
 801f46e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f470:	6878      	ldr	r0, [r7, #4]
 801f472:	f7f5 fb73 	bl	8014b5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f476:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f478:	3728      	adds	r7, #40	; 0x28
 801f47a:	46bd      	mov	sp, r7
 801f47c:	bd80      	pop	{r7, pc}
 801f47e:	bf00      	nop
 801f480:	200177a8 	.word	0x200177a8
 801f484:	200177bc 	.word	0x200177bc
 801f488:	080293b0 	.word	0x080293b0
 801f48c:	080293e8 	.word	0x080293e8
 801f490:	08029420 	.word	0x08029420
 801f494:	08029448 	.word	0x08029448

0801f498 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f498:	b580      	push	{r7, lr}
 801f49a:	b082      	sub	sp, #8
 801f49c:	af00      	add	r7, sp, #0
 801f49e:	6078      	str	r0, [r7, #4]
 801f4a0:	460b      	mov	r3, r1
 801f4a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801f4a4:	78fb      	ldrb	r3, [r7, #3]
 801f4a6:	461a      	mov	r2, r3
 801f4a8:	2103      	movs	r1, #3
 801f4aa:	6878      	ldr	r0, [r7, #4]
 801f4ac:	f000 f814 	bl	801f4d8 <icmp_send_response>
}
 801f4b0:	bf00      	nop
 801f4b2:	3708      	adds	r7, #8
 801f4b4:	46bd      	mov	sp, r7
 801f4b6:	bd80      	pop	{r7, pc}

0801f4b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b082      	sub	sp, #8
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
 801f4c0:	460b      	mov	r3, r1
 801f4c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801f4c4:	78fb      	ldrb	r3, [r7, #3]
 801f4c6:	461a      	mov	r2, r3
 801f4c8:	210b      	movs	r1, #11
 801f4ca:	6878      	ldr	r0, [r7, #4]
 801f4cc:	f000 f804 	bl	801f4d8 <icmp_send_response>
}
 801f4d0:	bf00      	nop
 801f4d2:	3708      	adds	r7, #8
 801f4d4:	46bd      	mov	sp, r7
 801f4d6:	bd80      	pop	{r7, pc}

0801f4d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f4d8:	b580      	push	{r7, lr}
 801f4da:	b08c      	sub	sp, #48	; 0x30
 801f4dc:	af04      	add	r7, sp, #16
 801f4de:	6078      	str	r0, [r7, #4]
 801f4e0:	460b      	mov	r3, r1
 801f4e2:	70fb      	strb	r3, [r7, #3]
 801f4e4:	4613      	mov	r3, r2
 801f4e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f4e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f4ec:	2124      	movs	r1, #36	; 0x24
 801f4ee:	2022      	movs	r0, #34	; 0x22
 801f4f0:	f7f5 f81e 	bl	8014530 <pbuf_alloc>
 801f4f4:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801f4f6:	69bb      	ldr	r3, [r7, #24]
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d04c      	beq.n	801f596 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f4fc:	69bb      	ldr	r3, [r7, #24]
 801f4fe:	895b      	ldrh	r3, [r3, #10]
 801f500:	2b23      	cmp	r3, #35	; 0x23
 801f502:	d806      	bhi.n	801f512 <icmp_send_response+0x3a>
 801f504:	4b26      	ldr	r3, [pc, #152]	; (801f5a0 <icmp_send_response+0xc8>)
 801f506:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801f50a:	4926      	ldr	r1, [pc, #152]	; (801f5a4 <icmp_send_response+0xcc>)
 801f50c:	4826      	ldr	r0, [pc, #152]	; (801f5a8 <icmp_send_response+0xd0>)
 801f50e:	f002 fbcd 	bl	8021cac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	685b      	ldr	r3, [r3, #4]
 801f516:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f518:	69bb      	ldr	r3, [r7, #24]
 801f51a:	685b      	ldr	r3, [r3, #4]
 801f51c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801f51e:	693b      	ldr	r3, [r7, #16]
 801f520:	78fa      	ldrb	r2, [r7, #3]
 801f522:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f524:	693b      	ldr	r3, [r7, #16]
 801f526:	78ba      	ldrb	r2, [r7, #2]
 801f528:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f52a:	693b      	ldr	r3, [r7, #16]
 801f52c:	2200      	movs	r2, #0
 801f52e:	711a      	strb	r2, [r3, #4]
 801f530:	2200      	movs	r2, #0
 801f532:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f534:	693b      	ldr	r3, [r7, #16]
 801f536:	2200      	movs	r2, #0
 801f538:	719a      	strb	r2, [r3, #6]
 801f53a:	2200      	movs	r2, #0
 801f53c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f53e:	69bb      	ldr	r3, [r7, #24]
 801f540:	685b      	ldr	r3, [r3, #4]
 801f542:	f103 0008 	add.w	r0, r3, #8
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	685b      	ldr	r3, [r3, #4]
 801f54a:	221c      	movs	r2, #28
 801f54c:	4619      	mov	r1, r3
 801f54e:	f001 fe69 	bl	8021224 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f552:	697b      	ldr	r3, [r7, #20]
 801f554:	68db      	ldr	r3, [r3, #12]
 801f556:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f558:	f107 030c 	add.w	r3, r7, #12
 801f55c:	4618      	mov	r0, r3
 801f55e:	f000 f825 	bl	801f5ac <ip4_route>
 801f562:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801f564:	69fb      	ldr	r3, [r7, #28]
 801f566:	2b00      	cmp	r3, #0
 801f568:	d011      	beq.n	801f58e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f56a:	693b      	ldr	r3, [r7, #16]
 801f56c:	2200      	movs	r2, #0
 801f56e:	709a      	strb	r2, [r3, #2]
 801f570:	2200      	movs	r2, #0
 801f572:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f574:	f107 020c 	add.w	r2, r7, #12
 801f578:	69fb      	ldr	r3, [r7, #28]
 801f57a:	9302      	str	r3, [sp, #8]
 801f57c:	2301      	movs	r3, #1
 801f57e:	9301      	str	r3, [sp, #4]
 801f580:	2300      	movs	r3, #0
 801f582:	9300      	str	r3, [sp, #0]
 801f584:	23ff      	movs	r3, #255	; 0xff
 801f586:	2100      	movs	r1, #0
 801f588:	69b8      	ldr	r0, [r7, #24]
 801f58a:	f000 f9eb 	bl	801f964 <ip4_output_if>
  }
  pbuf_free(q);
 801f58e:	69b8      	ldr	r0, [r7, #24]
 801f590:	f7f5 fae4 	bl	8014b5c <pbuf_free>
 801f594:	e000      	b.n	801f598 <icmp_send_response+0xc0>
    return;
 801f596:	bf00      	nop
}
 801f598:	3720      	adds	r7, #32
 801f59a:	46bd      	mov	sp, r7
 801f59c:	bd80      	pop	{r7, pc}
 801f59e:	bf00      	nop
 801f5a0:	080293b0 	.word	0x080293b0
 801f5a4:	0802947c 	.word	0x0802947c
 801f5a8:	08029420 	.word	0x08029420

0801f5ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f5ac:	b480      	push	{r7}
 801f5ae:	b085      	sub	sp, #20
 801f5b0:	af00      	add	r7, sp, #0
 801f5b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801f5b4:	4b33      	ldr	r3, [pc, #204]	; (801f684 <ip4_route+0xd8>)
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	60fb      	str	r3, [r7, #12]
 801f5ba:	e036      	b.n	801f62a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f5bc:	68fb      	ldr	r3, [r7, #12]
 801f5be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f5c2:	f003 0301 	and.w	r3, r3, #1
 801f5c6:	b2db      	uxtb	r3, r3
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d02b      	beq.n	801f624 <ip4_route+0x78>
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f5d2:	089b      	lsrs	r3, r3, #2
 801f5d4:	f003 0301 	and.w	r3, r3, #1
 801f5d8:	b2db      	uxtb	r3, r3
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d022      	beq.n	801f624 <ip4_route+0x78>
 801f5de:	68fb      	ldr	r3, [r7, #12]
 801f5e0:	3304      	adds	r3, #4
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d01d      	beq.n	801f624 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	681a      	ldr	r2, [r3, #0]
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	3304      	adds	r3, #4
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	405a      	eors	r2, r3
 801f5f4:	68fb      	ldr	r3, [r7, #12]
 801f5f6:	3308      	adds	r3, #8
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	4013      	ands	r3, r2
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d101      	bne.n	801f604 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f600:	68fb      	ldr	r3, [r7, #12]
 801f602:	e038      	b.n	801f676 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f60a:	f003 0302 	and.w	r3, r3, #2
 801f60e:	2b00      	cmp	r3, #0
 801f610:	d108      	bne.n	801f624 <ip4_route+0x78>
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	681a      	ldr	r2, [r3, #0]
 801f616:	68fb      	ldr	r3, [r7, #12]
 801f618:	330c      	adds	r3, #12
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	429a      	cmp	r2, r3
 801f61e:	d101      	bne.n	801f624 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	e028      	b.n	801f676 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f624:	68fb      	ldr	r3, [r7, #12]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	60fb      	str	r3, [r7, #12]
 801f62a:	68fb      	ldr	r3, [r7, #12]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d1c5      	bne.n	801f5bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f630:	4b15      	ldr	r3, [pc, #84]	; (801f688 <ip4_route+0xdc>)
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	2b00      	cmp	r3, #0
 801f636:	d01a      	beq.n	801f66e <ip4_route+0xc2>
 801f638:	4b13      	ldr	r3, [pc, #76]	; (801f688 <ip4_route+0xdc>)
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f640:	f003 0301 	and.w	r3, r3, #1
 801f644:	2b00      	cmp	r3, #0
 801f646:	d012      	beq.n	801f66e <ip4_route+0xc2>
 801f648:	4b0f      	ldr	r3, [pc, #60]	; (801f688 <ip4_route+0xdc>)
 801f64a:	681b      	ldr	r3, [r3, #0]
 801f64c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f650:	f003 0304 	and.w	r3, r3, #4
 801f654:	2b00      	cmp	r3, #0
 801f656:	d00a      	beq.n	801f66e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f658:	4b0b      	ldr	r3, [pc, #44]	; (801f688 <ip4_route+0xdc>)
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	3304      	adds	r3, #4
 801f65e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f660:	2b00      	cmp	r3, #0
 801f662:	d004      	beq.n	801f66e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	681b      	ldr	r3, [r3, #0]
 801f668:	b2db      	uxtb	r3, r3
 801f66a:	2b7f      	cmp	r3, #127	; 0x7f
 801f66c:	d101      	bne.n	801f672 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f66e:	2300      	movs	r3, #0
 801f670:	e001      	b.n	801f676 <ip4_route+0xca>
  }

  return netif_default;
 801f672:	4b05      	ldr	r3, [pc, #20]	; (801f688 <ip4_route+0xdc>)
 801f674:	681b      	ldr	r3, [r3, #0]
}
 801f676:	4618      	mov	r0, r3
 801f678:	3714      	adds	r7, #20
 801f67a:	46bd      	mov	sp, r7
 801f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f680:	4770      	bx	lr
 801f682:	bf00      	nop
 801f684:	2001b18c 	.word	0x2001b18c
 801f688:	2001b190 	.word	0x2001b190

0801f68c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f68c:	b580      	push	{r7, lr}
 801f68e:	b082      	sub	sp, #8
 801f690:	af00      	add	r7, sp, #0
 801f692:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f69a:	f003 0301 	and.w	r3, r3, #1
 801f69e:	b2db      	uxtb	r3, r3
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d016      	beq.n	801f6d2 <ip4_input_accept+0x46>
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	3304      	adds	r3, #4
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d011      	beq.n	801f6d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f6ae:	4b0b      	ldr	r3, [pc, #44]	; (801f6dc <ip4_input_accept+0x50>)
 801f6b0:	695a      	ldr	r2, [r3, #20]
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	3304      	adds	r3, #4
 801f6b6:	681b      	ldr	r3, [r3, #0]
 801f6b8:	429a      	cmp	r2, r3
 801f6ba:	d008      	beq.n	801f6ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f6bc:	4b07      	ldr	r3, [pc, #28]	; (801f6dc <ip4_input_accept+0x50>)
 801f6be:	695b      	ldr	r3, [r3, #20]
 801f6c0:	6879      	ldr	r1, [r7, #4]
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	f000 fa26 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801f6c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d001      	beq.n	801f6d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f6ce:	2301      	movs	r3, #1
 801f6d0:	e000      	b.n	801f6d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f6d2:	2300      	movs	r3, #0
}
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	3708      	adds	r7, #8
 801f6d8:	46bd      	mov	sp, r7
 801f6da:	bd80      	pop	{r7, pc}
 801f6dc:	200177a8 	.word	0x200177a8

0801f6e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f6e0:	b580      	push	{r7, lr}
 801f6e2:	b088      	sub	sp, #32
 801f6e4:	af00      	add	r7, sp, #0
 801f6e6:	6078      	str	r0, [r7, #4]
 801f6e8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f6ea:	2301      	movs	r3, #1
 801f6ec:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	685b      	ldr	r3, [r3, #4]
 801f6f2:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801f6f4:	693b      	ldr	r3, [r7, #16]
 801f6f6:	781b      	ldrb	r3, [r3, #0]
 801f6f8:	091b      	lsrs	r3, r3, #4
 801f6fa:	b2db      	uxtb	r3, r3
 801f6fc:	2b04      	cmp	r3, #4
 801f6fe:	d004      	beq.n	801f70a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f700:	6878      	ldr	r0, [r7, #4]
 801f702:	f7f5 fa2b 	bl	8014b5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f706:	2300      	movs	r3, #0
 801f708:	e123      	b.n	801f952 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	781b      	ldrb	r3, [r3, #0]
 801f70e:	f003 030f 	and.w	r3, r3, #15
 801f712:	b2db      	uxtb	r3, r3
 801f714:	009b      	lsls	r3, r3, #2
 801f716:	b2db      	uxtb	r3, r3
 801f718:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f71a:	693b      	ldr	r3, [r7, #16]
 801f71c:	885b      	ldrh	r3, [r3, #2]
 801f71e:	b29b      	uxth	r3, r3
 801f720:	4618      	mov	r0, r3
 801f722:	f7f2 fe5b 	bl	80123dc <lwip_htons>
 801f726:	4603      	mov	r3, r0
 801f728:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	891b      	ldrh	r3, [r3, #8]
 801f72e:	89ba      	ldrh	r2, [r7, #12]
 801f730:	429a      	cmp	r2, r3
 801f732:	d204      	bcs.n	801f73e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801f734:	89bb      	ldrh	r3, [r7, #12]
 801f736:	4619      	mov	r1, r3
 801f738:	6878      	ldr	r0, [r7, #4]
 801f73a:	f7f5 f857 	bl	80147ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	895b      	ldrh	r3, [r3, #10]
 801f742:	89fa      	ldrh	r2, [r7, #14]
 801f744:	429a      	cmp	r2, r3
 801f746:	d807      	bhi.n	801f758 <ip4_input+0x78>
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	891b      	ldrh	r3, [r3, #8]
 801f74c:	89ba      	ldrh	r2, [r7, #12]
 801f74e:	429a      	cmp	r2, r3
 801f750:	d802      	bhi.n	801f758 <ip4_input+0x78>
 801f752:	89fb      	ldrh	r3, [r7, #14]
 801f754:	2b13      	cmp	r3, #19
 801f756:	d804      	bhi.n	801f762 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f758:	6878      	ldr	r0, [r7, #4]
 801f75a:	f7f5 f9ff 	bl	8014b5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f75e:	2300      	movs	r3, #0
 801f760:	e0f7      	b.n	801f952 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f762:	693b      	ldr	r3, [r7, #16]
 801f764:	691b      	ldr	r3, [r3, #16]
 801f766:	4a7d      	ldr	r2, [pc, #500]	; (801f95c <ip4_input+0x27c>)
 801f768:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f76a:	693b      	ldr	r3, [r7, #16]
 801f76c:	68db      	ldr	r3, [r3, #12]
 801f76e:	4a7b      	ldr	r2, [pc, #492]	; (801f95c <ip4_input+0x27c>)
 801f770:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f772:	4b7a      	ldr	r3, [pc, #488]	; (801f95c <ip4_input+0x27c>)
 801f774:	695b      	ldr	r3, [r3, #20]
 801f776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f77a:	2be0      	cmp	r3, #224	; 0xe0
 801f77c:	d112      	bne.n	801f7a4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f77e:	683b      	ldr	r3, [r7, #0]
 801f780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f784:	f003 0301 	and.w	r3, r3, #1
 801f788:	b2db      	uxtb	r3, r3
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d007      	beq.n	801f79e <ip4_input+0xbe>
 801f78e:	683b      	ldr	r3, [r7, #0]
 801f790:	3304      	adds	r3, #4
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	2b00      	cmp	r3, #0
 801f796:	d002      	beq.n	801f79e <ip4_input+0xbe>
      netif = inp;
 801f798:	683b      	ldr	r3, [r7, #0]
 801f79a:	61fb      	str	r3, [r7, #28]
 801f79c:	e02a      	b.n	801f7f4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f79e:	2300      	movs	r3, #0
 801f7a0:	61fb      	str	r3, [r7, #28]
 801f7a2:	e027      	b.n	801f7f4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f7a4:	6838      	ldr	r0, [r7, #0]
 801f7a6:	f7ff ff71 	bl	801f68c <ip4_input_accept>
 801f7aa:	4603      	mov	r3, r0
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	d002      	beq.n	801f7b6 <ip4_input+0xd6>
      netif = inp;
 801f7b0:	683b      	ldr	r3, [r7, #0]
 801f7b2:	61fb      	str	r3, [r7, #28]
 801f7b4:	e01e      	b.n	801f7f4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f7b6:	2300      	movs	r3, #0
 801f7b8:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f7ba:	4b68      	ldr	r3, [pc, #416]	; (801f95c <ip4_input+0x27c>)
 801f7bc:	695b      	ldr	r3, [r3, #20]
 801f7be:	b2db      	uxtb	r3, r3
 801f7c0:	2b7f      	cmp	r3, #127	; 0x7f
 801f7c2:	d017      	beq.n	801f7f4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f7c4:	4b66      	ldr	r3, [pc, #408]	; (801f960 <ip4_input+0x280>)
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	61fb      	str	r3, [r7, #28]
 801f7ca:	e00e      	b.n	801f7ea <ip4_input+0x10a>
          if (netif == inp) {
 801f7cc:	69fa      	ldr	r2, [r7, #28]
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	429a      	cmp	r2, r3
 801f7d2:	d006      	beq.n	801f7e2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f7d4:	69f8      	ldr	r0, [r7, #28]
 801f7d6:	f7ff ff59 	bl	801f68c <ip4_input_accept>
 801f7da:	4603      	mov	r3, r0
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d108      	bne.n	801f7f2 <ip4_input+0x112>
 801f7e0:	e000      	b.n	801f7e4 <ip4_input+0x104>
            continue;
 801f7e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f7e4:	69fb      	ldr	r3, [r7, #28]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	61fb      	str	r3, [r7, #28]
 801f7ea:	69fb      	ldr	r3, [r7, #28]
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d1ed      	bne.n	801f7cc <ip4_input+0xec>
 801f7f0:	e000      	b.n	801f7f4 <ip4_input+0x114>
            break;
 801f7f2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f7f4:	69fb      	ldr	r3, [r7, #28]
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d111      	bne.n	801f81e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f7fa:	693b      	ldr	r3, [r7, #16]
 801f7fc:	7a5b      	ldrb	r3, [r3, #9]
 801f7fe:	2b11      	cmp	r3, #17
 801f800:	d10d      	bne.n	801f81e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801f802:	89fb      	ldrh	r3, [r7, #14]
 801f804:	693a      	ldr	r2, [r7, #16]
 801f806:	4413      	add	r3, r2
 801f808:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f80a:	69bb      	ldr	r3, [r7, #24]
 801f80c:	885b      	ldrh	r3, [r3, #2]
 801f80e:	b29b      	uxth	r3, r3
 801f810:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f814:	d103      	bne.n	801f81e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f816:	683b      	ldr	r3, [r7, #0]
 801f818:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 801f81a:	2300      	movs	r3, #0
 801f81c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f81e:	697b      	ldr	r3, [r7, #20]
 801f820:	2b00      	cmp	r3, #0
 801f822:	d017      	beq.n	801f854 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f824:	4b4d      	ldr	r3, [pc, #308]	; (801f95c <ip4_input+0x27c>)
 801f826:	691b      	ldr	r3, [r3, #16]
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d013      	beq.n	801f854 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f82c:	4b4b      	ldr	r3, [pc, #300]	; (801f95c <ip4_input+0x27c>)
 801f82e:	691b      	ldr	r3, [r3, #16]
 801f830:	6839      	ldr	r1, [r7, #0]
 801f832:	4618      	mov	r0, r3
 801f834:	f000 f96e 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801f838:	4603      	mov	r3, r0
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d105      	bne.n	801f84a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f83e:	4b47      	ldr	r3, [pc, #284]	; (801f95c <ip4_input+0x27c>)
 801f840:	691b      	ldr	r3, [r3, #16]
 801f842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f846:	2be0      	cmp	r3, #224	; 0xe0
 801f848:	d104      	bne.n	801f854 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f84a:	6878      	ldr	r0, [r7, #4]
 801f84c:	f7f5 f986 	bl	8014b5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f850:	2300      	movs	r3, #0
 801f852:	e07e      	b.n	801f952 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f854:	69fb      	ldr	r3, [r7, #28]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d104      	bne.n	801f864 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f85a:	6878      	ldr	r0, [r7, #4]
 801f85c:	f7f5 f97e 	bl	8014b5c <pbuf_free>
    return ERR_OK;
 801f860:	2300      	movs	r3, #0
 801f862:	e076      	b.n	801f952 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f864:	693b      	ldr	r3, [r7, #16]
 801f866:	88db      	ldrh	r3, [r3, #6]
 801f868:	b29b      	uxth	r3, r3
 801f86a:	461a      	mov	r2, r3
 801f86c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f870:	4013      	ands	r3, r2
 801f872:	2b00      	cmp	r3, #0
 801f874:	d00b      	beq.n	801f88e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f876:	6878      	ldr	r0, [r7, #4]
 801f878:	f000 fdbc 	bl	80203f4 <ip4_reass>
 801f87c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	2b00      	cmp	r3, #0
 801f882:	d101      	bne.n	801f888 <ip4_input+0x1a8>
      return ERR_OK;
 801f884:	2300      	movs	r3, #0
 801f886:	e064      	b.n	801f952 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	685b      	ldr	r3, [r3, #4]
 801f88c:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f88e:	4a33      	ldr	r2, [pc, #204]	; (801f95c <ip4_input+0x27c>)
 801f890:	69fb      	ldr	r3, [r7, #28]
 801f892:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f894:	4a31      	ldr	r2, [pc, #196]	; (801f95c <ip4_input+0x27c>)
 801f896:	683b      	ldr	r3, [r7, #0]
 801f898:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f89a:	4a30      	ldr	r2, [pc, #192]	; (801f95c <ip4_input+0x27c>)
 801f89c:	693b      	ldr	r3, [r7, #16]
 801f89e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f8a0:	693b      	ldr	r3, [r7, #16]
 801f8a2:	781b      	ldrb	r3, [r3, #0]
 801f8a4:	f003 030f 	and.w	r3, r3, #15
 801f8a8:	b2db      	uxtb	r3, r3
 801f8aa:	009b      	lsls	r3, r3, #2
 801f8ac:	b2db      	uxtb	r3, r3
 801f8ae:	b29a      	uxth	r2, r3
 801f8b0:	4b2a      	ldr	r3, [pc, #168]	; (801f95c <ip4_input+0x27c>)
 801f8b2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f8b4:	89fb      	ldrh	r3, [r7, #14]
 801f8b6:	4619      	mov	r1, r3
 801f8b8:	6878      	ldr	r0, [r7, #4]
 801f8ba:	f7f5 f897 	bl	80149ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f8be:	693b      	ldr	r3, [r7, #16]
 801f8c0:	7a5b      	ldrb	r3, [r3, #9]
 801f8c2:	2b11      	cmp	r3, #17
 801f8c4:	d006      	beq.n	801f8d4 <ip4_input+0x1f4>
 801f8c6:	2b11      	cmp	r3, #17
 801f8c8:	dc13      	bgt.n	801f8f2 <ip4_input+0x212>
 801f8ca:	2b01      	cmp	r3, #1
 801f8cc:	d00c      	beq.n	801f8e8 <ip4_input+0x208>
 801f8ce:	2b06      	cmp	r3, #6
 801f8d0:	d005      	beq.n	801f8de <ip4_input+0x1fe>
 801f8d2:	e00e      	b.n	801f8f2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f8d4:	6839      	ldr	r1, [r7, #0]
 801f8d6:	6878      	ldr	r0, [r7, #4]
 801f8d8:	f7fc f994 	bl	801bc04 <udp_input>
        break;
 801f8dc:	e026      	b.n	801f92c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f8de:	6839      	ldr	r1, [r7, #0]
 801f8e0:	6878      	ldr	r0, [r7, #4]
 801f8e2:	f7f7 fce5 	bl	80172b0 <tcp_input>
        break;
 801f8e6:	e021      	b.n	801f92c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f8e8:	6839      	ldr	r1, [r7, #0]
 801f8ea:	6878      	ldr	r0, [r7, #4]
 801f8ec:	f7ff fcca 	bl	801f284 <icmp_input>
        break;
 801f8f0:	e01c      	b.n	801f92c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f8f2:	4b1a      	ldr	r3, [pc, #104]	; (801f95c <ip4_input+0x27c>)
 801f8f4:	695b      	ldr	r3, [r3, #20]
 801f8f6:	69f9      	ldr	r1, [r7, #28]
 801f8f8:	4618      	mov	r0, r3
 801f8fa:	f000 f90b 	bl	801fb14 <ip4_addr_isbroadcast_u32>
 801f8fe:	4603      	mov	r3, r0
 801f900:	2b00      	cmp	r3, #0
 801f902:	d10f      	bne.n	801f924 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f904:	4b15      	ldr	r3, [pc, #84]	; (801f95c <ip4_input+0x27c>)
 801f906:	695b      	ldr	r3, [r3, #20]
 801f908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f90c:	2be0      	cmp	r3, #224	; 0xe0
 801f90e:	d009      	beq.n	801f924 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801f914:	4619      	mov	r1, r3
 801f916:	6878      	ldr	r0, [r7, #4]
 801f918:	f7f5 f8db 	bl	8014ad2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f91c:	2102      	movs	r1, #2
 801f91e:	6878      	ldr	r0, [r7, #4]
 801f920:	f7ff fdba 	bl	801f498 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f924:	6878      	ldr	r0, [r7, #4]
 801f926:	f7f5 f919 	bl	8014b5c <pbuf_free>
        break;
 801f92a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f92c:	4b0b      	ldr	r3, [pc, #44]	; (801f95c <ip4_input+0x27c>)
 801f92e:	2200      	movs	r2, #0
 801f930:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f932:	4b0a      	ldr	r3, [pc, #40]	; (801f95c <ip4_input+0x27c>)
 801f934:	2200      	movs	r2, #0
 801f936:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f938:	4b08      	ldr	r3, [pc, #32]	; (801f95c <ip4_input+0x27c>)
 801f93a:	2200      	movs	r2, #0
 801f93c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f93e:	4b07      	ldr	r3, [pc, #28]	; (801f95c <ip4_input+0x27c>)
 801f940:	2200      	movs	r2, #0
 801f942:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f944:	4b05      	ldr	r3, [pc, #20]	; (801f95c <ip4_input+0x27c>)
 801f946:	2200      	movs	r2, #0
 801f948:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f94a:	4b04      	ldr	r3, [pc, #16]	; (801f95c <ip4_input+0x27c>)
 801f94c:	2200      	movs	r2, #0
 801f94e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f950:	2300      	movs	r3, #0
}
 801f952:	4618      	mov	r0, r3
 801f954:	3720      	adds	r7, #32
 801f956:	46bd      	mov	sp, r7
 801f958:	bd80      	pop	{r7, pc}
 801f95a:	bf00      	nop
 801f95c:	200177a8 	.word	0x200177a8
 801f960:	2001b18c 	.word	0x2001b18c

0801f964 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f964:	b580      	push	{r7, lr}
 801f966:	b08a      	sub	sp, #40	; 0x28
 801f968:	af04      	add	r7, sp, #16
 801f96a:	60f8      	str	r0, [r7, #12]
 801f96c:	60b9      	str	r1, [r7, #8]
 801f96e:	607a      	str	r2, [r7, #4]
 801f970:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f972:	68bb      	ldr	r3, [r7, #8]
 801f974:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d009      	beq.n	801f990 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f97c:	68bb      	ldr	r3, [r7, #8]
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d003      	beq.n	801f98a <ip4_output_if+0x26>
 801f982:	68bb      	ldr	r3, [r7, #8]
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	2b00      	cmp	r3, #0
 801f988:	d102      	bne.n	801f990 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f98c:	3304      	adds	r3, #4
 801f98e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f990:	78fa      	ldrb	r2, [r7, #3]
 801f992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f994:	9302      	str	r3, [sp, #8]
 801f996:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f99a:	9301      	str	r3, [sp, #4]
 801f99c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f9a0:	9300      	str	r3, [sp, #0]
 801f9a2:	4613      	mov	r3, r2
 801f9a4:	687a      	ldr	r2, [r7, #4]
 801f9a6:	6979      	ldr	r1, [r7, #20]
 801f9a8:	68f8      	ldr	r0, [r7, #12]
 801f9aa:	f000 f805 	bl	801f9b8 <ip4_output_if_src>
 801f9ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f9b0:	4618      	mov	r0, r3
 801f9b2:	3718      	adds	r7, #24
 801f9b4:	46bd      	mov	sp, r7
 801f9b6:	bd80      	pop	{r7, pc}

0801f9b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f9b8:	b580      	push	{r7, lr}
 801f9ba:	b088      	sub	sp, #32
 801f9bc:	af00      	add	r7, sp, #0
 801f9be:	60f8      	str	r0, [r7, #12]
 801f9c0:	60b9      	str	r1, [r7, #8]
 801f9c2:	607a      	str	r2, [r7, #4]
 801f9c4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	7b9b      	ldrb	r3, [r3, #14]
 801f9ca:	2b01      	cmp	r3, #1
 801f9cc:	d006      	beq.n	801f9dc <ip4_output_if_src+0x24>
 801f9ce:	4b4b      	ldr	r3, [pc, #300]	; (801fafc <ip4_output_if_src+0x144>)
 801f9d0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f9d4:	494a      	ldr	r1, [pc, #296]	; (801fb00 <ip4_output_if_src+0x148>)
 801f9d6:	484b      	ldr	r0, [pc, #300]	; (801fb04 <ip4_output_if_src+0x14c>)
 801f9d8:	f002 f968 	bl	8021cac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d060      	beq.n	801faa4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f9e2:	2314      	movs	r3, #20
 801f9e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f9e6:	2114      	movs	r1, #20
 801f9e8:	68f8      	ldr	r0, [r7, #12]
 801f9ea:	f7f4 ffef 	bl	80149cc <pbuf_add_header>
 801f9ee:	4603      	mov	r3, r0
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	d002      	beq.n	801f9fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f9f4:	f06f 0301 	mvn.w	r3, #1
 801f9f8:	e07c      	b.n	801faf4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f9fa:	68fb      	ldr	r3, [r7, #12]
 801f9fc:	685b      	ldr	r3, [r3, #4]
 801f9fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801fa00:	68fb      	ldr	r3, [r7, #12]
 801fa02:	895b      	ldrh	r3, [r3, #10]
 801fa04:	2b13      	cmp	r3, #19
 801fa06:	d806      	bhi.n	801fa16 <ip4_output_if_src+0x5e>
 801fa08:	4b3c      	ldr	r3, [pc, #240]	; (801fafc <ip4_output_if_src+0x144>)
 801fa0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801fa0e:	493e      	ldr	r1, [pc, #248]	; (801fb08 <ip4_output_if_src+0x150>)
 801fa10:	483c      	ldr	r0, [pc, #240]	; (801fb04 <ip4_output_if_src+0x14c>)
 801fa12:	f002 f94b 	bl	8021cac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801fa16:	69fb      	ldr	r3, [r7, #28]
 801fa18:	78fa      	ldrb	r2, [r7, #3]
 801fa1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801fa1c:	69fb      	ldr	r3, [r7, #28]
 801fa1e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801fa22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	681a      	ldr	r2, [r3, #0]
 801fa28:	69fb      	ldr	r3, [r7, #28]
 801fa2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801fa2c:	8b7b      	ldrh	r3, [r7, #26]
 801fa2e:	089b      	lsrs	r3, r3, #2
 801fa30:	b29b      	uxth	r3, r3
 801fa32:	b2db      	uxtb	r3, r3
 801fa34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa38:	b2da      	uxtb	r2, r3
 801fa3a:	69fb      	ldr	r3, [r7, #28]
 801fa3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801fa3e:	69fb      	ldr	r3, [r7, #28]
 801fa40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801fa44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	891b      	ldrh	r3, [r3, #8]
 801fa4a:	4618      	mov	r0, r3
 801fa4c:	f7f2 fcc6 	bl	80123dc <lwip_htons>
 801fa50:	4603      	mov	r3, r0
 801fa52:	461a      	mov	r2, r3
 801fa54:	69fb      	ldr	r3, [r7, #28]
 801fa56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801fa58:	69fb      	ldr	r3, [r7, #28]
 801fa5a:	2200      	movs	r2, #0
 801fa5c:	719a      	strb	r2, [r3, #6]
 801fa5e:	2200      	movs	r2, #0
 801fa60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801fa62:	4b2a      	ldr	r3, [pc, #168]	; (801fb0c <ip4_output_if_src+0x154>)
 801fa64:	881b      	ldrh	r3, [r3, #0]
 801fa66:	4618      	mov	r0, r3
 801fa68:	f7f2 fcb8 	bl	80123dc <lwip_htons>
 801fa6c:	4603      	mov	r3, r0
 801fa6e:	461a      	mov	r2, r3
 801fa70:	69fb      	ldr	r3, [r7, #28]
 801fa72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801fa74:	4b25      	ldr	r3, [pc, #148]	; (801fb0c <ip4_output_if_src+0x154>)
 801fa76:	881b      	ldrh	r3, [r3, #0]
 801fa78:	3301      	adds	r3, #1
 801fa7a:	b29a      	uxth	r2, r3
 801fa7c:	4b23      	ldr	r3, [pc, #140]	; (801fb0c <ip4_output_if_src+0x154>)
 801fa7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801fa80:	68bb      	ldr	r3, [r7, #8]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d104      	bne.n	801fa90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801fa86:	4b22      	ldr	r3, [pc, #136]	; (801fb10 <ip4_output_if_src+0x158>)
 801fa88:	681a      	ldr	r2, [r3, #0]
 801fa8a:	69fb      	ldr	r3, [r7, #28]
 801fa8c:	60da      	str	r2, [r3, #12]
 801fa8e:	e003      	b.n	801fa98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801fa90:	68bb      	ldr	r3, [r7, #8]
 801fa92:	681a      	ldr	r2, [r3, #0]
 801fa94:	69fb      	ldr	r3, [r7, #28]
 801fa96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801fa98:	69fb      	ldr	r3, [r7, #28]
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	729a      	strb	r2, [r3, #10]
 801fa9e:	2200      	movs	r2, #0
 801faa0:	72da      	strb	r2, [r3, #11]
 801faa2:	e00f      	b.n	801fac4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	895b      	ldrh	r3, [r3, #10]
 801faa8:	2b13      	cmp	r3, #19
 801faaa:	d802      	bhi.n	801fab2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801faac:	f06f 0301 	mvn.w	r3, #1
 801fab0:	e020      	b.n	801faf4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	685b      	ldr	r3, [r3, #4]
 801fab6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801fab8:	69fb      	ldr	r3, [r7, #28]
 801faba:	691b      	ldr	r3, [r3, #16]
 801fabc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801fabe:	f107 0314 	add.w	r3, r7, #20
 801fac2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d00c      	beq.n	801fae6 <ip4_output_if_src+0x12e>
 801facc:	68fb      	ldr	r3, [r7, #12]
 801face:	891a      	ldrh	r2, [r3, #8]
 801fad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fad4:	429a      	cmp	r2, r3
 801fad6:	d906      	bls.n	801fae6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801fad8:	687a      	ldr	r2, [r7, #4]
 801fada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fadc:	68f8      	ldr	r0, [r7, #12]
 801fade:	f000 fe77 	bl	80207d0 <ip4_frag>
 801fae2:	4603      	mov	r3, r0
 801fae4:	e006      	b.n	801faf4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801fae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fae8:	695b      	ldr	r3, [r3, #20]
 801faea:	687a      	ldr	r2, [r7, #4]
 801faec:	68f9      	ldr	r1, [r7, #12]
 801faee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801faf0:	4798      	blx	r3
 801faf2:	4603      	mov	r3, r0
}
 801faf4:	4618      	mov	r0, r3
 801faf6:	3720      	adds	r7, #32
 801faf8:	46bd      	mov	sp, r7
 801fafa:	bd80      	pop	{r7, pc}
 801fafc:	080294a8 	.word	0x080294a8
 801fb00:	080294dc 	.word	0x080294dc
 801fb04:	080294e8 	.word	0x080294e8
 801fb08:	08029510 	.word	0x08029510
 801fb0c:	200144c2 	.word	0x200144c2
 801fb10:	08029ae8 	.word	0x08029ae8

0801fb14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801fb14:	b480      	push	{r7}
 801fb16:	b085      	sub	sp, #20
 801fb18:	af00      	add	r7, sp, #0
 801fb1a:	6078      	str	r0, [r7, #4]
 801fb1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fb28:	d002      	beq.n	801fb30 <ip4_addr_isbroadcast_u32+0x1c>
 801fb2a:	687b      	ldr	r3, [r7, #4]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d101      	bne.n	801fb34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801fb30:	2301      	movs	r3, #1
 801fb32:	e02a      	b.n	801fb8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801fb34:	683b      	ldr	r3, [r7, #0]
 801fb36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fb3a:	f003 0302 	and.w	r3, r3, #2
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d101      	bne.n	801fb46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801fb42:	2300      	movs	r3, #0
 801fb44:	e021      	b.n	801fb8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801fb46:	683b      	ldr	r3, [r7, #0]
 801fb48:	3304      	adds	r3, #4
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	687a      	ldr	r2, [r7, #4]
 801fb4e:	429a      	cmp	r2, r3
 801fb50:	d101      	bne.n	801fb56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801fb52:	2300      	movs	r3, #0
 801fb54:	e019      	b.n	801fb8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801fb56:	68fa      	ldr	r2, [r7, #12]
 801fb58:	683b      	ldr	r3, [r7, #0]
 801fb5a:	3304      	adds	r3, #4
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	405a      	eors	r2, r3
 801fb60:	683b      	ldr	r3, [r7, #0]
 801fb62:	3308      	adds	r3, #8
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	4013      	ands	r3, r2
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d10d      	bne.n	801fb88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	3308      	adds	r3, #8
 801fb70:	681b      	ldr	r3, [r3, #0]
 801fb72:	43da      	mvns	r2, r3
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801fb78:	683b      	ldr	r3, [r7, #0]
 801fb7a:	3308      	adds	r3, #8
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fb80:	429a      	cmp	r2, r3
 801fb82:	d101      	bne.n	801fb88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801fb84:	2301      	movs	r3, #1
 801fb86:	e000      	b.n	801fb8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801fb88:	2300      	movs	r3, #0
  }
}
 801fb8a:	4618      	mov	r0, r3
 801fb8c:	3714      	adds	r7, #20
 801fb8e:	46bd      	mov	sp, r7
 801fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb94:	4770      	bx	lr
	...

0801fb98 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801fb98:	b580      	push	{r7, lr}
 801fb9a:	b08a      	sub	sp, #40	; 0x28
 801fb9c:	af00      	add	r7, sp, #0
 801fb9e:	6078      	str	r0, [r7, #4]
 801fba0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801fba2:	f107 030c 	add.w	r3, r7, #12
 801fba6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	781b      	ldrb	r3, [r3, #0]
 801fbac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801fbb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fbb4:	3301      	adds	r3, #1
 801fbb6:	4a89      	ldr	r2, [pc, #548]	; (801fddc <ip4addr_aton+0x244>)
 801fbb8:	4413      	add	r3, r2
 801fbba:	781b      	ldrb	r3, [r3, #0]
 801fbbc:	f003 0304 	and.w	r3, r3, #4
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d101      	bne.n	801fbc8 <ip4addr_aton+0x30>
      return 0;
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	e105      	b.n	801fdd4 <ip4addr_aton+0x23c>
    }
    val = 0;
 801fbc8:	2300      	movs	r3, #0
 801fbca:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801fbcc:	230a      	movs	r3, #10
 801fbce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801fbd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fbd6:	2b30      	cmp	r3, #48	; 0x30
 801fbd8:	d11c      	bne.n	801fc14 <ip4addr_aton+0x7c>
      c = *++cp;
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	3301      	adds	r3, #1
 801fbde:	607b      	str	r3, [r7, #4]
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	781b      	ldrb	r3, [r3, #0]
 801fbe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801fbe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fbec:	2b78      	cmp	r3, #120	; 0x78
 801fbee:	d003      	beq.n	801fbf8 <ip4addr_aton+0x60>
 801fbf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fbf4:	2b58      	cmp	r3, #88	; 0x58
 801fbf6:	d10a      	bne.n	801fc0e <ip4addr_aton+0x76>
        base = 16;
 801fbf8:	2310      	movs	r3, #16
 801fbfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	3301      	adds	r3, #1
 801fc02:	607b      	str	r3, [r7, #4]
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	781b      	ldrb	r3, [r3, #0]
 801fc08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801fc0c:	e002      	b.n	801fc14 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801fc0e:	2308      	movs	r3, #8
 801fc10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801fc14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fc18:	3301      	adds	r3, #1
 801fc1a:	4a70      	ldr	r2, [pc, #448]	; (801fddc <ip4addr_aton+0x244>)
 801fc1c:	4413      	add	r3, r2
 801fc1e:	781b      	ldrb	r3, [r3, #0]
 801fc20:	f003 0304 	and.w	r3, r3, #4
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d011      	beq.n	801fc4c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801fc28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fc2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc2e:	fb02 f203 	mul.w	r2, r2, r3
 801fc32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fc36:	4413      	add	r3, r2
 801fc38:	3b30      	subs	r3, #48	; 0x30
 801fc3a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	3301      	adds	r3, #1
 801fc40:	607b      	str	r3, [r7, #4]
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	781b      	ldrb	r3, [r3, #0]
 801fc46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801fc4a:	e7e3      	b.n	801fc14 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801fc4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fc50:	2b10      	cmp	r3, #16
 801fc52:	d127      	bne.n	801fca4 <ip4addr_aton+0x10c>
 801fc54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fc58:	3301      	adds	r3, #1
 801fc5a:	4a60      	ldr	r2, [pc, #384]	; (801fddc <ip4addr_aton+0x244>)
 801fc5c:	4413      	add	r3, r2
 801fc5e:	781b      	ldrb	r3, [r3, #0]
 801fc60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d01d      	beq.n	801fca4 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc6a:	011b      	lsls	r3, r3, #4
 801fc6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801fc70:	f102 010a 	add.w	r1, r2, #10
 801fc74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801fc78:	3201      	adds	r2, #1
 801fc7a:	4858      	ldr	r0, [pc, #352]	; (801fddc <ip4addr_aton+0x244>)
 801fc7c:	4402      	add	r2, r0
 801fc7e:	7812      	ldrb	r2, [r2, #0]
 801fc80:	f002 0203 	and.w	r2, r2, #3
 801fc84:	2a02      	cmp	r2, #2
 801fc86:	d101      	bne.n	801fc8c <ip4addr_aton+0xf4>
 801fc88:	2261      	movs	r2, #97	; 0x61
 801fc8a:	e000      	b.n	801fc8e <ip4addr_aton+0xf6>
 801fc8c:	2241      	movs	r2, #65	; 0x41
 801fc8e:	1a8a      	subs	r2, r1, r2
 801fc90:	4313      	orrs	r3, r2
 801fc92:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	3301      	adds	r3, #1
 801fc98:	607b      	str	r3, [r7, #4]
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	781b      	ldrb	r3, [r3, #0]
 801fc9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801fca2:	e7b7      	b.n	801fc14 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801fca4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fca8:	2b2e      	cmp	r3, #46	; 0x2e
 801fcaa:	d114      	bne.n	801fcd6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801fcac:	f107 030c 	add.w	r3, r7, #12
 801fcb0:	330c      	adds	r3, #12
 801fcb2:	69fa      	ldr	r2, [r7, #28]
 801fcb4:	429a      	cmp	r2, r3
 801fcb6:	d301      	bcc.n	801fcbc <ip4addr_aton+0x124>
        return 0;
 801fcb8:	2300      	movs	r3, #0
 801fcba:	e08b      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801fcbc:	69fb      	ldr	r3, [r7, #28]
 801fcbe:	1d1a      	adds	r2, r3, #4
 801fcc0:	61fa      	str	r2, [r7, #28]
 801fcc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fcc4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	3301      	adds	r3, #1
 801fcca:	607b      	str	r3, [r7, #4]
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	781b      	ldrb	r3, [r3, #0]
 801fcd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801fcd4:	e76c      	b.n	801fbb0 <ip4addr_aton+0x18>
    } else {
      break;
 801fcd6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801fcd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d00b      	beq.n	801fcf8 <ip4addr_aton+0x160>
 801fce0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fce4:	3301      	adds	r3, #1
 801fce6:	4a3d      	ldr	r2, [pc, #244]	; (801fddc <ip4addr_aton+0x244>)
 801fce8:	4413      	add	r3, r2
 801fcea:	781b      	ldrb	r3, [r3, #0]
 801fcec:	f003 0308 	and.w	r3, r3, #8
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d101      	bne.n	801fcf8 <ip4addr_aton+0x160>
    return 0;
 801fcf4:	2300      	movs	r3, #0
 801fcf6:	e06d      	b.n	801fdd4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801fcf8:	f107 030c 	add.w	r3, r7, #12
 801fcfc:	69fa      	ldr	r2, [r7, #28]
 801fcfe:	1ad3      	subs	r3, r2, r3
 801fd00:	109b      	asrs	r3, r3, #2
 801fd02:	3301      	adds	r3, #1
 801fd04:	2b04      	cmp	r3, #4
 801fd06:	d853      	bhi.n	801fdb0 <ip4addr_aton+0x218>
 801fd08:	a201      	add	r2, pc, #4	; (adr r2, 801fd10 <ip4addr_aton+0x178>)
 801fd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd0e:	bf00      	nop
 801fd10:	0801fd25 	.word	0x0801fd25
 801fd14:	0801fdbf 	.word	0x0801fdbf
 801fd18:	0801fd29 	.word	0x0801fd29
 801fd1c:	0801fd4b 	.word	0x0801fd4b
 801fd20:	0801fd79 	.word	0x0801fd79

    case 0:
      return 0;       /* initial nondigit */
 801fd24:	2300      	movs	r3, #0
 801fd26:	e055      	b.n	801fdd4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801fd2e:	d301      	bcc.n	801fd34 <ip4addr_aton+0x19c>
        return 0;
 801fd30:	2300      	movs	r3, #0
 801fd32:	e04f      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	2bff      	cmp	r3, #255	; 0xff
 801fd38:	d901      	bls.n	801fd3e <ip4addr_aton+0x1a6>
        return 0;
 801fd3a:	2300      	movs	r3, #0
 801fd3c:	e04a      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801fd3e:	68fb      	ldr	r3, [r7, #12]
 801fd40:	061b      	lsls	r3, r3, #24
 801fd42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd44:	4313      	orrs	r3, r2
 801fd46:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fd48:	e03a      	b.n	801fdc0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fd50:	d301      	bcc.n	801fd56 <ip4addr_aton+0x1be>
        return 0;
 801fd52:	2300      	movs	r3, #0
 801fd54:	e03e      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	2bff      	cmp	r3, #255	; 0xff
 801fd5a:	d802      	bhi.n	801fd62 <ip4addr_aton+0x1ca>
 801fd5c:	693b      	ldr	r3, [r7, #16]
 801fd5e:	2bff      	cmp	r3, #255	; 0xff
 801fd60:	d901      	bls.n	801fd66 <ip4addr_aton+0x1ce>
        return 0;
 801fd62:	2300      	movs	r3, #0
 801fd64:	e036      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	061a      	lsls	r2, r3, #24
 801fd6a:	693b      	ldr	r3, [r7, #16]
 801fd6c:	041b      	lsls	r3, r3, #16
 801fd6e:	4313      	orrs	r3, r2
 801fd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd72:	4313      	orrs	r3, r2
 801fd74:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fd76:	e023      	b.n	801fdc0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801fd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd7a:	2bff      	cmp	r3, #255	; 0xff
 801fd7c:	d901      	bls.n	801fd82 <ip4addr_aton+0x1ea>
        return 0;
 801fd7e:	2300      	movs	r3, #0
 801fd80:	e028      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801fd82:	68fb      	ldr	r3, [r7, #12]
 801fd84:	2bff      	cmp	r3, #255	; 0xff
 801fd86:	d805      	bhi.n	801fd94 <ip4addr_aton+0x1fc>
 801fd88:	693b      	ldr	r3, [r7, #16]
 801fd8a:	2bff      	cmp	r3, #255	; 0xff
 801fd8c:	d802      	bhi.n	801fd94 <ip4addr_aton+0x1fc>
 801fd8e:	697b      	ldr	r3, [r7, #20]
 801fd90:	2bff      	cmp	r3, #255	; 0xff
 801fd92:	d901      	bls.n	801fd98 <ip4addr_aton+0x200>
        return 0;
 801fd94:	2300      	movs	r3, #0
 801fd96:	e01d      	b.n	801fdd4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801fd98:	68fb      	ldr	r3, [r7, #12]
 801fd9a:	061a      	lsls	r2, r3, #24
 801fd9c:	693b      	ldr	r3, [r7, #16]
 801fd9e:	041b      	lsls	r3, r3, #16
 801fda0:	431a      	orrs	r2, r3
 801fda2:	697b      	ldr	r3, [r7, #20]
 801fda4:	021b      	lsls	r3, r3, #8
 801fda6:	4313      	orrs	r3, r2
 801fda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fdaa:	4313      	orrs	r3, r2
 801fdac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fdae:	e007      	b.n	801fdc0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801fdb0:	4b0b      	ldr	r3, [pc, #44]	; (801fde0 <ip4addr_aton+0x248>)
 801fdb2:	22f9      	movs	r2, #249	; 0xf9
 801fdb4:	490b      	ldr	r1, [pc, #44]	; (801fde4 <ip4addr_aton+0x24c>)
 801fdb6:	480c      	ldr	r0, [pc, #48]	; (801fde8 <ip4addr_aton+0x250>)
 801fdb8:	f001 ff78 	bl	8021cac <iprintf>
      break;
 801fdbc:	e000      	b.n	801fdc0 <ip4addr_aton+0x228>
      break;
 801fdbe:	bf00      	nop
  }
  if (addr) {
 801fdc0:	683b      	ldr	r3, [r7, #0]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d005      	beq.n	801fdd2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801fdc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fdc8:	f7f2 fb1d 	bl	8012406 <lwip_htonl>
 801fdcc:	4602      	mov	r2, r0
 801fdce:	683b      	ldr	r3, [r7, #0]
 801fdd0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801fdd2:	2301      	movs	r3, #1
}
 801fdd4:	4618      	mov	r0, r3
 801fdd6:	3728      	adds	r7, #40	; 0x28
 801fdd8:	46bd      	mov	sp, r7
 801fdda:	bd80      	pop	{r7, pc}
 801fddc:	08029b04 	.word	0x08029b04
 801fde0:	08029540 	.word	0x08029540
 801fde4:	0802957c 	.word	0x0802957c
 801fde8:	08029588 	.word	0x08029588

0801fdec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801fdec:	b580      	push	{r7, lr}
 801fdee:	b084      	sub	sp, #16
 801fdf0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801fdf2:	2300      	movs	r3, #0
 801fdf4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801fdf6:	4b12      	ldr	r3, [pc, #72]	; (801fe40 <ip_reass_tmr+0x54>)
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801fdfc:	e018      	b.n	801fe30 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801fdfe:	68fb      	ldr	r3, [r7, #12]
 801fe00:	7fdb      	ldrb	r3, [r3, #31]
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d00b      	beq.n	801fe1e <ip_reass_tmr+0x32>
      r->timer--;
 801fe06:	68fb      	ldr	r3, [r7, #12]
 801fe08:	7fdb      	ldrb	r3, [r3, #31]
 801fe0a:	3b01      	subs	r3, #1
 801fe0c:	b2da      	uxtb	r2, r3
 801fe0e:	68fb      	ldr	r3, [r7, #12]
 801fe10:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801fe16:	68fb      	ldr	r3, [r7, #12]
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	60fb      	str	r3, [r7, #12]
 801fe1c:	e008      	b.n	801fe30 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801fe1e:	68fb      	ldr	r3, [r7, #12]
 801fe20:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801fe22:	68fb      	ldr	r3, [r7, #12]
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801fe28:	68b9      	ldr	r1, [r7, #8]
 801fe2a:	6878      	ldr	r0, [r7, #4]
 801fe2c:	f000 f80a 	bl	801fe44 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d1e3      	bne.n	801fdfe <ip_reass_tmr+0x12>
    }
  }
}
 801fe36:	bf00      	nop
 801fe38:	bf00      	nop
 801fe3a:	3710      	adds	r7, #16
 801fe3c:	46bd      	mov	sp, r7
 801fe3e:	bd80      	pop	{r7, pc}
 801fe40:	200144c4 	.word	0x200144c4

0801fe44 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fe44:	b580      	push	{r7, lr}
 801fe46:	b088      	sub	sp, #32
 801fe48:	af00      	add	r7, sp, #0
 801fe4a:	6078      	str	r0, [r7, #4]
 801fe4c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801fe4e:	2300      	movs	r3, #0
 801fe50:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801fe52:	683a      	ldr	r2, [r7, #0]
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	429a      	cmp	r2, r3
 801fe58:	d105      	bne.n	801fe66 <ip_reass_free_complete_datagram+0x22>
 801fe5a:	4b45      	ldr	r3, [pc, #276]	; (801ff70 <ip_reass_free_complete_datagram+0x12c>)
 801fe5c:	22ab      	movs	r2, #171	; 0xab
 801fe5e:	4945      	ldr	r1, [pc, #276]	; (801ff74 <ip_reass_free_complete_datagram+0x130>)
 801fe60:	4845      	ldr	r0, [pc, #276]	; (801ff78 <ip_reass_free_complete_datagram+0x134>)
 801fe62:	f001 ff23 	bl	8021cac <iprintf>
  if (prev != NULL) {
 801fe66:	683b      	ldr	r3, [r7, #0]
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	d00a      	beq.n	801fe82 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801fe6c:	683b      	ldr	r3, [r7, #0]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	687a      	ldr	r2, [r7, #4]
 801fe72:	429a      	cmp	r2, r3
 801fe74:	d005      	beq.n	801fe82 <ip_reass_free_complete_datagram+0x3e>
 801fe76:	4b3e      	ldr	r3, [pc, #248]	; (801ff70 <ip_reass_free_complete_datagram+0x12c>)
 801fe78:	22ad      	movs	r2, #173	; 0xad
 801fe7a:	4940      	ldr	r1, [pc, #256]	; (801ff7c <ip_reass_free_complete_datagram+0x138>)
 801fe7c:	483e      	ldr	r0, [pc, #248]	; (801ff78 <ip_reass_free_complete_datagram+0x134>)
 801fe7e:	f001 ff15 	bl	8021cac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	685b      	ldr	r3, [r3, #4]
 801fe86:	685b      	ldr	r3, [r3, #4]
 801fe88:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801fe8a:	697b      	ldr	r3, [r7, #20]
 801fe8c:	889b      	ldrh	r3, [r3, #4]
 801fe8e:	b29b      	uxth	r3, r3
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	d12a      	bne.n	801feea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801fe94:	687b      	ldr	r3, [r7, #4]
 801fe96:	685b      	ldr	r3, [r3, #4]
 801fe98:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	681a      	ldr	r2, [r3, #0]
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801fea2:	69bb      	ldr	r3, [r7, #24]
 801fea4:	6858      	ldr	r0, [r3, #4]
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	3308      	adds	r3, #8
 801feaa:	2214      	movs	r2, #20
 801feac:	4619      	mov	r1, r3
 801feae:	f001 f9b9 	bl	8021224 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801feb2:	2101      	movs	r1, #1
 801feb4:	69b8      	ldr	r0, [r7, #24]
 801feb6:	f7ff faff 	bl	801f4b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801feba:	69b8      	ldr	r0, [r7, #24]
 801febc:	f7f4 fedc 	bl	8014c78 <pbuf_clen>
 801fec0:	4603      	mov	r3, r0
 801fec2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fec4:	8bfa      	ldrh	r2, [r7, #30]
 801fec6:	8a7b      	ldrh	r3, [r7, #18]
 801fec8:	4413      	add	r3, r2
 801feca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fece:	db05      	blt.n	801fedc <ip_reass_free_complete_datagram+0x98>
 801fed0:	4b27      	ldr	r3, [pc, #156]	; (801ff70 <ip_reass_free_complete_datagram+0x12c>)
 801fed2:	22bc      	movs	r2, #188	; 0xbc
 801fed4:	492a      	ldr	r1, [pc, #168]	; (801ff80 <ip_reass_free_complete_datagram+0x13c>)
 801fed6:	4828      	ldr	r0, [pc, #160]	; (801ff78 <ip_reass_free_complete_datagram+0x134>)
 801fed8:	f001 fee8 	bl	8021cac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801fedc:	8bfa      	ldrh	r2, [r7, #30]
 801fede:	8a7b      	ldrh	r3, [r7, #18]
 801fee0:	4413      	add	r3, r2
 801fee2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801fee4:	69b8      	ldr	r0, [r7, #24]
 801fee6:	f7f4 fe39 	bl	8014b5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	685b      	ldr	r3, [r3, #4]
 801feee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801fef0:	e01f      	b.n	801ff32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801fef2:	69bb      	ldr	r3, [r7, #24]
 801fef4:	685b      	ldr	r3, [r3, #4]
 801fef6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801fef8:	69bb      	ldr	r3, [r7, #24]
 801fefa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801fefc:	697b      	ldr	r3, [r7, #20]
 801fefe:	681b      	ldr	r3, [r3, #0]
 801ff00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ff02:	68f8      	ldr	r0, [r7, #12]
 801ff04:	f7f4 feb8 	bl	8014c78 <pbuf_clen>
 801ff08:	4603      	mov	r3, r0
 801ff0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ff0c:	8bfa      	ldrh	r2, [r7, #30]
 801ff0e:	8a7b      	ldrh	r3, [r7, #18]
 801ff10:	4413      	add	r3, r2
 801ff12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ff16:	db05      	blt.n	801ff24 <ip_reass_free_complete_datagram+0xe0>
 801ff18:	4b15      	ldr	r3, [pc, #84]	; (801ff70 <ip_reass_free_complete_datagram+0x12c>)
 801ff1a:	22cc      	movs	r2, #204	; 0xcc
 801ff1c:	4918      	ldr	r1, [pc, #96]	; (801ff80 <ip_reass_free_complete_datagram+0x13c>)
 801ff1e:	4816      	ldr	r0, [pc, #88]	; (801ff78 <ip_reass_free_complete_datagram+0x134>)
 801ff20:	f001 fec4 	bl	8021cac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ff24:	8bfa      	ldrh	r2, [r7, #30]
 801ff26:	8a7b      	ldrh	r3, [r7, #18]
 801ff28:	4413      	add	r3, r2
 801ff2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ff2c:	68f8      	ldr	r0, [r7, #12]
 801ff2e:	f7f4 fe15 	bl	8014b5c <pbuf_free>
  while (p != NULL) {
 801ff32:	69bb      	ldr	r3, [r7, #24]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d1dc      	bne.n	801fef2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ff38:	6839      	ldr	r1, [r7, #0]
 801ff3a:	6878      	ldr	r0, [r7, #4]
 801ff3c:	f000 f8c2 	bl	80200c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ff40:	4b10      	ldr	r3, [pc, #64]	; (801ff84 <ip_reass_free_complete_datagram+0x140>)
 801ff42:	881b      	ldrh	r3, [r3, #0]
 801ff44:	8bfa      	ldrh	r2, [r7, #30]
 801ff46:	429a      	cmp	r2, r3
 801ff48:	d905      	bls.n	801ff56 <ip_reass_free_complete_datagram+0x112>
 801ff4a:	4b09      	ldr	r3, [pc, #36]	; (801ff70 <ip_reass_free_complete_datagram+0x12c>)
 801ff4c:	22d2      	movs	r2, #210	; 0xd2
 801ff4e:	490e      	ldr	r1, [pc, #56]	; (801ff88 <ip_reass_free_complete_datagram+0x144>)
 801ff50:	4809      	ldr	r0, [pc, #36]	; (801ff78 <ip_reass_free_complete_datagram+0x134>)
 801ff52:	f001 feab 	bl	8021cac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ff56:	4b0b      	ldr	r3, [pc, #44]	; (801ff84 <ip_reass_free_complete_datagram+0x140>)
 801ff58:	881a      	ldrh	r2, [r3, #0]
 801ff5a:	8bfb      	ldrh	r3, [r7, #30]
 801ff5c:	1ad3      	subs	r3, r2, r3
 801ff5e:	b29a      	uxth	r2, r3
 801ff60:	4b08      	ldr	r3, [pc, #32]	; (801ff84 <ip_reass_free_complete_datagram+0x140>)
 801ff62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ff64:	8bfb      	ldrh	r3, [r7, #30]
}
 801ff66:	4618      	mov	r0, r3
 801ff68:	3720      	adds	r7, #32
 801ff6a:	46bd      	mov	sp, r7
 801ff6c:	bd80      	pop	{r7, pc}
 801ff6e:	bf00      	nop
 801ff70:	080295b0 	.word	0x080295b0
 801ff74:	080295ec 	.word	0x080295ec
 801ff78:	080295f8 	.word	0x080295f8
 801ff7c:	08029620 	.word	0x08029620
 801ff80:	08029634 	.word	0x08029634
 801ff84:	200144c8 	.word	0x200144c8
 801ff88:	08029654 	.word	0x08029654

0801ff8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ff8c:	b580      	push	{r7, lr}
 801ff8e:	b08a      	sub	sp, #40	; 0x28
 801ff90:	af00      	add	r7, sp, #0
 801ff92:	6078      	str	r0, [r7, #4]
 801ff94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ff96:	2300      	movs	r3, #0
 801ff98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ff9a:	2300      	movs	r3, #0
 801ff9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ff9e:	2300      	movs	r3, #0
 801ffa0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ffa2:	2300      	movs	r3, #0
 801ffa4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ffa6:	2300      	movs	r3, #0
 801ffa8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ffaa:	4b28      	ldr	r3, [pc, #160]	; (802004c <ip_reass_remove_oldest_datagram+0xc0>)
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ffb0:	e030      	b.n	8020014 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ffb4:	695a      	ldr	r2, [r3, #20]
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	68db      	ldr	r3, [r3, #12]
 801ffba:	429a      	cmp	r2, r3
 801ffbc:	d10c      	bne.n	801ffd8 <ip_reass_remove_oldest_datagram+0x4c>
 801ffbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ffc0:	699a      	ldr	r2, [r3, #24]
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	691b      	ldr	r3, [r3, #16]
 801ffc6:	429a      	cmp	r2, r3
 801ffc8:	d106      	bne.n	801ffd8 <ip_reass_remove_oldest_datagram+0x4c>
 801ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ffcc:	899a      	ldrh	r2, [r3, #12]
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	889b      	ldrh	r3, [r3, #4]
 801ffd2:	b29b      	uxth	r3, r3
 801ffd4:	429a      	cmp	r2, r3
 801ffd6:	d014      	beq.n	8020002 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ffd8:	693b      	ldr	r3, [r7, #16]
 801ffda:	3301      	adds	r3, #1
 801ffdc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ffde:	6a3b      	ldr	r3, [r7, #32]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d104      	bne.n	801ffee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ffe6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ffe8:	69fb      	ldr	r3, [r7, #28]
 801ffea:	61bb      	str	r3, [r7, #24]
 801ffec:	e009      	b.n	8020002 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fff0:	7fda      	ldrb	r2, [r3, #31]
 801fff2:	6a3b      	ldr	r3, [r7, #32]
 801fff4:	7fdb      	ldrb	r3, [r3, #31]
 801fff6:	429a      	cmp	r2, r3
 801fff8:	d803      	bhi.n	8020002 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801fffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fffc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fffe:	69fb      	ldr	r3, [r7, #28]
 8020000:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8020002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	2b00      	cmp	r3, #0
 8020008:	d001      	beq.n	802000e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802000c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 802000e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020016:	2b00      	cmp	r3, #0
 8020018:	d1cb      	bne.n	801ffb2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802001a:	6a3b      	ldr	r3, [r7, #32]
 802001c:	2b00      	cmp	r3, #0
 802001e:	d008      	beq.n	8020032 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020020:	69b9      	ldr	r1, [r7, #24]
 8020022:	6a38      	ldr	r0, [r7, #32]
 8020024:	f7ff ff0e 	bl	801fe44 <ip_reass_free_complete_datagram>
 8020028:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802002a:	697a      	ldr	r2, [r7, #20]
 802002c:	68fb      	ldr	r3, [r7, #12]
 802002e:	4413      	add	r3, r2
 8020030:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020032:	697a      	ldr	r2, [r7, #20]
 8020034:	683b      	ldr	r3, [r7, #0]
 8020036:	429a      	cmp	r2, r3
 8020038:	da02      	bge.n	8020040 <ip_reass_remove_oldest_datagram+0xb4>
 802003a:	693b      	ldr	r3, [r7, #16]
 802003c:	2b01      	cmp	r3, #1
 802003e:	dcac      	bgt.n	801ff9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8020040:	697b      	ldr	r3, [r7, #20]
}
 8020042:	4618      	mov	r0, r3
 8020044:	3728      	adds	r7, #40	; 0x28
 8020046:	46bd      	mov	sp, r7
 8020048:	bd80      	pop	{r7, pc}
 802004a:	bf00      	nop
 802004c:	200144c4 	.word	0x200144c4

08020050 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8020050:	b580      	push	{r7, lr}
 8020052:	b084      	sub	sp, #16
 8020054:	af00      	add	r7, sp, #0
 8020056:	6078      	str	r0, [r7, #4]
 8020058:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802005a:	2004      	movs	r0, #4
 802005c:	f7f3 fe4a 	bl	8013cf4 <memp_malloc>
 8020060:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	2b00      	cmp	r3, #0
 8020066:	d110      	bne.n	802008a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020068:	6839      	ldr	r1, [r7, #0]
 802006a:	6878      	ldr	r0, [r7, #4]
 802006c:	f7ff ff8e 	bl	801ff8c <ip_reass_remove_oldest_datagram>
 8020070:	4602      	mov	r2, r0
 8020072:	683b      	ldr	r3, [r7, #0]
 8020074:	4293      	cmp	r3, r2
 8020076:	dc03      	bgt.n	8020080 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020078:	2004      	movs	r0, #4
 802007a:	f7f3 fe3b 	bl	8013cf4 <memp_malloc>
 802007e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	2b00      	cmp	r3, #0
 8020084:	d101      	bne.n	802008a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8020086:	2300      	movs	r3, #0
 8020088:	e016      	b.n	80200b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802008a:	2220      	movs	r2, #32
 802008c:	2100      	movs	r1, #0
 802008e:	68f8      	ldr	r0, [r7, #12]
 8020090:	f001 f8f0 	bl	8021274 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020094:	68fb      	ldr	r3, [r7, #12]
 8020096:	220f      	movs	r2, #15
 8020098:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802009a:	4b09      	ldr	r3, [pc, #36]	; (80200c0 <ip_reass_enqueue_new_datagram+0x70>)
 802009c:	681a      	ldr	r2, [r3, #0]
 802009e:	68fb      	ldr	r3, [r7, #12]
 80200a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80200a2:	4a07      	ldr	r2, [pc, #28]	; (80200c0 <ip_reass_enqueue_new_datagram+0x70>)
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80200a8:	68fb      	ldr	r3, [r7, #12]
 80200aa:	3308      	adds	r3, #8
 80200ac:	2214      	movs	r2, #20
 80200ae:	6879      	ldr	r1, [r7, #4]
 80200b0:	4618      	mov	r0, r3
 80200b2:	f001 f8b7 	bl	8021224 <memcpy>
  return ipr;
 80200b6:	68fb      	ldr	r3, [r7, #12]
}
 80200b8:	4618      	mov	r0, r3
 80200ba:	3710      	adds	r7, #16
 80200bc:	46bd      	mov	sp, r7
 80200be:	bd80      	pop	{r7, pc}
 80200c0:	200144c4 	.word	0x200144c4

080200c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80200c4:	b580      	push	{r7, lr}
 80200c6:	b082      	sub	sp, #8
 80200c8:	af00      	add	r7, sp, #0
 80200ca:	6078      	str	r0, [r7, #4]
 80200cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80200ce:	4b10      	ldr	r3, [pc, #64]	; (8020110 <ip_reass_dequeue_datagram+0x4c>)
 80200d0:	681b      	ldr	r3, [r3, #0]
 80200d2:	687a      	ldr	r2, [r7, #4]
 80200d4:	429a      	cmp	r2, r3
 80200d6:	d104      	bne.n	80200e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	4a0c      	ldr	r2, [pc, #48]	; (8020110 <ip_reass_dequeue_datagram+0x4c>)
 80200de:	6013      	str	r3, [r2, #0]
 80200e0:	e00d      	b.n	80200fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80200e2:	683b      	ldr	r3, [r7, #0]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d106      	bne.n	80200f6 <ip_reass_dequeue_datagram+0x32>
 80200e8:	4b0a      	ldr	r3, [pc, #40]	; (8020114 <ip_reass_dequeue_datagram+0x50>)
 80200ea:	f240 1245 	movw	r2, #325	; 0x145
 80200ee:	490a      	ldr	r1, [pc, #40]	; (8020118 <ip_reass_dequeue_datagram+0x54>)
 80200f0:	480a      	ldr	r0, [pc, #40]	; (802011c <ip_reass_dequeue_datagram+0x58>)
 80200f2:	f001 fddb 	bl	8021cac <iprintf>
    prev->next = ipr->next;
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	681a      	ldr	r2, [r3, #0]
 80200fa:	683b      	ldr	r3, [r7, #0]
 80200fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80200fe:	6879      	ldr	r1, [r7, #4]
 8020100:	2004      	movs	r0, #4
 8020102:	f7f3 fe49 	bl	8013d98 <memp_free>
}
 8020106:	bf00      	nop
 8020108:	3708      	adds	r7, #8
 802010a:	46bd      	mov	sp, r7
 802010c:	bd80      	pop	{r7, pc}
 802010e:	bf00      	nop
 8020110:	200144c4 	.word	0x200144c4
 8020114:	080295b0 	.word	0x080295b0
 8020118:	08029678 	.word	0x08029678
 802011c:	080295f8 	.word	0x080295f8

08020120 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020120:	b580      	push	{r7, lr}
 8020122:	b08c      	sub	sp, #48	; 0x30
 8020124:	af00      	add	r7, sp, #0
 8020126:	60f8      	str	r0, [r7, #12]
 8020128:	60b9      	str	r1, [r7, #8]
 802012a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 802012c:	2300      	movs	r3, #0
 802012e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8020130:	2301      	movs	r3, #1
 8020132:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8020134:	68bb      	ldr	r3, [r7, #8]
 8020136:	685b      	ldr	r3, [r3, #4]
 8020138:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802013a:	69fb      	ldr	r3, [r7, #28]
 802013c:	885b      	ldrh	r3, [r3, #2]
 802013e:	b29b      	uxth	r3, r3
 8020140:	4618      	mov	r0, r3
 8020142:	f7f2 f94b 	bl	80123dc <lwip_htons>
 8020146:	4603      	mov	r3, r0
 8020148:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802014a:	69fb      	ldr	r3, [r7, #28]
 802014c:	781b      	ldrb	r3, [r3, #0]
 802014e:	f003 030f 	and.w	r3, r3, #15
 8020152:	b2db      	uxtb	r3, r3
 8020154:	009b      	lsls	r3, r3, #2
 8020156:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8020158:	7e7b      	ldrb	r3, [r7, #25]
 802015a:	b29b      	uxth	r3, r3
 802015c:	8b7a      	ldrh	r2, [r7, #26]
 802015e:	429a      	cmp	r2, r3
 8020160:	d202      	bcs.n	8020168 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020166:	e135      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8020168:	7e7b      	ldrb	r3, [r7, #25]
 802016a:	b29b      	uxth	r3, r3
 802016c:	8b7a      	ldrh	r2, [r7, #26]
 802016e:	1ad3      	subs	r3, r2, r3
 8020170:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8020172:	69fb      	ldr	r3, [r7, #28]
 8020174:	88db      	ldrh	r3, [r3, #6]
 8020176:	b29b      	uxth	r3, r3
 8020178:	4618      	mov	r0, r3
 802017a:	f7f2 f92f 	bl	80123dc <lwip_htons>
 802017e:	4603      	mov	r3, r0
 8020180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020184:	b29b      	uxth	r3, r3
 8020186:	00db      	lsls	r3, r3, #3
 8020188:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802018a:	68bb      	ldr	r3, [r7, #8]
 802018c:	685b      	ldr	r3, [r3, #4]
 802018e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8020190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020192:	2200      	movs	r2, #0
 8020194:	701a      	strb	r2, [r3, #0]
 8020196:	2200      	movs	r2, #0
 8020198:	705a      	strb	r2, [r3, #1]
 802019a:	2200      	movs	r2, #0
 802019c:	709a      	strb	r2, [r3, #2]
 802019e:	2200      	movs	r2, #0
 80201a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80201a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201a4:	8afa      	ldrh	r2, [r7, #22]
 80201a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80201a8:	8afa      	ldrh	r2, [r7, #22]
 80201aa:	8b7b      	ldrh	r3, [r7, #26]
 80201ac:	4413      	add	r3, r2
 80201ae:	b29a      	uxth	r2, r3
 80201b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80201b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201b6:	88db      	ldrh	r3, [r3, #6]
 80201b8:	b29b      	uxth	r3, r3
 80201ba:	8afa      	ldrh	r2, [r7, #22]
 80201bc:	429a      	cmp	r2, r3
 80201be:	d902      	bls.n	80201c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80201c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80201c4:	e106      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80201c6:	68fb      	ldr	r3, [r7, #12]
 80201c8:	685b      	ldr	r3, [r3, #4]
 80201ca:	627b      	str	r3, [r7, #36]	; 0x24
 80201cc:	e068      	b.n	80202a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80201ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201d0:	685b      	ldr	r3, [r3, #4]
 80201d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80201d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201d6:	889b      	ldrh	r3, [r3, #4]
 80201d8:	b29a      	uxth	r2, r3
 80201da:	693b      	ldr	r3, [r7, #16]
 80201dc:	889b      	ldrh	r3, [r3, #4]
 80201de:	b29b      	uxth	r3, r3
 80201e0:	429a      	cmp	r2, r3
 80201e2:	d235      	bcs.n	8020250 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80201e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80201e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80201ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	d020      	beq.n	8020232 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80201f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201f2:	889b      	ldrh	r3, [r3, #4]
 80201f4:	b29a      	uxth	r2, r3
 80201f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201f8:	88db      	ldrh	r3, [r3, #6]
 80201fa:	b29b      	uxth	r3, r3
 80201fc:	429a      	cmp	r2, r3
 80201fe:	d307      	bcc.n	8020210 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8020200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020202:	88db      	ldrh	r3, [r3, #6]
 8020204:	b29a      	uxth	r2, r3
 8020206:	693b      	ldr	r3, [r7, #16]
 8020208:	889b      	ldrh	r3, [r3, #4]
 802020a:	b29b      	uxth	r3, r3
 802020c:	429a      	cmp	r2, r3
 802020e:	d902      	bls.n	8020216 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020214:	e0de      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8020216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020218:	68ba      	ldr	r2, [r7, #8]
 802021a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 802021c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802021e:	88db      	ldrh	r3, [r3, #6]
 8020220:	b29a      	uxth	r2, r3
 8020222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020224:	889b      	ldrh	r3, [r3, #4]
 8020226:	b29b      	uxth	r3, r3
 8020228:	429a      	cmp	r2, r3
 802022a:	d03d      	beq.n	80202a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802022c:	2300      	movs	r3, #0
 802022e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020230:	e03a      	b.n	80202a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8020232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020234:	88db      	ldrh	r3, [r3, #6]
 8020236:	b29a      	uxth	r2, r3
 8020238:	693b      	ldr	r3, [r7, #16]
 802023a:	889b      	ldrh	r3, [r3, #4]
 802023c:	b29b      	uxth	r3, r3
 802023e:	429a      	cmp	r2, r3
 8020240:	d902      	bls.n	8020248 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020246:	e0c5      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8020248:	68fb      	ldr	r3, [r7, #12]
 802024a:	68ba      	ldr	r2, [r7, #8]
 802024c:	605a      	str	r2, [r3, #4]
      break;
 802024e:	e02b      	b.n	80202a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8020250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020252:	889b      	ldrh	r3, [r3, #4]
 8020254:	b29a      	uxth	r2, r3
 8020256:	693b      	ldr	r3, [r7, #16]
 8020258:	889b      	ldrh	r3, [r3, #4]
 802025a:	b29b      	uxth	r3, r3
 802025c:	429a      	cmp	r2, r3
 802025e:	d102      	bne.n	8020266 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020264:	e0b6      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020268:	889b      	ldrh	r3, [r3, #4]
 802026a:	b29a      	uxth	r2, r3
 802026c:	693b      	ldr	r3, [r7, #16]
 802026e:	88db      	ldrh	r3, [r3, #6]
 8020270:	b29b      	uxth	r3, r3
 8020272:	429a      	cmp	r2, r3
 8020274:	d202      	bcs.n	802027c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802027a:	e0ab      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 802027c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802027e:	2b00      	cmp	r3, #0
 8020280:	d009      	beq.n	8020296 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8020282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020284:	88db      	ldrh	r3, [r3, #6]
 8020286:	b29a      	uxth	r2, r3
 8020288:	693b      	ldr	r3, [r7, #16]
 802028a:	889b      	ldrh	r3, [r3, #4]
 802028c:	b29b      	uxth	r3, r3
 802028e:	429a      	cmp	r2, r3
 8020290:	d001      	beq.n	8020296 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020292:	2300      	movs	r3, #0
 8020294:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020296:	693b      	ldr	r3, [r7, #16]
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 802029c:	693b      	ldr	r3, [r7, #16]
 802029e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80202a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d193      	bne.n	80201ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80202a6:	e000      	b.n	80202aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80202a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80202aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d12d      	bne.n	802030c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80202b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d01c      	beq.n	80202f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80202b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202b8:	88db      	ldrh	r3, [r3, #6]
 80202ba:	b29a      	uxth	r2, r3
 80202bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202be:	889b      	ldrh	r3, [r3, #4]
 80202c0:	b29b      	uxth	r3, r3
 80202c2:	429a      	cmp	r2, r3
 80202c4:	d906      	bls.n	80202d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80202c6:	4b45      	ldr	r3, [pc, #276]	; (80203dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80202c8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80202cc:	4944      	ldr	r1, [pc, #272]	; (80203e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80202ce:	4845      	ldr	r0, [pc, #276]	; (80203e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80202d0:	f001 fcec 	bl	8021cac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80202d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202d6:	68ba      	ldr	r2, [r7, #8]
 80202d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80202da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202dc:	88db      	ldrh	r3, [r3, #6]
 80202de:	b29a      	uxth	r2, r3
 80202e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202e2:	889b      	ldrh	r3, [r3, #4]
 80202e4:	b29b      	uxth	r3, r3
 80202e6:	429a      	cmp	r2, r3
 80202e8:	d010      	beq.n	802030c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80202ea:	2300      	movs	r3, #0
 80202ec:	623b      	str	r3, [r7, #32]
 80202ee:	e00d      	b.n	802030c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80202f0:	68fb      	ldr	r3, [r7, #12]
 80202f2:	685b      	ldr	r3, [r3, #4]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d006      	beq.n	8020306 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80202f8:	4b38      	ldr	r3, [pc, #224]	; (80203dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80202fa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80202fe:	493a      	ldr	r1, [pc, #232]	; (80203e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020300:	4838      	ldr	r0, [pc, #224]	; (80203e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020302:	f001 fcd3 	bl	8021cac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8020306:	68fb      	ldr	r3, [r7, #12]
 8020308:	68ba      	ldr	r2, [r7, #8]
 802030a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	2b00      	cmp	r3, #0
 8020310:	d105      	bne.n	802031e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8020312:	68fb      	ldr	r3, [r7, #12]
 8020314:	7f9b      	ldrb	r3, [r3, #30]
 8020316:	f003 0301 	and.w	r3, r3, #1
 802031a:	2b00      	cmp	r3, #0
 802031c:	d059      	beq.n	80203d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802031e:	6a3b      	ldr	r3, [r7, #32]
 8020320:	2b00      	cmp	r3, #0
 8020322:	d04f      	beq.n	80203c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8020324:	68fb      	ldr	r3, [r7, #12]
 8020326:	685b      	ldr	r3, [r3, #4]
 8020328:	2b00      	cmp	r3, #0
 802032a:	d006      	beq.n	802033a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 802032c:	68fb      	ldr	r3, [r7, #12]
 802032e:	685b      	ldr	r3, [r3, #4]
 8020330:	685b      	ldr	r3, [r3, #4]
 8020332:	889b      	ldrh	r3, [r3, #4]
 8020334:	b29b      	uxth	r3, r3
 8020336:	2b00      	cmp	r3, #0
 8020338:	d002      	beq.n	8020340 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802033a:	2300      	movs	r3, #0
 802033c:	623b      	str	r3, [r7, #32]
 802033e:	e041      	b.n	80203c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8020340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020342:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8020344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020346:	681b      	ldr	r3, [r3, #0]
 8020348:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802034a:	e012      	b.n	8020372 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 802034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802034e:	685b      	ldr	r3, [r3, #4]
 8020350:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8020352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020354:	88db      	ldrh	r3, [r3, #6]
 8020356:	b29a      	uxth	r2, r3
 8020358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802035a:	889b      	ldrh	r3, [r3, #4]
 802035c:	b29b      	uxth	r3, r3
 802035e:	429a      	cmp	r2, r3
 8020360:	d002      	beq.n	8020368 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8020362:	2300      	movs	r3, #0
 8020364:	623b      	str	r3, [r7, #32]
            break;
 8020366:	e007      	b.n	8020378 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8020368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802036a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 802036c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8020372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020374:	2b00      	cmp	r3, #0
 8020376:	d1e9      	bne.n	802034c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020378:	6a3b      	ldr	r3, [r7, #32]
 802037a:	2b00      	cmp	r3, #0
 802037c:	d022      	beq.n	80203c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802037e:	68fb      	ldr	r3, [r7, #12]
 8020380:	685b      	ldr	r3, [r3, #4]
 8020382:	2b00      	cmp	r3, #0
 8020384:	d106      	bne.n	8020394 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8020386:	4b15      	ldr	r3, [pc, #84]	; (80203dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020388:	f240 12df 	movw	r2, #479	; 0x1df
 802038c:	4917      	ldr	r1, [pc, #92]	; (80203ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802038e:	4815      	ldr	r0, [pc, #84]	; (80203e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020390:	f001 fc8c 	bl	8021cac <iprintf>
          LWIP_ASSERT("sanity check",
 8020394:	68fb      	ldr	r3, [r7, #12]
 8020396:	685b      	ldr	r3, [r3, #4]
 8020398:	685b      	ldr	r3, [r3, #4]
 802039a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802039c:	429a      	cmp	r2, r3
 802039e:	d106      	bne.n	80203ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80203a0:	4b0e      	ldr	r3, [pc, #56]	; (80203dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80203a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80203a6:	4911      	ldr	r1, [pc, #68]	; (80203ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80203a8:	480e      	ldr	r0, [pc, #56]	; (80203e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80203aa:	f001 fc7f 	bl	8021cac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80203ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	d006      	beq.n	80203c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80203b6:	4b09      	ldr	r3, [pc, #36]	; (80203dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80203b8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80203bc:	490c      	ldr	r1, [pc, #48]	; (80203f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80203be:	4809      	ldr	r0, [pc, #36]	; (80203e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80203c0:	f001 fc74 	bl	8021cac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80203c4:	6a3b      	ldr	r3, [r7, #32]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	bf14      	ite	ne
 80203ca:	2301      	movne	r3, #1
 80203cc:	2300      	moveq	r3, #0
 80203ce:	b2db      	uxtb	r3, r3
 80203d0:	e000      	b.n	80203d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80203d2:	2300      	movs	r3, #0
}
 80203d4:	4618      	mov	r0, r3
 80203d6:	3730      	adds	r7, #48	; 0x30
 80203d8:	46bd      	mov	sp, r7
 80203da:	bd80      	pop	{r7, pc}
 80203dc:	080295b0 	.word	0x080295b0
 80203e0:	08029694 	.word	0x08029694
 80203e4:	080295f8 	.word	0x080295f8
 80203e8:	080296b4 	.word	0x080296b4
 80203ec:	080296ec 	.word	0x080296ec
 80203f0:	080296fc 	.word	0x080296fc

080203f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80203f4:	b580      	push	{r7, lr}
 80203f6:	b08e      	sub	sp, #56	; 0x38
 80203f8:	af00      	add	r7, sp, #0
 80203fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	685b      	ldr	r3, [r3, #4]
 8020400:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8020402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020404:	781b      	ldrb	r3, [r3, #0]
 8020406:	f003 030f 	and.w	r3, r3, #15
 802040a:	b2db      	uxtb	r3, r3
 802040c:	009b      	lsls	r3, r3, #2
 802040e:	b2db      	uxtb	r3, r3
 8020410:	2b14      	cmp	r3, #20
 8020412:	f040 8167 	bne.w	80206e4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8020416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020418:	88db      	ldrh	r3, [r3, #6]
 802041a:	b29b      	uxth	r3, r3
 802041c:	4618      	mov	r0, r3
 802041e:	f7f1 ffdd 	bl	80123dc <lwip_htons>
 8020422:	4603      	mov	r3, r0
 8020424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020428:	b29b      	uxth	r3, r3
 802042a:	00db      	lsls	r3, r3, #3
 802042c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020430:	885b      	ldrh	r3, [r3, #2]
 8020432:	b29b      	uxth	r3, r3
 8020434:	4618      	mov	r0, r3
 8020436:	f7f1 ffd1 	bl	80123dc <lwip_htons>
 802043a:	4603      	mov	r3, r0
 802043c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802043e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020440:	781b      	ldrb	r3, [r3, #0]
 8020442:	f003 030f 	and.w	r3, r3, #15
 8020446:	b2db      	uxtb	r3, r3
 8020448:	009b      	lsls	r3, r3, #2
 802044a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802044e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020452:	b29b      	uxth	r3, r3
 8020454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020456:	429a      	cmp	r2, r3
 8020458:	f0c0 8146 	bcc.w	80206e8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 802045c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020460:	b29b      	uxth	r3, r3
 8020462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020464:	1ad3      	subs	r3, r2, r3
 8020466:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020468:	6878      	ldr	r0, [r7, #4]
 802046a:	f7f4 fc05 	bl	8014c78 <pbuf_clen>
 802046e:	4603      	mov	r3, r0
 8020470:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8020472:	4b9f      	ldr	r3, [pc, #636]	; (80206f0 <ip4_reass+0x2fc>)
 8020474:	881b      	ldrh	r3, [r3, #0]
 8020476:	461a      	mov	r2, r3
 8020478:	8c3b      	ldrh	r3, [r7, #32]
 802047a:	4413      	add	r3, r2
 802047c:	2b0a      	cmp	r3, #10
 802047e:	dd10      	ble.n	80204a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020480:	8c3b      	ldrh	r3, [r7, #32]
 8020482:	4619      	mov	r1, r3
 8020484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020486:	f7ff fd81 	bl	801ff8c <ip_reass_remove_oldest_datagram>
 802048a:	4603      	mov	r3, r0
 802048c:	2b00      	cmp	r3, #0
 802048e:	f000 812d 	beq.w	80206ec <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8020492:	4b97      	ldr	r3, [pc, #604]	; (80206f0 <ip4_reass+0x2fc>)
 8020494:	881b      	ldrh	r3, [r3, #0]
 8020496:	461a      	mov	r2, r3
 8020498:	8c3b      	ldrh	r3, [r7, #32]
 802049a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802049c:	2b0a      	cmp	r3, #10
 802049e:	f300 8125 	bgt.w	80206ec <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80204a2:	4b94      	ldr	r3, [pc, #592]	; (80206f4 <ip4_reass+0x300>)
 80204a4:	681b      	ldr	r3, [r3, #0]
 80204a6:	633b      	str	r3, [r7, #48]	; 0x30
 80204a8:	e015      	b.n	80204d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80204aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204ac:	695a      	ldr	r2, [r3, #20]
 80204ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204b0:	68db      	ldr	r3, [r3, #12]
 80204b2:	429a      	cmp	r2, r3
 80204b4:	d10c      	bne.n	80204d0 <ip4_reass+0xdc>
 80204b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204b8:	699a      	ldr	r2, [r3, #24]
 80204ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204bc:	691b      	ldr	r3, [r3, #16]
 80204be:	429a      	cmp	r2, r3
 80204c0:	d106      	bne.n	80204d0 <ip4_reass+0xdc>
 80204c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204c4:	899a      	ldrh	r2, [r3, #12]
 80204c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204c8:	889b      	ldrh	r3, [r3, #4]
 80204ca:	b29b      	uxth	r3, r3
 80204cc:	429a      	cmp	r2, r3
 80204ce:	d006      	beq.n	80204de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80204d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	633b      	str	r3, [r7, #48]	; 0x30
 80204d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d1e6      	bne.n	80204aa <ip4_reass+0xb6>
 80204dc:	e000      	b.n	80204e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80204de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80204e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d109      	bne.n	80204fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80204e6:	8c3b      	ldrh	r3, [r7, #32]
 80204e8:	4619      	mov	r1, r3
 80204ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80204ec:	f7ff fdb0 	bl	8020050 <ip_reass_enqueue_new_datagram>
 80204f0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80204f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	d11c      	bne.n	8020532 <ip4_reass+0x13e>
      goto nullreturn;
 80204f8:	e109      	b.n	802070e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80204fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204fc:	88db      	ldrh	r3, [r3, #6]
 80204fe:	b29b      	uxth	r3, r3
 8020500:	4618      	mov	r0, r3
 8020502:	f7f1 ff6b 	bl	80123dc <lwip_htons>
 8020506:	4603      	mov	r3, r0
 8020508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802050c:	2b00      	cmp	r3, #0
 802050e:	d110      	bne.n	8020532 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020512:	89db      	ldrh	r3, [r3, #14]
 8020514:	4618      	mov	r0, r3
 8020516:	f7f1 ff61 	bl	80123dc <lwip_htons>
 802051a:	4603      	mov	r3, r0
 802051c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020520:	2b00      	cmp	r3, #0
 8020522:	d006      	beq.n	8020532 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020526:	3308      	adds	r3, #8
 8020528:	2214      	movs	r2, #20
 802052a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802052c:	4618      	mov	r0, r3
 802052e:	f000 fe79 	bl	8021224 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020534:	88db      	ldrh	r3, [r3, #6]
 8020536:	b29b      	uxth	r3, r3
 8020538:	f003 0320 	and.w	r3, r3, #32
 802053c:	2b00      	cmp	r3, #0
 802053e:	bf0c      	ite	eq
 8020540:	2301      	moveq	r3, #1
 8020542:	2300      	movne	r3, #0
 8020544:	b2db      	uxtb	r3, r3
 8020546:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020548:	69fb      	ldr	r3, [r7, #28]
 802054a:	2b00      	cmp	r3, #0
 802054c:	d00e      	beq.n	802056c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802054e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020552:	4413      	add	r3, r2
 8020554:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020556:	8b7a      	ldrh	r2, [r7, #26]
 8020558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802055a:	429a      	cmp	r2, r3
 802055c:	f0c0 80a0 	bcc.w	80206a0 <ip4_reass+0x2ac>
 8020560:	8b7b      	ldrh	r3, [r7, #26]
 8020562:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8020566:	4293      	cmp	r3, r2
 8020568:	f200 809a 	bhi.w	80206a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 802056c:	69fa      	ldr	r2, [r7, #28]
 802056e:	6879      	ldr	r1, [r7, #4]
 8020570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020572:	f7ff fdd5 	bl	8020120 <ip_reass_chain_frag_into_datagram_and_validate>
 8020576:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020578:	697b      	ldr	r3, [r7, #20]
 802057a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802057e:	f000 8091 	beq.w	80206a4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020582:	4b5b      	ldr	r3, [pc, #364]	; (80206f0 <ip4_reass+0x2fc>)
 8020584:	881a      	ldrh	r2, [r3, #0]
 8020586:	8c3b      	ldrh	r3, [r7, #32]
 8020588:	4413      	add	r3, r2
 802058a:	b29a      	uxth	r2, r3
 802058c:	4b58      	ldr	r3, [pc, #352]	; (80206f0 <ip4_reass+0x2fc>)
 802058e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020590:	69fb      	ldr	r3, [r7, #28]
 8020592:	2b00      	cmp	r3, #0
 8020594:	d00d      	beq.n	80205b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8020596:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802059a:	4413      	add	r3, r2
 802059c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205a0:	8a7a      	ldrh	r2, [r7, #18]
 80205a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80205a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205a6:	7f9b      	ldrb	r3, [r3, #30]
 80205a8:	f043 0301 	orr.w	r3, r3, #1
 80205ac:	b2da      	uxtb	r2, r3
 80205ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80205b2:	697b      	ldr	r3, [r7, #20]
 80205b4:	2b01      	cmp	r3, #1
 80205b6:	d171      	bne.n	802069c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80205b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205ba:	8b9b      	ldrh	r3, [r3, #28]
 80205bc:	3314      	adds	r3, #20
 80205be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80205c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205c2:	685b      	ldr	r3, [r3, #4]
 80205c4:	685b      	ldr	r3, [r3, #4]
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80205ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205cc:	685b      	ldr	r3, [r3, #4]
 80205ce:	685b      	ldr	r3, [r3, #4]
 80205d0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80205d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205d4:	3308      	adds	r3, #8
 80205d6:	2214      	movs	r2, #20
 80205d8:	4619      	mov	r1, r3
 80205da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80205dc:	f000 fe22 	bl	8021224 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80205e0:	8a3b      	ldrh	r3, [r7, #16]
 80205e2:	4618      	mov	r0, r3
 80205e4:	f7f1 fefa 	bl	80123dc <lwip_htons>
 80205e8:	4603      	mov	r3, r0
 80205ea:	461a      	mov	r2, r3
 80205ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80205f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205f2:	2200      	movs	r2, #0
 80205f4:	719a      	strb	r2, [r3, #6]
 80205f6:	2200      	movs	r2, #0
 80205f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80205fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205fc:	2200      	movs	r2, #0
 80205fe:	729a      	strb	r2, [r3, #10]
 8020600:	2200      	movs	r2, #0
 8020602:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8020604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020606:	685b      	ldr	r3, [r3, #4]
 8020608:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802060a:	e00d      	b.n	8020628 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 802060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802060e:	685b      	ldr	r3, [r3, #4]
 8020610:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8020612:	2114      	movs	r1, #20
 8020614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020616:	f7f4 f9e9 	bl	80149ec <pbuf_remove_header>
      pbuf_cat(p, r);
 802061a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802061c:	6878      	ldr	r0, [r7, #4]
 802061e:	f7f4 fb6b 	bl	8014cf8 <pbuf_cat>
      r = iprh->next_pbuf;
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8020628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802062a:	2b00      	cmp	r3, #0
 802062c:	d1ee      	bne.n	802060c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802062e:	4b31      	ldr	r3, [pc, #196]	; (80206f4 <ip4_reass+0x300>)
 8020630:	681b      	ldr	r3, [r3, #0]
 8020632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020634:	429a      	cmp	r2, r3
 8020636:	d102      	bne.n	802063e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020638:	2300      	movs	r3, #0
 802063a:	637b      	str	r3, [r7, #52]	; 0x34
 802063c:	e010      	b.n	8020660 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802063e:	4b2d      	ldr	r3, [pc, #180]	; (80206f4 <ip4_reass+0x300>)
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	637b      	str	r3, [r7, #52]	; 0x34
 8020644:	e007      	b.n	8020656 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020648:	681b      	ldr	r3, [r3, #0]
 802064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802064c:	429a      	cmp	r2, r3
 802064e:	d006      	beq.n	802065e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	637b      	str	r3, [r7, #52]	; 0x34
 8020656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020658:	2b00      	cmp	r3, #0
 802065a:	d1f4      	bne.n	8020646 <ip4_reass+0x252>
 802065c:	e000      	b.n	8020660 <ip4_reass+0x26c>
          break;
 802065e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020664:	f7ff fd2e 	bl	80200c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020668:	6878      	ldr	r0, [r7, #4]
 802066a:	f7f4 fb05 	bl	8014c78 <pbuf_clen>
 802066e:	4603      	mov	r3, r0
 8020670:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8020672:	4b1f      	ldr	r3, [pc, #124]	; (80206f0 <ip4_reass+0x2fc>)
 8020674:	881b      	ldrh	r3, [r3, #0]
 8020676:	8c3a      	ldrh	r2, [r7, #32]
 8020678:	429a      	cmp	r2, r3
 802067a:	d906      	bls.n	802068a <ip4_reass+0x296>
 802067c:	4b1e      	ldr	r3, [pc, #120]	; (80206f8 <ip4_reass+0x304>)
 802067e:	f240 229b 	movw	r2, #667	; 0x29b
 8020682:	491e      	ldr	r1, [pc, #120]	; (80206fc <ip4_reass+0x308>)
 8020684:	481e      	ldr	r0, [pc, #120]	; (8020700 <ip4_reass+0x30c>)
 8020686:	f001 fb11 	bl	8021cac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802068a:	4b19      	ldr	r3, [pc, #100]	; (80206f0 <ip4_reass+0x2fc>)
 802068c:	881a      	ldrh	r2, [r3, #0]
 802068e:	8c3b      	ldrh	r3, [r7, #32]
 8020690:	1ad3      	subs	r3, r2, r3
 8020692:	b29a      	uxth	r2, r3
 8020694:	4b16      	ldr	r3, [pc, #88]	; (80206f0 <ip4_reass+0x2fc>)
 8020696:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	e03c      	b.n	8020716 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 802069c:	2300      	movs	r3, #0
 802069e:	e03a      	b.n	8020716 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80206a0:	bf00      	nop
 80206a2:	e000      	b.n	80206a6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80206a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80206a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d106      	bne.n	80206ba <ip4_reass+0x2c6>
 80206ac:	4b12      	ldr	r3, [pc, #72]	; (80206f8 <ip4_reass+0x304>)
 80206ae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80206b2:	4914      	ldr	r1, [pc, #80]	; (8020704 <ip4_reass+0x310>)
 80206b4:	4812      	ldr	r0, [pc, #72]	; (8020700 <ip4_reass+0x30c>)
 80206b6:	f001 faf9 	bl	8021cac <iprintf>
  if (ipr->p == NULL) {
 80206ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206bc:	685b      	ldr	r3, [r3, #4]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d124      	bne.n	802070c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80206c2:	4b0c      	ldr	r3, [pc, #48]	; (80206f4 <ip4_reass+0x300>)
 80206c4:	681b      	ldr	r3, [r3, #0]
 80206c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80206c8:	429a      	cmp	r2, r3
 80206ca:	d006      	beq.n	80206da <ip4_reass+0x2e6>
 80206cc:	4b0a      	ldr	r3, [pc, #40]	; (80206f8 <ip4_reass+0x304>)
 80206ce:	f240 22ab 	movw	r2, #683	; 0x2ab
 80206d2:	490d      	ldr	r1, [pc, #52]	; (8020708 <ip4_reass+0x314>)
 80206d4:	480a      	ldr	r0, [pc, #40]	; (8020700 <ip4_reass+0x30c>)
 80206d6:	f001 fae9 	bl	8021cac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80206da:	2100      	movs	r1, #0
 80206dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80206de:	f7ff fcf1 	bl	80200c4 <ip_reass_dequeue_datagram>
 80206e2:	e014      	b.n	802070e <ip4_reass+0x31a>
    goto nullreturn;
 80206e4:	bf00      	nop
 80206e6:	e012      	b.n	802070e <ip4_reass+0x31a>
    goto nullreturn;
 80206e8:	bf00      	nop
 80206ea:	e010      	b.n	802070e <ip4_reass+0x31a>
      goto nullreturn;
 80206ec:	bf00      	nop
 80206ee:	e00e      	b.n	802070e <ip4_reass+0x31a>
 80206f0:	200144c8 	.word	0x200144c8
 80206f4:	200144c4 	.word	0x200144c4
 80206f8:	080295b0 	.word	0x080295b0
 80206fc:	08029720 	.word	0x08029720
 8020700:	080295f8 	.word	0x080295f8
 8020704:	0802973c 	.word	0x0802973c
 8020708:	08029748 	.word	0x08029748
  }

nullreturn:
 802070c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802070e:	6878      	ldr	r0, [r7, #4]
 8020710:	f7f4 fa24 	bl	8014b5c <pbuf_free>
  return NULL;
 8020714:	2300      	movs	r3, #0
}
 8020716:	4618      	mov	r0, r3
 8020718:	3738      	adds	r7, #56	; 0x38
 802071a:	46bd      	mov	sp, r7
 802071c:	bd80      	pop	{r7, pc}
 802071e:	bf00      	nop

08020720 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020720:	b580      	push	{r7, lr}
 8020722:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020724:	2005      	movs	r0, #5
 8020726:	f7f3 fae5 	bl	8013cf4 <memp_malloc>
 802072a:	4603      	mov	r3, r0
}
 802072c:	4618      	mov	r0, r3
 802072e:	bd80      	pop	{r7, pc}

08020730 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8020730:	b580      	push	{r7, lr}
 8020732:	b082      	sub	sp, #8
 8020734:	af00      	add	r7, sp, #0
 8020736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020738:	687b      	ldr	r3, [r7, #4]
 802073a:	2b00      	cmp	r3, #0
 802073c:	d106      	bne.n	802074c <ip_frag_free_pbuf_custom_ref+0x1c>
 802073e:	4b07      	ldr	r3, [pc, #28]	; (802075c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020740:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020744:	4906      	ldr	r1, [pc, #24]	; (8020760 <ip_frag_free_pbuf_custom_ref+0x30>)
 8020746:	4807      	ldr	r0, [pc, #28]	; (8020764 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020748:	f001 fab0 	bl	8021cac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802074c:	6879      	ldr	r1, [r7, #4]
 802074e:	2005      	movs	r0, #5
 8020750:	f7f3 fb22 	bl	8013d98 <memp_free>
}
 8020754:	bf00      	nop
 8020756:	3708      	adds	r7, #8
 8020758:	46bd      	mov	sp, r7
 802075a:	bd80      	pop	{r7, pc}
 802075c:	080295b0 	.word	0x080295b0
 8020760:	08029768 	.word	0x08029768
 8020764:	080295f8 	.word	0x080295f8

08020768 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020768:	b580      	push	{r7, lr}
 802076a:	b084      	sub	sp, #16
 802076c:	af00      	add	r7, sp, #0
 802076e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	2b00      	cmp	r3, #0
 8020778:	d106      	bne.n	8020788 <ipfrag_free_pbuf_custom+0x20>
 802077a:	4b11      	ldr	r3, [pc, #68]	; (80207c0 <ipfrag_free_pbuf_custom+0x58>)
 802077c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8020780:	4910      	ldr	r1, [pc, #64]	; (80207c4 <ipfrag_free_pbuf_custom+0x5c>)
 8020782:	4811      	ldr	r0, [pc, #68]	; (80207c8 <ipfrag_free_pbuf_custom+0x60>)
 8020784:	f001 fa92 	bl	8021cac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020788:	68fa      	ldr	r2, [r7, #12]
 802078a:	687b      	ldr	r3, [r7, #4]
 802078c:	429a      	cmp	r2, r3
 802078e:	d006      	beq.n	802079e <ipfrag_free_pbuf_custom+0x36>
 8020790:	4b0b      	ldr	r3, [pc, #44]	; (80207c0 <ipfrag_free_pbuf_custom+0x58>)
 8020792:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020796:	490d      	ldr	r1, [pc, #52]	; (80207cc <ipfrag_free_pbuf_custom+0x64>)
 8020798:	480b      	ldr	r0, [pc, #44]	; (80207c8 <ipfrag_free_pbuf_custom+0x60>)
 802079a:	f001 fa87 	bl	8021cac <iprintf>
  if (pcr->original != NULL) {
 802079e:	68fb      	ldr	r3, [r7, #12]
 80207a0:	695b      	ldr	r3, [r3, #20]
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d004      	beq.n	80207b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80207a6:	68fb      	ldr	r3, [r7, #12]
 80207a8:	695b      	ldr	r3, [r3, #20]
 80207aa:	4618      	mov	r0, r3
 80207ac:	f7f4 f9d6 	bl	8014b5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80207b0:	68f8      	ldr	r0, [r7, #12]
 80207b2:	f7ff ffbd 	bl	8020730 <ip_frag_free_pbuf_custom_ref>
}
 80207b6:	bf00      	nop
 80207b8:	3710      	adds	r7, #16
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd80      	pop	{r7, pc}
 80207be:	bf00      	nop
 80207c0:	080295b0 	.word	0x080295b0
 80207c4:	08029774 	.word	0x08029774
 80207c8:	080295f8 	.word	0x080295f8
 80207cc:	08029780 	.word	0x08029780

080207d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b094      	sub	sp, #80	; 0x50
 80207d4:	af02      	add	r7, sp, #8
 80207d6:	60f8      	str	r0, [r7, #12]
 80207d8:	60b9      	str	r1, [r7, #8]
 80207da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80207dc:	2300      	movs	r3, #0
 80207de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80207e2:	68bb      	ldr	r3, [r7, #8]
 80207e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80207e6:	3b14      	subs	r3, #20
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	da00      	bge.n	80207ee <ip4_frag+0x1e>
 80207ec:	3307      	adds	r3, #7
 80207ee:	10db      	asrs	r3, r3, #3
 80207f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80207f2:	2314      	movs	r3, #20
 80207f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80207f6:	68fb      	ldr	r3, [r7, #12]
 80207f8:	685b      	ldr	r3, [r3, #4]
 80207fa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80207fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8020800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020802:	781b      	ldrb	r3, [r3, #0]
 8020804:	f003 030f 	and.w	r3, r3, #15
 8020808:	b2db      	uxtb	r3, r3
 802080a:	009b      	lsls	r3, r3, #2
 802080c:	b2db      	uxtb	r3, r3
 802080e:	2b14      	cmp	r3, #20
 8020810:	d002      	beq.n	8020818 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8020812:	f06f 0305 	mvn.w	r3, #5
 8020816:	e110      	b.n	8020a3a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	895b      	ldrh	r3, [r3, #10]
 802081c:	2b13      	cmp	r3, #19
 802081e:	d809      	bhi.n	8020834 <ip4_frag+0x64>
 8020820:	4b88      	ldr	r3, [pc, #544]	; (8020a44 <ip4_frag+0x274>)
 8020822:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020826:	4988      	ldr	r1, [pc, #544]	; (8020a48 <ip4_frag+0x278>)
 8020828:	4888      	ldr	r0, [pc, #544]	; (8020a4c <ip4_frag+0x27c>)
 802082a:	f001 fa3f 	bl	8021cac <iprintf>
 802082e:	f06f 0305 	mvn.w	r3, #5
 8020832:	e102      	b.n	8020a3a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020836:	88db      	ldrh	r3, [r3, #6]
 8020838:	b29b      	uxth	r3, r3
 802083a:	4618      	mov	r0, r3
 802083c:	f7f1 fdce 	bl	80123dc <lwip_htons>
 8020840:	4603      	mov	r3, r0
 8020842:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020846:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802084a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802084e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020854:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020856:	68fb      	ldr	r3, [r7, #12]
 8020858:	891b      	ldrh	r3, [r3, #8]
 802085a:	3b14      	subs	r3, #20
 802085c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8020860:	e0e1      	b.n	8020a26 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020862:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020864:	00db      	lsls	r3, r3, #3
 8020866:	b29b      	uxth	r3, r3
 8020868:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802086c:	4293      	cmp	r3, r2
 802086e:	bf28      	it	cs
 8020870:	4613      	movcs	r3, r2
 8020872:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020874:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020878:	2114      	movs	r1, #20
 802087a:	200e      	movs	r0, #14
 802087c:	f7f3 fe58 	bl	8014530 <pbuf_alloc>
 8020880:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8020882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020884:	2b00      	cmp	r3, #0
 8020886:	f000 80d5 	beq.w	8020a34 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802088c:	895b      	ldrh	r3, [r3, #10]
 802088e:	2b13      	cmp	r3, #19
 8020890:	d806      	bhi.n	80208a0 <ip4_frag+0xd0>
 8020892:	4b6c      	ldr	r3, [pc, #432]	; (8020a44 <ip4_frag+0x274>)
 8020894:	f44f 7249 	mov.w	r2, #804	; 0x324
 8020898:	496d      	ldr	r1, [pc, #436]	; (8020a50 <ip4_frag+0x280>)
 802089a:	486c      	ldr	r0, [pc, #432]	; (8020a4c <ip4_frag+0x27c>)
 802089c:	f001 fa06 	bl	8021cac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80208a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208a2:	685b      	ldr	r3, [r3, #4]
 80208a4:	2214      	movs	r2, #20
 80208a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80208a8:	4618      	mov	r0, r3
 80208aa:	f000 fcbb 	bl	8021224 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80208ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208b0:	685b      	ldr	r3, [r3, #4]
 80208b2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80208b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80208b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80208ba:	e064      	b.n	8020986 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80208bc:	68fb      	ldr	r3, [r7, #12]
 80208be:	895a      	ldrh	r2, [r3, #10]
 80208c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80208c2:	1ad3      	subs	r3, r2, r3
 80208c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	895b      	ldrh	r3, [r3, #10]
 80208ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80208cc:	429a      	cmp	r2, r3
 80208ce:	d906      	bls.n	80208de <ip4_frag+0x10e>
 80208d0:	4b5c      	ldr	r3, [pc, #368]	; (8020a44 <ip4_frag+0x274>)
 80208d2:	f240 322d 	movw	r2, #813	; 0x32d
 80208d6:	495f      	ldr	r1, [pc, #380]	; (8020a54 <ip4_frag+0x284>)
 80208d8:	485c      	ldr	r0, [pc, #368]	; (8020a4c <ip4_frag+0x27c>)
 80208da:	f001 f9e7 	bl	8021cac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80208de:	8bfa      	ldrh	r2, [r7, #30]
 80208e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80208e4:	4293      	cmp	r3, r2
 80208e6:	bf28      	it	cs
 80208e8:	4613      	movcs	r3, r2
 80208ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80208ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d105      	bne.n	8020902 <ip4_frag+0x132>
        poff = 0;
 80208f6:	2300      	movs	r3, #0
 80208f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	60fb      	str	r3, [r7, #12]
        continue;
 8020900:	e041      	b.n	8020986 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8020902:	f7ff ff0d 	bl	8020720 <ip_frag_alloc_pbuf_custom_ref>
 8020906:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8020908:	69bb      	ldr	r3, [r7, #24]
 802090a:	2b00      	cmp	r3, #0
 802090c:	d103      	bne.n	8020916 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802090e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020910:	f7f4 f924 	bl	8014b5c <pbuf_free>
        goto memerr;
 8020914:	e08f      	b.n	8020a36 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020916:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802091c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802091e:	4413      	add	r3, r2
 8020920:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8020924:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020928:	9201      	str	r2, [sp, #4]
 802092a:	9300      	str	r3, [sp, #0]
 802092c:	4603      	mov	r3, r0
 802092e:	2241      	movs	r2, #65	; 0x41
 8020930:	2000      	movs	r0, #0
 8020932:	f7f3 ff27 	bl	8014784 <pbuf_alloced_custom>
 8020936:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020938:	697b      	ldr	r3, [r7, #20]
 802093a:	2b00      	cmp	r3, #0
 802093c:	d106      	bne.n	802094c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802093e:	69b8      	ldr	r0, [r7, #24]
 8020940:	f7ff fef6 	bl	8020730 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020946:	f7f4 f909 	bl	8014b5c <pbuf_free>
        goto memerr;
 802094a:	e074      	b.n	8020a36 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 802094c:	68f8      	ldr	r0, [r7, #12]
 802094e:	f7f4 f9ab 	bl	8014ca8 <pbuf_ref>
      pcr->original = p;
 8020952:	69bb      	ldr	r3, [r7, #24]
 8020954:	68fa      	ldr	r2, [r7, #12]
 8020956:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020958:	69bb      	ldr	r3, [r7, #24]
 802095a:	4a3f      	ldr	r2, [pc, #252]	; (8020a58 <ip4_frag+0x288>)
 802095c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802095e:	6979      	ldr	r1, [r7, #20]
 8020960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020962:	f7f4 f9c9 	bl	8014cf8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020966:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802096a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802096e:	1ad3      	subs	r3, r2, r3
 8020970:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020974:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020978:	2b00      	cmp	r3, #0
 802097a:	d004      	beq.n	8020986 <ip4_frag+0x1b6>
        poff = 0;
 802097c:	2300      	movs	r3, #0
 802097e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020986:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802098a:	2b00      	cmp	r3, #0
 802098c:	d196      	bne.n	80208bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802098e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8020990:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020994:	4413      	add	r3, r2
 8020996:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020998:	68bb      	ldr	r3, [r7, #8]
 802099a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802099c:	f1a3 0213 	sub.w	r2, r3, #19
 80209a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80209a4:	429a      	cmp	r2, r3
 80209a6:	bfcc      	ite	gt
 80209a8:	2301      	movgt	r3, #1
 80209aa:	2300      	movle	r3, #0
 80209ac:	b2db      	uxtb	r3, r3
 80209ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80209b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80209b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80209b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80209ba:	6a3b      	ldr	r3, [r7, #32]
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d002      	beq.n	80209c6 <ip4_frag+0x1f6>
 80209c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d003      	beq.n	80209ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80209c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80209c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80209cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80209ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80209d0:	4618      	mov	r0, r3
 80209d2:	f7f1 fd03 	bl	80123dc <lwip_htons>
 80209d6:	4603      	mov	r3, r0
 80209d8:	461a      	mov	r2, r3
 80209da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80209de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80209e0:	3314      	adds	r3, #20
 80209e2:	b29b      	uxth	r3, r3
 80209e4:	4618      	mov	r0, r3
 80209e6:	f7f1 fcf9 	bl	80123dc <lwip_htons>
 80209ea:	4603      	mov	r3, r0
 80209ec:	461a      	mov	r2, r3
 80209ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80209f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209f4:	2200      	movs	r2, #0
 80209f6:	729a      	strb	r2, [r3, #10]
 80209f8:	2200      	movs	r2, #0
 80209fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80209fc:	68bb      	ldr	r3, [r7, #8]
 80209fe:	695b      	ldr	r3, [r3, #20]
 8020a00:	687a      	ldr	r2, [r7, #4]
 8020a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020a04:	68b8      	ldr	r0, [r7, #8]
 8020a06:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020a0a:	f7f4 f8a7 	bl	8014b5c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8020a0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020a12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020a14:	1ad3      	subs	r3, r2, r3
 8020a16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020a1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8020a1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020a20:	4413      	add	r3, r2
 8020a22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8020a26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	f47f af19 	bne.w	8020862 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020a30:	2300      	movs	r3, #0
 8020a32:	e002      	b.n	8020a3a <ip4_frag+0x26a>
      goto memerr;
 8020a34:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	3748      	adds	r7, #72	; 0x48
 8020a3e:	46bd      	mov	sp, r7
 8020a40:	bd80      	pop	{r7, pc}
 8020a42:	bf00      	nop
 8020a44:	080295b0 	.word	0x080295b0
 8020a48:	0802978c 	.word	0x0802978c
 8020a4c:	080295f8 	.word	0x080295f8
 8020a50:	080297a8 	.word	0x080297a8
 8020a54:	080297c8 	.word	0x080297c8
 8020a58:	08020769 	.word	0x08020769

08020a5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020a5c:	b580      	push	{r7, lr}
 8020a5e:	b086      	sub	sp, #24
 8020a60:	af00      	add	r7, sp, #0
 8020a62:	6078      	str	r0, [r7, #4]
 8020a64:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8020a66:	230e      	movs	r3, #14
 8020a68:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	895b      	ldrh	r3, [r3, #10]
 8020a6e:	2b0e      	cmp	r3, #14
 8020a70:	d96e      	bls.n	8020b50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	7bdb      	ldrb	r3, [r3, #15]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d106      	bne.n	8020a88 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020a80:	3301      	adds	r3, #1
 8020a82:	b2da      	uxtb	r2, r3
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	685b      	ldr	r3, [r3, #4]
 8020a8c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020a8e:	693b      	ldr	r3, [r7, #16]
 8020a90:	7b1a      	ldrb	r2, [r3, #12]
 8020a92:	7b5b      	ldrb	r3, [r3, #13]
 8020a94:	021b      	lsls	r3, r3, #8
 8020a96:	4313      	orrs	r3, r2
 8020a98:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020a9a:	693b      	ldr	r3, [r7, #16]
 8020a9c:	781b      	ldrb	r3, [r3, #0]
 8020a9e:	f003 0301 	and.w	r3, r3, #1
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	d023      	beq.n	8020aee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020aa6:	693b      	ldr	r3, [r7, #16]
 8020aa8:	781b      	ldrb	r3, [r3, #0]
 8020aaa:	2b01      	cmp	r3, #1
 8020aac:	d10f      	bne.n	8020ace <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020aae:	693b      	ldr	r3, [r7, #16]
 8020ab0:	785b      	ldrb	r3, [r3, #1]
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	d11b      	bne.n	8020aee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020ab6:	693b      	ldr	r3, [r7, #16]
 8020ab8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020aba:	2b5e      	cmp	r3, #94	; 0x5e
 8020abc:	d117      	bne.n	8020aee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	7b5b      	ldrb	r3, [r3, #13]
 8020ac2:	f043 0310 	orr.w	r3, r3, #16
 8020ac6:	b2da      	uxtb	r2, r3
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	735a      	strb	r2, [r3, #13]
 8020acc:	e00f      	b.n	8020aee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8020ace:	693b      	ldr	r3, [r7, #16]
 8020ad0:	2206      	movs	r2, #6
 8020ad2:	4928      	ldr	r1, [pc, #160]	; (8020b74 <ethernet_input+0x118>)
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	f000 fb97 	bl	8021208 <memcmp>
 8020ada:	4603      	mov	r3, r0
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d106      	bne.n	8020aee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8020ae0:	687b      	ldr	r3, [r7, #4]
 8020ae2:	7b5b      	ldrb	r3, [r3, #13]
 8020ae4:	f043 0308 	orr.w	r3, r3, #8
 8020ae8:	b2da      	uxtb	r2, r3
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8020aee:	89fb      	ldrh	r3, [r7, #14]
 8020af0:	2b08      	cmp	r3, #8
 8020af2:	d003      	beq.n	8020afc <ethernet_input+0xa0>
 8020af4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8020af8:	d014      	beq.n	8020b24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8020afa:	e032      	b.n	8020b62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020afc:	683b      	ldr	r3, [r7, #0]
 8020afe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b02:	f003 0308 	and.w	r3, r3, #8
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	d024      	beq.n	8020b54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020b0a:	8afb      	ldrh	r3, [r7, #22]
 8020b0c:	4619      	mov	r1, r3
 8020b0e:	6878      	ldr	r0, [r7, #4]
 8020b10:	f7f3 ff6c 	bl	80149ec <pbuf_remove_header>
 8020b14:	4603      	mov	r3, r0
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d11e      	bne.n	8020b58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8020b1a:	6839      	ldr	r1, [r7, #0]
 8020b1c:	6878      	ldr	r0, [r7, #4]
 8020b1e:	f7fe fddf 	bl	801f6e0 <ip4_input>
      break;
 8020b22:	e013      	b.n	8020b4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020b24:	683b      	ldr	r3, [r7, #0]
 8020b26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b2a:	f003 0308 	and.w	r3, r3, #8
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d014      	beq.n	8020b5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020b32:	8afb      	ldrh	r3, [r7, #22]
 8020b34:	4619      	mov	r1, r3
 8020b36:	6878      	ldr	r0, [r7, #4]
 8020b38:	f7f3 ff58 	bl	80149ec <pbuf_remove_header>
 8020b3c:	4603      	mov	r3, r0
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d10e      	bne.n	8020b60 <ethernet_input+0x104>
        etharp_input(p, netif);
 8020b42:	6839      	ldr	r1, [r7, #0]
 8020b44:	6878      	ldr	r0, [r7, #4]
 8020b46:	f7fd ff75 	bl	801ea34 <etharp_input>
      break;
 8020b4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020b4c:	2300      	movs	r3, #0
 8020b4e:	e00c      	b.n	8020b6a <ethernet_input+0x10e>
    goto free_and_return;
 8020b50:	bf00      	nop
 8020b52:	e006      	b.n	8020b62 <ethernet_input+0x106>
        goto free_and_return;
 8020b54:	bf00      	nop
 8020b56:	e004      	b.n	8020b62 <ethernet_input+0x106>
        goto free_and_return;
 8020b58:	bf00      	nop
 8020b5a:	e002      	b.n	8020b62 <ethernet_input+0x106>
        goto free_and_return;
 8020b5c:	bf00      	nop
 8020b5e:	e000      	b.n	8020b62 <ethernet_input+0x106>
        goto free_and_return;
 8020b60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8020b62:	6878      	ldr	r0, [r7, #4]
 8020b64:	f7f3 fffa 	bl	8014b5c <pbuf_free>
  return ERR_OK;
 8020b68:	2300      	movs	r3, #0
}
 8020b6a:	4618      	mov	r0, r3
 8020b6c:	3718      	adds	r7, #24
 8020b6e:	46bd      	mov	sp, r7
 8020b70:	bd80      	pop	{r7, pc}
 8020b72:	bf00      	nop
 8020b74:	08029af0 	.word	0x08029af0

08020b78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b086      	sub	sp, #24
 8020b7c:	af00      	add	r7, sp, #0
 8020b7e:	60f8      	str	r0, [r7, #12]
 8020b80:	60b9      	str	r1, [r7, #8]
 8020b82:	607a      	str	r2, [r7, #4]
 8020b84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020b86:	8c3b      	ldrh	r3, [r7, #32]
 8020b88:	4618      	mov	r0, r3
 8020b8a:	f7f1 fc27 	bl	80123dc <lwip_htons>
 8020b8e:	4603      	mov	r3, r0
 8020b90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8020b92:	210e      	movs	r1, #14
 8020b94:	68b8      	ldr	r0, [r7, #8]
 8020b96:	f7f3 ff19 	bl	80149cc <pbuf_add_header>
 8020b9a:	4603      	mov	r3, r0
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d125      	bne.n	8020bec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020ba0:	68bb      	ldr	r3, [r7, #8]
 8020ba2:	685b      	ldr	r3, [r3, #4]
 8020ba4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8020ba6:	693b      	ldr	r3, [r7, #16]
 8020ba8:	8afa      	ldrh	r2, [r7, #22]
 8020baa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020bac:	693b      	ldr	r3, [r7, #16]
 8020bae:	2206      	movs	r2, #6
 8020bb0:	6839      	ldr	r1, [r7, #0]
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	f000 fb36 	bl	8021224 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020bb8:	693b      	ldr	r3, [r7, #16]
 8020bba:	3306      	adds	r3, #6
 8020bbc:	2206      	movs	r2, #6
 8020bbe:	6879      	ldr	r1, [r7, #4]
 8020bc0:	4618      	mov	r0, r3
 8020bc2:	f000 fb2f 	bl	8021224 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020bcc:	2b06      	cmp	r3, #6
 8020bce:	d006      	beq.n	8020bde <ethernet_output+0x66>
 8020bd0:	4b0a      	ldr	r3, [pc, #40]	; (8020bfc <ethernet_output+0x84>)
 8020bd2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8020bd6:	490a      	ldr	r1, [pc, #40]	; (8020c00 <ethernet_output+0x88>)
 8020bd8:	480a      	ldr	r0, [pc, #40]	; (8020c04 <ethernet_output+0x8c>)
 8020bda:	f001 f867 	bl	8021cac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020bde:	68fb      	ldr	r3, [r7, #12]
 8020be0:	699b      	ldr	r3, [r3, #24]
 8020be2:	68b9      	ldr	r1, [r7, #8]
 8020be4:	68f8      	ldr	r0, [r7, #12]
 8020be6:	4798      	blx	r3
 8020be8:	4603      	mov	r3, r0
 8020bea:	e002      	b.n	8020bf2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8020bec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8020bee:	f06f 0301 	mvn.w	r3, #1
}
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	3718      	adds	r7, #24
 8020bf6:	46bd      	mov	sp, r7
 8020bf8:	bd80      	pop	{r7, pc}
 8020bfa:	bf00      	nop
 8020bfc:	080297d8 	.word	0x080297d8
 8020c00:	08029810 	.word	0x08029810
 8020c04:	08029844 	.word	0x08029844

08020c08 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020c08:	b580      	push	{r7, lr}
 8020c0a:	b084      	sub	sp, #16
 8020c0c:	af00      	add	r7, sp, #0
 8020c0e:	6078      	str	r0, [r7, #4]
 8020c10:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8020c12:	683b      	ldr	r3, [r7, #0]
 8020c14:	60bb      	str	r3, [r7, #8]
 8020c16:	2304      	movs	r3, #4
 8020c18:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020c1a:	f107 0308 	add.w	r3, r7, #8
 8020c1e:	2100      	movs	r1, #0
 8020c20:	4618      	mov	r0, r3
 8020c22:	f7e9 ffa0 	bl	800ab66 <osMessageCreate>
 8020c26:	4602      	mov	r2, r0
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	d102      	bne.n	8020c3a <sys_mbox_new+0x32>
    return ERR_MEM;
 8020c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020c38:	e000      	b.n	8020c3c <sys_mbox_new+0x34>

  return ERR_OK;
 8020c3a:	2300      	movs	r3, #0
}
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	3710      	adds	r7, #16
 8020c40:	46bd      	mov	sp, r7
 8020c42:	bd80      	pop	{r7, pc}

08020c44 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b082      	sub	sp, #8
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8020c4c:	687b      	ldr	r3, [r7, #4]
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	4618      	mov	r0, r3
 8020c52:	f7ea f84f 	bl	800acf4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8020c56:	687b      	ldr	r3, [r7, #4]
 8020c58:	681b      	ldr	r3, [r3, #0]
 8020c5a:	4618      	mov	r0, r3
 8020c5c:	f7ea f860 	bl	800ad20 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8020c60:	bf00      	nop
 8020c62:	3708      	adds	r7, #8
 8020c64:	46bd      	mov	sp, r7
 8020c66:	bd80      	pop	{r7, pc}

08020c68 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020c68:	b580      	push	{r7, lr}
 8020c6a:	b084      	sub	sp, #16
 8020c6c:	af00      	add	r7, sp, #0
 8020c6e:	6078      	str	r0, [r7, #4]
 8020c70:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	6839      	ldr	r1, [r7, #0]
 8020c78:	2200      	movs	r2, #0
 8020c7a:	4618      	mov	r0, r3
 8020c7c:	f7e9 ff86 	bl	800ab8c <osMessagePut>
 8020c80:	4603      	mov	r3, r0
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d102      	bne.n	8020c8c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8020c86:	2300      	movs	r3, #0
 8020c88:	73fb      	strb	r3, [r7, #15]
 8020c8a:	e001      	b.n	8020c90 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020c8c:	23ff      	movs	r3, #255	; 0xff
 8020c8e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8020c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020c94:	4618      	mov	r0, r3
 8020c96:	3710      	adds	r7, #16
 8020c98:	46bd      	mov	sp, r7
 8020c9a:	bd80      	pop	{r7, pc}

08020c9c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b08c      	sub	sp, #48	; 0x30
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	61f8      	str	r0, [r7, #28]
 8020ca4:	61b9      	str	r1, [r7, #24]
 8020ca6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8020ca8:	f7e9 fd2d 	bl	800a706 <osKernelSysTick>
 8020cac:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8020cae:	697b      	ldr	r3, [r7, #20]
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	d017      	beq.n	8020ce4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8020cb4:	69fb      	ldr	r3, [r7, #28]
 8020cb6:	6819      	ldr	r1, [r3, #0]
 8020cb8:	f107 0320 	add.w	r3, r7, #32
 8020cbc:	697a      	ldr	r2, [r7, #20]
 8020cbe:	4618      	mov	r0, r3
 8020cc0:	f7e9 ffa4 	bl	800ac0c <osMessageGet>

    if(event.status == osEventMessage)
 8020cc4:	6a3b      	ldr	r3, [r7, #32]
 8020cc6:	2b10      	cmp	r3, #16
 8020cc8:	d109      	bne.n	8020cde <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8020cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ccc:	461a      	mov	r2, r3
 8020cce:	69bb      	ldr	r3, [r7, #24]
 8020cd0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8020cd2:	f7e9 fd18 	bl	800a706 <osKernelSysTick>
 8020cd6:	4602      	mov	r2, r0
 8020cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cda:	1ad3      	subs	r3, r2, r3
 8020cdc:	e019      	b.n	8020d12 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020ce2:	e016      	b.n	8020d12 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8020ce4:	69fb      	ldr	r3, [r7, #28]
 8020ce6:	6819      	ldr	r1, [r3, #0]
 8020ce8:	463b      	mov	r3, r7
 8020cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020cee:	4618      	mov	r0, r3
 8020cf0:	f7e9 ff8c 	bl	800ac0c <osMessageGet>
 8020cf4:	f107 0320 	add.w	r3, r7, #32
 8020cf8:	463a      	mov	r2, r7
 8020cfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8020cfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8020d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d02:	461a      	mov	r2, r3
 8020d04:	69bb      	ldr	r3, [r7, #24]
 8020d06:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8020d08:	f7e9 fcfd 	bl	800a706 <osKernelSysTick>
 8020d0c:	4602      	mov	r2, r0
 8020d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d10:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8020d12:	4618      	mov	r0, r3
 8020d14:	3730      	adds	r7, #48	; 0x30
 8020d16:	46bd      	mov	sp, r7
 8020d18:	bd80      	pop	{r7, pc}

08020d1a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8020d1a:	b580      	push	{r7, lr}
 8020d1c:	b086      	sub	sp, #24
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	6078      	str	r0, [r7, #4]
 8020d22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	6819      	ldr	r1, [r3, #0]
 8020d28:	f107 030c 	add.w	r3, r7, #12
 8020d2c:	2200      	movs	r2, #0
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f7e9 ff6c 	bl	800ac0c <osMessageGet>

  if(event.status == osEventMessage)
 8020d34:	68fb      	ldr	r3, [r7, #12]
 8020d36:	2b10      	cmp	r3, #16
 8020d38:	d105      	bne.n	8020d46 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8020d3a:	693b      	ldr	r3, [r7, #16]
 8020d3c:	461a      	mov	r2, r3
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8020d42:	2300      	movs	r3, #0
 8020d44:	e001      	b.n	8020d4a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8020d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8020d4a:	4618      	mov	r0, r3
 8020d4c:	3718      	adds	r7, #24
 8020d4e:	46bd      	mov	sp, r7
 8020d50:	bd80      	pop	{r7, pc}

08020d52 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8020d52:	b480      	push	{r7}
 8020d54:	b083      	sub	sp, #12
 8020d56:	af00      	add	r7, sp, #0
 8020d58:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	681b      	ldr	r3, [r3, #0]
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d101      	bne.n	8020d66 <sys_mbox_valid+0x14>
    return 0;
 8020d62:	2300      	movs	r3, #0
 8020d64:	e000      	b.n	8020d68 <sys_mbox_valid+0x16>
  else
    return 1;
 8020d66:	2301      	movs	r3, #1
}
 8020d68:	4618      	mov	r0, r3
 8020d6a:	370c      	adds	r7, #12
 8020d6c:	46bd      	mov	sp, r7
 8020d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d72:	4770      	bx	lr

08020d74 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8020d74:	b480      	push	{r7}
 8020d76:	b083      	sub	sp, #12
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	2200      	movs	r2, #0
 8020d80:	601a      	str	r2, [r3, #0]
}
 8020d82:	bf00      	nop
 8020d84:	370c      	adds	r7, #12
 8020d86:	46bd      	mov	sp, r7
 8020d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d8c:	4770      	bx	lr

08020d8e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8020d8e:	b580      	push	{r7, lr}
 8020d90:	b084      	sub	sp, #16
 8020d92:	af00      	add	r7, sp, #0
 8020d94:	6078      	str	r0, [r7, #4]
 8020d96:	460b      	mov	r3, r1
 8020d98:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8020d9a:	2300      	movs	r3, #0
 8020d9c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8020d9e:	f107 030c 	add.w	r3, r7, #12
 8020da2:	2101      	movs	r1, #1
 8020da4:	4618      	mov	r0, r3
 8020da6:	f7e9 fe29 	bl	800a9fc <osSemaphoreCreate>
 8020daa:	4602      	mov	r2, r0
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8020db0:	687b      	ldr	r3, [r7, #4]
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	d102      	bne.n	8020dbe <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020dbc:	e009      	b.n	8020dd2 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8020dbe:	78fb      	ldrb	r3, [r7, #3]
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d105      	bne.n	8020dd0 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	2100      	movs	r1, #0
 8020dca:	4618      	mov	r0, r3
 8020dcc:	f7e9 fe34 	bl	800aa38 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8020dd0:	2300      	movs	r3, #0
}
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	3710      	adds	r7, #16
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	bd80      	pop	{r7, pc}

08020dda <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8020dda:	b580      	push	{r7, lr}
 8020ddc:	b084      	sub	sp, #16
 8020dde:	af00      	add	r7, sp, #0
 8020de0:	6078      	str	r0, [r7, #4]
 8020de2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8020de4:	f7e9 fc8f 	bl	800a706 <osKernelSysTick>
 8020de8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8020dea:	683b      	ldr	r3, [r7, #0]
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d011      	beq.n	8020e14 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	6839      	ldr	r1, [r7, #0]
 8020df6:	4618      	mov	r0, r3
 8020df8:	f7e9 fe1e 	bl	800aa38 <osSemaphoreWait>
 8020dfc:	4603      	mov	r3, r0
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d105      	bne.n	8020e0e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8020e02:	f7e9 fc80 	bl	800a706 <osKernelSysTick>
 8020e06:	4602      	mov	r2, r0
 8020e08:	68fb      	ldr	r3, [r7, #12]
 8020e0a:	1ad3      	subs	r3, r2, r3
 8020e0c:	e012      	b.n	8020e34 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020e12:	e00f      	b.n	8020e34 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8020e14:	bf00      	nop
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	681b      	ldr	r3, [r3, #0]
 8020e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020e1e:	4618      	mov	r0, r3
 8020e20:	f7e9 fe0a 	bl	800aa38 <osSemaphoreWait>
 8020e24:	4603      	mov	r3, r0
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d1f5      	bne.n	8020e16 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8020e2a:	f7e9 fc6c 	bl	800a706 <osKernelSysTick>
 8020e2e:	4602      	mov	r2, r0
 8020e30:	68fb      	ldr	r3, [r7, #12]
 8020e32:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8020e34:	4618      	mov	r0, r3
 8020e36:	3710      	adds	r7, #16
 8020e38:	46bd      	mov	sp, r7
 8020e3a:	bd80      	pop	{r7, pc}

08020e3c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b082      	sub	sp, #8
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	681b      	ldr	r3, [r3, #0]
 8020e48:	4618      	mov	r0, r3
 8020e4a:	f7e9 fe43 	bl	800aad4 <osSemaphoreRelease>
}
 8020e4e:	bf00      	nop
 8020e50:	3708      	adds	r7, #8
 8020e52:	46bd      	mov	sp, r7
 8020e54:	bd80      	pop	{r7, pc}

08020e56 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8020e56:	b580      	push	{r7, lr}
 8020e58:	b082      	sub	sp, #8
 8020e5a:	af00      	add	r7, sp, #0
 8020e5c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	681b      	ldr	r3, [r3, #0]
 8020e62:	4618      	mov	r0, r3
 8020e64:	f7e9 fe6c 	bl	800ab40 <osSemaphoreDelete>
}
 8020e68:	bf00      	nop
 8020e6a:	3708      	adds	r7, #8
 8020e6c:	46bd      	mov	sp, r7
 8020e6e:	bd80      	pop	{r7, pc}

08020e70 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8020e70:	b480      	push	{r7}
 8020e72:	b083      	sub	sp, #12
 8020e74:	af00      	add	r7, sp, #0
 8020e76:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d101      	bne.n	8020e84 <sys_sem_valid+0x14>
    return 0;
 8020e80:	2300      	movs	r3, #0
 8020e82:	e000      	b.n	8020e86 <sys_sem_valid+0x16>
  else
    return 1;
 8020e84:	2301      	movs	r3, #1
}
 8020e86:	4618      	mov	r0, r3
 8020e88:	370c      	adds	r7, #12
 8020e8a:	46bd      	mov	sp, r7
 8020e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e90:	4770      	bx	lr

08020e92 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8020e92:	b480      	push	{r7}
 8020e94:	b083      	sub	sp, #12
 8020e96:	af00      	add	r7, sp, #0
 8020e98:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	601a      	str	r2, [r3, #0]
}
 8020ea0:	bf00      	nop
 8020ea2:	370c      	adds	r7, #12
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eaa:	4770      	bx	lr

08020eac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020eac:	b580      	push	{r7, lr}
 8020eae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8020eb0:	4803      	ldr	r0, [pc, #12]	; (8020ec0 <sys_init+0x14>)
 8020eb2:	f7e9 fd13 	bl	800a8dc <osMutexCreate>
 8020eb6:	4603      	mov	r3, r0
 8020eb8:	4a02      	ldr	r2, [pc, #8]	; (8020ec4 <sys_init+0x18>)
 8020eba:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020ebc:	bf00      	nop
 8020ebe:	bd80      	pop	{r7, pc}
 8020ec0:	08029b00 	.word	0x08029b00
 8020ec4:	2001b1f0 	.word	0x2001b1f0

08020ec8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b084      	sub	sp, #16
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020ed4:	f107 030c 	add.w	r3, r7, #12
 8020ed8:	4618      	mov	r0, r3
 8020eda:	f7e9 fcff 	bl	800a8dc <osMutexCreate>
 8020ede:	4602      	mov	r2, r0
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d102      	bne.n	8020ef2 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020ef0:	e000      	b.n	8020ef4 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020ef2:	2300      	movs	r3, #0
}
 8020ef4:	4618      	mov	r0, r3
 8020ef6:	3710      	adds	r7, #16
 8020ef8:	46bd      	mov	sp, r7
 8020efa:	bd80      	pop	{r7, pc}

08020efc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8020efc:	b580      	push	{r7, lr}
 8020efe:	b082      	sub	sp, #8
 8020f00:	af00      	add	r7, sp, #0
 8020f02:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020f0c:	4618      	mov	r0, r3
 8020f0e:	f7e9 fcf1 	bl	800a8f4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8020f12:	bf00      	nop
 8020f14:	3708      	adds	r7, #8
 8020f16:	46bd      	mov	sp, r7
 8020f18:	bd80      	pop	{r7, pc}

08020f1a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8020f1a:	b580      	push	{r7, lr}
 8020f1c:	b082      	sub	sp, #8
 8020f1e:	af00      	add	r7, sp, #0
 8020f20:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	4618      	mov	r0, r3
 8020f28:	f7e9 fd32 	bl	800a990 <osMutexRelease>
}
 8020f2c:	bf00      	nop
 8020f2e:	3708      	adds	r7, #8
 8020f30:	46bd      	mov	sp, r7
 8020f32:	bd80      	pop	{r7, pc}

08020f34 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020f34:	b580      	push	{r7, lr}
 8020f36:	b08a      	sub	sp, #40	; 0x28
 8020f38:	af00      	add	r7, sp, #0
 8020f3a:	60f8      	str	r0, [r7, #12]
 8020f3c:	60b9      	str	r1, [r7, #8]
 8020f3e:	607a      	str	r2, [r7, #4]
 8020f40:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8020f42:	68fb      	ldr	r3, [r7, #12]
 8020f44:	617b      	str	r3, [r7, #20]
 8020f46:	68bb      	ldr	r3, [r7, #8]
 8020f48:	61bb      	str	r3, [r7, #24]
 8020f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f4c:	b21b      	sxth	r3, r3
 8020f4e:	83bb      	strh	r3, [r7, #28]
 8020f50:	2300      	movs	r3, #0
 8020f52:	623b      	str	r3, [r7, #32]
 8020f54:	683b      	ldr	r3, [r7, #0]
 8020f56:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8020f58:	f107 0314 	add.w	r3, r7, #20
 8020f5c:	6879      	ldr	r1, [r7, #4]
 8020f5e:	4618      	mov	r0, r3
 8020f60:	f7e9 fbe1 	bl	800a726 <osThreadCreate>
 8020f64:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8020f66:	4618      	mov	r0, r3
 8020f68:	3728      	adds	r7, #40	; 0x28
 8020f6a:	46bd      	mov	sp, r7
 8020f6c:	bd80      	pop	{r7, pc}
	...

08020f70 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8020f70:	b580      	push	{r7, lr}
 8020f72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8020f74:	4b04      	ldr	r3, [pc, #16]	; (8020f88 <sys_arch_protect+0x18>)
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020f7c:	4618      	mov	r0, r3
 8020f7e:	f7e9 fcb9 	bl	800a8f4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8020f82:	2301      	movs	r3, #1
}
 8020f84:	4618      	mov	r0, r3
 8020f86:	bd80      	pop	{r7, pc}
 8020f88:	2001b1f0 	.word	0x2001b1f0

08020f8c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020f8c:	b580      	push	{r7, lr}
 8020f8e:	b082      	sub	sp, #8
 8020f90:	af00      	add	r7, sp, #0
 8020f92:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020f94:	4b04      	ldr	r3, [pc, #16]	; (8020fa8 <sys_arch_unprotect+0x1c>)
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	4618      	mov	r0, r3
 8020f9a:	f7e9 fcf9 	bl	800a990 <osMutexRelease>
}
 8020f9e:	bf00      	nop
 8020fa0:	3708      	adds	r7, #8
 8020fa2:	46bd      	mov	sp, r7
 8020fa4:	bd80      	pop	{r7, pc}
 8020fa6:	bf00      	nop
 8020fa8:	2001b1f0 	.word	0x2001b1f0

08020fac <std>:
 8020fac:	2300      	movs	r3, #0
 8020fae:	b510      	push	{r4, lr}
 8020fb0:	4604      	mov	r4, r0
 8020fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8020fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020fba:	6083      	str	r3, [r0, #8]
 8020fbc:	8181      	strh	r1, [r0, #12]
 8020fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8020fc0:	81c2      	strh	r2, [r0, #14]
 8020fc2:	6183      	str	r3, [r0, #24]
 8020fc4:	4619      	mov	r1, r3
 8020fc6:	2208      	movs	r2, #8
 8020fc8:	305c      	adds	r0, #92	; 0x5c
 8020fca:	f000 f953 	bl	8021274 <memset>
 8020fce:	4b05      	ldr	r3, [pc, #20]	; (8020fe4 <std+0x38>)
 8020fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8020fd2:	4b05      	ldr	r3, [pc, #20]	; (8020fe8 <std+0x3c>)
 8020fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8020fd6:	4b05      	ldr	r3, [pc, #20]	; (8020fec <std+0x40>)
 8020fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020fda:	4b05      	ldr	r3, [pc, #20]	; (8020ff0 <std+0x44>)
 8020fdc:	6224      	str	r4, [r4, #32]
 8020fde:	6323      	str	r3, [r4, #48]	; 0x30
 8020fe0:	bd10      	pop	{r4, pc}
 8020fe2:	bf00      	nop
 8020fe4:	0802203d 	.word	0x0802203d
 8020fe8:	08022063 	.word	0x08022063
 8020fec:	0802209b 	.word	0x0802209b
 8020ff0:	080220bf 	.word	0x080220bf

08020ff4 <_cleanup_r>:
 8020ff4:	4901      	ldr	r1, [pc, #4]	; (8020ffc <_cleanup_r+0x8>)
 8020ff6:	f000 b8af 	b.w	8021158 <_fwalk_reent>
 8020ffa:	bf00      	nop
 8020ffc:	08023331 	.word	0x08023331

08021000 <__sfmoreglue>:
 8021000:	b570      	push	{r4, r5, r6, lr}
 8021002:	1e4a      	subs	r2, r1, #1
 8021004:	2568      	movs	r5, #104	; 0x68
 8021006:	4355      	muls	r5, r2
 8021008:	460e      	mov	r6, r1
 802100a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802100e:	f000 f989 	bl	8021324 <_malloc_r>
 8021012:	4604      	mov	r4, r0
 8021014:	b140      	cbz	r0, 8021028 <__sfmoreglue+0x28>
 8021016:	2100      	movs	r1, #0
 8021018:	e9c0 1600 	strd	r1, r6, [r0]
 802101c:	300c      	adds	r0, #12
 802101e:	60a0      	str	r0, [r4, #8]
 8021020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021024:	f000 f926 	bl	8021274 <memset>
 8021028:	4620      	mov	r0, r4
 802102a:	bd70      	pop	{r4, r5, r6, pc}

0802102c <__sfp_lock_acquire>:
 802102c:	4801      	ldr	r0, [pc, #4]	; (8021034 <__sfp_lock_acquire+0x8>)
 802102e:	f000 b8d8 	b.w	80211e2 <__retarget_lock_acquire_recursive>
 8021032:	bf00      	nop
 8021034:	2001b1fc 	.word	0x2001b1fc

08021038 <__sfp_lock_release>:
 8021038:	4801      	ldr	r0, [pc, #4]	; (8021040 <__sfp_lock_release+0x8>)
 802103a:	f000 b8d3 	b.w	80211e4 <__retarget_lock_release_recursive>
 802103e:	bf00      	nop
 8021040:	2001b1fc 	.word	0x2001b1fc

08021044 <__sinit_lock_acquire>:
 8021044:	4801      	ldr	r0, [pc, #4]	; (802104c <__sinit_lock_acquire+0x8>)
 8021046:	f000 b8cc 	b.w	80211e2 <__retarget_lock_acquire_recursive>
 802104a:	bf00      	nop
 802104c:	2001b1f7 	.word	0x2001b1f7

08021050 <__sinit_lock_release>:
 8021050:	4801      	ldr	r0, [pc, #4]	; (8021058 <__sinit_lock_release+0x8>)
 8021052:	f000 b8c7 	b.w	80211e4 <__retarget_lock_release_recursive>
 8021056:	bf00      	nop
 8021058:	2001b1f7 	.word	0x2001b1f7

0802105c <__sinit>:
 802105c:	b510      	push	{r4, lr}
 802105e:	4604      	mov	r4, r0
 8021060:	f7ff fff0 	bl	8021044 <__sinit_lock_acquire>
 8021064:	69a3      	ldr	r3, [r4, #24]
 8021066:	b11b      	cbz	r3, 8021070 <__sinit+0x14>
 8021068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802106c:	f7ff bff0 	b.w	8021050 <__sinit_lock_release>
 8021070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021074:	6523      	str	r3, [r4, #80]	; 0x50
 8021076:	4b13      	ldr	r3, [pc, #76]	; (80210c4 <__sinit+0x68>)
 8021078:	4a13      	ldr	r2, [pc, #76]	; (80210c8 <__sinit+0x6c>)
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	62a2      	str	r2, [r4, #40]	; 0x28
 802107e:	42a3      	cmp	r3, r4
 8021080:	bf04      	itt	eq
 8021082:	2301      	moveq	r3, #1
 8021084:	61a3      	streq	r3, [r4, #24]
 8021086:	4620      	mov	r0, r4
 8021088:	f000 f820 	bl	80210cc <__sfp>
 802108c:	6060      	str	r0, [r4, #4]
 802108e:	4620      	mov	r0, r4
 8021090:	f000 f81c 	bl	80210cc <__sfp>
 8021094:	60a0      	str	r0, [r4, #8]
 8021096:	4620      	mov	r0, r4
 8021098:	f000 f818 	bl	80210cc <__sfp>
 802109c:	2200      	movs	r2, #0
 802109e:	60e0      	str	r0, [r4, #12]
 80210a0:	2104      	movs	r1, #4
 80210a2:	6860      	ldr	r0, [r4, #4]
 80210a4:	f7ff ff82 	bl	8020fac <std>
 80210a8:	68a0      	ldr	r0, [r4, #8]
 80210aa:	2201      	movs	r2, #1
 80210ac:	2109      	movs	r1, #9
 80210ae:	f7ff ff7d 	bl	8020fac <std>
 80210b2:	68e0      	ldr	r0, [r4, #12]
 80210b4:	2202      	movs	r2, #2
 80210b6:	2112      	movs	r1, #18
 80210b8:	f7ff ff78 	bl	8020fac <std>
 80210bc:	2301      	movs	r3, #1
 80210be:	61a3      	str	r3, [r4, #24]
 80210c0:	e7d2      	b.n	8021068 <__sinit+0xc>
 80210c2:	bf00      	nop
 80210c4:	08029c68 	.word	0x08029c68
 80210c8:	08020ff5 	.word	0x08020ff5

080210cc <__sfp>:
 80210cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210ce:	4607      	mov	r7, r0
 80210d0:	f7ff ffac 	bl	802102c <__sfp_lock_acquire>
 80210d4:	4b1e      	ldr	r3, [pc, #120]	; (8021150 <__sfp+0x84>)
 80210d6:	681e      	ldr	r6, [r3, #0]
 80210d8:	69b3      	ldr	r3, [r6, #24]
 80210da:	b913      	cbnz	r3, 80210e2 <__sfp+0x16>
 80210dc:	4630      	mov	r0, r6
 80210de:	f7ff ffbd 	bl	802105c <__sinit>
 80210e2:	3648      	adds	r6, #72	; 0x48
 80210e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80210e8:	3b01      	subs	r3, #1
 80210ea:	d503      	bpl.n	80210f4 <__sfp+0x28>
 80210ec:	6833      	ldr	r3, [r6, #0]
 80210ee:	b30b      	cbz	r3, 8021134 <__sfp+0x68>
 80210f0:	6836      	ldr	r6, [r6, #0]
 80210f2:	e7f7      	b.n	80210e4 <__sfp+0x18>
 80210f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80210f8:	b9d5      	cbnz	r5, 8021130 <__sfp+0x64>
 80210fa:	4b16      	ldr	r3, [pc, #88]	; (8021154 <__sfp+0x88>)
 80210fc:	60e3      	str	r3, [r4, #12]
 80210fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021102:	6665      	str	r5, [r4, #100]	; 0x64
 8021104:	f000 f86c 	bl	80211e0 <__retarget_lock_init_recursive>
 8021108:	f7ff ff96 	bl	8021038 <__sfp_lock_release>
 802110c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021114:	6025      	str	r5, [r4, #0]
 8021116:	61a5      	str	r5, [r4, #24]
 8021118:	2208      	movs	r2, #8
 802111a:	4629      	mov	r1, r5
 802111c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021120:	f000 f8a8 	bl	8021274 <memset>
 8021124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802112c:	4620      	mov	r0, r4
 802112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021130:	3468      	adds	r4, #104	; 0x68
 8021132:	e7d9      	b.n	80210e8 <__sfp+0x1c>
 8021134:	2104      	movs	r1, #4
 8021136:	4638      	mov	r0, r7
 8021138:	f7ff ff62 	bl	8021000 <__sfmoreglue>
 802113c:	4604      	mov	r4, r0
 802113e:	6030      	str	r0, [r6, #0]
 8021140:	2800      	cmp	r0, #0
 8021142:	d1d5      	bne.n	80210f0 <__sfp+0x24>
 8021144:	f7ff ff78 	bl	8021038 <__sfp_lock_release>
 8021148:	230c      	movs	r3, #12
 802114a:	603b      	str	r3, [r7, #0]
 802114c:	e7ee      	b.n	802112c <__sfp+0x60>
 802114e:	bf00      	nop
 8021150:	08029c68 	.word	0x08029c68
 8021154:	ffff0001 	.word	0xffff0001

08021158 <_fwalk_reent>:
 8021158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802115c:	4606      	mov	r6, r0
 802115e:	4688      	mov	r8, r1
 8021160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021164:	2700      	movs	r7, #0
 8021166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802116a:	f1b9 0901 	subs.w	r9, r9, #1
 802116e:	d505      	bpl.n	802117c <_fwalk_reent+0x24>
 8021170:	6824      	ldr	r4, [r4, #0]
 8021172:	2c00      	cmp	r4, #0
 8021174:	d1f7      	bne.n	8021166 <_fwalk_reent+0xe>
 8021176:	4638      	mov	r0, r7
 8021178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802117c:	89ab      	ldrh	r3, [r5, #12]
 802117e:	2b01      	cmp	r3, #1
 8021180:	d907      	bls.n	8021192 <_fwalk_reent+0x3a>
 8021182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021186:	3301      	adds	r3, #1
 8021188:	d003      	beq.n	8021192 <_fwalk_reent+0x3a>
 802118a:	4629      	mov	r1, r5
 802118c:	4630      	mov	r0, r6
 802118e:	47c0      	blx	r8
 8021190:	4307      	orrs	r7, r0
 8021192:	3568      	adds	r5, #104	; 0x68
 8021194:	e7e9      	b.n	802116a <_fwalk_reent+0x12>
	...

08021198 <__libc_init_array>:
 8021198:	b570      	push	{r4, r5, r6, lr}
 802119a:	4d0d      	ldr	r5, [pc, #52]	; (80211d0 <__libc_init_array+0x38>)
 802119c:	4c0d      	ldr	r4, [pc, #52]	; (80211d4 <__libc_init_array+0x3c>)
 802119e:	1b64      	subs	r4, r4, r5
 80211a0:	10a4      	asrs	r4, r4, #2
 80211a2:	2600      	movs	r6, #0
 80211a4:	42a6      	cmp	r6, r4
 80211a6:	d109      	bne.n	80211bc <__libc_init_array+0x24>
 80211a8:	4d0b      	ldr	r5, [pc, #44]	; (80211d8 <__libc_init_array+0x40>)
 80211aa:	4c0c      	ldr	r4, [pc, #48]	; (80211dc <__libc_init_array+0x44>)
 80211ac:	f003 fcb4 	bl	8024b18 <_init>
 80211b0:	1b64      	subs	r4, r4, r5
 80211b2:	10a4      	asrs	r4, r4, #2
 80211b4:	2600      	movs	r6, #0
 80211b6:	42a6      	cmp	r6, r4
 80211b8:	d105      	bne.n	80211c6 <__libc_init_array+0x2e>
 80211ba:	bd70      	pop	{r4, r5, r6, pc}
 80211bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80211c0:	4798      	blx	r3
 80211c2:	3601      	adds	r6, #1
 80211c4:	e7ee      	b.n	80211a4 <__libc_init_array+0xc>
 80211c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80211ca:	4798      	blx	r3
 80211cc:	3601      	adds	r6, #1
 80211ce:	e7f2      	b.n	80211b6 <__libc_init_array+0x1e>
 80211d0:	08029fcc 	.word	0x08029fcc
 80211d4:	08029fcc 	.word	0x08029fcc
 80211d8:	08029fcc 	.word	0x08029fcc
 80211dc:	08029fd0 	.word	0x08029fd0

080211e0 <__retarget_lock_init_recursive>:
 80211e0:	4770      	bx	lr

080211e2 <__retarget_lock_acquire_recursive>:
 80211e2:	4770      	bx	lr

080211e4 <__retarget_lock_release_recursive>:
 80211e4:	4770      	bx	lr
	...

080211e8 <malloc>:
 80211e8:	4b02      	ldr	r3, [pc, #8]	; (80211f4 <malloc+0xc>)
 80211ea:	4601      	mov	r1, r0
 80211ec:	6818      	ldr	r0, [r3, #0]
 80211ee:	f000 b899 	b.w	8021324 <_malloc_r>
 80211f2:	bf00      	nop
 80211f4:	20000074 	.word	0x20000074

080211f8 <free>:
 80211f8:	4b02      	ldr	r3, [pc, #8]	; (8021204 <free+0xc>)
 80211fa:	4601      	mov	r1, r0
 80211fc:	6818      	ldr	r0, [r3, #0]
 80211fe:	f000 b841 	b.w	8021284 <_free_r>
 8021202:	bf00      	nop
 8021204:	20000074 	.word	0x20000074

08021208 <memcmp>:
 8021208:	b530      	push	{r4, r5, lr}
 802120a:	3901      	subs	r1, #1
 802120c:	2400      	movs	r4, #0
 802120e:	42a2      	cmp	r2, r4
 8021210:	d101      	bne.n	8021216 <memcmp+0xe>
 8021212:	2000      	movs	r0, #0
 8021214:	e005      	b.n	8021222 <memcmp+0x1a>
 8021216:	5d03      	ldrb	r3, [r0, r4]
 8021218:	3401      	adds	r4, #1
 802121a:	5d0d      	ldrb	r5, [r1, r4]
 802121c:	42ab      	cmp	r3, r5
 802121e:	d0f6      	beq.n	802120e <memcmp+0x6>
 8021220:	1b58      	subs	r0, r3, r5
 8021222:	bd30      	pop	{r4, r5, pc}

08021224 <memcpy>:
 8021224:	440a      	add	r2, r1
 8021226:	4291      	cmp	r1, r2
 8021228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802122c:	d100      	bne.n	8021230 <memcpy+0xc>
 802122e:	4770      	bx	lr
 8021230:	b510      	push	{r4, lr}
 8021232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021236:	f803 4f01 	strb.w	r4, [r3, #1]!
 802123a:	4291      	cmp	r1, r2
 802123c:	d1f9      	bne.n	8021232 <memcpy+0xe>
 802123e:	bd10      	pop	{r4, pc}

08021240 <memmove>:
 8021240:	4288      	cmp	r0, r1
 8021242:	b510      	push	{r4, lr}
 8021244:	eb01 0402 	add.w	r4, r1, r2
 8021248:	d902      	bls.n	8021250 <memmove+0x10>
 802124a:	4284      	cmp	r4, r0
 802124c:	4623      	mov	r3, r4
 802124e:	d807      	bhi.n	8021260 <memmove+0x20>
 8021250:	1e43      	subs	r3, r0, #1
 8021252:	42a1      	cmp	r1, r4
 8021254:	d008      	beq.n	8021268 <memmove+0x28>
 8021256:	f811 2b01 	ldrb.w	r2, [r1], #1
 802125a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802125e:	e7f8      	b.n	8021252 <memmove+0x12>
 8021260:	4402      	add	r2, r0
 8021262:	4601      	mov	r1, r0
 8021264:	428a      	cmp	r2, r1
 8021266:	d100      	bne.n	802126a <memmove+0x2a>
 8021268:	bd10      	pop	{r4, pc}
 802126a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802126e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021272:	e7f7      	b.n	8021264 <memmove+0x24>

08021274 <memset>:
 8021274:	4402      	add	r2, r0
 8021276:	4603      	mov	r3, r0
 8021278:	4293      	cmp	r3, r2
 802127a:	d100      	bne.n	802127e <memset+0xa>
 802127c:	4770      	bx	lr
 802127e:	f803 1b01 	strb.w	r1, [r3], #1
 8021282:	e7f9      	b.n	8021278 <memset+0x4>

08021284 <_free_r>:
 8021284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021286:	2900      	cmp	r1, #0
 8021288:	d048      	beq.n	802131c <_free_r+0x98>
 802128a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802128e:	9001      	str	r0, [sp, #4]
 8021290:	2b00      	cmp	r3, #0
 8021292:	f1a1 0404 	sub.w	r4, r1, #4
 8021296:	bfb8      	it	lt
 8021298:	18e4      	addlt	r4, r4, r3
 802129a:	f002 f911 	bl	80234c0 <__malloc_lock>
 802129e:	4a20      	ldr	r2, [pc, #128]	; (8021320 <_free_r+0x9c>)
 80212a0:	9801      	ldr	r0, [sp, #4]
 80212a2:	6813      	ldr	r3, [r2, #0]
 80212a4:	4615      	mov	r5, r2
 80212a6:	b933      	cbnz	r3, 80212b6 <_free_r+0x32>
 80212a8:	6063      	str	r3, [r4, #4]
 80212aa:	6014      	str	r4, [r2, #0]
 80212ac:	b003      	add	sp, #12
 80212ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80212b2:	f002 b90b 	b.w	80234cc <__malloc_unlock>
 80212b6:	42a3      	cmp	r3, r4
 80212b8:	d90b      	bls.n	80212d2 <_free_r+0x4e>
 80212ba:	6821      	ldr	r1, [r4, #0]
 80212bc:	1862      	adds	r2, r4, r1
 80212be:	4293      	cmp	r3, r2
 80212c0:	bf04      	itt	eq
 80212c2:	681a      	ldreq	r2, [r3, #0]
 80212c4:	685b      	ldreq	r3, [r3, #4]
 80212c6:	6063      	str	r3, [r4, #4]
 80212c8:	bf04      	itt	eq
 80212ca:	1852      	addeq	r2, r2, r1
 80212cc:	6022      	streq	r2, [r4, #0]
 80212ce:	602c      	str	r4, [r5, #0]
 80212d0:	e7ec      	b.n	80212ac <_free_r+0x28>
 80212d2:	461a      	mov	r2, r3
 80212d4:	685b      	ldr	r3, [r3, #4]
 80212d6:	b10b      	cbz	r3, 80212dc <_free_r+0x58>
 80212d8:	42a3      	cmp	r3, r4
 80212da:	d9fa      	bls.n	80212d2 <_free_r+0x4e>
 80212dc:	6811      	ldr	r1, [r2, #0]
 80212de:	1855      	adds	r5, r2, r1
 80212e0:	42a5      	cmp	r5, r4
 80212e2:	d10b      	bne.n	80212fc <_free_r+0x78>
 80212e4:	6824      	ldr	r4, [r4, #0]
 80212e6:	4421      	add	r1, r4
 80212e8:	1854      	adds	r4, r2, r1
 80212ea:	42a3      	cmp	r3, r4
 80212ec:	6011      	str	r1, [r2, #0]
 80212ee:	d1dd      	bne.n	80212ac <_free_r+0x28>
 80212f0:	681c      	ldr	r4, [r3, #0]
 80212f2:	685b      	ldr	r3, [r3, #4]
 80212f4:	6053      	str	r3, [r2, #4]
 80212f6:	4421      	add	r1, r4
 80212f8:	6011      	str	r1, [r2, #0]
 80212fa:	e7d7      	b.n	80212ac <_free_r+0x28>
 80212fc:	d902      	bls.n	8021304 <_free_r+0x80>
 80212fe:	230c      	movs	r3, #12
 8021300:	6003      	str	r3, [r0, #0]
 8021302:	e7d3      	b.n	80212ac <_free_r+0x28>
 8021304:	6825      	ldr	r5, [r4, #0]
 8021306:	1961      	adds	r1, r4, r5
 8021308:	428b      	cmp	r3, r1
 802130a:	bf04      	itt	eq
 802130c:	6819      	ldreq	r1, [r3, #0]
 802130e:	685b      	ldreq	r3, [r3, #4]
 8021310:	6063      	str	r3, [r4, #4]
 8021312:	bf04      	itt	eq
 8021314:	1949      	addeq	r1, r1, r5
 8021316:	6021      	streq	r1, [r4, #0]
 8021318:	6054      	str	r4, [r2, #4]
 802131a:	e7c7      	b.n	80212ac <_free_r+0x28>
 802131c:	b003      	add	sp, #12
 802131e:	bd30      	pop	{r4, r5, pc}
 8021320:	200144cc 	.word	0x200144cc

08021324 <_malloc_r>:
 8021324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021326:	1ccd      	adds	r5, r1, #3
 8021328:	f025 0503 	bic.w	r5, r5, #3
 802132c:	3508      	adds	r5, #8
 802132e:	2d0c      	cmp	r5, #12
 8021330:	bf38      	it	cc
 8021332:	250c      	movcc	r5, #12
 8021334:	2d00      	cmp	r5, #0
 8021336:	4606      	mov	r6, r0
 8021338:	db01      	blt.n	802133e <_malloc_r+0x1a>
 802133a:	42a9      	cmp	r1, r5
 802133c:	d903      	bls.n	8021346 <_malloc_r+0x22>
 802133e:	230c      	movs	r3, #12
 8021340:	6033      	str	r3, [r6, #0]
 8021342:	2000      	movs	r0, #0
 8021344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021346:	f002 f8bb 	bl	80234c0 <__malloc_lock>
 802134a:	4921      	ldr	r1, [pc, #132]	; (80213d0 <_malloc_r+0xac>)
 802134c:	680a      	ldr	r2, [r1, #0]
 802134e:	4614      	mov	r4, r2
 8021350:	b99c      	cbnz	r4, 802137a <_malloc_r+0x56>
 8021352:	4f20      	ldr	r7, [pc, #128]	; (80213d4 <_malloc_r+0xb0>)
 8021354:	683b      	ldr	r3, [r7, #0]
 8021356:	b923      	cbnz	r3, 8021362 <_malloc_r+0x3e>
 8021358:	4621      	mov	r1, r4
 802135a:	4630      	mov	r0, r6
 802135c:	f000 fdde 	bl	8021f1c <_sbrk_r>
 8021360:	6038      	str	r0, [r7, #0]
 8021362:	4629      	mov	r1, r5
 8021364:	4630      	mov	r0, r6
 8021366:	f000 fdd9 	bl	8021f1c <_sbrk_r>
 802136a:	1c43      	adds	r3, r0, #1
 802136c:	d123      	bne.n	80213b6 <_malloc_r+0x92>
 802136e:	230c      	movs	r3, #12
 8021370:	6033      	str	r3, [r6, #0]
 8021372:	4630      	mov	r0, r6
 8021374:	f002 f8aa 	bl	80234cc <__malloc_unlock>
 8021378:	e7e3      	b.n	8021342 <_malloc_r+0x1e>
 802137a:	6823      	ldr	r3, [r4, #0]
 802137c:	1b5b      	subs	r3, r3, r5
 802137e:	d417      	bmi.n	80213b0 <_malloc_r+0x8c>
 8021380:	2b0b      	cmp	r3, #11
 8021382:	d903      	bls.n	802138c <_malloc_r+0x68>
 8021384:	6023      	str	r3, [r4, #0]
 8021386:	441c      	add	r4, r3
 8021388:	6025      	str	r5, [r4, #0]
 802138a:	e004      	b.n	8021396 <_malloc_r+0x72>
 802138c:	6863      	ldr	r3, [r4, #4]
 802138e:	42a2      	cmp	r2, r4
 8021390:	bf0c      	ite	eq
 8021392:	600b      	streq	r3, [r1, #0]
 8021394:	6053      	strne	r3, [r2, #4]
 8021396:	4630      	mov	r0, r6
 8021398:	f002 f898 	bl	80234cc <__malloc_unlock>
 802139c:	f104 000b 	add.w	r0, r4, #11
 80213a0:	1d23      	adds	r3, r4, #4
 80213a2:	f020 0007 	bic.w	r0, r0, #7
 80213a6:	1ac2      	subs	r2, r0, r3
 80213a8:	d0cc      	beq.n	8021344 <_malloc_r+0x20>
 80213aa:	1a1b      	subs	r3, r3, r0
 80213ac:	50a3      	str	r3, [r4, r2]
 80213ae:	e7c9      	b.n	8021344 <_malloc_r+0x20>
 80213b0:	4622      	mov	r2, r4
 80213b2:	6864      	ldr	r4, [r4, #4]
 80213b4:	e7cc      	b.n	8021350 <_malloc_r+0x2c>
 80213b6:	1cc4      	adds	r4, r0, #3
 80213b8:	f024 0403 	bic.w	r4, r4, #3
 80213bc:	42a0      	cmp	r0, r4
 80213be:	d0e3      	beq.n	8021388 <_malloc_r+0x64>
 80213c0:	1a21      	subs	r1, r4, r0
 80213c2:	4630      	mov	r0, r6
 80213c4:	f000 fdaa 	bl	8021f1c <_sbrk_r>
 80213c8:	3001      	adds	r0, #1
 80213ca:	d1dd      	bne.n	8021388 <_malloc_r+0x64>
 80213cc:	e7cf      	b.n	802136e <_malloc_r+0x4a>
 80213ce:	bf00      	nop
 80213d0:	200144cc 	.word	0x200144cc
 80213d4:	200144d0 	.word	0x200144d0

080213d8 <__cvt>:
 80213d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80213dc:	ec55 4b10 	vmov	r4, r5, d0
 80213e0:	2d00      	cmp	r5, #0
 80213e2:	460e      	mov	r6, r1
 80213e4:	4619      	mov	r1, r3
 80213e6:	462b      	mov	r3, r5
 80213e8:	bfbb      	ittet	lt
 80213ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80213ee:	461d      	movlt	r5, r3
 80213f0:	2300      	movge	r3, #0
 80213f2:	232d      	movlt	r3, #45	; 0x2d
 80213f4:	700b      	strb	r3, [r1, #0]
 80213f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80213fc:	4691      	mov	r9, r2
 80213fe:	f023 0820 	bic.w	r8, r3, #32
 8021402:	bfbc      	itt	lt
 8021404:	4622      	movlt	r2, r4
 8021406:	4614      	movlt	r4, r2
 8021408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802140c:	d005      	beq.n	802141a <__cvt+0x42>
 802140e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8021412:	d100      	bne.n	8021416 <__cvt+0x3e>
 8021414:	3601      	adds	r6, #1
 8021416:	2102      	movs	r1, #2
 8021418:	e000      	b.n	802141c <__cvt+0x44>
 802141a:	2103      	movs	r1, #3
 802141c:	ab03      	add	r3, sp, #12
 802141e:	9301      	str	r3, [sp, #4]
 8021420:	ab02      	add	r3, sp, #8
 8021422:	9300      	str	r3, [sp, #0]
 8021424:	ec45 4b10 	vmov	d0, r4, r5
 8021428:	4653      	mov	r3, sl
 802142a:	4632      	mov	r2, r6
 802142c:	f001 f908 	bl	8022640 <_dtoa_r>
 8021430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8021434:	4607      	mov	r7, r0
 8021436:	d102      	bne.n	802143e <__cvt+0x66>
 8021438:	f019 0f01 	tst.w	r9, #1
 802143c:	d022      	beq.n	8021484 <__cvt+0xac>
 802143e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8021442:	eb07 0906 	add.w	r9, r7, r6
 8021446:	d110      	bne.n	802146a <__cvt+0x92>
 8021448:	783b      	ldrb	r3, [r7, #0]
 802144a:	2b30      	cmp	r3, #48	; 0x30
 802144c:	d10a      	bne.n	8021464 <__cvt+0x8c>
 802144e:	2200      	movs	r2, #0
 8021450:	2300      	movs	r3, #0
 8021452:	4620      	mov	r0, r4
 8021454:	4629      	mov	r1, r5
 8021456:	f7df fb47 	bl	8000ae8 <__aeabi_dcmpeq>
 802145a:	b918      	cbnz	r0, 8021464 <__cvt+0x8c>
 802145c:	f1c6 0601 	rsb	r6, r6, #1
 8021460:	f8ca 6000 	str.w	r6, [sl]
 8021464:	f8da 3000 	ldr.w	r3, [sl]
 8021468:	4499      	add	r9, r3
 802146a:	2200      	movs	r2, #0
 802146c:	2300      	movs	r3, #0
 802146e:	4620      	mov	r0, r4
 8021470:	4629      	mov	r1, r5
 8021472:	f7df fb39 	bl	8000ae8 <__aeabi_dcmpeq>
 8021476:	b108      	cbz	r0, 802147c <__cvt+0xa4>
 8021478:	f8cd 900c 	str.w	r9, [sp, #12]
 802147c:	2230      	movs	r2, #48	; 0x30
 802147e:	9b03      	ldr	r3, [sp, #12]
 8021480:	454b      	cmp	r3, r9
 8021482:	d307      	bcc.n	8021494 <__cvt+0xbc>
 8021484:	9b03      	ldr	r3, [sp, #12]
 8021486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021488:	1bdb      	subs	r3, r3, r7
 802148a:	4638      	mov	r0, r7
 802148c:	6013      	str	r3, [r2, #0]
 802148e:	b004      	add	sp, #16
 8021490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021494:	1c59      	adds	r1, r3, #1
 8021496:	9103      	str	r1, [sp, #12]
 8021498:	701a      	strb	r2, [r3, #0]
 802149a:	e7f0      	b.n	802147e <__cvt+0xa6>

0802149c <__exponent>:
 802149c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802149e:	4603      	mov	r3, r0
 80214a0:	2900      	cmp	r1, #0
 80214a2:	bfb8      	it	lt
 80214a4:	4249      	neglt	r1, r1
 80214a6:	f803 2b02 	strb.w	r2, [r3], #2
 80214aa:	bfb4      	ite	lt
 80214ac:	222d      	movlt	r2, #45	; 0x2d
 80214ae:	222b      	movge	r2, #43	; 0x2b
 80214b0:	2909      	cmp	r1, #9
 80214b2:	7042      	strb	r2, [r0, #1]
 80214b4:	dd2a      	ble.n	802150c <__exponent+0x70>
 80214b6:	f10d 0407 	add.w	r4, sp, #7
 80214ba:	46a4      	mov	ip, r4
 80214bc:	270a      	movs	r7, #10
 80214be:	46a6      	mov	lr, r4
 80214c0:	460a      	mov	r2, r1
 80214c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80214c6:	fb07 1516 	mls	r5, r7, r6, r1
 80214ca:	3530      	adds	r5, #48	; 0x30
 80214cc:	2a63      	cmp	r2, #99	; 0x63
 80214ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80214d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80214d6:	4631      	mov	r1, r6
 80214d8:	dcf1      	bgt.n	80214be <__exponent+0x22>
 80214da:	3130      	adds	r1, #48	; 0x30
 80214dc:	f1ae 0502 	sub.w	r5, lr, #2
 80214e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80214e4:	1c44      	adds	r4, r0, #1
 80214e6:	4629      	mov	r1, r5
 80214e8:	4561      	cmp	r1, ip
 80214ea:	d30a      	bcc.n	8021502 <__exponent+0x66>
 80214ec:	f10d 0209 	add.w	r2, sp, #9
 80214f0:	eba2 020e 	sub.w	r2, r2, lr
 80214f4:	4565      	cmp	r5, ip
 80214f6:	bf88      	it	hi
 80214f8:	2200      	movhi	r2, #0
 80214fa:	4413      	add	r3, r2
 80214fc:	1a18      	subs	r0, r3, r0
 80214fe:	b003      	add	sp, #12
 8021500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021506:	f804 2f01 	strb.w	r2, [r4, #1]!
 802150a:	e7ed      	b.n	80214e8 <__exponent+0x4c>
 802150c:	2330      	movs	r3, #48	; 0x30
 802150e:	3130      	adds	r1, #48	; 0x30
 8021510:	7083      	strb	r3, [r0, #2]
 8021512:	70c1      	strb	r1, [r0, #3]
 8021514:	1d03      	adds	r3, r0, #4
 8021516:	e7f1      	b.n	80214fc <__exponent+0x60>

08021518 <_printf_float>:
 8021518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802151c:	ed2d 8b02 	vpush	{d8}
 8021520:	b08d      	sub	sp, #52	; 0x34
 8021522:	460c      	mov	r4, r1
 8021524:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8021528:	4616      	mov	r6, r2
 802152a:	461f      	mov	r7, r3
 802152c:	4605      	mov	r5, r0
 802152e:	f001 ff4d 	bl	80233cc <_localeconv_r>
 8021532:	f8d0 a000 	ldr.w	sl, [r0]
 8021536:	4650      	mov	r0, sl
 8021538:	f7de fe54 	bl	80001e4 <strlen>
 802153c:	2300      	movs	r3, #0
 802153e:	930a      	str	r3, [sp, #40]	; 0x28
 8021540:	6823      	ldr	r3, [r4, #0]
 8021542:	9305      	str	r3, [sp, #20]
 8021544:	f8d8 3000 	ldr.w	r3, [r8]
 8021548:	f894 b018 	ldrb.w	fp, [r4, #24]
 802154c:	3307      	adds	r3, #7
 802154e:	f023 0307 	bic.w	r3, r3, #7
 8021552:	f103 0208 	add.w	r2, r3, #8
 8021556:	f8c8 2000 	str.w	r2, [r8]
 802155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802155e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8021562:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8021566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802156a:	9307      	str	r3, [sp, #28]
 802156c:	f8cd 8018 	str.w	r8, [sp, #24]
 8021570:	ee08 0a10 	vmov	s16, r0
 8021574:	4b9f      	ldr	r3, [pc, #636]	; (80217f4 <_printf_float+0x2dc>)
 8021576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802157a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802157e:	f7df fae5 	bl	8000b4c <__aeabi_dcmpun>
 8021582:	bb88      	cbnz	r0, 80215e8 <_printf_float+0xd0>
 8021584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021588:	4b9a      	ldr	r3, [pc, #616]	; (80217f4 <_printf_float+0x2dc>)
 802158a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802158e:	f7df fabf 	bl	8000b10 <__aeabi_dcmple>
 8021592:	bb48      	cbnz	r0, 80215e8 <_printf_float+0xd0>
 8021594:	2200      	movs	r2, #0
 8021596:	2300      	movs	r3, #0
 8021598:	4640      	mov	r0, r8
 802159a:	4649      	mov	r1, r9
 802159c:	f7df faae 	bl	8000afc <__aeabi_dcmplt>
 80215a0:	b110      	cbz	r0, 80215a8 <_printf_float+0x90>
 80215a2:	232d      	movs	r3, #45	; 0x2d
 80215a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80215a8:	4b93      	ldr	r3, [pc, #588]	; (80217f8 <_printf_float+0x2e0>)
 80215aa:	4894      	ldr	r0, [pc, #592]	; (80217fc <_printf_float+0x2e4>)
 80215ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80215b0:	bf94      	ite	ls
 80215b2:	4698      	movls	r8, r3
 80215b4:	4680      	movhi	r8, r0
 80215b6:	2303      	movs	r3, #3
 80215b8:	6123      	str	r3, [r4, #16]
 80215ba:	9b05      	ldr	r3, [sp, #20]
 80215bc:	f023 0204 	bic.w	r2, r3, #4
 80215c0:	6022      	str	r2, [r4, #0]
 80215c2:	f04f 0900 	mov.w	r9, #0
 80215c6:	9700      	str	r7, [sp, #0]
 80215c8:	4633      	mov	r3, r6
 80215ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80215cc:	4621      	mov	r1, r4
 80215ce:	4628      	mov	r0, r5
 80215d0:	f000 f9d8 	bl	8021984 <_printf_common>
 80215d4:	3001      	adds	r0, #1
 80215d6:	f040 8090 	bne.w	80216fa <_printf_float+0x1e2>
 80215da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80215de:	b00d      	add	sp, #52	; 0x34
 80215e0:	ecbd 8b02 	vpop	{d8}
 80215e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e8:	4642      	mov	r2, r8
 80215ea:	464b      	mov	r3, r9
 80215ec:	4640      	mov	r0, r8
 80215ee:	4649      	mov	r1, r9
 80215f0:	f7df faac 	bl	8000b4c <__aeabi_dcmpun>
 80215f4:	b140      	cbz	r0, 8021608 <_printf_float+0xf0>
 80215f6:	464b      	mov	r3, r9
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	bfbc      	itt	lt
 80215fc:	232d      	movlt	r3, #45	; 0x2d
 80215fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8021602:	487f      	ldr	r0, [pc, #508]	; (8021800 <_printf_float+0x2e8>)
 8021604:	4b7f      	ldr	r3, [pc, #508]	; (8021804 <_printf_float+0x2ec>)
 8021606:	e7d1      	b.n	80215ac <_printf_float+0x94>
 8021608:	6863      	ldr	r3, [r4, #4]
 802160a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802160e:	9206      	str	r2, [sp, #24]
 8021610:	1c5a      	adds	r2, r3, #1
 8021612:	d13f      	bne.n	8021694 <_printf_float+0x17c>
 8021614:	2306      	movs	r3, #6
 8021616:	6063      	str	r3, [r4, #4]
 8021618:	9b05      	ldr	r3, [sp, #20]
 802161a:	6861      	ldr	r1, [r4, #4]
 802161c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8021620:	2300      	movs	r3, #0
 8021622:	9303      	str	r3, [sp, #12]
 8021624:	ab0a      	add	r3, sp, #40	; 0x28
 8021626:	e9cd b301 	strd	fp, r3, [sp, #4]
 802162a:	ab09      	add	r3, sp, #36	; 0x24
 802162c:	ec49 8b10 	vmov	d0, r8, r9
 8021630:	9300      	str	r3, [sp, #0]
 8021632:	6022      	str	r2, [r4, #0]
 8021634:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8021638:	4628      	mov	r0, r5
 802163a:	f7ff fecd 	bl	80213d8 <__cvt>
 802163e:	9b06      	ldr	r3, [sp, #24]
 8021640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021642:	2b47      	cmp	r3, #71	; 0x47
 8021644:	4680      	mov	r8, r0
 8021646:	d108      	bne.n	802165a <_printf_float+0x142>
 8021648:	1cc8      	adds	r0, r1, #3
 802164a:	db02      	blt.n	8021652 <_printf_float+0x13a>
 802164c:	6863      	ldr	r3, [r4, #4]
 802164e:	4299      	cmp	r1, r3
 8021650:	dd41      	ble.n	80216d6 <_printf_float+0x1be>
 8021652:	f1ab 0b02 	sub.w	fp, fp, #2
 8021656:	fa5f fb8b 	uxtb.w	fp, fp
 802165a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802165e:	d820      	bhi.n	80216a2 <_printf_float+0x18a>
 8021660:	3901      	subs	r1, #1
 8021662:	465a      	mov	r2, fp
 8021664:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8021668:	9109      	str	r1, [sp, #36]	; 0x24
 802166a:	f7ff ff17 	bl	802149c <__exponent>
 802166e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021670:	1813      	adds	r3, r2, r0
 8021672:	2a01      	cmp	r2, #1
 8021674:	4681      	mov	r9, r0
 8021676:	6123      	str	r3, [r4, #16]
 8021678:	dc02      	bgt.n	8021680 <_printf_float+0x168>
 802167a:	6822      	ldr	r2, [r4, #0]
 802167c:	07d2      	lsls	r2, r2, #31
 802167e:	d501      	bpl.n	8021684 <_printf_float+0x16c>
 8021680:	3301      	adds	r3, #1
 8021682:	6123      	str	r3, [r4, #16]
 8021684:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8021688:	2b00      	cmp	r3, #0
 802168a:	d09c      	beq.n	80215c6 <_printf_float+0xae>
 802168c:	232d      	movs	r3, #45	; 0x2d
 802168e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021692:	e798      	b.n	80215c6 <_printf_float+0xae>
 8021694:	9a06      	ldr	r2, [sp, #24]
 8021696:	2a47      	cmp	r2, #71	; 0x47
 8021698:	d1be      	bne.n	8021618 <_printf_float+0x100>
 802169a:	2b00      	cmp	r3, #0
 802169c:	d1bc      	bne.n	8021618 <_printf_float+0x100>
 802169e:	2301      	movs	r3, #1
 80216a0:	e7b9      	b.n	8021616 <_printf_float+0xfe>
 80216a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80216a6:	d118      	bne.n	80216da <_printf_float+0x1c2>
 80216a8:	2900      	cmp	r1, #0
 80216aa:	6863      	ldr	r3, [r4, #4]
 80216ac:	dd0b      	ble.n	80216c6 <_printf_float+0x1ae>
 80216ae:	6121      	str	r1, [r4, #16]
 80216b0:	b913      	cbnz	r3, 80216b8 <_printf_float+0x1a0>
 80216b2:	6822      	ldr	r2, [r4, #0]
 80216b4:	07d0      	lsls	r0, r2, #31
 80216b6:	d502      	bpl.n	80216be <_printf_float+0x1a6>
 80216b8:	3301      	adds	r3, #1
 80216ba:	440b      	add	r3, r1
 80216bc:	6123      	str	r3, [r4, #16]
 80216be:	65a1      	str	r1, [r4, #88]	; 0x58
 80216c0:	f04f 0900 	mov.w	r9, #0
 80216c4:	e7de      	b.n	8021684 <_printf_float+0x16c>
 80216c6:	b913      	cbnz	r3, 80216ce <_printf_float+0x1b6>
 80216c8:	6822      	ldr	r2, [r4, #0]
 80216ca:	07d2      	lsls	r2, r2, #31
 80216cc:	d501      	bpl.n	80216d2 <_printf_float+0x1ba>
 80216ce:	3302      	adds	r3, #2
 80216d0:	e7f4      	b.n	80216bc <_printf_float+0x1a4>
 80216d2:	2301      	movs	r3, #1
 80216d4:	e7f2      	b.n	80216bc <_printf_float+0x1a4>
 80216d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80216da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216dc:	4299      	cmp	r1, r3
 80216de:	db05      	blt.n	80216ec <_printf_float+0x1d4>
 80216e0:	6823      	ldr	r3, [r4, #0]
 80216e2:	6121      	str	r1, [r4, #16]
 80216e4:	07d8      	lsls	r0, r3, #31
 80216e6:	d5ea      	bpl.n	80216be <_printf_float+0x1a6>
 80216e8:	1c4b      	adds	r3, r1, #1
 80216ea:	e7e7      	b.n	80216bc <_printf_float+0x1a4>
 80216ec:	2900      	cmp	r1, #0
 80216ee:	bfd4      	ite	le
 80216f0:	f1c1 0202 	rsble	r2, r1, #2
 80216f4:	2201      	movgt	r2, #1
 80216f6:	4413      	add	r3, r2
 80216f8:	e7e0      	b.n	80216bc <_printf_float+0x1a4>
 80216fa:	6823      	ldr	r3, [r4, #0]
 80216fc:	055a      	lsls	r2, r3, #21
 80216fe:	d407      	bmi.n	8021710 <_printf_float+0x1f8>
 8021700:	6923      	ldr	r3, [r4, #16]
 8021702:	4642      	mov	r2, r8
 8021704:	4631      	mov	r1, r6
 8021706:	4628      	mov	r0, r5
 8021708:	47b8      	blx	r7
 802170a:	3001      	adds	r0, #1
 802170c:	d12c      	bne.n	8021768 <_printf_float+0x250>
 802170e:	e764      	b.n	80215da <_printf_float+0xc2>
 8021710:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8021714:	f240 80e0 	bls.w	80218d8 <_printf_float+0x3c0>
 8021718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802171c:	2200      	movs	r2, #0
 802171e:	2300      	movs	r3, #0
 8021720:	f7df f9e2 	bl	8000ae8 <__aeabi_dcmpeq>
 8021724:	2800      	cmp	r0, #0
 8021726:	d034      	beq.n	8021792 <_printf_float+0x27a>
 8021728:	4a37      	ldr	r2, [pc, #220]	; (8021808 <_printf_float+0x2f0>)
 802172a:	2301      	movs	r3, #1
 802172c:	4631      	mov	r1, r6
 802172e:	4628      	mov	r0, r5
 8021730:	47b8      	blx	r7
 8021732:	3001      	adds	r0, #1
 8021734:	f43f af51 	beq.w	80215da <_printf_float+0xc2>
 8021738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802173c:	429a      	cmp	r2, r3
 802173e:	db02      	blt.n	8021746 <_printf_float+0x22e>
 8021740:	6823      	ldr	r3, [r4, #0]
 8021742:	07d8      	lsls	r0, r3, #31
 8021744:	d510      	bpl.n	8021768 <_printf_float+0x250>
 8021746:	ee18 3a10 	vmov	r3, s16
 802174a:	4652      	mov	r2, sl
 802174c:	4631      	mov	r1, r6
 802174e:	4628      	mov	r0, r5
 8021750:	47b8      	blx	r7
 8021752:	3001      	adds	r0, #1
 8021754:	f43f af41 	beq.w	80215da <_printf_float+0xc2>
 8021758:	f04f 0800 	mov.w	r8, #0
 802175c:	f104 091a 	add.w	r9, r4, #26
 8021760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021762:	3b01      	subs	r3, #1
 8021764:	4543      	cmp	r3, r8
 8021766:	dc09      	bgt.n	802177c <_printf_float+0x264>
 8021768:	6823      	ldr	r3, [r4, #0]
 802176a:	079b      	lsls	r3, r3, #30
 802176c:	f100 8105 	bmi.w	802197a <_printf_float+0x462>
 8021770:	68e0      	ldr	r0, [r4, #12]
 8021772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021774:	4298      	cmp	r0, r3
 8021776:	bfb8      	it	lt
 8021778:	4618      	movlt	r0, r3
 802177a:	e730      	b.n	80215de <_printf_float+0xc6>
 802177c:	2301      	movs	r3, #1
 802177e:	464a      	mov	r2, r9
 8021780:	4631      	mov	r1, r6
 8021782:	4628      	mov	r0, r5
 8021784:	47b8      	blx	r7
 8021786:	3001      	adds	r0, #1
 8021788:	f43f af27 	beq.w	80215da <_printf_float+0xc2>
 802178c:	f108 0801 	add.w	r8, r8, #1
 8021790:	e7e6      	b.n	8021760 <_printf_float+0x248>
 8021792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021794:	2b00      	cmp	r3, #0
 8021796:	dc39      	bgt.n	802180c <_printf_float+0x2f4>
 8021798:	4a1b      	ldr	r2, [pc, #108]	; (8021808 <_printf_float+0x2f0>)
 802179a:	2301      	movs	r3, #1
 802179c:	4631      	mov	r1, r6
 802179e:	4628      	mov	r0, r5
 80217a0:	47b8      	blx	r7
 80217a2:	3001      	adds	r0, #1
 80217a4:	f43f af19 	beq.w	80215da <_printf_float+0xc2>
 80217a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80217ac:	4313      	orrs	r3, r2
 80217ae:	d102      	bne.n	80217b6 <_printf_float+0x29e>
 80217b0:	6823      	ldr	r3, [r4, #0]
 80217b2:	07d9      	lsls	r1, r3, #31
 80217b4:	d5d8      	bpl.n	8021768 <_printf_float+0x250>
 80217b6:	ee18 3a10 	vmov	r3, s16
 80217ba:	4652      	mov	r2, sl
 80217bc:	4631      	mov	r1, r6
 80217be:	4628      	mov	r0, r5
 80217c0:	47b8      	blx	r7
 80217c2:	3001      	adds	r0, #1
 80217c4:	f43f af09 	beq.w	80215da <_printf_float+0xc2>
 80217c8:	f04f 0900 	mov.w	r9, #0
 80217cc:	f104 0a1a 	add.w	sl, r4, #26
 80217d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217d2:	425b      	negs	r3, r3
 80217d4:	454b      	cmp	r3, r9
 80217d6:	dc01      	bgt.n	80217dc <_printf_float+0x2c4>
 80217d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217da:	e792      	b.n	8021702 <_printf_float+0x1ea>
 80217dc:	2301      	movs	r3, #1
 80217de:	4652      	mov	r2, sl
 80217e0:	4631      	mov	r1, r6
 80217e2:	4628      	mov	r0, r5
 80217e4:	47b8      	blx	r7
 80217e6:	3001      	adds	r0, #1
 80217e8:	f43f aef7 	beq.w	80215da <_printf_float+0xc2>
 80217ec:	f109 0901 	add.w	r9, r9, #1
 80217f0:	e7ee      	b.n	80217d0 <_printf_float+0x2b8>
 80217f2:	bf00      	nop
 80217f4:	7fefffff 	.word	0x7fefffff
 80217f8:	08029c6c 	.word	0x08029c6c
 80217fc:	08029c70 	.word	0x08029c70
 8021800:	08029c78 	.word	0x08029c78
 8021804:	08029c74 	.word	0x08029c74
 8021808:	08029fa1 	.word	0x08029fa1
 802180c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802180e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021810:	429a      	cmp	r2, r3
 8021812:	bfa8      	it	ge
 8021814:	461a      	movge	r2, r3
 8021816:	2a00      	cmp	r2, #0
 8021818:	4691      	mov	r9, r2
 802181a:	dc37      	bgt.n	802188c <_printf_float+0x374>
 802181c:	f04f 0b00 	mov.w	fp, #0
 8021820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021824:	f104 021a 	add.w	r2, r4, #26
 8021828:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802182a:	9305      	str	r3, [sp, #20]
 802182c:	eba3 0309 	sub.w	r3, r3, r9
 8021830:	455b      	cmp	r3, fp
 8021832:	dc33      	bgt.n	802189c <_printf_float+0x384>
 8021834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021838:	429a      	cmp	r2, r3
 802183a:	db3b      	blt.n	80218b4 <_printf_float+0x39c>
 802183c:	6823      	ldr	r3, [r4, #0]
 802183e:	07da      	lsls	r2, r3, #31
 8021840:	d438      	bmi.n	80218b4 <_printf_float+0x39c>
 8021842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021844:	9b05      	ldr	r3, [sp, #20]
 8021846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021848:	1ad3      	subs	r3, r2, r3
 802184a:	eba2 0901 	sub.w	r9, r2, r1
 802184e:	4599      	cmp	r9, r3
 8021850:	bfa8      	it	ge
 8021852:	4699      	movge	r9, r3
 8021854:	f1b9 0f00 	cmp.w	r9, #0
 8021858:	dc35      	bgt.n	80218c6 <_printf_float+0x3ae>
 802185a:	f04f 0800 	mov.w	r8, #0
 802185e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021862:	f104 0a1a 	add.w	sl, r4, #26
 8021866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802186a:	1a9b      	subs	r3, r3, r2
 802186c:	eba3 0309 	sub.w	r3, r3, r9
 8021870:	4543      	cmp	r3, r8
 8021872:	f77f af79 	ble.w	8021768 <_printf_float+0x250>
 8021876:	2301      	movs	r3, #1
 8021878:	4652      	mov	r2, sl
 802187a:	4631      	mov	r1, r6
 802187c:	4628      	mov	r0, r5
 802187e:	47b8      	blx	r7
 8021880:	3001      	adds	r0, #1
 8021882:	f43f aeaa 	beq.w	80215da <_printf_float+0xc2>
 8021886:	f108 0801 	add.w	r8, r8, #1
 802188a:	e7ec      	b.n	8021866 <_printf_float+0x34e>
 802188c:	4613      	mov	r3, r2
 802188e:	4631      	mov	r1, r6
 8021890:	4642      	mov	r2, r8
 8021892:	4628      	mov	r0, r5
 8021894:	47b8      	blx	r7
 8021896:	3001      	adds	r0, #1
 8021898:	d1c0      	bne.n	802181c <_printf_float+0x304>
 802189a:	e69e      	b.n	80215da <_printf_float+0xc2>
 802189c:	2301      	movs	r3, #1
 802189e:	4631      	mov	r1, r6
 80218a0:	4628      	mov	r0, r5
 80218a2:	9205      	str	r2, [sp, #20]
 80218a4:	47b8      	blx	r7
 80218a6:	3001      	adds	r0, #1
 80218a8:	f43f ae97 	beq.w	80215da <_printf_float+0xc2>
 80218ac:	9a05      	ldr	r2, [sp, #20]
 80218ae:	f10b 0b01 	add.w	fp, fp, #1
 80218b2:	e7b9      	b.n	8021828 <_printf_float+0x310>
 80218b4:	ee18 3a10 	vmov	r3, s16
 80218b8:	4652      	mov	r2, sl
 80218ba:	4631      	mov	r1, r6
 80218bc:	4628      	mov	r0, r5
 80218be:	47b8      	blx	r7
 80218c0:	3001      	adds	r0, #1
 80218c2:	d1be      	bne.n	8021842 <_printf_float+0x32a>
 80218c4:	e689      	b.n	80215da <_printf_float+0xc2>
 80218c6:	9a05      	ldr	r2, [sp, #20]
 80218c8:	464b      	mov	r3, r9
 80218ca:	4442      	add	r2, r8
 80218cc:	4631      	mov	r1, r6
 80218ce:	4628      	mov	r0, r5
 80218d0:	47b8      	blx	r7
 80218d2:	3001      	adds	r0, #1
 80218d4:	d1c1      	bne.n	802185a <_printf_float+0x342>
 80218d6:	e680      	b.n	80215da <_printf_float+0xc2>
 80218d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80218da:	2a01      	cmp	r2, #1
 80218dc:	dc01      	bgt.n	80218e2 <_printf_float+0x3ca>
 80218de:	07db      	lsls	r3, r3, #31
 80218e0:	d538      	bpl.n	8021954 <_printf_float+0x43c>
 80218e2:	2301      	movs	r3, #1
 80218e4:	4642      	mov	r2, r8
 80218e6:	4631      	mov	r1, r6
 80218e8:	4628      	mov	r0, r5
 80218ea:	47b8      	blx	r7
 80218ec:	3001      	adds	r0, #1
 80218ee:	f43f ae74 	beq.w	80215da <_printf_float+0xc2>
 80218f2:	ee18 3a10 	vmov	r3, s16
 80218f6:	4652      	mov	r2, sl
 80218f8:	4631      	mov	r1, r6
 80218fa:	4628      	mov	r0, r5
 80218fc:	47b8      	blx	r7
 80218fe:	3001      	adds	r0, #1
 8021900:	f43f ae6b 	beq.w	80215da <_printf_float+0xc2>
 8021904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021908:	2200      	movs	r2, #0
 802190a:	2300      	movs	r3, #0
 802190c:	f7df f8ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8021910:	b9d8      	cbnz	r0, 802194a <_printf_float+0x432>
 8021912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021914:	f108 0201 	add.w	r2, r8, #1
 8021918:	3b01      	subs	r3, #1
 802191a:	4631      	mov	r1, r6
 802191c:	4628      	mov	r0, r5
 802191e:	47b8      	blx	r7
 8021920:	3001      	adds	r0, #1
 8021922:	d10e      	bne.n	8021942 <_printf_float+0x42a>
 8021924:	e659      	b.n	80215da <_printf_float+0xc2>
 8021926:	2301      	movs	r3, #1
 8021928:	4652      	mov	r2, sl
 802192a:	4631      	mov	r1, r6
 802192c:	4628      	mov	r0, r5
 802192e:	47b8      	blx	r7
 8021930:	3001      	adds	r0, #1
 8021932:	f43f ae52 	beq.w	80215da <_printf_float+0xc2>
 8021936:	f108 0801 	add.w	r8, r8, #1
 802193a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802193c:	3b01      	subs	r3, #1
 802193e:	4543      	cmp	r3, r8
 8021940:	dcf1      	bgt.n	8021926 <_printf_float+0x40e>
 8021942:	464b      	mov	r3, r9
 8021944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8021948:	e6dc      	b.n	8021704 <_printf_float+0x1ec>
 802194a:	f04f 0800 	mov.w	r8, #0
 802194e:	f104 0a1a 	add.w	sl, r4, #26
 8021952:	e7f2      	b.n	802193a <_printf_float+0x422>
 8021954:	2301      	movs	r3, #1
 8021956:	4642      	mov	r2, r8
 8021958:	e7df      	b.n	802191a <_printf_float+0x402>
 802195a:	2301      	movs	r3, #1
 802195c:	464a      	mov	r2, r9
 802195e:	4631      	mov	r1, r6
 8021960:	4628      	mov	r0, r5
 8021962:	47b8      	blx	r7
 8021964:	3001      	adds	r0, #1
 8021966:	f43f ae38 	beq.w	80215da <_printf_float+0xc2>
 802196a:	f108 0801 	add.w	r8, r8, #1
 802196e:	68e3      	ldr	r3, [r4, #12]
 8021970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021972:	1a5b      	subs	r3, r3, r1
 8021974:	4543      	cmp	r3, r8
 8021976:	dcf0      	bgt.n	802195a <_printf_float+0x442>
 8021978:	e6fa      	b.n	8021770 <_printf_float+0x258>
 802197a:	f04f 0800 	mov.w	r8, #0
 802197e:	f104 0919 	add.w	r9, r4, #25
 8021982:	e7f4      	b.n	802196e <_printf_float+0x456>

08021984 <_printf_common>:
 8021984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021988:	4616      	mov	r6, r2
 802198a:	4699      	mov	r9, r3
 802198c:	688a      	ldr	r2, [r1, #8]
 802198e:	690b      	ldr	r3, [r1, #16]
 8021990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021994:	4293      	cmp	r3, r2
 8021996:	bfb8      	it	lt
 8021998:	4613      	movlt	r3, r2
 802199a:	6033      	str	r3, [r6, #0]
 802199c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80219a0:	4607      	mov	r7, r0
 80219a2:	460c      	mov	r4, r1
 80219a4:	b10a      	cbz	r2, 80219aa <_printf_common+0x26>
 80219a6:	3301      	adds	r3, #1
 80219a8:	6033      	str	r3, [r6, #0]
 80219aa:	6823      	ldr	r3, [r4, #0]
 80219ac:	0699      	lsls	r1, r3, #26
 80219ae:	bf42      	ittt	mi
 80219b0:	6833      	ldrmi	r3, [r6, #0]
 80219b2:	3302      	addmi	r3, #2
 80219b4:	6033      	strmi	r3, [r6, #0]
 80219b6:	6825      	ldr	r5, [r4, #0]
 80219b8:	f015 0506 	ands.w	r5, r5, #6
 80219bc:	d106      	bne.n	80219cc <_printf_common+0x48>
 80219be:	f104 0a19 	add.w	sl, r4, #25
 80219c2:	68e3      	ldr	r3, [r4, #12]
 80219c4:	6832      	ldr	r2, [r6, #0]
 80219c6:	1a9b      	subs	r3, r3, r2
 80219c8:	42ab      	cmp	r3, r5
 80219ca:	dc26      	bgt.n	8021a1a <_printf_common+0x96>
 80219cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80219d0:	1e13      	subs	r3, r2, #0
 80219d2:	6822      	ldr	r2, [r4, #0]
 80219d4:	bf18      	it	ne
 80219d6:	2301      	movne	r3, #1
 80219d8:	0692      	lsls	r2, r2, #26
 80219da:	d42b      	bmi.n	8021a34 <_printf_common+0xb0>
 80219dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80219e0:	4649      	mov	r1, r9
 80219e2:	4638      	mov	r0, r7
 80219e4:	47c0      	blx	r8
 80219e6:	3001      	adds	r0, #1
 80219e8:	d01e      	beq.n	8021a28 <_printf_common+0xa4>
 80219ea:	6823      	ldr	r3, [r4, #0]
 80219ec:	68e5      	ldr	r5, [r4, #12]
 80219ee:	6832      	ldr	r2, [r6, #0]
 80219f0:	f003 0306 	and.w	r3, r3, #6
 80219f4:	2b04      	cmp	r3, #4
 80219f6:	bf08      	it	eq
 80219f8:	1aad      	subeq	r5, r5, r2
 80219fa:	68a3      	ldr	r3, [r4, #8]
 80219fc:	6922      	ldr	r2, [r4, #16]
 80219fe:	bf0c      	ite	eq
 8021a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021a04:	2500      	movne	r5, #0
 8021a06:	4293      	cmp	r3, r2
 8021a08:	bfc4      	itt	gt
 8021a0a:	1a9b      	subgt	r3, r3, r2
 8021a0c:	18ed      	addgt	r5, r5, r3
 8021a0e:	2600      	movs	r6, #0
 8021a10:	341a      	adds	r4, #26
 8021a12:	42b5      	cmp	r5, r6
 8021a14:	d11a      	bne.n	8021a4c <_printf_common+0xc8>
 8021a16:	2000      	movs	r0, #0
 8021a18:	e008      	b.n	8021a2c <_printf_common+0xa8>
 8021a1a:	2301      	movs	r3, #1
 8021a1c:	4652      	mov	r2, sl
 8021a1e:	4649      	mov	r1, r9
 8021a20:	4638      	mov	r0, r7
 8021a22:	47c0      	blx	r8
 8021a24:	3001      	adds	r0, #1
 8021a26:	d103      	bne.n	8021a30 <_printf_common+0xac>
 8021a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a30:	3501      	adds	r5, #1
 8021a32:	e7c6      	b.n	80219c2 <_printf_common+0x3e>
 8021a34:	18e1      	adds	r1, r4, r3
 8021a36:	1c5a      	adds	r2, r3, #1
 8021a38:	2030      	movs	r0, #48	; 0x30
 8021a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021a3e:	4422      	add	r2, r4
 8021a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021a48:	3302      	adds	r3, #2
 8021a4a:	e7c7      	b.n	80219dc <_printf_common+0x58>
 8021a4c:	2301      	movs	r3, #1
 8021a4e:	4622      	mov	r2, r4
 8021a50:	4649      	mov	r1, r9
 8021a52:	4638      	mov	r0, r7
 8021a54:	47c0      	blx	r8
 8021a56:	3001      	adds	r0, #1
 8021a58:	d0e6      	beq.n	8021a28 <_printf_common+0xa4>
 8021a5a:	3601      	adds	r6, #1
 8021a5c:	e7d9      	b.n	8021a12 <_printf_common+0x8e>
	...

08021a60 <_printf_i>:
 8021a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021a64:	460c      	mov	r4, r1
 8021a66:	4691      	mov	r9, r2
 8021a68:	7e27      	ldrb	r7, [r4, #24]
 8021a6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a6c:	2f78      	cmp	r7, #120	; 0x78
 8021a6e:	4680      	mov	r8, r0
 8021a70:	469a      	mov	sl, r3
 8021a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021a76:	d807      	bhi.n	8021a88 <_printf_i+0x28>
 8021a78:	2f62      	cmp	r7, #98	; 0x62
 8021a7a:	d80a      	bhi.n	8021a92 <_printf_i+0x32>
 8021a7c:	2f00      	cmp	r7, #0
 8021a7e:	f000 80d8 	beq.w	8021c32 <_printf_i+0x1d2>
 8021a82:	2f58      	cmp	r7, #88	; 0x58
 8021a84:	f000 80a3 	beq.w	8021bce <_printf_i+0x16e>
 8021a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021a90:	e03a      	b.n	8021b08 <_printf_i+0xa8>
 8021a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021a96:	2b15      	cmp	r3, #21
 8021a98:	d8f6      	bhi.n	8021a88 <_printf_i+0x28>
 8021a9a:	a001      	add	r0, pc, #4	; (adr r0, 8021aa0 <_printf_i+0x40>)
 8021a9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021aa0:	08021af9 	.word	0x08021af9
 8021aa4:	08021b0d 	.word	0x08021b0d
 8021aa8:	08021a89 	.word	0x08021a89
 8021aac:	08021a89 	.word	0x08021a89
 8021ab0:	08021a89 	.word	0x08021a89
 8021ab4:	08021a89 	.word	0x08021a89
 8021ab8:	08021b0d 	.word	0x08021b0d
 8021abc:	08021a89 	.word	0x08021a89
 8021ac0:	08021a89 	.word	0x08021a89
 8021ac4:	08021a89 	.word	0x08021a89
 8021ac8:	08021a89 	.word	0x08021a89
 8021acc:	08021c19 	.word	0x08021c19
 8021ad0:	08021b3d 	.word	0x08021b3d
 8021ad4:	08021bfb 	.word	0x08021bfb
 8021ad8:	08021a89 	.word	0x08021a89
 8021adc:	08021a89 	.word	0x08021a89
 8021ae0:	08021c3b 	.word	0x08021c3b
 8021ae4:	08021a89 	.word	0x08021a89
 8021ae8:	08021b3d 	.word	0x08021b3d
 8021aec:	08021a89 	.word	0x08021a89
 8021af0:	08021a89 	.word	0x08021a89
 8021af4:	08021c03 	.word	0x08021c03
 8021af8:	680b      	ldr	r3, [r1, #0]
 8021afa:	1d1a      	adds	r2, r3, #4
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	600a      	str	r2, [r1, #0]
 8021b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021b08:	2301      	movs	r3, #1
 8021b0a:	e0a3      	b.n	8021c54 <_printf_i+0x1f4>
 8021b0c:	6825      	ldr	r5, [r4, #0]
 8021b0e:	6808      	ldr	r0, [r1, #0]
 8021b10:	062e      	lsls	r6, r5, #24
 8021b12:	f100 0304 	add.w	r3, r0, #4
 8021b16:	d50a      	bpl.n	8021b2e <_printf_i+0xce>
 8021b18:	6805      	ldr	r5, [r0, #0]
 8021b1a:	600b      	str	r3, [r1, #0]
 8021b1c:	2d00      	cmp	r5, #0
 8021b1e:	da03      	bge.n	8021b28 <_printf_i+0xc8>
 8021b20:	232d      	movs	r3, #45	; 0x2d
 8021b22:	426d      	negs	r5, r5
 8021b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021b28:	485e      	ldr	r0, [pc, #376]	; (8021ca4 <_printf_i+0x244>)
 8021b2a:	230a      	movs	r3, #10
 8021b2c:	e019      	b.n	8021b62 <_printf_i+0x102>
 8021b2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021b32:	6805      	ldr	r5, [r0, #0]
 8021b34:	600b      	str	r3, [r1, #0]
 8021b36:	bf18      	it	ne
 8021b38:	b22d      	sxthne	r5, r5
 8021b3a:	e7ef      	b.n	8021b1c <_printf_i+0xbc>
 8021b3c:	680b      	ldr	r3, [r1, #0]
 8021b3e:	6825      	ldr	r5, [r4, #0]
 8021b40:	1d18      	adds	r0, r3, #4
 8021b42:	6008      	str	r0, [r1, #0]
 8021b44:	0628      	lsls	r0, r5, #24
 8021b46:	d501      	bpl.n	8021b4c <_printf_i+0xec>
 8021b48:	681d      	ldr	r5, [r3, #0]
 8021b4a:	e002      	b.n	8021b52 <_printf_i+0xf2>
 8021b4c:	0669      	lsls	r1, r5, #25
 8021b4e:	d5fb      	bpl.n	8021b48 <_printf_i+0xe8>
 8021b50:	881d      	ldrh	r5, [r3, #0]
 8021b52:	4854      	ldr	r0, [pc, #336]	; (8021ca4 <_printf_i+0x244>)
 8021b54:	2f6f      	cmp	r7, #111	; 0x6f
 8021b56:	bf0c      	ite	eq
 8021b58:	2308      	moveq	r3, #8
 8021b5a:	230a      	movne	r3, #10
 8021b5c:	2100      	movs	r1, #0
 8021b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021b62:	6866      	ldr	r6, [r4, #4]
 8021b64:	60a6      	str	r6, [r4, #8]
 8021b66:	2e00      	cmp	r6, #0
 8021b68:	bfa2      	ittt	ge
 8021b6a:	6821      	ldrge	r1, [r4, #0]
 8021b6c:	f021 0104 	bicge.w	r1, r1, #4
 8021b70:	6021      	strge	r1, [r4, #0]
 8021b72:	b90d      	cbnz	r5, 8021b78 <_printf_i+0x118>
 8021b74:	2e00      	cmp	r6, #0
 8021b76:	d04d      	beq.n	8021c14 <_printf_i+0x1b4>
 8021b78:	4616      	mov	r6, r2
 8021b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8021b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8021b82:	5dc7      	ldrb	r7, [r0, r7]
 8021b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021b88:	462f      	mov	r7, r5
 8021b8a:	42bb      	cmp	r3, r7
 8021b8c:	460d      	mov	r5, r1
 8021b8e:	d9f4      	bls.n	8021b7a <_printf_i+0x11a>
 8021b90:	2b08      	cmp	r3, #8
 8021b92:	d10b      	bne.n	8021bac <_printf_i+0x14c>
 8021b94:	6823      	ldr	r3, [r4, #0]
 8021b96:	07df      	lsls	r7, r3, #31
 8021b98:	d508      	bpl.n	8021bac <_printf_i+0x14c>
 8021b9a:	6923      	ldr	r3, [r4, #16]
 8021b9c:	6861      	ldr	r1, [r4, #4]
 8021b9e:	4299      	cmp	r1, r3
 8021ba0:	bfde      	ittt	le
 8021ba2:	2330      	movle	r3, #48	; 0x30
 8021ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021ba8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8021bac:	1b92      	subs	r2, r2, r6
 8021bae:	6122      	str	r2, [r4, #16]
 8021bb0:	f8cd a000 	str.w	sl, [sp]
 8021bb4:	464b      	mov	r3, r9
 8021bb6:	aa03      	add	r2, sp, #12
 8021bb8:	4621      	mov	r1, r4
 8021bba:	4640      	mov	r0, r8
 8021bbc:	f7ff fee2 	bl	8021984 <_printf_common>
 8021bc0:	3001      	adds	r0, #1
 8021bc2:	d14c      	bne.n	8021c5e <_printf_i+0x1fe>
 8021bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021bc8:	b004      	add	sp, #16
 8021bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021bce:	4835      	ldr	r0, [pc, #212]	; (8021ca4 <_printf_i+0x244>)
 8021bd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021bd4:	6823      	ldr	r3, [r4, #0]
 8021bd6:	680e      	ldr	r6, [r1, #0]
 8021bd8:	061f      	lsls	r7, r3, #24
 8021bda:	f856 5b04 	ldr.w	r5, [r6], #4
 8021bde:	600e      	str	r6, [r1, #0]
 8021be0:	d514      	bpl.n	8021c0c <_printf_i+0x1ac>
 8021be2:	07d9      	lsls	r1, r3, #31
 8021be4:	bf44      	itt	mi
 8021be6:	f043 0320 	orrmi.w	r3, r3, #32
 8021bea:	6023      	strmi	r3, [r4, #0]
 8021bec:	b91d      	cbnz	r5, 8021bf6 <_printf_i+0x196>
 8021bee:	6823      	ldr	r3, [r4, #0]
 8021bf0:	f023 0320 	bic.w	r3, r3, #32
 8021bf4:	6023      	str	r3, [r4, #0]
 8021bf6:	2310      	movs	r3, #16
 8021bf8:	e7b0      	b.n	8021b5c <_printf_i+0xfc>
 8021bfa:	6823      	ldr	r3, [r4, #0]
 8021bfc:	f043 0320 	orr.w	r3, r3, #32
 8021c00:	6023      	str	r3, [r4, #0]
 8021c02:	2378      	movs	r3, #120	; 0x78
 8021c04:	4828      	ldr	r0, [pc, #160]	; (8021ca8 <_printf_i+0x248>)
 8021c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021c0a:	e7e3      	b.n	8021bd4 <_printf_i+0x174>
 8021c0c:	065e      	lsls	r6, r3, #25
 8021c0e:	bf48      	it	mi
 8021c10:	b2ad      	uxthmi	r5, r5
 8021c12:	e7e6      	b.n	8021be2 <_printf_i+0x182>
 8021c14:	4616      	mov	r6, r2
 8021c16:	e7bb      	b.n	8021b90 <_printf_i+0x130>
 8021c18:	680b      	ldr	r3, [r1, #0]
 8021c1a:	6826      	ldr	r6, [r4, #0]
 8021c1c:	6960      	ldr	r0, [r4, #20]
 8021c1e:	1d1d      	adds	r5, r3, #4
 8021c20:	600d      	str	r5, [r1, #0]
 8021c22:	0635      	lsls	r5, r6, #24
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	d501      	bpl.n	8021c2c <_printf_i+0x1cc>
 8021c28:	6018      	str	r0, [r3, #0]
 8021c2a:	e002      	b.n	8021c32 <_printf_i+0x1d2>
 8021c2c:	0671      	lsls	r1, r6, #25
 8021c2e:	d5fb      	bpl.n	8021c28 <_printf_i+0x1c8>
 8021c30:	8018      	strh	r0, [r3, #0]
 8021c32:	2300      	movs	r3, #0
 8021c34:	6123      	str	r3, [r4, #16]
 8021c36:	4616      	mov	r6, r2
 8021c38:	e7ba      	b.n	8021bb0 <_printf_i+0x150>
 8021c3a:	680b      	ldr	r3, [r1, #0]
 8021c3c:	1d1a      	adds	r2, r3, #4
 8021c3e:	600a      	str	r2, [r1, #0]
 8021c40:	681e      	ldr	r6, [r3, #0]
 8021c42:	6862      	ldr	r2, [r4, #4]
 8021c44:	2100      	movs	r1, #0
 8021c46:	4630      	mov	r0, r6
 8021c48:	f7de fada 	bl	8000200 <memchr>
 8021c4c:	b108      	cbz	r0, 8021c52 <_printf_i+0x1f2>
 8021c4e:	1b80      	subs	r0, r0, r6
 8021c50:	6060      	str	r0, [r4, #4]
 8021c52:	6863      	ldr	r3, [r4, #4]
 8021c54:	6123      	str	r3, [r4, #16]
 8021c56:	2300      	movs	r3, #0
 8021c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021c5c:	e7a8      	b.n	8021bb0 <_printf_i+0x150>
 8021c5e:	6923      	ldr	r3, [r4, #16]
 8021c60:	4632      	mov	r2, r6
 8021c62:	4649      	mov	r1, r9
 8021c64:	4640      	mov	r0, r8
 8021c66:	47d0      	blx	sl
 8021c68:	3001      	adds	r0, #1
 8021c6a:	d0ab      	beq.n	8021bc4 <_printf_i+0x164>
 8021c6c:	6823      	ldr	r3, [r4, #0]
 8021c6e:	079b      	lsls	r3, r3, #30
 8021c70:	d413      	bmi.n	8021c9a <_printf_i+0x23a>
 8021c72:	68e0      	ldr	r0, [r4, #12]
 8021c74:	9b03      	ldr	r3, [sp, #12]
 8021c76:	4298      	cmp	r0, r3
 8021c78:	bfb8      	it	lt
 8021c7a:	4618      	movlt	r0, r3
 8021c7c:	e7a4      	b.n	8021bc8 <_printf_i+0x168>
 8021c7e:	2301      	movs	r3, #1
 8021c80:	4632      	mov	r2, r6
 8021c82:	4649      	mov	r1, r9
 8021c84:	4640      	mov	r0, r8
 8021c86:	47d0      	blx	sl
 8021c88:	3001      	adds	r0, #1
 8021c8a:	d09b      	beq.n	8021bc4 <_printf_i+0x164>
 8021c8c:	3501      	adds	r5, #1
 8021c8e:	68e3      	ldr	r3, [r4, #12]
 8021c90:	9903      	ldr	r1, [sp, #12]
 8021c92:	1a5b      	subs	r3, r3, r1
 8021c94:	42ab      	cmp	r3, r5
 8021c96:	dcf2      	bgt.n	8021c7e <_printf_i+0x21e>
 8021c98:	e7eb      	b.n	8021c72 <_printf_i+0x212>
 8021c9a:	2500      	movs	r5, #0
 8021c9c:	f104 0619 	add.w	r6, r4, #25
 8021ca0:	e7f5      	b.n	8021c8e <_printf_i+0x22e>
 8021ca2:	bf00      	nop
 8021ca4:	08029c7c 	.word	0x08029c7c
 8021ca8:	08029c8d 	.word	0x08029c8d

08021cac <iprintf>:
 8021cac:	b40f      	push	{r0, r1, r2, r3}
 8021cae:	4b0a      	ldr	r3, [pc, #40]	; (8021cd8 <iprintf+0x2c>)
 8021cb0:	b513      	push	{r0, r1, r4, lr}
 8021cb2:	681c      	ldr	r4, [r3, #0]
 8021cb4:	b124      	cbz	r4, 8021cc0 <iprintf+0x14>
 8021cb6:	69a3      	ldr	r3, [r4, #24]
 8021cb8:	b913      	cbnz	r3, 8021cc0 <iprintf+0x14>
 8021cba:	4620      	mov	r0, r4
 8021cbc:	f7ff f9ce 	bl	802105c <__sinit>
 8021cc0:	ab05      	add	r3, sp, #20
 8021cc2:	9a04      	ldr	r2, [sp, #16]
 8021cc4:	68a1      	ldr	r1, [r4, #8]
 8021cc6:	9301      	str	r3, [sp, #4]
 8021cc8:	4620      	mov	r0, r4
 8021cca:	f002 fae9 	bl	80242a0 <_vfiprintf_r>
 8021cce:	b002      	add	sp, #8
 8021cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cd4:	b004      	add	sp, #16
 8021cd6:	4770      	bx	lr
 8021cd8:	20000074 	.word	0x20000074

08021cdc <_puts_r>:
 8021cdc:	b570      	push	{r4, r5, r6, lr}
 8021cde:	460e      	mov	r6, r1
 8021ce0:	4605      	mov	r5, r0
 8021ce2:	b118      	cbz	r0, 8021cec <_puts_r+0x10>
 8021ce4:	6983      	ldr	r3, [r0, #24]
 8021ce6:	b90b      	cbnz	r3, 8021cec <_puts_r+0x10>
 8021ce8:	f7ff f9b8 	bl	802105c <__sinit>
 8021cec:	69ab      	ldr	r3, [r5, #24]
 8021cee:	68ac      	ldr	r4, [r5, #8]
 8021cf0:	b913      	cbnz	r3, 8021cf8 <_puts_r+0x1c>
 8021cf2:	4628      	mov	r0, r5
 8021cf4:	f7ff f9b2 	bl	802105c <__sinit>
 8021cf8:	4b2c      	ldr	r3, [pc, #176]	; (8021dac <_puts_r+0xd0>)
 8021cfa:	429c      	cmp	r4, r3
 8021cfc:	d120      	bne.n	8021d40 <_puts_r+0x64>
 8021cfe:	686c      	ldr	r4, [r5, #4]
 8021d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d02:	07db      	lsls	r3, r3, #31
 8021d04:	d405      	bmi.n	8021d12 <_puts_r+0x36>
 8021d06:	89a3      	ldrh	r3, [r4, #12]
 8021d08:	0598      	lsls	r0, r3, #22
 8021d0a:	d402      	bmi.n	8021d12 <_puts_r+0x36>
 8021d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d0e:	f7ff fa68 	bl	80211e2 <__retarget_lock_acquire_recursive>
 8021d12:	89a3      	ldrh	r3, [r4, #12]
 8021d14:	0719      	lsls	r1, r3, #28
 8021d16:	d51d      	bpl.n	8021d54 <_puts_r+0x78>
 8021d18:	6923      	ldr	r3, [r4, #16]
 8021d1a:	b1db      	cbz	r3, 8021d54 <_puts_r+0x78>
 8021d1c:	3e01      	subs	r6, #1
 8021d1e:	68a3      	ldr	r3, [r4, #8]
 8021d20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021d24:	3b01      	subs	r3, #1
 8021d26:	60a3      	str	r3, [r4, #8]
 8021d28:	bb39      	cbnz	r1, 8021d7a <_puts_r+0x9e>
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	da38      	bge.n	8021da0 <_puts_r+0xc4>
 8021d2e:	4622      	mov	r2, r4
 8021d30:	210a      	movs	r1, #10
 8021d32:	4628      	mov	r0, r5
 8021d34:	f000 faf8 	bl	8022328 <__swbuf_r>
 8021d38:	3001      	adds	r0, #1
 8021d3a:	d011      	beq.n	8021d60 <_puts_r+0x84>
 8021d3c:	250a      	movs	r5, #10
 8021d3e:	e011      	b.n	8021d64 <_puts_r+0x88>
 8021d40:	4b1b      	ldr	r3, [pc, #108]	; (8021db0 <_puts_r+0xd4>)
 8021d42:	429c      	cmp	r4, r3
 8021d44:	d101      	bne.n	8021d4a <_puts_r+0x6e>
 8021d46:	68ac      	ldr	r4, [r5, #8]
 8021d48:	e7da      	b.n	8021d00 <_puts_r+0x24>
 8021d4a:	4b1a      	ldr	r3, [pc, #104]	; (8021db4 <_puts_r+0xd8>)
 8021d4c:	429c      	cmp	r4, r3
 8021d4e:	bf08      	it	eq
 8021d50:	68ec      	ldreq	r4, [r5, #12]
 8021d52:	e7d5      	b.n	8021d00 <_puts_r+0x24>
 8021d54:	4621      	mov	r1, r4
 8021d56:	4628      	mov	r0, r5
 8021d58:	f000 fb4a 	bl	80223f0 <__swsetup_r>
 8021d5c:	2800      	cmp	r0, #0
 8021d5e:	d0dd      	beq.n	8021d1c <_puts_r+0x40>
 8021d60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8021d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d66:	07da      	lsls	r2, r3, #31
 8021d68:	d405      	bmi.n	8021d76 <_puts_r+0x9a>
 8021d6a:	89a3      	ldrh	r3, [r4, #12]
 8021d6c:	059b      	lsls	r3, r3, #22
 8021d6e:	d402      	bmi.n	8021d76 <_puts_r+0x9a>
 8021d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d72:	f7ff fa37 	bl	80211e4 <__retarget_lock_release_recursive>
 8021d76:	4628      	mov	r0, r5
 8021d78:	bd70      	pop	{r4, r5, r6, pc}
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	da04      	bge.n	8021d88 <_puts_r+0xac>
 8021d7e:	69a2      	ldr	r2, [r4, #24]
 8021d80:	429a      	cmp	r2, r3
 8021d82:	dc06      	bgt.n	8021d92 <_puts_r+0xb6>
 8021d84:	290a      	cmp	r1, #10
 8021d86:	d004      	beq.n	8021d92 <_puts_r+0xb6>
 8021d88:	6823      	ldr	r3, [r4, #0]
 8021d8a:	1c5a      	adds	r2, r3, #1
 8021d8c:	6022      	str	r2, [r4, #0]
 8021d8e:	7019      	strb	r1, [r3, #0]
 8021d90:	e7c5      	b.n	8021d1e <_puts_r+0x42>
 8021d92:	4622      	mov	r2, r4
 8021d94:	4628      	mov	r0, r5
 8021d96:	f000 fac7 	bl	8022328 <__swbuf_r>
 8021d9a:	3001      	adds	r0, #1
 8021d9c:	d1bf      	bne.n	8021d1e <_puts_r+0x42>
 8021d9e:	e7df      	b.n	8021d60 <_puts_r+0x84>
 8021da0:	6823      	ldr	r3, [r4, #0]
 8021da2:	250a      	movs	r5, #10
 8021da4:	1c5a      	adds	r2, r3, #1
 8021da6:	6022      	str	r2, [r4, #0]
 8021da8:	701d      	strb	r5, [r3, #0]
 8021daa:	e7db      	b.n	8021d64 <_puts_r+0x88>
 8021dac:	08029c28 	.word	0x08029c28
 8021db0:	08029c48 	.word	0x08029c48
 8021db4:	08029c08 	.word	0x08029c08

08021db8 <puts>:
 8021db8:	4b02      	ldr	r3, [pc, #8]	; (8021dc4 <puts+0xc>)
 8021dba:	4601      	mov	r1, r0
 8021dbc:	6818      	ldr	r0, [r3, #0]
 8021dbe:	f7ff bf8d 	b.w	8021cdc <_puts_r>
 8021dc2:	bf00      	nop
 8021dc4:	20000074 	.word	0x20000074

08021dc8 <rand>:
 8021dc8:	4b17      	ldr	r3, [pc, #92]	; (8021e28 <rand+0x60>)
 8021dca:	b510      	push	{r4, lr}
 8021dcc:	681c      	ldr	r4, [r3, #0]
 8021dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021dd0:	b9b3      	cbnz	r3, 8021e00 <rand+0x38>
 8021dd2:	2018      	movs	r0, #24
 8021dd4:	f7ff fa08 	bl	80211e8 <malloc>
 8021dd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8021dda:	b928      	cbnz	r0, 8021de8 <rand+0x20>
 8021ddc:	4602      	mov	r2, r0
 8021dde:	4b13      	ldr	r3, [pc, #76]	; (8021e2c <rand+0x64>)
 8021de0:	4813      	ldr	r0, [pc, #76]	; (8021e30 <rand+0x68>)
 8021de2:	214e      	movs	r1, #78	; 0x4e
 8021de4:	f000 fb72 	bl	80224cc <__assert_func>
 8021de8:	4a12      	ldr	r2, [pc, #72]	; (8021e34 <rand+0x6c>)
 8021dea:	4b13      	ldr	r3, [pc, #76]	; (8021e38 <rand+0x70>)
 8021dec:	e9c0 2300 	strd	r2, r3, [r0]
 8021df0:	4b12      	ldr	r3, [pc, #72]	; (8021e3c <rand+0x74>)
 8021df2:	6083      	str	r3, [r0, #8]
 8021df4:	230b      	movs	r3, #11
 8021df6:	8183      	strh	r3, [r0, #12]
 8021df8:	2201      	movs	r2, #1
 8021dfa:	2300      	movs	r3, #0
 8021dfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021e00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021e02:	480f      	ldr	r0, [pc, #60]	; (8021e40 <rand+0x78>)
 8021e04:	690a      	ldr	r2, [r1, #16]
 8021e06:	694b      	ldr	r3, [r1, #20]
 8021e08:	4c0e      	ldr	r4, [pc, #56]	; (8021e44 <rand+0x7c>)
 8021e0a:	4350      	muls	r0, r2
 8021e0c:	fb04 0003 	mla	r0, r4, r3, r0
 8021e10:	fba2 3404 	umull	r3, r4, r2, r4
 8021e14:	1c5a      	adds	r2, r3, #1
 8021e16:	4404      	add	r4, r0
 8021e18:	f144 0000 	adc.w	r0, r4, #0
 8021e1c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021e20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021e24:	bd10      	pop	{r4, pc}
 8021e26:	bf00      	nop
 8021e28:	20000074 	.word	0x20000074
 8021e2c:	08029c9e 	.word	0x08029c9e
 8021e30:	08029cb5 	.word	0x08029cb5
 8021e34:	abcd330e 	.word	0xabcd330e
 8021e38:	e66d1234 	.word	0xe66d1234
 8021e3c:	0005deec 	.word	0x0005deec
 8021e40:	5851f42d 	.word	0x5851f42d
 8021e44:	4c957f2d 	.word	0x4c957f2d

08021e48 <cleanup_glue>:
 8021e48:	b538      	push	{r3, r4, r5, lr}
 8021e4a:	460c      	mov	r4, r1
 8021e4c:	6809      	ldr	r1, [r1, #0]
 8021e4e:	4605      	mov	r5, r0
 8021e50:	b109      	cbz	r1, 8021e56 <cleanup_glue+0xe>
 8021e52:	f7ff fff9 	bl	8021e48 <cleanup_glue>
 8021e56:	4621      	mov	r1, r4
 8021e58:	4628      	mov	r0, r5
 8021e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021e5e:	f7ff ba11 	b.w	8021284 <_free_r>
	...

08021e64 <_reclaim_reent>:
 8021e64:	4b2c      	ldr	r3, [pc, #176]	; (8021f18 <_reclaim_reent+0xb4>)
 8021e66:	681b      	ldr	r3, [r3, #0]
 8021e68:	4283      	cmp	r3, r0
 8021e6a:	b570      	push	{r4, r5, r6, lr}
 8021e6c:	4604      	mov	r4, r0
 8021e6e:	d051      	beq.n	8021f14 <_reclaim_reent+0xb0>
 8021e70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8021e72:	b143      	cbz	r3, 8021e86 <_reclaim_reent+0x22>
 8021e74:	68db      	ldr	r3, [r3, #12]
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	d14a      	bne.n	8021f10 <_reclaim_reent+0xac>
 8021e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021e7c:	6819      	ldr	r1, [r3, #0]
 8021e7e:	b111      	cbz	r1, 8021e86 <_reclaim_reent+0x22>
 8021e80:	4620      	mov	r0, r4
 8021e82:	f7ff f9ff 	bl	8021284 <_free_r>
 8021e86:	6961      	ldr	r1, [r4, #20]
 8021e88:	b111      	cbz	r1, 8021e90 <_reclaim_reent+0x2c>
 8021e8a:	4620      	mov	r0, r4
 8021e8c:	f7ff f9fa 	bl	8021284 <_free_r>
 8021e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021e92:	b111      	cbz	r1, 8021e9a <_reclaim_reent+0x36>
 8021e94:	4620      	mov	r0, r4
 8021e96:	f7ff f9f5 	bl	8021284 <_free_r>
 8021e9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021e9c:	b111      	cbz	r1, 8021ea4 <_reclaim_reent+0x40>
 8021e9e:	4620      	mov	r0, r4
 8021ea0:	f7ff f9f0 	bl	8021284 <_free_r>
 8021ea4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021ea6:	b111      	cbz	r1, 8021eae <_reclaim_reent+0x4a>
 8021ea8:	4620      	mov	r0, r4
 8021eaa:	f7ff f9eb 	bl	8021284 <_free_r>
 8021eae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021eb0:	b111      	cbz	r1, 8021eb8 <_reclaim_reent+0x54>
 8021eb2:	4620      	mov	r0, r4
 8021eb4:	f7ff f9e6 	bl	8021284 <_free_r>
 8021eb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021eba:	b111      	cbz	r1, 8021ec2 <_reclaim_reent+0x5e>
 8021ebc:	4620      	mov	r0, r4
 8021ebe:	f7ff f9e1 	bl	8021284 <_free_r>
 8021ec2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8021ec4:	b111      	cbz	r1, 8021ecc <_reclaim_reent+0x68>
 8021ec6:	4620      	mov	r0, r4
 8021ec8:	f7ff f9dc 	bl	8021284 <_free_r>
 8021ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021ece:	b111      	cbz	r1, 8021ed6 <_reclaim_reent+0x72>
 8021ed0:	4620      	mov	r0, r4
 8021ed2:	f7ff f9d7 	bl	8021284 <_free_r>
 8021ed6:	69a3      	ldr	r3, [r4, #24]
 8021ed8:	b1e3      	cbz	r3, 8021f14 <_reclaim_reent+0xb0>
 8021eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021edc:	4620      	mov	r0, r4
 8021ede:	4798      	blx	r3
 8021ee0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021ee2:	b1b9      	cbz	r1, 8021f14 <_reclaim_reent+0xb0>
 8021ee4:	4620      	mov	r0, r4
 8021ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021eea:	f7ff bfad 	b.w	8021e48 <cleanup_glue>
 8021eee:	5949      	ldr	r1, [r1, r5]
 8021ef0:	b941      	cbnz	r1, 8021f04 <_reclaim_reent+0xa0>
 8021ef2:	3504      	adds	r5, #4
 8021ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021ef6:	2d80      	cmp	r5, #128	; 0x80
 8021ef8:	68d9      	ldr	r1, [r3, #12]
 8021efa:	d1f8      	bne.n	8021eee <_reclaim_reent+0x8a>
 8021efc:	4620      	mov	r0, r4
 8021efe:	f7ff f9c1 	bl	8021284 <_free_r>
 8021f02:	e7ba      	b.n	8021e7a <_reclaim_reent+0x16>
 8021f04:	680e      	ldr	r6, [r1, #0]
 8021f06:	4620      	mov	r0, r4
 8021f08:	f7ff f9bc 	bl	8021284 <_free_r>
 8021f0c:	4631      	mov	r1, r6
 8021f0e:	e7ef      	b.n	8021ef0 <_reclaim_reent+0x8c>
 8021f10:	2500      	movs	r5, #0
 8021f12:	e7ef      	b.n	8021ef4 <_reclaim_reent+0x90>
 8021f14:	bd70      	pop	{r4, r5, r6, pc}
 8021f16:	bf00      	nop
 8021f18:	20000074 	.word	0x20000074

08021f1c <_sbrk_r>:
 8021f1c:	b538      	push	{r3, r4, r5, lr}
 8021f1e:	4d06      	ldr	r5, [pc, #24]	; (8021f38 <_sbrk_r+0x1c>)
 8021f20:	2300      	movs	r3, #0
 8021f22:	4604      	mov	r4, r0
 8021f24:	4608      	mov	r0, r1
 8021f26:	602b      	str	r3, [r5, #0]
 8021f28:	f7e0 fd9e 	bl	8002a68 <_sbrk>
 8021f2c:	1c43      	adds	r3, r0, #1
 8021f2e:	d102      	bne.n	8021f36 <_sbrk_r+0x1a>
 8021f30:	682b      	ldr	r3, [r5, #0]
 8021f32:	b103      	cbz	r3, 8021f36 <_sbrk_r+0x1a>
 8021f34:	6023      	str	r3, [r4, #0]
 8021f36:	bd38      	pop	{r3, r4, r5, pc}
 8021f38:	2001b1ec 	.word	0x2001b1ec

08021f3c <sniprintf>:
 8021f3c:	b40c      	push	{r2, r3}
 8021f3e:	b530      	push	{r4, r5, lr}
 8021f40:	4b17      	ldr	r3, [pc, #92]	; (8021fa0 <sniprintf+0x64>)
 8021f42:	1e0c      	subs	r4, r1, #0
 8021f44:	681d      	ldr	r5, [r3, #0]
 8021f46:	b09d      	sub	sp, #116	; 0x74
 8021f48:	da08      	bge.n	8021f5c <sniprintf+0x20>
 8021f4a:	238b      	movs	r3, #139	; 0x8b
 8021f4c:	602b      	str	r3, [r5, #0]
 8021f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021f52:	b01d      	add	sp, #116	; 0x74
 8021f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021f58:	b002      	add	sp, #8
 8021f5a:	4770      	bx	lr
 8021f5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021f64:	bf14      	ite	ne
 8021f66:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8021f6a:	4623      	moveq	r3, r4
 8021f6c:	9304      	str	r3, [sp, #16]
 8021f6e:	9307      	str	r3, [sp, #28]
 8021f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021f74:	9002      	str	r0, [sp, #8]
 8021f76:	9006      	str	r0, [sp, #24]
 8021f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021f7e:	ab21      	add	r3, sp, #132	; 0x84
 8021f80:	a902      	add	r1, sp, #8
 8021f82:	4628      	mov	r0, r5
 8021f84:	9301      	str	r3, [sp, #4]
 8021f86:	f001 fe8f 	bl	8023ca8 <_svfiprintf_r>
 8021f8a:	1c43      	adds	r3, r0, #1
 8021f8c:	bfbc      	itt	lt
 8021f8e:	238b      	movlt	r3, #139	; 0x8b
 8021f90:	602b      	strlt	r3, [r5, #0]
 8021f92:	2c00      	cmp	r4, #0
 8021f94:	d0dd      	beq.n	8021f52 <sniprintf+0x16>
 8021f96:	9b02      	ldr	r3, [sp, #8]
 8021f98:	2200      	movs	r2, #0
 8021f9a:	701a      	strb	r2, [r3, #0]
 8021f9c:	e7d9      	b.n	8021f52 <sniprintf+0x16>
 8021f9e:	bf00      	nop
 8021fa0:	20000074 	.word	0x20000074

08021fa4 <siprintf>:
 8021fa4:	b40e      	push	{r1, r2, r3}
 8021fa6:	b500      	push	{lr}
 8021fa8:	b09c      	sub	sp, #112	; 0x70
 8021faa:	ab1d      	add	r3, sp, #116	; 0x74
 8021fac:	9002      	str	r0, [sp, #8]
 8021fae:	9006      	str	r0, [sp, #24]
 8021fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021fb4:	4809      	ldr	r0, [pc, #36]	; (8021fdc <siprintf+0x38>)
 8021fb6:	9107      	str	r1, [sp, #28]
 8021fb8:	9104      	str	r1, [sp, #16]
 8021fba:	4909      	ldr	r1, [pc, #36]	; (8021fe0 <siprintf+0x3c>)
 8021fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8021fc0:	9105      	str	r1, [sp, #20]
 8021fc2:	6800      	ldr	r0, [r0, #0]
 8021fc4:	9301      	str	r3, [sp, #4]
 8021fc6:	a902      	add	r1, sp, #8
 8021fc8:	f001 fe6e 	bl	8023ca8 <_svfiprintf_r>
 8021fcc:	9b02      	ldr	r3, [sp, #8]
 8021fce:	2200      	movs	r2, #0
 8021fd0:	701a      	strb	r2, [r3, #0]
 8021fd2:	b01c      	add	sp, #112	; 0x70
 8021fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021fd8:	b003      	add	sp, #12
 8021fda:	4770      	bx	lr
 8021fdc:	20000074 	.word	0x20000074
 8021fe0:	ffff0208 	.word	0xffff0208

08021fe4 <siscanf>:
 8021fe4:	b40e      	push	{r1, r2, r3}
 8021fe6:	b510      	push	{r4, lr}
 8021fe8:	b09f      	sub	sp, #124	; 0x7c
 8021fea:	ac21      	add	r4, sp, #132	; 0x84
 8021fec:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021ff0:	f854 2b04 	ldr.w	r2, [r4], #4
 8021ff4:	9201      	str	r2, [sp, #4]
 8021ff6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021ffa:	9004      	str	r0, [sp, #16]
 8021ffc:	9008      	str	r0, [sp, #32]
 8021ffe:	f7de f8f1 	bl	80001e4 <strlen>
 8022002:	4b0c      	ldr	r3, [pc, #48]	; (8022034 <siscanf+0x50>)
 8022004:	9005      	str	r0, [sp, #20]
 8022006:	9009      	str	r0, [sp, #36]	; 0x24
 8022008:	930d      	str	r3, [sp, #52]	; 0x34
 802200a:	480b      	ldr	r0, [pc, #44]	; (8022038 <siscanf+0x54>)
 802200c:	9a01      	ldr	r2, [sp, #4]
 802200e:	6800      	ldr	r0, [r0, #0]
 8022010:	9403      	str	r4, [sp, #12]
 8022012:	2300      	movs	r3, #0
 8022014:	9311      	str	r3, [sp, #68]	; 0x44
 8022016:	9316      	str	r3, [sp, #88]	; 0x58
 8022018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802201c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022020:	a904      	add	r1, sp, #16
 8022022:	4623      	mov	r3, r4
 8022024:	f001 ff9a 	bl	8023f5c <__ssvfiscanf_r>
 8022028:	b01f      	add	sp, #124	; 0x7c
 802202a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802202e:	b003      	add	sp, #12
 8022030:	4770      	bx	lr
 8022032:	bf00      	nop
 8022034:	0802205f 	.word	0x0802205f
 8022038:	20000074 	.word	0x20000074

0802203c <__sread>:
 802203c:	b510      	push	{r4, lr}
 802203e:	460c      	mov	r4, r1
 8022040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022044:	f002 fba8 	bl	8024798 <_read_r>
 8022048:	2800      	cmp	r0, #0
 802204a:	bfab      	itete	ge
 802204c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802204e:	89a3      	ldrhlt	r3, [r4, #12]
 8022050:	181b      	addge	r3, r3, r0
 8022052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022056:	bfac      	ite	ge
 8022058:	6563      	strge	r3, [r4, #84]	; 0x54
 802205a:	81a3      	strhlt	r3, [r4, #12]
 802205c:	bd10      	pop	{r4, pc}

0802205e <__seofread>:
 802205e:	2000      	movs	r0, #0
 8022060:	4770      	bx	lr

08022062 <__swrite>:
 8022062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022066:	461f      	mov	r7, r3
 8022068:	898b      	ldrh	r3, [r1, #12]
 802206a:	05db      	lsls	r3, r3, #23
 802206c:	4605      	mov	r5, r0
 802206e:	460c      	mov	r4, r1
 8022070:	4616      	mov	r6, r2
 8022072:	d505      	bpl.n	8022080 <__swrite+0x1e>
 8022074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022078:	2302      	movs	r3, #2
 802207a:	2200      	movs	r2, #0
 802207c:	f001 f9aa 	bl	80233d4 <_lseek_r>
 8022080:	89a3      	ldrh	r3, [r4, #12]
 8022082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802208a:	81a3      	strh	r3, [r4, #12]
 802208c:	4632      	mov	r2, r6
 802208e:	463b      	mov	r3, r7
 8022090:	4628      	mov	r0, r5
 8022092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022096:	f000 b999 	b.w	80223cc <_write_r>

0802209a <__sseek>:
 802209a:	b510      	push	{r4, lr}
 802209c:	460c      	mov	r4, r1
 802209e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220a2:	f001 f997 	bl	80233d4 <_lseek_r>
 80220a6:	1c43      	adds	r3, r0, #1
 80220a8:	89a3      	ldrh	r3, [r4, #12]
 80220aa:	bf15      	itete	ne
 80220ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80220ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80220b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80220b6:	81a3      	strheq	r3, [r4, #12]
 80220b8:	bf18      	it	ne
 80220ba:	81a3      	strhne	r3, [r4, #12]
 80220bc:	bd10      	pop	{r4, pc}

080220be <__sclose>:
 80220be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220c2:	f000 ba21 	b.w	8022508 <_close_r>

080220c6 <strncat>:
 80220c6:	b530      	push	{r4, r5, lr}
 80220c8:	4604      	mov	r4, r0
 80220ca:	7825      	ldrb	r5, [r4, #0]
 80220cc:	4623      	mov	r3, r4
 80220ce:	3401      	adds	r4, #1
 80220d0:	2d00      	cmp	r5, #0
 80220d2:	d1fa      	bne.n	80220ca <strncat+0x4>
 80220d4:	3a01      	subs	r2, #1
 80220d6:	d304      	bcc.n	80220e2 <strncat+0x1c>
 80220d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80220dc:	f803 4b01 	strb.w	r4, [r3], #1
 80220e0:	b904      	cbnz	r4, 80220e4 <strncat+0x1e>
 80220e2:	bd30      	pop	{r4, r5, pc}
 80220e4:	2a00      	cmp	r2, #0
 80220e6:	d1f5      	bne.n	80220d4 <strncat+0xe>
 80220e8:	701a      	strb	r2, [r3, #0]
 80220ea:	e7f3      	b.n	80220d4 <strncat+0xe>

080220ec <strncmp>:
 80220ec:	b510      	push	{r4, lr}
 80220ee:	b16a      	cbz	r2, 802210c <strncmp+0x20>
 80220f0:	3901      	subs	r1, #1
 80220f2:	1884      	adds	r4, r0, r2
 80220f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80220f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80220fc:	4293      	cmp	r3, r2
 80220fe:	d103      	bne.n	8022108 <strncmp+0x1c>
 8022100:	42a0      	cmp	r0, r4
 8022102:	d001      	beq.n	8022108 <strncmp+0x1c>
 8022104:	2b00      	cmp	r3, #0
 8022106:	d1f5      	bne.n	80220f4 <strncmp+0x8>
 8022108:	1a98      	subs	r0, r3, r2
 802210a:	bd10      	pop	{r4, pc}
 802210c:	4610      	mov	r0, r2
 802210e:	e7fc      	b.n	802210a <strncmp+0x1e>

08022110 <strncpy>:
 8022110:	b510      	push	{r4, lr}
 8022112:	3901      	subs	r1, #1
 8022114:	4603      	mov	r3, r0
 8022116:	b132      	cbz	r2, 8022126 <strncpy+0x16>
 8022118:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802211c:	f803 4b01 	strb.w	r4, [r3], #1
 8022120:	3a01      	subs	r2, #1
 8022122:	2c00      	cmp	r4, #0
 8022124:	d1f7      	bne.n	8022116 <strncpy+0x6>
 8022126:	441a      	add	r2, r3
 8022128:	2100      	movs	r1, #0
 802212a:	4293      	cmp	r3, r2
 802212c:	d100      	bne.n	8022130 <strncpy+0x20>
 802212e:	bd10      	pop	{r4, pc}
 8022130:	f803 1b01 	strb.w	r1, [r3], #1
 8022134:	e7f9      	b.n	802212a <strncpy+0x1a>

08022136 <strstr>:
 8022136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022138:	780c      	ldrb	r4, [r1, #0]
 802213a:	b164      	cbz	r4, 8022156 <strstr+0x20>
 802213c:	4603      	mov	r3, r0
 802213e:	781a      	ldrb	r2, [r3, #0]
 8022140:	4618      	mov	r0, r3
 8022142:	1c5e      	adds	r6, r3, #1
 8022144:	b90a      	cbnz	r2, 802214a <strstr+0x14>
 8022146:	4610      	mov	r0, r2
 8022148:	e005      	b.n	8022156 <strstr+0x20>
 802214a:	4294      	cmp	r4, r2
 802214c:	d108      	bne.n	8022160 <strstr+0x2a>
 802214e:	460d      	mov	r5, r1
 8022150:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8022154:	b902      	cbnz	r2, 8022158 <strstr+0x22>
 8022156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022158:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802215c:	4297      	cmp	r7, r2
 802215e:	d0f7      	beq.n	8022150 <strstr+0x1a>
 8022160:	4633      	mov	r3, r6
 8022162:	e7ec      	b.n	802213e <strstr+0x8>

08022164 <strtok>:
 8022164:	4b16      	ldr	r3, [pc, #88]	; (80221c0 <strtok+0x5c>)
 8022166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022168:	681e      	ldr	r6, [r3, #0]
 802216a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 802216c:	4605      	mov	r5, r0
 802216e:	b9fc      	cbnz	r4, 80221b0 <strtok+0x4c>
 8022170:	2050      	movs	r0, #80	; 0x50
 8022172:	9101      	str	r1, [sp, #4]
 8022174:	f7ff f838 	bl	80211e8 <malloc>
 8022178:	9901      	ldr	r1, [sp, #4]
 802217a:	65b0      	str	r0, [r6, #88]	; 0x58
 802217c:	4602      	mov	r2, r0
 802217e:	b920      	cbnz	r0, 802218a <strtok+0x26>
 8022180:	4b10      	ldr	r3, [pc, #64]	; (80221c4 <strtok+0x60>)
 8022182:	4811      	ldr	r0, [pc, #68]	; (80221c8 <strtok+0x64>)
 8022184:	2157      	movs	r1, #87	; 0x57
 8022186:	f000 f9a1 	bl	80224cc <__assert_func>
 802218a:	e9c0 4400 	strd	r4, r4, [r0]
 802218e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8022192:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8022196:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802219a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802219e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80221a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80221a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80221aa:	6184      	str	r4, [r0, #24]
 80221ac:	7704      	strb	r4, [r0, #28]
 80221ae:	6244      	str	r4, [r0, #36]	; 0x24
 80221b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80221b2:	2301      	movs	r3, #1
 80221b4:	4628      	mov	r0, r5
 80221b6:	b002      	add	sp, #8
 80221b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80221bc:	f000 b806 	b.w	80221cc <__strtok_r>
 80221c0:	20000074 	.word	0x20000074
 80221c4:	08029c9e 	.word	0x08029c9e
 80221c8:	08029d14 	.word	0x08029d14

080221cc <__strtok_r>:
 80221cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221ce:	b908      	cbnz	r0, 80221d4 <__strtok_r+0x8>
 80221d0:	6810      	ldr	r0, [r2, #0]
 80221d2:	b188      	cbz	r0, 80221f8 <__strtok_r+0x2c>
 80221d4:	4604      	mov	r4, r0
 80221d6:	4620      	mov	r0, r4
 80221d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80221dc:	460f      	mov	r7, r1
 80221de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80221e2:	b91e      	cbnz	r6, 80221ec <__strtok_r+0x20>
 80221e4:	b965      	cbnz	r5, 8022200 <__strtok_r+0x34>
 80221e6:	6015      	str	r5, [r2, #0]
 80221e8:	4628      	mov	r0, r5
 80221ea:	e005      	b.n	80221f8 <__strtok_r+0x2c>
 80221ec:	42b5      	cmp	r5, r6
 80221ee:	d1f6      	bne.n	80221de <__strtok_r+0x12>
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	d1f0      	bne.n	80221d6 <__strtok_r+0xa>
 80221f4:	6014      	str	r4, [r2, #0]
 80221f6:	7003      	strb	r3, [r0, #0]
 80221f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80221fa:	461c      	mov	r4, r3
 80221fc:	e00c      	b.n	8022218 <__strtok_r+0x4c>
 80221fe:	b915      	cbnz	r5, 8022206 <__strtok_r+0x3a>
 8022200:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022204:	460e      	mov	r6, r1
 8022206:	f816 5b01 	ldrb.w	r5, [r6], #1
 802220a:	42ab      	cmp	r3, r5
 802220c:	d1f7      	bne.n	80221fe <__strtok_r+0x32>
 802220e:	2b00      	cmp	r3, #0
 8022210:	d0f3      	beq.n	80221fa <__strtok_r+0x2e>
 8022212:	2300      	movs	r3, #0
 8022214:	f804 3c01 	strb.w	r3, [r4, #-1]
 8022218:	6014      	str	r4, [r2, #0]
 802221a:	e7ed      	b.n	80221f8 <__strtok_r+0x2c>

0802221c <_strtol_l.isra.0>:
 802221c:	2b01      	cmp	r3, #1
 802221e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022222:	d001      	beq.n	8022228 <_strtol_l.isra.0+0xc>
 8022224:	2b24      	cmp	r3, #36	; 0x24
 8022226:	d906      	bls.n	8022236 <_strtol_l.isra.0+0x1a>
 8022228:	f000 fff6 	bl	8023218 <__errno>
 802222c:	2316      	movs	r3, #22
 802222e:	6003      	str	r3, [r0, #0]
 8022230:	2000      	movs	r0, #0
 8022232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022236:	4f3a      	ldr	r7, [pc, #232]	; (8022320 <_strtol_l.isra.0+0x104>)
 8022238:	468e      	mov	lr, r1
 802223a:	4676      	mov	r6, lr
 802223c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022240:	5de5      	ldrb	r5, [r4, r7]
 8022242:	f015 0508 	ands.w	r5, r5, #8
 8022246:	d1f8      	bne.n	802223a <_strtol_l.isra.0+0x1e>
 8022248:	2c2d      	cmp	r4, #45	; 0x2d
 802224a:	d134      	bne.n	80222b6 <_strtol_l.isra.0+0x9a>
 802224c:	f89e 4000 	ldrb.w	r4, [lr]
 8022250:	f04f 0801 	mov.w	r8, #1
 8022254:	f106 0e02 	add.w	lr, r6, #2
 8022258:	2b00      	cmp	r3, #0
 802225a:	d05c      	beq.n	8022316 <_strtol_l.isra.0+0xfa>
 802225c:	2b10      	cmp	r3, #16
 802225e:	d10c      	bne.n	802227a <_strtol_l.isra.0+0x5e>
 8022260:	2c30      	cmp	r4, #48	; 0x30
 8022262:	d10a      	bne.n	802227a <_strtol_l.isra.0+0x5e>
 8022264:	f89e 4000 	ldrb.w	r4, [lr]
 8022268:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802226c:	2c58      	cmp	r4, #88	; 0x58
 802226e:	d14d      	bne.n	802230c <_strtol_l.isra.0+0xf0>
 8022270:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8022274:	2310      	movs	r3, #16
 8022276:	f10e 0e02 	add.w	lr, lr, #2
 802227a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802227e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8022282:	2600      	movs	r6, #0
 8022284:	fbbc f9f3 	udiv	r9, ip, r3
 8022288:	4635      	mov	r5, r6
 802228a:	fb03 ca19 	mls	sl, r3, r9, ip
 802228e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8022292:	2f09      	cmp	r7, #9
 8022294:	d818      	bhi.n	80222c8 <_strtol_l.isra.0+0xac>
 8022296:	463c      	mov	r4, r7
 8022298:	42a3      	cmp	r3, r4
 802229a:	dd24      	ble.n	80222e6 <_strtol_l.isra.0+0xca>
 802229c:	2e00      	cmp	r6, #0
 802229e:	db1f      	blt.n	80222e0 <_strtol_l.isra.0+0xc4>
 80222a0:	45a9      	cmp	r9, r5
 80222a2:	d31d      	bcc.n	80222e0 <_strtol_l.isra.0+0xc4>
 80222a4:	d101      	bne.n	80222aa <_strtol_l.isra.0+0x8e>
 80222a6:	45a2      	cmp	sl, r4
 80222a8:	db1a      	blt.n	80222e0 <_strtol_l.isra.0+0xc4>
 80222aa:	fb05 4503 	mla	r5, r5, r3, r4
 80222ae:	2601      	movs	r6, #1
 80222b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80222b4:	e7eb      	b.n	802228e <_strtol_l.isra.0+0x72>
 80222b6:	2c2b      	cmp	r4, #43	; 0x2b
 80222b8:	bf08      	it	eq
 80222ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 80222be:	46a8      	mov	r8, r5
 80222c0:	bf08      	it	eq
 80222c2:	f106 0e02 	addeq.w	lr, r6, #2
 80222c6:	e7c7      	b.n	8022258 <_strtol_l.isra.0+0x3c>
 80222c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80222cc:	2f19      	cmp	r7, #25
 80222ce:	d801      	bhi.n	80222d4 <_strtol_l.isra.0+0xb8>
 80222d0:	3c37      	subs	r4, #55	; 0x37
 80222d2:	e7e1      	b.n	8022298 <_strtol_l.isra.0+0x7c>
 80222d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80222d8:	2f19      	cmp	r7, #25
 80222da:	d804      	bhi.n	80222e6 <_strtol_l.isra.0+0xca>
 80222dc:	3c57      	subs	r4, #87	; 0x57
 80222de:	e7db      	b.n	8022298 <_strtol_l.isra.0+0x7c>
 80222e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80222e4:	e7e4      	b.n	80222b0 <_strtol_l.isra.0+0x94>
 80222e6:	2e00      	cmp	r6, #0
 80222e8:	da05      	bge.n	80222f6 <_strtol_l.isra.0+0xda>
 80222ea:	2322      	movs	r3, #34	; 0x22
 80222ec:	6003      	str	r3, [r0, #0]
 80222ee:	4665      	mov	r5, ip
 80222f0:	b942      	cbnz	r2, 8022304 <_strtol_l.isra.0+0xe8>
 80222f2:	4628      	mov	r0, r5
 80222f4:	e79d      	b.n	8022232 <_strtol_l.isra.0+0x16>
 80222f6:	f1b8 0f00 	cmp.w	r8, #0
 80222fa:	d000      	beq.n	80222fe <_strtol_l.isra.0+0xe2>
 80222fc:	426d      	negs	r5, r5
 80222fe:	2a00      	cmp	r2, #0
 8022300:	d0f7      	beq.n	80222f2 <_strtol_l.isra.0+0xd6>
 8022302:	b10e      	cbz	r6, 8022308 <_strtol_l.isra.0+0xec>
 8022304:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8022308:	6011      	str	r1, [r2, #0]
 802230a:	e7f2      	b.n	80222f2 <_strtol_l.isra.0+0xd6>
 802230c:	2430      	movs	r4, #48	; 0x30
 802230e:	2b00      	cmp	r3, #0
 8022310:	d1b3      	bne.n	802227a <_strtol_l.isra.0+0x5e>
 8022312:	2308      	movs	r3, #8
 8022314:	e7b1      	b.n	802227a <_strtol_l.isra.0+0x5e>
 8022316:	2c30      	cmp	r4, #48	; 0x30
 8022318:	d0a4      	beq.n	8022264 <_strtol_l.isra.0+0x48>
 802231a:	230a      	movs	r3, #10
 802231c:	e7ad      	b.n	802227a <_strtol_l.isra.0+0x5e>
 802231e:	bf00      	nop
 8022320:	08029b05 	.word	0x08029b05

08022324 <_strtol_r>:
 8022324:	f7ff bf7a 	b.w	802221c <_strtol_l.isra.0>

08022328 <__swbuf_r>:
 8022328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802232a:	460e      	mov	r6, r1
 802232c:	4614      	mov	r4, r2
 802232e:	4605      	mov	r5, r0
 8022330:	b118      	cbz	r0, 802233a <__swbuf_r+0x12>
 8022332:	6983      	ldr	r3, [r0, #24]
 8022334:	b90b      	cbnz	r3, 802233a <__swbuf_r+0x12>
 8022336:	f7fe fe91 	bl	802105c <__sinit>
 802233a:	4b21      	ldr	r3, [pc, #132]	; (80223c0 <__swbuf_r+0x98>)
 802233c:	429c      	cmp	r4, r3
 802233e:	d12b      	bne.n	8022398 <__swbuf_r+0x70>
 8022340:	686c      	ldr	r4, [r5, #4]
 8022342:	69a3      	ldr	r3, [r4, #24]
 8022344:	60a3      	str	r3, [r4, #8]
 8022346:	89a3      	ldrh	r3, [r4, #12]
 8022348:	071a      	lsls	r2, r3, #28
 802234a:	d52f      	bpl.n	80223ac <__swbuf_r+0x84>
 802234c:	6923      	ldr	r3, [r4, #16]
 802234e:	b36b      	cbz	r3, 80223ac <__swbuf_r+0x84>
 8022350:	6923      	ldr	r3, [r4, #16]
 8022352:	6820      	ldr	r0, [r4, #0]
 8022354:	1ac0      	subs	r0, r0, r3
 8022356:	6963      	ldr	r3, [r4, #20]
 8022358:	b2f6      	uxtb	r6, r6
 802235a:	4283      	cmp	r3, r0
 802235c:	4637      	mov	r7, r6
 802235e:	dc04      	bgt.n	802236a <__swbuf_r+0x42>
 8022360:	4621      	mov	r1, r4
 8022362:	4628      	mov	r0, r5
 8022364:	f000 ffe4 	bl	8023330 <_fflush_r>
 8022368:	bb30      	cbnz	r0, 80223b8 <__swbuf_r+0x90>
 802236a:	68a3      	ldr	r3, [r4, #8]
 802236c:	3b01      	subs	r3, #1
 802236e:	60a3      	str	r3, [r4, #8]
 8022370:	6823      	ldr	r3, [r4, #0]
 8022372:	1c5a      	adds	r2, r3, #1
 8022374:	6022      	str	r2, [r4, #0]
 8022376:	701e      	strb	r6, [r3, #0]
 8022378:	6963      	ldr	r3, [r4, #20]
 802237a:	3001      	adds	r0, #1
 802237c:	4283      	cmp	r3, r0
 802237e:	d004      	beq.n	802238a <__swbuf_r+0x62>
 8022380:	89a3      	ldrh	r3, [r4, #12]
 8022382:	07db      	lsls	r3, r3, #31
 8022384:	d506      	bpl.n	8022394 <__swbuf_r+0x6c>
 8022386:	2e0a      	cmp	r6, #10
 8022388:	d104      	bne.n	8022394 <__swbuf_r+0x6c>
 802238a:	4621      	mov	r1, r4
 802238c:	4628      	mov	r0, r5
 802238e:	f000 ffcf 	bl	8023330 <_fflush_r>
 8022392:	b988      	cbnz	r0, 80223b8 <__swbuf_r+0x90>
 8022394:	4638      	mov	r0, r7
 8022396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022398:	4b0a      	ldr	r3, [pc, #40]	; (80223c4 <__swbuf_r+0x9c>)
 802239a:	429c      	cmp	r4, r3
 802239c:	d101      	bne.n	80223a2 <__swbuf_r+0x7a>
 802239e:	68ac      	ldr	r4, [r5, #8]
 80223a0:	e7cf      	b.n	8022342 <__swbuf_r+0x1a>
 80223a2:	4b09      	ldr	r3, [pc, #36]	; (80223c8 <__swbuf_r+0xa0>)
 80223a4:	429c      	cmp	r4, r3
 80223a6:	bf08      	it	eq
 80223a8:	68ec      	ldreq	r4, [r5, #12]
 80223aa:	e7ca      	b.n	8022342 <__swbuf_r+0x1a>
 80223ac:	4621      	mov	r1, r4
 80223ae:	4628      	mov	r0, r5
 80223b0:	f000 f81e 	bl	80223f0 <__swsetup_r>
 80223b4:	2800      	cmp	r0, #0
 80223b6:	d0cb      	beq.n	8022350 <__swbuf_r+0x28>
 80223b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80223bc:	e7ea      	b.n	8022394 <__swbuf_r+0x6c>
 80223be:	bf00      	nop
 80223c0:	08029c28 	.word	0x08029c28
 80223c4:	08029c48 	.word	0x08029c48
 80223c8:	08029c08 	.word	0x08029c08

080223cc <_write_r>:
 80223cc:	b538      	push	{r3, r4, r5, lr}
 80223ce:	4d07      	ldr	r5, [pc, #28]	; (80223ec <_write_r+0x20>)
 80223d0:	4604      	mov	r4, r0
 80223d2:	4608      	mov	r0, r1
 80223d4:	4611      	mov	r1, r2
 80223d6:	2200      	movs	r2, #0
 80223d8:	602a      	str	r2, [r5, #0]
 80223da:	461a      	mov	r2, r3
 80223dc:	f7e0 faf3 	bl	80029c6 <_write>
 80223e0:	1c43      	adds	r3, r0, #1
 80223e2:	d102      	bne.n	80223ea <_write_r+0x1e>
 80223e4:	682b      	ldr	r3, [r5, #0]
 80223e6:	b103      	cbz	r3, 80223ea <_write_r+0x1e>
 80223e8:	6023      	str	r3, [r4, #0]
 80223ea:	bd38      	pop	{r3, r4, r5, pc}
 80223ec:	2001b1ec 	.word	0x2001b1ec

080223f0 <__swsetup_r>:
 80223f0:	4b32      	ldr	r3, [pc, #200]	; (80224bc <__swsetup_r+0xcc>)
 80223f2:	b570      	push	{r4, r5, r6, lr}
 80223f4:	681d      	ldr	r5, [r3, #0]
 80223f6:	4606      	mov	r6, r0
 80223f8:	460c      	mov	r4, r1
 80223fa:	b125      	cbz	r5, 8022406 <__swsetup_r+0x16>
 80223fc:	69ab      	ldr	r3, [r5, #24]
 80223fe:	b913      	cbnz	r3, 8022406 <__swsetup_r+0x16>
 8022400:	4628      	mov	r0, r5
 8022402:	f7fe fe2b 	bl	802105c <__sinit>
 8022406:	4b2e      	ldr	r3, [pc, #184]	; (80224c0 <__swsetup_r+0xd0>)
 8022408:	429c      	cmp	r4, r3
 802240a:	d10f      	bne.n	802242c <__swsetup_r+0x3c>
 802240c:	686c      	ldr	r4, [r5, #4]
 802240e:	89a3      	ldrh	r3, [r4, #12]
 8022410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022414:	0719      	lsls	r1, r3, #28
 8022416:	d42c      	bmi.n	8022472 <__swsetup_r+0x82>
 8022418:	06dd      	lsls	r5, r3, #27
 802241a:	d411      	bmi.n	8022440 <__swsetup_r+0x50>
 802241c:	2309      	movs	r3, #9
 802241e:	6033      	str	r3, [r6, #0]
 8022420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022424:	81a3      	strh	r3, [r4, #12]
 8022426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802242a:	e03e      	b.n	80224aa <__swsetup_r+0xba>
 802242c:	4b25      	ldr	r3, [pc, #148]	; (80224c4 <__swsetup_r+0xd4>)
 802242e:	429c      	cmp	r4, r3
 8022430:	d101      	bne.n	8022436 <__swsetup_r+0x46>
 8022432:	68ac      	ldr	r4, [r5, #8]
 8022434:	e7eb      	b.n	802240e <__swsetup_r+0x1e>
 8022436:	4b24      	ldr	r3, [pc, #144]	; (80224c8 <__swsetup_r+0xd8>)
 8022438:	429c      	cmp	r4, r3
 802243a:	bf08      	it	eq
 802243c:	68ec      	ldreq	r4, [r5, #12]
 802243e:	e7e6      	b.n	802240e <__swsetup_r+0x1e>
 8022440:	0758      	lsls	r0, r3, #29
 8022442:	d512      	bpl.n	802246a <__swsetup_r+0x7a>
 8022444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022446:	b141      	cbz	r1, 802245a <__swsetup_r+0x6a>
 8022448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802244c:	4299      	cmp	r1, r3
 802244e:	d002      	beq.n	8022456 <__swsetup_r+0x66>
 8022450:	4630      	mov	r0, r6
 8022452:	f7fe ff17 	bl	8021284 <_free_r>
 8022456:	2300      	movs	r3, #0
 8022458:	6363      	str	r3, [r4, #52]	; 0x34
 802245a:	89a3      	ldrh	r3, [r4, #12]
 802245c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022460:	81a3      	strh	r3, [r4, #12]
 8022462:	2300      	movs	r3, #0
 8022464:	6063      	str	r3, [r4, #4]
 8022466:	6923      	ldr	r3, [r4, #16]
 8022468:	6023      	str	r3, [r4, #0]
 802246a:	89a3      	ldrh	r3, [r4, #12]
 802246c:	f043 0308 	orr.w	r3, r3, #8
 8022470:	81a3      	strh	r3, [r4, #12]
 8022472:	6923      	ldr	r3, [r4, #16]
 8022474:	b94b      	cbnz	r3, 802248a <__swsetup_r+0x9a>
 8022476:	89a3      	ldrh	r3, [r4, #12]
 8022478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022480:	d003      	beq.n	802248a <__swsetup_r+0x9a>
 8022482:	4621      	mov	r1, r4
 8022484:	4630      	mov	r0, r6
 8022486:	f000 ffdb 	bl	8023440 <__smakebuf_r>
 802248a:	89a0      	ldrh	r0, [r4, #12]
 802248c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022490:	f010 0301 	ands.w	r3, r0, #1
 8022494:	d00a      	beq.n	80224ac <__swsetup_r+0xbc>
 8022496:	2300      	movs	r3, #0
 8022498:	60a3      	str	r3, [r4, #8]
 802249a:	6963      	ldr	r3, [r4, #20]
 802249c:	425b      	negs	r3, r3
 802249e:	61a3      	str	r3, [r4, #24]
 80224a0:	6923      	ldr	r3, [r4, #16]
 80224a2:	b943      	cbnz	r3, 80224b6 <__swsetup_r+0xc6>
 80224a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80224a8:	d1ba      	bne.n	8022420 <__swsetup_r+0x30>
 80224aa:	bd70      	pop	{r4, r5, r6, pc}
 80224ac:	0781      	lsls	r1, r0, #30
 80224ae:	bf58      	it	pl
 80224b0:	6963      	ldrpl	r3, [r4, #20]
 80224b2:	60a3      	str	r3, [r4, #8]
 80224b4:	e7f4      	b.n	80224a0 <__swsetup_r+0xb0>
 80224b6:	2000      	movs	r0, #0
 80224b8:	e7f7      	b.n	80224aa <__swsetup_r+0xba>
 80224ba:	bf00      	nop
 80224bc:	20000074 	.word	0x20000074
 80224c0:	08029c28 	.word	0x08029c28
 80224c4:	08029c48 	.word	0x08029c48
 80224c8:	08029c08 	.word	0x08029c08

080224cc <__assert_func>:
 80224cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80224ce:	4614      	mov	r4, r2
 80224d0:	461a      	mov	r2, r3
 80224d2:	4b09      	ldr	r3, [pc, #36]	; (80224f8 <__assert_func+0x2c>)
 80224d4:	681b      	ldr	r3, [r3, #0]
 80224d6:	4605      	mov	r5, r0
 80224d8:	68d8      	ldr	r0, [r3, #12]
 80224da:	b14c      	cbz	r4, 80224f0 <__assert_func+0x24>
 80224dc:	4b07      	ldr	r3, [pc, #28]	; (80224fc <__assert_func+0x30>)
 80224de:	9100      	str	r1, [sp, #0]
 80224e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80224e4:	4906      	ldr	r1, [pc, #24]	; (8022500 <__assert_func+0x34>)
 80224e6:	462b      	mov	r3, r5
 80224e8:	f000 ff5e 	bl	80233a8 <fiprintf>
 80224ec:	f002 fa58 	bl	80249a0 <abort>
 80224f0:	4b04      	ldr	r3, [pc, #16]	; (8022504 <__assert_func+0x38>)
 80224f2:	461c      	mov	r4, r3
 80224f4:	e7f3      	b.n	80224de <__assert_func+0x12>
 80224f6:	bf00      	nop
 80224f8:	20000074 	.word	0x20000074
 80224fc:	08029d75 	.word	0x08029d75
 8022500:	08029d82 	.word	0x08029d82
 8022504:	08029db0 	.word	0x08029db0

08022508 <_close_r>:
 8022508:	b538      	push	{r3, r4, r5, lr}
 802250a:	4d06      	ldr	r5, [pc, #24]	; (8022524 <_close_r+0x1c>)
 802250c:	2300      	movs	r3, #0
 802250e:	4604      	mov	r4, r0
 8022510:	4608      	mov	r0, r1
 8022512:	602b      	str	r3, [r5, #0]
 8022514:	f7e0 fa73 	bl	80029fe <_close>
 8022518:	1c43      	adds	r3, r0, #1
 802251a:	d102      	bne.n	8022522 <_close_r+0x1a>
 802251c:	682b      	ldr	r3, [r5, #0]
 802251e:	b103      	cbz	r3, 8022522 <_close_r+0x1a>
 8022520:	6023      	str	r3, [r4, #0]
 8022522:	bd38      	pop	{r3, r4, r5, pc}
 8022524:	2001b1ec 	.word	0x2001b1ec

08022528 <quorem>:
 8022528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802252c:	6903      	ldr	r3, [r0, #16]
 802252e:	690c      	ldr	r4, [r1, #16]
 8022530:	42a3      	cmp	r3, r4
 8022532:	4607      	mov	r7, r0
 8022534:	f2c0 8081 	blt.w	802263a <quorem+0x112>
 8022538:	3c01      	subs	r4, #1
 802253a:	f101 0814 	add.w	r8, r1, #20
 802253e:	f100 0514 	add.w	r5, r0, #20
 8022542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022546:	9301      	str	r3, [sp, #4]
 8022548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802254c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022550:	3301      	adds	r3, #1
 8022552:	429a      	cmp	r2, r3
 8022554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802255c:	fbb2 f6f3 	udiv	r6, r2, r3
 8022560:	d331      	bcc.n	80225c6 <quorem+0x9e>
 8022562:	f04f 0e00 	mov.w	lr, #0
 8022566:	4640      	mov	r0, r8
 8022568:	46ac      	mov	ip, r5
 802256a:	46f2      	mov	sl, lr
 802256c:	f850 2b04 	ldr.w	r2, [r0], #4
 8022570:	b293      	uxth	r3, r2
 8022572:	fb06 e303 	mla	r3, r6, r3, lr
 8022576:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802257a:	b29b      	uxth	r3, r3
 802257c:	ebaa 0303 	sub.w	r3, sl, r3
 8022580:	0c12      	lsrs	r2, r2, #16
 8022582:	f8dc a000 	ldr.w	sl, [ip]
 8022586:	fb06 e202 	mla	r2, r6, r2, lr
 802258a:	fa13 f38a 	uxtah	r3, r3, sl
 802258e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8022592:	fa1f fa82 	uxth.w	sl, r2
 8022596:	f8dc 2000 	ldr.w	r2, [ip]
 802259a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802259e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80225a2:	b29b      	uxth	r3, r3
 80225a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80225a8:	4581      	cmp	r9, r0
 80225aa:	f84c 3b04 	str.w	r3, [ip], #4
 80225ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80225b2:	d2db      	bcs.n	802256c <quorem+0x44>
 80225b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80225b8:	b92b      	cbnz	r3, 80225c6 <quorem+0x9e>
 80225ba:	9b01      	ldr	r3, [sp, #4]
 80225bc:	3b04      	subs	r3, #4
 80225be:	429d      	cmp	r5, r3
 80225c0:	461a      	mov	r2, r3
 80225c2:	d32e      	bcc.n	8022622 <quorem+0xfa>
 80225c4:	613c      	str	r4, [r7, #16]
 80225c6:	4638      	mov	r0, r7
 80225c8:	f001 fa04 	bl	80239d4 <__mcmp>
 80225cc:	2800      	cmp	r0, #0
 80225ce:	db24      	blt.n	802261a <quorem+0xf2>
 80225d0:	3601      	adds	r6, #1
 80225d2:	4628      	mov	r0, r5
 80225d4:	f04f 0c00 	mov.w	ip, #0
 80225d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80225dc:	f8d0 e000 	ldr.w	lr, [r0]
 80225e0:	b293      	uxth	r3, r2
 80225e2:	ebac 0303 	sub.w	r3, ip, r3
 80225e6:	0c12      	lsrs	r2, r2, #16
 80225e8:	fa13 f38e 	uxtah	r3, r3, lr
 80225ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80225f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80225f4:	b29b      	uxth	r3, r3
 80225f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80225fa:	45c1      	cmp	r9, r8
 80225fc:	f840 3b04 	str.w	r3, [r0], #4
 8022600:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022604:	d2e8      	bcs.n	80225d8 <quorem+0xb0>
 8022606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802260a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802260e:	b922      	cbnz	r2, 802261a <quorem+0xf2>
 8022610:	3b04      	subs	r3, #4
 8022612:	429d      	cmp	r5, r3
 8022614:	461a      	mov	r2, r3
 8022616:	d30a      	bcc.n	802262e <quorem+0x106>
 8022618:	613c      	str	r4, [r7, #16]
 802261a:	4630      	mov	r0, r6
 802261c:	b003      	add	sp, #12
 802261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022622:	6812      	ldr	r2, [r2, #0]
 8022624:	3b04      	subs	r3, #4
 8022626:	2a00      	cmp	r2, #0
 8022628:	d1cc      	bne.n	80225c4 <quorem+0x9c>
 802262a:	3c01      	subs	r4, #1
 802262c:	e7c7      	b.n	80225be <quorem+0x96>
 802262e:	6812      	ldr	r2, [r2, #0]
 8022630:	3b04      	subs	r3, #4
 8022632:	2a00      	cmp	r2, #0
 8022634:	d1f0      	bne.n	8022618 <quorem+0xf0>
 8022636:	3c01      	subs	r4, #1
 8022638:	e7eb      	b.n	8022612 <quorem+0xea>
 802263a:	2000      	movs	r0, #0
 802263c:	e7ee      	b.n	802261c <quorem+0xf4>
	...

08022640 <_dtoa_r>:
 8022640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022644:	ed2d 8b02 	vpush	{d8}
 8022648:	ec57 6b10 	vmov	r6, r7, d0
 802264c:	b095      	sub	sp, #84	; 0x54
 802264e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022650:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8022654:	9105      	str	r1, [sp, #20]
 8022656:	e9cd 6702 	strd	r6, r7, [sp, #8]
 802265a:	4604      	mov	r4, r0
 802265c:	9209      	str	r2, [sp, #36]	; 0x24
 802265e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022660:	b975      	cbnz	r5, 8022680 <_dtoa_r+0x40>
 8022662:	2010      	movs	r0, #16
 8022664:	f7fe fdc0 	bl	80211e8 <malloc>
 8022668:	4602      	mov	r2, r0
 802266a:	6260      	str	r0, [r4, #36]	; 0x24
 802266c:	b920      	cbnz	r0, 8022678 <_dtoa_r+0x38>
 802266e:	4bb2      	ldr	r3, [pc, #712]	; (8022938 <_dtoa_r+0x2f8>)
 8022670:	21ea      	movs	r1, #234	; 0xea
 8022672:	48b2      	ldr	r0, [pc, #712]	; (802293c <_dtoa_r+0x2fc>)
 8022674:	f7ff ff2a 	bl	80224cc <__assert_func>
 8022678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802267c:	6005      	str	r5, [r0, #0]
 802267e:	60c5      	str	r5, [r0, #12]
 8022680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022682:	6819      	ldr	r1, [r3, #0]
 8022684:	b151      	cbz	r1, 802269c <_dtoa_r+0x5c>
 8022686:	685a      	ldr	r2, [r3, #4]
 8022688:	604a      	str	r2, [r1, #4]
 802268a:	2301      	movs	r3, #1
 802268c:	4093      	lsls	r3, r2
 802268e:	608b      	str	r3, [r1, #8]
 8022690:	4620      	mov	r0, r4
 8022692:	f000 ff61 	bl	8023558 <_Bfree>
 8022696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022698:	2200      	movs	r2, #0
 802269a:	601a      	str	r2, [r3, #0]
 802269c:	1e3b      	subs	r3, r7, #0
 802269e:	bfb9      	ittee	lt
 80226a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80226a4:	9303      	strlt	r3, [sp, #12]
 80226a6:	2300      	movge	r3, #0
 80226a8:	f8c8 3000 	strge.w	r3, [r8]
 80226ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80226b0:	4ba3      	ldr	r3, [pc, #652]	; (8022940 <_dtoa_r+0x300>)
 80226b2:	bfbc      	itt	lt
 80226b4:	2201      	movlt	r2, #1
 80226b6:	f8c8 2000 	strlt.w	r2, [r8]
 80226ba:	ea33 0309 	bics.w	r3, r3, r9
 80226be:	d11b      	bne.n	80226f8 <_dtoa_r+0xb8>
 80226c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80226c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80226c6:	6013      	str	r3, [r2, #0]
 80226c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80226cc:	4333      	orrs	r3, r6
 80226ce:	f000 857a 	beq.w	80231c6 <_dtoa_r+0xb86>
 80226d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80226d4:	b963      	cbnz	r3, 80226f0 <_dtoa_r+0xb0>
 80226d6:	4b9b      	ldr	r3, [pc, #620]	; (8022944 <_dtoa_r+0x304>)
 80226d8:	e024      	b.n	8022724 <_dtoa_r+0xe4>
 80226da:	4b9b      	ldr	r3, [pc, #620]	; (8022948 <_dtoa_r+0x308>)
 80226dc:	9300      	str	r3, [sp, #0]
 80226de:	3308      	adds	r3, #8
 80226e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80226e2:	6013      	str	r3, [r2, #0]
 80226e4:	9800      	ldr	r0, [sp, #0]
 80226e6:	b015      	add	sp, #84	; 0x54
 80226e8:	ecbd 8b02 	vpop	{d8}
 80226ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226f0:	4b94      	ldr	r3, [pc, #592]	; (8022944 <_dtoa_r+0x304>)
 80226f2:	9300      	str	r3, [sp, #0]
 80226f4:	3303      	adds	r3, #3
 80226f6:	e7f3      	b.n	80226e0 <_dtoa_r+0xa0>
 80226f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80226fc:	2200      	movs	r2, #0
 80226fe:	ec51 0b17 	vmov	r0, r1, d7
 8022702:	2300      	movs	r3, #0
 8022704:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8022708:	f7de f9ee 	bl	8000ae8 <__aeabi_dcmpeq>
 802270c:	4680      	mov	r8, r0
 802270e:	b158      	cbz	r0, 8022728 <_dtoa_r+0xe8>
 8022710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022712:	2301      	movs	r3, #1
 8022714:	6013      	str	r3, [r2, #0]
 8022716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022718:	2b00      	cmp	r3, #0
 802271a:	f000 8551 	beq.w	80231c0 <_dtoa_r+0xb80>
 802271e:	488b      	ldr	r0, [pc, #556]	; (802294c <_dtoa_r+0x30c>)
 8022720:	6018      	str	r0, [r3, #0]
 8022722:	1e43      	subs	r3, r0, #1
 8022724:	9300      	str	r3, [sp, #0]
 8022726:	e7dd      	b.n	80226e4 <_dtoa_r+0xa4>
 8022728:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802272c:	aa12      	add	r2, sp, #72	; 0x48
 802272e:	a913      	add	r1, sp, #76	; 0x4c
 8022730:	4620      	mov	r0, r4
 8022732:	f001 f9f3 	bl	8023b1c <__d2b>
 8022736:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802273a:	4683      	mov	fp, r0
 802273c:	2d00      	cmp	r5, #0
 802273e:	d07c      	beq.n	802283a <_dtoa_r+0x1fa>
 8022740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022742:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8022746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802274a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 802274e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8022752:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8022756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802275a:	4b7d      	ldr	r3, [pc, #500]	; (8022950 <_dtoa_r+0x310>)
 802275c:	2200      	movs	r2, #0
 802275e:	4630      	mov	r0, r6
 8022760:	4639      	mov	r1, r7
 8022762:	f7dd fda1 	bl	80002a8 <__aeabi_dsub>
 8022766:	a36e      	add	r3, pc, #440	; (adr r3, 8022920 <_dtoa_r+0x2e0>)
 8022768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802276c:	f7dd ff54 	bl	8000618 <__aeabi_dmul>
 8022770:	a36d      	add	r3, pc, #436	; (adr r3, 8022928 <_dtoa_r+0x2e8>)
 8022772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022776:	f7dd fd99 	bl	80002ac <__adddf3>
 802277a:	4606      	mov	r6, r0
 802277c:	4628      	mov	r0, r5
 802277e:	460f      	mov	r7, r1
 8022780:	f7dd fee0 	bl	8000544 <__aeabi_i2d>
 8022784:	a36a      	add	r3, pc, #424	; (adr r3, 8022930 <_dtoa_r+0x2f0>)
 8022786:	e9d3 2300 	ldrd	r2, r3, [r3]
 802278a:	f7dd ff45 	bl	8000618 <__aeabi_dmul>
 802278e:	4602      	mov	r2, r0
 8022790:	460b      	mov	r3, r1
 8022792:	4630      	mov	r0, r6
 8022794:	4639      	mov	r1, r7
 8022796:	f7dd fd89 	bl	80002ac <__adddf3>
 802279a:	4606      	mov	r6, r0
 802279c:	460f      	mov	r7, r1
 802279e:	f7de f9eb 	bl	8000b78 <__aeabi_d2iz>
 80227a2:	2200      	movs	r2, #0
 80227a4:	4682      	mov	sl, r0
 80227a6:	2300      	movs	r3, #0
 80227a8:	4630      	mov	r0, r6
 80227aa:	4639      	mov	r1, r7
 80227ac:	f7de f9a6 	bl	8000afc <__aeabi_dcmplt>
 80227b0:	b148      	cbz	r0, 80227c6 <_dtoa_r+0x186>
 80227b2:	4650      	mov	r0, sl
 80227b4:	f7dd fec6 	bl	8000544 <__aeabi_i2d>
 80227b8:	4632      	mov	r2, r6
 80227ba:	463b      	mov	r3, r7
 80227bc:	f7de f994 	bl	8000ae8 <__aeabi_dcmpeq>
 80227c0:	b908      	cbnz	r0, 80227c6 <_dtoa_r+0x186>
 80227c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80227c6:	f1ba 0f16 	cmp.w	sl, #22
 80227ca:	d854      	bhi.n	8022876 <_dtoa_r+0x236>
 80227cc:	4b61      	ldr	r3, [pc, #388]	; (8022954 <_dtoa_r+0x314>)
 80227ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80227d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80227da:	f7de f98f 	bl	8000afc <__aeabi_dcmplt>
 80227de:	2800      	cmp	r0, #0
 80227e0:	d04b      	beq.n	802287a <_dtoa_r+0x23a>
 80227e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80227e6:	2300      	movs	r3, #0
 80227e8:	930e      	str	r3, [sp, #56]	; 0x38
 80227ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80227ec:	1b5d      	subs	r5, r3, r5
 80227ee:	1e6b      	subs	r3, r5, #1
 80227f0:	9304      	str	r3, [sp, #16]
 80227f2:	bf43      	ittte	mi
 80227f4:	2300      	movmi	r3, #0
 80227f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80227fa:	9304      	strmi	r3, [sp, #16]
 80227fc:	f04f 0800 	movpl.w	r8, #0
 8022800:	f1ba 0f00 	cmp.w	sl, #0
 8022804:	db3b      	blt.n	802287e <_dtoa_r+0x23e>
 8022806:	9b04      	ldr	r3, [sp, #16]
 8022808:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802280c:	4453      	add	r3, sl
 802280e:	9304      	str	r3, [sp, #16]
 8022810:	2300      	movs	r3, #0
 8022812:	9306      	str	r3, [sp, #24]
 8022814:	9b05      	ldr	r3, [sp, #20]
 8022816:	2b09      	cmp	r3, #9
 8022818:	d869      	bhi.n	80228ee <_dtoa_r+0x2ae>
 802281a:	2b05      	cmp	r3, #5
 802281c:	bfc4      	itt	gt
 802281e:	3b04      	subgt	r3, #4
 8022820:	9305      	strgt	r3, [sp, #20]
 8022822:	9b05      	ldr	r3, [sp, #20]
 8022824:	f1a3 0302 	sub.w	r3, r3, #2
 8022828:	bfcc      	ite	gt
 802282a:	2500      	movgt	r5, #0
 802282c:	2501      	movle	r5, #1
 802282e:	2b03      	cmp	r3, #3
 8022830:	d869      	bhi.n	8022906 <_dtoa_r+0x2c6>
 8022832:	e8df f003 	tbb	[pc, r3]
 8022836:	4e2c      	.short	0x4e2c
 8022838:	5a4c      	.short	0x5a4c
 802283a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 802283e:	441d      	add	r5, r3
 8022840:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8022844:	2b20      	cmp	r3, #32
 8022846:	bfc1      	itttt	gt
 8022848:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802284c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8022850:	fa09 f303 	lslgt.w	r3, r9, r3
 8022854:	fa26 f000 	lsrgt.w	r0, r6, r0
 8022858:	bfda      	itte	le
 802285a:	f1c3 0320 	rsble	r3, r3, #32
 802285e:	fa06 f003 	lslle.w	r0, r6, r3
 8022862:	4318      	orrgt	r0, r3
 8022864:	f7dd fe5e 	bl	8000524 <__aeabi_ui2d>
 8022868:	2301      	movs	r3, #1
 802286a:	4606      	mov	r6, r0
 802286c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8022870:	3d01      	subs	r5, #1
 8022872:	9310      	str	r3, [sp, #64]	; 0x40
 8022874:	e771      	b.n	802275a <_dtoa_r+0x11a>
 8022876:	2301      	movs	r3, #1
 8022878:	e7b6      	b.n	80227e8 <_dtoa_r+0x1a8>
 802287a:	900e      	str	r0, [sp, #56]	; 0x38
 802287c:	e7b5      	b.n	80227ea <_dtoa_r+0x1aa>
 802287e:	f1ca 0300 	rsb	r3, sl, #0
 8022882:	9306      	str	r3, [sp, #24]
 8022884:	2300      	movs	r3, #0
 8022886:	eba8 080a 	sub.w	r8, r8, sl
 802288a:	930d      	str	r3, [sp, #52]	; 0x34
 802288c:	e7c2      	b.n	8022814 <_dtoa_r+0x1d4>
 802288e:	2300      	movs	r3, #0
 8022890:	9308      	str	r3, [sp, #32]
 8022892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022894:	2b00      	cmp	r3, #0
 8022896:	dc39      	bgt.n	802290c <_dtoa_r+0x2cc>
 8022898:	f04f 0901 	mov.w	r9, #1
 802289c:	f8cd 9004 	str.w	r9, [sp, #4]
 80228a0:	464b      	mov	r3, r9
 80228a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80228a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80228a8:	2200      	movs	r2, #0
 80228aa:	6042      	str	r2, [r0, #4]
 80228ac:	2204      	movs	r2, #4
 80228ae:	f102 0614 	add.w	r6, r2, #20
 80228b2:	429e      	cmp	r6, r3
 80228b4:	6841      	ldr	r1, [r0, #4]
 80228b6:	d92f      	bls.n	8022918 <_dtoa_r+0x2d8>
 80228b8:	4620      	mov	r0, r4
 80228ba:	f000 fe0d 	bl	80234d8 <_Balloc>
 80228be:	9000      	str	r0, [sp, #0]
 80228c0:	2800      	cmp	r0, #0
 80228c2:	d14b      	bne.n	802295c <_dtoa_r+0x31c>
 80228c4:	4b24      	ldr	r3, [pc, #144]	; (8022958 <_dtoa_r+0x318>)
 80228c6:	4602      	mov	r2, r0
 80228c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80228cc:	e6d1      	b.n	8022672 <_dtoa_r+0x32>
 80228ce:	2301      	movs	r3, #1
 80228d0:	e7de      	b.n	8022890 <_dtoa_r+0x250>
 80228d2:	2300      	movs	r3, #0
 80228d4:	9308      	str	r3, [sp, #32]
 80228d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228d8:	eb0a 0903 	add.w	r9, sl, r3
 80228dc:	f109 0301 	add.w	r3, r9, #1
 80228e0:	2b01      	cmp	r3, #1
 80228e2:	9301      	str	r3, [sp, #4]
 80228e4:	bfb8      	it	lt
 80228e6:	2301      	movlt	r3, #1
 80228e8:	e7dd      	b.n	80228a6 <_dtoa_r+0x266>
 80228ea:	2301      	movs	r3, #1
 80228ec:	e7f2      	b.n	80228d4 <_dtoa_r+0x294>
 80228ee:	2501      	movs	r5, #1
 80228f0:	2300      	movs	r3, #0
 80228f2:	9305      	str	r3, [sp, #20]
 80228f4:	9508      	str	r5, [sp, #32]
 80228f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80228fa:	2200      	movs	r2, #0
 80228fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8022900:	2312      	movs	r3, #18
 8022902:	9209      	str	r2, [sp, #36]	; 0x24
 8022904:	e7cf      	b.n	80228a6 <_dtoa_r+0x266>
 8022906:	2301      	movs	r3, #1
 8022908:	9308      	str	r3, [sp, #32]
 802290a:	e7f4      	b.n	80228f6 <_dtoa_r+0x2b6>
 802290c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022910:	f8cd 9004 	str.w	r9, [sp, #4]
 8022914:	464b      	mov	r3, r9
 8022916:	e7c6      	b.n	80228a6 <_dtoa_r+0x266>
 8022918:	3101      	adds	r1, #1
 802291a:	6041      	str	r1, [r0, #4]
 802291c:	0052      	lsls	r2, r2, #1
 802291e:	e7c6      	b.n	80228ae <_dtoa_r+0x26e>
 8022920:	636f4361 	.word	0x636f4361
 8022924:	3fd287a7 	.word	0x3fd287a7
 8022928:	8b60c8b3 	.word	0x8b60c8b3
 802292c:	3fc68a28 	.word	0x3fc68a28
 8022930:	509f79fb 	.word	0x509f79fb
 8022934:	3fd34413 	.word	0x3fd34413
 8022938:	08029c9e 	.word	0x08029c9e
 802293c:	08029dbe 	.word	0x08029dbe
 8022940:	7ff00000 	.word	0x7ff00000
 8022944:	08029dba 	.word	0x08029dba
 8022948:	08029db1 	.word	0x08029db1
 802294c:	08029fa2 	.word	0x08029fa2
 8022950:	3ff80000 	.word	0x3ff80000
 8022954:	08029eb8 	.word	0x08029eb8
 8022958:	08029e1d 	.word	0x08029e1d
 802295c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802295e:	9a00      	ldr	r2, [sp, #0]
 8022960:	601a      	str	r2, [r3, #0]
 8022962:	9b01      	ldr	r3, [sp, #4]
 8022964:	2b0e      	cmp	r3, #14
 8022966:	f200 80ad 	bhi.w	8022ac4 <_dtoa_r+0x484>
 802296a:	2d00      	cmp	r5, #0
 802296c:	f000 80aa 	beq.w	8022ac4 <_dtoa_r+0x484>
 8022970:	f1ba 0f00 	cmp.w	sl, #0
 8022974:	dd36      	ble.n	80229e4 <_dtoa_r+0x3a4>
 8022976:	4ac3      	ldr	r2, [pc, #780]	; (8022c84 <_dtoa_r+0x644>)
 8022978:	f00a 030f 	and.w	r3, sl, #15
 802297c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022980:	ed93 7b00 	vldr	d7, [r3]
 8022984:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8022988:	ea4f 172a 	mov.w	r7, sl, asr #4
 802298c:	eeb0 8a47 	vmov.f32	s16, s14
 8022990:	eef0 8a67 	vmov.f32	s17, s15
 8022994:	d016      	beq.n	80229c4 <_dtoa_r+0x384>
 8022996:	4bbc      	ldr	r3, [pc, #752]	; (8022c88 <_dtoa_r+0x648>)
 8022998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802299c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80229a0:	f7dd ff64 	bl	800086c <__aeabi_ddiv>
 80229a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80229a8:	f007 070f 	and.w	r7, r7, #15
 80229ac:	2503      	movs	r5, #3
 80229ae:	4eb6      	ldr	r6, [pc, #728]	; (8022c88 <_dtoa_r+0x648>)
 80229b0:	b957      	cbnz	r7, 80229c8 <_dtoa_r+0x388>
 80229b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80229b6:	ec53 2b18 	vmov	r2, r3, d8
 80229ba:	f7dd ff57 	bl	800086c <__aeabi_ddiv>
 80229be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80229c2:	e029      	b.n	8022a18 <_dtoa_r+0x3d8>
 80229c4:	2502      	movs	r5, #2
 80229c6:	e7f2      	b.n	80229ae <_dtoa_r+0x36e>
 80229c8:	07f9      	lsls	r1, r7, #31
 80229ca:	d508      	bpl.n	80229de <_dtoa_r+0x39e>
 80229cc:	ec51 0b18 	vmov	r0, r1, d8
 80229d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80229d4:	f7dd fe20 	bl	8000618 <__aeabi_dmul>
 80229d8:	ec41 0b18 	vmov	d8, r0, r1
 80229dc:	3501      	adds	r5, #1
 80229de:	107f      	asrs	r7, r7, #1
 80229e0:	3608      	adds	r6, #8
 80229e2:	e7e5      	b.n	80229b0 <_dtoa_r+0x370>
 80229e4:	f000 80a6 	beq.w	8022b34 <_dtoa_r+0x4f4>
 80229e8:	f1ca 0600 	rsb	r6, sl, #0
 80229ec:	4ba5      	ldr	r3, [pc, #660]	; (8022c84 <_dtoa_r+0x644>)
 80229ee:	4fa6      	ldr	r7, [pc, #664]	; (8022c88 <_dtoa_r+0x648>)
 80229f0:	f006 020f 	and.w	r2, r6, #15
 80229f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80229f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8022a00:	f7dd fe0a 	bl	8000618 <__aeabi_dmul>
 8022a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a08:	1136      	asrs	r6, r6, #4
 8022a0a:	2300      	movs	r3, #0
 8022a0c:	2502      	movs	r5, #2
 8022a0e:	2e00      	cmp	r6, #0
 8022a10:	f040 8085 	bne.w	8022b1e <_dtoa_r+0x4de>
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	d1d2      	bne.n	80229be <_dtoa_r+0x37e>
 8022a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	f000 808c 	beq.w	8022b38 <_dtoa_r+0x4f8>
 8022a20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022a24:	4b99      	ldr	r3, [pc, #612]	; (8022c8c <_dtoa_r+0x64c>)
 8022a26:	2200      	movs	r2, #0
 8022a28:	4630      	mov	r0, r6
 8022a2a:	4639      	mov	r1, r7
 8022a2c:	f7de f866 	bl	8000afc <__aeabi_dcmplt>
 8022a30:	2800      	cmp	r0, #0
 8022a32:	f000 8081 	beq.w	8022b38 <_dtoa_r+0x4f8>
 8022a36:	9b01      	ldr	r3, [sp, #4]
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	d07d      	beq.n	8022b38 <_dtoa_r+0x4f8>
 8022a3c:	f1b9 0f00 	cmp.w	r9, #0
 8022a40:	dd3c      	ble.n	8022abc <_dtoa_r+0x47c>
 8022a42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8022a46:	9307      	str	r3, [sp, #28]
 8022a48:	2200      	movs	r2, #0
 8022a4a:	4b91      	ldr	r3, [pc, #580]	; (8022c90 <_dtoa_r+0x650>)
 8022a4c:	4630      	mov	r0, r6
 8022a4e:	4639      	mov	r1, r7
 8022a50:	f7dd fde2 	bl	8000618 <__aeabi_dmul>
 8022a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a58:	3501      	adds	r5, #1
 8022a5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8022a5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022a62:	4628      	mov	r0, r5
 8022a64:	f7dd fd6e 	bl	8000544 <__aeabi_i2d>
 8022a68:	4632      	mov	r2, r6
 8022a6a:	463b      	mov	r3, r7
 8022a6c:	f7dd fdd4 	bl	8000618 <__aeabi_dmul>
 8022a70:	4b88      	ldr	r3, [pc, #544]	; (8022c94 <_dtoa_r+0x654>)
 8022a72:	2200      	movs	r2, #0
 8022a74:	f7dd fc1a 	bl	80002ac <__adddf3>
 8022a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8022a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a80:	9303      	str	r3, [sp, #12]
 8022a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a84:	2b00      	cmp	r3, #0
 8022a86:	d15c      	bne.n	8022b42 <_dtoa_r+0x502>
 8022a88:	4b83      	ldr	r3, [pc, #524]	; (8022c98 <_dtoa_r+0x658>)
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	4630      	mov	r0, r6
 8022a8e:	4639      	mov	r1, r7
 8022a90:	f7dd fc0a 	bl	80002a8 <__aeabi_dsub>
 8022a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022a98:	4606      	mov	r6, r0
 8022a9a:	460f      	mov	r7, r1
 8022a9c:	f7de f84c 	bl	8000b38 <__aeabi_dcmpgt>
 8022aa0:	2800      	cmp	r0, #0
 8022aa2:	f040 8296 	bne.w	8022fd2 <_dtoa_r+0x992>
 8022aa6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8022aaa:	4630      	mov	r0, r6
 8022aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022ab0:	4639      	mov	r1, r7
 8022ab2:	f7de f823 	bl	8000afc <__aeabi_dcmplt>
 8022ab6:	2800      	cmp	r0, #0
 8022ab8:	f040 8288 	bne.w	8022fcc <_dtoa_r+0x98c>
 8022abc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022ac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	f2c0 8158 	blt.w	8022d7c <_dtoa_r+0x73c>
 8022acc:	f1ba 0f0e 	cmp.w	sl, #14
 8022ad0:	f300 8154 	bgt.w	8022d7c <_dtoa_r+0x73c>
 8022ad4:	4b6b      	ldr	r3, [pc, #428]	; (8022c84 <_dtoa_r+0x644>)
 8022ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8022ada:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	f280 80e3 	bge.w	8022cac <_dtoa_r+0x66c>
 8022ae6:	9b01      	ldr	r3, [sp, #4]
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	f300 80df 	bgt.w	8022cac <_dtoa_r+0x66c>
 8022aee:	f040 826d 	bne.w	8022fcc <_dtoa_r+0x98c>
 8022af2:	4b69      	ldr	r3, [pc, #420]	; (8022c98 <_dtoa_r+0x658>)
 8022af4:	2200      	movs	r2, #0
 8022af6:	4640      	mov	r0, r8
 8022af8:	4649      	mov	r1, r9
 8022afa:	f7dd fd8d 	bl	8000618 <__aeabi_dmul>
 8022afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022b02:	f7de f80f 	bl	8000b24 <__aeabi_dcmpge>
 8022b06:	9e01      	ldr	r6, [sp, #4]
 8022b08:	4637      	mov	r7, r6
 8022b0a:	2800      	cmp	r0, #0
 8022b0c:	f040 8243 	bne.w	8022f96 <_dtoa_r+0x956>
 8022b10:	9d00      	ldr	r5, [sp, #0]
 8022b12:	2331      	movs	r3, #49	; 0x31
 8022b14:	f805 3b01 	strb.w	r3, [r5], #1
 8022b18:	f10a 0a01 	add.w	sl, sl, #1
 8022b1c:	e23f      	b.n	8022f9e <_dtoa_r+0x95e>
 8022b1e:	07f2      	lsls	r2, r6, #31
 8022b20:	d505      	bpl.n	8022b2e <_dtoa_r+0x4ee>
 8022b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b26:	f7dd fd77 	bl	8000618 <__aeabi_dmul>
 8022b2a:	3501      	adds	r5, #1
 8022b2c:	2301      	movs	r3, #1
 8022b2e:	1076      	asrs	r6, r6, #1
 8022b30:	3708      	adds	r7, #8
 8022b32:	e76c      	b.n	8022a0e <_dtoa_r+0x3ce>
 8022b34:	2502      	movs	r5, #2
 8022b36:	e76f      	b.n	8022a18 <_dtoa_r+0x3d8>
 8022b38:	9b01      	ldr	r3, [sp, #4]
 8022b3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8022b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8022b40:	e78d      	b.n	8022a5e <_dtoa_r+0x41e>
 8022b42:	9900      	ldr	r1, [sp, #0]
 8022b44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022b48:	4b4e      	ldr	r3, [pc, #312]	; (8022c84 <_dtoa_r+0x644>)
 8022b4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022b4e:	4401      	add	r1, r0
 8022b50:	9102      	str	r1, [sp, #8]
 8022b52:	9908      	ldr	r1, [sp, #32]
 8022b54:	eeb0 8a47 	vmov.f32	s16, s14
 8022b58:	eef0 8a67 	vmov.f32	s17, s15
 8022b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022b60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8022b64:	2900      	cmp	r1, #0
 8022b66:	d045      	beq.n	8022bf4 <_dtoa_r+0x5b4>
 8022b68:	494c      	ldr	r1, [pc, #304]	; (8022c9c <_dtoa_r+0x65c>)
 8022b6a:	2000      	movs	r0, #0
 8022b6c:	f7dd fe7e 	bl	800086c <__aeabi_ddiv>
 8022b70:	ec53 2b18 	vmov	r2, r3, d8
 8022b74:	f7dd fb98 	bl	80002a8 <__aeabi_dsub>
 8022b78:	9d00      	ldr	r5, [sp, #0]
 8022b7a:	ec41 0b18 	vmov	d8, r0, r1
 8022b7e:	4639      	mov	r1, r7
 8022b80:	4630      	mov	r0, r6
 8022b82:	f7dd fff9 	bl	8000b78 <__aeabi_d2iz>
 8022b86:	900c      	str	r0, [sp, #48]	; 0x30
 8022b88:	f7dd fcdc 	bl	8000544 <__aeabi_i2d>
 8022b8c:	4602      	mov	r2, r0
 8022b8e:	460b      	mov	r3, r1
 8022b90:	4630      	mov	r0, r6
 8022b92:	4639      	mov	r1, r7
 8022b94:	f7dd fb88 	bl	80002a8 <__aeabi_dsub>
 8022b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b9a:	3330      	adds	r3, #48	; 0x30
 8022b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8022ba0:	ec53 2b18 	vmov	r2, r3, d8
 8022ba4:	4606      	mov	r6, r0
 8022ba6:	460f      	mov	r7, r1
 8022ba8:	f7dd ffa8 	bl	8000afc <__aeabi_dcmplt>
 8022bac:	2800      	cmp	r0, #0
 8022bae:	d165      	bne.n	8022c7c <_dtoa_r+0x63c>
 8022bb0:	4632      	mov	r2, r6
 8022bb2:	463b      	mov	r3, r7
 8022bb4:	4935      	ldr	r1, [pc, #212]	; (8022c8c <_dtoa_r+0x64c>)
 8022bb6:	2000      	movs	r0, #0
 8022bb8:	f7dd fb76 	bl	80002a8 <__aeabi_dsub>
 8022bbc:	ec53 2b18 	vmov	r2, r3, d8
 8022bc0:	f7dd ff9c 	bl	8000afc <__aeabi_dcmplt>
 8022bc4:	2800      	cmp	r0, #0
 8022bc6:	f040 80b9 	bne.w	8022d3c <_dtoa_r+0x6fc>
 8022bca:	9b02      	ldr	r3, [sp, #8]
 8022bcc:	429d      	cmp	r5, r3
 8022bce:	f43f af75 	beq.w	8022abc <_dtoa_r+0x47c>
 8022bd2:	4b2f      	ldr	r3, [pc, #188]	; (8022c90 <_dtoa_r+0x650>)
 8022bd4:	ec51 0b18 	vmov	r0, r1, d8
 8022bd8:	2200      	movs	r2, #0
 8022bda:	f7dd fd1d 	bl	8000618 <__aeabi_dmul>
 8022bde:	4b2c      	ldr	r3, [pc, #176]	; (8022c90 <_dtoa_r+0x650>)
 8022be0:	ec41 0b18 	vmov	d8, r0, r1
 8022be4:	2200      	movs	r2, #0
 8022be6:	4630      	mov	r0, r6
 8022be8:	4639      	mov	r1, r7
 8022bea:	f7dd fd15 	bl	8000618 <__aeabi_dmul>
 8022bee:	4606      	mov	r6, r0
 8022bf0:	460f      	mov	r7, r1
 8022bf2:	e7c4      	b.n	8022b7e <_dtoa_r+0x53e>
 8022bf4:	ec51 0b17 	vmov	r0, r1, d7
 8022bf8:	f7dd fd0e 	bl	8000618 <__aeabi_dmul>
 8022bfc:	9b02      	ldr	r3, [sp, #8]
 8022bfe:	9d00      	ldr	r5, [sp, #0]
 8022c00:	930c      	str	r3, [sp, #48]	; 0x30
 8022c02:	ec41 0b18 	vmov	d8, r0, r1
 8022c06:	4639      	mov	r1, r7
 8022c08:	4630      	mov	r0, r6
 8022c0a:	f7dd ffb5 	bl	8000b78 <__aeabi_d2iz>
 8022c0e:	9011      	str	r0, [sp, #68]	; 0x44
 8022c10:	f7dd fc98 	bl	8000544 <__aeabi_i2d>
 8022c14:	4602      	mov	r2, r0
 8022c16:	460b      	mov	r3, r1
 8022c18:	4630      	mov	r0, r6
 8022c1a:	4639      	mov	r1, r7
 8022c1c:	f7dd fb44 	bl	80002a8 <__aeabi_dsub>
 8022c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022c22:	3330      	adds	r3, #48	; 0x30
 8022c24:	f805 3b01 	strb.w	r3, [r5], #1
 8022c28:	9b02      	ldr	r3, [sp, #8]
 8022c2a:	429d      	cmp	r5, r3
 8022c2c:	4606      	mov	r6, r0
 8022c2e:	460f      	mov	r7, r1
 8022c30:	f04f 0200 	mov.w	r2, #0
 8022c34:	d134      	bne.n	8022ca0 <_dtoa_r+0x660>
 8022c36:	4b19      	ldr	r3, [pc, #100]	; (8022c9c <_dtoa_r+0x65c>)
 8022c38:	ec51 0b18 	vmov	r0, r1, d8
 8022c3c:	f7dd fb36 	bl	80002ac <__adddf3>
 8022c40:	4602      	mov	r2, r0
 8022c42:	460b      	mov	r3, r1
 8022c44:	4630      	mov	r0, r6
 8022c46:	4639      	mov	r1, r7
 8022c48:	f7dd ff76 	bl	8000b38 <__aeabi_dcmpgt>
 8022c4c:	2800      	cmp	r0, #0
 8022c4e:	d175      	bne.n	8022d3c <_dtoa_r+0x6fc>
 8022c50:	ec53 2b18 	vmov	r2, r3, d8
 8022c54:	4911      	ldr	r1, [pc, #68]	; (8022c9c <_dtoa_r+0x65c>)
 8022c56:	2000      	movs	r0, #0
 8022c58:	f7dd fb26 	bl	80002a8 <__aeabi_dsub>
 8022c5c:	4602      	mov	r2, r0
 8022c5e:	460b      	mov	r3, r1
 8022c60:	4630      	mov	r0, r6
 8022c62:	4639      	mov	r1, r7
 8022c64:	f7dd ff4a 	bl	8000afc <__aeabi_dcmplt>
 8022c68:	2800      	cmp	r0, #0
 8022c6a:	f43f af27 	beq.w	8022abc <_dtoa_r+0x47c>
 8022c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022c70:	1e6b      	subs	r3, r5, #1
 8022c72:	930c      	str	r3, [sp, #48]	; 0x30
 8022c74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022c78:	2b30      	cmp	r3, #48	; 0x30
 8022c7a:	d0f8      	beq.n	8022c6e <_dtoa_r+0x62e>
 8022c7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022c80:	e04a      	b.n	8022d18 <_dtoa_r+0x6d8>
 8022c82:	bf00      	nop
 8022c84:	08029eb8 	.word	0x08029eb8
 8022c88:	08029e90 	.word	0x08029e90
 8022c8c:	3ff00000 	.word	0x3ff00000
 8022c90:	40240000 	.word	0x40240000
 8022c94:	401c0000 	.word	0x401c0000
 8022c98:	40140000 	.word	0x40140000
 8022c9c:	3fe00000 	.word	0x3fe00000
 8022ca0:	4baf      	ldr	r3, [pc, #700]	; (8022f60 <_dtoa_r+0x920>)
 8022ca2:	f7dd fcb9 	bl	8000618 <__aeabi_dmul>
 8022ca6:	4606      	mov	r6, r0
 8022ca8:	460f      	mov	r7, r1
 8022caa:	e7ac      	b.n	8022c06 <_dtoa_r+0x5c6>
 8022cac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022cb0:	9d00      	ldr	r5, [sp, #0]
 8022cb2:	4642      	mov	r2, r8
 8022cb4:	464b      	mov	r3, r9
 8022cb6:	4630      	mov	r0, r6
 8022cb8:	4639      	mov	r1, r7
 8022cba:	f7dd fdd7 	bl	800086c <__aeabi_ddiv>
 8022cbe:	f7dd ff5b 	bl	8000b78 <__aeabi_d2iz>
 8022cc2:	9002      	str	r0, [sp, #8]
 8022cc4:	f7dd fc3e 	bl	8000544 <__aeabi_i2d>
 8022cc8:	4642      	mov	r2, r8
 8022cca:	464b      	mov	r3, r9
 8022ccc:	f7dd fca4 	bl	8000618 <__aeabi_dmul>
 8022cd0:	4602      	mov	r2, r0
 8022cd2:	460b      	mov	r3, r1
 8022cd4:	4630      	mov	r0, r6
 8022cd6:	4639      	mov	r1, r7
 8022cd8:	f7dd fae6 	bl	80002a8 <__aeabi_dsub>
 8022cdc:	9e02      	ldr	r6, [sp, #8]
 8022cde:	9f01      	ldr	r7, [sp, #4]
 8022ce0:	3630      	adds	r6, #48	; 0x30
 8022ce2:	f805 6b01 	strb.w	r6, [r5], #1
 8022ce6:	9e00      	ldr	r6, [sp, #0]
 8022ce8:	1bae      	subs	r6, r5, r6
 8022cea:	42b7      	cmp	r7, r6
 8022cec:	4602      	mov	r2, r0
 8022cee:	460b      	mov	r3, r1
 8022cf0:	d137      	bne.n	8022d62 <_dtoa_r+0x722>
 8022cf2:	f7dd fadb 	bl	80002ac <__adddf3>
 8022cf6:	4642      	mov	r2, r8
 8022cf8:	464b      	mov	r3, r9
 8022cfa:	4606      	mov	r6, r0
 8022cfc:	460f      	mov	r7, r1
 8022cfe:	f7dd ff1b 	bl	8000b38 <__aeabi_dcmpgt>
 8022d02:	b9c8      	cbnz	r0, 8022d38 <_dtoa_r+0x6f8>
 8022d04:	4642      	mov	r2, r8
 8022d06:	464b      	mov	r3, r9
 8022d08:	4630      	mov	r0, r6
 8022d0a:	4639      	mov	r1, r7
 8022d0c:	f7dd feec 	bl	8000ae8 <__aeabi_dcmpeq>
 8022d10:	b110      	cbz	r0, 8022d18 <_dtoa_r+0x6d8>
 8022d12:	9b02      	ldr	r3, [sp, #8]
 8022d14:	07d9      	lsls	r1, r3, #31
 8022d16:	d40f      	bmi.n	8022d38 <_dtoa_r+0x6f8>
 8022d18:	4620      	mov	r0, r4
 8022d1a:	4659      	mov	r1, fp
 8022d1c:	f000 fc1c 	bl	8023558 <_Bfree>
 8022d20:	2300      	movs	r3, #0
 8022d22:	702b      	strb	r3, [r5, #0]
 8022d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d26:	f10a 0001 	add.w	r0, sl, #1
 8022d2a:	6018      	str	r0, [r3, #0]
 8022d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	f43f acd8 	beq.w	80226e4 <_dtoa_r+0xa4>
 8022d34:	601d      	str	r5, [r3, #0]
 8022d36:	e4d5      	b.n	80226e4 <_dtoa_r+0xa4>
 8022d38:	f8cd a01c 	str.w	sl, [sp, #28]
 8022d3c:	462b      	mov	r3, r5
 8022d3e:	461d      	mov	r5, r3
 8022d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022d44:	2a39      	cmp	r2, #57	; 0x39
 8022d46:	d108      	bne.n	8022d5a <_dtoa_r+0x71a>
 8022d48:	9a00      	ldr	r2, [sp, #0]
 8022d4a:	429a      	cmp	r2, r3
 8022d4c:	d1f7      	bne.n	8022d3e <_dtoa_r+0x6fe>
 8022d4e:	9a07      	ldr	r2, [sp, #28]
 8022d50:	9900      	ldr	r1, [sp, #0]
 8022d52:	3201      	adds	r2, #1
 8022d54:	9207      	str	r2, [sp, #28]
 8022d56:	2230      	movs	r2, #48	; 0x30
 8022d58:	700a      	strb	r2, [r1, #0]
 8022d5a:	781a      	ldrb	r2, [r3, #0]
 8022d5c:	3201      	adds	r2, #1
 8022d5e:	701a      	strb	r2, [r3, #0]
 8022d60:	e78c      	b.n	8022c7c <_dtoa_r+0x63c>
 8022d62:	4b7f      	ldr	r3, [pc, #508]	; (8022f60 <_dtoa_r+0x920>)
 8022d64:	2200      	movs	r2, #0
 8022d66:	f7dd fc57 	bl	8000618 <__aeabi_dmul>
 8022d6a:	2200      	movs	r2, #0
 8022d6c:	2300      	movs	r3, #0
 8022d6e:	4606      	mov	r6, r0
 8022d70:	460f      	mov	r7, r1
 8022d72:	f7dd feb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	d09b      	beq.n	8022cb2 <_dtoa_r+0x672>
 8022d7a:	e7cd      	b.n	8022d18 <_dtoa_r+0x6d8>
 8022d7c:	9a08      	ldr	r2, [sp, #32]
 8022d7e:	2a00      	cmp	r2, #0
 8022d80:	f000 80c4 	beq.w	8022f0c <_dtoa_r+0x8cc>
 8022d84:	9a05      	ldr	r2, [sp, #20]
 8022d86:	2a01      	cmp	r2, #1
 8022d88:	f300 80a8 	bgt.w	8022edc <_dtoa_r+0x89c>
 8022d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d8e:	2a00      	cmp	r2, #0
 8022d90:	f000 80a0 	beq.w	8022ed4 <_dtoa_r+0x894>
 8022d94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022d98:	9e06      	ldr	r6, [sp, #24]
 8022d9a:	4645      	mov	r5, r8
 8022d9c:	9a04      	ldr	r2, [sp, #16]
 8022d9e:	2101      	movs	r1, #1
 8022da0:	441a      	add	r2, r3
 8022da2:	4620      	mov	r0, r4
 8022da4:	4498      	add	r8, r3
 8022da6:	9204      	str	r2, [sp, #16]
 8022da8:	f000 fc92 	bl	80236d0 <__i2b>
 8022dac:	4607      	mov	r7, r0
 8022dae:	2d00      	cmp	r5, #0
 8022db0:	dd0b      	ble.n	8022dca <_dtoa_r+0x78a>
 8022db2:	9b04      	ldr	r3, [sp, #16]
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	dd08      	ble.n	8022dca <_dtoa_r+0x78a>
 8022db8:	42ab      	cmp	r3, r5
 8022dba:	9a04      	ldr	r2, [sp, #16]
 8022dbc:	bfa8      	it	ge
 8022dbe:	462b      	movge	r3, r5
 8022dc0:	eba8 0803 	sub.w	r8, r8, r3
 8022dc4:	1aed      	subs	r5, r5, r3
 8022dc6:	1ad3      	subs	r3, r2, r3
 8022dc8:	9304      	str	r3, [sp, #16]
 8022dca:	9b06      	ldr	r3, [sp, #24]
 8022dcc:	b1fb      	cbz	r3, 8022e0e <_dtoa_r+0x7ce>
 8022dce:	9b08      	ldr	r3, [sp, #32]
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	f000 809f 	beq.w	8022f14 <_dtoa_r+0x8d4>
 8022dd6:	2e00      	cmp	r6, #0
 8022dd8:	dd11      	ble.n	8022dfe <_dtoa_r+0x7be>
 8022dda:	4639      	mov	r1, r7
 8022ddc:	4632      	mov	r2, r6
 8022dde:	4620      	mov	r0, r4
 8022de0:	f000 fd32 	bl	8023848 <__pow5mult>
 8022de4:	465a      	mov	r2, fp
 8022de6:	4601      	mov	r1, r0
 8022de8:	4607      	mov	r7, r0
 8022dea:	4620      	mov	r0, r4
 8022dec:	f000 fc86 	bl	80236fc <__multiply>
 8022df0:	4659      	mov	r1, fp
 8022df2:	9007      	str	r0, [sp, #28]
 8022df4:	4620      	mov	r0, r4
 8022df6:	f000 fbaf 	bl	8023558 <_Bfree>
 8022dfa:	9b07      	ldr	r3, [sp, #28]
 8022dfc:	469b      	mov	fp, r3
 8022dfe:	9b06      	ldr	r3, [sp, #24]
 8022e00:	1b9a      	subs	r2, r3, r6
 8022e02:	d004      	beq.n	8022e0e <_dtoa_r+0x7ce>
 8022e04:	4659      	mov	r1, fp
 8022e06:	4620      	mov	r0, r4
 8022e08:	f000 fd1e 	bl	8023848 <__pow5mult>
 8022e0c:	4683      	mov	fp, r0
 8022e0e:	2101      	movs	r1, #1
 8022e10:	4620      	mov	r0, r4
 8022e12:	f000 fc5d 	bl	80236d0 <__i2b>
 8022e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e18:	2b00      	cmp	r3, #0
 8022e1a:	4606      	mov	r6, r0
 8022e1c:	dd7c      	ble.n	8022f18 <_dtoa_r+0x8d8>
 8022e1e:	461a      	mov	r2, r3
 8022e20:	4601      	mov	r1, r0
 8022e22:	4620      	mov	r0, r4
 8022e24:	f000 fd10 	bl	8023848 <__pow5mult>
 8022e28:	9b05      	ldr	r3, [sp, #20]
 8022e2a:	2b01      	cmp	r3, #1
 8022e2c:	4606      	mov	r6, r0
 8022e2e:	dd76      	ble.n	8022f1e <_dtoa_r+0x8de>
 8022e30:	2300      	movs	r3, #0
 8022e32:	9306      	str	r3, [sp, #24]
 8022e34:	6933      	ldr	r3, [r6, #16]
 8022e36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022e3a:	6918      	ldr	r0, [r3, #16]
 8022e3c:	f000 fbf8 	bl	8023630 <__hi0bits>
 8022e40:	f1c0 0020 	rsb	r0, r0, #32
 8022e44:	9b04      	ldr	r3, [sp, #16]
 8022e46:	4418      	add	r0, r3
 8022e48:	f010 001f 	ands.w	r0, r0, #31
 8022e4c:	f000 8086 	beq.w	8022f5c <_dtoa_r+0x91c>
 8022e50:	f1c0 0320 	rsb	r3, r0, #32
 8022e54:	2b04      	cmp	r3, #4
 8022e56:	dd7f      	ble.n	8022f58 <_dtoa_r+0x918>
 8022e58:	f1c0 001c 	rsb	r0, r0, #28
 8022e5c:	9b04      	ldr	r3, [sp, #16]
 8022e5e:	4403      	add	r3, r0
 8022e60:	4480      	add	r8, r0
 8022e62:	4405      	add	r5, r0
 8022e64:	9304      	str	r3, [sp, #16]
 8022e66:	f1b8 0f00 	cmp.w	r8, #0
 8022e6a:	dd05      	ble.n	8022e78 <_dtoa_r+0x838>
 8022e6c:	4659      	mov	r1, fp
 8022e6e:	4642      	mov	r2, r8
 8022e70:	4620      	mov	r0, r4
 8022e72:	f000 fd43 	bl	80238fc <__lshift>
 8022e76:	4683      	mov	fp, r0
 8022e78:	9b04      	ldr	r3, [sp, #16]
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	dd05      	ble.n	8022e8a <_dtoa_r+0x84a>
 8022e7e:	4631      	mov	r1, r6
 8022e80:	461a      	mov	r2, r3
 8022e82:	4620      	mov	r0, r4
 8022e84:	f000 fd3a 	bl	80238fc <__lshift>
 8022e88:	4606      	mov	r6, r0
 8022e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	d069      	beq.n	8022f64 <_dtoa_r+0x924>
 8022e90:	4631      	mov	r1, r6
 8022e92:	4658      	mov	r0, fp
 8022e94:	f000 fd9e 	bl	80239d4 <__mcmp>
 8022e98:	2800      	cmp	r0, #0
 8022e9a:	da63      	bge.n	8022f64 <_dtoa_r+0x924>
 8022e9c:	2300      	movs	r3, #0
 8022e9e:	4659      	mov	r1, fp
 8022ea0:	220a      	movs	r2, #10
 8022ea2:	4620      	mov	r0, r4
 8022ea4:	f000 fb7a 	bl	802359c <__multadd>
 8022ea8:	9b08      	ldr	r3, [sp, #32]
 8022eaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8022eae:	4683      	mov	fp, r0
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	f000 818f 	beq.w	80231d4 <_dtoa_r+0xb94>
 8022eb6:	4639      	mov	r1, r7
 8022eb8:	2300      	movs	r3, #0
 8022eba:	220a      	movs	r2, #10
 8022ebc:	4620      	mov	r0, r4
 8022ebe:	f000 fb6d 	bl	802359c <__multadd>
 8022ec2:	f1b9 0f00 	cmp.w	r9, #0
 8022ec6:	4607      	mov	r7, r0
 8022ec8:	f300 808e 	bgt.w	8022fe8 <_dtoa_r+0x9a8>
 8022ecc:	9b05      	ldr	r3, [sp, #20]
 8022ece:	2b02      	cmp	r3, #2
 8022ed0:	dc50      	bgt.n	8022f74 <_dtoa_r+0x934>
 8022ed2:	e089      	b.n	8022fe8 <_dtoa_r+0x9a8>
 8022ed4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022ed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8022eda:	e75d      	b.n	8022d98 <_dtoa_r+0x758>
 8022edc:	9b01      	ldr	r3, [sp, #4]
 8022ede:	1e5e      	subs	r6, r3, #1
 8022ee0:	9b06      	ldr	r3, [sp, #24]
 8022ee2:	42b3      	cmp	r3, r6
 8022ee4:	bfbf      	itttt	lt
 8022ee6:	9b06      	ldrlt	r3, [sp, #24]
 8022ee8:	9606      	strlt	r6, [sp, #24]
 8022eea:	1af2      	sublt	r2, r6, r3
 8022eec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8022eee:	bfb6      	itet	lt
 8022ef0:	189b      	addlt	r3, r3, r2
 8022ef2:	1b9e      	subge	r6, r3, r6
 8022ef4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8022ef6:	9b01      	ldr	r3, [sp, #4]
 8022ef8:	bfb8      	it	lt
 8022efa:	2600      	movlt	r6, #0
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	bfb5      	itete	lt
 8022f00:	eba8 0503 	sublt.w	r5, r8, r3
 8022f04:	9b01      	ldrge	r3, [sp, #4]
 8022f06:	2300      	movlt	r3, #0
 8022f08:	4645      	movge	r5, r8
 8022f0a:	e747      	b.n	8022d9c <_dtoa_r+0x75c>
 8022f0c:	9e06      	ldr	r6, [sp, #24]
 8022f0e:	9f08      	ldr	r7, [sp, #32]
 8022f10:	4645      	mov	r5, r8
 8022f12:	e74c      	b.n	8022dae <_dtoa_r+0x76e>
 8022f14:	9a06      	ldr	r2, [sp, #24]
 8022f16:	e775      	b.n	8022e04 <_dtoa_r+0x7c4>
 8022f18:	9b05      	ldr	r3, [sp, #20]
 8022f1a:	2b01      	cmp	r3, #1
 8022f1c:	dc18      	bgt.n	8022f50 <_dtoa_r+0x910>
 8022f1e:	9b02      	ldr	r3, [sp, #8]
 8022f20:	b9b3      	cbnz	r3, 8022f50 <_dtoa_r+0x910>
 8022f22:	9b03      	ldr	r3, [sp, #12]
 8022f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022f28:	b9a3      	cbnz	r3, 8022f54 <_dtoa_r+0x914>
 8022f2a:	9b03      	ldr	r3, [sp, #12]
 8022f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022f30:	0d1b      	lsrs	r3, r3, #20
 8022f32:	051b      	lsls	r3, r3, #20
 8022f34:	b12b      	cbz	r3, 8022f42 <_dtoa_r+0x902>
 8022f36:	9b04      	ldr	r3, [sp, #16]
 8022f38:	3301      	adds	r3, #1
 8022f3a:	9304      	str	r3, [sp, #16]
 8022f3c:	f108 0801 	add.w	r8, r8, #1
 8022f40:	2301      	movs	r3, #1
 8022f42:	9306      	str	r3, [sp, #24]
 8022f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f46:	2b00      	cmp	r3, #0
 8022f48:	f47f af74 	bne.w	8022e34 <_dtoa_r+0x7f4>
 8022f4c:	2001      	movs	r0, #1
 8022f4e:	e779      	b.n	8022e44 <_dtoa_r+0x804>
 8022f50:	2300      	movs	r3, #0
 8022f52:	e7f6      	b.n	8022f42 <_dtoa_r+0x902>
 8022f54:	9b02      	ldr	r3, [sp, #8]
 8022f56:	e7f4      	b.n	8022f42 <_dtoa_r+0x902>
 8022f58:	d085      	beq.n	8022e66 <_dtoa_r+0x826>
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	301c      	adds	r0, #28
 8022f5e:	e77d      	b.n	8022e5c <_dtoa_r+0x81c>
 8022f60:	40240000 	.word	0x40240000
 8022f64:	9b01      	ldr	r3, [sp, #4]
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	dc38      	bgt.n	8022fdc <_dtoa_r+0x99c>
 8022f6a:	9b05      	ldr	r3, [sp, #20]
 8022f6c:	2b02      	cmp	r3, #2
 8022f6e:	dd35      	ble.n	8022fdc <_dtoa_r+0x99c>
 8022f70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8022f74:	f1b9 0f00 	cmp.w	r9, #0
 8022f78:	d10d      	bne.n	8022f96 <_dtoa_r+0x956>
 8022f7a:	4631      	mov	r1, r6
 8022f7c:	464b      	mov	r3, r9
 8022f7e:	2205      	movs	r2, #5
 8022f80:	4620      	mov	r0, r4
 8022f82:	f000 fb0b 	bl	802359c <__multadd>
 8022f86:	4601      	mov	r1, r0
 8022f88:	4606      	mov	r6, r0
 8022f8a:	4658      	mov	r0, fp
 8022f8c:	f000 fd22 	bl	80239d4 <__mcmp>
 8022f90:	2800      	cmp	r0, #0
 8022f92:	f73f adbd 	bgt.w	8022b10 <_dtoa_r+0x4d0>
 8022f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f98:	9d00      	ldr	r5, [sp, #0]
 8022f9a:	ea6f 0a03 	mvn.w	sl, r3
 8022f9e:	f04f 0800 	mov.w	r8, #0
 8022fa2:	4631      	mov	r1, r6
 8022fa4:	4620      	mov	r0, r4
 8022fa6:	f000 fad7 	bl	8023558 <_Bfree>
 8022faa:	2f00      	cmp	r7, #0
 8022fac:	f43f aeb4 	beq.w	8022d18 <_dtoa_r+0x6d8>
 8022fb0:	f1b8 0f00 	cmp.w	r8, #0
 8022fb4:	d005      	beq.n	8022fc2 <_dtoa_r+0x982>
 8022fb6:	45b8      	cmp	r8, r7
 8022fb8:	d003      	beq.n	8022fc2 <_dtoa_r+0x982>
 8022fba:	4641      	mov	r1, r8
 8022fbc:	4620      	mov	r0, r4
 8022fbe:	f000 facb 	bl	8023558 <_Bfree>
 8022fc2:	4639      	mov	r1, r7
 8022fc4:	4620      	mov	r0, r4
 8022fc6:	f000 fac7 	bl	8023558 <_Bfree>
 8022fca:	e6a5      	b.n	8022d18 <_dtoa_r+0x6d8>
 8022fcc:	2600      	movs	r6, #0
 8022fce:	4637      	mov	r7, r6
 8022fd0:	e7e1      	b.n	8022f96 <_dtoa_r+0x956>
 8022fd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022fd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022fd8:	4637      	mov	r7, r6
 8022fda:	e599      	b.n	8022b10 <_dtoa_r+0x4d0>
 8022fdc:	9b08      	ldr	r3, [sp, #32]
 8022fde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	f000 80fd 	beq.w	80231e2 <_dtoa_r+0xba2>
 8022fe8:	2d00      	cmp	r5, #0
 8022fea:	dd05      	ble.n	8022ff8 <_dtoa_r+0x9b8>
 8022fec:	4639      	mov	r1, r7
 8022fee:	462a      	mov	r2, r5
 8022ff0:	4620      	mov	r0, r4
 8022ff2:	f000 fc83 	bl	80238fc <__lshift>
 8022ff6:	4607      	mov	r7, r0
 8022ff8:	9b06      	ldr	r3, [sp, #24]
 8022ffa:	2b00      	cmp	r3, #0
 8022ffc:	d05c      	beq.n	80230b8 <_dtoa_r+0xa78>
 8022ffe:	6879      	ldr	r1, [r7, #4]
 8023000:	4620      	mov	r0, r4
 8023002:	f000 fa69 	bl	80234d8 <_Balloc>
 8023006:	4605      	mov	r5, r0
 8023008:	b928      	cbnz	r0, 8023016 <_dtoa_r+0x9d6>
 802300a:	4b80      	ldr	r3, [pc, #512]	; (802320c <_dtoa_r+0xbcc>)
 802300c:	4602      	mov	r2, r0
 802300e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8023012:	f7ff bb2e 	b.w	8022672 <_dtoa_r+0x32>
 8023016:	693a      	ldr	r2, [r7, #16]
 8023018:	3202      	adds	r2, #2
 802301a:	0092      	lsls	r2, r2, #2
 802301c:	f107 010c 	add.w	r1, r7, #12
 8023020:	300c      	adds	r0, #12
 8023022:	f7fe f8ff 	bl	8021224 <memcpy>
 8023026:	2201      	movs	r2, #1
 8023028:	4629      	mov	r1, r5
 802302a:	4620      	mov	r0, r4
 802302c:	f000 fc66 	bl	80238fc <__lshift>
 8023030:	9b00      	ldr	r3, [sp, #0]
 8023032:	3301      	adds	r3, #1
 8023034:	9301      	str	r3, [sp, #4]
 8023036:	9b00      	ldr	r3, [sp, #0]
 8023038:	444b      	add	r3, r9
 802303a:	9307      	str	r3, [sp, #28]
 802303c:	9b02      	ldr	r3, [sp, #8]
 802303e:	f003 0301 	and.w	r3, r3, #1
 8023042:	46b8      	mov	r8, r7
 8023044:	9306      	str	r3, [sp, #24]
 8023046:	4607      	mov	r7, r0
 8023048:	9b01      	ldr	r3, [sp, #4]
 802304a:	4631      	mov	r1, r6
 802304c:	3b01      	subs	r3, #1
 802304e:	4658      	mov	r0, fp
 8023050:	9302      	str	r3, [sp, #8]
 8023052:	f7ff fa69 	bl	8022528 <quorem>
 8023056:	4603      	mov	r3, r0
 8023058:	3330      	adds	r3, #48	; 0x30
 802305a:	9004      	str	r0, [sp, #16]
 802305c:	4641      	mov	r1, r8
 802305e:	4658      	mov	r0, fp
 8023060:	9308      	str	r3, [sp, #32]
 8023062:	f000 fcb7 	bl	80239d4 <__mcmp>
 8023066:	463a      	mov	r2, r7
 8023068:	4681      	mov	r9, r0
 802306a:	4631      	mov	r1, r6
 802306c:	4620      	mov	r0, r4
 802306e:	f000 fccd 	bl	8023a0c <__mdiff>
 8023072:	68c2      	ldr	r2, [r0, #12]
 8023074:	9b08      	ldr	r3, [sp, #32]
 8023076:	4605      	mov	r5, r0
 8023078:	bb02      	cbnz	r2, 80230bc <_dtoa_r+0xa7c>
 802307a:	4601      	mov	r1, r0
 802307c:	4658      	mov	r0, fp
 802307e:	f000 fca9 	bl	80239d4 <__mcmp>
 8023082:	9b08      	ldr	r3, [sp, #32]
 8023084:	4602      	mov	r2, r0
 8023086:	4629      	mov	r1, r5
 8023088:	4620      	mov	r0, r4
 802308a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 802308e:	f000 fa63 	bl	8023558 <_Bfree>
 8023092:	9b05      	ldr	r3, [sp, #20]
 8023094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023096:	9d01      	ldr	r5, [sp, #4]
 8023098:	ea43 0102 	orr.w	r1, r3, r2
 802309c:	9b06      	ldr	r3, [sp, #24]
 802309e:	430b      	orrs	r3, r1
 80230a0:	9b08      	ldr	r3, [sp, #32]
 80230a2:	d10d      	bne.n	80230c0 <_dtoa_r+0xa80>
 80230a4:	2b39      	cmp	r3, #57	; 0x39
 80230a6:	d029      	beq.n	80230fc <_dtoa_r+0xabc>
 80230a8:	f1b9 0f00 	cmp.w	r9, #0
 80230ac:	dd01      	ble.n	80230b2 <_dtoa_r+0xa72>
 80230ae:	9b04      	ldr	r3, [sp, #16]
 80230b0:	3331      	adds	r3, #49	; 0x31
 80230b2:	9a02      	ldr	r2, [sp, #8]
 80230b4:	7013      	strb	r3, [r2, #0]
 80230b6:	e774      	b.n	8022fa2 <_dtoa_r+0x962>
 80230b8:	4638      	mov	r0, r7
 80230ba:	e7b9      	b.n	8023030 <_dtoa_r+0x9f0>
 80230bc:	2201      	movs	r2, #1
 80230be:	e7e2      	b.n	8023086 <_dtoa_r+0xa46>
 80230c0:	f1b9 0f00 	cmp.w	r9, #0
 80230c4:	db06      	blt.n	80230d4 <_dtoa_r+0xa94>
 80230c6:	9905      	ldr	r1, [sp, #20]
 80230c8:	ea41 0909 	orr.w	r9, r1, r9
 80230cc:	9906      	ldr	r1, [sp, #24]
 80230ce:	ea59 0101 	orrs.w	r1, r9, r1
 80230d2:	d120      	bne.n	8023116 <_dtoa_r+0xad6>
 80230d4:	2a00      	cmp	r2, #0
 80230d6:	ddec      	ble.n	80230b2 <_dtoa_r+0xa72>
 80230d8:	4659      	mov	r1, fp
 80230da:	2201      	movs	r2, #1
 80230dc:	4620      	mov	r0, r4
 80230de:	9301      	str	r3, [sp, #4]
 80230e0:	f000 fc0c 	bl	80238fc <__lshift>
 80230e4:	4631      	mov	r1, r6
 80230e6:	4683      	mov	fp, r0
 80230e8:	f000 fc74 	bl	80239d4 <__mcmp>
 80230ec:	2800      	cmp	r0, #0
 80230ee:	9b01      	ldr	r3, [sp, #4]
 80230f0:	dc02      	bgt.n	80230f8 <_dtoa_r+0xab8>
 80230f2:	d1de      	bne.n	80230b2 <_dtoa_r+0xa72>
 80230f4:	07da      	lsls	r2, r3, #31
 80230f6:	d5dc      	bpl.n	80230b2 <_dtoa_r+0xa72>
 80230f8:	2b39      	cmp	r3, #57	; 0x39
 80230fa:	d1d8      	bne.n	80230ae <_dtoa_r+0xa6e>
 80230fc:	9a02      	ldr	r2, [sp, #8]
 80230fe:	2339      	movs	r3, #57	; 0x39
 8023100:	7013      	strb	r3, [r2, #0]
 8023102:	462b      	mov	r3, r5
 8023104:	461d      	mov	r5, r3
 8023106:	3b01      	subs	r3, #1
 8023108:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802310c:	2a39      	cmp	r2, #57	; 0x39
 802310e:	d050      	beq.n	80231b2 <_dtoa_r+0xb72>
 8023110:	3201      	adds	r2, #1
 8023112:	701a      	strb	r2, [r3, #0]
 8023114:	e745      	b.n	8022fa2 <_dtoa_r+0x962>
 8023116:	2a00      	cmp	r2, #0
 8023118:	dd03      	ble.n	8023122 <_dtoa_r+0xae2>
 802311a:	2b39      	cmp	r3, #57	; 0x39
 802311c:	d0ee      	beq.n	80230fc <_dtoa_r+0xabc>
 802311e:	3301      	adds	r3, #1
 8023120:	e7c7      	b.n	80230b2 <_dtoa_r+0xa72>
 8023122:	9a01      	ldr	r2, [sp, #4]
 8023124:	9907      	ldr	r1, [sp, #28]
 8023126:	f802 3c01 	strb.w	r3, [r2, #-1]
 802312a:	428a      	cmp	r2, r1
 802312c:	d02a      	beq.n	8023184 <_dtoa_r+0xb44>
 802312e:	4659      	mov	r1, fp
 8023130:	2300      	movs	r3, #0
 8023132:	220a      	movs	r2, #10
 8023134:	4620      	mov	r0, r4
 8023136:	f000 fa31 	bl	802359c <__multadd>
 802313a:	45b8      	cmp	r8, r7
 802313c:	4683      	mov	fp, r0
 802313e:	f04f 0300 	mov.w	r3, #0
 8023142:	f04f 020a 	mov.w	r2, #10
 8023146:	4641      	mov	r1, r8
 8023148:	4620      	mov	r0, r4
 802314a:	d107      	bne.n	802315c <_dtoa_r+0xb1c>
 802314c:	f000 fa26 	bl	802359c <__multadd>
 8023150:	4680      	mov	r8, r0
 8023152:	4607      	mov	r7, r0
 8023154:	9b01      	ldr	r3, [sp, #4]
 8023156:	3301      	adds	r3, #1
 8023158:	9301      	str	r3, [sp, #4]
 802315a:	e775      	b.n	8023048 <_dtoa_r+0xa08>
 802315c:	f000 fa1e 	bl	802359c <__multadd>
 8023160:	4639      	mov	r1, r7
 8023162:	4680      	mov	r8, r0
 8023164:	2300      	movs	r3, #0
 8023166:	220a      	movs	r2, #10
 8023168:	4620      	mov	r0, r4
 802316a:	f000 fa17 	bl	802359c <__multadd>
 802316e:	4607      	mov	r7, r0
 8023170:	e7f0      	b.n	8023154 <_dtoa_r+0xb14>
 8023172:	f1b9 0f00 	cmp.w	r9, #0
 8023176:	9a00      	ldr	r2, [sp, #0]
 8023178:	bfcc      	ite	gt
 802317a:	464d      	movgt	r5, r9
 802317c:	2501      	movle	r5, #1
 802317e:	4415      	add	r5, r2
 8023180:	f04f 0800 	mov.w	r8, #0
 8023184:	4659      	mov	r1, fp
 8023186:	2201      	movs	r2, #1
 8023188:	4620      	mov	r0, r4
 802318a:	9301      	str	r3, [sp, #4]
 802318c:	f000 fbb6 	bl	80238fc <__lshift>
 8023190:	4631      	mov	r1, r6
 8023192:	4683      	mov	fp, r0
 8023194:	f000 fc1e 	bl	80239d4 <__mcmp>
 8023198:	2800      	cmp	r0, #0
 802319a:	dcb2      	bgt.n	8023102 <_dtoa_r+0xac2>
 802319c:	d102      	bne.n	80231a4 <_dtoa_r+0xb64>
 802319e:	9b01      	ldr	r3, [sp, #4]
 80231a0:	07db      	lsls	r3, r3, #31
 80231a2:	d4ae      	bmi.n	8023102 <_dtoa_r+0xac2>
 80231a4:	462b      	mov	r3, r5
 80231a6:	461d      	mov	r5, r3
 80231a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80231ac:	2a30      	cmp	r2, #48	; 0x30
 80231ae:	d0fa      	beq.n	80231a6 <_dtoa_r+0xb66>
 80231b0:	e6f7      	b.n	8022fa2 <_dtoa_r+0x962>
 80231b2:	9a00      	ldr	r2, [sp, #0]
 80231b4:	429a      	cmp	r2, r3
 80231b6:	d1a5      	bne.n	8023104 <_dtoa_r+0xac4>
 80231b8:	f10a 0a01 	add.w	sl, sl, #1
 80231bc:	2331      	movs	r3, #49	; 0x31
 80231be:	e779      	b.n	80230b4 <_dtoa_r+0xa74>
 80231c0:	4b13      	ldr	r3, [pc, #76]	; (8023210 <_dtoa_r+0xbd0>)
 80231c2:	f7ff baaf 	b.w	8022724 <_dtoa_r+0xe4>
 80231c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80231c8:	2b00      	cmp	r3, #0
 80231ca:	f47f aa86 	bne.w	80226da <_dtoa_r+0x9a>
 80231ce:	4b11      	ldr	r3, [pc, #68]	; (8023214 <_dtoa_r+0xbd4>)
 80231d0:	f7ff baa8 	b.w	8022724 <_dtoa_r+0xe4>
 80231d4:	f1b9 0f00 	cmp.w	r9, #0
 80231d8:	dc03      	bgt.n	80231e2 <_dtoa_r+0xba2>
 80231da:	9b05      	ldr	r3, [sp, #20]
 80231dc:	2b02      	cmp	r3, #2
 80231de:	f73f aec9 	bgt.w	8022f74 <_dtoa_r+0x934>
 80231e2:	9d00      	ldr	r5, [sp, #0]
 80231e4:	4631      	mov	r1, r6
 80231e6:	4658      	mov	r0, fp
 80231e8:	f7ff f99e 	bl	8022528 <quorem>
 80231ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80231f0:	f805 3b01 	strb.w	r3, [r5], #1
 80231f4:	9a00      	ldr	r2, [sp, #0]
 80231f6:	1aaa      	subs	r2, r5, r2
 80231f8:	4591      	cmp	r9, r2
 80231fa:	ddba      	ble.n	8023172 <_dtoa_r+0xb32>
 80231fc:	4659      	mov	r1, fp
 80231fe:	2300      	movs	r3, #0
 8023200:	220a      	movs	r2, #10
 8023202:	4620      	mov	r0, r4
 8023204:	f000 f9ca 	bl	802359c <__multadd>
 8023208:	4683      	mov	fp, r0
 802320a:	e7eb      	b.n	80231e4 <_dtoa_r+0xba4>
 802320c:	08029e1d 	.word	0x08029e1d
 8023210:	08029fa1 	.word	0x08029fa1
 8023214:	08029db1 	.word	0x08029db1

08023218 <__errno>:
 8023218:	4b01      	ldr	r3, [pc, #4]	; (8023220 <__errno+0x8>)
 802321a:	6818      	ldr	r0, [r3, #0]
 802321c:	4770      	bx	lr
 802321e:	bf00      	nop
 8023220:	20000074 	.word	0x20000074

08023224 <__sflush_r>:
 8023224:	898a      	ldrh	r2, [r1, #12]
 8023226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802322a:	4605      	mov	r5, r0
 802322c:	0710      	lsls	r0, r2, #28
 802322e:	460c      	mov	r4, r1
 8023230:	d458      	bmi.n	80232e4 <__sflush_r+0xc0>
 8023232:	684b      	ldr	r3, [r1, #4]
 8023234:	2b00      	cmp	r3, #0
 8023236:	dc05      	bgt.n	8023244 <__sflush_r+0x20>
 8023238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802323a:	2b00      	cmp	r3, #0
 802323c:	dc02      	bgt.n	8023244 <__sflush_r+0x20>
 802323e:	2000      	movs	r0, #0
 8023240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023246:	2e00      	cmp	r6, #0
 8023248:	d0f9      	beq.n	802323e <__sflush_r+0x1a>
 802324a:	2300      	movs	r3, #0
 802324c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023250:	682f      	ldr	r7, [r5, #0]
 8023252:	602b      	str	r3, [r5, #0]
 8023254:	d032      	beq.n	80232bc <__sflush_r+0x98>
 8023256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023258:	89a3      	ldrh	r3, [r4, #12]
 802325a:	075a      	lsls	r2, r3, #29
 802325c:	d505      	bpl.n	802326a <__sflush_r+0x46>
 802325e:	6863      	ldr	r3, [r4, #4]
 8023260:	1ac0      	subs	r0, r0, r3
 8023262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023264:	b10b      	cbz	r3, 802326a <__sflush_r+0x46>
 8023266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023268:	1ac0      	subs	r0, r0, r3
 802326a:	2300      	movs	r3, #0
 802326c:	4602      	mov	r2, r0
 802326e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023270:	6a21      	ldr	r1, [r4, #32]
 8023272:	4628      	mov	r0, r5
 8023274:	47b0      	blx	r6
 8023276:	1c43      	adds	r3, r0, #1
 8023278:	89a3      	ldrh	r3, [r4, #12]
 802327a:	d106      	bne.n	802328a <__sflush_r+0x66>
 802327c:	6829      	ldr	r1, [r5, #0]
 802327e:	291d      	cmp	r1, #29
 8023280:	d82c      	bhi.n	80232dc <__sflush_r+0xb8>
 8023282:	4a2a      	ldr	r2, [pc, #168]	; (802332c <__sflush_r+0x108>)
 8023284:	40ca      	lsrs	r2, r1
 8023286:	07d6      	lsls	r6, r2, #31
 8023288:	d528      	bpl.n	80232dc <__sflush_r+0xb8>
 802328a:	2200      	movs	r2, #0
 802328c:	6062      	str	r2, [r4, #4]
 802328e:	04d9      	lsls	r1, r3, #19
 8023290:	6922      	ldr	r2, [r4, #16]
 8023292:	6022      	str	r2, [r4, #0]
 8023294:	d504      	bpl.n	80232a0 <__sflush_r+0x7c>
 8023296:	1c42      	adds	r2, r0, #1
 8023298:	d101      	bne.n	802329e <__sflush_r+0x7a>
 802329a:	682b      	ldr	r3, [r5, #0]
 802329c:	b903      	cbnz	r3, 80232a0 <__sflush_r+0x7c>
 802329e:	6560      	str	r0, [r4, #84]	; 0x54
 80232a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80232a2:	602f      	str	r7, [r5, #0]
 80232a4:	2900      	cmp	r1, #0
 80232a6:	d0ca      	beq.n	802323e <__sflush_r+0x1a>
 80232a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80232ac:	4299      	cmp	r1, r3
 80232ae:	d002      	beq.n	80232b6 <__sflush_r+0x92>
 80232b0:	4628      	mov	r0, r5
 80232b2:	f7fd ffe7 	bl	8021284 <_free_r>
 80232b6:	2000      	movs	r0, #0
 80232b8:	6360      	str	r0, [r4, #52]	; 0x34
 80232ba:	e7c1      	b.n	8023240 <__sflush_r+0x1c>
 80232bc:	6a21      	ldr	r1, [r4, #32]
 80232be:	2301      	movs	r3, #1
 80232c0:	4628      	mov	r0, r5
 80232c2:	47b0      	blx	r6
 80232c4:	1c41      	adds	r1, r0, #1
 80232c6:	d1c7      	bne.n	8023258 <__sflush_r+0x34>
 80232c8:	682b      	ldr	r3, [r5, #0]
 80232ca:	2b00      	cmp	r3, #0
 80232cc:	d0c4      	beq.n	8023258 <__sflush_r+0x34>
 80232ce:	2b1d      	cmp	r3, #29
 80232d0:	d001      	beq.n	80232d6 <__sflush_r+0xb2>
 80232d2:	2b16      	cmp	r3, #22
 80232d4:	d101      	bne.n	80232da <__sflush_r+0xb6>
 80232d6:	602f      	str	r7, [r5, #0]
 80232d8:	e7b1      	b.n	802323e <__sflush_r+0x1a>
 80232da:	89a3      	ldrh	r3, [r4, #12]
 80232dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80232e0:	81a3      	strh	r3, [r4, #12]
 80232e2:	e7ad      	b.n	8023240 <__sflush_r+0x1c>
 80232e4:	690f      	ldr	r7, [r1, #16]
 80232e6:	2f00      	cmp	r7, #0
 80232e8:	d0a9      	beq.n	802323e <__sflush_r+0x1a>
 80232ea:	0793      	lsls	r3, r2, #30
 80232ec:	680e      	ldr	r6, [r1, #0]
 80232ee:	bf08      	it	eq
 80232f0:	694b      	ldreq	r3, [r1, #20]
 80232f2:	600f      	str	r7, [r1, #0]
 80232f4:	bf18      	it	ne
 80232f6:	2300      	movne	r3, #0
 80232f8:	eba6 0807 	sub.w	r8, r6, r7
 80232fc:	608b      	str	r3, [r1, #8]
 80232fe:	f1b8 0f00 	cmp.w	r8, #0
 8023302:	dd9c      	ble.n	802323e <__sflush_r+0x1a>
 8023304:	6a21      	ldr	r1, [r4, #32]
 8023306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023308:	4643      	mov	r3, r8
 802330a:	463a      	mov	r2, r7
 802330c:	4628      	mov	r0, r5
 802330e:	47b0      	blx	r6
 8023310:	2800      	cmp	r0, #0
 8023312:	dc06      	bgt.n	8023322 <__sflush_r+0xfe>
 8023314:	89a3      	ldrh	r3, [r4, #12]
 8023316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802331a:	81a3      	strh	r3, [r4, #12]
 802331c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023320:	e78e      	b.n	8023240 <__sflush_r+0x1c>
 8023322:	4407      	add	r7, r0
 8023324:	eba8 0800 	sub.w	r8, r8, r0
 8023328:	e7e9      	b.n	80232fe <__sflush_r+0xda>
 802332a:	bf00      	nop
 802332c:	20400001 	.word	0x20400001

08023330 <_fflush_r>:
 8023330:	b538      	push	{r3, r4, r5, lr}
 8023332:	690b      	ldr	r3, [r1, #16]
 8023334:	4605      	mov	r5, r0
 8023336:	460c      	mov	r4, r1
 8023338:	b913      	cbnz	r3, 8023340 <_fflush_r+0x10>
 802333a:	2500      	movs	r5, #0
 802333c:	4628      	mov	r0, r5
 802333e:	bd38      	pop	{r3, r4, r5, pc}
 8023340:	b118      	cbz	r0, 802334a <_fflush_r+0x1a>
 8023342:	6983      	ldr	r3, [r0, #24]
 8023344:	b90b      	cbnz	r3, 802334a <_fflush_r+0x1a>
 8023346:	f7fd fe89 	bl	802105c <__sinit>
 802334a:	4b14      	ldr	r3, [pc, #80]	; (802339c <_fflush_r+0x6c>)
 802334c:	429c      	cmp	r4, r3
 802334e:	d11b      	bne.n	8023388 <_fflush_r+0x58>
 8023350:	686c      	ldr	r4, [r5, #4]
 8023352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023356:	2b00      	cmp	r3, #0
 8023358:	d0ef      	beq.n	802333a <_fflush_r+0xa>
 802335a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802335c:	07d0      	lsls	r0, r2, #31
 802335e:	d404      	bmi.n	802336a <_fflush_r+0x3a>
 8023360:	0599      	lsls	r1, r3, #22
 8023362:	d402      	bmi.n	802336a <_fflush_r+0x3a>
 8023364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023366:	f7fd ff3c 	bl	80211e2 <__retarget_lock_acquire_recursive>
 802336a:	4628      	mov	r0, r5
 802336c:	4621      	mov	r1, r4
 802336e:	f7ff ff59 	bl	8023224 <__sflush_r>
 8023372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023374:	07da      	lsls	r2, r3, #31
 8023376:	4605      	mov	r5, r0
 8023378:	d4e0      	bmi.n	802333c <_fflush_r+0xc>
 802337a:	89a3      	ldrh	r3, [r4, #12]
 802337c:	059b      	lsls	r3, r3, #22
 802337e:	d4dd      	bmi.n	802333c <_fflush_r+0xc>
 8023380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023382:	f7fd ff2f 	bl	80211e4 <__retarget_lock_release_recursive>
 8023386:	e7d9      	b.n	802333c <_fflush_r+0xc>
 8023388:	4b05      	ldr	r3, [pc, #20]	; (80233a0 <_fflush_r+0x70>)
 802338a:	429c      	cmp	r4, r3
 802338c:	d101      	bne.n	8023392 <_fflush_r+0x62>
 802338e:	68ac      	ldr	r4, [r5, #8]
 8023390:	e7df      	b.n	8023352 <_fflush_r+0x22>
 8023392:	4b04      	ldr	r3, [pc, #16]	; (80233a4 <_fflush_r+0x74>)
 8023394:	429c      	cmp	r4, r3
 8023396:	bf08      	it	eq
 8023398:	68ec      	ldreq	r4, [r5, #12]
 802339a:	e7da      	b.n	8023352 <_fflush_r+0x22>
 802339c:	08029c28 	.word	0x08029c28
 80233a0:	08029c48 	.word	0x08029c48
 80233a4:	08029c08 	.word	0x08029c08

080233a8 <fiprintf>:
 80233a8:	b40e      	push	{r1, r2, r3}
 80233aa:	b503      	push	{r0, r1, lr}
 80233ac:	4601      	mov	r1, r0
 80233ae:	ab03      	add	r3, sp, #12
 80233b0:	4805      	ldr	r0, [pc, #20]	; (80233c8 <fiprintf+0x20>)
 80233b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80233b6:	6800      	ldr	r0, [r0, #0]
 80233b8:	9301      	str	r3, [sp, #4]
 80233ba:	f000 ff71 	bl	80242a0 <_vfiprintf_r>
 80233be:	b002      	add	sp, #8
 80233c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80233c4:	b003      	add	sp, #12
 80233c6:	4770      	bx	lr
 80233c8:	20000074 	.word	0x20000074

080233cc <_localeconv_r>:
 80233cc:	4800      	ldr	r0, [pc, #0]	; (80233d0 <_localeconv_r+0x4>)
 80233ce:	4770      	bx	lr
 80233d0:	200001c8 	.word	0x200001c8

080233d4 <_lseek_r>:
 80233d4:	b538      	push	{r3, r4, r5, lr}
 80233d6:	4d07      	ldr	r5, [pc, #28]	; (80233f4 <_lseek_r+0x20>)
 80233d8:	4604      	mov	r4, r0
 80233da:	4608      	mov	r0, r1
 80233dc:	4611      	mov	r1, r2
 80233de:	2200      	movs	r2, #0
 80233e0:	602a      	str	r2, [r5, #0]
 80233e2:	461a      	mov	r2, r3
 80233e4:	f7df fb32 	bl	8002a4c <_lseek>
 80233e8:	1c43      	adds	r3, r0, #1
 80233ea:	d102      	bne.n	80233f2 <_lseek_r+0x1e>
 80233ec:	682b      	ldr	r3, [r5, #0]
 80233ee:	b103      	cbz	r3, 80233f2 <_lseek_r+0x1e>
 80233f0:	6023      	str	r3, [r4, #0]
 80233f2:	bd38      	pop	{r3, r4, r5, pc}
 80233f4:	2001b1ec 	.word	0x2001b1ec

080233f8 <__swhatbuf_r>:
 80233f8:	b570      	push	{r4, r5, r6, lr}
 80233fa:	460e      	mov	r6, r1
 80233fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023400:	2900      	cmp	r1, #0
 8023402:	b096      	sub	sp, #88	; 0x58
 8023404:	4614      	mov	r4, r2
 8023406:	461d      	mov	r5, r3
 8023408:	da07      	bge.n	802341a <__swhatbuf_r+0x22>
 802340a:	2300      	movs	r3, #0
 802340c:	602b      	str	r3, [r5, #0]
 802340e:	89b3      	ldrh	r3, [r6, #12]
 8023410:	061a      	lsls	r2, r3, #24
 8023412:	d410      	bmi.n	8023436 <__swhatbuf_r+0x3e>
 8023414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023418:	e00e      	b.n	8023438 <__swhatbuf_r+0x40>
 802341a:	466a      	mov	r2, sp
 802341c:	f001 fac8 	bl	80249b0 <_fstat_r>
 8023420:	2800      	cmp	r0, #0
 8023422:	dbf2      	blt.n	802340a <__swhatbuf_r+0x12>
 8023424:	9a01      	ldr	r2, [sp, #4]
 8023426:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802342a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802342e:	425a      	negs	r2, r3
 8023430:	415a      	adcs	r2, r3
 8023432:	602a      	str	r2, [r5, #0]
 8023434:	e7ee      	b.n	8023414 <__swhatbuf_r+0x1c>
 8023436:	2340      	movs	r3, #64	; 0x40
 8023438:	2000      	movs	r0, #0
 802343a:	6023      	str	r3, [r4, #0]
 802343c:	b016      	add	sp, #88	; 0x58
 802343e:	bd70      	pop	{r4, r5, r6, pc}

08023440 <__smakebuf_r>:
 8023440:	898b      	ldrh	r3, [r1, #12]
 8023442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023444:	079d      	lsls	r5, r3, #30
 8023446:	4606      	mov	r6, r0
 8023448:	460c      	mov	r4, r1
 802344a:	d507      	bpl.n	802345c <__smakebuf_r+0x1c>
 802344c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023450:	6023      	str	r3, [r4, #0]
 8023452:	6123      	str	r3, [r4, #16]
 8023454:	2301      	movs	r3, #1
 8023456:	6163      	str	r3, [r4, #20]
 8023458:	b002      	add	sp, #8
 802345a:	bd70      	pop	{r4, r5, r6, pc}
 802345c:	ab01      	add	r3, sp, #4
 802345e:	466a      	mov	r2, sp
 8023460:	f7ff ffca 	bl	80233f8 <__swhatbuf_r>
 8023464:	9900      	ldr	r1, [sp, #0]
 8023466:	4605      	mov	r5, r0
 8023468:	4630      	mov	r0, r6
 802346a:	f7fd ff5b 	bl	8021324 <_malloc_r>
 802346e:	b948      	cbnz	r0, 8023484 <__smakebuf_r+0x44>
 8023470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023474:	059a      	lsls	r2, r3, #22
 8023476:	d4ef      	bmi.n	8023458 <__smakebuf_r+0x18>
 8023478:	f023 0303 	bic.w	r3, r3, #3
 802347c:	f043 0302 	orr.w	r3, r3, #2
 8023480:	81a3      	strh	r3, [r4, #12]
 8023482:	e7e3      	b.n	802344c <__smakebuf_r+0xc>
 8023484:	4b0d      	ldr	r3, [pc, #52]	; (80234bc <__smakebuf_r+0x7c>)
 8023486:	62b3      	str	r3, [r6, #40]	; 0x28
 8023488:	89a3      	ldrh	r3, [r4, #12]
 802348a:	6020      	str	r0, [r4, #0]
 802348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023490:	81a3      	strh	r3, [r4, #12]
 8023492:	9b00      	ldr	r3, [sp, #0]
 8023494:	6163      	str	r3, [r4, #20]
 8023496:	9b01      	ldr	r3, [sp, #4]
 8023498:	6120      	str	r0, [r4, #16]
 802349a:	b15b      	cbz	r3, 80234b4 <__smakebuf_r+0x74>
 802349c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80234a0:	4630      	mov	r0, r6
 80234a2:	f001 fa97 	bl	80249d4 <_isatty_r>
 80234a6:	b128      	cbz	r0, 80234b4 <__smakebuf_r+0x74>
 80234a8:	89a3      	ldrh	r3, [r4, #12]
 80234aa:	f023 0303 	bic.w	r3, r3, #3
 80234ae:	f043 0301 	orr.w	r3, r3, #1
 80234b2:	81a3      	strh	r3, [r4, #12]
 80234b4:	89a0      	ldrh	r0, [r4, #12]
 80234b6:	4305      	orrs	r5, r0
 80234b8:	81a5      	strh	r5, [r4, #12]
 80234ba:	e7cd      	b.n	8023458 <__smakebuf_r+0x18>
 80234bc:	08020ff5 	.word	0x08020ff5

080234c0 <__malloc_lock>:
 80234c0:	4801      	ldr	r0, [pc, #4]	; (80234c8 <__malloc_lock+0x8>)
 80234c2:	f7fd be8e 	b.w	80211e2 <__retarget_lock_acquire_recursive>
 80234c6:	bf00      	nop
 80234c8:	2001b1f8 	.word	0x2001b1f8

080234cc <__malloc_unlock>:
 80234cc:	4801      	ldr	r0, [pc, #4]	; (80234d4 <__malloc_unlock+0x8>)
 80234ce:	f7fd be89 	b.w	80211e4 <__retarget_lock_release_recursive>
 80234d2:	bf00      	nop
 80234d4:	2001b1f8 	.word	0x2001b1f8

080234d8 <_Balloc>:
 80234d8:	b570      	push	{r4, r5, r6, lr}
 80234da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80234dc:	4604      	mov	r4, r0
 80234de:	460d      	mov	r5, r1
 80234e0:	b976      	cbnz	r6, 8023500 <_Balloc+0x28>
 80234e2:	2010      	movs	r0, #16
 80234e4:	f7fd fe80 	bl	80211e8 <malloc>
 80234e8:	4602      	mov	r2, r0
 80234ea:	6260      	str	r0, [r4, #36]	; 0x24
 80234ec:	b920      	cbnz	r0, 80234f8 <_Balloc+0x20>
 80234ee:	4b18      	ldr	r3, [pc, #96]	; (8023550 <_Balloc+0x78>)
 80234f0:	4818      	ldr	r0, [pc, #96]	; (8023554 <_Balloc+0x7c>)
 80234f2:	2166      	movs	r1, #102	; 0x66
 80234f4:	f7fe ffea 	bl	80224cc <__assert_func>
 80234f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80234fc:	6006      	str	r6, [r0, #0]
 80234fe:	60c6      	str	r6, [r0, #12]
 8023500:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023502:	68f3      	ldr	r3, [r6, #12]
 8023504:	b183      	cbz	r3, 8023528 <_Balloc+0x50>
 8023506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023508:	68db      	ldr	r3, [r3, #12]
 802350a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802350e:	b9b8      	cbnz	r0, 8023540 <_Balloc+0x68>
 8023510:	2101      	movs	r1, #1
 8023512:	fa01 f605 	lsl.w	r6, r1, r5
 8023516:	1d72      	adds	r2, r6, #5
 8023518:	0092      	lsls	r2, r2, #2
 802351a:	4620      	mov	r0, r4
 802351c:	f000 fb5a 	bl	8023bd4 <_calloc_r>
 8023520:	b160      	cbz	r0, 802353c <_Balloc+0x64>
 8023522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023526:	e00e      	b.n	8023546 <_Balloc+0x6e>
 8023528:	2221      	movs	r2, #33	; 0x21
 802352a:	2104      	movs	r1, #4
 802352c:	4620      	mov	r0, r4
 802352e:	f000 fb51 	bl	8023bd4 <_calloc_r>
 8023532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023534:	60f0      	str	r0, [r6, #12]
 8023536:	68db      	ldr	r3, [r3, #12]
 8023538:	2b00      	cmp	r3, #0
 802353a:	d1e4      	bne.n	8023506 <_Balloc+0x2e>
 802353c:	2000      	movs	r0, #0
 802353e:	bd70      	pop	{r4, r5, r6, pc}
 8023540:	6802      	ldr	r2, [r0, #0]
 8023542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023546:	2300      	movs	r3, #0
 8023548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802354c:	e7f7      	b.n	802353e <_Balloc+0x66>
 802354e:	bf00      	nop
 8023550:	08029c9e 	.word	0x08029c9e
 8023554:	08029e2e 	.word	0x08029e2e

08023558 <_Bfree>:
 8023558:	b570      	push	{r4, r5, r6, lr}
 802355a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802355c:	4605      	mov	r5, r0
 802355e:	460c      	mov	r4, r1
 8023560:	b976      	cbnz	r6, 8023580 <_Bfree+0x28>
 8023562:	2010      	movs	r0, #16
 8023564:	f7fd fe40 	bl	80211e8 <malloc>
 8023568:	4602      	mov	r2, r0
 802356a:	6268      	str	r0, [r5, #36]	; 0x24
 802356c:	b920      	cbnz	r0, 8023578 <_Bfree+0x20>
 802356e:	4b09      	ldr	r3, [pc, #36]	; (8023594 <_Bfree+0x3c>)
 8023570:	4809      	ldr	r0, [pc, #36]	; (8023598 <_Bfree+0x40>)
 8023572:	218a      	movs	r1, #138	; 0x8a
 8023574:	f7fe ffaa 	bl	80224cc <__assert_func>
 8023578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802357c:	6006      	str	r6, [r0, #0]
 802357e:	60c6      	str	r6, [r0, #12]
 8023580:	b13c      	cbz	r4, 8023592 <_Bfree+0x3a>
 8023582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8023584:	6862      	ldr	r2, [r4, #4]
 8023586:	68db      	ldr	r3, [r3, #12]
 8023588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802358c:	6021      	str	r1, [r4, #0]
 802358e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023592:	bd70      	pop	{r4, r5, r6, pc}
 8023594:	08029c9e 	.word	0x08029c9e
 8023598:	08029e2e 	.word	0x08029e2e

0802359c <__multadd>:
 802359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235a0:	690e      	ldr	r6, [r1, #16]
 80235a2:	4607      	mov	r7, r0
 80235a4:	4698      	mov	r8, r3
 80235a6:	460c      	mov	r4, r1
 80235a8:	f101 0014 	add.w	r0, r1, #20
 80235ac:	2300      	movs	r3, #0
 80235ae:	6805      	ldr	r5, [r0, #0]
 80235b0:	b2a9      	uxth	r1, r5
 80235b2:	fb02 8101 	mla	r1, r2, r1, r8
 80235b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80235ba:	0c2d      	lsrs	r5, r5, #16
 80235bc:	fb02 c505 	mla	r5, r2, r5, ip
 80235c0:	b289      	uxth	r1, r1
 80235c2:	3301      	adds	r3, #1
 80235c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80235c8:	429e      	cmp	r6, r3
 80235ca:	f840 1b04 	str.w	r1, [r0], #4
 80235ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80235d2:	dcec      	bgt.n	80235ae <__multadd+0x12>
 80235d4:	f1b8 0f00 	cmp.w	r8, #0
 80235d8:	d022      	beq.n	8023620 <__multadd+0x84>
 80235da:	68a3      	ldr	r3, [r4, #8]
 80235dc:	42b3      	cmp	r3, r6
 80235de:	dc19      	bgt.n	8023614 <__multadd+0x78>
 80235e0:	6861      	ldr	r1, [r4, #4]
 80235e2:	4638      	mov	r0, r7
 80235e4:	3101      	adds	r1, #1
 80235e6:	f7ff ff77 	bl	80234d8 <_Balloc>
 80235ea:	4605      	mov	r5, r0
 80235ec:	b928      	cbnz	r0, 80235fa <__multadd+0x5e>
 80235ee:	4602      	mov	r2, r0
 80235f0:	4b0d      	ldr	r3, [pc, #52]	; (8023628 <__multadd+0x8c>)
 80235f2:	480e      	ldr	r0, [pc, #56]	; (802362c <__multadd+0x90>)
 80235f4:	21b5      	movs	r1, #181	; 0xb5
 80235f6:	f7fe ff69 	bl	80224cc <__assert_func>
 80235fa:	6922      	ldr	r2, [r4, #16]
 80235fc:	3202      	adds	r2, #2
 80235fe:	f104 010c 	add.w	r1, r4, #12
 8023602:	0092      	lsls	r2, r2, #2
 8023604:	300c      	adds	r0, #12
 8023606:	f7fd fe0d 	bl	8021224 <memcpy>
 802360a:	4621      	mov	r1, r4
 802360c:	4638      	mov	r0, r7
 802360e:	f7ff ffa3 	bl	8023558 <_Bfree>
 8023612:	462c      	mov	r4, r5
 8023614:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8023618:	3601      	adds	r6, #1
 802361a:	f8c3 8014 	str.w	r8, [r3, #20]
 802361e:	6126      	str	r6, [r4, #16]
 8023620:	4620      	mov	r0, r4
 8023622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023626:	bf00      	nop
 8023628:	08029e1d 	.word	0x08029e1d
 802362c:	08029e2e 	.word	0x08029e2e

08023630 <__hi0bits>:
 8023630:	0c03      	lsrs	r3, r0, #16
 8023632:	041b      	lsls	r3, r3, #16
 8023634:	b9d3      	cbnz	r3, 802366c <__hi0bits+0x3c>
 8023636:	0400      	lsls	r0, r0, #16
 8023638:	2310      	movs	r3, #16
 802363a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802363e:	bf04      	itt	eq
 8023640:	0200      	lsleq	r0, r0, #8
 8023642:	3308      	addeq	r3, #8
 8023644:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023648:	bf04      	itt	eq
 802364a:	0100      	lsleq	r0, r0, #4
 802364c:	3304      	addeq	r3, #4
 802364e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8023652:	bf04      	itt	eq
 8023654:	0080      	lsleq	r0, r0, #2
 8023656:	3302      	addeq	r3, #2
 8023658:	2800      	cmp	r0, #0
 802365a:	db05      	blt.n	8023668 <__hi0bits+0x38>
 802365c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023660:	f103 0301 	add.w	r3, r3, #1
 8023664:	bf08      	it	eq
 8023666:	2320      	moveq	r3, #32
 8023668:	4618      	mov	r0, r3
 802366a:	4770      	bx	lr
 802366c:	2300      	movs	r3, #0
 802366e:	e7e4      	b.n	802363a <__hi0bits+0xa>

08023670 <__lo0bits>:
 8023670:	6803      	ldr	r3, [r0, #0]
 8023672:	f013 0207 	ands.w	r2, r3, #7
 8023676:	4601      	mov	r1, r0
 8023678:	d00b      	beq.n	8023692 <__lo0bits+0x22>
 802367a:	07da      	lsls	r2, r3, #31
 802367c:	d424      	bmi.n	80236c8 <__lo0bits+0x58>
 802367e:	0798      	lsls	r0, r3, #30
 8023680:	bf49      	itett	mi
 8023682:	085b      	lsrmi	r3, r3, #1
 8023684:	089b      	lsrpl	r3, r3, #2
 8023686:	2001      	movmi	r0, #1
 8023688:	600b      	strmi	r3, [r1, #0]
 802368a:	bf5c      	itt	pl
 802368c:	600b      	strpl	r3, [r1, #0]
 802368e:	2002      	movpl	r0, #2
 8023690:	4770      	bx	lr
 8023692:	b298      	uxth	r0, r3
 8023694:	b9b0      	cbnz	r0, 80236c4 <__lo0bits+0x54>
 8023696:	0c1b      	lsrs	r3, r3, #16
 8023698:	2010      	movs	r0, #16
 802369a:	f013 0fff 	tst.w	r3, #255	; 0xff
 802369e:	bf04      	itt	eq
 80236a0:	0a1b      	lsreq	r3, r3, #8
 80236a2:	3008      	addeq	r0, #8
 80236a4:	071a      	lsls	r2, r3, #28
 80236a6:	bf04      	itt	eq
 80236a8:	091b      	lsreq	r3, r3, #4
 80236aa:	3004      	addeq	r0, #4
 80236ac:	079a      	lsls	r2, r3, #30
 80236ae:	bf04      	itt	eq
 80236b0:	089b      	lsreq	r3, r3, #2
 80236b2:	3002      	addeq	r0, #2
 80236b4:	07da      	lsls	r2, r3, #31
 80236b6:	d403      	bmi.n	80236c0 <__lo0bits+0x50>
 80236b8:	085b      	lsrs	r3, r3, #1
 80236ba:	f100 0001 	add.w	r0, r0, #1
 80236be:	d005      	beq.n	80236cc <__lo0bits+0x5c>
 80236c0:	600b      	str	r3, [r1, #0]
 80236c2:	4770      	bx	lr
 80236c4:	4610      	mov	r0, r2
 80236c6:	e7e8      	b.n	802369a <__lo0bits+0x2a>
 80236c8:	2000      	movs	r0, #0
 80236ca:	4770      	bx	lr
 80236cc:	2020      	movs	r0, #32
 80236ce:	4770      	bx	lr

080236d0 <__i2b>:
 80236d0:	b510      	push	{r4, lr}
 80236d2:	460c      	mov	r4, r1
 80236d4:	2101      	movs	r1, #1
 80236d6:	f7ff feff 	bl	80234d8 <_Balloc>
 80236da:	4602      	mov	r2, r0
 80236dc:	b928      	cbnz	r0, 80236ea <__i2b+0x1a>
 80236de:	4b05      	ldr	r3, [pc, #20]	; (80236f4 <__i2b+0x24>)
 80236e0:	4805      	ldr	r0, [pc, #20]	; (80236f8 <__i2b+0x28>)
 80236e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80236e6:	f7fe fef1 	bl	80224cc <__assert_func>
 80236ea:	2301      	movs	r3, #1
 80236ec:	6144      	str	r4, [r0, #20]
 80236ee:	6103      	str	r3, [r0, #16]
 80236f0:	bd10      	pop	{r4, pc}
 80236f2:	bf00      	nop
 80236f4:	08029e1d 	.word	0x08029e1d
 80236f8:	08029e2e 	.word	0x08029e2e

080236fc <__multiply>:
 80236fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023700:	4614      	mov	r4, r2
 8023702:	690a      	ldr	r2, [r1, #16]
 8023704:	6923      	ldr	r3, [r4, #16]
 8023706:	429a      	cmp	r2, r3
 8023708:	bfb8      	it	lt
 802370a:	460b      	movlt	r3, r1
 802370c:	460d      	mov	r5, r1
 802370e:	bfbc      	itt	lt
 8023710:	4625      	movlt	r5, r4
 8023712:	461c      	movlt	r4, r3
 8023714:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8023718:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802371c:	68ab      	ldr	r3, [r5, #8]
 802371e:	6869      	ldr	r1, [r5, #4]
 8023720:	eb0a 0709 	add.w	r7, sl, r9
 8023724:	42bb      	cmp	r3, r7
 8023726:	b085      	sub	sp, #20
 8023728:	bfb8      	it	lt
 802372a:	3101      	addlt	r1, #1
 802372c:	f7ff fed4 	bl	80234d8 <_Balloc>
 8023730:	b930      	cbnz	r0, 8023740 <__multiply+0x44>
 8023732:	4602      	mov	r2, r0
 8023734:	4b42      	ldr	r3, [pc, #264]	; (8023840 <__multiply+0x144>)
 8023736:	4843      	ldr	r0, [pc, #268]	; (8023844 <__multiply+0x148>)
 8023738:	f240 115d 	movw	r1, #349	; 0x15d
 802373c:	f7fe fec6 	bl	80224cc <__assert_func>
 8023740:	f100 0614 	add.w	r6, r0, #20
 8023744:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8023748:	4633      	mov	r3, r6
 802374a:	2200      	movs	r2, #0
 802374c:	4543      	cmp	r3, r8
 802374e:	d31e      	bcc.n	802378e <__multiply+0x92>
 8023750:	f105 0c14 	add.w	ip, r5, #20
 8023754:	f104 0314 	add.w	r3, r4, #20
 8023758:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802375c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8023760:	9202      	str	r2, [sp, #8]
 8023762:	ebac 0205 	sub.w	r2, ip, r5
 8023766:	3a15      	subs	r2, #21
 8023768:	f022 0203 	bic.w	r2, r2, #3
 802376c:	3204      	adds	r2, #4
 802376e:	f105 0115 	add.w	r1, r5, #21
 8023772:	458c      	cmp	ip, r1
 8023774:	bf38      	it	cc
 8023776:	2204      	movcc	r2, #4
 8023778:	9201      	str	r2, [sp, #4]
 802377a:	9a02      	ldr	r2, [sp, #8]
 802377c:	9303      	str	r3, [sp, #12]
 802377e:	429a      	cmp	r2, r3
 8023780:	d808      	bhi.n	8023794 <__multiply+0x98>
 8023782:	2f00      	cmp	r7, #0
 8023784:	dc55      	bgt.n	8023832 <__multiply+0x136>
 8023786:	6107      	str	r7, [r0, #16]
 8023788:	b005      	add	sp, #20
 802378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802378e:	f843 2b04 	str.w	r2, [r3], #4
 8023792:	e7db      	b.n	802374c <__multiply+0x50>
 8023794:	f8b3 a000 	ldrh.w	sl, [r3]
 8023798:	f1ba 0f00 	cmp.w	sl, #0
 802379c:	d020      	beq.n	80237e0 <__multiply+0xe4>
 802379e:	f105 0e14 	add.w	lr, r5, #20
 80237a2:	46b1      	mov	r9, r6
 80237a4:	2200      	movs	r2, #0
 80237a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80237aa:	f8d9 b000 	ldr.w	fp, [r9]
 80237ae:	b2a1      	uxth	r1, r4
 80237b0:	fa1f fb8b 	uxth.w	fp, fp
 80237b4:	fb0a b101 	mla	r1, sl, r1, fp
 80237b8:	4411      	add	r1, r2
 80237ba:	f8d9 2000 	ldr.w	r2, [r9]
 80237be:	0c24      	lsrs	r4, r4, #16
 80237c0:	0c12      	lsrs	r2, r2, #16
 80237c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80237c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80237ca:	b289      	uxth	r1, r1
 80237cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80237d0:	45f4      	cmp	ip, lr
 80237d2:	f849 1b04 	str.w	r1, [r9], #4
 80237d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80237da:	d8e4      	bhi.n	80237a6 <__multiply+0xaa>
 80237dc:	9901      	ldr	r1, [sp, #4]
 80237de:	5072      	str	r2, [r6, r1]
 80237e0:	9a03      	ldr	r2, [sp, #12]
 80237e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80237e6:	3304      	adds	r3, #4
 80237e8:	f1b9 0f00 	cmp.w	r9, #0
 80237ec:	d01f      	beq.n	802382e <__multiply+0x132>
 80237ee:	6834      	ldr	r4, [r6, #0]
 80237f0:	f105 0114 	add.w	r1, r5, #20
 80237f4:	46b6      	mov	lr, r6
 80237f6:	f04f 0a00 	mov.w	sl, #0
 80237fa:	880a      	ldrh	r2, [r1, #0]
 80237fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8023800:	fb09 b202 	mla	r2, r9, r2, fp
 8023804:	4492      	add	sl, r2
 8023806:	b2a4      	uxth	r4, r4
 8023808:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802380c:	f84e 4b04 	str.w	r4, [lr], #4
 8023810:	f851 4b04 	ldr.w	r4, [r1], #4
 8023814:	f8be 2000 	ldrh.w	r2, [lr]
 8023818:	0c24      	lsrs	r4, r4, #16
 802381a:	fb09 2404 	mla	r4, r9, r4, r2
 802381e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8023822:	458c      	cmp	ip, r1
 8023824:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023828:	d8e7      	bhi.n	80237fa <__multiply+0xfe>
 802382a:	9a01      	ldr	r2, [sp, #4]
 802382c:	50b4      	str	r4, [r6, r2]
 802382e:	3604      	adds	r6, #4
 8023830:	e7a3      	b.n	802377a <__multiply+0x7e>
 8023832:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023836:	2b00      	cmp	r3, #0
 8023838:	d1a5      	bne.n	8023786 <__multiply+0x8a>
 802383a:	3f01      	subs	r7, #1
 802383c:	e7a1      	b.n	8023782 <__multiply+0x86>
 802383e:	bf00      	nop
 8023840:	08029e1d 	.word	0x08029e1d
 8023844:	08029e2e 	.word	0x08029e2e

08023848 <__pow5mult>:
 8023848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802384c:	4615      	mov	r5, r2
 802384e:	f012 0203 	ands.w	r2, r2, #3
 8023852:	4606      	mov	r6, r0
 8023854:	460f      	mov	r7, r1
 8023856:	d007      	beq.n	8023868 <__pow5mult+0x20>
 8023858:	4c25      	ldr	r4, [pc, #148]	; (80238f0 <__pow5mult+0xa8>)
 802385a:	3a01      	subs	r2, #1
 802385c:	2300      	movs	r3, #0
 802385e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023862:	f7ff fe9b 	bl	802359c <__multadd>
 8023866:	4607      	mov	r7, r0
 8023868:	10ad      	asrs	r5, r5, #2
 802386a:	d03d      	beq.n	80238e8 <__pow5mult+0xa0>
 802386c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802386e:	b97c      	cbnz	r4, 8023890 <__pow5mult+0x48>
 8023870:	2010      	movs	r0, #16
 8023872:	f7fd fcb9 	bl	80211e8 <malloc>
 8023876:	4602      	mov	r2, r0
 8023878:	6270      	str	r0, [r6, #36]	; 0x24
 802387a:	b928      	cbnz	r0, 8023888 <__pow5mult+0x40>
 802387c:	4b1d      	ldr	r3, [pc, #116]	; (80238f4 <__pow5mult+0xac>)
 802387e:	481e      	ldr	r0, [pc, #120]	; (80238f8 <__pow5mult+0xb0>)
 8023880:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8023884:	f7fe fe22 	bl	80224cc <__assert_func>
 8023888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802388c:	6004      	str	r4, [r0, #0]
 802388e:	60c4      	str	r4, [r0, #12]
 8023890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023898:	b94c      	cbnz	r4, 80238ae <__pow5mult+0x66>
 802389a:	f240 2171 	movw	r1, #625	; 0x271
 802389e:	4630      	mov	r0, r6
 80238a0:	f7ff ff16 	bl	80236d0 <__i2b>
 80238a4:	2300      	movs	r3, #0
 80238a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80238aa:	4604      	mov	r4, r0
 80238ac:	6003      	str	r3, [r0, #0]
 80238ae:	f04f 0900 	mov.w	r9, #0
 80238b2:	07eb      	lsls	r3, r5, #31
 80238b4:	d50a      	bpl.n	80238cc <__pow5mult+0x84>
 80238b6:	4639      	mov	r1, r7
 80238b8:	4622      	mov	r2, r4
 80238ba:	4630      	mov	r0, r6
 80238bc:	f7ff ff1e 	bl	80236fc <__multiply>
 80238c0:	4639      	mov	r1, r7
 80238c2:	4680      	mov	r8, r0
 80238c4:	4630      	mov	r0, r6
 80238c6:	f7ff fe47 	bl	8023558 <_Bfree>
 80238ca:	4647      	mov	r7, r8
 80238cc:	106d      	asrs	r5, r5, #1
 80238ce:	d00b      	beq.n	80238e8 <__pow5mult+0xa0>
 80238d0:	6820      	ldr	r0, [r4, #0]
 80238d2:	b938      	cbnz	r0, 80238e4 <__pow5mult+0x9c>
 80238d4:	4622      	mov	r2, r4
 80238d6:	4621      	mov	r1, r4
 80238d8:	4630      	mov	r0, r6
 80238da:	f7ff ff0f 	bl	80236fc <__multiply>
 80238de:	6020      	str	r0, [r4, #0]
 80238e0:	f8c0 9000 	str.w	r9, [r0]
 80238e4:	4604      	mov	r4, r0
 80238e6:	e7e4      	b.n	80238b2 <__pow5mult+0x6a>
 80238e8:	4638      	mov	r0, r7
 80238ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80238ee:	bf00      	nop
 80238f0:	08029f80 	.word	0x08029f80
 80238f4:	08029c9e 	.word	0x08029c9e
 80238f8:	08029e2e 	.word	0x08029e2e

080238fc <__lshift>:
 80238fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023900:	460c      	mov	r4, r1
 8023902:	6849      	ldr	r1, [r1, #4]
 8023904:	6923      	ldr	r3, [r4, #16]
 8023906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802390a:	68a3      	ldr	r3, [r4, #8]
 802390c:	4607      	mov	r7, r0
 802390e:	4691      	mov	r9, r2
 8023910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023914:	f108 0601 	add.w	r6, r8, #1
 8023918:	42b3      	cmp	r3, r6
 802391a:	db0b      	blt.n	8023934 <__lshift+0x38>
 802391c:	4638      	mov	r0, r7
 802391e:	f7ff fddb 	bl	80234d8 <_Balloc>
 8023922:	4605      	mov	r5, r0
 8023924:	b948      	cbnz	r0, 802393a <__lshift+0x3e>
 8023926:	4602      	mov	r2, r0
 8023928:	4b28      	ldr	r3, [pc, #160]	; (80239cc <__lshift+0xd0>)
 802392a:	4829      	ldr	r0, [pc, #164]	; (80239d0 <__lshift+0xd4>)
 802392c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023930:	f7fe fdcc 	bl	80224cc <__assert_func>
 8023934:	3101      	adds	r1, #1
 8023936:	005b      	lsls	r3, r3, #1
 8023938:	e7ee      	b.n	8023918 <__lshift+0x1c>
 802393a:	2300      	movs	r3, #0
 802393c:	f100 0114 	add.w	r1, r0, #20
 8023940:	f100 0210 	add.w	r2, r0, #16
 8023944:	4618      	mov	r0, r3
 8023946:	4553      	cmp	r3, sl
 8023948:	db33      	blt.n	80239b2 <__lshift+0xb6>
 802394a:	6920      	ldr	r0, [r4, #16]
 802394c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023950:	f104 0314 	add.w	r3, r4, #20
 8023954:	f019 091f 	ands.w	r9, r9, #31
 8023958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802395c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023960:	d02b      	beq.n	80239ba <__lshift+0xbe>
 8023962:	f1c9 0e20 	rsb	lr, r9, #32
 8023966:	468a      	mov	sl, r1
 8023968:	2200      	movs	r2, #0
 802396a:	6818      	ldr	r0, [r3, #0]
 802396c:	fa00 f009 	lsl.w	r0, r0, r9
 8023970:	4302      	orrs	r2, r0
 8023972:	f84a 2b04 	str.w	r2, [sl], #4
 8023976:	f853 2b04 	ldr.w	r2, [r3], #4
 802397a:	459c      	cmp	ip, r3
 802397c:	fa22 f20e 	lsr.w	r2, r2, lr
 8023980:	d8f3      	bhi.n	802396a <__lshift+0x6e>
 8023982:	ebac 0304 	sub.w	r3, ip, r4
 8023986:	3b15      	subs	r3, #21
 8023988:	f023 0303 	bic.w	r3, r3, #3
 802398c:	3304      	adds	r3, #4
 802398e:	f104 0015 	add.w	r0, r4, #21
 8023992:	4584      	cmp	ip, r0
 8023994:	bf38      	it	cc
 8023996:	2304      	movcc	r3, #4
 8023998:	50ca      	str	r2, [r1, r3]
 802399a:	b10a      	cbz	r2, 80239a0 <__lshift+0xa4>
 802399c:	f108 0602 	add.w	r6, r8, #2
 80239a0:	3e01      	subs	r6, #1
 80239a2:	4638      	mov	r0, r7
 80239a4:	612e      	str	r6, [r5, #16]
 80239a6:	4621      	mov	r1, r4
 80239a8:	f7ff fdd6 	bl	8023558 <_Bfree>
 80239ac:	4628      	mov	r0, r5
 80239ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80239b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80239b6:	3301      	adds	r3, #1
 80239b8:	e7c5      	b.n	8023946 <__lshift+0x4a>
 80239ba:	3904      	subs	r1, #4
 80239bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80239c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80239c4:	459c      	cmp	ip, r3
 80239c6:	d8f9      	bhi.n	80239bc <__lshift+0xc0>
 80239c8:	e7ea      	b.n	80239a0 <__lshift+0xa4>
 80239ca:	bf00      	nop
 80239cc:	08029e1d 	.word	0x08029e1d
 80239d0:	08029e2e 	.word	0x08029e2e

080239d4 <__mcmp>:
 80239d4:	b530      	push	{r4, r5, lr}
 80239d6:	6902      	ldr	r2, [r0, #16]
 80239d8:	690c      	ldr	r4, [r1, #16]
 80239da:	1b12      	subs	r2, r2, r4
 80239dc:	d10e      	bne.n	80239fc <__mcmp+0x28>
 80239de:	f100 0314 	add.w	r3, r0, #20
 80239e2:	3114      	adds	r1, #20
 80239e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80239e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80239ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80239f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80239f4:	42a5      	cmp	r5, r4
 80239f6:	d003      	beq.n	8023a00 <__mcmp+0x2c>
 80239f8:	d305      	bcc.n	8023a06 <__mcmp+0x32>
 80239fa:	2201      	movs	r2, #1
 80239fc:	4610      	mov	r0, r2
 80239fe:	bd30      	pop	{r4, r5, pc}
 8023a00:	4283      	cmp	r3, r0
 8023a02:	d3f3      	bcc.n	80239ec <__mcmp+0x18>
 8023a04:	e7fa      	b.n	80239fc <__mcmp+0x28>
 8023a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023a0a:	e7f7      	b.n	80239fc <__mcmp+0x28>

08023a0c <__mdiff>:
 8023a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a10:	460c      	mov	r4, r1
 8023a12:	4606      	mov	r6, r0
 8023a14:	4611      	mov	r1, r2
 8023a16:	4620      	mov	r0, r4
 8023a18:	4617      	mov	r7, r2
 8023a1a:	f7ff ffdb 	bl	80239d4 <__mcmp>
 8023a1e:	1e05      	subs	r5, r0, #0
 8023a20:	d110      	bne.n	8023a44 <__mdiff+0x38>
 8023a22:	4629      	mov	r1, r5
 8023a24:	4630      	mov	r0, r6
 8023a26:	f7ff fd57 	bl	80234d8 <_Balloc>
 8023a2a:	b930      	cbnz	r0, 8023a3a <__mdiff+0x2e>
 8023a2c:	4b39      	ldr	r3, [pc, #228]	; (8023b14 <__mdiff+0x108>)
 8023a2e:	4602      	mov	r2, r0
 8023a30:	f240 2132 	movw	r1, #562	; 0x232
 8023a34:	4838      	ldr	r0, [pc, #224]	; (8023b18 <__mdiff+0x10c>)
 8023a36:	f7fe fd49 	bl	80224cc <__assert_func>
 8023a3a:	2301      	movs	r3, #1
 8023a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a44:	bfa4      	itt	ge
 8023a46:	463b      	movge	r3, r7
 8023a48:	4627      	movge	r7, r4
 8023a4a:	4630      	mov	r0, r6
 8023a4c:	6879      	ldr	r1, [r7, #4]
 8023a4e:	bfa6      	itte	ge
 8023a50:	461c      	movge	r4, r3
 8023a52:	2500      	movge	r5, #0
 8023a54:	2501      	movlt	r5, #1
 8023a56:	f7ff fd3f 	bl	80234d8 <_Balloc>
 8023a5a:	b920      	cbnz	r0, 8023a66 <__mdiff+0x5a>
 8023a5c:	4b2d      	ldr	r3, [pc, #180]	; (8023b14 <__mdiff+0x108>)
 8023a5e:	4602      	mov	r2, r0
 8023a60:	f44f 7110 	mov.w	r1, #576	; 0x240
 8023a64:	e7e6      	b.n	8023a34 <__mdiff+0x28>
 8023a66:	693e      	ldr	r6, [r7, #16]
 8023a68:	60c5      	str	r5, [r0, #12]
 8023a6a:	6925      	ldr	r5, [r4, #16]
 8023a6c:	f107 0114 	add.w	r1, r7, #20
 8023a70:	f104 0914 	add.w	r9, r4, #20
 8023a74:	f100 0e14 	add.w	lr, r0, #20
 8023a78:	f107 0210 	add.w	r2, r7, #16
 8023a7c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8023a80:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8023a84:	46f2      	mov	sl, lr
 8023a86:	2700      	movs	r7, #0
 8023a88:	f859 3b04 	ldr.w	r3, [r9], #4
 8023a8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023a90:	fa1f f883 	uxth.w	r8, r3
 8023a94:	fa17 f78b 	uxtah	r7, r7, fp
 8023a98:	0c1b      	lsrs	r3, r3, #16
 8023a9a:	eba7 0808 	sub.w	r8, r7, r8
 8023a9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8023aa2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8023aa6:	fa1f f888 	uxth.w	r8, r8
 8023aaa:	141f      	asrs	r7, r3, #16
 8023aac:	454d      	cmp	r5, r9
 8023aae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8023ab2:	f84a 3b04 	str.w	r3, [sl], #4
 8023ab6:	d8e7      	bhi.n	8023a88 <__mdiff+0x7c>
 8023ab8:	1b2b      	subs	r3, r5, r4
 8023aba:	3b15      	subs	r3, #21
 8023abc:	f023 0303 	bic.w	r3, r3, #3
 8023ac0:	3304      	adds	r3, #4
 8023ac2:	3415      	adds	r4, #21
 8023ac4:	42a5      	cmp	r5, r4
 8023ac6:	bf38      	it	cc
 8023ac8:	2304      	movcc	r3, #4
 8023aca:	4419      	add	r1, r3
 8023acc:	4473      	add	r3, lr
 8023ace:	469e      	mov	lr, r3
 8023ad0:	460d      	mov	r5, r1
 8023ad2:	4565      	cmp	r5, ip
 8023ad4:	d30e      	bcc.n	8023af4 <__mdiff+0xe8>
 8023ad6:	f10c 0203 	add.w	r2, ip, #3
 8023ada:	1a52      	subs	r2, r2, r1
 8023adc:	f022 0203 	bic.w	r2, r2, #3
 8023ae0:	3903      	subs	r1, #3
 8023ae2:	458c      	cmp	ip, r1
 8023ae4:	bf38      	it	cc
 8023ae6:	2200      	movcc	r2, #0
 8023ae8:	441a      	add	r2, r3
 8023aea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8023aee:	b17b      	cbz	r3, 8023b10 <__mdiff+0x104>
 8023af0:	6106      	str	r6, [r0, #16]
 8023af2:	e7a5      	b.n	8023a40 <__mdiff+0x34>
 8023af4:	f855 8b04 	ldr.w	r8, [r5], #4
 8023af8:	fa17 f488 	uxtah	r4, r7, r8
 8023afc:	1422      	asrs	r2, r4, #16
 8023afe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8023b02:	b2a4      	uxth	r4, r4
 8023b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8023b08:	f84e 4b04 	str.w	r4, [lr], #4
 8023b0c:	1417      	asrs	r7, r2, #16
 8023b0e:	e7e0      	b.n	8023ad2 <__mdiff+0xc6>
 8023b10:	3e01      	subs	r6, #1
 8023b12:	e7ea      	b.n	8023aea <__mdiff+0xde>
 8023b14:	08029e1d 	.word	0x08029e1d
 8023b18:	08029e2e 	.word	0x08029e2e

08023b1c <__d2b>:
 8023b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023b20:	4689      	mov	r9, r1
 8023b22:	2101      	movs	r1, #1
 8023b24:	ec57 6b10 	vmov	r6, r7, d0
 8023b28:	4690      	mov	r8, r2
 8023b2a:	f7ff fcd5 	bl	80234d8 <_Balloc>
 8023b2e:	4604      	mov	r4, r0
 8023b30:	b930      	cbnz	r0, 8023b40 <__d2b+0x24>
 8023b32:	4602      	mov	r2, r0
 8023b34:	4b25      	ldr	r3, [pc, #148]	; (8023bcc <__d2b+0xb0>)
 8023b36:	4826      	ldr	r0, [pc, #152]	; (8023bd0 <__d2b+0xb4>)
 8023b38:	f240 310a 	movw	r1, #778	; 0x30a
 8023b3c:	f7fe fcc6 	bl	80224cc <__assert_func>
 8023b40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023b44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023b48:	bb35      	cbnz	r5, 8023b98 <__d2b+0x7c>
 8023b4a:	2e00      	cmp	r6, #0
 8023b4c:	9301      	str	r3, [sp, #4]
 8023b4e:	d028      	beq.n	8023ba2 <__d2b+0x86>
 8023b50:	4668      	mov	r0, sp
 8023b52:	9600      	str	r6, [sp, #0]
 8023b54:	f7ff fd8c 	bl	8023670 <__lo0bits>
 8023b58:	9900      	ldr	r1, [sp, #0]
 8023b5a:	b300      	cbz	r0, 8023b9e <__d2b+0x82>
 8023b5c:	9a01      	ldr	r2, [sp, #4]
 8023b5e:	f1c0 0320 	rsb	r3, r0, #32
 8023b62:	fa02 f303 	lsl.w	r3, r2, r3
 8023b66:	430b      	orrs	r3, r1
 8023b68:	40c2      	lsrs	r2, r0
 8023b6a:	6163      	str	r3, [r4, #20]
 8023b6c:	9201      	str	r2, [sp, #4]
 8023b6e:	9b01      	ldr	r3, [sp, #4]
 8023b70:	61a3      	str	r3, [r4, #24]
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	bf14      	ite	ne
 8023b76:	2202      	movne	r2, #2
 8023b78:	2201      	moveq	r2, #1
 8023b7a:	6122      	str	r2, [r4, #16]
 8023b7c:	b1d5      	cbz	r5, 8023bb4 <__d2b+0x98>
 8023b7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023b82:	4405      	add	r5, r0
 8023b84:	f8c9 5000 	str.w	r5, [r9]
 8023b88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023b8c:	f8c8 0000 	str.w	r0, [r8]
 8023b90:	4620      	mov	r0, r4
 8023b92:	b003      	add	sp, #12
 8023b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023b9c:	e7d5      	b.n	8023b4a <__d2b+0x2e>
 8023b9e:	6161      	str	r1, [r4, #20]
 8023ba0:	e7e5      	b.n	8023b6e <__d2b+0x52>
 8023ba2:	a801      	add	r0, sp, #4
 8023ba4:	f7ff fd64 	bl	8023670 <__lo0bits>
 8023ba8:	9b01      	ldr	r3, [sp, #4]
 8023baa:	6163      	str	r3, [r4, #20]
 8023bac:	2201      	movs	r2, #1
 8023bae:	6122      	str	r2, [r4, #16]
 8023bb0:	3020      	adds	r0, #32
 8023bb2:	e7e3      	b.n	8023b7c <__d2b+0x60>
 8023bb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023bb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023bbc:	f8c9 0000 	str.w	r0, [r9]
 8023bc0:	6918      	ldr	r0, [r3, #16]
 8023bc2:	f7ff fd35 	bl	8023630 <__hi0bits>
 8023bc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023bca:	e7df      	b.n	8023b8c <__d2b+0x70>
 8023bcc:	08029e1d 	.word	0x08029e1d
 8023bd0:	08029e2e 	.word	0x08029e2e

08023bd4 <_calloc_r>:
 8023bd4:	b513      	push	{r0, r1, r4, lr}
 8023bd6:	434a      	muls	r2, r1
 8023bd8:	4611      	mov	r1, r2
 8023bda:	9201      	str	r2, [sp, #4]
 8023bdc:	f7fd fba2 	bl	8021324 <_malloc_r>
 8023be0:	4604      	mov	r4, r0
 8023be2:	b118      	cbz	r0, 8023bec <_calloc_r+0x18>
 8023be4:	9a01      	ldr	r2, [sp, #4]
 8023be6:	2100      	movs	r1, #0
 8023be8:	f7fd fb44 	bl	8021274 <memset>
 8023bec:	4620      	mov	r0, r4
 8023bee:	b002      	add	sp, #8
 8023bf0:	bd10      	pop	{r4, pc}

08023bf2 <__ssputs_r>:
 8023bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023bf6:	688e      	ldr	r6, [r1, #8]
 8023bf8:	429e      	cmp	r6, r3
 8023bfa:	4682      	mov	sl, r0
 8023bfc:	460c      	mov	r4, r1
 8023bfe:	4690      	mov	r8, r2
 8023c00:	461f      	mov	r7, r3
 8023c02:	d838      	bhi.n	8023c76 <__ssputs_r+0x84>
 8023c04:	898a      	ldrh	r2, [r1, #12]
 8023c06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023c0a:	d032      	beq.n	8023c72 <__ssputs_r+0x80>
 8023c0c:	6825      	ldr	r5, [r4, #0]
 8023c0e:	6909      	ldr	r1, [r1, #16]
 8023c10:	eba5 0901 	sub.w	r9, r5, r1
 8023c14:	6965      	ldr	r5, [r4, #20]
 8023c16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023c1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023c1e:	3301      	adds	r3, #1
 8023c20:	444b      	add	r3, r9
 8023c22:	106d      	asrs	r5, r5, #1
 8023c24:	429d      	cmp	r5, r3
 8023c26:	bf38      	it	cc
 8023c28:	461d      	movcc	r5, r3
 8023c2a:	0553      	lsls	r3, r2, #21
 8023c2c:	d531      	bpl.n	8023c92 <__ssputs_r+0xa0>
 8023c2e:	4629      	mov	r1, r5
 8023c30:	f7fd fb78 	bl	8021324 <_malloc_r>
 8023c34:	4606      	mov	r6, r0
 8023c36:	b950      	cbnz	r0, 8023c4e <__ssputs_r+0x5c>
 8023c38:	230c      	movs	r3, #12
 8023c3a:	f8ca 3000 	str.w	r3, [sl]
 8023c3e:	89a3      	ldrh	r3, [r4, #12]
 8023c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023c44:	81a3      	strh	r3, [r4, #12]
 8023c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c4e:	6921      	ldr	r1, [r4, #16]
 8023c50:	464a      	mov	r2, r9
 8023c52:	f7fd fae7 	bl	8021224 <memcpy>
 8023c56:	89a3      	ldrh	r3, [r4, #12]
 8023c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023c60:	81a3      	strh	r3, [r4, #12]
 8023c62:	6126      	str	r6, [r4, #16]
 8023c64:	6165      	str	r5, [r4, #20]
 8023c66:	444e      	add	r6, r9
 8023c68:	eba5 0509 	sub.w	r5, r5, r9
 8023c6c:	6026      	str	r6, [r4, #0]
 8023c6e:	60a5      	str	r5, [r4, #8]
 8023c70:	463e      	mov	r6, r7
 8023c72:	42be      	cmp	r6, r7
 8023c74:	d900      	bls.n	8023c78 <__ssputs_r+0x86>
 8023c76:	463e      	mov	r6, r7
 8023c78:	4632      	mov	r2, r6
 8023c7a:	6820      	ldr	r0, [r4, #0]
 8023c7c:	4641      	mov	r1, r8
 8023c7e:	f7fd fadf 	bl	8021240 <memmove>
 8023c82:	68a3      	ldr	r3, [r4, #8]
 8023c84:	6822      	ldr	r2, [r4, #0]
 8023c86:	1b9b      	subs	r3, r3, r6
 8023c88:	4432      	add	r2, r6
 8023c8a:	60a3      	str	r3, [r4, #8]
 8023c8c:	6022      	str	r2, [r4, #0]
 8023c8e:	2000      	movs	r0, #0
 8023c90:	e7db      	b.n	8023c4a <__ssputs_r+0x58>
 8023c92:	462a      	mov	r2, r5
 8023c94:	f000 fec0 	bl	8024a18 <_realloc_r>
 8023c98:	4606      	mov	r6, r0
 8023c9a:	2800      	cmp	r0, #0
 8023c9c:	d1e1      	bne.n	8023c62 <__ssputs_r+0x70>
 8023c9e:	6921      	ldr	r1, [r4, #16]
 8023ca0:	4650      	mov	r0, sl
 8023ca2:	f7fd faef 	bl	8021284 <_free_r>
 8023ca6:	e7c7      	b.n	8023c38 <__ssputs_r+0x46>

08023ca8 <_svfiprintf_r>:
 8023ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cac:	4698      	mov	r8, r3
 8023cae:	898b      	ldrh	r3, [r1, #12]
 8023cb0:	061b      	lsls	r3, r3, #24
 8023cb2:	b09d      	sub	sp, #116	; 0x74
 8023cb4:	4607      	mov	r7, r0
 8023cb6:	460d      	mov	r5, r1
 8023cb8:	4614      	mov	r4, r2
 8023cba:	d50e      	bpl.n	8023cda <_svfiprintf_r+0x32>
 8023cbc:	690b      	ldr	r3, [r1, #16]
 8023cbe:	b963      	cbnz	r3, 8023cda <_svfiprintf_r+0x32>
 8023cc0:	2140      	movs	r1, #64	; 0x40
 8023cc2:	f7fd fb2f 	bl	8021324 <_malloc_r>
 8023cc6:	6028      	str	r0, [r5, #0]
 8023cc8:	6128      	str	r0, [r5, #16]
 8023cca:	b920      	cbnz	r0, 8023cd6 <_svfiprintf_r+0x2e>
 8023ccc:	230c      	movs	r3, #12
 8023cce:	603b      	str	r3, [r7, #0]
 8023cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023cd4:	e0d1      	b.n	8023e7a <_svfiprintf_r+0x1d2>
 8023cd6:	2340      	movs	r3, #64	; 0x40
 8023cd8:	616b      	str	r3, [r5, #20]
 8023cda:	2300      	movs	r3, #0
 8023cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8023cde:	2320      	movs	r3, #32
 8023ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ce8:	2330      	movs	r3, #48	; 0x30
 8023cea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023e94 <_svfiprintf_r+0x1ec>
 8023cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023cf2:	f04f 0901 	mov.w	r9, #1
 8023cf6:	4623      	mov	r3, r4
 8023cf8:	469a      	mov	sl, r3
 8023cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023cfe:	b10a      	cbz	r2, 8023d04 <_svfiprintf_r+0x5c>
 8023d00:	2a25      	cmp	r2, #37	; 0x25
 8023d02:	d1f9      	bne.n	8023cf8 <_svfiprintf_r+0x50>
 8023d04:	ebba 0b04 	subs.w	fp, sl, r4
 8023d08:	d00b      	beq.n	8023d22 <_svfiprintf_r+0x7a>
 8023d0a:	465b      	mov	r3, fp
 8023d0c:	4622      	mov	r2, r4
 8023d0e:	4629      	mov	r1, r5
 8023d10:	4638      	mov	r0, r7
 8023d12:	f7ff ff6e 	bl	8023bf2 <__ssputs_r>
 8023d16:	3001      	adds	r0, #1
 8023d18:	f000 80aa 	beq.w	8023e70 <_svfiprintf_r+0x1c8>
 8023d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023d1e:	445a      	add	r2, fp
 8023d20:	9209      	str	r2, [sp, #36]	; 0x24
 8023d22:	f89a 3000 	ldrb.w	r3, [sl]
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	f000 80a2 	beq.w	8023e70 <_svfiprintf_r+0x1c8>
 8023d2c:	2300      	movs	r3, #0
 8023d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023d36:	f10a 0a01 	add.w	sl, sl, #1
 8023d3a:	9304      	str	r3, [sp, #16]
 8023d3c:	9307      	str	r3, [sp, #28]
 8023d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023d42:	931a      	str	r3, [sp, #104]	; 0x68
 8023d44:	4654      	mov	r4, sl
 8023d46:	2205      	movs	r2, #5
 8023d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d4c:	4851      	ldr	r0, [pc, #324]	; (8023e94 <_svfiprintf_r+0x1ec>)
 8023d4e:	f7dc fa57 	bl	8000200 <memchr>
 8023d52:	9a04      	ldr	r2, [sp, #16]
 8023d54:	b9d8      	cbnz	r0, 8023d8e <_svfiprintf_r+0xe6>
 8023d56:	06d0      	lsls	r0, r2, #27
 8023d58:	bf44      	itt	mi
 8023d5a:	2320      	movmi	r3, #32
 8023d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023d60:	0711      	lsls	r1, r2, #28
 8023d62:	bf44      	itt	mi
 8023d64:	232b      	movmi	r3, #43	; 0x2b
 8023d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8023d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8023d70:	d015      	beq.n	8023d9e <_svfiprintf_r+0xf6>
 8023d72:	9a07      	ldr	r2, [sp, #28]
 8023d74:	4654      	mov	r4, sl
 8023d76:	2000      	movs	r0, #0
 8023d78:	f04f 0c0a 	mov.w	ip, #10
 8023d7c:	4621      	mov	r1, r4
 8023d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023d82:	3b30      	subs	r3, #48	; 0x30
 8023d84:	2b09      	cmp	r3, #9
 8023d86:	d94e      	bls.n	8023e26 <_svfiprintf_r+0x17e>
 8023d88:	b1b0      	cbz	r0, 8023db8 <_svfiprintf_r+0x110>
 8023d8a:	9207      	str	r2, [sp, #28]
 8023d8c:	e014      	b.n	8023db8 <_svfiprintf_r+0x110>
 8023d8e:	eba0 0308 	sub.w	r3, r0, r8
 8023d92:	fa09 f303 	lsl.w	r3, r9, r3
 8023d96:	4313      	orrs	r3, r2
 8023d98:	9304      	str	r3, [sp, #16]
 8023d9a:	46a2      	mov	sl, r4
 8023d9c:	e7d2      	b.n	8023d44 <_svfiprintf_r+0x9c>
 8023d9e:	9b03      	ldr	r3, [sp, #12]
 8023da0:	1d19      	adds	r1, r3, #4
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	9103      	str	r1, [sp, #12]
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	bfbb      	ittet	lt
 8023daa:	425b      	neglt	r3, r3
 8023dac:	f042 0202 	orrlt.w	r2, r2, #2
 8023db0:	9307      	strge	r3, [sp, #28]
 8023db2:	9307      	strlt	r3, [sp, #28]
 8023db4:	bfb8      	it	lt
 8023db6:	9204      	strlt	r2, [sp, #16]
 8023db8:	7823      	ldrb	r3, [r4, #0]
 8023dba:	2b2e      	cmp	r3, #46	; 0x2e
 8023dbc:	d10c      	bne.n	8023dd8 <_svfiprintf_r+0x130>
 8023dbe:	7863      	ldrb	r3, [r4, #1]
 8023dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8023dc2:	d135      	bne.n	8023e30 <_svfiprintf_r+0x188>
 8023dc4:	9b03      	ldr	r3, [sp, #12]
 8023dc6:	1d1a      	adds	r2, r3, #4
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	9203      	str	r2, [sp, #12]
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	bfb8      	it	lt
 8023dd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023dd4:	3402      	adds	r4, #2
 8023dd6:	9305      	str	r3, [sp, #20]
 8023dd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023ea4 <_svfiprintf_r+0x1fc>
 8023ddc:	7821      	ldrb	r1, [r4, #0]
 8023dde:	2203      	movs	r2, #3
 8023de0:	4650      	mov	r0, sl
 8023de2:	f7dc fa0d 	bl	8000200 <memchr>
 8023de6:	b140      	cbz	r0, 8023dfa <_svfiprintf_r+0x152>
 8023de8:	2340      	movs	r3, #64	; 0x40
 8023dea:	eba0 000a 	sub.w	r0, r0, sl
 8023dee:	fa03 f000 	lsl.w	r0, r3, r0
 8023df2:	9b04      	ldr	r3, [sp, #16]
 8023df4:	4303      	orrs	r3, r0
 8023df6:	3401      	adds	r4, #1
 8023df8:	9304      	str	r3, [sp, #16]
 8023dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023dfe:	4826      	ldr	r0, [pc, #152]	; (8023e98 <_svfiprintf_r+0x1f0>)
 8023e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023e04:	2206      	movs	r2, #6
 8023e06:	f7dc f9fb 	bl	8000200 <memchr>
 8023e0a:	2800      	cmp	r0, #0
 8023e0c:	d038      	beq.n	8023e80 <_svfiprintf_r+0x1d8>
 8023e0e:	4b23      	ldr	r3, [pc, #140]	; (8023e9c <_svfiprintf_r+0x1f4>)
 8023e10:	bb1b      	cbnz	r3, 8023e5a <_svfiprintf_r+0x1b2>
 8023e12:	9b03      	ldr	r3, [sp, #12]
 8023e14:	3307      	adds	r3, #7
 8023e16:	f023 0307 	bic.w	r3, r3, #7
 8023e1a:	3308      	adds	r3, #8
 8023e1c:	9303      	str	r3, [sp, #12]
 8023e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e20:	4433      	add	r3, r6
 8023e22:	9309      	str	r3, [sp, #36]	; 0x24
 8023e24:	e767      	b.n	8023cf6 <_svfiprintf_r+0x4e>
 8023e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8023e2a:	460c      	mov	r4, r1
 8023e2c:	2001      	movs	r0, #1
 8023e2e:	e7a5      	b.n	8023d7c <_svfiprintf_r+0xd4>
 8023e30:	2300      	movs	r3, #0
 8023e32:	3401      	adds	r4, #1
 8023e34:	9305      	str	r3, [sp, #20]
 8023e36:	4619      	mov	r1, r3
 8023e38:	f04f 0c0a 	mov.w	ip, #10
 8023e3c:	4620      	mov	r0, r4
 8023e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023e42:	3a30      	subs	r2, #48	; 0x30
 8023e44:	2a09      	cmp	r2, #9
 8023e46:	d903      	bls.n	8023e50 <_svfiprintf_r+0x1a8>
 8023e48:	2b00      	cmp	r3, #0
 8023e4a:	d0c5      	beq.n	8023dd8 <_svfiprintf_r+0x130>
 8023e4c:	9105      	str	r1, [sp, #20]
 8023e4e:	e7c3      	b.n	8023dd8 <_svfiprintf_r+0x130>
 8023e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8023e54:	4604      	mov	r4, r0
 8023e56:	2301      	movs	r3, #1
 8023e58:	e7f0      	b.n	8023e3c <_svfiprintf_r+0x194>
 8023e5a:	ab03      	add	r3, sp, #12
 8023e5c:	9300      	str	r3, [sp, #0]
 8023e5e:	462a      	mov	r2, r5
 8023e60:	4b0f      	ldr	r3, [pc, #60]	; (8023ea0 <_svfiprintf_r+0x1f8>)
 8023e62:	a904      	add	r1, sp, #16
 8023e64:	4638      	mov	r0, r7
 8023e66:	f7fd fb57 	bl	8021518 <_printf_float>
 8023e6a:	1c42      	adds	r2, r0, #1
 8023e6c:	4606      	mov	r6, r0
 8023e6e:	d1d6      	bne.n	8023e1e <_svfiprintf_r+0x176>
 8023e70:	89ab      	ldrh	r3, [r5, #12]
 8023e72:	065b      	lsls	r3, r3, #25
 8023e74:	f53f af2c 	bmi.w	8023cd0 <_svfiprintf_r+0x28>
 8023e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023e7a:	b01d      	add	sp, #116	; 0x74
 8023e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e80:	ab03      	add	r3, sp, #12
 8023e82:	9300      	str	r3, [sp, #0]
 8023e84:	462a      	mov	r2, r5
 8023e86:	4b06      	ldr	r3, [pc, #24]	; (8023ea0 <_svfiprintf_r+0x1f8>)
 8023e88:	a904      	add	r1, sp, #16
 8023e8a:	4638      	mov	r0, r7
 8023e8c:	f7fd fde8 	bl	8021a60 <_printf_i>
 8023e90:	e7eb      	b.n	8023e6a <_svfiprintf_r+0x1c2>
 8023e92:	bf00      	nop
 8023e94:	08029f8c 	.word	0x08029f8c
 8023e98:	08029f96 	.word	0x08029f96
 8023e9c:	08021519 	.word	0x08021519
 8023ea0:	08023bf3 	.word	0x08023bf3
 8023ea4:	08029f92 	.word	0x08029f92

08023ea8 <_sungetc_r>:
 8023ea8:	b538      	push	{r3, r4, r5, lr}
 8023eaa:	1c4b      	adds	r3, r1, #1
 8023eac:	4614      	mov	r4, r2
 8023eae:	d103      	bne.n	8023eb8 <_sungetc_r+0x10>
 8023eb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8023eb4:	4628      	mov	r0, r5
 8023eb6:	bd38      	pop	{r3, r4, r5, pc}
 8023eb8:	8993      	ldrh	r3, [r2, #12]
 8023eba:	f023 0320 	bic.w	r3, r3, #32
 8023ebe:	8193      	strh	r3, [r2, #12]
 8023ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023ec2:	6852      	ldr	r2, [r2, #4]
 8023ec4:	b2cd      	uxtb	r5, r1
 8023ec6:	b18b      	cbz	r3, 8023eec <_sungetc_r+0x44>
 8023ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023eca:	4293      	cmp	r3, r2
 8023ecc:	dd08      	ble.n	8023ee0 <_sungetc_r+0x38>
 8023ece:	6823      	ldr	r3, [r4, #0]
 8023ed0:	1e5a      	subs	r2, r3, #1
 8023ed2:	6022      	str	r2, [r4, #0]
 8023ed4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023ed8:	6863      	ldr	r3, [r4, #4]
 8023eda:	3301      	adds	r3, #1
 8023edc:	6063      	str	r3, [r4, #4]
 8023ede:	e7e9      	b.n	8023eb4 <_sungetc_r+0xc>
 8023ee0:	4621      	mov	r1, r4
 8023ee2:	f000 fd23 	bl	802492c <__submore>
 8023ee6:	2800      	cmp	r0, #0
 8023ee8:	d0f1      	beq.n	8023ece <_sungetc_r+0x26>
 8023eea:	e7e1      	b.n	8023eb0 <_sungetc_r+0x8>
 8023eec:	6921      	ldr	r1, [r4, #16]
 8023eee:	6823      	ldr	r3, [r4, #0]
 8023ef0:	b151      	cbz	r1, 8023f08 <_sungetc_r+0x60>
 8023ef2:	4299      	cmp	r1, r3
 8023ef4:	d208      	bcs.n	8023f08 <_sungetc_r+0x60>
 8023ef6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023efa:	42a9      	cmp	r1, r5
 8023efc:	d104      	bne.n	8023f08 <_sungetc_r+0x60>
 8023efe:	3b01      	subs	r3, #1
 8023f00:	3201      	adds	r2, #1
 8023f02:	6023      	str	r3, [r4, #0]
 8023f04:	6062      	str	r2, [r4, #4]
 8023f06:	e7d5      	b.n	8023eb4 <_sungetc_r+0xc>
 8023f08:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f10:	6363      	str	r3, [r4, #52]	; 0x34
 8023f12:	2303      	movs	r3, #3
 8023f14:	63a3      	str	r3, [r4, #56]	; 0x38
 8023f16:	4623      	mov	r3, r4
 8023f18:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023f1c:	6023      	str	r3, [r4, #0]
 8023f1e:	2301      	movs	r3, #1
 8023f20:	e7dc      	b.n	8023edc <_sungetc_r+0x34>

08023f22 <__ssrefill_r>:
 8023f22:	b510      	push	{r4, lr}
 8023f24:	460c      	mov	r4, r1
 8023f26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023f28:	b169      	cbz	r1, 8023f46 <__ssrefill_r+0x24>
 8023f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023f2e:	4299      	cmp	r1, r3
 8023f30:	d001      	beq.n	8023f36 <__ssrefill_r+0x14>
 8023f32:	f7fd f9a7 	bl	8021284 <_free_r>
 8023f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023f38:	6063      	str	r3, [r4, #4]
 8023f3a:	2000      	movs	r0, #0
 8023f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8023f3e:	b113      	cbz	r3, 8023f46 <__ssrefill_r+0x24>
 8023f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023f42:	6023      	str	r3, [r4, #0]
 8023f44:	bd10      	pop	{r4, pc}
 8023f46:	6923      	ldr	r3, [r4, #16]
 8023f48:	6023      	str	r3, [r4, #0]
 8023f4a:	2300      	movs	r3, #0
 8023f4c:	6063      	str	r3, [r4, #4]
 8023f4e:	89a3      	ldrh	r3, [r4, #12]
 8023f50:	f043 0320 	orr.w	r3, r3, #32
 8023f54:	81a3      	strh	r3, [r4, #12]
 8023f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023f5a:	e7f3      	b.n	8023f44 <__ssrefill_r+0x22>

08023f5c <__ssvfiscanf_r>:
 8023f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f60:	460c      	mov	r4, r1
 8023f62:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023f66:	2100      	movs	r1, #0
 8023f68:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8023f6c:	49b2      	ldr	r1, [pc, #712]	; (8024238 <__ssvfiscanf_r+0x2dc>)
 8023f6e:	91a0      	str	r1, [sp, #640]	; 0x280
 8023f70:	f10d 0804 	add.w	r8, sp, #4
 8023f74:	49b1      	ldr	r1, [pc, #708]	; (802423c <__ssvfiscanf_r+0x2e0>)
 8023f76:	4fb2      	ldr	r7, [pc, #712]	; (8024240 <__ssvfiscanf_r+0x2e4>)
 8023f78:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8024244 <__ssvfiscanf_r+0x2e8>
 8023f7c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023f80:	4606      	mov	r6, r0
 8023f82:	91a1      	str	r1, [sp, #644]	; 0x284
 8023f84:	9300      	str	r3, [sp, #0]
 8023f86:	f892 a000 	ldrb.w	sl, [r2]
 8023f8a:	f1ba 0f00 	cmp.w	sl, #0
 8023f8e:	f000 8151 	beq.w	8024234 <__ssvfiscanf_r+0x2d8>
 8023f92:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8023f96:	f013 0308 	ands.w	r3, r3, #8
 8023f9a:	f102 0501 	add.w	r5, r2, #1
 8023f9e:	d019      	beq.n	8023fd4 <__ssvfiscanf_r+0x78>
 8023fa0:	6863      	ldr	r3, [r4, #4]
 8023fa2:	2b00      	cmp	r3, #0
 8023fa4:	dd0f      	ble.n	8023fc6 <__ssvfiscanf_r+0x6a>
 8023fa6:	6823      	ldr	r3, [r4, #0]
 8023fa8:	781a      	ldrb	r2, [r3, #0]
 8023faa:	5cba      	ldrb	r2, [r7, r2]
 8023fac:	0712      	lsls	r2, r2, #28
 8023fae:	d401      	bmi.n	8023fb4 <__ssvfiscanf_r+0x58>
 8023fb0:	462a      	mov	r2, r5
 8023fb2:	e7e8      	b.n	8023f86 <__ssvfiscanf_r+0x2a>
 8023fb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023fb6:	3201      	adds	r2, #1
 8023fb8:	9245      	str	r2, [sp, #276]	; 0x114
 8023fba:	6862      	ldr	r2, [r4, #4]
 8023fbc:	3301      	adds	r3, #1
 8023fbe:	3a01      	subs	r2, #1
 8023fc0:	6062      	str	r2, [r4, #4]
 8023fc2:	6023      	str	r3, [r4, #0]
 8023fc4:	e7ec      	b.n	8023fa0 <__ssvfiscanf_r+0x44>
 8023fc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023fc8:	4621      	mov	r1, r4
 8023fca:	4630      	mov	r0, r6
 8023fcc:	4798      	blx	r3
 8023fce:	2800      	cmp	r0, #0
 8023fd0:	d0e9      	beq.n	8023fa6 <__ssvfiscanf_r+0x4a>
 8023fd2:	e7ed      	b.n	8023fb0 <__ssvfiscanf_r+0x54>
 8023fd4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8023fd8:	f040 8083 	bne.w	80240e2 <__ssvfiscanf_r+0x186>
 8023fdc:	9341      	str	r3, [sp, #260]	; 0x104
 8023fde:	9343      	str	r3, [sp, #268]	; 0x10c
 8023fe0:	7853      	ldrb	r3, [r2, #1]
 8023fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8023fe4:	bf02      	ittt	eq
 8023fe6:	2310      	moveq	r3, #16
 8023fe8:	1c95      	addeq	r5, r2, #2
 8023fea:	9341      	streq	r3, [sp, #260]	; 0x104
 8023fec:	220a      	movs	r2, #10
 8023fee:	46ab      	mov	fp, r5
 8023ff0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8023ff4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8023ff8:	2b09      	cmp	r3, #9
 8023ffa:	d91d      	bls.n	8024038 <__ssvfiscanf_r+0xdc>
 8023ffc:	4891      	ldr	r0, [pc, #580]	; (8024244 <__ssvfiscanf_r+0x2e8>)
 8023ffe:	2203      	movs	r2, #3
 8024000:	f7dc f8fe 	bl	8000200 <memchr>
 8024004:	b140      	cbz	r0, 8024018 <__ssvfiscanf_r+0xbc>
 8024006:	2301      	movs	r3, #1
 8024008:	eba0 0009 	sub.w	r0, r0, r9
 802400c:	fa03 f000 	lsl.w	r0, r3, r0
 8024010:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024012:	4318      	orrs	r0, r3
 8024014:	9041      	str	r0, [sp, #260]	; 0x104
 8024016:	465d      	mov	r5, fp
 8024018:	f815 3b01 	ldrb.w	r3, [r5], #1
 802401c:	2b78      	cmp	r3, #120	; 0x78
 802401e:	d806      	bhi.n	802402e <__ssvfiscanf_r+0xd2>
 8024020:	2b57      	cmp	r3, #87	; 0x57
 8024022:	d810      	bhi.n	8024046 <__ssvfiscanf_r+0xea>
 8024024:	2b25      	cmp	r3, #37	; 0x25
 8024026:	d05c      	beq.n	80240e2 <__ssvfiscanf_r+0x186>
 8024028:	d856      	bhi.n	80240d8 <__ssvfiscanf_r+0x17c>
 802402a:	2b00      	cmp	r3, #0
 802402c:	d074      	beq.n	8024118 <__ssvfiscanf_r+0x1bc>
 802402e:	2303      	movs	r3, #3
 8024030:	9347      	str	r3, [sp, #284]	; 0x11c
 8024032:	230a      	movs	r3, #10
 8024034:	9342      	str	r3, [sp, #264]	; 0x108
 8024036:	e081      	b.n	802413c <__ssvfiscanf_r+0x1e0>
 8024038:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802403a:	fb02 1303 	mla	r3, r2, r3, r1
 802403e:	3b30      	subs	r3, #48	; 0x30
 8024040:	9343      	str	r3, [sp, #268]	; 0x10c
 8024042:	465d      	mov	r5, fp
 8024044:	e7d3      	b.n	8023fee <__ssvfiscanf_r+0x92>
 8024046:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802404a:	2a20      	cmp	r2, #32
 802404c:	d8ef      	bhi.n	802402e <__ssvfiscanf_r+0xd2>
 802404e:	a101      	add	r1, pc, #4	; (adr r1, 8024054 <__ssvfiscanf_r+0xf8>)
 8024050:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024054:	08024127 	.word	0x08024127
 8024058:	0802402f 	.word	0x0802402f
 802405c:	0802402f 	.word	0x0802402f
 8024060:	08024185 	.word	0x08024185
 8024064:	0802402f 	.word	0x0802402f
 8024068:	0802402f 	.word	0x0802402f
 802406c:	0802402f 	.word	0x0802402f
 8024070:	0802402f 	.word	0x0802402f
 8024074:	0802402f 	.word	0x0802402f
 8024078:	0802402f 	.word	0x0802402f
 802407c:	0802402f 	.word	0x0802402f
 8024080:	0802419b 	.word	0x0802419b
 8024084:	08024171 	.word	0x08024171
 8024088:	080240df 	.word	0x080240df
 802408c:	080240df 	.word	0x080240df
 8024090:	080240df 	.word	0x080240df
 8024094:	0802402f 	.word	0x0802402f
 8024098:	08024175 	.word	0x08024175
 802409c:	0802402f 	.word	0x0802402f
 80240a0:	0802402f 	.word	0x0802402f
 80240a4:	0802402f 	.word	0x0802402f
 80240a8:	0802402f 	.word	0x0802402f
 80240ac:	080241ab 	.word	0x080241ab
 80240b0:	0802417d 	.word	0x0802417d
 80240b4:	0802411f 	.word	0x0802411f
 80240b8:	0802402f 	.word	0x0802402f
 80240bc:	0802402f 	.word	0x0802402f
 80240c0:	080241a7 	.word	0x080241a7
 80240c4:	0802402f 	.word	0x0802402f
 80240c8:	08024171 	.word	0x08024171
 80240cc:	0802402f 	.word	0x0802402f
 80240d0:	0802402f 	.word	0x0802402f
 80240d4:	08024127 	.word	0x08024127
 80240d8:	3b45      	subs	r3, #69	; 0x45
 80240da:	2b02      	cmp	r3, #2
 80240dc:	d8a7      	bhi.n	802402e <__ssvfiscanf_r+0xd2>
 80240de:	2305      	movs	r3, #5
 80240e0:	e02b      	b.n	802413a <__ssvfiscanf_r+0x1de>
 80240e2:	6863      	ldr	r3, [r4, #4]
 80240e4:	2b00      	cmp	r3, #0
 80240e6:	dd0d      	ble.n	8024104 <__ssvfiscanf_r+0x1a8>
 80240e8:	6823      	ldr	r3, [r4, #0]
 80240ea:	781a      	ldrb	r2, [r3, #0]
 80240ec:	4552      	cmp	r2, sl
 80240ee:	f040 80a1 	bne.w	8024234 <__ssvfiscanf_r+0x2d8>
 80240f2:	3301      	adds	r3, #1
 80240f4:	6862      	ldr	r2, [r4, #4]
 80240f6:	6023      	str	r3, [r4, #0]
 80240f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80240fa:	3a01      	subs	r2, #1
 80240fc:	3301      	adds	r3, #1
 80240fe:	6062      	str	r2, [r4, #4]
 8024100:	9345      	str	r3, [sp, #276]	; 0x114
 8024102:	e755      	b.n	8023fb0 <__ssvfiscanf_r+0x54>
 8024104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024106:	4621      	mov	r1, r4
 8024108:	4630      	mov	r0, r6
 802410a:	4798      	blx	r3
 802410c:	2800      	cmp	r0, #0
 802410e:	d0eb      	beq.n	80240e8 <__ssvfiscanf_r+0x18c>
 8024110:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024112:	2800      	cmp	r0, #0
 8024114:	f040 8084 	bne.w	8024220 <__ssvfiscanf_r+0x2c4>
 8024118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802411c:	e086      	b.n	802422c <__ssvfiscanf_r+0x2d0>
 802411e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024120:	f042 0220 	orr.w	r2, r2, #32
 8024124:	9241      	str	r2, [sp, #260]	; 0x104
 8024126:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802412c:	9241      	str	r2, [sp, #260]	; 0x104
 802412e:	2210      	movs	r2, #16
 8024130:	2b6f      	cmp	r3, #111	; 0x6f
 8024132:	9242      	str	r2, [sp, #264]	; 0x108
 8024134:	bf34      	ite	cc
 8024136:	2303      	movcc	r3, #3
 8024138:	2304      	movcs	r3, #4
 802413a:	9347      	str	r3, [sp, #284]	; 0x11c
 802413c:	6863      	ldr	r3, [r4, #4]
 802413e:	2b00      	cmp	r3, #0
 8024140:	dd41      	ble.n	80241c6 <__ssvfiscanf_r+0x26a>
 8024142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024144:	0659      	lsls	r1, r3, #25
 8024146:	d404      	bmi.n	8024152 <__ssvfiscanf_r+0x1f6>
 8024148:	6823      	ldr	r3, [r4, #0]
 802414a:	781a      	ldrb	r2, [r3, #0]
 802414c:	5cba      	ldrb	r2, [r7, r2]
 802414e:	0712      	lsls	r2, r2, #28
 8024150:	d440      	bmi.n	80241d4 <__ssvfiscanf_r+0x278>
 8024152:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8024154:	2b02      	cmp	r3, #2
 8024156:	dc4f      	bgt.n	80241f8 <__ssvfiscanf_r+0x29c>
 8024158:	466b      	mov	r3, sp
 802415a:	4622      	mov	r2, r4
 802415c:	a941      	add	r1, sp, #260	; 0x104
 802415e:	4630      	mov	r0, r6
 8024160:	f000 f9ce 	bl	8024500 <_scanf_chars>
 8024164:	2801      	cmp	r0, #1
 8024166:	d065      	beq.n	8024234 <__ssvfiscanf_r+0x2d8>
 8024168:	2802      	cmp	r0, #2
 802416a:	f47f af21 	bne.w	8023fb0 <__ssvfiscanf_r+0x54>
 802416e:	e7cf      	b.n	8024110 <__ssvfiscanf_r+0x1b4>
 8024170:	220a      	movs	r2, #10
 8024172:	e7dd      	b.n	8024130 <__ssvfiscanf_r+0x1d4>
 8024174:	2300      	movs	r3, #0
 8024176:	9342      	str	r3, [sp, #264]	; 0x108
 8024178:	2303      	movs	r3, #3
 802417a:	e7de      	b.n	802413a <__ssvfiscanf_r+0x1de>
 802417c:	2308      	movs	r3, #8
 802417e:	9342      	str	r3, [sp, #264]	; 0x108
 8024180:	2304      	movs	r3, #4
 8024182:	e7da      	b.n	802413a <__ssvfiscanf_r+0x1de>
 8024184:	4629      	mov	r1, r5
 8024186:	4640      	mov	r0, r8
 8024188:	f000 fb18 	bl	80247bc <__sccl>
 802418c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802418e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024192:	9341      	str	r3, [sp, #260]	; 0x104
 8024194:	4605      	mov	r5, r0
 8024196:	2301      	movs	r3, #1
 8024198:	e7cf      	b.n	802413a <__ssvfiscanf_r+0x1de>
 802419a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80241a0:	9341      	str	r3, [sp, #260]	; 0x104
 80241a2:	2300      	movs	r3, #0
 80241a4:	e7c9      	b.n	802413a <__ssvfiscanf_r+0x1de>
 80241a6:	2302      	movs	r3, #2
 80241a8:	e7c7      	b.n	802413a <__ssvfiscanf_r+0x1de>
 80241aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80241ac:	06c3      	lsls	r3, r0, #27
 80241ae:	f53f aeff 	bmi.w	8023fb0 <__ssvfiscanf_r+0x54>
 80241b2:	9b00      	ldr	r3, [sp, #0]
 80241b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80241b6:	1d19      	adds	r1, r3, #4
 80241b8:	9100      	str	r1, [sp, #0]
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	07c0      	lsls	r0, r0, #31
 80241be:	bf4c      	ite	mi
 80241c0:	801a      	strhmi	r2, [r3, #0]
 80241c2:	601a      	strpl	r2, [r3, #0]
 80241c4:	e6f4      	b.n	8023fb0 <__ssvfiscanf_r+0x54>
 80241c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80241c8:	4621      	mov	r1, r4
 80241ca:	4630      	mov	r0, r6
 80241cc:	4798      	blx	r3
 80241ce:	2800      	cmp	r0, #0
 80241d0:	d0b7      	beq.n	8024142 <__ssvfiscanf_r+0x1e6>
 80241d2:	e79d      	b.n	8024110 <__ssvfiscanf_r+0x1b4>
 80241d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80241d6:	3201      	adds	r2, #1
 80241d8:	9245      	str	r2, [sp, #276]	; 0x114
 80241da:	6862      	ldr	r2, [r4, #4]
 80241dc:	3a01      	subs	r2, #1
 80241de:	2a00      	cmp	r2, #0
 80241e0:	6062      	str	r2, [r4, #4]
 80241e2:	dd02      	ble.n	80241ea <__ssvfiscanf_r+0x28e>
 80241e4:	3301      	adds	r3, #1
 80241e6:	6023      	str	r3, [r4, #0]
 80241e8:	e7ae      	b.n	8024148 <__ssvfiscanf_r+0x1ec>
 80241ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80241ec:	4621      	mov	r1, r4
 80241ee:	4630      	mov	r0, r6
 80241f0:	4798      	blx	r3
 80241f2:	2800      	cmp	r0, #0
 80241f4:	d0a8      	beq.n	8024148 <__ssvfiscanf_r+0x1ec>
 80241f6:	e78b      	b.n	8024110 <__ssvfiscanf_r+0x1b4>
 80241f8:	2b04      	cmp	r3, #4
 80241fa:	dc06      	bgt.n	802420a <__ssvfiscanf_r+0x2ae>
 80241fc:	466b      	mov	r3, sp
 80241fe:	4622      	mov	r2, r4
 8024200:	a941      	add	r1, sp, #260	; 0x104
 8024202:	4630      	mov	r0, r6
 8024204:	f000 f9d4 	bl	80245b0 <_scanf_i>
 8024208:	e7ac      	b.n	8024164 <__ssvfiscanf_r+0x208>
 802420a:	4b0f      	ldr	r3, [pc, #60]	; (8024248 <__ssvfiscanf_r+0x2ec>)
 802420c:	2b00      	cmp	r3, #0
 802420e:	f43f aecf 	beq.w	8023fb0 <__ssvfiscanf_r+0x54>
 8024212:	466b      	mov	r3, sp
 8024214:	4622      	mov	r2, r4
 8024216:	a941      	add	r1, sp, #260	; 0x104
 8024218:	4630      	mov	r0, r6
 802421a:	f3af 8000 	nop.w
 802421e:	e7a1      	b.n	8024164 <__ssvfiscanf_r+0x208>
 8024220:	89a3      	ldrh	r3, [r4, #12]
 8024222:	f013 0f40 	tst.w	r3, #64	; 0x40
 8024226:	bf18      	it	ne
 8024228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 802422c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8024230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024234:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024236:	e7f9      	b.n	802422c <__ssvfiscanf_r+0x2d0>
 8024238:	08023ea9 	.word	0x08023ea9
 802423c:	08023f23 	.word	0x08023f23
 8024240:	08029b05 	.word	0x08029b05
 8024244:	08029f92 	.word	0x08029f92
 8024248:	00000000 	.word	0x00000000

0802424c <__sfputc_r>:
 802424c:	6893      	ldr	r3, [r2, #8]
 802424e:	3b01      	subs	r3, #1
 8024250:	2b00      	cmp	r3, #0
 8024252:	b410      	push	{r4}
 8024254:	6093      	str	r3, [r2, #8]
 8024256:	da08      	bge.n	802426a <__sfputc_r+0x1e>
 8024258:	6994      	ldr	r4, [r2, #24]
 802425a:	42a3      	cmp	r3, r4
 802425c:	db01      	blt.n	8024262 <__sfputc_r+0x16>
 802425e:	290a      	cmp	r1, #10
 8024260:	d103      	bne.n	802426a <__sfputc_r+0x1e>
 8024262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024266:	f7fe b85f 	b.w	8022328 <__swbuf_r>
 802426a:	6813      	ldr	r3, [r2, #0]
 802426c:	1c58      	adds	r0, r3, #1
 802426e:	6010      	str	r0, [r2, #0]
 8024270:	7019      	strb	r1, [r3, #0]
 8024272:	4608      	mov	r0, r1
 8024274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024278:	4770      	bx	lr

0802427a <__sfputs_r>:
 802427a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802427c:	4606      	mov	r6, r0
 802427e:	460f      	mov	r7, r1
 8024280:	4614      	mov	r4, r2
 8024282:	18d5      	adds	r5, r2, r3
 8024284:	42ac      	cmp	r4, r5
 8024286:	d101      	bne.n	802428c <__sfputs_r+0x12>
 8024288:	2000      	movs	r0, #0
 802428a:	e007      	b.n	802429c <__sfputs_r+0x22>
 802428c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024290:	463a      	mov	r2, r7
 8024292:	4630      	mov	r0, r6
 8024294:	f7ff ffda 	bl	802424c <__sfputc_r>
 8024298:	1c43      	adds	r3, r0, #1
 802429a:	d1f3      	bne.n	8024284 <__sfputs_r+0xa>
 802429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080242a0 <_vfiprintf_r>:
 80242a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242a4:	460d      	mov	r5, r1
 80242a6:	b09d      	sub	sp, #116	; 0x74
 80242a8:	4614      	mov	r4, r2
 80242aa:	4698      	mov	r8, r3
 80242ac:	4606      	mov	r6, r0
 80242ae:	b118      	cbz	r0, 80242b8 <_vfiprintf_r+0x18>
 80242b0:	6983      	ldr	r3, [r0, #24]
 80242b2:	b90b      	cbnz	r3, 80242b8 <_vfiprintf_r+0x18>
 80242b4:	f7fc fed2 	bl	802105c <__sinit>
 80242b8:	4b89      	ldr	r3, [pc, #548]	; (80244e0 <_vfiprintf_r+0x240>)
 80242ba:	429d      	cmp	r5, r3
 80242bc:	d11b      	bne.n	80242f6 <_vfiprintf_r+0x56>
 80242be:	6875      	ldr	r5, [r6, #4]
 80242c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80242c2:	07d9      	lsls	r1, r3, #31
 80242c4:	d405      	bmi.n	80242d2 <_vfiprintf_r+0x32>
 80242c6:	89ab      	ldrh	r3, [r5, #12]
 80242c8:	059a      	lsls	r2, r3, #22
 80242ca:	d402      	bmi.n	80242d2 <_vfiprintf_r+0x32>
 80242cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80242ce:	f7fc ff88 	bl	80211e2 <__retarget_lock_acquire_recursive>
 80242d2:	89ab      	ldrh	r3, [r5, #12]
 80242d4:	071b      	lsls	r3, r3, #28
 80242d6:	d501      	bpl.n	80242dc <_vfiprintf_r+0x3c>
 80242d8:	692b      	ldr	r3, [r5, #16]
 80242da:	b9eb      	cbnz	r3, 8024318 <_vfiprintf_r+0x78>
 80242dc:	4629      	mov	r1, r5
 80242de:	4630      	mov	r0, r6
 80242e0:	f7fe f886 	bl	80223f0 <__swsetup_r>
 80242e4:	b1c0      	cbz	r0, 8024318 <_vfiprintf_r+0x78>
 80242e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80242e8:	07dc      	lsls	r4, r3, #31
 80242ea:	d50e      	bpl.n	802430a <_vfiprintf_r+0x6a>
 80242ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80242f0:	b01d      	add	sp, #116	; 0x74
 80242f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242f6:	4b7b      	ldr	r3, [pc, #492]	; (80244e4 <_vfiprintf_r+0x244>)
 80242f8:	429d      	cmp	r5, r3
 80242fa:	d101      	bne.n	8024300 <_vfiprintf_r+0x60>
 80242fc:	68b5      	ldr	r5, [r6, #8]
 80242fe:	e7df      	b.n	80242c0 <_vfiprintf_r+0x20>
 8024300:	4b79      	ldr	r3, [pc, #484]	; (80244e8 <_vfiprintf_r+0x248>)
 8024302:	429d      	cmp	r5, r3
 8024304:	bf08      	it	eq
 8024306:	68f5      	ldreq	r5, [r6, #12]
 8024308:	e7da      	b.n	80242c0 <_vfiprintf_r+0x20>
 802430a:	89ab      	ldrh	r3, [r5, #12]
 802430c:	0598      	lsls	r0, r3, #22
 802430e:	d4ed      	bmi.n	80242ec <_vfiprintf_r+0x4c>
 8024310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024312:	f7fc ff67 	bl	80211e4 <__retarget_lock_release_recursive>
 8024316:	e7e9      	b.n	80242ec <_vfiprintf_r+0x4c>
 8024318:	2300      	movs	r3, #0
 802431a:	9309      	str	r3, [sp, #36]	; 0x24
 802431c:	2320      	movs	r3, #32
 802431e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024322:	f8cd 800c 	str.w	r8, [sp, #12]
 8024326:	2330      	movs	r3, #48	; 0x30
 8024328:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80244ec <_vfiprintf_r+0x24c>
 802432c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024330:	f04f 0901 	mov.w	r9, #1
 8024334:	4623      	mov	r3, r4
 8024336:	469a      	mov	sl, r3
 8024338:	f813 2b01 	ldrb.w	r2, [r3], #1
 802433c:	b10a      	cbz	r2, 8024342 <_vfiprintf_r+0xa2>
 802433e:	2a25      	cmp	r2, #37	; 0x25
 8024340:	d1f9      	bne.n	8024336 <_vfiprintf_r+0x96>
 8024342:	ebba 0b04 	subs.w	fp, sl, r4
 8024346:	d00b      	beq.n	8024360 <_vfiprintf_r+0xc0>
 8024348:	465b      	mov	r3, fp
 802434a:	4622      	mov	r2, r4
 802434c:	4629      	mov	r1, r5
 802434e:	4630      	mov	r0, r6
 8024350:	f7ff ff93 	bl	802427a <__sfputs_r>
 8024354:	3001      	adds	r0, #1
 8024356:	f000 80aa 	beq.w	80244ae <_vfiprintf_r+0x20e>
 802435a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802435c:	445a      	add	r2, fp
 802435e:	9209      	str	r2, [sp, #36]	; 0x24
 8024360:	f89a 3000 	ldrb.w	r3, [sl]
 8024364:	2b00      	cmp	r3, #0
 8024366:	f000 80a2 	beq.w	80244ae <_vfiprintf_r+0x20e>
 802436a:	2300      	movs	r3, #0
 802436c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024374:	f10a 0a01 	add.w	sl, sl, #1
 8024378:	9304      	str	r3, [sp, #16]
 802437a:	9307      	str	r3, [sp, #28]
 802437c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024380:	931a      	str	r3, [sp, #104]	; 0x68
 8024382:	4654      	mov	r4, sl
 8024384:	2205      	movs	r2, #5
 8024386:	f814 1b01 	ldrb.w	r1, [r4], #1
 802438a:	4858      	ldr	r0, [pc, #352]	; (80244ec <_vfiprintf_r+0x24c>)
 802438c:	f7db ff38 	bl	8000200 <memchr>
 8024390:	9a04      	ldr	r2, [sp, #16]
 8024392:	b9d8      	cbnz	r0, 80243cc <_vfiprintf_r+0x12c>
 8024394:	06d1      	lsls	r1, r2, #27
 8024396:	bf44      	itt	mi
 8024398:	2320      	movmi	r3, #32
 802439a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802439e:	0713      	lsls	r3, r2, #28
 80243a0:	bf44      	itt	mi
 80243a2:	232b      	movmi	r3, #43	; 0x2b
 80243a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80243a8:	f89a 3000 	ldrb.w	r3, [sl]
 80243ac:	2b2a      	cmp	r3, #42	; 0x2a
 80243ae:	d015      	beq.n	80243dc <_vfiprintf_r+0x13c>
 80243b0:	9a07      	ldr	r2, [sp, #28]
 80243b2:	4654      	mov	r4, sl
 80243b4:	2000      	movs	r0, #0
 80243b6:	f04f 0c0a 	mov.w	ip, #10
 80243ba:	4621      	mov	r1, r4
 80243bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80243c0:	3b30      	subs	r3, #48	; 0x30
 80243c2:	2b09      	cmp	r3, #9
 80243c4:	d94e      	bls.n	8024464 <_vfiprintf_r+0x1c4>
 80243c6:	b1b0      	cbz	r0, 80243f6 <_vfiprintf_r+0x156>
 80243c8:	9207      	str	r2, [sp, #28]
 80243ca:	e014      	b.n	80243f6 <_vfiprintf_r+0x156>
 80243cc:	eba0 0308 	sub.w	r3, r0, r8
 80243d0:	fa09 f303 	lsl.w	r3, r9, r3
 80243d4:	4313      	orrs	r3, r2
 80243d6:	9304      	str	r3, [sp, #16]
 80243d8:	46a2      	mov	sl, r4
 80243da:	e7d2      	b.n	8024382 <_vfiprintf_r+0xe2>
 80243dc:	9b03      	ldr	r3, [sp, #12]
 80243de:	1d19      	adds	r1, r3, #4
 80243e0:	681b      	ldr	r3, [r3, #0]
 80243e2:	9103      	str	r1, [sp, #12]
 80243e4:	2b00      	cmp	r3, #0
 80243e6:	bfbb      	ittet	lt
 80243e8:	425b      	neglt	r3, r3
 80243ea:	f042 0202 	orrlt.w	r2, r2, #2
 80243ee:	9307      	strge	r3, [sp, #28]
 80243f0:	9307      	strlt	r3, [sp, #28]
 80243f2:	bfb8      	it	lt
 80243f4:	9204      	strlt	r2, [sp, #16]
 80243f6:	7823      	ldrb	r3, [r4, #0]
 80243f8:	2b2e      	cmp	r3, #46	; 0x2e
 80243fa:	d10c      	bne.n	8024416 <_vfiprintf_r+0x176>
 80243fc:	7863      	ldrb	r3, [r4, #1]
 80243fe:	2b2a      	cmp	r3, #42	; 0x2a
 8024400:	d135      	bne.n	802446e <_vfiprintf_r+0x1ce>
 8024402:	9b03      	ldr	r3, [sp, #12]
 8024404:	1d1a      	adds	r2, r3, #4
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	9203      	str	r2, [sp, #12]
 802440a:	2b00      	cmp	r3, #0
 802440c:	bfb8      	it	lt
 802440e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024412:	3402      	adds	r4, #2
 8024414:	9305      	str	r3, [sp, #20]
 8024416:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80244fc <_vfiprintf_r+0x25c>
 802441a:	7821      	ldrb	r1, [r4, #0]
 802441c:	2203      	movs	r2, #3
 802441e:	4650      	mov	r0, sl
 8024420:	f7db feee 	bl	8000200 <memchr>
 8024424:	b140      	cbz	r0, 8024438 <_vfiprintf_r+0x198>
 8024426:	2340      	movs	r3, #64	; 0x40
 8024428:	eba0 000a 	sub.w	r0, r0, sl
 802442c:	fa03 f000 	lsl.w	r0, r3, r0
 8024430:	9b04      	ldr	r3, [sp, #16]
 8024432:	4303      	orrs	r3, r0
 8024434:	3401      	adds	r4, #1
 8024436:	9304      	str	r3, [sp, #16]
 8024438:	f814 1b01 	ldrb.w	r1, [r4], #1
 802443c:	482c      	ldr	r0, [pc, #176]	; (80244f0 <_vfiprintf_r+0x250>)
 802443e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024442:	2206      	movs	r2, #6
 8024444:	f7db fedc 	bl	8000200 <memchr>
 8024448:	2800      	cmp	r0, #0
 802444a:	d03f      	beq.n	80244cc <_vfiprintf_r+0x22c>
 802444c:	4b29      	ldr	r3, [pc, #164]	; (80244f4 <_vfiprintf_r+0x254>)
 802444e:	bb1b      	cbnz	r3, 8024498 <_vfiprintf_r+0x1f8>
 8024450:	9b03      	ldr	r3, [sp, #12]
 8024452:	3307      	adds	r3, #7
 8024454:	f023 0307 	bic.w	r3, r3, #7
 8024458:	3308      	adds	r3, #8
 802445a:	9303      	str	r3, [sp, #12]
 802445c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802445e:	443b      	add	r3, r7
 8024460:	9309      	str	r3, [sp, #36]	; 0x24
 8024462:	e767      	b.n	8024334 <_vfiprintf_r+0x94>
 8024464:	fb0c 3202 	mla	r2, ip, r2, r3
 8024468:	460c      	mov	r4, r1
 802446a:	2001      	movs	r0, #1
 802446c:	e7a5      	b.n	80243ba <_vfiprintf_r+0x11a>
 802446e:	2300      	movs	r3, #0
 8024470:	3401      	adds	r4, #1
 8024472:	9305      	str	r3, [sp, #20]
 8024474:	4619      	mov	r1, r3
 8024476:	f04f 0c0a 	mov.w	ip, #10
 802447a:	4620      	mov	r0, r4
 802447c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024480:	3a30      	subs	r2, #48	; 0x30
 8024482:	2a09      	cmp	r2, #9
 8024484:	d903      	bls.n	802448e <_vfiprintf_r+0x1ee>
 8024486:	2b00      	cmp	r3, #0
 8024488:	d0c5      	beq.n	8024416 <_vfiprintf_r+0x176>
 802448a:	9105      	str	r1, [sp, #20]
 802448c:	e7c3      	b.n	8024416 <_vfiprintf_r+0x176>
 802448e:	fb0c 2101 	mla	r1, ip, r1, r2
 8024492:	4604      	mov	r4, r0
 8024494:	2301      	movs	r3, #1
 8024496:	e7f0      	b.n	802447a <_vfiprintf_r+0x1da>
 8024498:	ab03      	add	r3, sp, #12
 802449a:	9300      	str	r3, [sp, #0]
 802449c:	462a      	mov	r2, r5
 802449e:	4b16      	ldr	r3, [pc, #88]	; (80244f8 <_vfiprintf_r+0x258>)
 80244a0:	a904      	add	r1, sp, #16
 80244a2:	4630      	mov	r0, r6
 80244a4:	f7fd f838 	bl	8021518 <_printf_float>
 80244a8:	4607      	mov	r7, r0
 80244aa:	1c78      	adds	r0, r7, #1
 80244ac:	d1d6      	bne.n	802445c <_vfiprintf_r+0x1bc>
 80244ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80244b0:	07d9      	lsls	r1, r3, #31
 80244b2:	d405      	bmi.n	80244c0 <_vfiprintf_r+0x220>
 80244b4:	89ab      	ldrh	r3, [r5, #12]
 80244b6:	059a      	lsls	r2, r3, #22
 80244b8:	d402      	bmi.n	80244c0 <_vfiprintf_r+0x220>
 80244ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80244bc:	f7fc fe92 	bl	80211e4 <__retarget_lock_release_recursive>
 80244c0:	89ab      	ldrh	r3, [r5, #12]
 80244c2:	065b      	lsls	r3, r3, #25
 80244c4:	f53f af12 	bmi.w	80242ec <_vfiprintf_r+0x4c>
 80244c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80244ca:	e711      	b.n	80242f0 <_vfiprintf_r+0x50>
 80244cc:	ab03      	add	r3, sp, #12
 80244ce:	9300      	str	r3, [sp, #0]
 80244d0:	462a      	mov	r2, r5
 80244d2:	4b09      	ldr	r3, [pc, #36]	; (80244f8 <_vfiprintf_r+0x258>)
 80244d4:	a904      	add	r1, sp, #16
 80244d6:	4630      	mov	r0, r6
 80244d8:	f7fd fac2 	bl	8021a60 <_printf_i>
 80244dc:	e7e4      	b.n	80244a8 <_vfiprintf_r+0x208>
 80244de:	bf00      	nop
 80244e0:	08029c28 	.word	0x08029c28
 80244e4:	08029c48 	.word	0x08029c48
 80244e8:	08029c08 	.word	0x08029c08
 80244ec:	08029f8c 	.word	0x08029f8c
 80244f0:	08029f96 	.word	0x08029f96
 80244f4:	08021519 	.word	0x08021519
 80244f8:	0802427b 	.word	0x0802427b
 80244fc:	08029f92 	.word	0x08029f92

08024500 <_scanf_chars>:
 8024500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024504:	4615      	mov	r5, r2
 8024506:	688a      	ldr	r2, [r1, #8]
 8024508:	4680      	mov	r8, r0
 802450a:	460c      	mov	r4, r1
 802450c:	b932      	cbnz	r2, 802451c <_scanf_chars+0x1c>
 802450e:	698a      	ldr	r2, [r1, #24]
 8024510:	2a00      	cmp	r2, #0
 8024512:	bf0c      	ite	eq
 8024514:	2201      	moveq	r2, #1
 8024516:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 802451a:	608a      	str	r2, [r1, #8]
 802451c:	6822      	ldr	r2, [r4, #0]
 802451e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80245ac <_scanf_chars+0xac>
 8024522:	06d1      	lsls	r1, r2, #27
 8024524:	bf5f      	itttt	pl
 8024526:	681a      	ldrpl	r2, [r3, #0]
 8024528:	1d11      	addpl	r1, r2, #4
 802452a:	6019      	strpl	r1, [r3, #0]
 802452c:	6816      	ldrpl	r6, [r2, #0]
 802452e:	2700      	movs	r7, #0
 8024530:	69a0      	ldr	r0, [r4, #24]
 8024532:	b188      	cbz	r0, 8024558 <_scanf_chars+0x58>
 8024534:	2801      	cmp	r0, #1
 8024536:	d107      	bne.n	8024548 <_scanf_chars+0x48>
 8024538:	682b      	ldr	r3, [r5, #0]
 802453a:	781a      	ldrb	r2, [r3, #0]
 802453c:	6963      	ldr	r3, [r4, #20]
 802453e:	5c9b      	ldrb	r3, [r3, r2]
 8024540:	b953      	cbnz	r3, 8024558 <_scanf_chars+0x58>
 8024542:	bb27      	cbnz	r7, 802458e <_scanf_chars+0x8e>
 8024544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024548:	2802      	cmp	r0, #2
 802454a:	d120      	bne.n	802458e <_scanf_chars+0x8e>
 802454c:	682b      	ldr	r3, [r5, #0]
 802454e:	781b      	ldrb	r3, [r3, #0]
 8024550:	f813 3009 	ldrb.w	r3, [r3, r9]
 8024554:	071b      	lsls	r3, r3, #28
 8024556:	d41a      	bmi.n	802458e <_scanf_chars+0x8e>
 8024558:	6823      	ldr	r3, [r4, #0]
 802455a:	06da      	lsls	r2, r3, #27
 802455c:	bf5e      	ittt	pl
 802455e:	682b      	ldrpl	r3, [r5, #0]
 8024560:	781b      	ldrbpl	r3, [r3, #0]
 8024562:	f806 3b01 	strbpl.w	r3, [r6], #1
 8024566:	682a      	ldr	r2, [r5, #0]
 8024568:	686b      	ldr	r3, [r5, #4]
 802456a:	3201      	adds	r2, #1
 802456c:	602a      	str	r2, [r5, #0]
 802456e:	68a2      	ldr	r2, [r4, #8]
 8024570:	3b01      	subs	r3, #1
 8024572:	3a01      	subs	r2, #1
 8024574:	606b      	str	r3, [r5, #4]
 8024576:	3701      	adds	r7, #1
 8024578:	60a2      	str	r2, [r4, #8]
 802457a:	b142      	cbz	r2, 802458e <_scanf_chars+0x8e>
 802457c:	2b00      	cmp	r3, #0
 802457e:	dcd7      	bgt.n	8024530 <_scanf_chars+0x30>
 8024580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024584:	4629      	mov	r1, r5
 8024586:	4640      	mov	r0, r8
 8024588:	4798      	blx	r3
 802458a:	2800      	cmp	r0, #0
 802458c:	d0d0      	beq.n	8024530 <_scanf_chars+0x30>
 802458e:	6823      	ldr	r3, [r4, #0]
 8024590:	f013 0310 	ands.w	r3, r3, #16
 8024594:	d105      	bne.n	80245a2 <_scanf_chars+0xa2>
 8024596:	68e2      	ldr	r2, [r4, #12]
 8024598:	3201      	adds	r2, #1
 802459a:	60e2      	str	r2, [r4, #12]
 802459c:	69a2      	ldr	r2, [r4, #24]
 802459e:	b102      	cbz	r2, 80245a2 <_scanf_chars+0xa2>
 80245a0:	7033      	strb	r3, [r6, #0]
 80245a2:	6923      	ldr	r3, [r4, #16]
 80245a4:	441f      	add	r7, r3
 80245a6:	6127      	str	r7, [r4, #16]
 80245a8:	2000      	movs	r0, #0
 80245aa:	e7cb      	b.n	8024544 <_scanf_chars+0x44>
 80245ac:	08029b05 	.word	0x08029b05

080245b0 <_scanf_i>:
 80245b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245b4:	4698      	mov	r8, r3
 80245b6:	4b74      	ldr	r3, [pc, #464]	; (8024788 <_scanf_i+0x1d8>)
 80245b8:	460c      	mov	r4, r1
 80245ba:	4682      	mov	sl, r0
 80245bc:	4616      	mov	r6, r2
 80245be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80245c2:	b087      	sub	sp, #28
 80245c4:	ab03      	add	r3, sp, #12
 80245c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80245ca:	4b70      	ldr	r3, [pc, #448]	; (802478c <_scanf_i+0x1dc>)
 80245cc:	69a1      	ldr	r1, [r4, #24]
 80245ce:	4a70      	ldr	r2, [pc, #448]	; (8024790 <_scanf_i+0x1e0>)
 80245d0:	2903      	cmp	r1, #3
 80245d2:	bf18      	it	ne
 80245d4:	461a      	movne	r2, r3
 80245d6:	68a3      	ldr	r3, [r4, #8]
 80245d8:	9201      	str	r2, [sp, #4]
 80245da:	1e5a      	subs	r2, r3, #1
 80245dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80245e0:	bf88      	it	hi
 80245e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80245e6:	4627      	mov	r7, r4
 80245e8:	bf82      	ittt	hi
 80245ea:	eb03 0905 	addhi.w	r9, r3, r5
 80245ee:	f240 135d 	movwhi	r3, #349	; 0x15d
 80245f2:	60a3      	strhi	r3, [r4, #8]
 80245f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80245f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80245fc:	bf98      	it	ls
 80245fe:	f04f 0900 	movls.w	r9, #0
 8024602:	6023      	str	r3, [r4, #0]
 8024604:	463d      	mov	r5, r7
 8024606:	f04f 0b00 	mov.w	fp, #0
 802460a:	6831      	ldr	r1, [r6, #0]
 802460c:	ab03      	add	r3, sp, #12
 802460e:	7809      	ldrb	r1, [r1, #0]
 8024610:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8024614:	2202      	movs	r2, #2
 8024616:	f7db fdf3 	bl	8000200 <memchr>
 802461a:	b328      	cbz	r0, 8024668 <_scanf_i+0xb8>
 802461c:	f1bb 0f01 	cmp.w	fp, #1
 8024620:	d159      	bne.n	80246d6 <_scanf_i+0x126>
 8024622:	6862      	ldr	r2, [r4, #4]
 8024624:	b92a      	cbnz	r2, 8024632 <_scanf_i+0x82>
 8024626:	6822      	ldr	r2, [r4, #0]
 8024628:	2308      	movs	r3, #8
 802462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802462e:	6063      	str	r3, [r4, #4]
 8024630:	6022      	str	r2, [r4, #0]
 8024632:	6822      	ldr	r2, [r4, #0]
 8024634:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8024638:	6022      	str	r2, [r4, #0]
 802463a:	68a2      	ldr	r2, [r4, #8]
 802463c:	1e51      	subs	r1, r2, #1
 802463e:	60a1      	str	r1, [r4, #8]
 8024640:	b192      	cbz	r2, 8024668 <_scanf_i+0xb8>
 8024642:	6832      	ldr	r2, [r6, #0]
 8024644:	1c51      	adds	r1, r2, #1
 8024646:	6031      	str	r1, [r6, #0]
 8024648:	7812      	ldrb	r2, [r2, #0]
 802464a:	f805 2b01 	strb.w	r2, [r5], #1
 802464e:	6872      	ldr	r2, [r6, #4]
 8024650:	3a01      	subs	r2, #1
 8024652:	2a00      	cmp	r2, #0
 8024654:	6072      	str	r2, [r6, #4]
 8024656:	dc07      	bgt.n	8024668 <_scanf_i+0xb8>
 8024658:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802465c:	4631      	mov	r1, r6
 802465e:	4650      	mov	r0, sl
 8024660:	4790      	blx	r2
 8024662:	2800      	cmp	r0, #0
 8024664:	f040 8085 	bne.w	8024772 <_scanf_i+0x1c2>
 8024668:	f10b 0b01 	add.w	fp, fp, #1
 802466c:	f1bb 0f03 	cmp.w	fp, #3
 8024670:	d1cb      	bne.n	802460a <_scanf_i+0x5a>
 8024672:	6863      	ldr	r3, [r4, #4]
 8024674:	b90b      	cbnz	r3, 802467a <_scanf_i+0xca>
 8024676:	230a      	movs	r3, #10
 8024678:	6063      	str	r3, [r4, #4]
 802467a:	6863      	ldr	r3, [r4, #4]
 802467c:	4945      	ldr	r1, [pc, #276]	; (8024794 <_scanf_i+0x1e4>)
 802467e:	6960      	ldr	r0, [r4, #20]
 8024680:	1ac9      	subs	r1, r1, r3
 8024682:	f000 f89b 	bl	80247bc <__sccl>
 8024686:	f04f 0b00 	mov.w	fp, #0
 802468a:	68a3      	ldr	r3, [r4, #8]
 802468c:	6822      	ldr	r2, [r4, #0]
 802468e:	2b00      	cmp	r3, #0
 8024690:	d03d      	beq.n	802470e <_scanf_i+0x15e>
 8024692:	6831      	ldr	r1, [r6, #0]
 8024694:	6960      	ldr	r0, [r4, #20]
 8024696:	f891 c000 	ldrb.w	ip, [r1]
 802469a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802469e:	2800      	cmp	r0, #0
 80246a0:	d035      	beq.n	802470e <_scanf_i+0x15e>
 80246a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80246a6:	d124      	bne.n	80246f2 <_scanf_i+0x142>
 80246a8:	0510      	lsls	r0, r2, #20
 80246aa:	d522      	bpl.n	80246f2 <_scanf_i+0x142>
 80246ac:	f10b 0b01 	add.w	fp, fp, #1
 80246b0:	f1b9 0f00 	cmp.w	r9, #0
 80246b4:	d003      	beq.n	80246be <_scanf_i+0x10e>
 80246b6:	3301      	adds	r3, #1
 80246b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80246bc:	60a3      	str	r3, [r4, #8]
 80246be:	6873      	ldr	r3, [r6, #4]
 80246c0:	3b01      	subs	r3, #1
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	6073      	str	r3, [r6, #4]
 80246c6:	dd1b      	ble.n	8024700 <_scanf_i+0x150>
 80246c8:	6833      	ldr	r3, [r6, #0]
 80246ca:	3301      	adds	r3, #1
 80246cc:	6033      	str	r3, [r6, #0]
 80246ce:	68a3      	ldr	r3, [r4, #8]
 80246d0:	3b01      	subs	r3, #1
 80246d2:	60a3      	str	r3, [r4, #8]
 80246d4:	e7d9      	b.n	802468a <_scanf_i+0xda>
 80246d6:	f1bb 0f02 	cmp.w	fp, #2
 80246da:	d1ae      	bne.n	802463a <_scanf_i+0x8a>
 80246dc:	6822      	ldr	r2, [r4, #0]
 80246de:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80246e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80246e6:	d1bf      	bne.n	8024668 <_scanf_i+0xb8>
 80246e8:	2310      	movs	r3, #16
 80246ea:	6063      	str	r3, [r4, #4]
 80246ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80246f0:	e7a2      	b.n	8024638 <_scanf_i+0x88>
 80246f2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80246f6:	6022      	str	r2, [r4, #0]
 80246f8:	780b      	ldrb	r3, [r1, #0]
 80246fa:	f805 3b01 	strb.w	r3, [r5], #1
 80246fe:	e7de      	b.n	80246be <_scanf_i+0x10e>
 8024700:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024704:	4631      	mov	r1, r6
 8024706:	4650      	mov	r0, sl
 8024708:	4798      	blx	r3
 802470a:	2800      	cmp	r0, #0
 802470c:	d0df      	beq.n	80246ce <_scanf_i+0x11e>
 802470e:	6823      	ldr	r3, [r4, #0]
 8024710:	05d9      	lsls	r1, r3, #23
 8024712:	d50d      	bpl.n	8024730 <_scanf_i+0x180>
 8024714:	42bd      	cmp	r5, r7
 8024716:	d909      	bls.n	802472c <_scanf_i+0x17c>
 8024718:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802471c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8024720:	4632      	mov	r2, r6
 8024722:	4650      	mov	r0, sl
 8024724:	4798      	blx	r3
 8024726:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 802472a:	464d      	mov	r5, r9
 802472c:	42bd      	cmp	r5, r7
 802472e:	d028      	beq.n	8024782 <_scanf_i+0x1d2>
 8024730:	6822      	ldr	r2, [r4, #0]
 8024732:	f012 0210 	ands.w	r2, r2, #16
 8024736:	d113      	bne.n	8024760 <_scanf_i+0x1b0>
 8024738:	702a      	strb	r2, [r5, #0]
 802473a:	6863      	ldr	r3, [r4, #4]
 802473c:	9e01      	ldr	r6, [sp, #4]
 802473e:	4639      	mov	r1, r7
 8024740:	4650      	mov	r0, sl
 8024742:	47b0      	blx	r6
 8024744:	f8d8 3000 	ldr.w	r3, [r8]
 8024748:	6821      	ldr	r1, [r4, #0]
 802474a:	1d1a      	adds	r2, r3, #4
 802474c:	f8c8 2000 	str.w	r2, [r8]
 8024750:	f011 0f20 	tst.w	r1, #32
 8024754:	681b      	ldr	r3, [r3, #0]
 8024756:	d00f      	beq.n	8024778 <_scanf_i+0x1c8>
 8024758:	6018      	str	r0, [r3, #0]
 802475a:	68e3      	ldr	r3, [r4, #12]
 802475c:	3301      	adds	r3, #1
 802475e:	60e3      	str	r3, [r4, #12]
 8024760:	1bed      	subs	r5, r5, r7
 8024762:	44ab      	add	fp, r5
 8024764:	6925      	ldr	r5, [r4, #16]
 8024766:	445d      	add	r5, fp
 8024768:	6125      	str	r5, [r4, #16]
 802476a:	2000      	movs	r0, #0
 802476c:	b007      	add	sp, #28
 802476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024772:	f04f 0b00 	mov.w	fp, #0
 8024776:	e7ca      	b.n	802470e <_scanf_i+0x15e>
 8024778:	07ca      	lsls	r2, r1, #31
 802477a:	bf4c      	ite	mi
 802477c:	8018      	strhmi	r0, [r3, #0]
 802477e:	6018      	strpl	r0, [r3, #0]
 8024780:	e7eb      	b.n	802475a <_scanf_i+0x1aa>
 8024782:	2001      	movs	r0, #1
 8024784:	e7f2      	b.n	802476c <_scanf_i+0x1bc>
 8024786:	bf00      	nop
 8024788:	0802986c 	.word	0x0802986c
 802478c:	08024929 	.word	0x08024929
 8024790:	08022325 	.word	0x08022325
 8024794:	08029fb6 	.word	0x08029fb6

08024798 <_read_r>:
 8024798:	b538      	push	{r3, r4, r5, lr}
 802479a:	4d07      	ldr	r5, [pc, #28]	; (80247b8 <_read_r+0x20>)
 802479c:	4604      	mov	r4, r0
 802479e:	4608      	mov	r0, r1
 80247a0:	4611      	mov	r1, r2
 80247a2:	2200      	movs	r2, #0
 80247a4:	602a      	str	r2, [r5, #0]
 80247a6:	461a      	mov	r2, r3
 80247a8:	f7de f8f0 	bl	800298c <_read>
 80247ac:	1c43      	adds	r3, r0, #1
 80247ae:	d102      	bne.n	80247b6 <_read_r+0x1e>
 80247b0:	682b      	ldr	r3, [r5, #0]
 80247b2:	b103      	cbz	r3, 80247b6 <_read_r+0x1e>
 80247b4:	6023      	str	r3, [r4, #0]
 80247b6:	bd38      	pop	{r3, r4, r5, pc}
 80247b8:	2001b1ec 	.word	0x2001b1ec

080247bc <__sccl>:
 80247bc:	b570      	push	{r4, r5, r6, lr}
 80247be:	780b      	ldrb	r3, [r1, #0]
 80247c0:	4604      	mov	r4, r0
 80247c2:	2b5e      	cmp	r3, #94	; 0x5e
 80247c4:	bf0b      	itete	eq
 80247c6:	784b      	ldrbeq	r3, [r1, #1]
 80247c8:	1c48      	addne	r0, r1, #1
 80247ca:	1c88      	addeq	r0, r1, #2
 80247cc:	2200      	movne	r2, #0
 80247ce:	bf08      	it	eq
 80247d0:	2201      	moveq	r2, #1
 80247d2:	1e61      	subs	r1, r4, #1
 80247d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80247d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80247dc:	42a9      	cmp	r1, r5
 80247de:	d1fb      	bne.n	80247d8 <__sccl+0x1c>
 80247e0:	b90b      	cbnz	r3, 80247e6 <__sccl+0x2a>
 80247e2:	3801      	subs	r0, #1
 80247e4:	bd70      	pop	{r4, r5, r6, pc}
 80247e6:	f082 0101 	eor.w	r1, r2, #1
 80247ea:	54e1      	strb	r1, [r4, r3]
 80247ec:	1c42      	adds	r2, r0, #1
 80247ee:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80247f2:	2d2d      	cmp	r5, #45	; 0x2d
 80247f4:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80247f8:	4610      	mov	r0, r2
 80247fa:	d006      	beq.n	802480a <__sccl+0x4e>
 80247fc:	2d5d      	cmp	r5, #93	; 0x5d
 80247fe:	d0f1      	beq.n	80247e4 <__sccl+0x28>
 8024800:	b90d      	cbnz	r5, 8024806 <__sccl+0x4a>
 8024802:	4630      	mov	r0, r6
 8024804:	e7ee      	b.n	80247e4 <__sccl+0x28>
 8024806:	462b      	mov	r3, r5
 8024808:	e7ef      	b.n	80247ea <__sccl+0x2e>
 802480a:	7816      	ldrb	r6, [r2, #0]
 802480c:	2e5d      	cmp	r6, #93	; 0x5d
 802480e:	d0fa      	beq.n	8024806 <__sccl+0x4a>
 8024810:	42b3      	cmp	r3, r6
 8024812:	dcf8      	bgt.n	8024806 <__sccl+0x4a>
 8024814:	4618      	mov	r0, r3
 8024816:	3001      	adds	r0, #1
 8024818:	4286      	cmp	r6, r0
 802481a:	5421      	strb	r1, [r4, r0]
 802481c:	dcfb      	bgt.n	8024816 <__sccl+0x5a>
 802481e:	43d8      	mvns	r0, r3
 8024820:	4430      	add	r0, r6
 8024822:	1c5d      	adds	r5, r3, #1
 8024824:	42b3      	cmp	r3, r6
 8024826:	bfa8      	it	ge
 8024828:	2000      	movge	r0, #0
 802482a:	182b      	adds	r3, r5, r0
 802482c:	3202      	adds	r2, #2
 802482e:	e7de      	b.n	80247ee <__sccl+0x32>

08024830 <_strtoul_l.isra.0>:
 8024830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024834:	4e3b      	ldr	r6, [pc, #236]	; (8024924 <_strtoul_l.isra.0+0xf4>)
 8024836:	4686      	mov	lr, r0
 8024838:	468c      	mov	ip, r1
 802483a:	4660      	mov	r0, ip
 802483c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8024840:	5da5      	ldrb	r5, [r4, r6]
 8024842:	f015 0508 	ands.w	r5, r5, #8
 8024846:	d1f8      	bne.n	802483a <_strtoul_l.isra.0+0xa>
 8024848:	2c2d      	cmp	r4, #45	; 0x2d
 802484a:	d134      	bne.n	80248b6 <_strtoul_l.isra.0+0x86>
 802484c:	f89c 4000 	ldrb.w	r4, [ip]
 8024850:	f04f 0801 	mov.w	r8, #1
 8024854:	f100 0c02 	add.w	ip, r0, #2
 8024858:	2b00      	cmp	r3, #0
 802485a:	d05e      	beq.n	802491a <_strtoul_l.isra.0+0xea>
 802485c:	2b10      	cmp	r3, #16
 802485e:	d10c      	bne.n	802487a <_strtoul_l.isra.0+0x4a>
 8024860:	2c30      	cmp	r4, #48	; 0x30
 8024862:	d10a      	bne.n	802487a <_strtoul_l.isra.0+0x4a>
 8024864:	f89c 0000 	ldrb.w	r0, [ip]
 8024868:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802486c:	2858      	cmp	r0, #88	; 0x58
 802486e:	d14f      	bne.n	8024910 <_strtoul_l.isra.0+0xe0>
 8024870:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8024874:	2310      	movs	r3, #16
 8024876:	f10c 0c02 	add.w	ip, ip, #2
 802487a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802487e:	2500      	movs	r5, #0
 8024880:	fbb7 f7f3 	udiv	r7, r7, r3
 8024884:	fb03 f907 	mul.w	r9, r3, r7
 8024888:	ea6f 0909 	mvn.w	r9, r9
 802488c:	4628      	mov	r0, r5
 802488e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8024892:	2e09      	cmp	r6, #9
 8024894:	d818      	bhi.n	80248c8 <_strtoul_l.isra.0+0x98>
 8024896:	4634      	mov	r4, r6
 8024898:	42a3      	cmp	r3, r4
 802489a:	dd24      	ble.n	80248e6 <_strtoul_l.isra.0+0xb6>
 802489c:	2d00      	cmp	r5, #0
 802489e:	db1f      	blt.n	80248e0 <_strtoul_l.isra.0+0xb0>
 80248a0:	4287      	cmp	r7, r0
 80248a2:	d31d      	bcc.n	80248e0 <_strtoul_l.isra.0+0xb0>
 80248a4:	d101      	bne.n	80248aa <_strtoul_l.isra.0+0x7a>
 80248a6:	45a1      	cmp	r9, r4
 80248a8:	db1a      	blt.n	80248e0 <_strtoul_l.isra.0+0xb0>
 80248aa:	fb00 4003 	mla	r0, r0, r3, r4
 80248ae:	2501      	movs	r5, #1
 80248b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80248b4:	e7eb      	b.n	802488e <_strtoul_l.isra.0+0x5e>
 80248b6:	2c2b      	cmp	r4, #43	; 0x2b
 80248b8:	bf08      	it	eq
 80248ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80248be:	46a8      	mov	r8, r5
 80248c0:	bf08      	it	eq
 80248c2:	f100 0c02 	addeq.w	ip, r0, #2
 80248c6:	e7c7      	b.n	8024858 <_strtoul_l.isra.0+0x28>
 80248c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80248cc:	2e19      	cmp	r6, #25
 80248ce:	d801      	bhi.n	80248d4 <_strtoul_l.isra.0+0xa4>
 80248d0:	3c37      	subs	r4, #55	; 0x37
 80248d2:	e7e1      	b.n	8024898 <_strtoul_l.isra.0+0x68>
 80248d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80248d8:	2e19      	cmp	r6, #25
 80248da:	d804      	bhi.n	80248e6 <_strtoul_l.isra.0+0xb6>
 80248dc:	3c57      	subs	r4, #87	; 0x57
 80248de:	e7db      	b.n	8024898 <_strtoul_l.isra.0+0x68>
 80248e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80248e4:	e7e4      	b.n	80248b0 <_strtoul_l.isra.0+0x80>
 80248e6:	2d00      	cmp	r5, #0
 80248e8:	da07      	bge.n	80248fa <_strtoul_l.isra.0+0xca>
 80248ea:	2322      	movs	r3, #34	; 0x22
 80248ec:	f8ce 3000 	str.w	r3, [lr]
 80248f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80248f4:	b942      	cbnz	r2, 8024908 <_strtoul_l.isra.0+0xd8>
 80248f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80248fa:	f1b8 0f00 	cmp.w	r8, #0
 80248fe:	d000      	beq.n	8024902 <_strtoul_l.isra.0+0xd2>
 8024900:	4240      	negs	r0, r0
 8024902:	2a00      	cmp	r2, #0
 8024904:	d0f7      	beq.n	80248f6 <_strtoul_l.isra.0+0xc6>
 8024906:	b10d      	cbz	r5, 802490c <_strtoul_l.isra.0+0xdc>
 8024908:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 802490c:	6011      	str	r1, [r2, #0]
 802490e:	e7f2      	b.n	80248f6 <_strtoul_l.isra.0+0xc6>
 8024910:	2430      	movs	r4, #48	; 0x30
 8024912:	2b00      	cmp	r3, #0
 8024914:	d1b1      	bne.n	802487a <_strtoul_l.isra.0+0x4a>
 8024916:	2308      	movs	r3, #8
 8024918:	e7af      	b.n	802487a <_strtoul_l.isra.0+0x4a>
 802491a:	2c30      	cmp	r4, #48	; 0x30
 802491c:	d0a2      	beq.n	8024864 <_strtoul_l.isra.0+0x34>
 802491e:	230a      	movs	r3, #10
 8024920:	e7ab      	b.n	802487a <_strtoul_l.isra.0+0x4a>
 8024922:	bf00      	nop
 8024924:	08029b05 	.word	0x08029b05

08024928 <_strtoul_r>:
 8024928:	f7ff bf82 	b.w	8024830 <_strtoul_l.isra.0>

0802492c <__submore>:
 802492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024930:	460c      	mov	r4, r1
 8024932:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024938:	4299      	cmp	r1, r3
 802493a:	d11d      	bne.n	8024978 <__submore+0x4c>
 802493c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024940:	f7fc fcf0 	bl	8021324 <_malloc_r>
 8024944:	b918      	cbnz	r0, 802494e <__submore+0x22>
 8024946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802494e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024952:	63a3      	str	r3, [r4, #56]	; 0x38
 8024954:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8024958:	6360      	str	r0, [r4, #52]	; 0x34
 802495a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802495e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024962:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8024966:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802496a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802496e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024972:	6020      	str	r0, [r4, #0]
 8024974:	2000      	movs	r0, #0
 8024976:	e7e8      	b.n	802494a <__submore+0x1e>
 8024978:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802497a:	0077      	lsls	r7, r6, #1
 802497c:	463a      	mov	r2, r7
 802497e:	f000 f84b 	bl	8024a18 <_realloc_r>
 8024982:	4605      	mov	r5, r0
 8024984:	2800      	cmp	r0, #0
 8024986:	d0de      	beq.n	8024946 <__submore+0x1a>
 8024988:	eb00 0806 	add.w	r8, r0, r6
 802498c:	4601      	mov	r1, r0
 802498e:	4632      	mov	r2, r6
 8024990:	4640      	mov	r0, r8
 8024992:	f7fc fc47 	bl	8021224 <memcpy>
 8024996:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802499a:	f8c4 8000 	str.w	r8, [r4]
 802499e:	e7e9      	b.n	8024974 <__submore+0x48>

080249a0 <abort>:
 80249a0:	b508      	push	{r3, lr}
 80249a2:	2006      	movs	r0, #6
 80249a4:	f000 f886 	bl	8024ab4 <raise>
 80249a8:	2001      	movs	r0, #1
 80249aa:	f7dd ffe5 	bl	8002978 <_exit>
	...

080249b0 <_fstat_r>:
 80249b0:	b538      	push	{r3, r4, r5, lr}
 80249b2:	4d07      	ldr	r5, [pc, #28]	; (80249d0 <_fstat_r+0x20>)
 80249b4:	2300      	movs	r3, #0
 80249b6:	4604      	mov	r4, r0
 80249b8:	4608      	mov	r0, r1
 80249ba:	4611      	mov	r1, r2
 80249bc:	602b      	str	r3, [r5, #0]
 80249be:	f7de f82a 	bl	8002a16 <_fstat>
 80249c2:	1c43      	adds	r3, r0, #1
 80249c4:	d102      	bne.n	80249cc <_fstat_r+0x1c>
 80249c6:	682b      	ldr	r3, [r5, #0]
 80249c8:	b103      	cbz	r3, 80249cc <_fstat_r+0x1c>
 80249ca:	6023      	str	r3, [r4, #0]
 80249cc:	bd38      	pop	{r3, r4, r5, pc}
 80249ce:	bf00      	nop
 80249d0:	2001b1ec 	.word	0x2001b1ec

080249d4 <_isatty_r>:
 80249d4:	b538      	push	{r3, r4, r5, lr}
 80249d6:	4d06      	ldr	r5, [pc, #24]	; (80249f0 <_isatty_r+0x1c>)
 80249d8:	2300      	movs	r3, #0
 80249da:	4604      	mov	r4, r0
 80249dc:	4608      	mov	r0, r1
 80249de:	602b      	str	r3, [r5, #0]
 80249e0:	f7de f829 	bl	8002a36 <_isatty>
 80249e4:	1c43      	adds	r3, r0, #1
 80249e6:	d102      	bne.n	80249ee <_isatty_r+0x1a>
 80249e8:	682b      	ldr	r3, [r5, #0]
 80249ea:	b103      	cbz	r3, 80249ee <_isatty_r+0x1a>
 80249ec:	6023      	str	r3, [r4, #0]
 80249ee:	bd38      	pop	{r3, r4, r5, pc}
 80249f0:	2001b1ec 	.word	0x2001b1ec

080249f4 <__ascii_mbtowc>:
 80249f4:	b082      	sub	sp, #8
 80249f6:	b901      	cbnz	r1, 80249fa <__ascii_mbtowc+0x6>
 80249f8:	a901      	add	r1, sp, #4
 80249fa:	b142      	cbz	r2, 8024a0e <__ascii_mbtowc+0x1a>
 80249fc:	b14b      	cbz	r3, 8024a12 <__ascii_mbtowc+0x1e>
 80249fe:	7813      	ldrb	r3, [r2, #0]
 8024a00:	600b      	str	r3, [r1, #0]
 8024a02:	7812      	ldrb	r2, [r2, #0]
 8024a04:	1e10      	subs	r0, r2, #0
 8024a06:	bf18      	it	ne
 8024a08:	2001      	movne	r0, #1
 8024a0a:	b002      	add	sp, #8
 8024a0c:	4770      	bx	lr
 8024a0e:	4610      	mov	r0, r2
 8024a10:	e7fb      	b.n	8024a0a <__ascii_mbtowc+0x16>
 8024a12:	f06f 0001 	mvn.w	r0, #1
 8024a16:	e7f8      	b.n	8024a0a <__ascii_mbtowc+0x16>

08024a18 <_realloc_r>:
 8024a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a1a:	4607      	mov	r7, r0
 8024a1c:	4614      	mov	r4, r2
 8024a1e:	460e      	mov	r6, r1
 8024a20:	b921      	cbnz	r1, 8024a2c <_realloc_r+0x14>
 8024a22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024a26:	4611      	mov	r1, r2
 8024a28:	f7fc bc7c 	b.w	8021324 <_malloc_r>
 8024a2c:	b922      	cbnz	r2, 8024a38 <_realloc_r+0x20>
 8024a2e:	f7fc fc29 	bl	8021284 <_free_r>
 8024a32:	4625      	mov	r5, r4
 8024a34:	4628      	mov	r0, r5
 8024a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024a38:	f000 f865 	bl	8024b06 <_malloc_usable_size_r>
 8024a3c:	42a0      	cmp	r0, r4
 8024a3e:	d20f      	bcs.n	8024a60 <_realloc_r+0x48>
 8024a40:	4621      	mov	r1, r4
 8024a42:	4638      	mov	r0, r7
 8024a44:	f7fc fc6e 	bl	8021324 <_malloc_r>
 8024a48:	4605      	mov	r5, r0
 8024a4a:	2800      	cmp	r0, #0
 8024a4c:	d0f2      	beq.n	8024a34 <_realloc_r+0x1c>
 8024a4e:	4631      	mov	r1, r6
 8024a50:	4622      	mov	r2, r4
 8024a52:	f7fc fbe7 	bl	8021224 <memcpy>
 8024a56:	4631      	mov	r1, r6
 8024a58:	4638      	mov	r0, r7
 8024a5a:	f7fc fc13 	bl	8021284 <_free_r>
 8024a5e:	e7e9      	b.n	8024a34 <_realloc_r+0x1c>
 8024a60:	4635      	mov	r5, r6
 8024a62:	e7e7      	b.n	8024a34 <_realloc_r+0x1c>

08024a64 <_raise_r>:
 8024a64:	291f      	cmp	r1, #31
 8024a66:	b538      	push	{r3, r4, r5, lr}
 8024a68:	4604      	mov	r4, r0
 8024a6a:	460d      	mov	r5, r1
 8024a6c:	d904      	bls.n	8024a78 <_raise_r+0x14>
 8024a6e:	2316      	movs	r3, #22
 8024a70:	6003      	str	r3, [r0, #0]
 8024a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024a76:	bd38      	pop	{r3, r4, r5, pc}
 8024a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024a7a:	b112      	cbz	r2, 8024a82 <_raise_r+0x1e>
 8024a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024a80:	b94b      	cbnz	r3, 8024a96 <_raise_r+0x32>
 8024a82:	4620      	mov	r0, r4
 8024a84:	f000 f830 	bl	8024ae8 <_getpid_r>
 8024a88:	462a      	mov	r2, r5
 8024a8a:	4601      	mov	r1, r0
 8024a8c:	4620      	mov	r0, r4
 8024a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024a92:	f000 b817 	b.w	8024ac4 <_kill_r>
 8024a96:	2b01      	cmp	r3, #1
 8024a98:	d00a      	beq.n	8024ab0 <_raise_r+0x4c>
 8024a9a:	1c59      	adds	r1, r3, #1
 8024a9c:	d103      	bne.n	8024aa6 <_raise_r+0x42>
 8024a9e:	2316      	movs	r3, #22
 8024aa0:	6003      	str	r3, [r0, #0]
 8024aa2:	2001      	movs	r0, #1
 8024aa4:	e7e7      	b.n	8024a76 <_raise_r+0x12>
 8024aa6:	2400      	movs	r4, #0
 8024aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024aac:	4628      	mov	r0, r5
 8024aae:	4798      	blx	r3
 8024ab0:	2000      	movs	r0, #0
 8024ab2:	e7e0      	b.n	8024a76 <_raise_r+0x12>

08024ab4 <raise>:
 8024ab4:	4b02      	ldr	r3, [pc, #8]	; (8024ac0 <raise+0xc>)
 8024ab6:	4601      	mov	r1, r0
 8024ab8:	6818      	ldr	r0, [r3, #0]
 8024aba:	f7ff bfd3 	b.w	8024a64 <_raise_r>
 8024abe:	bf00      	nop
 8024ac0:	20000074 	.word	0x20000074

08024ac4 <_kill_r>:
 8024ac4:	b538      	push	{r3, r4, r5, lr}
 8024ac6:	4d07      	ldr	r5, [pc, #28]	; (8024ae4 <_kill_r+0x20>)
 8024ac8:	2300      	movs	r3, #0
 8024aca:	4604      	mov	r4, r0
 8024acc:	4608      	mov	r0, r1
 8024ace:	4611      	mov	r1, r2
 8024ad0:	602b      	str	r3, [r5, #0]
 8024ad2:	f7dd ff3f 	bl	8002954 <_kill>
 8024ad6:	1c43      	adds	r3, r0, #1
 8024ad8:	d102      	bne.n	8024ae0 <_kill_r+0x1c>
 8024ada:	682b      	ldr	r3, [r5, #0]
 8024adc:	b103      	cbz	r3, 8024ae0 <_kill_r+0x1c>
 8024ade:	6023      	str	r3, [r4, #0]
 8024ae0:	bd38      	pop	{r3, r4, r5, pc}
 8024ae2:	bf00      	nop
 8024ae4:	2001b1ec 	.word	0x2001b1ec

08024ae8 <_getpid_r>:
 8024ae8:	f7dd bf2c 	b.w	8002944 <_getpid>

08024aec <__ascii_wctomb>:
 8024aec:	b149      	cbz	r1, 8024b02 <__ascii_wctomb+0x16>
 8024aee:	2aff      	cmp	r2, #255	; 0xff
 8024af0:	bf85      	ittet	hi
 8024af2:	238a      	movhi	r3, #138	; 0x8a
 8024af4:	6003      	strhi	r3, [r0, #0]
 8024af6:	700a      	strbls	r2, [r1, #0]
 8024af8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8024afc:	bf98      	it	ls
 8024afe:	2001      	movls	r0, #1
 8024b00:	4770      	bx	lr
 8024b02:	4608      	mov	r0, r1
 8024b04:	4770      	bx	lr

08024b06 <_malloc_usable_size_r>:
 8024b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024b0a:	1f18      	subs	r0, r3, #4
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	bfbc      	itt	lt
 8024b10:	580b      	ldrlt	r3, [r1, r0]
 8024b12:	18c0      	addlt	r0, r0, r3
 8024b14:	4770      	bx	lr
	...

08024b18 <_init>:
 8024b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b1a:	bf00      	nop
 8024b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024b1e:	bc08      	pop	{r3}
 8024b20:	469e      	mov	lr, r3
 8024b22:	4770      	bx	lr

08024b24 <_fini>:
 8024b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b26:	bf00      	nop
 8024b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024b2a:	bc08      	pop	{r3}
 8024b2c:	469e      	mov	lr, r3
 8024b2e:	4770      	bx	lr
