
tcp_socket_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000248a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005464  08024a38  08024a38  00034a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029e9c  08029e9c  00040244  2**0
                  CONTENTS
  4 .ARM          00000008  08029e9c  08029e9c  00039e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029ea4  08029ea4  00040244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029ea4  08029ea4  00039ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029ea8  08029ea8  00039ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08029eac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001afa8  20000244  0802a0f0  00040244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b1ec  0802a0f0  0004b1ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005fc50  00000000  00000000  00040274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ac9f  00000000  00000000  0009fec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cb0  00000000  00000000  000aab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b40  00000000  00000000  000ad818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039683  00000000  00000000  000b0358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004937d  00000000  00000000  000e99db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb011  00000000  00000000  00132d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022dd69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd84  00000000  00000000  0022ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024a20 	.word	0x08024a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	08024a20 	.word	0x08024a20

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <writeRegister>:
#include "PCA9685lib.h"


void writeRegister(uint8_t regAddress, uint8_t value)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	/* Writes in the register.
	 * param regAddress - where (at what address) to write
	 * param value - value to write
	 * */
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f004 fb83 	bl	800567c <HAL_Delay>
	uint8_t TxBuffer[8];
	TxBuffer[0] = regAddress;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	723b      	strb	r3, [r7, #8]
	TxBuffer[1] = value;
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&_hi2c, _i2cAddress, (uint8_t *) &TxBuffer, 2, 1000);
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <writeRegister+0x3c>)
 8000f80:	8819      	ldrh	r1, [r3, #0]
 8000f82:	f107 0208 	add.w	r2, r7, #8
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <writeRegister+0x40>)
 8000f90:	f005 f8ea 	bl	8006168 <HAL_I2C_Master_Transmit>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200144fc 	.word	0x200144fc
 8000fa0:	200144a8 	.word	0x200144a8

08000fa4 <readRegister>:

uint8_t readRegister(uint8_t regAddress)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	/* Reads the register.
	 * param regAddress - from which register to read (his address)
	 * */
	uint8_t RxBuffer;
	uint8_t Addr = regAddress;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&_hi2c, _i2cAddress, &Addr, sizeof(Addr), 1000);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <readRegister+0x44>)
 8000fb4:	8819      	ldrh	r1, [r3, #0]
 8000fb6:	f107 020e 	add.w	r2, r7, #14
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <readRegister+0x48>)
 8000fc4:	f005 f8d0 	bl	8006168 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_hi2c, _i2cAddress, &RxBuffer, sizeof(RxBuffer), 1000);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <readRegister+0x44>)
 8000fca:	8819      	ldrh	r1, [r3, #0]
 8000fcc:	f107 020f 	add.w	r2, r7, #15
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <readRegister+0x48>)
 8000fda:	f005 f9c3 	bl	8006364 <HAL_I2C_Master_Receive>
	return RxBuffer;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200144fc 	.word	0x200144fc
 8000fec:	200144a8 	.word	0x200144a8

08000ff0 <initPCA>:


void initPCA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	/* Initializes the PCA9685, sets the default frequency (can be disabled).
	 * param hi2c - I2C_Handler
	 * param DevAddress - PCA9685 address
	 * */
	HAL_Delay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f004 fb3d 	bl	800567c <HAL_Delay>
    _i2cAddress = DevAddress;
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <initPCA+0x54>)
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	8013      	strh	r3, [r2, #0]
    _hi2c = *hi2c;
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <initPCA+0x58>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	2354      	movs	r3, #84	; 0x54
 8001012:	461a      	mov	r2, r3
 8001014:	f020 f88a 	bl	802112c <memcpy>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <initPCA+0x5c>)
 800101e:	f004 ff13 	bl	8005e48 <HAL_GPIO_WritePin>
    writeRegister(PCA9685_MODE1_REG, PCA9685_MODE1_ALLCALL);
 8001022:	2101      	movs	r1, #1
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ff9b 	bl	8000f60 <writeRegister>
    resetDevice();
 800102a:	f000 f825 	bl	8001078 <resetDevice>
    // set the default internal frequency
    setOscillatorFrequency(FREQUENCY_OSCILLATOR);
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <initPCA+0x60>)
 8001030:	f000 f812 	bl	8001058 <setOscillatorFrequency>
    // set a default frequency
    setPWMFrequency(1000);
 8001034:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001054 <initPCA+0x64>
 8001038:	f000 f82a 	bl	8001090 <setPWMFrequency>

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200144fc 	.word	0x200144fc
 8001048:	200144a8 	.word	0x200144a8
 800104c:	40020400 	.word	0x40020400
 8001050:	017d7840 	.word	0x017d7840
 8001054:	447a0000 	.word	0x447a0000

08001058 <setOscillatorFrequency>:

void setOscillatorFrequency(uint32_t Freq)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	/* Setter for the internally tracked oscillator used for
	 * frequency calculations
	 * */
	  oscillator_freq = Freq;
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <setOscillatorFrequency+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20014500 	.word	0x20014500

08001078 <resetDevice>:
	 * frequency calculations
	 * */
	return oscillator_freq;
}
void resetDevice() 
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Sends a reset command to the PCA9685 */
    writeRegister(PCA9685_MODE1_REG, PCA9685_MODE1_RESTART);
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ff6e 	bl	8000f60 <writeRegister>
    HAL_Delay(10);
 8001084:	200a      	movs	r0, #10
 8001086:	f004 faf9 	bl	800567c <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <setPWMFrequency>:
	uint8_t wakeup = sleep & ~PCA9685_MODE1_SLEEP; // set sleep bit low
	writeRegister(PCA9685_MODE1_REG, wakeup);
}

void setPWMFrequency(float Frequency)
{
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Setter for the frequency, uses the prescaler calculation.
	 * This is why this function sets the approximate value.
	 * param Frequency(0-4095) to set desirable frequency
	 * */
	 if (Frequency < 1)
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d502      	bpl.n	80010b2 <setPWMFrequency+0x22>
		 Frequency = 1;
 80010ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010b0:	607b      	str	r3, [r7, #4]
	 if (Frequency > 3500)
 80010b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80011bc <setPWMFrequency+0x12c>
 80010ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	dd01      	ble.n	80010c8 <setPWMFrequency+0x38>
		 Frequency = 3500; // Datasheet limit
 80010c4:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <setPWMFrequency+0x130>)
 80010c6:	607b      	str	r3, [r7, #4]

	 float prescaleval = ((oscillator_freq / (Frequency * 4096.0)) + 0.5) - 1;;
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <setPWMFrequency+0x134>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa29 	bl	8000524 <__aeabi_ui2d>
 80010d2:	4604      	mov	r4, r0
 80010d4:	460d      	mov	r5, r1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa46 	bl	8000568 <__aeabi_f2d>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <setPWMFrequency+0x138>)
 80010e2:	f7ff fa99 	bl	8000618 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff fbbd 	bl	800086c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <setPWMFrequency+0x13c>)
 8001100:	f7ff f8d4 	bl	80002ac <__adddf3>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <setPWMFrequency+0x140>)
 8001112:	f7ff f8c9 	bl	80002a8 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd53 	bl	8000bc8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	60fb      	str	r3, [r7, #12]
	 if (prescaleval < 3)
 8001126:	edd7 7a03 	vldr	s15, [r7, #12]
 800112a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d501      	bpl.n	800113c <setPWMFrequency+0xac>
		 prescaleval = 3;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <setPWMFrequency+0x144>)
 800113a:	60fb      	str	r3, [r7, #12]
	 if (prescaleval > 255)
 800113c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001140:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80011d8 <setPWMFrequency+0x148>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	dd01      	ble.n	8001152 <setPWMFrequency+0xc2>
		 prescaleval = 255;
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <setPWMFrequency+0x14c>)
 8001150:	60fb      	str	r3, [r7, #12]

	  uint8_t prescale = (uint8_t)prescaleval;
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115a:	edc7 7a00 	vstr	s15, [r7]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	72fb      	strb	r3, [r7, #11]
	  uint8_t oldmode = readRegister(PCA9685_MODE1_REG);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff1e 	bl	8000fa4 <readRegister>
 8001168:	4603      	mov	r3, r0
 800116a:	72bb      	strb	r3, [r7, #10]
	  uint8_t newmode = (oldmode & ~PCA9685_MODE1_RESTART) | PCA9685_MODE1_SLEEP; // sleep
 800116c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001170:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001174:	b25b      	sxtb	r3, r3
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	b25b      	sxtb	r3, r3
 800117c:	727b      	strb	r3, [r7, #9]
	  writeRegister(PCA9685_MODE1_REG, newmode);                             // go to sleep
 800117e:	7a7b      	ldrb	r3, [r7, #9]
 8001180:	4619      	mov	r1, r3
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff feec 	bl	8000f60 <writeRegister>
	  writeRegister(PCA9685_PRESCALE_REG, prescale); // set the prescaler
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	4619      	mov	r1, r3
 800118c:	20fe      	movs	r0, #254	; 0xfe
 800118e:	f7ff fee7 	bl	8000f60 <writeRegister>
	  writeRegister(PCA9685_MODE1_REG, oldmode);
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	4619      	mov	r1, r3
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff fee2 	bl	8000f60 <writeRegister>
	  HAL_Delay(5);
 800119c:	2005      	movs	r0, #5
 800119e:	f004 fa6d 	bl	800567c <HAL_Delay>
	  // This sets the MODE1 register to turn on auto increment.
	  writeRegister(PCA9685_MODE1_REG, oldmode | PCA9685_MODE1_RESTART | PCA9685_MODE1_AUTOINC);
 80011a2:	7abb      	ldrb	r3, [r7, #10]
 80011a4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fed7 	bl	8000f60 <writeRegister>

}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	455ac000 	.word	0x455ac000
 80011c0:	455ac000 	.word	0x455ac000
 80011c4:	20014500 	.word	0x20014500
 80011c8:	40b00000 	.word	0x40b00000
 80011cc:	3fe00000 	.word	0x3fe00000
 80011d0:	3ff00000 	.word	0x3ff00000
 80011d4:	40400000 	.word	0x40400000
 80011d8:	437f0000 	.word	0x437f0000
 80011dc:	437f0000 	.word	0x437f0000

080011e0 <setLedPWM>:
	uint16_t Frequency = (oscillator_freq/((float)(presc + 1))-0.5) / (float)4096;
	return Frequency;
}

void setLedPWM(uint8_t led, int value)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
	/* PWM a single channel
	 * param led channel (1-16) to set PWM value for
	 * param on_value 0-4095 value to turn on the pulse
	 * Using setPWM() function.
	 * */
	setPWM(led, 0, value);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f804 	bl	8001200 <setPWM>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <setPWM>:

void setPWM(uint8_t led, int on_value, int off_value) 
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
	/* PWM a single channel
	 * param led channel (1-16) to set PWM value for
	 * param on_value 0-4095 value to turn on the pulse
	 * param off_value 0-4095 value to turn off the pulse
	 * */
	writeRegister(PCA9685_LED0_REG_ON_L + LED_MULTIPLYER * (led - 1), on_value & 0xFF);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3b01      	subs	r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3306      	adds	r3, #6
 800121a:	b2db      	uxtb	r3, r3
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe9c 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_LED0_REG_ON_H + LED_MULTIPLYER * (led - 1), on_value >> 8);
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	3b01      	subs	r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3307      	adds	r3, #7
 8001234:	b2da      	uxtb	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	121b      	asrs	r3, r3, #8
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f7ff fe8e 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_LED0_REG_OFF_L + LED_MULTIPLYER * (led - 1), off_value & 0xFF);
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	3301      	adds	r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe83 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_LED0_REG_OFF_H + LED_MULTIPLYER * (led - 1), off_value >> 8);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3b01      	subs	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3309      	adds	r3, #9
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	121b      	asrs	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	4610      	mov	r0, r2
 8001272:	f7ff fe75 	bl	8000f60 <writeRegister>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <setAllPWM>:
	 * */
	setAllPWM(0, value);
}

void setAllPWM(int on_value, int off_value) 
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	/* Sets PWM for all channels
	 * param on_value 0-4095 value to turn on the pulse
	 * param off_value 0-4095 value to turn off the pulse
	 * */
	writeRegister(PCA9685_ALLLED_REG_ON_L, on_value & 0xFF);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	20fa      	movs	r0, #250	; 0xfa
 8001290:	f7ff fe66 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_ALLLED_REG_ON_H, on_value >> 8);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	121b      	asrs	r3, r3, #8
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	20fb      	movs	r0, #251	; 0xfb
 800129e:	f7ff fe5f 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_ALLLED_OFF_L, off_value & 0xFF);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	20fc      	movs	r0, #252	; 0xfc
 80012aa:	f7ff fe59 	bl	8000f60 <writeRegister>
	writeRegister(PCA9685_ALLLED_OFF_H, off_value >> 8);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	121b      	asrs	r3, r3, #8
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	20fd      	movs	r0, #253	; 0xfd
 80012b8:	f7ff fe52 	bl	8000f60 <writeRegister>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <getPWM>:
uint16_t getPWM(uint8_t led)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	/* Getter for the PWM of a single channel value
	 * */
	int ledval = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
	ledval = readRegister(PCA9685_LED0_REG_OFF_H + LED_MULTIPLYER * (led-1));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3309      	adds	r3, #9
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe5f 	bl	8000fa4 <readRegister>
 80012e6:	4603      	mov	r3, r0
 80012e8:	60fb      	str	r3, [r7, #12]
	ledval = ledval & 0xf;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	60fb      	str	r3, [r7, #12]
	ledval <<= 8;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
	ledval += readRegister(PCA9685_LED0_REG_OFF_L + LED_MULTIPLYER * (led-1));
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe4e 	bl	8000fa4 <readRegister>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
	return ledval;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b29b      	uxth	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <setAllLedOff>:
	 * */
	setAllPWM(0, 4095);
}

void setAllLedOff()
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	/* Setter all channels to the min value(off)
	 * */
	setAllPWM(0, 0);
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffaa 	bl	800127e <setAllPWM>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__io_putchar>:

#define TRANSMIT_TIMEOUT 5
#define RECEIVE_TIMEOUT 1

int __io_putchar(int ch)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, sizeof(uint8_t), TRANSMIT_TIMEOUT);
 8001380:	1d39      	adds	r1, r7, #4
 8001382:	2305      	movs	r3, #5
 8001384:	2201      	movs	r2, #1
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <__io_putchar+0x20>)
 8001388:	f008 f87d 	bl	8009486 <HAL_UART_Transmit>
	return ch;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20014508 	.word	0x20014508

0800139c <http_temperature_path_handler>:
"<h2>Humidity: %s %%</h2>"\
"</body>"\
"</html>"

http_status_t http_temperature_path_handler(http_buffer_t *out)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6078      	str	r0, [r7, #4]
	printf("http_temperature_path_handler()\n");
 80013a4:	4840      	ldr	r0, [pc, #256]	; (80014a8 <http_temperature_path_handler+0x10c>)
 80013a6:	f020 fc8b 	bl	8021cc0 <puts>
	if (out == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <http_temperature_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e074      	b.n	800149e <http_temperature_path_handler+0x102>
	}
	char * content = malloc(256);
 80013b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013b8:	f01f fe9a 	bl	80210f0 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 80013c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <http_temperature_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e069      	b.n	800149e <http_temperature_path_handler+0x102>
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, ts);
#else
	char temperature[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d2:	4936      	ldr	r1, [pc, #216]	; (80014ac <http_temperature_path_handler+0x110>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fc38 	bl	8003c4a <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 80013da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2204      	movs	r2, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fd47 	bl	8003e78 <dht11_read>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 80013f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10e      	bne.n	8001416 <http_temperature_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), NULL, temperature);
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001400:	2200      	movs	r2, #0
 8001402:	2104      	movs	r1, #4
 8001404:	f002 fd90 	bl	8003f28 <dht11_to_str>
		printf("temperature = %s *C\n", temperature);
 8001408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140c:	4619      	mov	r1, r3
 800140e:	4828      	ldr	r0, [pc, #160]	; (80014b0 <http_temperature_path_handler+0x114>)
 8001410:	f020 fbd0 	bl	8021bb4 <iprintf>
 8001414:	e00c      	b.n	8001430 <http_temperature_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 8001416:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800141a:	4619      	mov	r1, r3
 800141c:	4825      	ldr	r0, [pc, #148]	; (80014b4 <http_temperature_path_handler+0x118>)
 800141e:	f020 fbc9 	bl	8021bb4 <iprintf>
		strncpy(temperature, "--", sizeof(temperature));
 8001422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001426:	2206      	movs	r2, #6
 8001428:	4923      	ldr	r1, [pc, #140]	; (80014b8 <http_temperature_path_handler+0x11c>)
 800142a:	4618      	mov	r0, r3
 800142c:	f020 fdf4 	bl	8022018 <strncpy>
	}
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, temperature);
 8001430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <http_temperature_path_handler+0x120>)
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800143c:	f020 fd02 	bl	8021e44 <sniprintf>
#endif

	int content_len = strlen(content);
 8001440:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001442:	f7fe fecf 	bl	80001e4 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6858      	ldr	r0, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <http_temperature_path_handler+0x124>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23c8      	movs	r3, #200	; 0xc8
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <http_temperature_path_handler+0x128>)
 800145e:	f020 fcf1 	bl	8021e44 <sniprintf>
	int header_len = strlen(out->data);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe febc 	bl	80001e4 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001478:	440a      	add	r2, r1
 800147a:	4293      	cmp	r3, r2
 800147c:	d204      	bcs.n	8001488 <http_temperature_path_handler+0xec>
	{
		free(content);
 800147e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001480:	f01f fe3e 	bl	8021100 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8001484:	2304      	movs	r3, #4
 8001486:	e00a      	b.n	800149e <http_temperature_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800148e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001490:	4618      	mov	r0, r3
 8001492:	f020 fd9c 	bl	8021fce <strncat>
	free(content);
 8001496:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001498:	f01f fe32 	bl	8021100 <free>
	return HTTP_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3748      	adds	r7, #72	; 0x48
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08024a74 	.word	0x08024a74
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	08024a94 	.word	0x08024a94
 80014b4:	08024aac 	.word	0x08024aac
 80014b8:	08024ac4 	.word	0x08024ac4
 80014bc:	08024ac8 	.word	0x08024ac8
 80014c0:	08024b7c 	.word	0x08024b7c
 80014c4:	08024b04 	.word	0x08024b04

080014c8 <http_humidity_path_handler>:

http_status_t http_humidity_path_handler(http_buffer_t *out)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b094      	sub	sp, #80	; 0x50
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]
	printf("http_humidity_path_handler()\n");
 80014d0:	4840      	ldr	r0, [pc, #256]	; (80015d4 <http_humidity_path_handler+0x10c>)
 80014d2:	f020 fbf5 	bl	8021cc0 <puts>
	if (out == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <http_humidity_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 80014dc:	2301      	movs	r3, #1
 80014de:	e074      	b.n	80015ca <http_humidity_path_handler+0x102>
	}
	char * content = malloc(256);
 80014e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014e4:	f01f fe04 	bl	80210f0 <malloc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 80014ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <http_humidity_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e069      	b.n	80015ca <http_humidity_path_handler+0x102>
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, hs);
#else
	char humidity[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fe:	4936      	ldr	r1, [pc, #216]	; (80015d8 <http_humidity_path_handler+0x110>)
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fba2 	bl	8003c4a <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 8001506:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2204      	movs	r2, #4
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fcb1 	bl	8003e78 <dht11_read>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 800151c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10e      	bne.n	8001542 <http_humidity_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), humidity, NULL);
 8001524:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001528:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800152c:	2300      	movs	r3, #0
 800152e:	2104      	movs	r1, #4
 8001530:	f002 fcfa 	bl	8003f28 <dht11_to_str>
		printf("humidity = %s %%\n", humidity);
 8001534:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001538:	4619      	mov	r1, r3
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <http_humidity_path_handler+0x114>)
 800153c:	f020 fb3a 	bl	8021bb4 <iprintf>
 8001540:	e00c      	b.n	800155c <http_humidity_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 8001542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001546:	4619      	mov	r1, r3
 8001548:	4825      	ldr	r0, [pc, #148]	; (80015e0 <http_humidity_path_handler+0x118>)
 800154a:	f020 fb33 	bl	8021bb4 <iprintf>
		strncpy(humidity, "--", sizeof(humidity));
 800154e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001552:	2206      	movs	r2, #6
 8001554:	4923      	ldr	r1, [pc, #140]	; (80015e4 <http_humidity_path_handler+0x11c>)
 8001556:	4618      	mov	r0, r3
 8001558:	f020 fd5e 	bl	8022018 <strncpy>
	}
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, humidity);
 800155c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <http_humidity_path_handler+0x120>)
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001568:	f020 fc6c 	bl	8021e44 <sniprintf>
#endif

	int content_len = strlen(content);
 800156c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800156e:	f7fe fe39 	bl	80001e4 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6858      	ldr	r0, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <http_humidity_path_handler+0x124>)
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	23c8      	movs	r3, #200	; 0xc8
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <http_humidity_path_handler+0x128>)
 800158a:	f020 fc5b 	bl	8021e44 <sniprintf>
	int header_len = strlen(out->data);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe26 	bl	80001e4 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015a4:	440a      	add	r2, r1
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d204      	bcs.n	80015b4 <http_humidity_path_handler+0xec>
	{
		free(content);
 80015aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015ac:	f01f fda8 	bl	8021100 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 80015b0:	2304      	movs	r3, #4
 80015b2:	e00a      	b.n	80015ca <http_humidity_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015bc:	4618      	mov	r0, r3
 80015be:	f020 fd06 	bl	8021fce <strncat>
	free(content);
 80015c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015c4:	f01f fd9c 	bl	8021100 <free>
	return HTTP_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3748      	adds	r7, #72	; 0x48
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08024b80 	.word	0x08024b80
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	08024ba0 	.word	0x08024ba0
 80015e0:	08024aac 	.word	0x08024aac
 80015e4:	08024ac4 	.word	0x08024ac4
 80015e8:	08024bb4 	.word	0x08024bb4
 80015ec:	08024b7c 	.word	0x08024b7c
 80015f0:	08024b04 	.word	0x08024b04

080015f4 <http_led_toggle_handler>:

void http_led_toggle_handler(bool LED[4])
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <http_led_toggle_handler+0x48>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e010      	b.n	800162a <http_led_toggle_handler+0x36>
	{
		if (LED[i])
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <http_led_toggle_handler+0x30>
		{
			BSP_LED_Toggle(led[i]);
 8001614:	f107 0208 	add.w	r2, r7, #8
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fac2 	bl	8003ba8 <BSP_LED_Toggle>
	for(size_t i = 0; i < 4; i++)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d9eb      	bls.n	8001608 <http_led_toggle_handler+0x14>
		}
	}
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08024be8 	.word	0x08024be8

08001640 <http_led_on_handler>:

void http_led_on_handler(bool LED[4])
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <http_led_on_handler+0x48>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e010      	b.n	8001676 <http_led_on_handler+0x36>
	{
		if (LED[i])
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <http_led_on_handler+0x30>
		{
			BSP_LED_On(led[i]);
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f002 fa68 	bl	8003b40 <BSP_LED_On>
	for(size_t i = 0; i < 4; i++)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d9eb      	bls.n	8001654 <http_led_on_handler+0x14>
		}
	}
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08024be8 	.word	0x08024be8

0800168c <http_led_off_handler>:

void http_led_off_handler(bool LED[4])
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <http_led_off_handler+0x48>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e010      	b.n	80016c2 <http_led_off_handler+0x36>
	{
		if (LED[i])
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <http_led_off_handler+0x30>
		{
			BSP_LED_Off(led[i]);
 80016ac:	f107 0208 	add.w	r2, r7, #8
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fa5c 	bl	8003b74 <BSP_LED_Off>
	for(size_t i = 0; i < 4; i++)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d9eb      	bls.n	80016a0 <http_led_off_handler+0x14>
		}
	}
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	08024be8 	.word	0x08024be8

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b094      	sub	sp, #80	; 0x50
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016de:	f003 ff8b 	bl	80055f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f002 f9b4 	bl	8003a50 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f002 f9b1 	bl	8003a50 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80016ee:	2002      	movs	r0, #2
 80016f0:	f002 f9ae 	bl	8003a50 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f002 f9ab 	bl	8003a50 <BSP_LED_Init>
  /* Initialization of DWT module (cortex-m4)*/
  DWT_Init();
 80016fa:	f002 f933 	bl	8003964 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f883 	bl	8001808 <SystemClock_Config>
  printf("Semihosting activated\n");
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 f943 	bl	800198c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001706:	f000 f917 	bl	8001938 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800170a:	f000 f8e7 	bl	80018dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initPCA(&hi2c1, 0x80); // Init PCA9685
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4830      	ldr	r0, [pc, #192]	; (80017d4 <main+0xfc>)
 8001712:	f7ff fc6d 	bl	8000ff0 <initPCA>
    setAllLedOff();    // Turn off all channels
 8001716:	f7ff fe02 	bl	800131e <setAllLedOff>
    setPWMFrequency(1000);  // Set PCA9685 frequency to 1000Hz
 800171a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80017d8 <main+0x100>
 800171e:	f7ff fcb7 	bl	8001090 <setPWMFrequency>
  /* WARNING: if you use minicom as a terminal utility,
   * please, add 'pu addcarreturn Yes' to the file ~/.minirc.dfl
   * to attach '\r' after '\n'
   * */
  printf("USART3 initialized\n");
 8001722:	482e      	ldr	r0, [pc, #184]	; (80017dc <main+0x104>)
 8001724:	f020 facc 	bl	8021cc0 <puts>
  NVIC_SetPriorityGrouping(0);
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fe01 	bl	8001330 <__NVIC_SetPriorityGrouping>

  lcd_init();
 800172e:	f008 fa33 	bl	8009b98 <lcd_init>
  /* Use the LCD_CLR_SCR_CMD command
   * to clear the LCD screen */
  lcd_command_set(LCD_CLR_SCR_CMD);
 8001732:	2001      	movs	r0, #1
 8001734:	f008 fa0a 	bl	8009b4c <lcd_command_set>
  lcd_puts("GL Embedded");
 8001738:	4829      	ldr	r0, [pc, #164]	; (80017e0 <main+0x108>)
 800173a:	f008 fa8b 	bl	8009c54 <lcd_puts>
  /* Do not forget to set the LCD_LFCR_CMD
   * command when printing more than 16
   * characters because LCD 16x2 is used */
  lcd_command_set(LCD_LFCR_CMD);
 800173e:	20a8      	movs	r0, #168	; 0xa8
 8001740:	f008 fa04 	bl	8009b4c <lcd_command_set>
  lcd_puts("Starter Kit");
 8001744:	4827      	ldr	r0, [pc, #156]	; (80017e4 <main+0x10c>)
 8001746:	f008 fa85 	bl	8009c54 <lcd_puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <main+0x110>)
 800174c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001750:	461d      	mov	r5, r3
 8001752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800175a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f008 ff54 	bl	800a60e <osThreadCreate>
 8001766:	4603      	mov	r3, r0
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <main+0x114>)
 800176a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpClientTask */
  osThreadDef(tcpClientTask, StartTcpClientTask, osPriorityNormal, 0, 2048);
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <main+0x118>)
 800176e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001772:	461d      	mov	r5, r3
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	6023      	str	r3, [r4, #0]
  tcpClientTaskHandle = osThreadCreate(osThread(tcpClientTask), NULL);
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f008 ff43 	bl	800a60e <osThreadCreate>
 8001788:	4603      	mov	r3, r0
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <main+0x11c>)
 800178c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpServerTask */
  osThreadDef(tcpServerTask, StartTcpServerTask, osPriorityNormal, 0, 2048);
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <main+0x120>)
 8001790:	f107 0414 	add.w	r4, r7, #20
 8001794:	461d      	mov	r5, r3
 8001796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	6023      	str	r3, [r4, #0]
  tcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f008 ff32 	bl	800a60e <osThreadCreate>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <main+0x124>)
 80017ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpServerTask */
  osThreadDef(udpServerTask, StartUdpServerTask, osPriorityNormal, 0, 2048);
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <main+0x128>)
 80017b2:	463c      	mov	r4, r7
 80017b4:	461d      	mov	r5, r3
 80017b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	6023      	str	r3, [r4, #0]
  udpServerTaskHandle = osThreadCreate(osThread(udpServerTask), NULL);
 80017be:	463b      	mov	r3, r7
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f008 ff23 	bl	800a60e <osThreadCreate>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <main+0x12c>)
 80017cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017ce:	f008 ff07 	bl	800a5e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <main+0xfa>
 80017d4:	20014550 	.word	0x20014550
 80017d8:	447a0000 	.word	0x447a0000
 80017dc:	08024bec 	.word	0x08024bec
 80017e0:	08024c00 	.word	0x08024c00
 80017e4:	08024c0c 	.word	0x08024c0c
 80017e8:	08024c18 	.word	0x08024c18
 80017ec:	20014504 	.word	0x20014504
 80017f0:	08024c2c 	.word	0x08024c2c
 80017f4:	2001454c 	.word	0x2001454c
 80017f8:	08024c40 	.word	0x08024c40
 80017fc:	200145a8 	.word	0x200145a8
 8001800:	08024c54 	.word	0x08024c54
 8001804:	200145a4 	.word	0x200145a4

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	; 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	; 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f01f fcb0 	bl	802117c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <SystemClock_Config+0xcc>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <SystemClock_Config+0xcc>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <SystemClock_Config+0xcc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <SystemClock_Config+0xd0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <SystemClock_Config+0xd0>)
 8001852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <SystemClock_Config+0xd0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001878:	2308      	movs	r3, #8
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800187c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001886:	2307      	movs	r3, #7
 8001888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	4618      	mov	r0, r3
 8001890:	f006 fe58 	bl	8008544 <HAL_RCC_OscConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800189a:	f000 fa87 	bl	8001dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2105      	movs	r1, #5
 80018bc:	4618      	mov	r0, r3
 80018be:	f007 f8b9 	bl	8008a34 <HAL_RCC_ClockConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018c8:	f000 fa70 	bl	8001dac <Error_Handler>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	; 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_I2C1_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <MX_I2C1_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_I2C1_Init+0x50>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_I2C1_Init+0x58>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_I2C1_Init+0x50>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_I2C1_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_I2C1_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_I2C1_Init+0x50>)
 800191a:	f004 fae1 	bl	8005ee0 <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 fa42 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20014550 	.word	0x20014550
 8001930:	40005400 	.word	0x40005400
 8001934:	000186a0 	.word	0x000186a0

08001938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <MX_USART3_UART_Init+0x50>)
 8001940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_USART3_UART_Init+0x4c>)
 8001970:	f007 fd3c 	bl	80093ec <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800197a:	f000 fa17 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20014508 	.word	0x20014508
 8001988:	40004800 	.word	0x40004800

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	4bb1      	ldr	r3, [pc, #708]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4ab0      	ldr	r2, [pc, #704]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4bae      	ldr	r3, [pc, #696]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	4baa      	ldr	r3, [pc, #680]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4aa9      	ldr	r2, [pc, #676]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4ba7      	ldr	r3, [pc, #668]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4ba3      	ldr	r3, [pc, #652]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4aa2      	ldr	r2, [pc, #648]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4ba0      	ldr	r3, [pc, #640]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b9c      	ldr	r3, [pc, #624]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a9b      	ldr	r2, [pc, #620]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b99      	ldr	r3, [pc, #612]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b95      	ldr	r3, [pc, #596]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b8e      	ldr	r3, [pc, #568]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a8d      	ldr	r2, [pc, #564]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <MX_GPIO_Init+0x2e0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8001a50:	4887      	ldr	r0, [pc, #540]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001a52:	f004 f9f9 	bl	8005e48 <HAL_GPIO_WritePin>
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4886      	ldr	r0, [pc, #536]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001a5c:	f004 f9f4 	bl	8005e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001a60:	2200      	movs	r2, #0
 8001a62:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8001a66:	4884      	ldr	r0, [pc, #528]	; (8001c78 <MX_GPIO_Init+0x2ec>)
 8001a68:	f004 f9ee 	bl	8005e48 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	4882      	ldr	r0, [pc, #520]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001a72:	f004 f9e9 	bl	8005e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin DISP_RS_Pin DISP_RW_Pin DISP_ENA_Pin
                           DISP_DB4_Pin DISP_DB5_Pin DISP_DB6_Pin DISP_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 8001a76:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001a7a:	61fb      	str	r3, [r7, #28]
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4878      	ldr	r0, [pc, #480]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001a90:	f003 ff2a 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4872      	ldr	r0, [pc, #456]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001aac:	f003 ff1c 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac0:	2305      	movs	r3, #5
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	486a      	ldr	r0, [pc, #424]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001acc:	f003 ff0c 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <MX_GPIO_Init+0x2f4>)
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4868      	ldr	r0, [pc, #416]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001ae4:	f003 ff00 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001af8:	2306      	movs	r3, #6
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4860      	ldr	r0, [pc, #384]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001b04:	f003 fef0 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4858      	ldr	r0, [pc, #352]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001b24:	f003 fee0 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4850      	ldr	r0, [pc, #320]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001b3c:	f003 fed4 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_PHY_INT_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_INT_Pin;
 8001b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <MX_GPIO_Init+0x2fc>)
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_PHY_INT_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4846      	ldr	r0, [pc, #280]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001b56:	f003 fec7 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b6c:	2305      	movs	r3, #5
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4841      	ldr	r0, [pc, #260]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001b78:	f003 feb6 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_PHY_RST_Pin DHT11_IO_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001b7c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8001b80:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4838      	ldr	r0, [pc, #224]	; (8001c78 <MX_GPIO_Init+0x2ec>)
 8001b96:	f003 fea7 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b9a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bac:	2306      	movs	r3, #6
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	482f      	ldr	r0, [pc, #188]	; (8001c74 <MX_GPIO_Init+0x2e8>)
 8001bb8:	f003 fe96 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	482c      	ldr	r0, [pc, #176]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001bd2:	f003 fe89 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001bd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001be8:	230a      	movs	r3, #10
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4824      	ldr	r0, [pc, #144]	; (8001c84 <MX_GPIO_Init+0x2f8>)
 8001bf4:	f003 fe78 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481b      	ldr	r0, [pc, #108]	; (8001c78 <MX_GPIO_Init+0x2ec>)
 8001c0c:	f003 fe6c 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4815      	ldr	r0, [pc, #84]	; (8001c7c <MX_GPIO_Init+0x2f0>)
 8001c28:	f003 fe5e 	bl	80058e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_GPIO_Init+0x300>)
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_GPIO_Init+0x2e4>)
 8001c40:	f003 fe52 	bl	80058e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	2006      	movs	r0, #6
 8001c4a:	f003 fdf3 	bl	8005834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c4e:	2006      	movs	r0, #6
 8001c50:	f003 fe0c 	bl	800586c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2105      	movs	r1, #5
 8001c58:	2017      	movs	r0, #23
 8001c5a:	f003 fdeb 	bl	8005834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c5e:	2017      	movs	r0, #23
 8001c60:	f003 fe04 	bl	800586c <HAL_NVIC_EnableIRQ>

}
 8001c64:	bf00      	nop
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40020000 	.word	0x40020000
 8001c88:	10210000 	.word	0x10210000
 8001c8c:	10120000 	.word	0x10120000

08001c90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d113      	bne.n	8001cc8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ca4:	f004 f8b8 	bl	8005e18 <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d112      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
		{
			printf("The blue button is pushed\n");
 8001cae:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001cb0:	f020 f806 	bl	8021cc0 <puts>
			BSP_LED_Toggle(GREEN);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f001 ff77 	bl	8003ba8 <BSP_LED_Toggle>
			osSignalSet (tcpClientTaskHandle, SIGNAL_PUSH_BUTTON);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f008 fcf3 	bl	800a6ac <osSignalSet>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
	{
        /* Get the IT status register value */
        ethernetif_phy_irq();
	}
}
 8001cc6:	e005      	b.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cce:	d101      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
        ethernetif_phy_irq();
 8001cd0:	f008 f85e 	bl	8009d90 <ethernetif_phy_irq>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	08024c68 	.word	0x08024c68
 8001ce4:	2001454c 	.word	0x2001454c

08001ce8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b08f      	sub	sp, #60	; 0x3c
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001cf0:	f007 ffdc 	bl	8009cac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  struct dhcp *dhcp;
  char msg[16];
  bool dhcp_bound_flag = false;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t offered_ip = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	  dhcp = netif_dhcp_data(lwip_get_netif());
 8001cfe:	f007 ffcb 	bl	8009c98 <lwip_get_netif>
 8001d02:	4603      	mov	r3, r0
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	61fb      	str	r3, [r7, #28]

	  if (dhcp->state == DHCP_STATE_BOUND && !dhcp_bound_flag)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	795b      	ldrb	r3, [r3, #5]
 8001d0c:	2b0a      	cmp	r3, #10
 8001d0e:	d12e      	bne.n	8001d6e <StartDefaultTask+0x86>
 8001d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d027      	beq.n	8001d6e <StartDefaultTask+0x86>
	  {
		  dhcp_bound_flag = true;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  lcd_command_set(LCD_CLR_SCR_CMD);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f007 ff11 	bl	8009b4c <lcd_command_set>
		  lcd_puts("DHCP IP address:");
 8001d2a:	4815      	ldr	r0, [pc, #84]	; (8001d80 <StartDefaultTask+0x98>)
 8001d2c:	f007 ff92 	bl	8009c54 <lcd_puts>
		  lcd_command_set(LCD_LFCR_CMD);
 8001d30:	20a8      	movs	r0, #168	; 0xa8
 8001d32:	f007 ff0b 	bl	8009b4c <lcd_command_set>
		  offered_ip = ip4_addr_get_u32(&dhcp->offered_ip_addr);
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	623b      	str	r3, [r7, #32]
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	b2dc      	uxtb	r4, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	0a1b      	lsrs	r3, r3, #8
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d44:	b2db      	uxtb	r3, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001d46:	6a3a      	ldr	r2, [r7, #32]
 8001d48:	0c12      	lsrs	r2, r2, #16
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d4a:	b2d2      	uxtb	r2, r2
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	0e09      	lsrs	r1, r1, #24
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001d50:	f107 000c 	add.w	r0, r7, #12
 8001d54:	9102      	str	r1, [sp, #8]
 8001d56:	9201      	str	r2, [sp, #4]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <StartDefaultTask+0x9c>)
 8001d5e:	2110      	movs	r1, #16
 8001d60:	f020 f870 	bl	8021e44 <sniprintf>
		  lcd_puts(msg);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f007 ff73 	bl	8009c54 <lcd_puts>
	  }

	  BSP_LED_Toggle(BLUE);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f001 ff1a 	bl	8003ba8 <BSP_LED_Toggle>
	  osDelay(1000);
 8001d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d78:	f008 fc83 	bl	800a682 <osDelay>
	  dhcp = netif_dhcp_data(lwip_get_netif());
 8001d7c:	e7bf      	b.n	8001cfe <StartDefaultTask+0x16>
 8001d7e:	bf00      	nop
 8001d80:	08024c84 	.word	0x08024c84
 8001d84:	08024c98 	.word	0x08024c98

08001d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d9a:	f003 fc4f 	bl	800563c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010000 	.word	0x40010000

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <parse_command>:
		parse_version,
		NULL
};

static http_status_t parse_command(const char *token, http_server_request_t *request)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_command() %s\n", token);
	if (strncmp(token, HTTP_GET_STR, HTTP_GET_STR_LEN) == 0)
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	491a      	ldr	r1, [pc, #104]	; (8001e30 <parse_command+0x78>)
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f020 f914 	bl	8021ff4 <strncmp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <parse_command+0x22>
	{
		request->command = HTTP_GET;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e025      	b.n	8001e26 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_PUT_STR, HTTP_PUT_STR_LEN) == 0)
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4915      	ldr	r1, [pc, #84]	; (8001e34 <parse_command+0x7c>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f020 f908 	bl	8021ff4 <strncmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <parse_command+0x3a>
	{
		request->command = HTTP_PUT;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e019      	b.n	8001e26 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_POST_STR, HTTP_POST_STR_LEN) == 0)
 8001df2:	2204      	movs	r2, #4
 8001df4:	4910      	ldr	r1, [pc, #64]	; (8001e38 <parse_command+0x80>)
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f020 f8fc 	bl	8021ff4 <strncmp>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <parse_command+0x52>
	{
		request->command = HTTP_POST;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e00d      	b.n	8001e26 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_RESET_STR, HTTP_RESET_STR_LEN) == 0)
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	490b      	ldr	r1, [pc, #44]	; (8001e3c <parse_command+0x84>)
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f020 f8f0 	bl	8021ff4 <strncmp>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <parse_command+0x6a>
	{
		request->command = HTTP_RESET;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e001      	b.n	8001e26 <parse_command+0x6e>
	}
	else
	{
		return HTTP_ERR_CMD;
 8001e22:	2305      	movs	r3, #5
 8001e24:	e000      	b.n	8001e28 <parse_command+0x70>
	}
	return HTTP_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08024cb0 	.word	0x08024cb0
 8001e34:	08024cb4 	.word	0x08024cb4
 8001e38:	08024cb8 	.word	0x08024cb8
 8001e3c:	08024cc0 	.word	0x08024cc0

08001e40 <parse_path>:

static http_status_t parse_path(const char *token, http_server_request_t *request)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_path()\n");
	int len;
	if ((len = strlen(token)) > MAX_PATH_LENGTH)
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe f9ca 	bl	80001e4 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	dd01      	ble.n	8001e5e <parse_path+0x1e>
	{
		return HTTP_ERR_PATH_LEN;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e008      	b.n	8001e70 <parse_path+0x30>
	}
	strncpy(request->path, token, len + 1);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	1c58      	adds	r0, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	461a      	mov	r2, r3
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	f020 f8d5 	bl	8022018 <strncpy>
	HTTP_DEBUG_PRINF("path: %s\n",request->path);
	return HTTP_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <parse_version>:

static http_status_t parse_version(const char *token, http_server_request_t *request)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_version()\n");
	int len;
	if ((len = strlen(token)) > VERSION_LENGTH)
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe f9ae 	bl	80001e4 <strlen>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b09      	cmp	r3, #9
 8001e90:	d901      	bls.n	8001e96 <parse_version+0x1e>
	{
		return HTTP_ERR_VERSION_LEN;
 8001e92:	2307      	movs	r3, #7
 8001e94:	e009      	b.n	8001eaa <parse_version+0x32>
	}
	strncpy(request->version, token, len + 1);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f103 0011 	add.w	r0, r3, #17
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f020 f8b8 	bl	8022018 <strncpy>
	HTTP_DEBUG_PRINF("version: %s\n",request->version);
	return HTTP_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <parse_command_line>:

static http_status_t parse_command_line(const char *line, http_server_request_t *request)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	http_parser_state_t state = HTTP_PARSE_CMD;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
	char *token = strtok((char *)line, " ");
 8001ec2:	4916      	ldr	r1, [pc, #88]	; (8001f1c <parse_command_line+0x68>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f020 f8d1 	bl	802206c <strtok>
 8001eca:	6138      	str	r0, [r7, #16]
	http_status_t status;

	while(token != NULL && state != HTTP_PARSE_DONE)
 8001ecc:	e01b      	b.n	8001f06 <parse_command_line+0x52>
	{
		HTTP_DEBUG_PRINF("command line token : %s\n", token);

		if (handlers[state])
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <parse_command_line+0x6c>)
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <parse_command_line+0x48>
		{
			status = handlers[state](token, request);
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <parse_command_line+0x6c>)
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6938      	ldr	r0, [r7, #16]
 8001ee6:	4798      	blx	r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
			HTTP_DEBUG_PRINF("state : %d\n", state);
			if (status != HTTP_OK)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <parse_command_line+0x42>
			{
				HTTP_DEBUG_PRINF("handlers() error : %d\n", state);
				return status;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	e00e      	b.n	8001f14 <parse_command_line+0x60>
			}
			state++;
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
		}
		token = strtok(NULL, " ");
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <parse_command_line+0x68>)
 8001efe:	2000      	movs	r0, #0
 8001f00:	f020 f8b4 	bl	802206c <strtok>
 8001f04:	6138      	str	r0, [r7, #16]
	while(token != NULL && state != HTTP_PARSE_DONE)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <parse_command_line+0x5e>
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d1dd      	bne.n	8001ece <parse_command_line+0x1a>
	}
	return status;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	08024cc8 	.word	0x08024cc8
 8001f20:	20000000 	.word	0x20000000

08001f24 <parse_payload>:

static http_status_t parse_payload(const char *payload, http_server_request_t *request)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	http_status_t status;
	if (payload == NULL || request == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <parse_payload+0x16>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <parse_payload+0x1a>
	{
		return HTTP_ERR_FAULT;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e034      	b.n	8001fa8 <parse_payload+0x84>
	}
	char *content = strstr(payload, HTTP_CONTENT_SEPARATOR);
 8001f3e:	491c      	ldr	r1, [pc, #112]	; (8001fb0 <parse_payload+0x8c>)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f020 f87c 	bl	802203e <strstr>
 8001f46:	6578      	str	r0, [r7, #84]	; 0x54
	if (content != NULL)
 8001f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <parse_payload+0x3e>
	{
		content += sizeof(HTTP_CONTENT_SEPARATOR) - 1;
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	3304      	adds	r3, #4
 8001f52:	657b      	str	r3, [r7, #84]	; 0x54
		strncpy(request->content, content, MAX_CONTENT_LENGTH);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	331a      	adds	r3, #26
 8001f58:	2240      	movs	r2, #64	; 0x40
 8001f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f020 f85b 	bl	8022018 <strncpy>
		HTTP_DEBUG_PRINF("content : %s\n", content);
	}

	char *token = strtok((char *)payload, HTTP_HEADER_SEPARATOR);
 8001f62:	4914      	ldr	r1, [pc, #80]	; (8001fb4 <parse_payload+0x90>)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f020 f881 	bl	802206c <strtok>
 8001f6a:	6538      	str	r0, [r7, #80]	; 0x50
	if (token == NULL)
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <parse_payload+0x52>
	{
		return HTTP_ERR_HEADER;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e018      	b.n	8001fa8 <parse_payload+0x84>
	}

	char command_line[MAX_COMMAND_LINE_LENGTH];
	strncpy(command_line, token, sizeof(command_line));
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	2240      	movs	r2, #64	; 0x40
 8001f7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f020 f84a 	bl	8022018 <strncpy>

	status = parse_command_line((const char *)command_line, request);
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff92 	bl	8001eb4 <parse_command_line>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (status != HTTP_OK)
 8001f96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <parse_payload+0x80>
	{
		return status;
 8001f9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fa2:	e001      	b.n	8001fa8 <parse_payload+0x84>
	}

	return status;
 8001fa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3758      	adds	r7, #88	; 0x58
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08024ccc 	.word	0x08024ccc
 8001fb4:	08024cd4 	.word	0x08024cd4

08001fb8 <error_code_handler>:

static http_status_t error_code_handler(const char *error_str, unsigned int error_code, const char *error_message, http_buffer_t *out)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
	char *tmp = (char *)malloc(256);
 8001fc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fca:	f01f f891 	bl	80210f0 <malloc>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	61fb      	str	r3, [r7, #28]
	if (tmp == NULL)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <error_code_handler+0x24>
		return HTTP_ERR_FAULT;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e036      	b.n	800204a <error_code_handler+0x92>
	sprintf(tmp, HTTP_ERROR_MESSAGE_TEMPLATE_STR, error_str, error_str, error_message);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	491b      	ldr	r1, [pc, #108]	; (8002054 <error_code_handler+0x9c>)
 8001fe6:	69f8      	ldr	r0, [r7, #28]
 8001fe8:	f01f ff60 	bl	8021eac <siprintf>
	int content_len = strlen(tmp);
 8001fec:	69f8      	ldr	r0, [r7, #28]
 8001fee:	f7fe f8f9 	bl	80001e4 <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, error_code, error_str, content_len);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6858      	ldr	r0, [r3, #4]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <error_code_handler+0xa0>)
 800200a:	f01f ff1b 	bl	8021e44 <sniprintf>
	int header_len = strlen(out->data);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f8e6 	bl	80001e4 <strlen>
 8002018:	4603      	mov	r3, r0
 800201a:	617b      	str	r3, [r7, #20]
	if (out->length < header_len + content_len)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	440a      	add	r2, r1
 8002026:	4293      	cmp	r3, r2
 8002028:	d204      	bcs.n	8002034 <error_code_handler+0x7c>
	{
		free(tmp);
 800202a:	69f8      	ldr	r0, [r7, #28]
 800202c:	f01f f868 	bl	8021100 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8002030:	2304      	movs	r3, #4
 8002032:	e00a      	b.n	800204a <error_code_handler+0x92>
	}
	strncat(out->data, tmp, content_len);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	69f9      	ldr	r1, [r7, #28]
 800203c:	4618      	mov	r0, r3
 800203e:	f01f ffc6 	bl	8021fce <strncat>
	free(tmp);
 8002042:	69f8      	ldr	r0, [r7, #28]
 8002044:	f01f f85c 	bl	8021100 <free>
	return HTTP_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3720      	adds	r7, #32
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	08024cd8 	.word	0x08024cd8
 8002058:	08024d5c 	.word	0x08024d5c

0800205c <bad_request_handler>:

static http_status_t bad_request_handler(http_buffer_t *out)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_BAD_REQUEST_ERR_STR, HTTP_BAD_REQUEST_ERR_CODE, HTTP_ERR_400_STR, out);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <bad_request_handler+0x20>)
 8002068:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <bad_request_handler+0x24>)
 800206e:	f7ff ffa3 	bl	8001fb8 <error_code_handler>
 8002072:	4603      	mov	r3, r0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	08024dd4 	.word	0x08024dd4
 8002080:	08024de0 	.word	0x08024de0

08002084 <not_implemented_handler>:

static http_status_t not_implemented_handler(http_buffer_t *out)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_IMPLEMENTED_ERR_STR, HTTP_NOT_IMPLEMENTED_ERR_CODE, HTTP_ERR_501_STR, out);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <not_implemented_handler+0x20>)
 8002090:	f240 11f5 	movw	r1, #501	; 0x1f5
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <not_implemented_handler+0x24>)
 8002096:	f7ff ff8f 	bl	8001fb8 <error_code_handler>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	08024dec 	.word	0x08024dec
 80020a8:	08024df8 	.word	0x08024df8

080020ac <not_found_handler>:

static http_status_t not_found_handler(http_buffer_t *out)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_FOUND_ERR_STR, HTTP_NOT_FOUND_ERR_CODE, HTTP_ERR_404_STR, out);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <not_found_handler+0x20>)
 80020b8:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <not_found_handler+0x24>)
 80020be:	f7ff ff7b 	bl	8001fb8 <error_code_handler>
 80020c2:	4603      	mov	r3, r0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	08024e08 	.word	0x08024e08
 80020d0:	08024e14 	.word	0x08024e14

080020d4 <reset_content_handler>:

static http_status_t reset_content_handler(http_buffer_t *out)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	6078      	str	r0, [r7, #4]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_RESET_CONTENT_CODE, HTTP_RESET_CONTENT_STR, 0);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6858      	ldr	r0, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <reset_content_handler+0x2c>)
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	23cd      	movs	r3, #205	; 0xcd
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <reset_content_handler+0x30>)
 80020f0:	f01f fea8 	bl	8021e44 <sniprintf>
	return HTTP_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08024e20 	.word	0x08024e20
 8002104:	08024d5c 	.word	0x08024d5c

08002108 <error_handler>:

static http_status_t error_handler(http_status_t status, http_buffer_t *out)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
	switch(status)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d010      	beq.n	800213c <error_handler+0x34>
 800211a:	2b0c      	cmp	r3, #12
 800211c:	dc13      	bgt.n	8002146 <error_handler+0x3e>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <error_handler+0x20>
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d005      	beq.n	8002132 <error_handler+0x2a>
 8002126:	e00e      	b.n	8002146 <error_handler+0x3e>
	{
	case HTTP_OK:
		return reset_content_handler(out);
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f7ff ffd3 	bl	80020d4 <reset_content_handler>
 800212e:	4603      	mov	r3, r0
 8002130:	e00d      	b.n	800214e <error_handler+0x46>

	case HTTP_ERR_NOT_IMPLEMENTED:
		return not_implemented_handler(out);
 8002132:	6838      	ldr	r0, [r7, #0]
 8002134:	f7ff ffa6 	bl	8002084 <not_implemented_handler>
 8002138:	4603      	mov	r3, r0
 800213a:	e008      	b.n	800214e <error_handler+0x46>

	case HTTP_ERR_NOT_FOUND:
		return not_found_handler(out);
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f7ff ffb5 	bl	80020ac <not_found_handler>
 8002142:	4603      	mov	r3, r0
 8002144:	e003      	b.n	800214e <error_handler+0x46>

	default:
	case HTTP_ERR_BAD_REQUEST:
		return bad_request_handler(out);
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f7ff ff88 	bl	800205c <bad_request_handler>
 800214c:	4603      	mov	r3, r0
	}
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <http_root_path_handler>:

http_status_t http_root_path_handler(http_buffer_t *out)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_root_path_handler()\n");

	if (out == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <http_root_path_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 8002166:	2301      	movs	r3, #1
 8002168:	e026      	b.n	80021b8 <http_root_path_handler+0x60>
	}
	int content_len = strlen(HTTP_MAIN_PAGE_CONTENT_STR);
 800216a:	f240 53dd 	movw	r3, #1501	; 0x5dd
 800216e:	60fb      	str	r3, [r7, #12]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6858      	ldr	r0, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <http_root_path_handler+0x68>)
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	23c8      	movs	r3, #200	; 0xc8
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <http_root_path_handler+0x6c>)
 8002184:	f01f fe5e 	bl	8021e44 <sniprintf>
	int header_len = strlen(out->data);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f829 	bl	80001e4 <strlen>
 8002192:	4603      	mov	r3, r0
 8002194:	60bb      	str	r3, [r7, #8]
	if(out->length < header_len + content_len)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	440a      	add	r2, r1
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d201      	bcs.n	80021a8 <http_root_path_handler+0x50>
		return HTTP_ERR_BUF_OVERFLOW;
 80021a4:	2304      	movs	r3, #4
 80021a6:	e007      	b.n	80021b8 <http_root_path_handler+0x60>
	strncat(out->data, HTTP_MAIN_PAGE_CONTENT_STR, content_len);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4906      	ldr	r1, [pc, #24]	; (80021c8 <http_root_path_handler+0x70>)
 80021b0:	4618      	mov	r0, r3
 80021b2:	f01f ff0c 	bl	8021fce <strncat>
	return HTTP_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	08024e30 	.word	0x08024e30
 80021c4:	08024d5c 	.word	0x08024d5c
 80021c8:	08024e34 	.word	0x08024e34

080021cc <http_post_request_handler>:
/*
 * End of Weak functions
 * */

http_status_t http_post_request_handler(http_server_request_t *request)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_post_request_handler()\n");

	if (request == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <http_post_request_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 80021da:	2301      	movs	r3, #1
 80021dc:	e086      	b.n	80022ec <http_post_request_handler+0x120>
	}

	char action[sizeof("TOGGLE")];
	uint8_t number;
	bool LED[4] = {false, false, false, false};
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
	LED_action_t LED_action;

	char *token = strtok(request->content, "&");
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	331a      	adds	r3, #26
 80021e6:	4943      	ldr	r1, [pc, #268]	; (80022f4 <http_post_request_handler+0x128>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f01f ff3f 	bl	802206c <strtok>
 80021ee:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 80021f0:	e05b      	b.n	80022aa <http_post_request_handler+0xde>
	{
		HTTP_DEBUG_PRINF("token : %s\n", token);

		if (sscanf(token, "LED%01u=EN", (unsigned int *)&number) > 0)
 80021f2:	f107 030f 	add.w	r3, r7, #15
 80021f6:	461a      	mov	r2, r3
 80021f8:	493f      	ldr	r1, [pc, #252]	; (80022f8 <http_post_request_handler+0x12c>)
 80021fa:	69b8      	ldr	r0, [r7, #24]
 80021fc:	f01f fe76 	bl	8021eec <siscanf>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	dd0d      	ble.n	8002222 <http_post_request_handler+0x56>
		{
			if (number > 2 && number < 7)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d90a      	bls.n	8002222 <http_post_request_handler+0x56>
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d807      	bhi.n	8002222 <http_post_request_handler+0x56>
			{
				LED[number - 3] = true;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3b03      	subs	r3, #3
 8002216:	f107 0220 	add.w	r2, r7, #32
 800221a:	4413      	add	r3, r2
 800221c:	2201      	movs	r2, #1
 800221e:	f803 2c18 	strb.w	r2, [r3, #-24]
			}
		}
		if (sscanf(token, "ACTION=%s", action) > 0)
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	461a      	mov	r2, r3
 8002228:	4934      	ldr	r1, [pc, #208]	; (80022fc <http_post_request_handler+0x130>)
 800222a:	69b8      	ldr	r0, [r7, #24]
 800222c:	f01f fe5e 	bl	8021eec <siscanf>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	dd34      	ble.n	80022a0 <http_post_request_handler+0xd4>
		{
			if (strncmp(action, "TOGGLE", strlen(action)) == 0)
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	4618      	mov	r0, r3
 800223c:	f7fd ffd2 	bl	80001e4 <strlen>
 8002240:	4602      	mov	r2, r0
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	492e      	ldr	r1, [pc, #184]	; (8002300 <http_post_request_handler+0x134>)
 8002248:	4618      	mov	r0, r3
 800224a:	f01f fed3 	bl	8021ff4 <strncmp>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <http_post_request_handler+0x8e>
			{
				LED_action = LED_TOGGLE;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
 8002258:	e022      	b.n	80022a0 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "ON", strlen(action)) == 0)
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffc0 	bl	80001e4 <strlen>
 8002264:	4602      	mov	r2, r0
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4926      	ldr	r1, [pc, #152]	; (8002304 <http_post_request_handler+0x138>)
 800226c:	4618      	mov	r0, r3
 800226e:	f01f fec1 	bl	8021ff4 <strncmp>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <http_post_request_handler+0xb2>
			{
				LED_action = LED_ON;
 8002278:	2301      	movs	r3, #1
 800227a:	77fb      	strb	r3, [r7, #31]
 800227c:	e010      	b.n	80022a0 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "OFF", strlen(action)) == 0)
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ffae 	bl	80001e4 <strlen>
 8002288:	4602      	mov	r2, r0
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	491e      	ldr	r1, [pc, #120]	; (8002308 <http_post_request_handler+0x13c>)
 8002290:	4618      	mov	r0, r3
 8002292:	f01f feaf 	bl	8021ff4 <strncmp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <http_post_request_handler+0xd4>
			{
				LED_action = LED_OFF;
 800229c:	2302      	movs	r3, #2
 800229e:	77fb      	strb	r3, [r7, #31]
			}
		}
		token = strtok(NULL, "&");
 80022a0:	4914      	ldr	r1, [pc, #80]	; (80022f4 <http_post_request_handler+0x128>)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f01f fee2 	bl	802206c <strtok>
 80022a8:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1a0      	bne.n	80021f2 <http_post_request_handler+0x26>
	}

	switch(LED_action)
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d012      	beq.n	80022dc <http_post_request_handler+0x110>
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	dc16      	bgt.n	80022e8 <http_post_request_handler+0x11c>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <http_post_request_handler+0xf8>
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d006      	beq.n	80022d0 <http_post_request_handler+0x104>
	case LED_OFF:
		http_led_off_handler(LED);
		break;

	default:
		break;
 80022c2:	e011      	b.n	80022e8 <http_post_request_handler+0x11c>
		http_led_toggle_handler(LED);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f993 	bl	80015f4 <http_led_toggle_handler>
		break;
 80022ce:	e00c      	b.n	80022ea <http_post_request_handler+0x11e>
		http_led_on_handler(LED);
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f9b3 	bl	8001640 <http_led_on_handler>
		break;
 80022da:	e006      	b.n	80022ea <http_post_request_handler+0x11e>
		http_led_off_handler(LED);
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff f9d3 	bl	800168c <http_led_off_handler>
		break;
 80022e6:	e000      	b.n	80022ea <http_post_request_handler+0x11e>
		break;
 80022e8:	bf00      	nop
	}
	return HTTP_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	08025414 	.word	0x08025414
 80022f8:	08025418 	.word	0x08025418
 80022fc:	08025424 	.word	0x08025424
 8002300:	08025430 	.word	0x08025430
 8002304:	08025438 	.word	0x08025438
 8002308:	0802543c 	.word	0x0802543c

0800230c <request_handler>:

static http_status_t request_handler(http_server_request_t *request, http_buffer_t *out)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("request_handler()\n");
	http_status_t status = HTTP_ERR_NOT_IMPLEMENTED;
 8002316:	230a      	movs	r3, #10
 8002318:	73fb      	strb	r3, [r7, #15]

	switch (request->command)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <request_handler+0x1c>
 8002322:	2b02      	cmp	r3, #2
 8002324:	d045      	beq.n	80023b2 <request_handler+0xa6>
			status = HTTP_ERR_BAD_REQUEST;
		}
		break;

	default:
		break;
 8002326:	e057      	b.n	80023d8 <request_handler+0xcc>
		if (strncmp(request->path, "/", strlen(request->path)) == 0)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1c5c      	adds	r4, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3301      	adds	r3, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7fd ff57 	bl	80001e4 <strlen>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	492a      	ldr	r1, [pc, #168]	; (80023e4 <request_handler+0xd8>)
 800233c:	4620      	mov	r0, r4
 800233e:	f01f fe59 	bl	8021ff4 <strncmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <request_handler+0x48>
			status = http_root_path_handler(out);
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f7ff ff05 	bl	8002158 <http_root_path_handler>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
		break;
 8002352:	e041      	b.n	80023d8 <request_handler+0xcc>
		else if (strncmp(request->path, "/temperature", strlen(request->path)) == 0)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1c5c      	adds	r4, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7fd ff41 	bl	80001e4 <strlen>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4920      	ldr	r1, [pc, #128]	; (80023e8 <request_handler+0xdc>)
 8002368:	4620      	mov	r0, r4
 800236a:	f01f fe43 	bl	8021ff4 <strncmp>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <request_handler+0x74>
			status = http_temperature_path_handler(out);
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f7ff f811 	bl	800139c <http_temperature_path_handler>
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]
		break;
 800237e:	e02b      	b.n	80023d8 <request_handler+0xcc>
		else if (strncmp(request->path, "/humidity", strlen(request->path)) == 0)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	1c5c      	adds	r4, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3301      	adds	r3, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff2b 	bl	80001e4 <strlen>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4916      	ldr	r1, [pc, #88]	; (80023ec <request_handler+0xe0>)
 8002394:	4620      	mov	r0, r4
 8002396:	f01f fe2d 	bl	8021ff4 <strncmp>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <request_handler+0xa0>
			status = http_humidity_path_handler(out);
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f7ff f891 	bl	80014c8 <http_humidity_path_handler>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
		break;
 80023aa:	e015      	b.n	80023d8 <request_handler+0xcc>
			status = HTTP_ERR_NOT_FOUND;
 80023ac:	230c      	movs	r3, #12
 80023ae:	73fb      	strb	r3, [r7, #15]
		break;
 80023b0:	e012      	b.n	80023d8 <request_handler+0xcc>
		if (request->content)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	331a      	adds	r3, #26
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <request_handler+0xc6>
			status = http_post_request_handler(request);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff06 	bl	80021cc <http_post_request_handler>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
			if (status == HTTP_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <request_handler+0xca>
				reset_content_handler(out);
 80023ca:	6838      	ldr	r0, [r7, #0]
 80023cc:	f7ff fe82 	bl	80020d4 <reset_content_handler>
		break;
 80023d0:	e001      	b.n	80023d6 <request_handler+0xca>
			status = HTTP_ERR_BAD_REQUEST;
 80023d2:	230b      	movs	r3, #11
 80023d4:	73fb      	strb	r3, [r7, #15]
		break;
 80023d6:	bf00      	nop
	}

	return status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	08025440 	.word	0x08025440
 80023e8:	08025444 	.word	0x08025444
 80023ec:	08025454 	.word	0x08025454

080023f0 <is_path_correct>:

static bool is_path_correct(const char *path)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	return (strncmp(path, "/", strlen(path)) == 0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7fd fef3 	bl	80001e4 <strlen>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	4914      	ldr	r1, [pc, #80]	; (8002454 <is_path_correct+0x64>)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f01f fdf5 	bl	8021ff4 <strncmp>
 800240a:	4603      	mov	r3, r0
		|| strncmp(path, "/temperature", strlen(path)) == 0
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 800240c:	2b00      	cmp	r3, #0
 800240e:	d017      	beq.n	8002440 <is_path_correct+0x50>
		|| strncmp(path, "/temperature", strlen(path)) == 0
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fd fee7 	bl	80001e4 <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	490f      	ldr	r1, [pc, #60]	; (8002458 <is_path_correct+0x68>)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f01f fde9 	bl	8021ff4 <strncmp>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <is_path_correct+0x50>
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7fd fedb 	bl	80001e4 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	490a      	ldr	r1, [pc, #40]	; (800245c <is_path_correct+0x6c>)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f01f fddd 	bl	8021ff4 <strncmp>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <is_path_correct+0x54>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <is_path_correct+0x56>
 8002444:	2300      	movs	r3, #0
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	08025440 	.word	0x08025440
 8002458:	08025444 	.word	0x08025444
 800245c:	08025454 	.word	0x08025454

08002460 <is_command_implemented>:

static bool is_command_implemented(http_command_t command)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	return (command == HTTP_GET
			|| command == HTTP_POST);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <is_command_implemented+0x16>
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d101      	bne.n	800247a <is_command_implemented+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <is_command_implemented+0x1c>
 800247a:	2300      	movs	r3, #0
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <is_version_correct>:

static bool is_version_correct(const char *version)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	return (strncmp(version, HTTP_VERSION_STR, strlen(version)) == 0);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7fd fea3 	bl	80001e4 <strlen>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4907      	ldr	r1, [pc, #28]	; (80024c0 <is_version_correct+0x30>)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f01f fda5 	bl	8021ff4 <strncmp>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	08025460 	.word	0x08025460

080024c4 <send_answer>:

static int send_answer(int sock, http_buffer_t *out)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	int len = strlen(out->data);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe86 	bl	80001e4 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
	if (send(sock, out->data, len, 0) < 0)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f00e fea7 	bl	8011238 <lwip_send>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da05      	bge.n	80024fc <send_answer+0x38>
	{
		printf("send() error\n");
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <send_answer+0x44>)
 80024f2:	f01f fbe5 	bl	8021cc0 <puts>
		return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fa:	e000      	b.n	80024fe <send_answer+0x3a>
	}
	return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	0802546c 	.word	0x0802546c

0800250c <http_server_handler>:

http_status_t http_server_handler(int sock)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b0a0      	sub	sp, #128	; 0x80
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	int nbytes;
	http_status_t status = HTTP_ERR_RCV_TIMEOUT;
 8002514:	2309      	movs	r3, #9
 8002516:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	http_server_request_t request;
	http_buffer_t in;
	http_buffer_t out;

	if (sock < 0) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	da01      	bge.n	8002524 <http_server_handler+0x18>
		return HTTP_ERR_INVAL;
 8002520:	2302      	movs	r3, #2
 8002522:	e0a9      	b.n	8002678 <http_server_handler+0x16c>
	}

	in.length = MAX_IN_PACKET_LENGTH;
 8002524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002528:	617b      	str	r3, [r7, #20]
	in.data = malloc(in.length);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	4618      	mov	r0, r3
 800252e:	f01e fddf 	bl	80210f0 <malloc>
 8002532:	4603      	mov	r3, r0
 8002534:	61bb      	str	r3, [r7, #24]
	if (in.data == NULL)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <http_server_handler+0x34>
	{
		return HTTP_ERR_FAULT;
 800253c:	2301      	movs	r3, #1
 800253e:	e09b      	b.n	8002678 <http_server_handler+0x16c>
	}

	out.length = MAX_OUT_PACKET_LENGTH;
 8002540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002544:	60fb      	str	r3, [r7, #12]
	out.data = malloc(out.length);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	f01e fdd1 	bl	80210f0 <malloc>
 800254e:	4603      	mov	r3, r0
 8002550:	613b      	str	r3, [r7, #16]
	if (out.data == NULL)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <http_server_handler+0x58>
	{
		free(in.data);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4618      	mov	r0, r3
 800255c:	f01e fdd0 	bl	8021100 <free>
		return HTTP_ERR_FAULT;
 8002560:	2301      	movs	r3, #1
 8002562:	e089      	b.n	8002678 <http_server_handler+0x16c>
	}
	memset(in.data, 0, in.length);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f01e fe06 	bl	802117c <memset>
	memset(out.data, 0, out.length);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f01e fe00 	bl	802117c <memset>

	if ( (nbytes = recv(sock, in.data, in.length, 0)) > 0 )
 800257c:	69b9      	ldr	r1, [r7, #24]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	2300      	movs	r3, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f00e fe42 	bl	801120c <lwip_recv>
 8002588:	67b8      	str	r0, [r7, #120]	; 0x78
 800258a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258c:	2b00      	cmp	r3, #0
 800258e:	dd5f      	ble.n	8002650 <http_server_handler+0x144>
	{
		status = parse_payload((const char *)in.data, &request);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f107 021c 	add.w	r2, r7, #28
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fcc3 	bl	8001f24 <parse_payload>
 800259e:	4603      	mov	r3, r0
 80025a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		if (status != HTTP_OK)
 80025a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <http_server_handler+0xac>
		{
			HTTP_DEBUG_PRINF("parse_payload() error: %d\n", status);
			bad_request_handler(&out);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd53 	bl	800205c <bad_request_handler>
			goto error_exit;
 80025b6:	e04c      	b.n	8002652 <http_server_handler+0x146>
		}
		if (!is_command_implemented(request.command))
 80025b8:	7f3b      	ldrb	r3, [r7, #28]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff50 	bl	8002460 <is_command_implemented>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <http_server_handler+0xcc>
		{
			HTTP_DEBUG_PRINF("command not implemented\n");
			not_implemented_handler(&out);
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fd57 	bl	8002084 <not_implemented_handler>
			goto error_exit;
 80025d6:	e03c      	b.n	8002652 <http_server_handler+0x146>
		}
		if (!is_path_correct((const char *)request.path))
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	3301      	adds	r3, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff06 	bl	80023f0 <is_path_correct>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f083 0301 	eor.w	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <http_server_handler+0xf0>
		{
			HTTP_DEBUG_PRINF("requested path not found\n");
			not_found_handler(&out);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fd59 	bl	80020ac <not_found_handler>
			goto error_exit;
 80025fa:	e02a      	b.n	8002652 <http_server_handler+0x146>
		}
		if (!is_version_correct((const char *)request.version))
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	3311      	adds	r3, #17
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff44 	bl	8002490 <is_version_correct>
 8002608:	4603      	mov	r3, r0
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <http_server_handler+0x114>
		{
			HTTP_DEBUG_PRINF("wrong protocol version: %s\n",request.version);
			bad_request_handler(&out);
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd1f 	bl	800205c <bad_request_handler>
			goto error_exit;
 800261e:	e018      	b.n	8002652 <http_server_handler+0x146>
		}
		// if everything is OK
		status = request_handler(&request, &out);
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe6e 	bl	800230c <request_handler>
 8002630:	4603      	mov	r3, r0
 8002632:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status != HTTP_OK)
 8002636:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <http_server_handler+0x144>
		{
			error_handler(status, &out);
 800263e:	f107 020c 	add.w	r2, r7, #12
 8002642:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fd5d 	bl	8002108 <error_handler>
 800264e:	e000      	b.n	8002652 <http_server_handler+0x146>
		}
	}
error_exit:
 8002650:	bf00      	nop
	send_answer(sock, &out);
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff33 	bl	80024c4 <send_answer>
	close(sock);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f00e f994 	bl	801098c <lwip_close>

	free(in.data);
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4618      	mov	r0, r3
 8002668:	f01e fd4a 	bl	8021100 <free>
	free(out.data);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4618      	mov	r0, r3
 8002670:	f01e fd46 	bl	8021100 <free>

	return status;
 8002674:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002678:	4618      	mov	r0, r3
 800267a:	3780      	adds	r7, #128	; 0x80
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_MspInit+0x54>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_MspInit+0x54>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_MspInit+0x54>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_MspInit+0x54>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_MspInit+0x54>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_MspInit+0x54>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	210f      	movs	r1, #15
 80026c2:	f06f 0001 	mvn.w	r0, #1
 80026c6:	f003 f8b5 	bl	8005834 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_I2C_MspInit+0x94>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d134      	bne.n	8002764 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_I2C_MspInit+0x98>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_I2C_MspInit+0x98>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_I2C_MspInit+0x98>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002716:	f44f 7310 	mov.w	r3, #576	; 0x240
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800271c:	2312      	movs	r3, #18
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002728:	2304      	movs	r3, #4
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4810      	ldr	r0, [pc, #64]	; (8002774 <HAL_I2C_MspInit+0x9c>)
 8002734:	f003 f8d8 	bl	80058e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_I2C_MspInit+0x98>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <HAL_I2C_MspInit+0x98>)
 8002742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_I2C_MspInit+0x98>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2105      	movs	r1, #5
 8002758:	201f      	movs	r0, #31
 800275a:	f003 f86b 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800275e:	201f      	movs	r0, #31
 8002760:	f003 f884 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40005400 	.word	0x40005400
 8002770:	40023800 	.word	0x40023800
 8002774:	40020400 	.word	0x40020400

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_UART_MspInit+0x84>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12c      	bne.n	80027f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_UART_MspInit+0x88>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 80027d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e4:	2307      	movs	r3, #7
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4619      	mov	r1, r3
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <HAL_UART_MspInit+0x8c>)
 80027f0:	f003 f87a 	bl	80058e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40004800 	.word	0x40004800
 8002800:	40023800 	.word	0x40023800
 8002804:	40020c00 	.word	0x40020c00

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002818:	2200      	movs	r2, #0
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	2019      	movs	r0, #25
 800281e:	f003 f809 	bl	8005834 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002822:	2019      	movs	r0, #25
 8002824:	f003 f822 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_InitTick+0xa4>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_InitTick+0xa4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_InitTick+0xa4>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f006 faec 	bl	8008e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002854:	f006 fad6 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 8002858:	4603      	mov	r3, r0
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_InitTick+0xa8>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	3b01      	subs	r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_InitTick+0xac>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_InitTick+0xb0>)
 8002870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_InitTick+0xac>)
 8002874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002878:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_InitTick+0xac>)
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_InitTick+0xac>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_InitTick+0xac>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800288c:	4809      	ldr	r0, [pc, #36]	; (80028b4 <HAL_InitTick+0xac>)
 800288e:	f006 faff 	bl	8008e90 <HAL_TIM_Base_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <HAL_InitTick+0xac>)
 800289a:	f006 fb53 	bl	8008f44 <HAL_TIM_Base_Start_IT>
 800289e:	4603      	mov	r3, r0
 80028a0:	e000      	b.n	80028a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3730      	adds	r7, #48	; 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	200145ac 	.word	0x200145ac
 80028b8:	40010000 	.word	0x40010000

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f003 fadf 	bl	8005eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80028fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028fe:	f003 fad7 	bl	8005eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800290e:	f006 fb89 	bl	8009024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200145ac 	.word	0x200145ac

0800291c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <I2C1_EV_IRQHandler+0x10>)
 8002922:	f003 ff45 	bl	80067b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20014550 	.word	0x20014550

08002930 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <ETH_IRQHandler+0x10>)
 8002936:	f002 f89d 	bl	8004a74 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20015f34 	.word	0x20015f34

08002944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_kill>:

int _kill(int pid, int sig)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <_kill+0x20>)
 8002960:	2216      	movs	r2, #22
 8002962:	601a      	str	r2, [r3, #0]
	return -1;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	2001b1d8 	.word	0x2001b1d8

08002978 <_exit>:

void _exit (int status)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ffe5 	bl	8002954 <_kill>
	while (1) {}		/* Make sure we hang here */
 800298a:	e7fe      	b.n	800298a <_exit+0x12>

0800298c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e00a      	b.n	80029b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800299e:	f3af 8000 	nop.w
 80029a2:	4601      	mov	r1, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	60ba      	str	r2, [r7, #8]
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbf0      	blt.n	800299e <_read+0x12>
	}

return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e009      	b.n	80029ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fcc9 	bl	8001378 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf1      	blt.n	80029d8 <_write+0x12>
	}
	return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_close>:

int _close(int file)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
	return -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a26:	605a      	str	r2, [r3, #4]
	return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_isatty>:

int _isatty(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
	return 0;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <_sbrk+0x5c>)
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <_sbrk+0x60>)
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <_sbrk+0x64>)
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <_sbrk+0x68>)
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d205      	bcs.n	8002aa4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <_sbrk+0x6c>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa2:	e009      	b.n	8002ab8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <_sbrk+0x64>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a06      	ldr	r2, [pc, #24]	; (8002acc <_sbrk+0x64>)
 8002ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	20020000 	.word	0x20020000
 8002ac8:	00000400 	.word	0x00000400
 8002acc:	20000260 	.word	0x20000260
 8002ad0:	2001b1f0 	.word	0x2001b1f0
 8002ad4:	2001b1d8 	.word	0x2001b1d8

08002ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <SystemInit+0x20>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <SystemInit+0x20>)
 8002ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <StartTcpClientTask>:

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address);
static int connect_server(const struct sockaddr_in *address);

void StartTcpClientTask(void const * argument)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    osEvent event;

    for(;;)
    {
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f007 fe0c 	bl	800a72c <osSignalWait>

         if (event.status == osEventSignal)  {
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d1f4      	bne.n	8002b04 <StartTcpClientTask+0x8>
        	TCP_CLIENT_PRINTF("osSignalWait() received event\n");
 			BSP_LED_Off(GREEN);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f001 f82a 	bl	8003b74 <BSP_LED_Off>
			if (resolve_address(SERVER, PORTNUM, &serv_addr) != STATUS_OK)
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <StartTcpClientTask+0xd4>)
 8002b22:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002b26:	482b      	ldr	r0, [pc, #172]	; (8002bd4 <StartTcpClientTask+0xd8>)
 8002b28:	f000 f85c 	bl	8002be4 <resolve_address>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <StartTcpClientTask+0x3e>
			{
		    	BSP_LED_On(ORANGE);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f001 f804 	bl	8003b40 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("resolve_address() error\n");
				continue;
 8002b38:	e048      	b.n	8002bcc <StartTcpClientTask+0xd0>
			}

			sock_fd = connect_server((const struct sockaddr_in *)&serv_addr);
 8002b3a:	4825      	ldr	r0, [pc, #148]	; (8002bd0 <StartTcpClientTask+0xd4>)
 8002b3c:	f000 f88f 	bl	8002c5e <connect_server>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b44:	6013      	str	r3, [r2, #0]
			if (sock_fd == STATUS_ERROR)
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4e:	d103      	bne.n	8002b58 <StartTcpClientTask+0x5c>
			{
		    	BSP_LED_On(ORANGE);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f000 fff5 	bl	8003b40 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("connect_server() error\n");
				continue;
 8002b56:	e039      	b.n	8002bcc <StartTcpClientTask+0xd0>
			}

			const char *message = "This is a Ping-Pong message";
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <StartTcpClientTask+0xe0>)
 8002b5a:	61fb      	str	r3, [r7, #28]
			if (send(sock_fd, message, strlen(message), 0) < 0)
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b5e:	681c      	ldr	r4, [r3, #0]
 8002b60:	69f8      	ldr	r0, [r7, #28]
 8002b62:	f7fd fb3f 	bl	80001e4 <strlen>
 8002b66:	4602      	mov	r2, r0
 8002b68:	2300      	movs	r3, #0
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f00e fb63 	bl	8011238 <lwip_send>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da08      	bge.n	8002b8a <StartTcpClientTask+0x8e>
			{
		    	BSP_LED_On(ORANGE);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f000 ffe1 	bl	8003b40 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("send() error\n");
				close(sock_fd);
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f00d ff02 	bl	801098c <lwip_close>
				continue;
 8002b88:	e020      	b.n	8002bcc <StartTcpClientTask+0xd0>
			}

			int received;
			if( (received = recv(sock_fd, buf, sizeof(buf), 0)) < 0) {
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2250      	movs	r2, #80	; 0x50
 8002b92:	4913      	ldr	r1, [pc, #76]	; (8002be0 <StartTcpClientTask+0xe4>)
 8002b94:	f00e fb3a 	bl	801120c <lwip_recv>
 8002b98:	61b8      	str	r0, [r7, #24]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da08      	bge.n	8002bb2 <StartTcpClientTask+0xb6>
		    	BSP_LED_On(ORANGE);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f000 ffcd 	bl	8003b40 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("recv() error\n");
		        close(sock_fd);
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f00d feee 	bl	801098c <lwip_close>
		        continue;
 8002bb0:	e00c      	b.n	8002bcc <StartTcpClientTask+0xd0>
		    }
			buf[received] = 0;
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <StartTcpClientTask+0xe4>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]

			TCP_CLIENT_PRINTF("Received from server : %s\n", buf);
			BSP_LED_Off(ORANGE);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f000 ffd9 	bl	8003b74 <BSP_LED_Off>

			close(sock_fd);
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <StartTcpClientTask+0xdc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00d fee0 	bl	801098c <lwip_close>
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002bcc:	e79a      	b.n	8002b04 <StartTcpClientTask+0x8>
 8002bce:	bf00      	nop
 8002bd0:	20000264 	.word	0x20000264
 8002bd4:	0802547c 	.word	0x0802547c
 8002bd8:	20000274 	.word	0x20000274
 8002bdc:	0802548c 	.word	0x0802548c
 8002be0:	20000278 	.word	0x20000278

08002be4 <resolve_address>:
         }
    }
}

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	460b      	mov	r3, r1
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	817b      	strh	r3, [r7, #10]
	if (server == NULL || address == NULL )	{
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <resolve_address+0x1a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <resolve_address+0x20>
		TCP_CLIENT_PRINTF("resolve_address() argument error\n");
        return STATUS_ERROR;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c02:	e028      	b.n	8002c56 <resolve_address+0x72>
	}
	struct hostent *hp;
    if((hp = gethostbyname(server))== NULL) {
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f00d fbbb 	bl	8010380 <lwip_gethostbyname>
 8002c0a:	6178      	str	r0, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <resolve_address+0x34>
    	TCP_CLIENT_PRINTF("gethostbyname() error\n");
        return STATUS_ERROR;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c16:	e01e      	b.n	8002c56 <resolve_address+0x72>
    }

    bzero(address, sizeof(*address));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	6053      	str	r3, [r2, #4]
 8002c22:	6093      	str	r3, [r2, #8]
 8002c24:	60d3      	str	r3, [r2, #12]
    bcopy(hp->h_addr, &address->sin_addr, hp->h_length);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1d18      	adds	r0, r3, #4
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	461a      	mov	r2, r3
 8002c36:	f01e fa87 	bl	8021148 <memmove>

    address->sin_family = hp->h_addrtype;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	705a      	strb	r2, [r3, #1]
    address->sin_port = htons(port);
 8002c44:	897b      	ldrh	r3, [r7, #10]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00f fb38 	bl	80122bc <lwip_htons>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	805a      	strh	r2, [r3, #2]
    return STATUS_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <connect_server>:

static int connect_server(const struct sockaddr_in *address)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
	if (address == NULL) {
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <connect_server+0x14>
		TCP_CLIENT_PRINTF("connect_server() argument error\n");
        return STATUS_ERROR;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c70:	e01c      	b.n	8002cac <connect_server+0x4e>
	}
	int sock;
    if((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){
 8002c72:	2200      	movs	r2, #0
 8002c74:	2101      	movs	r1, #1
 8002c76:	2002      	movs	r0, #2
 8002c78:	f00e fbee 	bl	8011458 <lwip_socket>
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c84:	d102      	bne.n	8002c8c <connect_server+0x2e>
    	TCP_CLIENT_PRINTF("socket() error\n");
        return STATUS_ERROR;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8a:	e00f      	b.n	8002cac <connect_server+0x4e>
    }

    TCP_CLIENT_PRINTF("Server address is %s\n", inet_ntoa(address->sin_addr));

    if(connect(sock, (struct sockaddr *)address, sizeof(*address)) == -1) {
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f00d fed1 	bl	8010a38 <lwip_connect>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c9c:	d105      	bne.n	8002caa <connect_server+0x4c>
    	TCP_CLIENT_PRINTF("connect() error\n");
        close(sock);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f00d fe74 	bl	801098c <lwip_close>
        return STATUS_ERROR;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca8:	e000      	b.n	8002cac <connect_server+0x4e>
    }
    return sock;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <tcpServerInit>:
#define THREAD_MUTEX_UNLOCK()	osMutexRelease(thread_mutex_id)
#define PRINTF_MUTEX_LOCK() 	osMutexWait (printf_mutex_id, osWaitForever)
#define PRINTF_MUTEX_UNLOCK()	osMutexRelease(printf_mutex_id)

static int tcpServerInit(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	socket_fd = socket(AF_INET, SOCK_STREAM, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f00e fbcb 	bl	8011458 <lwip_socket>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <tcpServerInit+0xc8>)
 8002cc6:	6013      	str	r3, [r2, #0]
	if (socket_fd == -1) {
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <tcpServerInit+0xc8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd0:	d102      	bne.n	8002cd8 <tcpServerInit+0x24>
		TCP_SERVER_PRINTF("socket() error\n");
		return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd6:	e04e      	b.n	8002d76 <tcpServerInit+0xc2>
	}

	nport = PORTNUM;
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <tcpServerInit+0xcc>)
 8002cda:	2250      	movs	r2, #80	; 0x50
 8002cdc:	801a      	strh	r2, [r3, #0]
	nport = htons((uint16_t)nport);
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <tcpServerInit+0xcc>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f00f faea 	bl	80122bc <lwip_htons>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <tcpServerInit+0xcc>)
 8002cee:	801a      	strh	r2, [r3, #0]

	bzero(&serv_addr, sizeof(serv_addr));
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <tcpServerInit+0xd0>)
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	6053      	str	r3, [r2, #4]
 8002cfa:	6093      	str	r3, [r2, #8]
 8002cfc:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <tcpServerInit+0xd0>)
 8002d00:	2202      	movs	r2, #2
 8002d02:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <tcpServerInit+0xd0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = nport;
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <tcpServerInit+0xcc>)
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <tcpServerInit+0xd0>)
 8002d10:	805a      	strh	r2, [r3, #2]

	if(bind(socket_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <tcpServerInit+0xc8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2210      	movs	r2, #16
 8002d18:	491a      	ldr	r1, [pc, #104]	; (8002d84 <tcpServerInit+0xd0>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00d fdc8 	bl	80108b0 <lwip_bind>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d26:	d107      	bne.n	8002d38 <tcpServerInit+0x84>
		TCP_SERVER_PRINTF("bind() error\n");
		close(socket_fd);
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <tcpServerInit+0xc8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f00d fe2d 	bl	801098c <lwip_close>
		return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d36:	e01e      	b.n	8002d76 <tcpServerInit+0xc2>
	}

	if(listen(socket_fd, 5) == -1) {
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <tcpServerInit+0xc8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00d fefa 	bl	8010b38 <lwip_listen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d107      	bne.n	8002d5c <tcpServerInit+0xa8>
		TCP_SERVER_PRINTF("listen() error\n");
		close(socket_fd);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <tcpServerInit+0xc8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f00d fe1b 	bl	801098c <lwip_close>
		return -1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d5a:	e00c      	b.n	8002d76 <tcpServerInit+0xc2>
	}
	TCP_SERVER_PRINTF("Server is ready\n");

	thread_mutex_id = osMutexCreate (osMutex (thread_mutex));
 8002d5c:	480a      	ldr	r0, [pc, #40]	; (8002d88 <tcpServerInit+0xd4>)
 8002d5e:	f007 fd31 	bl	800a7c4 <osMutexCreate>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <tcpServerInit+0xd8>)
 8002d66:	6013      	str	r3, [r2, #0]
	printf_mutex_id = osMutexCreate (osMutex (printf_mutex));
 8002d68:	4809      	ldr	r0, [pc, #36]	; (8002d90 <tcpServerInit+0xdc>)
 8002d6a:	f007 fd2b 	bl	800a7c4 <osMutexCreate>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <tcpServerInit+0xe0>)
 8002d72:	6013      	str	r3, [r2, #0]

	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200002e8 	.word	0x200002e8
 8002d80:	200002ec 	.word	0x200002ec
 8002d84:	200002c8 	.word	0x200002c8
 8002d88:	080297a8 	.word	0x080297a8
 8002d8c:	200145f4 	.word	0x200145f4
 8002d90:	080297ac 	.word	0x080297ac
 8002d94:	200145f8 	.word	0x200145f8

08002d98 <StartTcpServerTask>:

void StartTcpServerTask(void const * argument)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    int accept_fd;
	int addr_len;
	size_t i = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

	osDelay(5000);// wait 5 sec to init lwip stack
 8002da4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002da8:	f007 fc6b 	bl	800a682 <osDelay>

	if(tcpServerInit() < 0) {
 8002dac:	f7ff ff82 	bl	8002cb4 <tcpServerInit>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db7d      	blt.n	8002eb2 <StartTcpServerTask+0x11a>
		return;
	}

	for(;;)
	{
		  bzero(&client_addr, sizeof(client_addr));
 8002db6:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <StartTcpServerTask+0x124>)
 8002db8:	461a      	mov	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	6053      	str	r3, [r2, #4]
 8002dc0:	6093      	str	r3, [r2, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
		  addr_len = sizeof(client_addr);
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	60fb      	str	r3, [r7, #12]

		  accept_fd = accept(socket_fd, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <StartTcpServerTask+0x128>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f107 020c 	add.w	r2, r7, #12
 8002dd0:	493a      	ldr	r1, [pc, #232]	; (8002ebc <StartTcpServerTask+0x124>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f00d fc4e 	bl	8010674 <lwip_accept>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	613b      	str	r3, [r7, #16]

		  if (accept_fd == -1) {
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de2:	d10c      	bne.n	8002dfe <StartTcpServerTask+0x66>
			  PRINTF_MUTEX_LOCK();
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dec:	4618      	mov	r0, r3
 8002dee:	f007 fcf5 	bl	800a7dc <osMutexWait>
			  TCP_SERVER_PRINTF("accept() error\n");
			  PRINTF_MUTEX_UNLOCK();
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f007 fd3e 	bl	800a878 <osMutexRelease>
			  continue;
 8002dfc:	e058      	b.n	8002eb0 <StartTcpServerTask+0x118>
		  }

		  PRINTF_MUTEX_LOCK();
 8002dfe:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e06:	4618      	mov	r0, r3
 8002e08:	f007 fce8 	bl	800a7dc <osMutexWait>
		  TCP_SERVER_PRINTF("Client: %s\n", inet_ntoa(client_addr.sin_addr));
		  TCP_SERVER_PRINTF("fd: %d\n", accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f007 fd31 	bl	800a878 <osMutexRelease>

		  THREAD_MUTEX_LOCK();
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <StartTcpServerTask+0x130>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f007 fcdc 	bl	800a7dc <osMutexWait>

		  if (ThreadId[i] != NULL) {
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <StartTcpServerTask+0xc8>
			  osThreadTerminate(ThreadId[i]);
 8002e30:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f007 fc16 	bl	800a66a <osThreadTerminate>

			  ThreadId[i] = NULL;
 8002e3e:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2100      	movs	r1, #0
 8002e44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  PRINTF_MUTEX_LOCK();
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e50:	4618      	mov	r0, r3
 8002e52:	f007 fcc3 	bl	800a7dc <osMutexWait>
			  TCP_SERVER_PRINTF("(1)Thread[%d] %p terminated\n",i, ThreadId[i]);
			  PRINTF_MUTEX_UNLOCK();
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f007 fd0c 	bl	800a878 <osMutexRelease>
		  }
		  //create a new thread
		  ThreadId[i] = osThreadCreate (Servers[i], &accept_fd);
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <StartTcpServerTask+0x138>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	f107 0210 	add.w	r2, r7, #16
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f007 fbcd 	bl	800a60e <osThreadCreate>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4915      	ldr	r1, [pc, #84]	; (8002ecc <StartTcpServerTask+0x134>)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  PRINTF_MUTEX_LOCK();
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e86:	4618      	mov	r0, r3
 8002e88:	f007 fca8 	bl	800a7dc <osMutexWait>
		  TCP_SERVER_PRINTF("(1)Thread[%d] %p (fd = %d) created\n",i, ThreadId[i], accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <StartTcpServerTask+0x12c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f007 fcf1 	bl	800a878 <osMutexRelease>

		  if (++i > 4) {
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d901      	bls.n	8002ea6 <StartTcpServerTask+0x10e>
			  i = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
		  }

		  THREAD_MUTEX_UNLOCK();
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <StartTcpServerTask+0x130>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f007 fce4 	bl	800a878 <osMutexRelease>
		  bzero(&client_addr, sizeof(client_addr));
 8002eb0:	e781      	b.n	8002db6 <StartTcpServerTask+0x1e>
		return;
 8002eb2:	bf00      	nop

	}
}
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200002d8 	.word	0x200002d8
 8002ec0:	200002e8 	.word	0x200002e8
 8002ec4:	200145f8 	.word	0x200145f8
 8002ec8:	200145f4 	.word	0x200145f4
 8002ecc:	200002f0 	.word	0x200002f0
 8002ed0:	20000014 	.word	0x20000014

08002ed4 <ServerThread>:

void ServerThread(void const * argument)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	int accept_fd = *((int *)argument);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	613b      	str	r3, [r7, #16]

	PRINTF_MUTEX_LOCK();
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <ServerThread+0xb8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eea:	4618      	mov	r0, r3
 8002eec:	f007 fc76 	bl	800a7dc <osMutexWait>
	TCP_SERVER_PRINTF("(2)Thread (fd = %d) started\n", accept_fd);
	PRINTF_MUTEX_UNLOCK();
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <ServerThread+0xb8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f007 fcbf 	bl	800a878 <osMutexRelease>

#if defined(USE_HTTP_SERVER) || !defined(USE_TCP_SERVER)
		PRINTF_MUTEX_LOCK();
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <ServerThread+0xb8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f02:	4618      	mov	r0, r3
 8002f04:	f007 fc6a 	bl	800a7dc <osMutexWait>
		http_status_t status = http_server_handler(accept_fd);
 8002f08:	6938      	ldr	r0, [r7, #16]
 8002f0a:	f7ff faff 	bl	800250c <http_server_handler>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
		if (status != HTTP_OK)
		{
			TCP_SERVER_PRINTF("http_server_handler() error: %d\n", status);
		}
		PRINTF_MUTEX_UNLOCK();
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <ServerThread+0xb8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f007 fcae 	bl	800a878 <osMutexRelease>
			}
		}
		close(accept_fd);
#endif

		osThreadId id = osThreadGetId ();
 8002f1c:	f007 fb9e 	bl	800a65c <osThreadGetId>
 8002f20:	60b8      	str	r0, [r7, #8]

		THREAD_MUTEX_LOCK();
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <ServerThread+0xbc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f007 fc56 	bl	800a7dc <osMutexWait>

		for(size_t i = 0; i < 5; i++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e01b      	b.n	8002f6e <ServerThread+0x9a>
		{
		  if (ThreadId[i] == id) {
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <ServerThread+0xc0>)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d111      	bne.n	8002f68 <ServerThread+0x94>

			  PRINTF_MUTEX_LOCK();
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <ServerThread+0xb8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f007 fc45 	bl	800a7dc <osMutexWait>
			  TCP_SERVER_PRINTF("(2)Thread[%d] %p (fd = %d) finished\n", i, ThreadId[i], accept_fd);
			  PRINTF_MUTEX_UNLOCK();
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <ServerThread+0xb8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f007 fc8e 	bl	800a878 <osMutexRelease>

			  ThreadId[i] = NULL;
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <ServerThread+0xc0>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2100      	movs	r1, #0
 8002f62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  break;
 8002f66:	e005      	b.n	8002f74 <ServerThread+0xa0>
		for(size_t i = 0; i < 5; i++)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d9e0      	bls.n	8002f36 <ServerThread+0x62>
		  }
		}

		THREAD_MUTEX_UNLOCK();
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <ServerThread+0xbc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f007 fc7d 	bl	800a878 <osMutexRelease>

		osThreadTerminate(NULL);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f007 fb73 	bl	800a66a <osThreadTerminate>
}
 8002f84:	bf00      	nop
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200145f8 	.word	0x200145f8
 8002f90:	200145f4 	.word	0x200145f4
 8002f94:	200002f0 	.word	0x200002f0

08002f98 <ReadPin>:
		PIN13_GPIO_PORT,
		PIN14_GPIO_PORT,
		PIN15_GPIO_PORT
};
bool ReadPin(PIN_TypeDef Pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(G_PORT[Pin], G_PIN[Pin]);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <ReadPin+0x38>)
 8002fa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4909      	ldr	r1, [pc, #36]	; (8002fd4 <ReadPin+0x3c>)
 8002fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f002 ff2f 	bl	8005e18 <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000028 	.word	0x20000028
 8002fd4:	080297b0 	.word	0x080297b0

08002fd8 <udpServerInit>:

static int udpServerInit(uint16_t portnum)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
	uint16_t port;
	int fd = socket(AF_INET, SOCK_DGRAM, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f00e fa36 	bl	8011458 <lwip_socket>
 8002fec:	60f8      	str	r0, [r7, #12]
	if (fd == -1) {
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff4:	d10a      	bne.n	800300c <udpServerInit+0x34>
		UDP_SERVER_PRINTF("socket() error\n");
 8002ff6:	224d      	movs	r2, #77	; 0x4d
 8002ff8:	4922      	ldr	r1, [pc, #136]	; (8003084 <udpServerInit+0xac>)
 8002ffa:	4823      	ldr	r0, [pc, #140]	; (8003088 <udpServerInit+0xb0>)
 8002ffc:	f01e fdda 	bl	8021bb4 <iprintf>
 8003000:	4822      	ldr	r0, [pc, #136]	; (800308c <udpServerInit+0xb4>)
 8003002:	f01e fe5d 	bl	8021cc0 <puts>
		return -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300a:	e037      	b.n	800307c <udpServerInit+0xa4>
	}

	port = htons((uint16_t)portnum);
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	4618      	mov	r0, r3
 8003010:	f00f f954 	bl	80122bc <lwip_htons>
 8003014:	4603      	mov	r3, r0
 8003016:	817b      	strh	r3, [r7, #10]
	bzero(&serv_addr, sizeof(serv_addr));
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <udpServerInit+0xb8>)
 800301a:	461a      	mov	r2, r3
 800301c:	2300      	movs	r3, #0
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	6053      	str	r3, [r2, #4]
 8003022:	6093      	str	r3, [r2, #8]
 8003024:	60d3      	str	r3, [r2, #12]
	serv_addr.sin_family = AF_INET;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <udpServerInit+0xb8>)
 8003028:	2202      	movs	r2, #2
 800302a:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <udpServerInit+0xb8>)
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = port;
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <udpServerInit+0xb8>)
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	8053      	strh	r3, [r2, #2]

	if(bind(fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 8003038:	2210      	movs	r2, #16
 800303a:	4915      	ldr	r1, [pc, #84]	; (8003090 <udpServerInit+0xb8>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f00d fc37 	bl	80108b0 <lwip_bind>
 8003042:	4603      	mov	r3, r0
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003048:	d10d      	bne.n	8003066 <udpServerInit+0x8e>
		UDP_SERVER_PRINTF("bind() error\n");
 800304a:	2258      	movs	r2, #88	; 0x58
 800304c:	490d      	ldr	r1, [pc, #52]	; (8003084 <udpServerInit+0xac>)
 800304e:	480e      	ldr	r0, [pc, #56]	; (8003088 <udpServerInit+0xb0>)
 8003050:	f01e fdb0 	bl	8021bb4 <iprintf>
 8003054:	480f      	ldr	r0, [pc, #60]	; (8003094 <udpServerInit+0xbc>)
 8003056:	f01e fe33 	bl	8021cc0 <puts>
		close(fd);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f00d fc96 	bl	801098c <lwip_close>
		return -1;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003064:	e00a      	b.n	800307c <udpServerInit+0xa4>
	}

	UDP_SERVER_PRINTF("UDP Server is bound to port %d\n", portnum);
 8003066:	225d      	movs	r2, #93	; 0x5d
 8003068:	4906      	ldr	r1, [pc, #24]	; (8003084 <udpServerInit+0xac>)
 800306a:	4807      	ldr	r0, [pc, #28]	; (8003088 <udpServerInit+0xb0>)
 800306c:	f01e fda2 	bl	8021bb4 <iprintf>
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4619      	mov	r1, r3
 8003074:	4808      	ldr	r0, [pc, #32]	; (8003098 <udpServerInit+0xc0>)
 8003076:	f01e fd9d 	bl	8021bb4 <iprintf>

	return fd;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	080297b8 	.word	0x080297b8
 8003088:	080254d0 	.word	0x080254d0
 800308c:	080254ec 	.word	0x080254ec
 8003090:	20000304 	.word	0x20000304
 8003094:	080254fc 	.word	0x080254fc
 8003098:	0802550c 	.word	0x0802550c

0800309c <led_command_handler>:
	COMMAND_ERR_PTR = -11,
	COMMAND_OK = 0
}command_error_t;

static command_error_t led_command_handler(const uint8_t * buffer, size_t len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	int num;
	char cmd[sizeof("toggle")];
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 80030a6:	4b35      	ldr	r3, [pc, #212]	; (800317c <led_command_handler+0xe0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]

	if(buffer == NULL || len == 0 || len > CMD_BUFFER_MAX_LEN)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <led_command_handler+0x22>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <led_command_handler+0x22>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d902      	bls.n	80030c4 <led_command_handler+0x28>
	{
		return COMMAND_ERR_ARGUMENT;
 80030be:	f06f 0306 	mvn.w	r3, #6
 80030c2:	e056      	b.n	8003172 <led_command_handler+0xd6>
	}

	if(sscanf((const char *)buffer, "led%d %s", &num, cmd) != 2)
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	f107 0214 	add.w	r2, r7, #20
 80030cc:	492c      	ldr	r1, [pc, #176]	; (8003180 <led_command_handler+0xe4>)
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f01e ff0c 	bl	8021eec <siscanf>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d002      	beq.n	80030e0 <led_command_handler+0x44>
	{
		return COMMAND_ERR_WRONG_FORMAT;
 80030da:	f06f 0301 	mvn.w	r3, #1
 80030de:	e048      	b.n	8003172 <led_command_handler+0xd6>
	}
	if (num < 3 || num > 6 )
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	dd02      	ble.n	80030ec <led_command_handler+0x50>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b06      	cmp	r3, #6
 80030ea:	dd02      	ble.n	80030f2 <led_command_handler+0x56>
	{
		return COMMAND_ERR_LED_NUMBER;
 80030ec:	f06f 0302 	mvn.w	r3, #2
 80030f0:	e03f      	b.n	8003172 <led_command_handler+0xd6>
	}
	if (strncmp("on", cmd, sizeof(cmd)) == 0)
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4619      	mov	r1, r3
 80030f8:	4822      	ldr	r0, [pc, #136]	; (8003184 <led_command_handler+0xe8>)
 80030fa:	f7fd f869 	bl	80001d0 <strcmp>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <led_command_handler+0x7e>
	{
		BSP_LED_On(led[num - 3]);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3b03      	subs	r3, #3
 8003108:	f107 0218 	add.w	r2, r7, #24
 800310c:	4413      	add	r3, r2
 800310e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fd14 	bl	8003b40 <BSP_LED_On>
 8003118:	e02a      	b.n	8003170 <led_command_handler+0xd4>
	}
	else if (strncmp("off", cmd, sizeof(cmd)) == 0)
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	4619      	mov	r1, r3
 8003120:	4819      	ldr	r0, [pc, #100]	; (8003188 <led_command_handler+0xec>)
 8003122:	f7fd f855 	bl	80001d0 <strcmp>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <led_command_handler+0xa6>
	{
		BSP_LED_Off(led[num - 3]);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3b03      	subs	r3, #3
 8003130:	f107 0218 	add.w	r2, r7, #24
 8003134:	4413      	add	r3, r2
 8003136:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fd1a 	bl	8003b74 <BSP_LED_Off>
 8003140:	e016      	b.n	8003170 <led_command_handler+0xd4>
	}
	else if (strncmp("toggle", cmd, sizeof(cmd)) == 0)
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	4619      	mov	r1, r3
 8003148:	4810      	ldr	r0, [pc, #64]	; (800318c <led_command_handler+0xf0>)
 800314a:	f7fd f841 	bl	80001d0 <strcmp>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <led_command_handler+0xce>
	{
		BSP_LED_Toggle(led[num - 3]);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3b03      	subs	r3, #3
 8003158:	f107 0218 	add.w	r2, r7, #24
 800315c:	4413      	add	r3, r2
 800315e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd20 	bl	8003ba8 <BSP_LED_Toggle>
 8003168:	e002      	b.n	8003170 <led_command_handler+0xd4>
	}
	else
	{
		return COMMAND_ERR_LED_CMD;
 800316a:	f06f 0303 	mvn.w	r3, #3
 800316e:	e000      	b.n	8003172 <led_command_handler+0xd6>
	}
	return COMMAND_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	08025548 	.word	0x08025548
 8003180:	0802552c 	.word	0x0802552c
 8003184:	08025538 	.word	0x08025538
 8003188:	0802553c 	.word	0x0802553c
 800318c:	08025540 	.word	0x08025540

08003190 <gpio_command_handler>:
 * len - buffer length
 * state - a pointer to the GPIO status that should to be returned
 * pin - a pointer to the PIN number that should to be returned
 **/
static command_error_t gpio_command_handler(const uint8_t * buffer, size_t len, bool *state, int *pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
		char name;
		int num;

		PIN_TypeDef pins[4] = {PIN12, PIN13, PIN14, PIN15};
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <gpio_command_handler+0xa4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	617b      	str	r3, [r7, #20]

		if(buffer == NULL || len == 0 || len > CMD_BUFFER_MAX_LEN)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <gpio_command_handler+0x26>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <gpio_command_handler+0x26>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d902      	bls.n	80031bc <gpio_command_handler+0x2c>
		{
			return COMMAND_ERR_ARGUMENT;
 80031b6:	f06f 0306 	mvn.w	r3, #6
 80031ba:	e037      	b.n	800322c <gpio_command_handler+0x9c>
		}
		if(sscanf((const char *)buffer, "read gpio%c %d", &name, &num) != 2)
 80031bc:	f107 0318 	add.w	r3, r7, #24
 80031c0:	f107 021f 	add.w	r2, r7, #31
 80031c4:	491c      	ldr	r1, [pc, #112]	; (8003238 <gpio_command_handler+0xa8>)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f01e fe90 	bl	8021eec <siscanf>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d002      	beq.n	80031d8 <gpio_command_handler+0x48>
		{
			return COMMAND_ERR_WRONG_FORMAT;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	e029      	b.n	800322c <gpio_command_handler+0x9c>
		}
		if (num < 12 || num > 15 )
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0b      	cmp	r3, #11
 80031dc:	dd02      	ble.n	80031e4 <gpio_command_handler+0x54>
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b0f      	cmp	r3, #15
 80031e2:	dd02      	ble.n	80031ea <gpio_command_handler+0x5a>
		{
			return COMMAND_ERR_GPIO_PIN;
 80031e4:	f06f 0305 	mvn.w	r3, #5
 80031e8:	e020      	b.n	800322c <gpio_command_handler+0x9c>
		}
		if (name != 'd')
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d002      	beq.n	80031f6 <gpio_command_handler+0x66>
		{
			return COMMAND_ERR_GPIO_NAME;
 80031f0:	f06f 0304 	mvn.w	r3, #4
 80031f4:	e01a      	b.n	800322c <gpio_command_handler+0x9c>
		}
		if (state == NULL || pin == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <gpio_command_handler+0x72>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <gpio_command_handler+0x78>
		{
			return COMMAND_ERR_PTR;
 8003202:	f06f 030a 	mvn.w	r3, #10
 8003206:	e011      	b.n	800322c <gpio_command_handler+0x9c>
		}
		*state = ReadPin(pins[num - 12]);
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	3b0c      	subs	r3, #12
 800320c:	f107 0220 	add.w	r2, r7, #32
 8003210:	4413      	add	r3, r2
 8003212:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff febe 	bl	8002f98 <ReadPin>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	701a      	strb	r2, [r3, #0]
		*pin = num;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	601a      	str	r2, [r3, #0]
		return COMMAND_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	0802555c 	.word	0x0802555c
 8003238:	0802554c 	.word	0x0802554c

0800323c <pwm_command_handler>:
 * pwm - a pointer to the pwm value that should to be returned
 * channel - a pointer to the channel(led) number that should to be returned
 * command - a pointer to the command(r/w - read/write) that should to be returned
 **/
static command_error_t pwm_command_handler(const uint8_t * buffer, size_t len, int *pwm, int *channel, char *command)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
		int num;
		int valPWM;
		char cmd[sizeof("write")];

		if(buffer == NULL || len == 0 || len > CMD_BUFFER_MAX_LEN)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <pwm_command_handler+0x20>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <pwm_command_handler+0x20>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b20      	cmp	r3, #32
 800325a:	d902      	bls.n	8003262 <pwm_command_handler+0x26>
		{
			return COMMAND_ERR_ARGUMENT;
 800325c:	f06f 0306 	mvn.w	r3, #6
 8003260:	e068      	b.n	8003334 <pwm_command_handler+0xf8>
		}
		int arg = sscanf((const char *)buffer, "/%s led%d %d", cmd, &num, &valPWM);
 8003262:	f107 0120 	add.w	r1, r7, #32
 8003266:	f107 0214 	add.w	r2, r7, #20
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	460b      	mov	r3, r1
 8003272:	4932      	ldr	r1, [pc, #200]	; (800333c <pwm_command_handler+0x100>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f01e fe39 	bl	8021eec <siscanf>
 800327a:	6278      	str	r0, [r7, #36]	; 0x24
		if(arg < 2 || arg > 3)
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	2b01      	cmp	r3, #1
 8003280:	dd02      	ble.n	8003288 <pwm_command_handler+0x4c>
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2b03      	cmp	r3, #3
 8003286:	dd02      	ble.n	800328e <pwm_command_handler+0x52>
			return COMMAND_ERR_WRONG_FORMAT;
 8003288:	f06f 0301 	mvn.w	r3, #1
 800328c:	e052      	b.n	8003334 <pwm_command_handler+0xf8>
		if (num < 1 || num > 16 )
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2b00      	cmp	r3, #0
 8003292:	dd02      	ble.n	800329a <pwm_command_handler+0x5e>
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2b10      	cmp	r3, #16
 8003298:	dd02      	ble.n	80032a0 <pwm_command_handler+0x64>
			return COMMAND_ERR_CHANNEL_NUM;
 800329a:	f06f 0308 	mvn.w	r3, #8
 800329e:	e049      	b.n	8003334 <pwm_command_handler+0xf8>
		if (pwm == NULL || channel == NULL || command == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <pwm_command_handler+0x76>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <pwm_command_handler+0x76>
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <pwm_command_handler+0x7c>
		{
			return COMMAND_ERR_PTR;
 80032b2:	f06f 030a 	mvn.w	r3, #10
 80032b6:	e03d      	b.n	8003334 <pwm_command_handler+0xf8>
		}
		if (strncmp("read", cmd, sizeof(cmd)) == 0)
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	4619      	mov	r1, r3
 80032be:	4820      	ldr	r0, [pc, #128]	; (8003340 <pwm_command_handler+0x104>)
 80032c0:	f7fc ff86 	bl	80001d0 <strcmp>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <pwm_command_handler+0xae>
		{
			*pwm = getPWM(num);
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fff8 	bl	80012c4 <getPWM>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
			*channel = num;
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	601a      	str	r2, [r3, #0]
			*command = 'r';
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	2272      	movs	r2, #114	; 0x72
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e023      	b.n	8003332 <pwm_command_handler+0xf6>
		}
		else if (strncmp("write", cmd, sizeof(cmd)) == 0)
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	4814      	ldr	r0, [pc, #80]	; (8003344 <pwm_command_handler+0x108>)
 80032f2:	f7fc ff6d 	bl	80001d0 <strcmp>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d117      	bne.n	800332c <pwm_command_handler+0xf0>
		{
			if (valPWM < 0 || valPWM > 4095)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db03      	blt.n	800330a <pwm_command_handler+0xce>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	db02      	blt.n	8003310 <pwm_command_handler+0xd4>
				return COMMAND_ERR_VALUE_PWM;
 800330a:	f06f 0309 	mvn.w	r3, #9
 800330e:	e011      	b.n	8003334 <pwm_command_handler+0xf8>
			setLedPWM(num, valPWM);
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd ff61 	bl	80011e0 <setLedPWM>
			*channel = num;
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]
			*command = 'w';
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2277      	movs	r2, #119	; 0x77
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e002      	b.n	8003332 <pwm_command_handler+0xf6>
		}
		else
		{
			return COMMAND_ERR_WRONG_CMD;
 800332c:	f06f 0307 	mvn.w	r3, #7
 8003330:	e000      	b.n	8003334 <pwm_command_handler+0xf8>
		}

		return COMMAND_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	08025560 	.word	0x08025560
 8003340:	08025570 	.word	0x08025570
 8003344:	08025578 	.word	0x08025578

08003348 <led_data>:
 * buffer - a pointer to the input buffer
 * len - buffer length
 * addr_len - length of the client_addr
 **/
void led_data(int listnum, const uint8_t * buffer, size_t len, int addr_len)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
	command_error_t r;
	if ( (r = led_command_handler(buffer, len)) != COMMAND_OK)
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f7ff fe9f 	bl	800309c <led_command_handler>
 800335e:	4603      	mov	r3, r0
 8003360:	75fb      	strb	r3, [r7, #23]
 8003362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d024      	beq.n	80033b4 <led_data+0x6c>
	{
		UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 800336a:	22fb      	movs	r2, #251	; 0xfb
 800336c:	4925      	ldr	r1, [pc, #148]	; (8003404 <led_data+0xbc>)
 800336e:	4826      	ldr	r0, [pc, #152]	; (8003408 <led_data+0xc0>)
 8003370:	f01e fc20 	bl	8021bb4 <iprintf>
 8003374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003378:	4619      	mov	r1, r3
 800337a:	4824      	ldr	r0, [pc, #144]	; (800340c <led_data+0xc4>)
 800337c:	f01e fc1a 	bl	8021bb4 <iprintf>
		if (sendto(connectlist[listnum], "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8003380:	4a23      	ldr	r2, [pc, #140]	; (8003410 <led_data+0xc8>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <led_data+0xcc>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2308      	movs	r3, #8
 8003392:	2207      	movs	r2, #7
 8003394:	4920      	ldr	r1, [pc, #128]	; (8003418 <led_data+0xd0>)
 8003396:	f00d ffad 	bl	80112f4 <lwip_sendto>
 800339a:	4603      	mov	r3, r0
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a0:	d12b      	bne.n	80033fa <led_data+0xb2>
		{
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80033a2:	22fe      	movs	r2, #254	; 0xfe
 80033a4:	4917      	ldr	r1, [pc, #92]	; (8003404 <led_data+0xbc>)
 80033a6:	4818      	ldr	r0, [pc, #96]	; (8003408 <led_data+0xc0>)
 80033a8:	f01e fc04 	bl	8021bb4 <iprintf>
 80033ac:	481b      	ldr	r0, [pc, #108]	; (800341c <led_data+0xd4>)
 80033ae:	f01e fc87 	bl	8021cc0 <puts>
		if (sendto(connectlist[listnum], "OK\n", sizeof("OK\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
		{
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
		}
	}
}
 80033b2:	e022      	b.n	80033fa <led_data+0xb2>
		UDP_SERVER_PRINTF("command was handles successfully\n");
 80033b4:	f240 1203 	movw	r2, #259	; 0x103
 80033b8:	4912      	ldr	r1, [pc, #72]	; (8003404 <led_data+0xbc>)
 80033ba:	4813      	ldr	r0, [pc, #76]	; (8003408 <led_data+0xc0>)
 80033bc:	f01e fbfa 	bl	8021bb4 <iprintf>
 80033c0:	4817      	ldr	r0, [pc, #92]	; (8003420 <led_data+0xd8>)
 80033c2:	f01e fc7d 	bl	8021cc0 <puts>
		if (sendto(connectlist[listnum], "OK\n", sizeof("OK\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <led_data+0xc8>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <led_data+0xcc>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2308      	movs	r3, #8
 80033d8:	2204      	movs	r2, #4
 80033da:	4912      	ldr	r1, [pc, #72]	; (8003424 <led_data+0xdc>)
 80033dc:	f00d ff8a 	bl	80112f4 <lwip_sendto>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e6:	d108      	bne.n	80033fa <led_data+0xb2>
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80033e8:	f44f 7283 	mov.w	r2, #262	; 0x106
 80033ec:	4905      	ldr	r1, [pc, #20]	; (8003404 <led_data+0xbc>)
 80033ee:	4806      	ldr	r0, [pc, #24]	; (8003408 <led_data+0xc0>)
 80033f0:	f01e fbe0 	bl	8021bb4 <iprintf>
 80033f4:	4809      	ldr	r0, [pc, #36]	; (800341c <led_data+0xd4>)
 80033f6:	f01e fc63 	bl	8021cc0 <puts>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	080297c8 	.word	0x080297c8
 8003408:	080254d0 	.word	0x080254d0
 800340c:	08025580 	.word	0x08025580
 8003410:	20014600 	.word	0x20014600
 8003414:	20000314 	.word	0x20000314
 8003418:	080255ac 	.word	0x080255ac
 800341c:	080255b4 	.word	0x080255b4
 8003420:	080255cc 	.word	0x080255cc
 8003424:	080255f0 	.word	0x080255f0

08003428 <gpio_data>:
 * buffer - a pointer to the input buffer
 * len - buffer length
 * addr_len - length of the client_addr
 **/
void gpio_data(int listnum, const uint8_t * buffer, size_t len, int addr_len)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b08d      	sub	sp, #52	; 0x34
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
	int pin;
	bool state;
	command_error_t r;
	if ((r = gpio_command_handler(buffer, len, &state, &pin)) != COMMAND_OK)
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	f107 021f 	add.w	r2, r7, #31
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	68b8      	ldr	r0, [r7, #8]
 8003442:	f7ff fea5 	bl	8003190 <gpio_command_handler>
 8003446:	4603      	mov	r3, r0
 8003448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800344c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003450:	2b00      	cmp	r3, #0
 8003452:	d026      	beq.n	80034a2 <gpio_data+0x7a>
	{
		UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 8003454:	f240 1219 	movw	r2, #281	; 0x119
 8003458:	492c      	ldr	r1, [pc, #176]	; (800350c <gpio_data+0xe4>)
 800345a:	482d      	ldr	r0, [pc, #180]	; (8003510 <gpio_data+0xe8>)
 800345c:	f01e fbaa 	bl	8021bb4 <iprintf>
 8003460:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003464:	4619      	mov	r1, r3
 8003466:	482b      	ldr	r0, [pc, #172]	; (8003514 <gpio_data+0xec>)
 8003468:	f01e fba4 	bl	8021bb4 <iprintf>
		if (sendto(connectlist[listnum], "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <gpio_data+0xf0>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <gpio_data+0xf4>)
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2308      	movs	r3, #8
 800347e:	2207      	movs	r2, #7
 8003480:	4927      	ldr	r1, [pc, #156]	; (8003520 <gpio_data+0xf8>)
 8003482:	f00d ff37 	bl	80112f4 <lwip_sendto>
 8003486:	4603      	mov	r3, r0
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800348c:	d13a      	bne.n	8003504 <gpio_data+0xdc>
		{
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
 800348e:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8003492:	491e      	ldr	r1, [pc, #120]	; (800350c <gpio_data+0xe4>)
 8003494:	481e      	ldr	r0, [pc, #120]	; (8003510 <gpio_data+0xe8>)
 8003496:	f01e fb8d 	bl	8021bb4 <iprintf>
 800349a:	4822      	ldr	r0, [pc, #136]	; (8003524 <gpio_data+0xfc>)
 800349c:	f01e fc10 	bl	8021cc0 <puts>
		if (sendto(connectlist[listnum], str, strlen(str),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
		{
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
		}
	}
}
 80034a0:	e030      	b.n	8003504 <gpio_data+0xdc>
		sprintf(str, "GPIOD.%d=%d\n",pin, state);
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	f107 0010 	add.w	r0, r7, #16
 80034aa:	491f      	ldr	r1, [pc, #124]	; (8003528 <gpio_data+0x100>)
 80034ac:	f01e fcfe 	bl	8021eac <siprintf>
		UDP_SERVER_PRINTF("command was handles successfully\n");
 80034b0:	f240 1223 	movw	r2, #291	; 0x123
 80034b4:	4915      	ldr	r1, [pc, #84]	; (800350c <gpio_data+0xe4>)
 80034b6:	4816      	ldr	r0, [pc, #88]	; (8003510 <gpio_data+0xe8>)
 80034b8:	f01e fb7c 	bl	8021bb4 <iprintf>
 80034bc:	481b      	ldr	r0, [pc, #108]	; (800352c <gpio_data+0x104>)
 80034be:	f01e fbff 	bl	8021cc0 <puts>
		if (sendto(connectlist[listnum], str, strlen(str),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <gpio_data+0xf0>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fc fe88 	bl	80001e4 <strlen>
 80034d4:	4602      	mov	r2, r0
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f107 0110 	add.w	r1, r7, #16
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <gpio_data+0xf4>)
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2308      	movs	r3, #8
 80034e4:	4620      	mov	r0, r4
 80034e6:	f00d ff05 	bl	80112f4 <lwip_sendto>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f0:	d108      	bne.n	8003504 <gpio_data+0xdc>
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80034f2:	f44f 7293 	mov.w	r2, #294	; 0x126
 80034f6:	4905      	ldr	r1, [pc, #20]	; (800350c <gpio_data+0xe4>)
 80034f8:	4805      	ldr	r0, [pc, #20]	; (8003510 <gpio_data+0xe8>)
 80034fa:	f01e fb5b 	bl	8021bb4 <iprintf>
 80034fe:	4809      	ldr	r0, [pc, #36]	; (8003524 <gpio_data+0xfc>)
 8003500:	f01e fbde 	bl	8021cc0 <puts>
}
 8003504:	bf00      	nop
 8003506:	372c      	adds	r7, #44	; 0x2c
 8003508:	46bd      	mov	sp, r7
 800350a:	bd90      	pop	{r4, r7, pc}
 800350c:	080297d4 	.word	0x080297d4
 8003510:	080254d0 	.word	0x080254d0
 8003514:	08025580 	.word	0x08025580
 8003518:	20014600 	.word	0x20014600
 800351c:	20000314 	.word	0x20000314
 8003520:	080255ac 	.word	0x080255ac
 8003524:	080255b4 	.word	0x080255b4
 8003528:	080255f4 	.word	0x080255f4
 800352c:	080255cc 	.word	0x080255cc

08003530 <pwm_data>:
 * buffer - a pointer to the input buffer
 * len - buffer length
 * addr_len - length of the client_addr
 **/
void pwm_data(int listnum, const uint8_t * buffer, size_t len, int addr_len)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b0b1      	sub	sp, #196	; 0xc4
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
	int channel;
	int pwm;
	char command;
	command_error_t ret;
	if ((ret = pwm_command_handler(buffer, len, &pwm, &channel, &command)) != COMMAND_OK)
 800353e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003542:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003546:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	460b      	mov	r3, r1
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	68b8      	ldr	r0, [r7, #8]
 8003552:	f7ff fe73 	bl	800323c <pwm_command_handler>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800355c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8003560:	2b00      	cmp	r3, #0
 8003562:	d033      	beq.n	80035cc <pwm_data+0x9c>
	{
		UDP_SERVER_PRINTF("pwm_command_handler() returned error code = %d\n", (int)ret);
 8003564:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8003568:	493a      	ldr	r1, [pc, #232]	; (8003654 <pwm_data+0x124>)
 800356a:	483b      	ldr	r0, [pc, #236]	; (8003658 <pwm_data+0x128>)
 800356c:	f01e fb22 	bl	8021bb4 <iprintf>
 8003570:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8003574:	4619      	mov	r1, r3
 8003576:	4839      	ldr	r0, [pc, #228]	; (800365c <pwm_data+0x12c>)
 8003578:	f01e fb1c 	bl	8021bb4 <iprintf>
		char strn[150];
		sprintf(strn, "Error\nUse: /write led[n] [val] or /read led[n]\nWhere:\n\t-[n] is number of led(1-16)\n\t-[val] is pwm value(0-4095)\n");
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	4937      	ldr	r1, [pc, #220]	; (8003660 <pwm_data+0x130>)
 8003582:	4618      	mov	r0, r3
 8003584:	f01e fc92 	bl	8021eac <siprintf>
		if (sendto(connectlist[listnum], strn, strlen(strn),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8003588:	4a36      	ldr	r2, [pc, #216]	; (8003664 <pwm_data+0x134>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4618      	mov	r0, r3
 8003596:	f7fc fe25 	bl	80001e4 <strlen>
 800359a:	4602      	mov	r2, r0
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f107 0114 	add.w	r1, r7, #20
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <pwm_data+0x138>)
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2308      	movs	r3, #8
 80035aa:	4620      	mov	r0, r4
 80035ac:	f00d fea2 	bl	80112f4 <lwip_sendto>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b6:	d149      	bne.n	800364c <pwm_data+0x11c>
		{
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
 80035b8:	f240 123f 	movw	r2, #319	; 0x13f
 80035bc:	4925      	ldr	r1, [pc, #148]	; (8003654 <pwm_data+0x124>)
 80035be:	4826      	ldr	r0, [pc, #152]	; (8003658 <pwm_data+0x128>)
 80035c0:	f01e faf8 	bl	8021bb4 <iprintf>
 80035c4:	4829      	ldr	r0, [pc, #164]	; (800366c <pwm_data+0x13c>)
 80035c6:	f01e fb7b 	bl	8021cc0 <puts>
		if (sendto(connectlist[listnum], str, strlen(str),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
		{
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
		}
	}
}
 80035ca:	e03f      	b.n	800364c <pwm_data+0x11c>
		if (command == 'r')
 80035cc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80035d0:	2b72      	cmp	r3, #114	; 0x72
 80035d2:	d109      	bne.n	80035e8 <pwm_data+0xb8>
			sprintf(str, "PWM on led%d = %d\n", channel, pwm);
 80035d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035dc:	f107 0014 	add.w	r0, r7, #20
 80035e0:	4923      	ldr	r1, [pc, #140]	; (8003670 <pwm_data+0x140>)
 80035e2:	f01e fc63 	bl	8021eac <siprintf>
 80035e6:	e007      	b.n	80035f8 <pwm_data+0xc8>
			sprintf(str, "PWM for led%d successfully installed.\n", channel);
 80035e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4920      	ldr	r1, [pc, #128]	; (8003674 <pwm_data+0x144>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	f01e fc5a 	bl	8021eac <siprintf>
		UDP_SERVER_PRINTF("pwm command was handles successfully\n");
 80035f8:	f240 1249 	movw	r2, #329	; 0x149
 80035fc:	4915      	ldr	r1, [pc, #84]	; (8003654 <pwm_data+0x124>)
 80035fe:	4816      	ldr	r0, [pc, #88]	; (8003658 <pwm_data+0x128>)
 8003600:	f01e fad8 	bl	8021bb4 <iprintf>
 8003604:	481c      	ldr	r0, [pc, #112]	; (8003678 <pwm_data+0x148>)
 8003606:	f01e fb5b 	bl	8021cc0 <puts>
		if (sendto(connectlist[listnum], str, strlen(str),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <pwm_data+0x134>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc fde4 	bl	80001e4 <strlen>
 800361c:	4602      	mov	r2, r0
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f107 0114 	add.w	r1, r7, #20
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <pwm_data+0x138>)
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2308      	movs	r3, #8
 800362c:	4620      	mov	r0, r4
 800362e:	f00d fe61 	bl	80112f4 <lwip_sendto>
 8003632:	4603      	mov	r3, r0
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003638:	d108      	bne.n	800364c <pwm_data+0x11c>
			UDP_SERVER_PRINTF("sendto() returned -1 \n");
 800363a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800363e:	4905      	ldr	r1, [pc, #20]	; (8003654 <pwm_data+0x124>)
 8003640:	4805      	ldr	r0, [pc, #20]	; (8003658 <pwm_data+0x128>)
 8003642:	f01e fab7 	bl	8021bb4 <iprintf>
 8003646:	4809      	ldr	r0, [pc, #36]	; (800366c <pwm_data+0x13c>)
 8003648:	f01e fb3a 	bl	8021cc0 <puts>
}
 800364c:	bf00      	nop
 800364e:	37bc      	adds	r7, #188	; 0xbc
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}
 8003654:	080297e0 	.word	0x080297e0
 8003658:	080254d0 	.word	0x080254d0
 800365c:	08025604 	.word	0x08025604
 8003660:	08025634 	.word	0x08025634
 8003664:	20014600 	.word	0x20014600
 8003668:	20000314 	.word	0x20000314
 800366c:	080255b4 	.word	0x080255b4
 8003670:	080256a8 	.word	0x080256a8
 8003674:	080256bc 	.word	0x080256bc
 8003678:	080256e4 	.word	0x080256e4

0800367c <StartUdpServerTask>:

void StartUdpServerTask(void const * argument)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b09c      	sub	sp, #112	; 0x70
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
	int addr_len;
	osDelay(5000);// wait 5 sec to init lwip stack
 8003684:	f241 3088 	movw	r0, #5000	; 0x1388
 8003688:	f006 fffb 	bl	800a682 <osDelay>

	if((connectlist[0] = udpServerInit(PORTNUM)) < 0)
 800368c:	f241 602e 	movw	r0, #5678	; 0x162e
 8003690:	f7ff fca2 	bl	8002fd8 <udpServerInit>
 8003694:	4603      	mov	r3, r0
 8003696:	4a94      	ldr	r2, [pc, #592]	; (80038e8 <StartUdpServerTask+0x26c>)
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b93      	ldr	r3, [pc, #588]	; (80038e8 <StartUdpServerTask+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	da09      	bge.n	80036b6 <StartUdpServerTask+0x3a>
	{
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM) error\n");
 80036a2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80036a6:	4991      	ldr	r1, [pc, #580]	; (80038ec <StartUdpServerTask+0x270>)
 80036a8:	4891      	ldr	r0, [pc, #580]	; (80038f0 <StartUdpServerTask+0x274>)
 80036aa:	f01e fa83 	bl	8021bb4 <iprintf>
 80036ae:	4891      	ldr	r0, [pc, #580]	; (80038f4 <StartUdpServerTask+0x278>)
 80036b0:	f01e fb06 	bl	8021cc0 <puts>
		return;
 80036b4:	e114      	b.n	80038e0 <StartUdpServerTask+0x264>
	}

	if((connectlist[1] = udpServerInit(PORTNUM2)) < 0)
 80036b6:	f240 40d2 	movw	r0, #1234	; 0x4d2
 80036ba:	f7ff fc8d 	bl	8002fd8 <udpServerInit>
 80036be:	4603      	mov	r3, r0
 80036c0:	4a89      	ldr	r2, [pc, #548]	; (80038e8 <StartUdpServerTask+0x26c>)
 80036c2:	6053      	str	r3, [r2, #4]
 80036c4:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <StartUdpServerTask+0x26c>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da09      	bge.n	80036e0 <StartUdpServerTask+0x64>
	{
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM2) error\n");
 80036cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80036d0:	4986      	ldr	r1, [pc, #536]	; (80038ec <StartUdpServerTask+0x270>)
 80036d2:	4887      	ldr	r0, [pc, #540]	; (80038f0 <StartUdpServerTask+0x274>)
 80036d4:	f01e fa6e 	bl	8021bb4 <iprintf>
 80036d8:	4887      	ldr	r0, [pc, #540]	; (80038f8 <StartUdpServerTask+0x27c>)
 80036da:	f01e faf1 	bl	8021cc0 <puts>
		return;
 80036de:	e0ff      	b.n	80038e0 <StartUdpServerTask+0x264>
	}

	if((connectlist[2] = udpServerInit(PORTNUMPWM)) < 0)
 80036e0:	f242 700f 	movw	r0, #9999	; 0x270f
 80036e4:	f7ff fc78 	bl	8002fd8 <udpServerInit>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4a7f      	ldr	r2, [pc, #508]	; (80038e8 <StartUdpServerTask+0x26c>)
 80036ec:	6093      	str	r3, [r2, #8]
 80036ee:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <StartUdpServerTask+0x26c>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da09      	bge.n	800370a <StartUdpServerTask+0x8e>
	{
		UDP_SERVER_PRINTF("udpServerInit(PORTNUMPWM) error\n");
 80036f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80036fa:	497c      	ldr	r1, [pc, #496]	; (80038ec <StartUdpServerTask+0x270>)
 80036fc:	487c      	ldr	r0, [pc, #496]	; (80038f0 <StartUdpServerTask+0x274>)
 80036fe:	f01e fa59 	bl	8021bb4 <iprintf>
 8003702:	487e      	ldr	r0, [pc, #504]	; (80038fc <StartUdpServerTask+0x280>)
 8003704:	f01e fadc 	bl	8021cc0 <puts>
		return;
 8003708:	e0ea      	b.n	80038e0 <StartUdpServerTask+0x264>
	{
		fd_set rfds;
		struct timeval tv;
		int retval;

		FD_ZERO(&rfds);
 800370a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800370e:	663b      	str	r3, [r7, #96]	; 0x60
 8003710:	2300      	movs	r3, #0
 8003712:	667b      	str	r3, [r7, #100]	; 0x64
 8003714:	e007      	b.n	8003726 <StartUdpServerTask+0xaa>
 8003716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	663a      	str	r2, [r7, #96]	; 0x60
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003722:	3301      	adds	r3, #1
 8003724:	667b      	str	r3, [r7, #100]	; 0x64
 8003726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003728:	2b07      	cmp	r3, #7
 800372a:	d9f4      	bls.n	8003716 <StartUdpServerTask+0x9a>

		for (int listnum = 0; listnum < 3; listnum++)
 800372c:	2300      	movs	r3, #0
 800372e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003730:	e02b      	b.n	800378a <StartUdpServerTask+0x10e>
		{
			FD_SET(connectlist[listnum],&rfds);
 8003732:	4a6d      	ldr	r2, [pc, #436]	; (80038e8 <StartUdpServerTask+0x26c>)
 8003734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373a:	095a      	lsrs	r2, r3, #5
 800373c:	0093      	lsls	r3, r2, #2
 800373e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003742:	440b      	add	r3, r1
 8003744:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003748:	4867      	ldr	r0, [pc, #412]	; (80038e8 <StartUdpServerTask+0x26c>)
 800374a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800374c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003750:	f001 011f 	and.w	r1, r1, #31
 8003754:	2001      	movs	r0, #1
 8003756:	fa00 f101 	lsl.w	r1, r0, r1
 800375a:	4319      	orrs	r1, r3
 800375c:	0093      	lsls	r3, r2, #2
 800375e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003762:	4413      	add	r3, r2
 8003764:	f843 1c2c 	str.w	r1, [r3, #-44]
			if (connectlist[listnum] > highsock)
 8003768:	4a5f      	ldr	r2, [pc, #380]	; (80038e8 <StartUdpServerTask+0x26c>)
 800376a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003770:	4b63      	ldr	r3, [pc, #396]	; (8003900 <StartUdpServerTask+0x284>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	dd05      	ble.n	8003784 <StartUdpServerTask+0x108>
				highsock = connectlist[listnum];
 8003778:	4a5b      	ldr	r2, [pc, #364]	; (80038e8 <StartUdpServerTask+0x26c>)
 800377a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003780:	4a5f      	ldr	r2, [pc, #380]	; (8003900 <StartUdpServerTask+0x284>)
 8003782:	6013      	str	r3, [r2, #0]
		for (int listnum = 0; listnum < 3; listnum++)
 8003784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003786:	3301      	adds	r3, #1
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	2b02      	cmp	r3, #2
 800378e:	ddd0      	ble.n	8003732 <StartUdpServerTask+0xb6>
		}
		bzero(&client_addr, sizeof(client_addr));
 8003790:	4b5c      	ldr	r3, [pc, #368]	; (8003904 <StartUdpServerTask+0x288>)
 8003792:	461a      	mov	r2, r3
 8003794:	2300      	movs	r3, #0
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	6053      	str	r3, [r2, #4]
 800379a:	6093      	str	r3, [r2, #8]
 800379c:	60d3      	str	r3, [r2, #12]
		addr_len = sizeof(client_addr);
 800379e:	2310      	movs	r3, #16
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44

		tv.tv_sec = 1;
 80037a2:	f04f 0201 	mov.w	r2, #1
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		tv.tv_usec = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30

		retval = select(highsock+1, &rfds, (fd_set *) 0, (fd_set *) 0, &tv);
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <StartUdpServerTask+0x284>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	1c58      	adds	r0, r3, #1
 80037b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80037bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2300      	movs	r3, #0
 80037c4:	2200      	movs	r2, #0
 80037c6:	f00e f863 	bl	8011890 <lwip_select>
 80037ca:	6538      	str	r0, [r7, #80]	; 0x50

		if (retval == -1)
 80037cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d2:	d110      	bne.n	80037f6 <StartUdpServerTask+0x17a>
		{
			// close socket fds
			for (int listnum = 0; listnum < 3; listnum++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80037d8:	e009      	b.n	80037ee <StartUdpServerTask+0x172>
			{
				close(connectlist[listnum]);
 80037da:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <StartUdpServerTask+0x26c>)
 80037dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f00d f8d2 	bl	801098c <lwip_close>
			for (int listnum = 0; listnum < 3; listnum++)
 80037e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ea:	3301      	adds	r3, #1
 80037ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	ddf2      	ble.n	80037da <StartUdpServerTask+0x15e>
 80037f4:	e074      	b.n	80038e0 <StartUdpServerTask+0x264>
			}
			break;
		}
		else if (retval)
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d067      	beq.n	80038cc <StartUdpServerTask+0x250>
		{
			uint8_t buffer[CMD_BUFFER_MAX_LEN];
			const size_t buf_size = sizeof(buffer);
 80037fc:	2320      	movs	r3, #32
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
			//command_error_t  r;
			ssize_t received;
				/* Don't rely on the value of tv now! */
			for (int listnum = 0; listnum < 3; listnum++)
 8003800:	2300      	movs	r3, #0
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
 8003804:	e05e      	b.n	80038c4 <StartUdpServerTask+0x248>
			{
				if (FD_ISSET(connectlist[listnum], &rfds))
 8003806:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <StartUdpServerTask+0x26c>)
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003816:	4413      	add	r3, r2
 8003818:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800381c:	4932      	ldr	r1, [pc, #200]	; (80038e8 <StartUdpServerTask+0x26c>)
 800381e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003824:	f002 021f 	and.w	r2, r2, #31
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f202 	lsl.w	r2, r1, r2
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d043      	beq.n	80038bc <StartUdpServerTask+0x240>
				{
					received = recvfrom(connectlist[listnum], buffer, buf_size, MSG_DONTWAIT, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8003834:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <StartUdpServerTask+0x26c>)
 8003836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003838:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800383c:	f107 0108 	add.w	r1, r7, #8
 8003840:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <StartUdpServerTask+0x288>)
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2308      	movs	r3, #8
 800384c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384e:	f00d fc4b 	bl	80110e8 <lwip_recvfrom>
 8003852:	64b8      	str	r0, [r7, #72]	; 0x48
					if (received > 0)
 8003854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	dd30      	ble.n	80038bc <StartUdpServerTask+0x240>
					{
						switch(listnum)
 800385a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385c:	2b02      	cmp	r3, #2
 800385e:	d019      	beq.n	8003894 <StartUdpServerTask+0x218>
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	2b02      	cmp	r3, #2
 8003864:	dc1e      	bgt.n	80038a4 <StartUdpServerTask+0x228>
 8003866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <StartUdpServerTask+0x1f8>
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	2b01      	cmp	r3, #1
 8003870:	d008      	beq.n	8003884 <StartUdpServerTask+0x208>
 8003872:	e017      	b.n	80038a4 <StartUdpServerTask+0x228>
						{
							case 0:
								led_data(listnum, buffer, received, addr_len);
 8003874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003878:	f107 0108 	add.w	r1, r7, #8
 800387c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800387e:	f7ff fd63 	bl	8003348 <led_data>
								break;
 8003882:	e01c      	b.n	80038be <StartUdpServerTask+0x242>
							case 1:
								gpio_data(listnum, buffer, received, addr_len);
 8003884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003888:	f107 0108 	add.w	r1, r7, #8
 800388c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800388e:	f7ff fdcb 	bl	8003428 <gpio_data>
								break;
 8003892:	e014      	b.n	80038be <StartUdpServerTask+0x242>
							case 2:
								pwm_data(listnum, buffer, received, addr_len);
 8003894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003898:	f107 0108 	add.w	r1, r7, #8
 800389c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800389e:	f7ff fe47 	bl	8003530 <pwm_data>
								break;
 80038a2:	e00c      	b.n	80038be <StartUdpServerTask+0x242>
							default:
								UDP_SERVER_PRINTF("connectlist error\n");
 80038a4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80038a8:	4910      	ldr	r1, [pc, #64]	; (80038ec <StartUdpServerTask+0x270>)
 80038aa:	4811      	ldr	r0, [pc, #68]	; (80038f0 <StartUdpServerTask+0x274>)
 80038ac:	f01e f982 	bl	8021bb4 <iprintf>
 80038b0:	4815      	ldr	r0, [pc, #84]	; (8003908 <StartUdpServerTask+0x28c>)
 80038b2:	f01e fa05 	bl	8021cc0 <puts>
								exit(EXIT_FAILURE);
 80038b6:	2001      	movs	r0, #1
 80038b8:	f01d fae8 	bl	8020e8c <exit>
							break;
						}
					}
 80038bc:	bf00      	nop
			for (int listnum = 0; listnum < 3; listnum++)
 80038be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c0:	3301      	adds	r3, #1
 80038c2:	657b      	str	r3, [r7, #84]	; 0x54
 80038c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	dd9d      	ble.n	8003806 <StartUdpServerTask+0x18a>
 80038ca:	e71e      	b.n	800370a <StartUdpServerTask+0x8e>
				}
			}
		}
		else
		{
			UDP_SERVER_PRINTF("No data on the sockets within 1 sec.\n");
 80038cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80038d0:	4906      	ldr	r1, [pc, #24]	; (80038ec <StartUdpServerTask+0x270>)
 80038d2:	4807      	ldr	r0, [pc, #28]	; (80038f0 <StartUdpServerTask+0x274>)
 80038d4:	f01e f96e 	bl	8021bb4 <iprintf>
 80038d8:	480c      	ldr	r0, [pc, #48]	; (800390c <StartUdpServerTask+0x290>)
 80038da:	f01e f9f1 	bl	8021cc0 <puts>
	{
 80038de:	e714      	b.n	800370a <StartUdpServerTask+0x8e>
		}
	}
}
 80038e0:	3768      	adds	r7, #104	; 0x68
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20014600 	.word	0x20014600
 80038ec:	080297ec 	.word	0x080297ec
 80038f0:	080254d0 	.word	0x080254d0
 80038f4:	0802570c 	.word	0x0802570c
 80038f8:	0802572c 	.word	0x0802572c
 80038fc:	0802574c 	.word	0x0802574c
 8003900:	200145fc 	.word	0x200145fc
 8003904:	20000314 	.word	0x20000314
 8003908:	0802576c 	.word	0x0802576c
 800390c:	08025780 	.word	0x08025780

08003910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003914:	480d      	ldr	r0, [pc, #52]	; (800394c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003916:	490e      	ldr	r1, [pc, #56]	; (8003950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003918:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800391a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800391c:	e002      	b.n	8003924 <LoopCopyDataInit>

0800391e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800391e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003922:	3304      	adds	r3, #4

08003924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003928:	d3f9      	bcc.n	800391e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800392c:	4c0b      	ldr	r4, [pc, #44]	; (800395c <LoopFillZerobss+0x26>)
  movs r3, #0
 800392e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003930:	e001      	b.n	8003936 <LoopFillZerobss>

08003932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003934:	3204      	adds	r2, #4

08003936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003938:	d3fb      	bcc.n	8003932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800393a:	f7ff f8cd 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800393e:	f01d fbaf 	bl	80210a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003942:	f7fd fec9 	bl	80016d8 <main>
  bx  lr    
 8003946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800394c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003950:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8003954:	08029eac 	.word	0x08029eac
  ldr r2, =_sbss
 8003958:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 800395c:	2001b1ec 	.word	0x2001b1ec

08003960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC_IRQHandler>
	...

08003964 <DWT_Init>:
#include "delay.h"

void DWT_Init(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <DWT_Init+0x2c>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a08      	ldr	r2, [pc, #32]	; (8003990 <DWT_Init+0x2c>)
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003972:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <DWT_Init+0x30>)
 8003976:	2200      	movs	r2, #0
 8003978:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <DWT_Init+0x30>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a05      	ldr	r2, [pc, #20]	; (8003994 <DWT_Init+0x30>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6013      	str	r3, [r2, #0]
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000edf0 	.word	0xe000edf0
 8003994:	e0001000 	.word	0xe0001000

08003998 <DWT_Delay>:

void DWT_Delay(uint32_t Delay)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	uint32_t cyclestamp = DWT->CYCCNT + Delay * (HAL_RCC_GetHCLKFreq() / 1000000);
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <DWT_Delay+0x3c>)
 80039a2:	685c      	ldr	r4, [r3, #4]
 80039a4:	f005 fa0e 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <DWT_Delay+0x40>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	0c9b      	lsrs	r3, r3, #18
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	4423      	add	r3, r4
 80039ba:	60fb      	str	r3, [r7, #12]
	while (DWT->CYCCNT < cyclestamp) ;
 80039bc:	bf00      	nop
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <DWT_Delay+0x3c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d8fa      	bhi.n	80039be <DWT_Delay+0x26>
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	e0001000 	.word	0xe0001000
 80039d8:	431bde83 	.word	0x431bde83

080039dc <DWT_GetCycles>:

uint32_t DWT_GetCycles()
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <DWT_GetCycles+0x14>)
 80039e2:	685b      	ldr	r3, [r3, #4]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e0001000 	.word	0xe0001000

080039f4 <DWT_Cycles_to_us>:

uint8_t DWT_Cycles_to_us(uint32_t cycles)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
 80039fc:	f005 f9e2 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <DWT_Cycles_to_us+0x2c>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	0c9b      	lsrs	r3, r3, #18
 8003a0a:	60fb      	str	r3, [r7, #12]
	return (uint8_t)(cycles / clock_in_MHz);
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	b2db      	uxtb	r3, r3
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	431bde83 	.word	0x431bde83

08003a24 <delay_us>:

void delay_us(uint32_t Delay)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	DWT_Delay(Delay);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ffb3 	bl	8003998 <DWT_Delay>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <delay_ms>:

void delay_ms(uint32_t Delay)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 fe1a 	bl	800567c <HAL_Delay>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	; 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10e      	bne.n	8003a7e <BSP_LED_Init+0x2e>
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4a32      	ldr	r2, [pc, #200]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003a6a:	f043 0308 	orr.w	r3, r3, #8
 8003a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a70:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	e034      	b.n	8003ae8 <BSP_LED_Init+0x98>
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10e      	bne.n	8003aa2 <BSP_LED_Init+0x52>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	e022      	b.n	8003ae8 <BSP_LED_Init+0x98>
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d10e      	bne.n	8003ac6 <BSP_LED_Init+0x76>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	e010      	b.n	8003ae8 <BSP_LED_Init+0x98>
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d10d      	bne.n	8003ae8 <BSP_LED_Init+0x98>
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003ad6:	f043 0308 	orr.w	r3, r3, #8
 8003ada:	6313      	str	r3, [r2, #48]	; 0x30
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <BSP_LED_Init+0xe4>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <BSP_LED_Init+0xe8>)
 8003aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af2:	2301      	movs	r3, #1
 8003af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003afa:	2302      	movs	r3, #2
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <BSP_LED_Init+0xec>)
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	f107 021c 	add.w	r2, r7, #28
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 feeb 	bl	80058e8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <BSP_LED_Init+0xec>)
 8003b16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a06      	ldr	r2, [pc, #24]	; (8003b38 <BSP_LED_Init+0xe8>)
 8003b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b22:	2200      	movs	r2, #0
 8003b24:	4619      	mov	r1, r3
 8003b26:	f002 f98f 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8003b2a:	bf00      	nop
 8003b2c:	3730      	adds	r7, #48	; 0x30
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08029800 	.word	0x08029800
 8003b3c:	20000038 	.word	0x20000038

08003b40 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <BSP_LED_On+0x2c>)
 8003b4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	4a06      	ldr	r2, [pc, #24]	; (8003b70 <BSP_LED_On+0x30>)
 8003b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f002 f973 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000038 	.word	0x20000038
 8003b70:	08029800 	.word	0x08029800

08003b74 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <BSP_LED_Off+0x2c>)
 8003b82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	4a06      	ldr	r2, [pc, #24]	; (8003ba4 <BSP_LED_Off+0x30>)
 8003b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4619      	mov	r1, r3
 8003b92:	f002 f959 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000038 	.word	0x20000038
 8003ba4:	08029800 	.word	0x08029800

08003ba8 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <BSP_LED_Toggle+0x2c>)
 8003bb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	4906      	ldr	r1, [pc, #24]	; (8003bd8 <BSP_LED_Toggle+0x30>)
 8003bbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f002 f958 	bl	8005e7a <HAL_GPIO_TogglePin>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000038 	.word	0x20000038
 8003bd8:	08029800 	.word	0x08029800

08003bdc <dht11_set_callbacks>:
				init_read_pin_t init_read_pin_func,
				init_write_pin_t init_write_pin_func,
				read_pin_t read_pin_func,
				write_pin_t write_pin_func
			)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
	if (cb == NULL
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d011      	beq.n	8003c14 <dht11_set_callbacks+0x38>
		|| us_delay_func == NULL
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00e      	beq.n	8003c14 <dht11_set_callbacks+0x38>
		|| ms_delay_func == NULL
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <dht11_set_callbacks+0x38>
		|| init_read_pin_func == NULL
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <dht11_set_callbacks+0x38>
		|| init_write_pin_func == NULL
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <dht11_set_callbacks+0x38>
		|| read_pin_func == NULL
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <dht11_set_callbacks+0x38>
		|| write_pin_func == NULL)
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <dht11_set_callbacks+0x3c>
	{
		return DHT_ERR_FAULT;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e012      	b.n	8003c3e <dht11_set_callbacks+0x62>
	}
	cb->callbacks.us_delay = us_delay_func;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
	cb->callbacks.ms_delay = ms_delay_func;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]
	cb->callbacks.init_read_pin = init_read_pin_func;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	615a      	str	r2, [r3, #20]
	cb->callbacks.init_write_pin = init_write_pin_func;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	619a      	str	r2, [r3, #24]
	cb->callbacks.read_pin = read_pin_func;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	61da      	str	r2, [r3, #28]
	cb->callbacks.write_pin = write_pin_func;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	621a      	str	r2, [r3, #32]
	return DHT_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <dht11_init>:

dht_status_t dht11_init(dht11_t *cb, void *port, uint32_t pin)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
	if (cb == NULL || port == NULL)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <dht11_init+0x18>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <dht11_init+0x1c>
	{
		return DHT_ERR_FAULT;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e030      	b.n	8003cc8 <dht11_init+0x7e>
	}
	cb->port = port;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	601a      	str	r2, [r3, #0]
	cb->pin = pin;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]

#if defined (STM32F407xx) && defined(USE_HAL_DRIVER)
	dht_status_t status = dht11_stm32_init(cb);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f9fe 	bl	8004074 <dht11_stm32_init>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	75fb      	strb	r3, [r7, #23]
	if (status != DHT_OK)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <dht11_init+0x3c>
	{
		return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	e020      	b.n	8003cc8 <dht11_init+0x7e>
	}
#endif

	/* If callbacks are not initialized */
	if (cb->callbacks.us_delay == NULL
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <dht11_init+0x6c>
		|| cb->callbacks.ms_delay == NULL
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00f      	beq.n	8003cb6 <dht11_init+0x6c>
		|| cb->callbacks.init_read_pin == NULL
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <dht11_init+0x6c>
		|| cb->callbacks.init_write_pin == NULL
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <dht11_init+0x6c>
		|| cb->callbacks.read_pin == NULL
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <dht11_init+0x6c>
		|| cb->callbacks.write_pin == NULL)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <dht11_init+0x70>
	{
		return DHT_ERR_CALLBACKS;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e006      	b.n	8003cc8 <dht11_init+0x7e>
	}
	/* If pin reading time is empty there will be default value */
	cb->delay += DHT11_READ_PIN_DFLT_DELAY_USEC;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	7a1b      	ldrb	r3, [r3, #8]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	721a      	strb	r2, [r3, #8]
	//printf("cb->delay = %u\n", cb->delay);
	return DHT_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <wait_while_status>:

static bool wait_while_status(dht11_t *cb, size_t timeout, bool init_status)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	71fb      	strb	r3, [r7, #7]
	size_t counter = timeout / cb->delay;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	7a1b      	ldrb	r3, [r3, #8]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
	bool status = init_status;
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	74fb      	strb	r3, [r7, #19]
	do {
		cb->callbacks.us_delay(DHT11_READ_PIN_DFLT_DELAY_USEC);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	4798      	blx	r3
		status = cb->callbacks.read_pin (cb);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	4798      	blx	r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]
	} while((status == init_status) && --counter);
 8003d04:	7cfa      	ldrb	r2, [r7, #19]
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d105      	bne.n	8003d18 <wait_while_status+0x48>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1eb      	bne.n	8003cf0 <wait_while_status+0x20>
	return status;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <start_condition>:

/* The first DHT11's state is START CONDITION */
static inline bool start_condition (dht11_t *cb)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
	cb->callbacks.init_write_pin (cb);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
	cb->callbacks.write_pin (cb, false);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	2100      	movs	r1, #0
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
	cb->callbacks.ms_delay (DHT11_START_DELAY_MSEC);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2014      	movs	r0, #20
 8003d42:	4798      	blx	r3
	cb->callbacks.write_pin (cb, true);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
	cb->callbacks.init_read_pin (cb);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
	return (wait_while_status(cb, DHT11_START_WAIT_RESP_MAX_USEC, true) == false);
 8003d56:	2201      	movs	r2, #1
 8003d58:	2128      	movs	r1, #40	; 0x28
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffb8 	bl	8003cd0 <wait_while_status>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f083 0301 	eor.w	r3, r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <read_acknowledge>:

/* The second DHT11's state is READ ACKNOWLEDGE */
static inline bool read_acknowledge (dht11_t *cb)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	wait_while_status(cb, DHT11_ACK_LOW_STATE_USEC, false);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2150      	movs	r1, #80	; 0x50
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff9f 	bl	8003cd0 <wait_while_status>
	return (wait_while_status(cb, DHT11_ACK_HIGHT_STATE_USEC, true) == false);
 8003d92:	2201      	movs	r2, #1
 8003d94:	2150      	movs	r1, #80	; 0x50
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff9a 	bl	8003cd0 <wait_while_status>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf14      	ite	ne
 8003da2:	2301      	movne	r3, #1
 8003da4:	2300      	moveq	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f083 0301 	eor.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <read_data_byte>:

/* The third DHT11's state is READ DATA BYTES */
static inline bool read_data_byte (dht11_t *cb, uint8_t *data)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	uint8_t received = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
	for(int i = 7 ; i >= 0; i--)
 8003dca:	2307      	movs	r3, #7
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	e02b      	b.n	8003e28 <read_data_byte+0x6c>
	{
		wait_while_status(cb, DHT11_DATA_START_USEC, false);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2132      	movs	r1, #50	; 0x32
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff7b 	bl	8003cd0 <wait_while_status>
		if (wait_while_status(cb, DHT11_DATA_READ_LOW_MAX_USEC, true) == false)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	211c      	movs	r1, #28
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff76 	bl	8003cd0 <wait_while_status>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d117      	bne.n	8003e20 <read_data_byte+0x64>
		{
			continue;
		}
		if (wait_while_status(cb, DHT11_DATA_READ_HIGHT_USEC, true) == false)
 8003df0:	2201      	movs	r2, #1
 8003df2:	2146      	movs	r1, #70	; 0x46
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff6b 	bl	8003cd0 <wait_while_status>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f083 0301 	eor.w	r3, r3, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <read_data_byte+0x60>
		{
			received |= (1 << i);
 8003e06:	2201      	movs	r2, #1
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	b25a      	sxtb	r2, r3
 8003e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e002      	b.n	8003e22 <read_data_byte+0x66>
		}
		else
		{
			return false;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e00a      	b.n	8003e36 <read_data_byte+0x7a>
			continue;
 8003e20:	bf00      	nop
	for(int i = 7 ; i >= 0; i--)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	dad0      	bge.n	8003dd0 <read_data_byte+0x14>
		}
	}
	*data = received;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	701a      	strb	r2, [r3, #0]
	return true;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <calc_crc>:

static uint8_t calc_crc(uint8_t *data)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	e009      	b.n	8003e64 <calc_crc+0x26>
	{
		crc += data[i];
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3301      	adds	r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d9f2      	bls.n	8003e50 <calc_crc+0x12>
	}
	return crc;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <dht11_read>:

dht_status_t dht11_read(dht11_t *cb, uint8_t *data, size_t size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	uint8_t response[DHT11_DATA_BYTES];
	if (cb == NULL
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <dht11_read+0x18>
		|| data == NULL)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <dht11_read+0x1c>
	{
		return DHT_ERR_FAULT;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e044      	b.n	8003f1e <dht11_read+0xa6>
	}
	if (size < DHT11_DATA_SIZE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d801      	bhi.n	8003e9e <dht11_read+0x26>
	{
		return DHT_ERR_INVAL;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e03f      	b.n	8003f1e <dht11_read+0xa6>
	}
	if (!start_condition (cb))
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ff3f 	bl	8003d22 <start_condition>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <dht11_read+0x3c>
	{
		return DHT_ERR_START_CONDITION;
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	e034      	b.n	8003f1e <dht11_read+0xa6>
	}
	if (!read_acknowledge (cb))
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff63 	bl	8003d80 <read_acknowledge>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f083 0301 	eor.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <dht11_read+0x52>
	{
		return DHT_ERR_READ_ACK;
 8003ec6:	2305      	movs	r3, #5
 8003ec8:	e029      	b.n	8003f1e <dht11_read+0xa6>
	}
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e012      	b.n	8003ef6 <dht11_read+0x7e>
	{
		if (!read_data_byte (cb, &response[i]))
 8003ed0:	f107 0214 	add.w	r2, r7, #20
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff ff6e 	bl	8003dbc <read_data_byte>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f083 0301 	eor.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <dht11_read+0x78>
		{
			return DHT_ERR_READ_DATA;
 8003eec:	2306      	movs	r3, #6
 8003eee:	e016      	b.n	8003f1e <dht11_read+0xa6>
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d9e9      	bls.n	8003ed0 <dht11_read+0x58>
		}
	}
	uint8_t crc = calc_crc(response);
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff9c 	bl	8003e3e <calc_crc>
 8003f06:	4603      	mov	r3, r0
 8003f08:	76fb      	strb	r3, [r7, #27]
	if (crc != response[4])
 8003f0a:	7e3b      	ldrb	r3, [r7, #24]
 8003f0c:	7efa      	ldrb	r2, [r7, #27]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <dht11_read+0x9e>
	{
		return DHT_ERR_CRC;
 8003f12:	2307      	movs	r3, #7
 8003f14:	e003      	b.n	8003f1e <dht11_read+0xa6>
 8003f16:	697a      	ldr	r2, [r7, #20]
	}
	memcpy(data, response, DHT11_DATA_SIZE);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	601a      	str	r2, [r3, #0]
	return DHT_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <dht11_to_str>:

dht_status_t dht11_to_str(uint8_t *data, size_t size, char *humidity, char *temperature)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
	if (data == NULL)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <dht11_to_str+0x18>
	{
		return DHT_ERR_FAULT;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e026      	b.n	8003f8e <dht11_to_str+0x66>
	}
	if (size < DHT11_DATA_SIZE)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d801      	bhi.n	8003f4a <dht11_to_str+0x22>
	{
		return DHT_ERR_INVAL;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e021      	b.n	8003f8e <dht11_to_str+0x66>
	}
	if (humidity)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00c      	beq.n	8003f6a <dht11_to_str+0x42>
		snprintf(humidity, DHT11_HUMIDITY_STR_SIZE, "%02u.%01u", data[0], data[1]);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	4a0d      	ldr	r2, [pc, #52]	; (8003f98 <dht11_to_str+0x70>)
 8003f62:	2105      	movs	r1, #5
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f01d ff6d 	bl	8021e44 <sniprintf>
	if (temperature)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <dht11_to_str+0x64>
		snprintf(temperature, DHT11_TEMPERATURE_STR_SIZE, "%02u.%01u", data[2], data[3]);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3302      	adds	r3, #2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3303      	adds	r3, #3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <dht11_to_str+0x70>)
 8003f84:	2105      	movs	r1, #5
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f01d ff5c 	bl	8021e44 <sniprintf>
	return DHT_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	080257a8 	.word	0x080257a8

08003f9c <HAL_init_read_pin>:
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
	return (uint8_t)(cycles / clock_in_MHz);
}
#endif
static void HAL_init_read_pin(dht11_t *cb)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f107 020c 	add.w	r2, r7, #12
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 fc8a 	bl	80058e8 <HAL_GPIO_Init>
}
 8003fd4:	bf00      	nop
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_init_write_pin>:

static void HAL_init_write_pin(dht11_t *cb)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ffc:	2311      	movs	r3, #17
 8003ffe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW;
 8004004:	2302      	movs	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f107 020c 	add.w	r2, r7, #12
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fc68 	bl	80058e8 <HAL_GPIO_Init>
}
 8004018:	bf00      	nop
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_read_pin>:

static bool HAL_read_pin(dht11_t *cb)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin) != GPIO_PIN_RESET);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	b29b      	uxth	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f001 feef 	bl	8005e18 <HAL_GPIO_ReadPin>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_write_pin>:

static void HAL_write_pin(dht11_t *cb, bool state)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b29b      	uxth	r3, r3
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	4619      	mov	r1, r3
 8004068:	f001 feee 	bl	8005e48 <HAL_GPIO_WritePin>
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <dht11_stm32_init>:

dht_status_t dht11_stm32_init(dht11_t *cb)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af04      	add	r7, sp, #16
 800407a:	6078      	str	r0, [r7, #4]
	/* Setup callbacks */
	dht_status_t status = dht11_set_callbacks(
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <dht11_stm32_init+0x7c>)
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <dht11_stm32_init+0x80>)
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <dht11_stm32_init+0x84>)
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <dht11_stm32_init+0x88>)
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <dht11_stm32_init+0x8c>)
 800408c:	491d      	ldr	r1, [pc, #116]	; (8004104 <dht11_stm32_init+0x90>)
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fda4 	bl	8003bdc <dht11_set_callbacks>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
							HAL_init_read_pin,
							HAL_init_write_pin,
							HAL_read_pin,
							HAL_write_pin
						);
	if (status != DHT_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <dht11_stm32_init+0x2e>
	{
		return status;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	e022      	b.n	80040e8 <dht11_stm32_init+0x74>
	}
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 80040a2:	f7ff fc5f 	bl	8003964 <DWT_Init>
	cb->callbacks.init_read_pin (cb);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
	/* We are measuring of pin reading time in microseconds */
	uint32_t cycles = DWT_GetCycles();
 80040ae:	f7ff fc95 	bl	80039dc <DWT_GetCycles>
 80040b2:	60b8      	str	r0, [r7, #8]
	cb->callbacks.read_pin (cb);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
	cb->delay = DWT_Cycles_to_us(DWT_GetCycles() - cycles);
 80040bc:	f7ff fc8e 	bl	80039dc <DWT_GetCycles>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fc94 	bl	80039f4 <DWT_Cycles_to_us>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	721a      	strb	r2, [r3, #8]
	/* End of measuring */
	/* Keep line in hight state */
	cb->callbacks.init_write_pin (cb);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
	cb->callbacks.write_pin(cb, true);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	2101      	movs	r1, #1
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
	return DHT_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	0800404f 	.word	0x0800404f
 80040f4:	08004021 	.word	0x08004021
 80040f8:	08003fdd 	.word	0x08003fdd
 80040fc:	08003f9d 	.word	0x08003f9d
 8004100:	0800567d 	.word	0x0800567d
 8004104:	08003999 	.word	0x08003999

08004108 <phy_bootstrap>:
#include <stdio.h>
#define RESET_ASSERT_DELAY_US   500UL
#define BOOTUP_DELAY_US         100UL

void phy_bootstrap()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <phy_bootstrap+0x90>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <phy_bootstrap+0x90>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6313      	str	r3, [r2, #48]	; 0x30
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <phy_bootstrap+0x90>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 8004138:	f7ff fc14 	bl	8003964 <DWT_Init>

	/*Configure GPIO pin : RMII_CSR_DV_PIN */
	GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004140:	2301      	movs	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4812      	ldr	r0, [pc, #72]	; (800419c <phy_bootstrap+0x94>)
 8004152:	f001 fbc9 	bl	80058e8 <HAL_GPIO_Init>

    /* Reset PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_RESET);
 8004156:	2200      	movs	r2, #0
 8004158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800415c:	4810      	ldr	r0, [pc, #64]	; (80041a0 <phy_bootstrap+0x98>)
 800415e:	f001 fe73 	bl	8005e48 <HAL_GPIO_WritePin>
    /* Set PHY address to 0x03 */
    HAL_GPIO_WritePin(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin, GPIO_PIN_SET);
 8004162:	2201      	movs	r2, #1
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	480d      	ldr	r0, [pc, #52]	; (800419c <phy_bootstrap+0x94>)
 8004168:	f001 fe6e 	bl	8005e48 <HAL_GPIO_WritePin>
    /* Reset pin should be asserted for minimum 500 us */
    delay_us(RESET_ASSERT_DELAY_US);
 800416c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004170:	f7ff fc58 	bl	8003a24 <delay_us>
    /* Bootup PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_SET);
 8004174:	2201      	movs	r2, #1
 8004176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800417a:	4809      	ldr	r0, [pc, #36]	; (80041a0 <phy_bootstrap+0x98>)
 800417c:	f001 fe64 	bl	8005e48 <HAL_GPIO_WritePin>
    /* Bootup delay should be minimum 100 us */
    delay_us(BOOTUP_DELAY_US);
 8004180:	2064      	movs	r0, #100	; 0x64
 8004182:	f7ff fc4f 	bl	8003a24 <delay_us>

    HAL_GPIO_DeInit(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin);
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	4804      	ldr	r0, [pc, #16]	; (800419c <phy_bootstrap+0x94>)
 800418a:	f001 fd49 	bl	8005c20 <HAL_GPIO_DeInit>
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020c00 	.word	0x40020c00

080041a4 <phy_init>:

void phy_init(ETH_HandleTypeDef *heth)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	// link up/down interrupt via RMII_PHY_INT pin
	uint32_t regval = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]

    HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &regval);
 80041b0:	f107 030c 	add.w	r3, r7, #12
 80041b4:	461a      	mov	r2, r3
 80041b6:	211f      	movs	r1, #31
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fcd6 	bl	8004b6a <HAL_ETH_ReadPHYRegister>
    regval &= ~(PHY_INT_LEVEL_ACTIVE_MASK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c4:	60fb      	str	r3, [r7, #12]
    regval |= PHY_INT_LEVEL_ACTIVE_LOW;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	60fb      	str	r3, [r7, #12]
    HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, regval);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	461a      	mov	r2, r3
 80041ce:	211f      	movs	r1, #31
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fd32 	bl	8004c3a <HAL_ETH_WritePHYRegister>

    /* Read Register Configuration */
    HAL_ETH_ReadPHYRegister(heth, PHY_INTERRUPT_CONTROL, &regval);
 80041d6:	f107 030c 	add.w	r3, r7, #12
 80041da:	461a      	mov	r2, r3
 80041dc:	211b      	movs	r1, #27
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fcc3 	bl	8004b6a <HAL_ETH_ReadPHYRegister>

    regval |= (PHY_LINK_UP_INT_EN | PHY_LINK_DOWN_INT_EN);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80041ea:	60fb      	str	r3, [r7, #12]

    /* Enable Interrupt on change of link status */
    HAL_ETH_WritePHYRegister(heth, PHY_INTERRUPT_CONTROL, regval);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	211b      	movs	r1, #27
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fd21 	bl	8004c3a <HAL_ETH_WritePHYRegister>
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_ETH_Autonegotiate>:
  @endverbatim
  * @{
  */
#ifdef KSZ8021RNL_PHY_ADDRESS
HAL_StatusTypeDef HAL_ETH_Autonegotiate(ETH_HandleTypeDef *heth)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
    uint32_t tickstart = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	74fb      	strb	r3, [r7, #19]

    if (heth == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_ETH_Autonegotiate+0x1e>
    {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e080      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800421e:	f001 fa21 	bl	8005664 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

    /* Wait while link bring up */
    do
    {
        status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	461a      	mov	r2, r3
 800422a:	2101      	movs	r1, #1
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fc9c 	bl	8004b6a <HAL_ETH_ReadPHYRegister>
 8004232:	4603      	mov	r3, r0
 8004234:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_ETH_Autonegotiate+0x40>
        {
            return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e06f      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
        }

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004240:	f001 fa10 	bl	8005664 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_ETH_Autonegotiate+0x56>
        {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e064      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
        }
    } while (((phyreg & PHY_LINK_IS_UP) != PHY_LINK_IS_UP));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0e1      	beq.n	8004224 <HAL_ETH_Autonegotiate+0x24>

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 8004260:	f107 030c 	add.w	r3, r7, #12
 8004264:	461a      	mov	r2, r3
 8004266:	2100      	movs	r1, #0
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fc7e 	bl	8004b6a <HAL_ETH_ReadPHYRegister>
 800426e:	4603      	mov	r3, r0
 8004270:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_ETH_Autonegotiate+0x7c>
    {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e051      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Enable end restart Auto-Negotiation */
    phyreg |= (PHY_AUTONEGOTIATION_ENABLE | PHY_RESTART_AUTONEGOTIATION);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8004282:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, PHY_AUTONEGOTIATION_ENABLE);
 8004284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004288:	2100      	movs	r1, #0
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fcd5 	bl	8004c3a <HAL_ETH_WritePHYRegister>
 8004290:	4603      	mov	r3, r0
 8004292:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_ETH_Autonegotiate+0x9e>
    {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e040      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800429e:	f001 f9e1 	bl	8005664 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation is completed */
    do
    {
        HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	461a      	mov	r2, r3
 80042aa:	2101      	movs	r1, #1
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fc5c 	bl	8004b6a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80042b2:	f001 f9d7 	bl	8005664 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_ETH_Autonegotiate+0xc8>
        {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e02b      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
        }

    } while (((phyreg & PHY_AUTONEG_COMPLETE) != PHY_AUTONEG_COMPLETE));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0e8      	beq.n	80042a4 <HAL_ETH_Autonegotiate+0xa4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL1, &phyreg)) != HAL_OK)
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	461a      	mov	r2, r3
 80042d8:	211e      	movs	r1, #30
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fc45 	bl	8004b6a <HAL_ETH_ReadPHYRegister>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_ETH_Autonegotiate+0xea>
    {
        /* In case of write timeout */
        return  HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e01a      	b.n	8004320 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if (phyreg & PHY_FULL_DUPLEX)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_ETH_Autonegotiate+0xfe>
    {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e002      	b.n	8004304 <HAL_ETH_Autonegotiate+0x104>
    }
    else
    {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if (phyreg & PHY_SPEED_10BASE_T)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_ETH_Autonegotiate+0x116>
    {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_10M;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	e003      	b.n	800431e <HAL_ETH_Autonegotiate+0x11e>
    }
    else
    {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_100M;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800431c:	609a      	str	r2, [r3, #8]
    }

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_ETH_SetSpeedDuplex>:

HAL_StatusTypeDef HAL_ETH_SetSpeedDuplex(ETH_HandleTypeDef *heth)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]

    if (heth == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_ETH_SetSpeedDuplex+0x1a>
    {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e037      	b.n	80043b2 <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	461a      	mov	r2, r3
 8004348:	2100      	movs	r1, #0
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fc0d 	bl	8004b6a <HAL_ETH_ReadPHYRegister>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_ETH_SetSpeedDuplex+0x36>
    {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e029      	b.n	80043b2 <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    phyreg &= ~(PHY_SPEED_MASK | PHY_DUPLEX_MASK);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 8004364:	60bb      	str	r3, [r7, #8]
    /* Set MAC Speed and Duplex Mode */
    if (heth->Init.Speed == ETH_SPEED_100M)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436e:	d104      	bne.n	800437a <HAL_ETH_SetSpeedDuplex+0x52>
    {
        phyreg |= PHY_SPEED_100M;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	e001      	b.n	800437e <HAL_ETH_SetSpeedDuplex+0x56>
    }
    else
    {
        phyreg |= PHY_SPEED_10M;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	60bb      	str	r3, [r7, #8]
    }

    if (heth->Init.DuplexMode == ETH_MODE_FULLDUPLEX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004386:	d104      	bne.n	8004392 <HAL_ETH_SetSpeedDuplex+0x6a>
    {
        phyreg |= PHY_DUPLEX_FULL;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	e001      	b.n	8004396 <HAL_ETH_SetSpeedDuplex+0x6e>
    }
    else
    {
        phyreg |= PHY_DUPLEX_HALF;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	60bb      	str	r3, [r7, #8]
    }

    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, phyreg);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	461a      	mov	r2, r3
 800439a:	2100      	movs	r1, #0
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fc4c 	bl	8004c3a <HAL_ETH_WritePHYRegister>
 80043a2:	4603      	mov	r3, r0
 80043a4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_ETH_SetSpeedDuplex+0x88>
    {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg1 = 0U, phyreg = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
    uint32_t hclk = 60000000U;
 80043cc:	4b7e      	ldr	r3, [pc, #504]	; (80045c8 <HAL_ETH_Init+0x20c>)
 80043ce:	61bb      	str	r3, [r7, #24]
    uint32_t tickstart = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
    uint32_t err = ETH_SUCCESS;
 80043d4:	2300      	movs	r3, #0
 80043d6:	623b      	str	r3, [r7, #32]
    HAL_StatusTypeDef status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	74fb      	strb	r3, [r7, #19]
    HAL_StatusTypeDef retval = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77fb      	strb	r3, [r7, #31]

    /* Check the ETH peripheral state */
    if (heth == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_ETH_Init+0x2e>
    {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e0e9      	b.n	80045be <HAL_ETH_Init+0x202>
    assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
    assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
    assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
    assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

    if (heth->State == HAL_ETH_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_ETH_Init+0x48>
    {
        /* Allocate lock resource and initialize it */
        heth->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            heth->MspInitCallback = HAL_ETH_MspInit;
        }
        heth->MspInitCallback(heth);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC. */
        HAL_ETH_MspInit(heth);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f005 fd0a 	bl	8009e18 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }

    /* Enable SYSCFG Clock */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	4b70      	ldr	r3, [pc, #448]	; (80045cc <HAL_ETH_Init+0x210>)
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	4a6f      	ldr	r2, [pc, #444]	; (80045cc <HAL_ETH_Init+0x210>)
 800440e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004412:	6453      	str	r3, [r2, #68]	; 0x44
 8004414:	4b6d      	ldr	r3, [pc, #436]	; (80045cc <HAL_ETH_Init+0x210>)
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]

    /* Select MII or RMII Mode*/
    SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004420:	4b6b      	ldr	r3, [pc, #428]	; (80045d0 <HAL_ETH_Init+0x214>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a6a      	ldr	r2, [pc, #424]	; (80045d0 <HAL_ETH_Init+0x214>)
 8004426:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800442a:	6053      	str	r3, [r2, #4]
    SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800442c:	4b68      	ldr	r3, [pc, #416]	; (80045d0 <HAL_ETH_Init+0x214>)
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	4966      	ldr	r1, [pc, #408]	; (80045d0 <HAL_ETH_Init+0x214>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]

    /*-------------------------------- MAC Initialization ----------------------*/
    /* Get the ETHERNET MACMIIAR value */
    tmpreg1 = (heth->Instance)->MACMIIAR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear CSR Clock Range CR[2:0] bits */
    tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	f023 031c 	bic.w	r3, r3, #28
 8004448:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get hclk frequency value */
    hclk = HAL_RCC_GetHCLKFreq();
 800444a:	f004 fcbb 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 800444e:	61b8      	str	r0, [r7, #24]

    /* Set CR bits depending on hclk value */
    if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4a60      	ldr	r2, [pc, #384]	; (80045d4 <HAL_ETH_Init+0x218>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d908      	bls.n	800446a <HAL_ETH_Init+0xae>
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4a5f      	ldr	r2, [pc, #380]	; (80045d8 <HAL_ETH_Init+0x21c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d804      	bhi.n	800446a <HAL_ETH_Init+0xae>
    {
        /* CSR Clock Range between 20-35 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	f043 0308 	orr.w	r3, r3, #8
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	e027      	b.n	80044ba <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 35000000U) && (hclk < 60000000U))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4a5a      	ldr	r2, [pc, #360]	; (80045d8 <HAL_ETH_Init+0x21c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d908      	bls.n	8004484 <HAL_ETH_Init+0xc8>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4a54      	ldr	r2, [pc, #336]	; (80045c8 <HAL_ETH_Init+0x20c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d204      	bcs.n	8004484 <HAL_ETH_Init+0xc8>
    {
        /* CSR Clock Range between 35-60 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f043 030c 	orr.w	r3, r3, #12
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	e01a      	b.n	80044ba <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 60000000U) && (hclk < 100000000U))
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4a50      	ldr	r2, [pc, #320]	; (80045c8 <HAL_ETH_Init+0x20c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d303      	bcc.n	8004494 <HAL_ETH_Init+0xd8>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4a53      	ldr	r2, [pc, #332]	; (80045dc <HAL_ETH_Init+0x220>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d911      	bls.n	80044b8 <HAL_ETH_Init+0xfc>
    {
        /* CSR Clock Range between 60-100 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
    }
    else if((hclk >= 100000000U) && (hclk < 150000000U))
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4a51      	ldr	r2, [pc, #324]	; (80045dc <HAL_ETH_Init+0x220>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d908      	bls.n	80044ae <HAL_ETH_Init+0xf2>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	4a50      	ldr	r2, [pc, #320]	; (80045e0 <HAL_ETH_Init+0x224>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d804      	bhi.n	80044ae <HAL_ETH_Init+0xf2>
    {
        /* CSR Clock Range between 100-150 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	e005      	b.n	80044ba <HAL_ETH_Init+0xfe>
    }
    else /* ((hclk >= 150000000) && (hclk <= 183000000)) */
    {
        /* CSR Clock Range between 150-183 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	f043 0310 	orr.w	r3, r3, #16
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e000      	b.n	80044ba <HAL_ETH_Init+0xfe>
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80044b8:	bf00      	nop
    }

    /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
    (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	611a      	str	r2, [r3, #16]

    status = HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &phyreg);
 80044c2:	f107 030c 	add.w	r3, r7, #12
 80044c6:	461a      	mov	r2, r3
 80044c8:	211f      	movs	r1, #31
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fb4d 	bl	8004b6a <HAL_ETH_ReadPHYRegister>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_ETH_Init+0x122>
    {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06f      	b.n	80045be <HAL_ETH_Init+0x202>
    /* Set 25MHz clock mode to enable 50 MHz clock on REF_CLK pin
     * Note: After default bootstrap KSZ8081RND has 50MHz clock mode set
     *       thus REF_CLK pin is not connected and MAC module is
     *       not clocking. So bit ETH_DMABMR_SR in DMABMR register
     *       of MAC subsystem will never cleared */
    phyreg &= ~(PHY_REF_CLOCK_SELECT_MASK);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e4:	60fb      	str	r3, [r7, #12]
    phyreg |= (PHY_REF_CLOCK_SELECT_25MHZ);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, phyreg);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	461a      	mov	r2, r3
 80044f2:	211f      	movs	r1, #31
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fba0 	bl	8004c3a <HAL_ETH_WritePHYRegister>
 80044fa:	4603      	mov	r3, r0
 80044fc:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_ETH_Init+0x14c>
    {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e05a      	b.n	80045be <HAL_ETH_Init+0x202>
    }

    /* Ethernet Software reset */
    /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
    /* After reset all the registers holds their respective reset values */
    (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004520:	f001 f8a0 	bl	8005664 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

    /* Wait for software reset */
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004526:	e011      	b.n	800454c <HAL_ETH_Init+0x190>
    {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004528:	f001 f89c 	bl	8005664 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004536:	d909      	bls.n	800454c <HAL_ETH_Init+0x190>
        {
            heth->State = HAL_ETH_STATE_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2203      	movs	r2, #3
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(heth);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
                not available, please check your external PHY or the IO configuration */
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e038      	b.n	80045be <HAL_ETH_Init+0x202>
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e4      	bne.n	8004528 <HAL_ETH_Init+0x16c>
        }
    }

    /*-------------------- PHY initialization and configuration ----------------*/
    if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00f      	beq.n	8004586 <HAL_ETH_Init+0x1ca>
    {
        status = HAL_ETH_Autonegotiate(heth);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe4a 	bl	8004200 <HAL_ETH_Autonegotiate>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_ETH_Init+0x1c4>
        {
            err = ETH_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 800457e:	e011      	b.n	80045a4 <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e00e      	b.n	80045a4 <HAL_ETH_Init+0x1e8>
    {
        /* Check parameters */
        assert_param(IS_ETH_SPEED(heth->Init.Speed));
        assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

        status = HAL_ETH_SetSpeedDuplex(heth);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fece 	bl	8004328 <HAL_ETH_SetSpeedDuplex>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d004      	beq.n	80045a0 <HAL_ETH_Init+0x1e4>
        {
            err = ETH_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 800459e:	e001      	b.n	80045a4 <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	77fb      	strb	r3, [r7, #31]
        }
    }

init_final_stage:
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fd06 	bl	8004fb8 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Return function status */
    return retval;
 80045bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	03938700 	.word	0x03938700
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40013800 	.word	0x40013800
 80045d4:	01312cff 	.word	0x01312cff
 80045d8:	02160ebf 	.word	0x02160ebf
 80045dc:	05f5e0ff 	.word	0x05f5e0ff
 80045e0:	08f0d17f 	.word	0x08f0d17f

080045e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_ETH_DMATxDescListInit+0x20>
 8004600:	2302      	movs	r3, #2
 8004602:	e052      	b.n	80046aa <HAL_ETH_DMATxDescListInit+0xc6>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e030      	b.n	8004682 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	4413      	add	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004630:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004638:	fb02 f303 	mul.w	r3, r2, r3
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	461a      	mov	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	d208      	bcs.n	8004676 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3301      	adds	r3, #1
 8004668:	015b      	lsls	r3, r3, #5
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	461a      	mov	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	60da      	str	r2, [r3, #12]
 8004674:	e002      	b.n	800467c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d3ca      	bcc.n	8004620 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004694:	3310      	adds	r3, #16
 8004696:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b087      	sub	sp, #28
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_ETH_DMARxDescListInit+0x20>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e056      	b.n	8004784 <HAL_ETH_DMARxDescListInit+0xce>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e034      	b.n	800475c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	015b      	lsls	r3, r3, #5
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4413      	add	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004702:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800470a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	461a      	mov	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	3b01      	subs	r3, #1
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	429a      	cmp	r2, r3
 800473c:	d208      	bcs.n	8004750 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3301      	adds	r3, #1
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	4413      	add	r3, r2
 8004748:	461a      	mov	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	e002      	b.n	8004756 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3301      	adds	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d3c6      	bcc.n	80046f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	330c      	adds	r3, #12
 8004770:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_ETH_TransmitFrame+0x24>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0cd      	b.n	8004950 <HAL_ETH_TransmitFrame+0x1c0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80047da:	2301      	movs	r3, #1
 80047dc:	e0b8      	b.n	8004950 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da09      	bge.n	80047fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2212      	movs	r2, #18
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0a9      	b.n	8004950 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004802:	4293      	cmp	r3, r2
 8004804:	d915      	bls.n	8004832 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_ETH_TransmitFrame+0x1cc>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_ETH_TransmitFrame+0x1cc>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e001      	b.n	8004836 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004832:	2301      	movs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d11c      	bne.n	8004876 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800484a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004856:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004866:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c
 8004874:	e04b      	b.n	800490e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e044      	b.n	8004906 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800488a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048aa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d116      	bne.n	80048e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	4a25      	ldr	r2, [pc, #148]	; (8004960 <HAL_ETH_TransmitFrame+0x1d0>)
 80048ca:	fb02 f203 	mul.w	r2, r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80048d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80048e2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80048f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3301      	adds	r3, #1
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3b6      	bcc.n	800487c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004916:	3314      	adds	r3, #20
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492a:	3314      	adds	r3, #20
 800492c:	2204      	movs	r2, #4
 800492e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	3304      	adds	r3, #4
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	ac02b00b 	.word	0xac02b00b
 8004960:	fffffa0c 	.word	0xfffffa0c

08004964 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800497a:	2302      	movs	r3, #2
 800497c:	e074      	b.n	8004a68 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800498e:	e05a      	b.n	8004a46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a4:	d10d      	bne.n	80049c2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
 80049c0:	e041      	b.n	8004a46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10b      	bne.n	80049e8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
 80049e6:	e02e      	b.n	8004a46 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d103      	bne.n	8004a0a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004a16:	1f1a      	subs	r2, r3, #4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e010      	b.n	8004a68 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db02      	blt.n	8004a56 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d99c      	bls.n	8004990 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a84:	3314      	adds	r3, #20
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d112      	bne.n	8004ab6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f005 fa6f 	bl	8009f74 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9e:	3314      	adds	r3, #20
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab4:	e01b      	b.n	8004aee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abe:	3314      	adds	r3, #20
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d111      	bne.n	8004aee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f839 	bl	8004b42 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad8:	3314      	adds	r3, #20
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af6:	3314      	adds	r3, #20
 8004af8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004afc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b06:	3314      	adds	r3, #20
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b12:	d112      	bne.n	8004b3a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f81e 	bl	8004b56 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b22:	3314      	adds	r3, #20
 8004b24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b28:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	460b      	mov	r3, r1
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b82      	cmp	r3, #130	; 0x82
 8004b8a:	d101      	bne.n	8004b90 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e050      	b.n	8004c32 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2282      	movs	r2, #130	; 0x82
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 031c 	and.w	r3, r3, #28
 8004ba6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8a1b      	ldrh	r3, [r3, #16]
 8004bac:	02db      	lsls	r3, r3, #11
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0302 	bic.w	r3, r3, #2
 8004bca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bdc:	f000 fd42 	bl	8005664 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004be2:	e015      	b.n	8004c10 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004be4:	f000 fd3e 	bl	8005664 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d309      	bcc.n	8004c08 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e014      	b.n	8004c32 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e4      	bne.n	8004be4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	460b      	mov	r3, r1
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b42      	cmp	r3, #66	; 0x42
 8004c5a:	d101      	bne.n	8004c60 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e04e      	b.n	8004cfe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2242      	movs	r2, #66	; 0x42
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 031c 	and.w	r3, r3, #28
 8004c76:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8a1b      	ldrh	r3, [r3, #16]
 8004c7c:	02db      	lsls	r3, r3, #11
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004c86:	897b      	ldrh	r3, [r7, #10]
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cb6:	f000 fcd5 	bl	8005664 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cbc:	e015      	b.n	8004cea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004cbe:	f000 fcd1 	bl	8005664 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d309      	bcc.n	8004ce2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e00d      	b.n	8004cfe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e4      	bne.n	8004cbe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_ETH_Start+0x16>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e01f      	b.n	8004d5c <HAL_ETH_Start+0x56>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb45 	bl	80053bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb7c 	bl	8005430 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fc13 	bl	8005564 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fbb0 	bl	80054a4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fbdd 	bl	8005504 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_ETH_Stop+0x16>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e01f      	b.n	8004dba <HAL_ETH_Stop+0x56>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fba2 	bl	80054d4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fbcf 	bl	8005534 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fb67 	bl	800546a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fbe1 	bl	8005564 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fb27 	bl	80053f6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_ETH_ConfigMAC+0x1c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0e4      	b.n	8004faa <HAL_ETH_ConfigMAC+0x1e6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80b1 	beq.w	8004f5a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4b6c      	ldr	r3, [pc, #432]	; (8004fb4 <HAL_ETH_ConfigMAC+0x1f0>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004e10:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004e16:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004e1c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004e22:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004e28:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004e2e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004e34:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004e3a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004e40:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004e46:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004e4c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004e52:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f000 fc06 	bl	800567c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004e80:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004e86:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004e8c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004e92:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004e98:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004e9e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004eaa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004eac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f000 fbe0 	bl	800567c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ecc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ed6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004ef4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004efa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004f00:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004f06:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004f0c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f24:	2001      	movs	r0, #1
 8004f26:	f000 fba9 	bl	800567c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 fb96 	bl	800567c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	61da      	str	r2, [r3, #28]
 8004f58:	e01e      	b.n	8004f98 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004f68:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f000 fb76 	bl	800567c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	ff20810f 	.word	0xff20810f

08004fb8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0b0      	sub	sp, #192	; 0xc0
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005002:	663b      	str	r3, [r7, #96]	; 0x60
 8005004:	e001      	b.n	800500a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005006:	2300      	movs	r3, #0
 8005008:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800500a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800500e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005010:	2300      	movs	r3, #0
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005014:	2300      	movs	r3, #0
 8005016:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005018:	2300      	movs	r3, #0
 800501a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005020:	2300      	movs	r3, #0
 8005022:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005046:	2300      	movs	r3, #0
 8005048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800505e:	2300      	movs	r3, #0
 8005060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800508c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005090:	4bac      	ldr	r3, [pc, #688]	; (8005344 <ETH_MACDMAConfig+0x38c>)
 8005092:	4013      	ands	r3, r2
 8005094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005098:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800509c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80050a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80050a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80050a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80050aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80050ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80050ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80050b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80050b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80050b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80050ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80050bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80050be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80050c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80050c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80050c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80050c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80050ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80050cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80050ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f000 fac5 	bl	800567c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80050fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80050fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005100:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005104:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800510a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800510c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005110:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005116:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800511c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005120:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005128:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800512a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005136:	2001      	movs	r0, #1
 8005138:	f000 faa0 	bl	800567c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005144:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800514e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005158:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005168:	f64f 7341 	movw	r3, #65345	; 0xff41
 800516c:	4013      	ands	r3, r2
 800516e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005176:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800517c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800517e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005182:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005188:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800518a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800518e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005194:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005196:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80051b4:	2001      	movs	r0, #1
 80051b6:	f000 fa61 	bl	800567c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80051c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80051c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80051de:	2001      	movs	r0, #1
 80051e0:	f000 fa4c 	bl	800567c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80051f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80051fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005200:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005212:	2304      	movs	r3, #4
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800521c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005220:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005232:	2300      	movs	r3, #0
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005236:	2300      	movs	r3, #0
 8005238:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005242:	3318      	adds	r3, #24
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800524a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800524e:	4b3e      	ldr	r3, [pc, #248]	; (8005348 <ETH_MACDMAConfig+0x390>)
 8005250:	4013      	ands	r3, r2
 8005252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005256:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005258:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800525a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800525c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800525e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005260:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005262:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005264:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005266:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005268:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800526a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800526c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800526e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005272:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005276:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528a:	3318      	adds	r3, #24
 800528c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005290:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529a:	3318      	adds	r3, #24
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f000 f9ea 	bl	800567c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b0:	3318      	adds	r3, #24
 80052b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80052c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80052c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80052c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80052ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80052ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80052d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80052d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80052f0:	2001      	movs	r0, #1
 80052f2:	f000 f9c3 	bl	800567c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005302:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d10f      	bne.n	800532c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005314:	331c      	adds	r3, #28
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005328:	331c      	adds	r3, #28
 800532a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	461a      	mov	r2, r3
 8005332:	2100      	movs	r1, #0
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f809 	bl	800534c <ETH_MACAddressConfig>
}
 800533a:	bf00      	nop
 800533c:	37c0      	adds	r7, #192	; 0xc0
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	ff20810f 	.word	0xff20810f
 8005348:	f8de3f23 	.word	0xf8de3f23

0800534c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3305      	adds	r3, #5
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	3204      	adds	r2, #4
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <ETH_MACAddressConfig+0x68>)
 800536e:	4413      	add	r3, r2
 8005370:	461a      	mov	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3303      	adds	r3, #3
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	061a      	lsls	r2, r3, #24
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3302      	adds	r3, #2
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3301      	adds	r3, #1
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	4313      	orrs	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <ETH_MACAddressConfig+0x6c>)
 800539e:	4413      	add	r3, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6013      	str	r3, [r2, #0]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40028040 	.word	0x40028040
 80053b8:	40028044 	.word	0x40028044

080053bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0208 	orr.w	r2, r2, #8
 80053d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80053e0:	2001      	movs	r0, #1
 80053e2:	f000 f8e9 	bl	80055b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0208 	bic.w	r2, r2, #8
 8005410:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800541a:	2001      	movs	r0, #1
 800541c:	f000 f8cc 	bl	80055b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0204 	orr.w	r2, r2, #4
 800544a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005454:	2001      	movs	r0, #1
 8005456:	f000 f8af 	bl	80055b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	601a      	str	r2, [r3, #0]
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0204 	bic.w	r2, r2, #4
 8005484:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800548e:	2001      	movs	r0, #1
 8005490:	f000 f892 	bl	80055b8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	3318      	adds	r3, #24
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c4:	3318      	adds	r3, #24
 80054c6:	601a      	str	r2, [r3, #0]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e4:	3318      	adds	r3, #24
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f4:	3318      	adds	r3, #24
 80054f6:	601a      	str	r2, [r3, #0]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005514:	3318      	adds	r3, #24
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0202 	orr.w	r2, r2, #2
 8005520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005524:	3318      	adds	r3, #24
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005544:	3318      	adds	r3, #24
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0202 	bic.w	r2, r2, #2
 8005550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005554:	3318      	adds	r3, #24
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005578:	3318      	adds	r3, #24
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005588:	3318      	adds	r3, #24
 800558a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005594:	3318      	adds	r3, #24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800559a:	2001      	movs	r0, #1
 800559c:	f000 f80c 	bl	80055b8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055aa:	3318      	adds	r3, #24
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <ETH_Delay+0x38>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <ETH_Delay+0x3c>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	0a5b      	lsrs	r3, r3, #9
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80055d4:	bf00      	nop
  } 
  while (Delay --);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	60fa      	str	r2, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f9      	bne.n	80055d4 <ETH_Delay+0x1c>
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000010 	.word	0x20000010
 80055f4:	10624dd3 	.word	0x10624dd3

080055f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <HAL_Init+0x40>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a0d      	ldr	r2, [pc, #52]	; (8005638 <HAL_Init+0x40>)
 8005602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_Init+0x40>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <HAL_Init+0x40>)
 800560e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005614:	4b08      	ldr	r3, [pc, #32]	; (8005638 <HAL_Init+0x40>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a07      	ldr	r2, [pc, #28]	; (8005638 <HAL_Init+0x40>)
 800561a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005620:	2003      	movs	r0, #3
 8005622:	f000 f8fc 	bl	800581e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005626:	2000      	movs	r0, #0
 8005628:	f7fd f8ee 	bl	8002808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800562c:	f7fd f828 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023c00 	.word	0x40023c00

0800563c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_IncTick+0x20>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_IncTick+0x24>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4413      	add	r3, r2
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <HAL_IncTick+0x24>)
 800564e:	6013      	str	r3, [r2, #0]
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000004c 	.word	0x2000004c
 8005660:	20014614 	.word	0x20014614

08005664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return uwTick;
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <HAL_GetTick+0x14>)
 800566a:	681b      	ldr	r3, [r3, #0]
}
 800566c:	4618      	mov	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20014614 	.word	0x20014614

0800567c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005684:	f7ff ffee 	bl	8005664 <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005694:	d005      	beq.n	80056a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <HAL_Delay+0x44>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056a2:	bf00      	nop
 80056a4:	f7ff ffde 	bl	8005664 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d8f7      	bhi.n	80056a4 <HAL_Delay+0x28>
  {
  }
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2000004c 	.word	0x2000004c

080056c4 <__NVIC_SetPriorityGrouping>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <__NVIC_SetPriorityGrouping+0x44>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e0:	4013      	ands	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056f6:	4a04      	ldr	r2, [pc, #16]	; (8005708 <__NVIC_SetPriorityGrouping+0x44>)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	60d3      	str	r3, [r2, #12]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__NVIC_GetPriorityGrouping+0x18>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 0307 	and.w	r3, r3, #7
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00

08005728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005736:	2b00      	cmp	r3, #0
 8005738:	db0b      	blt.n	8005752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	f003 021f 	and.w	r2, r3, #31
 8005740:	4907      	ldr	r1, [pc, #28]	; (8005760 <__NVIC_EnableIRQ+0x38>)
 8005742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2001      	movs	r0, #1
 800574a:	fa00 f202 	lsl.w	r2, r0, r2
 800574e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e100 	.word	0xe000e100

08005764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	; (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f1c3 0307 	rsb	r3, r3, #7
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	bf28      	it	cs
 80057d6:	2304      	movcs	r3, #4
 80057d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3304      	adds	r3, #4
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d902      	bls.n	80057e8 <NVIC_EncodePriority+0x30>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3b03      	subs	r3, #3
 80057e6:	e000      	b.n	80057ea <NVIC_EncodePriority+0x32>
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	401a      	ands	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43d9      	mvns	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005810:	4313      	orrs	r3, r2
         );
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff4c 	bl	80056c4 <__NVIC_SetPriorityGrouping>
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005846:	f7ff ff61 	bl	800570c <__NVIC_GetPriorityGrouping>
 800584a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	6978      	ldr	r0, [r7, #20]
 8005852:	f7ff ffb1 	bl	80057b8 <NVIC_EncodePriority>
 8005856:	4602      	mov	r2, r0
 8005858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff ff80 	bl	8005764 <__NVIC_SetPriority>
}
 8005864:	bf00      	nop
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff ff54 	bl	8005728 <__NVIC_EnableIRQ>
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d004      	beq.n	80058a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2280      	movs	r2, #128	; 0x80
 80058a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00c      	b.n	80058c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2205      	movs	r2, #5
 80058aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058da:	b2db      	uxtb	r3, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b089      	sub	sp, #36	; 0x24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e16b      	b.n	8005bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005904:	2201      	movs	r2, #1
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4013      	ands	r3, r2
 8005916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	f040 815a 	bne.w	8005bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d005      	beq.n	800593a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005936:	2b02      	cmp	r3, #2
 8005938:	d130      	bne.n	800599c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005970:	2201      	movs	r2, #1
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 0201 	and.w	r2, r3, #1
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d017      	beq.n	80059d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	2203      	movs	r2, #3
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d123      	bne.n	8005a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	08da      	lsrs	r2, r3, #3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3208      	adds	r2, #8
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	220f      	movs	r2, #15
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	08da      	lsrs	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3208      	adds	r2, #8
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	2203      	movs	r2, #3
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4013      	ands	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0203 	and.w	r2, r3, #3
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80b4 	beq.w	8005bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <HAL_GPIO_Init+0x30c>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	4a5f      	ldr	r2, [pc, #380]	; (8005bf4 <HAL_GPIO_Init+0x30c>)
 8005a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a7e:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <HAL_GPIO_Init+0x30c>)
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a8a:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <HAL_GPIO_Init+0x310>)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	089b      	lsrs	r3, r3, #2
 8005a90:	3302      	adds	r3, #2
 8005a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a52      	ldr	r2, [pc, #328]	; (8005bfc <HAL_GPIO_Init+0x314>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d02b      	beq.n	8005b0e <HAL_GPIO_Init+0x226>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a51      	ldr	r2, [pc, #324]	; (8005c00 <HAL_GPIO_Init+0x318>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d025      	beq.n	8005b0a <HAL_GPIO_Init+0x222>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a50      	ldr	r2, [pc, #320]	; (8005c04 <HAL_GPIO_Init+0x31c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01f      	beq.n	8005b06 <HAL_GPIO_Init+0x21e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a4f      	ldr	r2, [pc, #316]	; (8005c08 <HAL_GPIO_Init+0x320>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d019      	beq.n	8005b02 <HAL_GPIO_Init+0x21a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a4e      	ldr	r2, [pc, #312]	; (8005c0c <HAL_GPIO_Init+0x324>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_GPIO_Init+0x216>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a4d      	ldr	r2, [pc, #308]	; (8005c10 <HAL_GPIO_Init+0x328>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00d      	beq.n	8005afa <HAL_GPIO_Init+0x212>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a4c      	ldr	r2, [pc, #304]	; (8005c14 <HAL_GPIO_Init+0x32c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <HAL_GPIO_Init+0x20e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a4b      	ldr	r2, [pc, #300]	; (8005c18 <HAL_GPIO_Init+0x330>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d101      	bne.n	8005af2 <HAL_GPIO_Init+0x20a>
 8005aee:	2307      	movs	r3, #7
 8005af0:	e00e      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005af2:	2308      	movs	r3, #8
 8005af4:	e00c      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005af6:	2306      	movs	r3, #6
 8005af8:	e00a      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005afa:	2305      	movs	r3, #5
 8005afc:	e008      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005afe:	2304      	movs	r3, #4
 8005b00:	e006      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b02:	2303      	movs	r3, #3
 8005b04:	e004      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e002      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <HAL_GPIO_Init+0x228>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	f002 0203 	and.w	r2, r2, #3
 8005b16:	0092      	lsls	r2, r2, #2
 8005b18:	4093      	lsls	r3, r2
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b20:	4935      	ldr	r1, [pc, #212]	; (8005bf8 <HAL_GPIO_Init+0x310>)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	3302      	adds	r3, #2
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b2e:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b52:	4a32      	ldr	r2, [pc, #200]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b7c:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bd0:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <HAL_GPIO_Init+0x334>)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	f67f ae90 	bls.w	8005904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	40020000 	.word	0x40020000
 8005c00:	40020400 	.word	0x40020400
 8005c04:	40020800 	.word	0x40020800
 8005c08:	40020c00 	.word	0x40020c00
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40021400 	.word	0x40021400
 8005c14:	40021800 	.word	0x40021800
 8005c18:	40021c00 	.word	0x40021c00
 8005c1c:	40013c00 	.word	0x40013c00

08005c20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e0cd      	b.n	8005dd8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	f040 80bd 	bne.w	8005dd2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005c58:	4a65      	ldr	r2, [pc, #404]	; (8005df0 <HAL_GPIO_DeInit+0x1d0>)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	089b      	lsrs	r3, r3, #2
 8005c5e:	3302      	adds	r3, #2
 8005c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c64:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	220f      	movs	r2, #15
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a5d      	ldr	r2, [pc, #372]	; (8005df4 <HAL_GPIO_DeInit+0x1d4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02b      	beq.n	8005cda <HAL_GPIO_DeInit+0xba>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a5c      	ldr	r2, [pc, #368]	; (8005df8 <HAL_GPIO_DeInit+0x1d8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d025      	beq.n	8005cd6 <HAL_GPIO_DeInit+0xb6>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a5b      	ldr	r2, [pc, #364]	; (8005dfc <HAL_GPIO_DeInit+0x1dc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01f      	beq.n	8005cd2 <HAL_GPIO_DeInit+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a5a      	ldr	r2, [pc, #360]	; (8005e00 <HAL_GPIO_DeInit+0x1e0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d019      	beq.n	8005cce <HAL_GPIO_DeInit+0xae>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a59      	ldr	r2, [pc, #356]	; (8005e04 <HAL_GPIO_DeInit+0x1e4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_GPIO_DeInit+0xaa>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a58      	ldr	r2, [pc, #352]	; (8005e08 <HAL_GPIO_DeInit+0x1e8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00d      	beq.n	8005cc6 <HAL_GPIO_DeInit+0xa6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a57      	ldr	r2, [pc, #348]	; (8005e0c <HAL_GPIO_DeInit+0x1ec>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <HAL_GPIO_DeInit+0xa2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a56      	ldr	r2, [pc, #344]	; (8005e10 <HAL_GPIO_DeInit+0x1f0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <HAL_GPIO_DeInit+0x9e>
 8005cba:	2307      	movs	r3, #7
 8005cbc:	e00e      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	e00c      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cc2:	2306      	movs	r3, #6
 8005cc4:	e00a      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cc6:	2305      	movs	r3, #5
 8005cc8:	e008      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cca:	2304      	movs	r3, #4
 8005ccc:	e006      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e004      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e002      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_GPIO_DeInit+0xbc>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	f002 0203 	and.w	r2, r2, #3
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	4093      	lsls	r3, r2
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d132      	bne.n	8005d52 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	4947      	ldr	r1, [pc, #284]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005cfa:	4b46      	ldr	r3, [pc, #280]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	4944      	ldr	r1, [pc, #272]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	4940      	ldr	r1, [pc, #256]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d16:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	493d      	ldr	r1, [pc, #244]	; (8005e14 <HAL_GPIO_DeInit+0x1f4>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	220f      	movs	r2, #15
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005d34:	4a2e      	ldr	r2, [pc, #184]	; (8005df0 <HAL_GPIO_DeInit+0x1d0>)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	43da      	mvns	r2, r3
 8005d44:	482a      	ldr	r0, [pc, #168]	; (8005df0 <HAL_GPIO_DeInit+0x1d0>)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	089b      	lsrs	r3, r3, #2
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	2103      	movs	r1, #3
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	43db      	mvns	r3, r3
 8005d62:	401a      	ands	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	08da      	lsrs	r2, r3, #3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3208      	adds	r2, #8
 8005d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	220f      	movs	r2, #15
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	08d2      	lsrs	r2, r2, #3
 8005d88:	4019      	ands	r1, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3208      	adds	r2, #8
 8005d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	2103      	movs	r1, #3
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	2101      	movs	r1, #1
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	401a      	ands	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	2103      	movs	r1, #3
 8005dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	401a      	ands	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	f67f af2e 	bls.w	8005c3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40013800 	.word	0x40013800
 8005df4:	40020000 	.word	0x40020000
 8005df8:	40020400 	.word	0x40020400
 8005dfc:	40020800 	.word	0x40020800
 8005e00:	40020c00 	.word	0x40020c00
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40021400 	.word	0x40021400
 8005e0c:	40021800 	.word	0x40021800
 8005e10:	40021c00 	.word	0x40021c00
 8005e14:	40013c00 	.word	0x40013c00

08005e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	e001      	b.n	8005e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
 8005e54:	4613      	mov	r3, r2
 8005e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e58:	787b      	ldrb	r3, [r7, #1]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e64:	e003      	b.n	8005e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e66:	887b      	ldrh	r3, [r7, #2]
 8005e68:	041a      	lsls	r2, r3, #16
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	619a      	str	r2, [r3, #24]
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4013      	ands	r3, r2
 8005e92:	041a      	lsls	r2, r3, #16
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	43d9      	mvns	r1, r3
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	400b      	ands	r3, r1
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	619a      	str	r2, [r3, #24]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d006      	beq.n	8005ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ec6:	4a05      	ldr	r2, [pc, #20]	; (8005edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb fede 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40013c00 	.word	0x40013c00

08005ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e12b      	b.n	800614a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fc fbe6 	bl	80026d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2224      	movs	r2, #36	; 0x24
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0201 	bic.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f44:	f002 ff4a 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 8005f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4a81      	ldr	r2, [pc, #516]	; (8006154 <HAL_I2C_Init+0x274>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d807      	bhi.n	8005f64 <HAL_I2C_Init+0x84>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a80      	ldr	r2, [pc, #512]	; (8006158 <HAL_I2C_Init+0x278>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	bf94      	ite	ls
 8005f5c:	2301      	movls	r3, #1
 8005f5e:	2300      	movhi	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e006      	b.n	8005f72 <HAL_I2C_Init+0x92>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a7d      	ldr	r2, [pc, #500]	; (800615c <HAL_I2C_Init+0x27c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	bf94      	ite	ls
 8005f6c:	2301      	movls	r3, #1
 8005f6e:	2300      	movhi	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0e7      	b.n	800614a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a78      	ldr	r2, [pc, #480]	; (8006160 <HAL_I2C_Init+0x280>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	0c9b      	lsrs	r3, r3, #18
 8005f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <HAL_I2C_Init+0x274>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d802      	bhi.n	8005fb4 <HAL_I2C_Init+0xd4>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	e009      	b.n	8005fc8 <HAL_I2C_Init+0xe8>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	4a69      	ldr	r2, [pc, #420]	; (8006164 <HAL_I2C_Init+0x284>)
 8005fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc4:	099b      	lsrs	r3, r3, #6
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	495c      	ldr	r1, [pc, #368]	; (8006154 <HAL_I2C_Init+0x274>)
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	d819      	bhi.n	800601c <HAL_I2C_Init+0x13c>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1e59      	subs	r1, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ffc:	400b      	ands	r3, r1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_I2C_Init+0x138>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1e59      	subs	r1, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006010:	3301      	adds	r3, #1
 8006012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006016:	e051      	b.n	80060bc <HAL_I2C_Init+0x1dc>
 8006018:	2304      	movs	r3, #4
 800601a:	e04f      	b.n	80060bc <HAL_I2C_Init+0x1dc>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d111      	bne.n	8006048 <HAL_I2C_Init+0x168>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	1e58      	subs	r0, r3, #1
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6859      	ldr	r1, [r3, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	440b      	add	r3, r1
 8006032:	fbb0 f3f3 	udiv	r3, r0, r3
 8006036:	3301      	adds	r3, #1
 8006038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e012      	b.n	800606e <HAL_I2C_Init+0x18e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1e58      	subs	r0, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6859      	ldr	r1, [r3, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	0099      	lsls	r1, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	fbb0 f3f3 	udiv	r3, r0, r3
 800605e:	3301      	adds	r3, #1
 8006060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Init+0x196>
 8006072:	2301      	movs	r3, #1
 8006074:	e022      	b.n	80060bc <HAL_I2C_Init+0x1dc>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10e      	bne.n	800609c <HAL_I2C_Init+0x1bc>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1e58      	subs	r0, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6859      	ldr	r1, [r3, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	440b      	add	r3, r1
 800608c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006090:	3301      	adds	r3, #1
 8006092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	e00f      	b.n	80060bc <HAL_I2C_Init+0x1dc>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1e58      	subs	r0, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	0099      	lsls	r1, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b2:	3301      	adds	r3, #1
 80060b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	6809      	ldr	r1, [r1, #0]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6911      	ldr	r1, [r2, #16]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68d2      	ldr	r2, [r2, #12]
 80060f6:	4311      	orrs	r1, r2
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	000186a0 	.word	0x000186a0
 8006158:	001e847f 	.word	0x001e847f
 800615c:	003d08ff 	.word	0x003d08ff
 8006160:	431bde83 	.word	0x431bde83
 8006164:	10624dd3 	.word	0x10624dd3

08006168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	461a      	mov	r2, r3
 8006174:	460b      	mov	r3, r1
 8006176:	817b      	strh	r3, [r7, #10]
 8006178:	4613      	mov	r3, r2
 800617a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800617c:	f7ff fa72 	bl	8005664 <HAL_GetTick>
 8006180:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b20      	cmp	r3, #32
 800618c:	f040 80e0 	bne.w	8006350 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2319      	movs	r3, #25
 8006196:	2201      	movs	r2, #1
 8006198:	4970      	ldr	r1, [pc, #448]	; (800635c <HAL_I2C_Master_Transmit+0x1f4>)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f001 ffa8 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0d3      	b.n	8006352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_I2C_Master_Transmit+0x50>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e0cc      	b.n	8006352 <HAL_I2C_Master_Transmit+0x1ea>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d007      	beq.n	80061de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2221      	movs	r2, #33	; 0x21
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2210      	movs	r2, #16
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	893a      	ldrh	r2, [r7, #8]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a50      	ldr	r2, [pc, #320]	; (8006360 <HAL_I2C_Master_Transmit+0x1f8>)
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006220:	8979      	ldrh	r1, [r7, #10]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	6a3a      	ldr	r2, [r7, #32]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f001 fd6a 	bl	8007d00 <I2C_MasterRequestWrite>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e08d      	b.n	8006352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800624c:	e066      	b.n	800631c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	6a39      	ldr	r1, [r7, #32]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f002 f822 	bl	800829c <I2C_WaitOnTXEFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00d      	beq.n	800627a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b04      	cmp	r3, #4
 8006264:	d107      	bne.n	8006276 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e06b      	b.n	8006352 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d11b      	bne.n	80062f0 <HAL_I2C_Master_Transmit+0x188>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	6a39      	ldr	r1, [r7, #32]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f002 f812 	bl	800831e <I2C_WaitOnBTFFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	2b04      	cmp	r3, #4
 8006306:	d107      	bne.n	8006318 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006316:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e01a      	b.n	8006352 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	2b00      	cmp	r3, #0
 8006322:	d194      	bne.n	800624e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	00100002 	.word	0x00100002
 8006360:	ffff0000 	.word	0xffff0000

08006364 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08c      	sub	sp, #48	; 0x30
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	461a      	mov	r2, r3
 8006370:	460b      	mov	r3, r1
 8006372:	817b      	strh	r3, [r7, #10]
 8006374:	4613      	mov	r3, r2
 8006376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006378:	f7ff f974 	bl	8005664 <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b20      	cmp	r3, #32
 8006388:	f040 820b 	bne.w	80067a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2319      	movs	r3, #25
 8006392:	2201      	movs	r2, #1
 8006394:	497c      	ldr	r1, [pc, #496]	; (8006588 <HAL_I2C_Master_Receive+0x224>)
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f001 feaa 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	e1fe      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_I2C_Master_Receive+0x50>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e1f7      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d007      	beq.n	80063da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2222      	movs	r2, #34	; 0x22
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2210      	movs	r2, #16
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	893a      	ldrh	r2, [r7, #8]
 800640a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a5c      	ldr	r2, [pc, #368]	; (800658c <HAL_I2C_Master_Receive+0x228>)
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800641c:	8979      	ldrh	r1, [r7, #10]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f001 fcee 	bl	8007e04 <I2C_MasterRequestRead>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e1b8      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d113      	bne.n	8006462 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e18c      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006466:	2b01      	cmp	r3, #1
 8006468:	d11b      	bne.n	80064a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e16c      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d11b      	bne.n	80064e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ca:	2300      	movs	r3, #0
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	e14c      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006508:	e138      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	2b03      	cmp	r3, #3
 8006510:	f200 80f1 	bhi.w	80066f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	2b01      	cmp	r3, #1
 800651a:	d123      	bne.n	8006564 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800651c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 ff6f 	bl	8008404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e139      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006562:	e10b      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	2b02      	cmp	r3, #2
 800656a:	d14e      	bne.n	800660a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2200      	movs	r2, #0
 8006574:	4906      	ldr	r1, [pc, #24]	; (8006590 <HAL_I2C_Master_Receive+0x22c>)
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f001 fdba 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e10e      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
 8006586:	bf00      	nop
 8006588:	00100002 	.word	0x00100002
 800658c:	ffff0000 	.word	0xffff0000
 8006590:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006608:	e0b8      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	2200      	movs	r2, #0
 8006612:	4966      	ldr	r1, [pc, #408]	; (80067ac <HAL_I2C_Master_Receive+0x448>)
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 fd6b 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0bf      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	494f      	ldr	r1, [pc, #316]	; (80067ac <HAL_I2C_Master_Receive+0x448>)
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f001 fd3d 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e091      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f4:	e042      	b.n	800677c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f001 fe82 	bl	8008404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e04c      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d118      	bne.n	800677c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f aec2 	bne.w	800650a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3728      	adds	r7, #40	; 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	00010004 	.word	0x00010004

080067b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d003      	beq.n	80067e8 <HAL_I2C_EV_IRQHandler+0x38>
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	f040 80bd 	bne.w	8006962 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <HAL_I2C_EV_IRQHandler+0x6e>
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006808:	d003      	beq.n	8006812 <HAL_I2C_EV_IRQHandler+0x62>
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006810:	d101      	bne.n	8006816 <HAL_I2C_EV_IRQHandler+0x66>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <HAL_I2C_EV_IRQHandler+0x68>
 8006816:	2300      	movs	r3, #0
 8006818:	2b01      	cmp	r3, #1
 800681a:	f000 812e 	beq.w	8006a7a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <HAL_I2C_EV_IRQHandler+0x92>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	0a5b      	lsrs	r3, r3, #9
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d006      	beq.n	8006842 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fe6a 	bl	800850e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fcbb 	bl	80071b6 <I2C_Master_SB>
 8006840:	e08e      	b.n	8006960 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_I2C_EV_IRQHandler+0xb2>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	0a5b      	lsrs	r3, r3, #9
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fd31 	bl	80072c2 <I2C_Master_ADD10>
 8006860:	e07e      	b.n	8006960 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <HAL_I2C_EV_IRQHandler+0xd2>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	0a5b      	lsrs	r3, r3, #9
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fd4b 	bl	8007316 <I2C_Master_ADDR>
 8006880:	e06e      	b.n	8006960 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d037      	beq.n	80068fe <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689c:	f000 80ef 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	09db      	lsrs	r3, r3, #7
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00f      	beq.n	80068cc <HAL_I2C_EV_IRQHandler+0x11c>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	0a9b      	lsrs	r3, r3, #10
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <HAL_I2C_EV_IRQHandler+0x11c>
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	089b      	lsrs	r3, r3, #2
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f948 	bl	8006b5a <I2C_MasterTransmit_TXE>
 80068ca:	e049      	b.n	8006960 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	089b      	lsrs	r3, r3, #2
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80d2 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	0a5b      	lsrs	r3, r3, #9
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80cb 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d103      	bne.n	80068f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9cf 	bl	8006c92 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f4:	e0c3      	b.n	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa33 	bl	8006d62 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068fc:	e0bf      	b.n	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690c:	f000 80b7 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	099b      	lsrs	r3, r3, #6
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00f      	beq.n	800693c <HAL_I2C_EV_IRQHandler+0x18c>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	0a9b      	lsrs	r3, r3, #10
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d009      	beq.n	800693c <HAL_I2C_EV_IRQHandler+0x18c>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	089b      	lsrs	r3, r3, #2
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 faa3 	bl	8006e80 <I2C_MasterReceive_RXNE>
 800693a:	e011      	b.n	8006960 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 809a 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	0a5b      	lsrs	r3, r3, #9
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8093 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fb42 	bl	8006fe2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800695e:	e08e      	b.n	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006960:	e08d      	b.n	8006a7e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	e007      	b.n	8006984 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d012      	beq.n	80069b6 <HAL_I2C_EV_IRQHandler+0x206>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	0a5b      	lsrs	r3, r3, #9
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 ff00 	bl	80077b4 <I2C_Slave_ADDR>
 80069b4:	e066      	b.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_I2C_EV_IRQHandler+0x226>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	0a5b      	lsrs	r3, r3, #9
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 ff34 	bl	800783c <I2C_Slave_STOPF>
 80069d4:	e056      	b.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b21      	cmp	r3, #33	; 0x21
 80069da:	d002      	beq.n	80069e2 <HAL_I2C_EV_IRQHandler+0x232>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b29      	cmp	r3, #41	; 0x29
 80069e0:	d125      	bne.n	8006a2e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	09db      	lsrs	r3, r3, #7
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00f      	beq.n	8006a0e <HAL_I2C_EV_IRQHandler+0x25e>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	0a9b      	lsrs	r3, r3, #10
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_I2C_EV_IRQHandler+0x25e>
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d103      	bne.n	8006a0e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fe16 	bl	8007638 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a0c:	e039      	b.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	089b      	lsrs	r3, r3, #2
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d033      	beq.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d2>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	0a5b      	lsrs	r3, r3, #9
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02d      	beq.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fe43 	bl	80076b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a2c:	e029      	b.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	099b      	lsrs	r3, r3, #6
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00f      	beq.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2aa>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	0a9b      	lsrs	r3, r3, #10
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2aa>
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	089b      	lsrs	r3, r3, #2
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fe4e 	bl	80076f4 <I2C_SlaveReceive_RXNE>
 8006a58:	e014      	b.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	0a5b      	lsrs	r3, r3, #9
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fe7c 	bl	8007770 <I2C_SlaveReceive_BTF>
 8006a78:	e004      	b.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b70:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d150      	bne.n	8006c22 <I2C_MasterTransmit_TXE+0xc8>
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b21      	cmp	r3, #33	; 0x21
 8006b84:	d14d      	bne.n	8006c22 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d01d      	beq.n	8006bc8 <I2C_MasterTransmit_TXE+0x6e>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d01a      	beq.n	8006bc8 <I2C_MasterTransmit_TXE+0x6e>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b98:	d016      	beq.n	8006bc8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ba8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2211      	movs	r2, #17
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ff62 	bl	8006a8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bc6:	e060      	b.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bd6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d107      	bne.n	8006c12 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff ff7d 	bl	8006b0a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c10:	e03b      	b.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff ff35 	bl	8006a8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c20:	e033      	b.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b21      	cmp	r3, #33	; 0x21
 8006c26:	d005      	beq.n	8006c34 <I2C_MasterTransmit_TXE+0xda>
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d12d      	bne.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b22      	cmp	r3, #34	; 0x22
 8006c32:	d12a      	bne.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d108      	bne.n	8006c50 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c4e:	e01c      	b.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d103      	bne.n	8006c64 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f880 	bl	8006d62 <I2C_MemoryTransmit_TXE_BTF>
}
 8006c62:	e012      	b.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c88:	e7ff      	b.n	8006c8a <I2C_MasterTransmit_TXE+0x130>
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b21      	cmp	r3, #33	; 0x21
 8006caa:	d156      	bne.n	8006d5a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d012      	beq.n	8006cdc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006cda:	e03e      	b.n	8006d5a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d01d      	beq.n	8006d1e <I2C_MasterTransmit_BTF+0x8c>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d01a      	beq.n	8006d1e <I2C_MasterTransmit_BTF+0x8c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cee:	d016      	beq.n	8006d1e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cfe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2211      	movs	r2, #17
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff feb7 	bl	8006a8a <HAL_I2C_MasterTxCpltCallback>
}
 8006d1c:	e01d      	b.n	8006d5a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d2c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff fe98 	bl	8006a8a <HAL_I2C_MasterTxCpltCallback>
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11d      	bne.n	8006db6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10b      	bne.n	8006d9a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006d98:	e06e      	b.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	121b      	asrs	r3, r3, #8
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006db4:	e060      	b.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d10b      	bne.n	8006dd6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006dd4:	e050      	b.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d14c      	bne.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b22      	cmp	r3, #34	; 0x22
 8006de2:	d108      	bne.n	8006df6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	e040      	b.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d015      	beq.n	8006e2c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b21      	cmp	r3, #33	; 0x21
 8006e04:	d112      	bne.n	8006e2c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e2a:	e025      	b.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d120      	bne.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b21      	cmp	r3, #33	; 0x21
 8006e3a:	d11d      	bne.n	8006e78 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fe49 	bl	8006b0a <HAL_I2C_MemTxCpltCallback>
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b22      	cmp	r3, #34	; 0x22
 8006e92:	f040 80a2 	bne.w	8006fda <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d921      	bls.n	8006ee8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	f040 8082 	bne.w	8006fda <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006ee6:	e078      	b.n	8006fda <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d074      	beq.n	8006fda <I2C_MasterReceive_RXNE+0x15a>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d002      	beq.n	8006efc <I2C_MasterReceive_RXNE+0x7c>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d16e      	bne.n	8006fda <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fa4f 	bl	80083a0 <I2C_WaitOnSTOPRequestThroughIT>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d142      	bne.n	8006f8e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b40      	cmp	r3, #64	; 0x40
 8006f60:	d10a      	bne.n	8006f78 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff fdd4 	bl	8006b1e <HAL_I2C_MemRxCpltCallback>
}
 8006f76:	e030      	b.n	8006fda <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2212      	movs	r2, #18
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff fd89 	bl	8006a9e <HAL_I2C_MasterRxCpltCallback>
}
 8006f8c:	e025      	b.n	8006fda <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fdac 	bl	8006b32 <HAL_I2C_ErrorCallback>
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d11b      	bne.n	8007032 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007008:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007030:	e0bd      	b.n	80071ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b03      	cmp	r3, #3
 800703a:	d129      	bne.n	8007090 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800704a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b04      	cmp	r3, #4
 8007050:	d00a      	beq.n	8007068 <I2C_MasterReceive_BTF+0x86>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d007      	beq.n	8007068 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007066:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800708e:	e08e      	b.n	80071ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d176      	bne.n	8007188 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d002      	beq.n	80070a6 <I2C_MasterReceive_BTF+0xc4>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d108      	bne.n	80070b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e019      	b.n	80070ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d002      	beq.n	80070c4 <I2C_MasterReceive_BTF+0xe2>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d108      	bne.n	80070d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e00a      	b.n	80070ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d007      	beq.n	80070ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691a      	ldr	r2, [r3, #16]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007146:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d10a      	bne.n	8007172 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff fcd7 	bl	8006b1e <HAL_I2C_MemRxCpltCallback>
}
 8007170:	e01d      	b.n	80071ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2212      	movs	r2, #18
 800717e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fc8c 	bl	8006a9e <HAL_I2C_MasterRxCpltCallback>
}
 8007186:	e012      	b.n	80071ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d117      	bne.n	80071fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80071e4:	e067      	b.n	80072b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	611a      	str	r2, [r3, #16]
}
 80071f8:	e05d      	b.n	80072b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007202:	d133      	bne.n	800726c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b21      	cmp	r3, #33	; 0x21
 800720e:	d109      	bne.n	8007224 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	b2db      	uxtb	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007220:	611a      	str	r2, [r3, #16]
 8007222:	e008      	b.n	8007236 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	b2da      	uxtb	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <I2C_Master_SB+0x92>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d108      	bne.n	800725a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	2b00      	cmp	r3, #0
 800724e:	d032      	beq.n	80072b6 <I2C_Master_SB+0x100>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d02d      	beq.n	80072b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007268:	605a      	str	r2, [r3, #4]
}
 800726a:	e024      	b.n	80072b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10e      	bne.n	8007292 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007278:	b29b      	uxth	r3, r3
 800727a:	11db      	asrs	r3, r3, #7
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0306 	and.w	r3, r3, #6
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f063 030f 	orn	r3, r3, #15
 8007288:	b2da      	uxtb	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	611a      	str	r2, [r3, #16]
}
 8007290:	e011      	b.n	80072b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10d      	bne.n	80072b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	b29b      	uxth	r3, r3
 80072a0:	11db      	asrs	r3, r3, #7
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0306 	and.w	r3, r3, #6
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f063 030e 	orn	r3, r3, #14
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	611a      	str	r2, [r3, #16]
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <I2C_Master_ADD10+0x26>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d108      	bne.n	80072fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00c      	beq.n	800730a <I2C_Master_ADD10+0x48>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007308:	605a      	str	r2, [r3, #4]
  }
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007316:	b480      	push	{r7}
 8007318:	b091      	sub	sp, #68	; 0x44
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b22      	cmp	r3, #34	; 0x22
 800733e:	f040 8169 	bne.w	8007614 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <I2C_Master_ADDR+0x54>
 800734a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d10b      	bne.n	800736a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007352:	2300      	movs	r3, #0
 8007354:	633b      	str	r3, [r7, #48]	; 0x30
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	633b      	str	r3, [r7, #48]	; 0x30
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	e160      	b.n	800762c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11d      	bne.n	80073ae <I2C_Master_ADDR+0x98>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800737a:	d118      	bne.n	80073ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737c:	2300      	movs	r3, #0
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	651a      	str	r2, [r3, #80]	; 0x50
 80073ac:	e13e      	b.n	800762c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d113      	bne.n	80073e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b8:	2300      	movs	r3, #0
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e115      	b.n	800760c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	f040 808a 	bne.w	8007500 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073f2:	d137      	bne.n	8007464 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007402:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800740e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007412:	d113      	bne.n	800743c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007424:	2300      	movs	r3, #0
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	e0e7      	b.n	800760c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800743c:	2300      	movs	r3, #0
 800743e:	623b      	str	r3, [r7, #32]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	623b      	str	r3, [r7, #32]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e0d3      	b.n	800760c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b08      	cmp	r3, #8
 8007468:	d02e      	beq.n	80074c8 <I2C_Master_ADDR+0x1b2>
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	2b20      	cmp	r3, #32
 800746e:	d02b      	beq.n	80074c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	2b12      	cmp	r3, #18
 8007474:	d102      	bne.n	800747c <I2C_Master_ADDR+0x166>
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	2b01      	cmp	r3, #1
 800747a:	d125      	bne.n	80074c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	2b04      	cmp	r3, #4
 8007480:	d00e      	beq.n	80074a0 <I2C_Master_ADDR+0x18a>
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	2b02      	cmp	r3, #2
 8007486:	d00b      	beq.n	80074a0 <I2C_Master_ADDR+0x18a>
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	2b10      	cmp	r3, #16
 800748c:	d008      	beq.n	80074a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e007      	b.n	80074b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	e0a1      	b.n	800760c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d8:	2300      	movs	r3, #0
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	e085      	b.n	800760c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d14d      	bne.n	80075a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	2b04      	cmp	r3, #4
 800750e:	d016      	beq.n	800753e <I2C_Master_ADDR+0x228>
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	2b02      	cmp	r3, #2
 8007514:	d013      	beq.n	800753e <I2C_Master_ADDR+0x228>
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b10      	cmp	r3, #16
 800751a:	d010      	beq.n	800753e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e007      	b.n	800754e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800754c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755c:	d117      	bne.n	800758e <I2C_Master_ADDR+0x278>
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007564:	d00b      	beq.n	800757e <I2C_Master_ADDR+0x268>
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b01      	cmp	r3, #1
 800756a:	d008      	beq.n	800757e <I2C_Master_ADDR+0x268>
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	2b08      	cmp	r3, #8
 8007570:	d005      	beq.n	800757e <I2C_Master_ADDR+0x268>
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2b10      	cmp	r3, #16
 8007576:	d002      	beq.n	800757e <I2C_Master_ADDR+0x268>
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	2b20      	cmp	r3, #32
 800757c:	d107      	bne.n	800758e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800758c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	e032      	b.n	800760c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c4:	d117      	bne.n	80075f6 <I2C_Master_ADDR+0x2e0>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075cc:	d00b      	beq.n	80075e6 <I2C_Master_ADDR+0x2d0>
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d008      	beq.n	80075e6 <I2C_Master_ADDR+0x2d0>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d005      	beq.n	80075e6 <I2C_Master_ADDR+0x2d0>
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d002      	beq.n	80075e6 <I2C_Master_ADDR+0x2d0>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d107      	bne.n	80075f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007612:	e00b      	b.n	800762c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
}
 800762a:	e7ff      	b.n	800762c <I2C_Master_ADDR+0x316>
 800762c:	bf00      	nop
 800762e:	3744      	adds	r7, #68	; 0x44
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007646:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d02b      	beq.n	80076aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	781a      	ldrb	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d114      	bne.n	80076aa <I2C_SlaveTransmit_TXE+0x72>
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b29      	cmp	r3, #41	; 0x29
 8007684:	d111      	bne.n	80076aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007694:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2221      	movs	r2, #33	; 0x21
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2228      	movs	r2, #40	; 0x28
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff fa04 	bl	8006ab2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d011      	beq.n	80076e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	781a      	ldrb	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007702:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d02c      	beq.n	8007768 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d114      	bne.n	8007768 <I2C_SlaveReceive_RXNE+0x74>
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2b2a      	cmp	r3, #42	; 0x2a
 8007742:	d111      	bne.n	8007768 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007752:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2222      	movs	r2, #34	; 0x22
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2228      	movs	r2, #40	; 0x28
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff f9af 	bl	8006ac6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d012      	beq.n	80077a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077ce:	2b28      	cmp	r3, #40	; 0x28
 80077d0:	d127      	bne.n	8007822 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	089b      	lsrs	r3, r3, #2
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80077ee:	2301      	movs	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	09db      	lsrs	r3, r3, #7
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	81bb      	strh	r3, [r7, #12]
 8007804:	e002      	b.n	800780c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007814:	89ba      	ldrh	r2, [r7, #12]
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff f95d 	bl	8006ada <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007820:	e008      	b.n	8007834 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f06f 0202 	mvn.w	r2, #2
 800782a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800785a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800785c:	2300      	movs	r3, #0
 800785e:	60bb      	str	r3, [r7, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	60bb      	str	r3, [r7, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007888:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007898:	d172      	bne.n	8007980 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b22      	cmp	r3, #34	; 0x22
 800789e:	d002      	beq.n	80078a6 <I2C_Slave_STOPF+0x6a>
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b2a      	cmp	r3, #42	; 0x2a
 80078a4:	d135      	bne.n	8007912 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	f043 0204 	orr.w	r2, r3, #4
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fd fff4 	bl	80058cc <HAL_DMA_GetState>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d049      	beq.n	800797e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	4a69      	ldr	r2, [pc, #420]	; (8007a94 <I2C_Slave_STOPF+0x258>)
 80078f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fd ffc6 	bl	8005888 <HAL_DMA_Abort_IT>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d03d      	beq.n	800797e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007910:	e035      	b.n	800797e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	f043 0204 	orr.w	r2, r3, #4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007944:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd ffbe 	bl	80058cc <HAL_DMA_GetState>
 8007950:	4603      	mov	r3, r0
 8007952:	2b01      	cmp	r3, #1
 8007954:	d014      	beq.n	8007980 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	4a4e      	ldr	r2, [pc, #312]	; (8007a94 <I2C_Slave_STOPF+0x258>)
 800795c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	4618      	mov	r0, r3
 8007964:	f7fd ff90 	bl	8005888 <HAL_DMA_Abort_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	e000      	b.n	8007980 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800797e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d03e      	beq.n	8007a08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b04      	cmp	r3, #4
 8007996:	d112      	bne.n	80079be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d112      	bne.n	80079f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	f043 0204 	orr.w	r2, r3, #4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f843 	bl	8007a9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007a16:	e039      	b.n	8007a8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1c:	d109      	bne.n	8007a32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2228      	movs	r2, #40	; 0x28
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff f84a 	bl	8006ac6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b28      	cmp	r3, #40	; 0x28
 8007a3c:	d111      	bne.n	8007a62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <I2C_Slave_STOPF+0x25c>)
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff f84b 	bl	8006af6 <HAL_I2C_ListenCpltCallback>
}
 8007a60:	e014      	b.n	8007a8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	2b22      	cmp	r3, #34	; 0x22
 8007a68:	d002      	beq.n	8007a70 <I2C_Slave_STOPF+0x234>
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b22      	cmp	r3, #34	; 0x22
 8007a6e:	d10d      	bne.n	8007a8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff f81d 	bl	8006ac6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	08007fa1 	.word	0x08007fa1
 8007a98:	ffff0000 	.word	0xffff0000

08007a9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aaa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b10      	cmp	r3, #16
 8007ab8:	d002      	beq.n	8007ac0 <I2C_ITError+0x24>
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	2b40      	cmp	r3, #64	; 0x40
 8007abe:	d10a      	bne.n	8007ad6 <I2C_ITError+0x3a>
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b22      	cmp	r3, #34	; 0x22
 8007ac4:	d107      	bne.n	8007ad6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ad4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007adc:	2b28      	cmp	r3, #40	; 0x28
 8007ade:	d107      	bne.n	8007af0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2228      	movs	r2, #40	; 0x28
 8007aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aee:	e015      	b.n	8007b1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007afe:	d00a      	beq.n	8007b16 <I2C_ITError+0x7a>
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b60      	cmp	r3, #96	; 0x60
 8007b04:	d007      	beq.n	8007b16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2a:	d162      	bne.n	8007bf2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d020      	beq.n	8007b8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	4a6a      	ldr	r2, [pc, #424]	; (8007cf8 <I2C_ITError+0x25c>)
 8007b50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd fe96 	bl	8005888 <HAL_DMA_Abort_IT>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8089 	beq.w	8007c76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b86:	4610      	mov	r0, r2
 8007b88:	4798      	blx	r3
 8007b8a:	e074      	b.n	8007c76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	4a59      	ldr	r2, [pc, #356]	; (8007cf8 <I2C_ITError+0x25c>)
 8007b92:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fd fe75 	bl	8005888 <HAL_DMA_Abort_IT>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d068      	beq.n	8007c76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d10b      	bne.n	8007bca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691a      	ldr	r2, [r3, #16]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	e041      	b.n	8007c76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b60      	cmp	r3, #96	; 0x60
 8007bfc:	d125      	bne.n	8007c4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	d10b      	bne.n	8007c32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0201 	bic.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fe ff7f 	bl	8006b46 <HAL_I2C_AbortCpltCallback>
 8007c48:	e015      	b.n	8007c76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	d10b      	bne.n	8007c70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7fe ff5e 	bl	8006b32 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10e      	bne.n	8007ca4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cb2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d113      	bne.n	8007cf0 <I2C_ITError+0x254>
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b28      	cmp	r3, #40	; 0x28
 8007ccc:	d110      	bne.n	8007cf0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <I2C_ITError+0x260>)
 8007cd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fe ff03 	bl	8006af6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	08007fa1 	.word	0x08007fa1
 8007cfc:	ffff0000 	.word	0xffff0000

08007d00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d006      	beq.n	8007d2a <I2C_MasterRequestWrite+0x2a>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d003      	beq.n	8007d2a <I2C_MasterRequestWrite+0x2a>
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d28:	d108      	bne.n	8007d3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e00b      	b.n	8007d54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d40:	2b12      	cmp	r3, #18
 8007d42:	d107      	bne.n	8007d54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f9c5 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7a:	d103      	bne.n	8007d84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e035      	b.n	8007df4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d90:	d108      	bne.n	8007da4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d92:	897b      	ldrh	r3, [r7, #10]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	e01b      	b.n	8007ddc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007da4:	897b      	ldrh	r3, [r7, #10]
 8007da6:	11db      	asrs	r3, r3, #7
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	f003 0306 	and.w	r3, r3, #6
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f063 030f 	orn	r3, r3, #15
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	490e      	ldr	r1, [pc, #56]	; (8007dfc <I2C_MasterRequestWrite+0xfc>)
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f9eb 	bl	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e010      	b.n	8007df4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007dd2:	897b      	ldrh	r3, [r7, #10]
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	4907      	ldr	r1, [pc, #28]	; (8007e00 <I2C_MasterRequestWrite+0x100>)
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f9db 	bl	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	00010008 	.word	0x00010008
 8007e00:	00010002 	.word	0x00010002

08007e04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	460b      	mov	r3, r1
 8007e12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d006      	beq.n	8007e3e <I2C_MasterRequestRead+0x3a>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d003      	beq.n	8007e3e <I2C_MasterRequestRead+0x3a>
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e3c:	d108      	bne.n	8007e50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e00b      	b.n	8007e68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	2b11      	cmp	r3, #17
 8007e56:	d107      	bne.n	8007e68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f93b 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00d      	beq.n	8007e9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8e:	d103      	bne.n	8007e98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e079      	b.n	8007f90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea4:	d108      	bne.n	8007eb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ea6:	897b      	ldrh	r3, [r7, #10]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f043 0301 	orr.w	r3, r3, #1
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	611a      	str	r2, [r3, #16]
 8007eb6:	e05f      	b.n	8007f78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007eb8:	897b      	ldrh	r3, [r7, #10]
 8007eba:	11db      	asrs	r3, r3, #7
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0306 	and.w	r3, r3, #6
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f063 030f 	orn	r3, r3, #15
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4930      	ldr	r1, [pc, #192]	; (8007f98 <I2C_MasterRequestRead+0x194>)
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f961 	bl	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e054      	b.n	8007f90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ee6:	897b      	ldrh	r3, [r7, #10]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	4929      	ldr	r1, [pc, #164]	; (8007f9c <I2C_MasterRequestRead+0x198>)
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f951 	bl	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e044      	b.n	8007f90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f06:	2300      	movs	r3, #0
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f8d9 	bl	80080f0 <I2C_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00d      	beq.n	8007f60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f52:	d103      	bne.n	8007f5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e017      	b.n	8007f90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f60:	897b      	ldrh	r3, [r7, #10]
 8007f62:	11db      	asrs	r3, r3, #7
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0306 	and.w	r3, r3, #6
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f063 030e 	orn	r3, r3, #14
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4907      	ldr	r1, [pc, #28]	; (8007f9c <I2C_MasterRequestRead+0x198>)
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f90d 	bl	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	00010008 	.word	0x00010008
 8007f9c:	00010002 	.word	0x00010002

08007fa0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fba:	4b4b      	ldr	r3, [pc, #300]	; (80080e8 <I2C_DMAAbort+0x148>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	4a4a      	ldr	r2, [pc, #296]	; (80080ec <I2C_DMAAbort+0x14c>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	0a1a      	lsrs	r2, r3, #8
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	00da      	lsls	r2, r3, #3
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f043 0220 	orr.w	r2, r3, #32
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007fe6:	e00a      	b.n	8007ffe <I2C_DMAAbort+0x5e>
    }
    count--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ffc:	d0ea      	beq.n	8007fd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800a:	2200      	movs	r2, #0
 800800c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	2200      	movs	r2, #0
 800801c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800802c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2200      	movs	r2, #0
 8008032:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008040:	2200      	movs	r2, #0
 8008042:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	2200      	movs	r2, #0
 8008052:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d10e      	bne.n	800808e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008086:	6978      	ldr	r0, [r7, #20]
 8008088:	f7fe fd5d 	bl	8006b46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800808c:	e027      	b.n	80080de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800808e:	7cfb      	ldrb	r3, [r7, #19]
 8008090:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008094:	2b28      	cmp	r3, #40	; 0x28
 8008096:	d117      	bne.n	80080c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2228      	movs	r2, #40	; 0x28
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080c6:	e007      	b.n	80080d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80080d8:	6978      	ldr	r0, [r7, #20]
 80080da:	f7fe fd2a 	bl	8006b32 <HAL_I2C_ErrorCallback>
}
 80080de:	bf00      	nop
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000010 	.word	0x20000010
 80080ec:	14f8b589 	.word	0x14f8b589

080080f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	4613      	mov	r3, r2
 80080fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008100:	e025      	b.n	800814e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008108:	d021      	beq.n	800814e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800810a:	f7fd faab 	bl	8005664 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d116      	bne.n	800814e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	f043 0220 	orr.w	r2, r3, #32
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e023      	b.n	8008196 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10d      	bne.n	8008174 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	43da      	mvns	r2, r3
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4013      	ands	r3, r2
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	bf0c      	ite	eq
 800816a:	2301      	moveq	r3, #1
 800816c:	2300      	movne	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	e00c      	b.n	800818e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	43da      	mvns	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4013      	ands	r3, r2
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf0c      	ite	eq
 8008186:	2301      	moveq	r3, #1
 8008188:	2300      	movne	r3, #0
 800818a:	b2db      	uxtb	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	429a      	cmp	r2, r3
 8008192:	d0b6      	beq.n	8008102 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081ac:	e051      	b.n	8008252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081bc:	d123      	bne.n	8008206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f043 0204 	orr.w	r2, r3, #4
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e046      	b.n	8008294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820c:	d021      	beq.n	8008252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820e:	f7fd fa29 	bl	8005664 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d302      	bcc.n	8008224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d116      	bne.n	8008252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	f043 0220 	orr.w	r2, r3, #32
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e020      	b.n	8008294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b01      	cmp	r3, #1
 800825a:	d10c      	bne.n	8008276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	43da      	mvns	r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4013      	ands	r3, r2
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	bf14      	ite	ne
 800826e:	2301      	movne	r3, #1
 8008270:	2300      	moveq	r3, #0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	e00b      	b.n	800828e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	43da      	mvns	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4013      	ands	r3, r2
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	bf14      	ite	ne
 8008288:	2301      	movne	r3, #1
 800828a:	2300      	moveq	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d18d      	bne.n	80081ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082a8:	e02d      	b.n	8008306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f900 	bl	80084b0 <I2C_IsAcknowledgeFailed>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e02d      	b.n	8008316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c0:	d021      	beq.n	8008306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c2:	f7fd f9cf 	bl	8005664 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d302      	bcc.n	80082d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d116      	bne.n	8008306 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f043 0220 	orr.w	r2, r3, #32
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e007      	b.n	8008316 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	d1ca      	bne.n	80082aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800832a:	e02d      	b.n	8008388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f8bf 	bl	80084b0 <I2C_IsAcknowledgeFailed>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e02d      	b.n	8008398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008342:	d021      	beq.n	8008388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008344:	f7fd f98e 	bl	8005664 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	429a      	cmp	r2, r3
 8008352:	d302      	bcc.n	800835a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d116      	bne.n	8008388 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	f043 0220 	orr.w	r2, r3, #32
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e007      	b.n	8008398 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b04      	cmp	r3, #4
 8008394:	d1ca      	bne.n	800832c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80083ac:	4b13      	ldr	r3, [pc, #76]	; (80083fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	08db      	lsrs	r3, r3, #3
 80083b2:	4a13      	ldr	r2, [pc, #76]	; (8008400 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80083b4:	fba2 2303 	umull	r2, r3, r2, r3
 80083b8:	0a1a      	lsrs	r2, r3, #8
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f043 0220 	orr.w	r2, r3, #32
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e008      	b.n	80083f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ec:	d0e9      	beq.n	80083c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000010 	.word	0x20000010
 8008400:	14f8b589 	.word	0x14f8b589

08008404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008410:	e042      	b.n	8008498 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b10      	cmp	r3, #16
 800841e:	d119      	bne.n	8008454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0210 	mvn.w	r2, #16
 8008428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e029      	b.n	80084a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008454:	f7fd f906 	bl	8005664 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d116      	bne.n	8008498 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008484:	f043 0220 	orr.w	r2, r3, #32
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e007      	b.n	80084a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d1b5      	bne.n	8008412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c6:	d11b      	bne.n	8008500 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	f043 0204 	orr.w	r2, r3, #4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800851e:	d103      	bne.n	8008528 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008526:	e007      	b.n	8008538 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008530:	d102      	bne.n	8008538 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2208      	movs	r2, #8
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e264      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d075      	beq.n	800864e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008562:	4ba3      	ldr	r3, [pc, #652]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 030c 	and.w	r3, r3, #12
 800856a:	2b04      	cmp	r3, #4
 800856c:	d00c      	beq.n	8008588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800856e:	4ba0      	ldr	r3, [pc, #640]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008576:	2b08      	cmp	r3, #8
 8008578:	d112      	bne.n	80085a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800857a:	4b9d      	ldr	r3, [pc, #628]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008586:	d10b      	bne.n	80085a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008588:	4b99      	ldr	r3, [pc, #612]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d05b      	beq.n	800864c <HAL_RCC_OscConfig+0x108>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d157      	bne.n	800864c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e23f      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a8:	d106      	bne.n	80085b8 <HAL_RCC_OscConfig+0x74>
 80085aa:	4b91      	ldr	r3, [pc, #580]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a90      	ldr	r2, [pc, #576]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	e01d      	b.n	80085f4 <HAL_RCC_OscConfig+0xb0>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085c0:	d10c      	bne.n	80085dc <HAL_RCC_OscConfig+0x98>
 80085c2:	4b8b      	ldr	r3, [pc, #556]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a8a      	ldr	r2, [pc, #552]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	4b88      	ldr	r3, [pc, #544]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a87      	ldr	r2, [pc, #540]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e00b      	b.n	80085f4 <HAL_RCC_OscConfig+0xb0>
 80085dc:	4b84      	ldr	r3, [pc, #528]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a83      	ldr	r2, [pc, #524]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a80      	ldr	r2, [pc, #512]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80085ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d013      	beq.n	8008624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085fc:	f7fd f832 	bl	8005664 <HAL_GetTick>
 8008600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008604:	f7fd f82e 	bl	8005664 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b64      	cmp	r3, #100	; 0x64
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e204      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008616:	4b76      	ldr	r3, [pc, #472]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0f0      	beq.n	8008604 <HAL_RCC_OscConfig+0xc0>
 8008622:	e014      	b.n	800864e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008624:	f7fd f81e 	bl	8005664 <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800862c:	f7fd f81a 	bl	8005664 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b64      	cmp	r3, #100	; 0x64
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e1f0      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800863e:	4b6c      	ldr	r3, [pc, #432]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f0      	bne.n	800862c <HAL_RCC_OscConfig+0xe8>
 800864a:	e000      	b.n	800864e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800864c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d063      	beq.n	8008722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800865a:	4b65      	ldr	r3, [pc, #404]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 030c 	and.w	r3, r3, #12
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008666:	4b62      	ldr	r3, [pc, #392]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800866e:	2b08      	cmp	r3, #8
 8008670:	d11c      	bne.n	80086ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008672:	4b5f      	ldr	r3, [pc, #380]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d116      	bne.n	80086ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800867e:	4b5c      	ldr	r3, [pc, #368]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <HAL_RCC_OscConfig+0x152>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d001      	beq.n	8008696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e1c4      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008696:	4b56      	ldr	r3, [pc, #344]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	4952      	ldr	r1, [pc, #328]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086aa:	e03a      	b.n	8008722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d020      	beq.n	80086f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086b4:	4b4f      	ldr	r3, [pc, #316]	; (80087f4 <HAL_RCC_OscConfig+0x2b0>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ba:	f7fc ffd3 	bl	8005664 <HAL_GetTick>
 80086be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086c0:	e008      	b.n	80086d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086c2:	f7fc ffcf 	bl	8005664 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e1a5      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d4:	4b46      	ldr	r3, [pc, #280]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f0      	beq.n	80086c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e0:	4b43      	ldr	r3, [pc, #268]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	4940      	ldr	r1, [pc, #256]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	600b      	str	r3, [r1, #0]
 80086f4:	e015      	b.n	8008722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086f6:	4b3f      	ldr	r3, [pc, #252]	; (80087f4 <HAL_RCC_OscConfig+0x2b0>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fc:	f7fc ffb2 	bl	8005664 <HAL_GetTick>
 8008700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008702:	e008      	b.n	8008716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008704:	f7fc ffae 	bl	8005664 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e184      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008716:	4b36      	ldr	r3, [pc, #216]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f0      	bne.n	8008704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d030      	beq.n	8008790 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d016      	beq.n	8008764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008736:	4b30      	ldr	r3, [pc, #192]	; (80087f8 <HAL_RCC_OscConfig+0x2b4>)
 8008738:	2201      	movs	r2, #1
 800873a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873c:	f7fc ff92 	bl	8005664 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008744:	f7fc ff8e 	bl	8005664 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e164      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008756:	4b26      	ldr	r3, [pc, #152]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <HAL_RCC_OscConfig+0x200>
 8008762:	e015      	b.n	8008790 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008764:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <HAL_RCC_OscConfig+0x2b4>)
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800876a:	f7fc ff7b 	bl	8005664 <HAL_GetTick>
 800876e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008770:	e008      	b.n	8008784 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008772:	f7fc ff77 	bl	8005664 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e14d      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008784:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 8008786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f0      	bne.n	8008772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 80a0 	beq.w	80088de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087a2:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10f      	bne.n	80087ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087ae:	2300      	movs	r3, #0
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	4a0e      	ldr	r2, [pc, #56]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80087b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087bc:	6413      	str	r3, [r2, #64]	; 0x40
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <HAL_RCC_OscConfig+0x2ac>)
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087c6:	60bb      	str	r3, [r7, #8]
 80087c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087ca:	2301      	movs	r3, #1
 80087cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ce:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <HAL_RCC_OscConfig+0x2b8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d121      	bne.n	800881e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087da:	4b08      	ldr	r3, [pc, #32]	; (80087fc <HAL_RCC_OscConfig+0x2b8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a07      	ldr	r2, [pc, #28]	; (80087fc <HAL_RCC_OscConfig+0x2b8>)
 80087e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087e6:	f7fc ff3d 	bl	8005664 <HAL_GetTick>
 80087ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ec:	e011      	b.n	8008812 <HAL_RCC_OscConfig+0x2ce>
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800
 80087f4:	42470000 	.word	0x42470000
 80087f8:	42470e80 	.word	0x42470e80
 80087fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008800:	f7fc ff30 	bl	8005664 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e106      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008812:	4b85      	ldr	r3, [pc, #532]	; (8008a28 <HAL_RCC_OscConfig+0x4e4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f0      	beq.n	8008800 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d106      	bne.n	8008834 <HAL_RCC_OscConfig+0x2f0>
 8008826:	4b81      	ldr	r3, [pc, #516]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	4a80      	ldr	r2, [pc, #512]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800882c:	f043 0301 	orr.w	r3, r3, #1
 8008830:	6713      	str	r3, [r2, #112]	; 0x70
 8008832:	e01c      	b.n	800886e <HAL_RCC_OscConfig+0x32a>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b05      	cmp	r3, #5
 800883a:	d10c      	bne.n	8008856 <HAL_RCC_OscConfig+0x312>
 800883c:	4b7b      	ldr	r3, [pc, #492]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	4a7a      	ldr	r2, [pc, #488]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008842:	f043 0304 	orr.w	r3, r3, #4
 8008846:	6713      	str	r3, [r2, #112]	; 0x70
 8008848:	4b78      	ldr	r3, [pc, #480]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800884a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884c:	4a77      	ldr	r2, [pc, #476]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	6713      	str	r3, [r2, #112]	; 0x70
 8008854:	e00b      	b.n	800886e <HAL_RCC_OscConfig+0x32a>
 8008856:	4b75      	ldr	r3, [pc, #468]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	4a74      	ldr	r2, [pc, #464]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	6713      	str	r3, [r2, #112]	; 0x70
 8008862:	4b72      	ldr	r3, [pc, #456]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008866:	4a71      	ldr	r2, [pc, #452]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008868:	f023 0304 	bic.w	r3, r3, #4
 800886c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d015      	beq.n	80088a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008876:	f7fc fef5 	bl	8005664 <HAL_GetTick>
 800887a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800887c:	e00a      	b.n	8008894 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800887e:	f7fc fef1 	bl	8005664 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	f241 3288 	movw	r2, #5000	; 0x1388
 800888c:	4293      	cmp	r3, r2
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e0c5      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008894:	4b65      	ldr	r3, [pc, #404]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0ee      	beq.n	800887e <HAL_RCC_OscConfig+0x33a>
 80088a0:	e014      	b.n	80088cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088a2:	f7fc fedf 	bl	8005664 <HAL_GetTick>
 80088a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088a8:	e00a      	b.n	80088c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088aa:	f7fc fedb 	bl	8005664 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e0af      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088c0:	4b5a      	ldr	r3, [pc, #360]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 80088c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1ee      	bne.n	80088aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d105      	bne.n	80088de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088d2:	4b56      	ldr	r3, [pc, #344]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	4a55      	ldr	r2, [pc, #340]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 80088d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 809b 	beq.w	8008a1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088e8:	4b50      	ldr	r3, [pc, #320]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 030c 	and.w	r3, r3, #12
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d05c      	beq.n	80089ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d141      	bne.n	8008980 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088fc:	4b4c      	ldr	r3, [pc, #304]	; (8008a30 <HAL_RCC_OscConfig+0x4ec>)
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008902:	f7fc feaf 	bl	8005664 <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890a:	f7fc feab 	bl	8005664 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e081      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891c:	4b43      	ldr	r3, [pc, #268]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f0      	bne.n	800890a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69da      	ldr	r2, [r3, #28]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	019b      	lsls	r3, r3, #6
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	085b      	lsrs	r3, r3, #1
 8008940:	3b01      	subs	r3, #1
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	061b      	lsls	r3, r3, #24
 800894c:	4937      	ldr	r1, [pc, #220]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 800894e:	4313      	orrs	r3, r2
 8008950:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008952:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <HAL_RCC_OscConfig+0x4ec>)
 8008954:	2201      	movs	r2, #1
 8008956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008958:	f7fc fe84 	bl	8005664 <HAL_GetTick>
 800895c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008960:	f7fc fe80 	bl	8005664 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e056      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008972:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f0      	beq.n	8008960 <HAL_RCC_OscConfig+0x41c>
 800897e:	e04e      	b.n	8008a1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008980:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <HAL_RCC_OscConfig+0x4ec>)
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008986:	f7fc fe6d 	bl	8005664 <HAL_GetTick>
 800898a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800898c:	e008      	b.n	80089a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800898e:	f7fc fe69 	bl	8005664 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d901      	bls.n	80089a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e03f      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a0:	4b22      	ldr	r3, [pc, #136]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f0      	bne.n	800898e <HAL_RCC_OscConfig+0x44a>
 80089ac:	e037      	b.n	8008a1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e032      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089ba:	4b1c      	ldr	r3, [pc, #112]	; (8008a2c <HAL_RCC_OscConfig+0x4e8>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d028      	beq.n	8008a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d121      	bne.n	8008a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d11a      	bne.n	8008a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089ea:	4013      	ands	r3, r2
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d111      	bne.n	8008a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	3b01      	subs	r3, #1
 8008a04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d107      	bne.n	8008a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d001      	beq.n	8008a1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40007000 	.word	0x40007000
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	42470060 	.word	0x42470060

08008a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e0cc      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a48:	4b68      	ldr	r3, [pc, #416]	; (8008bec <HAL_RCC_ClockConfig+0x1b8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d90c      	bls.n	8008a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a56:	4b65      	ldr	r3, [pc, #404]	; (8008bec <HAL_RCC_ClockConfig+0x1b8>)
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a5e:	4b63      	ldr	r3, [pc, #396]	; (8008bec <HAL_RCC_ClockConfig+0x1b8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d001      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0b8      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d020      	beq.n	8008abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a88:	4b59      	ldr	r3, [pc, #356]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	4a58      	ldr	r2, [pc, #352]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aa0:	4b53      	ldr	r3, [pc, #332]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	4a52      	ldr	r2, [pc, #328]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aac:	4b50      	ldr	r3, [pc, #320]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	494d      	ldr	r1, [pc, #308]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d044      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ad2:	4b47      	ldr	r3, [pc, #284]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d119      	bne.n	8008b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e07f      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d003      	beq.n	8008af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d107      	bne.n	8008b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af2:	4b3f      	ldr	r3, [pc, #252]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e06f      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b02:	4b3b      	ldr	r3, [pc, #236]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e067      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b12:	4b37      	ldr	r3, [pc, #220]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f023 0203 	bic.w	r2, r3, #3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	4934      	ldr	r1, [pc, #208]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b24:	f7fc fd9e 	bl	8005664 <HAL_GetTick>
 8008b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2a:	e00a      	b.n	8008b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b2c:	f7fc fd9a 	bl	8005664 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e04f      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b42:	4b2b      	ldr	r3, [pc, #172]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 020c 	and.w	r2, r3, #12
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d1eb      	bne.n	8008b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b54:	4b25      	ldr	r3, [pc, #148]	; (8008bec <HAL_RCC_ClockConfig+0x1b8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d20c      	bcs.n	8008b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b62:	4b22      	ldr	r3, [pc, #136]	; (8008bec <HAL_RCC_ClockConfig+0x1b8>)
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6a:	4b20      	ldr	r3, [pc, #128]	; (8008bec <HAL_RCC_ClockConfig+0x1b8>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d001      	beq.n	8008b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e032      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d008      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b88:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4916      	ldr	r1, [pc, #88]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0308 	and.w	r3, r3, #8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ba6:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	490e      	ldr	r1, [pc, #56]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bba:	f000 f821 	bl	8008c00 <HAL_RCC_GetSysClockFreq>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	490a      	ldr	r1, [pc, #40]	; (8008bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8008bcc:	5ccb      	ldrb	r3, [r1, r3]
 8008bce:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8008bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <HAL_RCC_ClockConfig+0x1c8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f9 fe14 	bl	8002808 <HAL_InitTick>

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	40023c00 	.word	0x40023c00
 8008bf0:	40023800 	.word	0x40023800
 8008bf4:	0802972c 	.word	0x0802972c
 8008bf8:	20000010 	.word	0x20000010
 8008bfc:	20000048 	.word	0x20000048

08008c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	607b      	str	r3, [r7, #4]
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	2300      	movs	r3, #0
 8008c12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c18:	4b67      	ldr	r3, [pc, #412]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f003 030c 	and.w	r3, r3, #12
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d00d      	beq.n	8008c40 <HAL_RCC_GetSysClockFreq+0x40>
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	f200 80bd 	bhi.w	8008da4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_RCC_GetSysClockFreq+0x34>
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d003      	beq.n	8008c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8008c32:	e0b7      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c34:	4b61      	ldr	r3, [pc, #388]	; (8008dbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008c36:	60bb      	str	r3, [r7, #8]
       break;
 8008c38:	e0b7      	b.n	8008daa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c3a:	4b61      	ldr	r3, [pc, #388]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008c3c:	60bb      	str	r3, [r7, #8]
      break;
 8008c3e:	e0b4      	b.n	8008daa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c40:	4b5d      	ldr	r3, [pc, #372]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c4a:	4b5b      	ldr	r3, [pc, #364]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d04d      	beq.n	8008cf2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c56:	4b58      	ldr	r3, [pc, #352]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	099b      	lsrs	r3, r3, #6
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c66:	f04f 0100 	mov.w	r1, #0
 8008c6a:	ea02 0800 	and.w	r8, r2, r0
 8008c6e:	ea03 0901 	and.w	r9, r3, r1
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	f04f 0200 	mov.w	r2, #0
 8008c7a:	f04f 0300 	mov.w	r3, #0
 8008c7e:	014b      	lsls	r3, r1, #5
 8008c80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c84:	0142      	lsls	r2, r0, #5
 8008c86:	4610      	mov	r0, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	ebb0 0008 	subs.w	r0, r0, r8
 8008c8e:	eb61 0109 	sbc.w	r1, r1, r9
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	f04f 0300 	mov.w	r3, #0
 8008c9a:	018b      	lsls	r3, r1, #6
 8008c9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008ca0:	0182      	lsls	r2, r0, #6
 8008ca2:	1a12      	subs	r2, r2, r0
 8008ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8008ca8:	f04f 0000 	mov.w	r0, #0
 8008cac:	f04f 0100 	mov.w	r1, #0
 8008cb0:	00d9      	lsls	r1, r3, #3
 8008cb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cb6:	00d0      	lsls	r0, r2, #3
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	eb12 0208 	adds.w	r2, r2, r8
 8008cc0:	eb43 0309 	adc.w	r3, r3, r9
 8008cc4:	f04f 0000 	mov.w	r0, #0
 8008cc8:	f04f 0100 	mov.w	r1, #0
 8008ccc:	0259      	lsls	r1, r3, #9
 8008cce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008cd2:	0250      	lsls	r0, r2, #9
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4619      	mov	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	f7f7 ffc0 	bl	8000c68 <__aeabi_uldivmod>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4613      	mov	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e04a      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cf2:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	099b      	lsrs	r3, r3, #6
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d02:	f04f 0100 	mov.w	r1, #0
 8008d06:	ea02 0400 	and.w	r4, r2, r0
 8008d0a:	ea03 0501 	and.w	r5, r3, r1
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	014b      	lsls	r3, r1, #5
 8008d1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d20:	0142      	lsls	r2, r0, #5
 8008d22:	4610      	mov	r0, r2
 8008d24:	4619      	mov	r1, r3
 8008d26:	1b00      	subs	r0, r0, r4
 8008d28:	eb61 0105 	sbc.w	r1, r1, r5
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	018b      	lsls	r3, r1, #6
 8008d36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d3a:	0182      	lsls	r2, r0, #6
 8008d3c:	1a12      	subs	r2, r2, r0
 8008d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	00d9      	lsls	r1, r3, #3
 8008d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d50:	00d0      	lsls	r0, r2, #3
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	1912      	adds	r2, r2, r4
 8008d58:	eb45 0303 	adc.w	r3, r5, r3
 8008d5c:	f04f 0000 	mov.w	r0, #0
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	0299      	lsls	r1, r3, #10
 8008d66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008d6a:	0290      	lsls	r0, r2, #10
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4610      	mov	r0, r2
 8008d72:	4619      	mov	r1, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f04f 0300 	mov.w	r3, #0
 8008d7c:	f7f7 ff74 	bl	8000c68 <__aeabi_uldivmod>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4613      	mov	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d88:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	3301      	adds	r3, #1
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da0:	60bb      	str	r3, [r7, #8]
      break;
 8008da2:	e002      	b.n	8008daa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008da6:	60bb      	str	r3, [r7, #8]
      break;
 8008da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008daa:	68bb      	ldr	r3, [r7, #8]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008db6:	bf00      	nop
 8008db8:	40023800 	.word	0x40023800
 8008dbc:	00f42400 	.word	0x00f42400
 8008dc0:	007a1200 	.word	0x007a1200

08008dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dc8:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dca:	681b      	ldr	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000010 	.word	0x20000010

08008ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008de0:	f7ff fff0 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008de4:	4602      	mov	r2, r0
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	0a9b      	lsrs	r3, r3, #10
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	4903      	ldr	r1, [pc, #12]	; (8008e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008df2:	5ccb      	ldrb	r3, [r1, r3]
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	0802973c 	.word	0x0802973c

08008e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e08:	f7ff ffdc 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	0b5b      	lsrs	r3, r3, #13
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	4903      	ldr	r1, [pc, #12]	; (8008e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e1a:	5ccb      	ldrb	r3, [r1, r3]
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40023800 	.word	0x40023800
 8008e28:	0802973c 	.word	0x0802973c

08008e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	220f      	movs	r2, #15
 8008e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 0203 	and.w	r2, r3, #3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e54:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <HAL_RCC_GetClockConfig+0x5c>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	08db      	lsrs	r3, r3, #3
 8008e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <HAL_RCC_GetClockConfig+0x60>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0207 	and.w	r2, r3, #7
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	601a      	str	r2, [r3, #0]
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40023c00 	.word	0x40023c00

08008e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e041      	b.n	8008f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f839 	bl	8008f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f000 f9d8 	bl	8009284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
	...

08008f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d001      	beq.n	8008f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e04e      	b.n	8008ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a23      	ldr	r2, [pc, #140]	; (8009008 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d022      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f86:	d01d      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a1f      	ldr	r2, [pc, #124]	; (800900c <HAL_TIM_Base_Start_IT+0xc8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d018      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d013      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a1c      	ldr	r2, [pc, #112]	; (8009014 <HAL_TIM_Base_Start_IT+0xd0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00e      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1b      	ldr	r2, [pc, #108]	; (8009018 <HAL_TIM_Base_Start_IT+0xd4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d009      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a19      	ldr	r2, [pc, #100]	; (800901c <HAL_TIM_Base_Start_IT+0xd8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d004      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x80>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a18      	ldr	r2, [pc, #96]	; (8009020 <HAL_TIM_Base_Start_IT+0xdc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d111      	bne.n	8008fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b06      	cmp	r3, #6
 8008fd4:	d010      	beq.n	8008ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f042 0201 	orr.w	r2, r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fe6:	e007      	b.n	8008ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0201 	orr.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	40010000 	.word	0x40010000
 800900c:	40000400 	.word	0x40000400
 8009010:	40000800 	.word	0x40000800
 8009014:	40000c00 	.word	0x40000c00
 8009018:	40010400 	.word	0x40010400
 800901c:	40014000 	.word	0x40014000
 8009020:	40001800 	.word	0x40001800

08009024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b02      	cmp	r3, #2
 8009038:	d122      	bne.n	8009080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b02      	cmp	r3, #2
 8009046:	d11b      	bne.n	8009080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f06f 0202 	mvn.w	r2, #2
 8009050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f8ee 	bl	8009248 <HAL_TIM_IC_CaptureCallback>
 800906c:	e005      	b.n	800907a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f8e0 	bl	8009234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f8f1 	bl	800925c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0304 	and.w	r3, r3, #4
 800908a:	2b04      	cmp	r3, #4
 800908c:	d122      	bne.n	80090d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b04      	cmp	r3, #4
 800909a:	d11b      	bne.n	80090d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0204 	mvn.w	r2, #4
 80090a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2202      	movs	r2, #2
 80090aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f8c4 	bl	8009248 <HAL_TIM_IC_CaptureCallback>
 80090c0:	e005      	b.n	80090ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f8b6 	bl	8009234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8c7 	bl	800925c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b08      	cmp	r3, #8
 80090e0:	d122      	bne.n	8009128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f003 0308 	and.w	r3, r3, #8
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d11b      	bne.n	8009128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0208 	mvn.w	r2, #8
 80090f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2204      	movs	r2, #4
 80090fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f89a 	bl	8009248 <HAL_TIM_IC_CaptureCallback>
 8009114:	e005      	b.n	8009122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f88c 	bl	8009234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f89d 	bl	800925c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0310 	and.w	r3, r3, #16
 8009132:	2b10      	cmp	r3, #16
 8009134:	d122      	bne.n	800917c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f003 0310 	and.w	r3, r3, #16
 8009140:	2b10      	cmp	r3, #16
 8009142:	d11b      	bne.n	800917c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0210 	mvn.w	r2, #16
 800914c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2208      	movs	r2, #8
 8009152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f870 	bl	8009248 <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f862 	bl	8009234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f873 	bl	800925c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b01      	cmp	r3, #1
 8009188:	d10e      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b01      	cmp	r3, #1
 8009196:	d107      	bne.n	80091a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0201 	mvn.w	r2, #1
 80091a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7f8 fdf0 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b2:	2b80      	cmp	r3, #128	; 0x80
 80091b4:	d10e      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b80      	cmp	r3, #128	; 0x80
 80091c2:	d107      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f902 	bl	80093d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091de:	2b40      	cmp	r3, #64	; 0x40
 80091e0:	d10e      	bne.n	8009200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d107      	bne.n	8009200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f838 	bl	8009270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b20      	cmp	r3, #32
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b20      	cmp	r3, #32
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0220 	mvn.w	r2, #32
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8cc 	bl	80093c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a40      	ldr	r2, [pc, #256]	; (8009398 <TIM_Base_SetConfig+0x114>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d013      	beq.n	80092c4 <TIM_Base_SetConfig+0x40>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a2:	d00f      	beq.n	80092c4 <TIM_Base_SetConfig+0x40>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a3d      	ldr	r2, [pc, #244]	; (800939c <TIM_Base_SetConfig+0x118>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00b      	beq.n	80092c4 <TIM_Base_SetConfig+0x40>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a3c      	ldr	r2, [pc, #240]	; (80093a0 <TIM_Base_SetConfig+0x11c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d007      	beq.n	80092c4 <TIM_Base_SetConfig+0x40>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a3b      	ldr	r2, [pc, #236]	; (80093a4 <TIM_Base_SetConfig+0x120>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d003      	beq.n	80092c4 <TIM_Base_SetConfig+0x40>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a3a      	ldr	r2, [pc, #232]	; (80093a8 <TIM_Base_SetConfig+0x124>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d108      	bne.n	80092d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a2f      	ldr	r2, [pc, #188]	; (8009398 <TIM_Base_SetConfig+0x114>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d02b      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e4:	d027      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a2c      	ldr	r2, [pc, #176]	; (800939c <TIM_Base_SetConfig+0x118>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d023      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a2b      	ldr	r2, [pc, #172]	; (80093a0 <TIM_Base_SetConfig+0x11c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01f      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2a      	ldr	r2, [pc, #168]	; (80093a4 <TIM_Base_SetConfig+0x120>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d01b      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a29      	ldr	r2, [pc, #164]	; (80093a8 <TIM_Base_SetConfig+0x124>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d017      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a28      	ldr	r2, [pc, #160]	; (80093ac <TIM_Base_SetConfig+0x128>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d013      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a27      	ldr	r2, [pc, #156]	; (80093b0 <TIM_Base_SetConfig+0x12c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d00f      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a26      	ldr	r2, [pc, #152]	; (80093b4 <TIM_Base_SetConfig+0x130>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00b      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a25      	ldr	r2, [pc, #148]	; (80093b8 <TIM_Base_SetConfig+0x134>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d007      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a24      	ldr	r2, [pc, #144]	; (80093bc <TIM_Base_SetConfig+0x138>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d003      	beq.n	8009336 <TIM_Base_SetConfig+0xb2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a23      	ldr	r2, [pc, #140]	; (80093c0 <TIM_Base_SetConfig+0x13c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d108      	bne.n	8009348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800933c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a0a      	ldr	r2, [pc, #40]	; (8009398 <TIM_Base_SetConfig+0x114>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d003      	beq.n	800937c <TIM_Base_SetConfig+0xf8>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a0c      	ldr	r2, [pc, #48]	; (80093a8 <TIM_Base_SetConfig+0x124>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d103      	bne.n	8009384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	615a      	str	r2, [r3, #20]
}
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40010000 	.word	0x40010000
 800939c:	40000400 	.word	0x40000400
 80093a0:	40000800 	.word	0x40000800
 80093a4:	40000c00 	.word	0x40000c00
 80093a8:	40010400 	.word	0x40010400
 80093ac:	40014000 	.word	0x40014000
 80093b0:	40014400 	.word	0x40014400
 80093b4:	40014800 	.word	0x40014800
 80093b8:	40001800 	.word	0x40001800
 80093bc:	40001c00 	.word	0x40001c00
 80093c0:	40002000 	.word	0x40002000

080093c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e03f      	b.n	800947e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7f9 f9b0 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2224      	movs	r2, #36	; 0x24
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800942e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f905 	bl	8009640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	695a      	ldr	r2, [r3, #20]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b08a      	sub	sp, #40	; 0x28
 800948a:	af02      	add	r7, sp, #8
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	603b      	str	r3, [r7, #0]
 8009492:	4613      	mov	r3, r2
 8009494:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d17c      	bne.n	80095a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <HAL_UART_Transmit+0x2c>
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e075      	b.n	80095a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d101      	bne.n	80094c4 <HAL_UART_Transmit+0x3e>
 80094c0:	2302      	movs	r3, #2
 80094c2:	e06e      	b.n	80095a2 <HAL_UART_Transmit+0x11c>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2221      	movs	r2, #33	; 0x21
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094da:	f7fc f8c3 	bl	8005664 <HAL_GetTick>
 80094de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	88fa      	ldrh	r2, [r7, #6]
 80094e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	88fa      	ldrh	r2, [r7, #6]
 80094ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f4:	d108      	bne.n	8009508 <HAL_UART_Transmit+0x82>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d104      	bne.n	8009508 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	61bb      	str	r3, [r7, #24]
 8009506:	e003      	b.n	8009510 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800950c:	2300      	movs	r3, #0
 800950e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009518:	e02a      	b.n	8009570 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2200      	movs	r2, #0
 8009522:	2180      	movs	r1, #128	; 0x80
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f840 	bl	80095aa <UART_WaitOnFlagUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e036      	b.n	80095a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009548:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	3302      	adds	r3, #2
 800954e:	61bb      	str	r3, [r7, #24]
 8009550:	e007      	b.n	8009562 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	781a      	ldrb	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	3301      	adds	r3, #1
 8009560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009566:	b29b      	uxth	r3, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009574:	b29b      	uxth	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1cf      	bne.n	800951a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2200      	movs	r2, #0
 8009582:	2140      	movs	r1, #64	; 0x40
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f810 	bl	80095aa <UART_WaitOnFlagUntilTimeout>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e006      	b.n	80095a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2220      	movs	r2, #32
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	e000      	b.n	80095a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80095a0:	2302      	movs	r3, #2
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	603b      	str	r3, [r7, #0]
 80095b6:	4613      	mov	r3, r2
 80095b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ba:	e02c      	b.n	8009616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095c2:	d028      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0x30>
 80095ca:	f7fc f84b 	bl	8005664 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d21d      	bcs.n	8009616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	695a      	ldr	r2, [r3, #20]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0201 	bic.w	r2, r2, #1
 80095f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e00f      	b.n	8009636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	bf0c      	ite	eq
 8009626:	2301      	moveq	r3, #1
 8009628:	2300      	movne	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	429a      	cmp	r2, r3
 8009632:	d0c3      	beq.n	80095bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	b09f      	sub	sp, #124	; 0x7c
 8009646:	af00      	add	r7, sp, #0
 8009648:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800964a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009656:	68d9      	ldr	r1, [r3, #12]
 8009658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	ea40 0301 	orr.w	r3, r0, r1
 8009660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	431a      	orrs	r2, r3
 800966c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	431a      	orrs	r2, r3
 8009672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	4313      	orrs	r3, r2
 8009678:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800967a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009684:	f021 010c 	bic.w	r1, r1, #12
 8009688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800968e:	430b      	orrs	r3, r1
 8009690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800969c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800969e:	6999      	ldr	r1, [r3, #24]
 80096a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	ea40 0301 	orr.w	r3, r0, r1
 80096a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	4bc5      	ldr	r3, [pc, #788]	; (80099c4 <UART_SetConfig+0x384>)
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d004      	beq.n	80096be <UART_SetConfig+0x7e>
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	4bc3      	ldr	r3, [pc, #780]	; (80099c8 <UART_SetConfig+0x388>)
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d103      	bne.n	80096c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096be:	f7ff fba1 	bl	8008e04 <HAL_RCC_GetPCLK2Freq>
 80096c2:	6778      	str	r0, [r7, #116]	; 0x74
 80096c4:	e002      	b.n	80096cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096c6:	f7ff fb89 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 80096ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096d4:	f040 80b6 	bne.w	8009844 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096da:	461c      	mov	r4, r3
 80096dc:	f04f 0500 	mov.w	r5, #0
 80096e0:	4622      	mov	r2, r4
 80096e2:	462b      	mov	r3, r5
 80096e4:	1891      	adds	r1, r2, r2
 80096e6:	6439      	str	r1, [r7, #64]	; 0x40
 80096e8:	415b      	adcs	r3, r3
 80096ea:	647b      	str	r3, [r7, #68]	; 0x44
 80096ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096f0:	1912      	adds	r2, r2, r4
 80096f2:	eb45 0303 	adc.w	r3, r5, r3
 80096f6:	f04f 0000 	mov.w	r0, #0
 80096fa:	f04f 0100 	mov.w	r1, #0
 80096fe:	00d9      	lsls	r1, r3, #3
 8009700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009704:	00d0      	lsls	r0, r2, #3
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	1911      	adds	r1, r2, r4
 800970c:	6639      	str	r1, [r7, #96]	; 0x60
 800970e:	416b      	adcs	r3, r5
 8009710:	667b      	str	r3, [r7, #100]	; 0x64
 8009712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	461a      	mov	r2, r3
 8009718:	f04f 0300 	mov.w	r3, #0
 800971c:	1891      	adds	r1, r2, r2
 800971e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009720:	415b      	adcs	r3, r3
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009728:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800972c:	f7f7 fa9c 	bl	8000c68 <__aeabi_uldivmod>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4ba5      	ldr	r3, [pc, #660]	; (80099cc <UART_SetConfig+0x38c>)
 8009736:	fba3 2302 	umull	r2, r3, r3, r2
 800973a:	095b      	lsrs	r3, r3, #5
 800973c:	011e      	lsls	r6, r3, #4
 800973e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009740:	461c      	mov	r4, r3
 8009742:	f04f 0500 	mov.w	r5, #0
 8009746:	4622      	mov	r2, r4
 8009748:	462b      	mov	r3, r5
 800974a:	1891      	adds	r1, r2, r2
 800974c:	6339      	str	r1, [r7, #48]	; 0x30
 800974e:	415b      	adcs	r3, r3
 8009750:	637b      	str	r3, [r7, #52]	; 0x34
 8009752:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009756:	1912      	adds	r2, r2, r4
 8009758:	eb45 0303 	adc.w	r3, r5, r3
 800975c:	f04f 0000 	mov.w	r0, #0
 8009760:	f04f 0100 	mov.w	r1, #0
 8009764:	00d9      	lsls	r1, r3, #3
 8009766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800976a:	00d0      	lsls	r0, r2, #3
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	1911      	adds	r1, r2, r4
 8009772:	65b9      	str	r1, [r7, #88]	; 0x58
 8009774:	416b      	adcs	r3, r5
 8009776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	461a      	mov	r2, r3
 800977e:	f04f 0300 	mov.w	r3, #0
 8009782:	1891      	adds	r1, r2, r2
 8009784:	62b9      	str	r1, [r7, #40]	; 0x28
 8009786:	415b      	adcs	r3, r3
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800978a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800978e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009792:	f7f7 fa69 	bl	8000c68 <__aeabi_uldivmod>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4b8c      	ldr	r3, [pc, #560]	; (80099cc <UART_SetConfig+0x38c>)
 800979c:	fba3 1302 	umull	r1, r3, r3, r2
 80097a0:	095b      	lsrs	r3, r3, #5
 80097a2:	2164      	movs	r1, #100	; 0x64
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	3332      	adds	r3, #50	; 0x32
 80097ae:	4a87      	ldr	r2, [pc, #540]	; (80099cc <UART_SetConfig+0x38c>)
 80097b0:	fba2 2303 	umull	r2, r3, r2, r3
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097bc:	441e      	add	r6, r3
 80097be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c0:	4618      	mov	r0, r3
 80097c2:	f04f 0100 	mov.w	r1, #0
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	1894      	adds	r4, r2, r2
 80097cc:	623c      	str	r4, [r7, #32]
 80097ce:	415b      	adcs	r3, r3
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
 80097d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097d6:	1812      	adds	r2, r2, r0
 80097d8:	eb41 0303 	adc.w	r3, r1, r3
 80097dc:	f04f 0400 	mov.w	r4, #0
 80097e0:	f04f 0500 	mov.w	r5, #0
 80097e4:	00dd      	lsls	r5, r3, #3
 80097e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097ea:	00d4      	lsls	r4, r2, #3
 80097ec:	4622      	mov	r2, r4
 80097ee:	462b      	mov	r3, r5
 80097f0:	1814      	adds	r4, r2, r0
 80097f2:	653c      	str	r4, [r7, #80]	; 0x50
 80097f4:	414b      	adcs	r3, r1
 80097f6:	657b      	str	r3, [r7, #84]	; 0x54
 80097f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	461a      	mov	r2, r3
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	1891      	adds	r1, r2, r2
 8009804:	61b9      	str	r1, [r7, #24]
 8009806:	415b      	adcs	r3, r3
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800980e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009812:	f7f7 fa29 	bl	8000c68 <__aeabi_uldivmod>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4b6c      	ldr	r3, [pc, #432]	; (80099cc <UART_SetConfig+0x38c>)
 800981c:	fba3 1302 	umull	r1, r3, r3, r2
 8009820:	095b      	lsrs	r3, r3, #5
 8009822:	2164      	movs	r1, #100	; 0x64
 8009824:	fb01 f303 	mul.w	r3, r1, r3
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	3332      	adds	r3, #50	; 0x32
 800982e:	4a67      	ldr	r2, [pc, #412]	; (80099cc <UART_SetConfig+0x38c>)
 8009830:	fba2 2303 	umull	r2, r3, r2, r3
 8009834:	095b      	lsrs	r3, r3, #5
 8009836:	f003 0207 	and.w	r2, r3, #7
 800983a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4432      	add	r2, r6
 8009840:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009842:	e0b9      	b.n	80099b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009846:	461c      	mov	r4, r3
 8009848:	f04f 0500 	mov.w	r5, #0
 800984c:	4622      	mov	r2, r4
 800984e:	462b      	mov	r3, r5
 8009850:	1891      	adds	r1, r2, r2
 8009852:	6139      	str	r1, [r7, #16]
 8009854:	415b      	adcs	r3, r3
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800985c:	1912      	adds	r2, r2, r4
 800985e:	eb45 0303 	adc.w	r3, r5, r3
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f04f 0100 	mov.w	r1, #0
 800986a:	00d9      	lsls	r1, r3, #3
 800986c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009870:	00d0      	lsls	r0, r2, #3
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	eb12 0804 	adds.w	r8, r2, r4
 800987a:	eb43 0905 	adc.w	r9, r3, r5
 800987e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	4618      	mov	r0, r3
 8009884:	f04f 0100 	mov.w	r1, #0
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	f04f 0300 	mov.w	r3, #0
 8009890:	008b      	lsls	r3, r1, #2
 8009892:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009896:	0082      	lsls	r2, r0, #2
 8009898:	4640      	mov	r0, r8
 800989a:	4649      	mov	r1, r9
 800989c:	f7f7 f9e4 	bl	8000c68 <__aeabi_uldivmod>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4b49      	ldr	r3, [pc, #292]	; (80099cc <UART_SetConfig+0x38c>)
 80098a6:	fba3 2302 	umull	r2, r3, r3, r2
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	011e      	lsls	r6, r3, #4
 80098ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098b0:	4618      	mov	r0, r3
 80098b2:	f04f 0100 	mov.w	r1, #0
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	1894      	adds	r4, r2, r2
 80098bc:	60bc      	str	r4, [r7, #8]
 80098be:	415b      	adcs	r3, r3
 80098c0:	60fb      	str	r3, [r7, #12]
 80098c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098c6:	1812      	adds	r2, r2, r0
 80098c8:	eb41 0303 	adc.w	r3, r1, r3
 80098cc:	f04f 0400 	mov.w	r4, #0
 80098d0:	f04f 0500 	mov.w	r5, #0
 80098d4:	00dd      	lsls	r5, r3, #3
 80098d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098da:	00d4      	lsls	r4, r2, #3
 80098dc:	4622      	mov	r2, r4
 80098de:	462b      	mov	r3, r5
 80098e0:	1814      	adds	r4, r2, r0
 80098e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80098e4:	414b      	adcs	r3, r1
 80098e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f04f 0100 	mov.w	r1, #0
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	f04f 0300 	mov.w	r3, #0
 80098fa:	008b      	lsls	r3, r1, #2
 80098fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009900:	0082      	lsls	r2, r0, #2
 8009902:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009906:	f7f7 f9af 	bl	8000c68 <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4b2f      	ldr	r3, [pc, #188]	; (80099cc <UART_SetConfig+0x38c>)
 8009910:	fba3 1302 	umull	r1, r3, r3, r2
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	2164      	movs	r1, #100	; 0x64
 8009918:	fb01 f303 	mul.w	r3, r1, r3
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	3332      	adds	r3, #50	; 0x32
 8009922:	4a2a      	ldr	r2, [pc, #168]	; (80099cc <UART_SetConfig+0x38c>)
 8009924:	fba2 2303 	umull	r2, r3, r2, r3
 8009928:	095b      	lsrs	r3, r3, #5
 800992a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800992e:	441e      	add	r6, r3
 8009930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009932:	4618      	mov	r0, r3
 8009934:	f04f 0100 	mov.w	r1, #0
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	1894      	adds	r4, r2, r2
 800993e:	603c      	str	r4, [r7, #0]
 8009940:	415b      	adcs	r3, r3
 8009942:	607b      	str	r3, [r7, #4]
 8009944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009948:	1812      	adds	r2, r2, r0
 800994a:	eb41 0303 	adc.w	r3, r1, r3
 800994e:	f04f 0400 	mov.w	r4, #0
 8009952:	f04f 0500 	mov.w	r5, #0
 8009956:	00dd      	lsls	r5, r3, #3
 8009958:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800995c:	00d4      	lsls	r4, r2, #3
 800995e:	4622      	mov	r2, r4
 8009960:	462b      	mov	r3, r5
 8009962:	eb12 0a00 	adds.w	sl, r2, r0
 8009966:	eb43 0b01 	adc.w	fp, r3, r1
 800996a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	4618      	mov	r0, r3
 8009970:	f04f 0100 	mov.w	r1, #0
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	008b      	lsls	r3, r1, #2
 800997e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009982:	0082      	lsls	r2, r0, #2
 8009984:	4650      	mov	r0, sl
 8009986:	4659      	mov	r1, fp
 8009988:	f7f7 f96e 	bl	8000c68 <__aeabi_uldivmod>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <UART_SetConfig+0x38c>)
 8009992:	fba3 1302 	umull	r1, r3, r3, r2
 8009996:	095b      	lsrs	r3, r3, #5
 8009998:	2164      	movs	r1, #100	; 0x64
 800999a:	fb01 f303 	mul.w	r3, r1, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	3332      	adds	r3, #50	; 0x32
 80099a4:	4a09      	ldr	r2, [pc, #36]	; (80099cc <UART_SetConfig+0x38c>)
 80099a6:	fba2 2303 	umull	r2, r3, r2, r3
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	f003 020f 	and.w	r2, r3, #15
 80099b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4432      	add	r2, r6
 80099b6:	609a      	str	r2, [r3, #8]
}
 80099b8:	bf00      	nop
 80099ba:	377c      	adds	r7, #124	; 0x7c
 80099bc:	46bd      	mov	sp, r7
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c2:	bf00      	nop
 80099c4:	40011000 	.word	0x40011000
 80099c8:	40011400 	.word	0x40011400
 80099cc:	51eb851f 	.word	0x51eb851f

080099d0 <DB4_write>:
	{ 0x61, 0xB2, 0xB3, 0xB4, 0xE3, 0x65, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xEF, 0xBE },
	{ 0x70, 0x63, 0xBF, 0x79, 0xE4, 0xD5, 0xE5, 0xC0, 0xC1, 0xE6, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7 }
};
#endif
static void DB4_write(int state)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	if (state == 1)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d106      	bne.n	80099ec <DB4_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB4_BIT);
 80099de:	2201      	movs	r2, #1
 80099e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80099e4:	4808      	ldr	r0, [pc, #32]	; (8009a08 <DB4_write+0x38>)
 80099e6:	f7fc fa2f 	bl	8005e48 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
	}
}
 80099ea:	e008      	b.n	80099fe <DB4_write+0x2e>
	else if (state == 0)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <DB4_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
 80099f2:	2200      	movs	r2, #0
 80099f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80099f8:	4803      	ldr	r0, [pc, #12]	; (8009a08 <DB4_write+0x38>)
 80099fa:	f7fc fa25 	bl	8005e48 <HAL_GPIO_WritePin>
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40021000 	.word	0x40021000

08009a0c <DB5_write>:

static void DB5_write(int state)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d106      	bne.n	8009a28 <DB5_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB5_BIT);
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a20:	4808      	ldr	r0, [pc, #32]	; (8009a44 <DB5_write+0x38>)
 8009a22:	f7fc fa11 	bl	8005e48 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
	}
}
 8009a26:	e008      	b.n	8009a3a <DB5_write+0x2e>
	else if (state == 0)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <DB5_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a34:	4803      	ldr	r0, [pc, #12]	; (8009a44 <DB5_write+0x38>)
 8009a36:	f7fc fa07 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40021000 	.word	0x40021000

08009a48 <DB6_write>:

static void DB6_write(int state)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d106      	bne.n	8009a64 <DB6_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB6_BIT);
 8009a56:	2201      	movs	r2, #1
 8009a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009a5c:	4808      	ldr	r0, [pc, #32]	; (8009a80 <DB6_write+0x38>)
 8009a5e:	f7fc f9f3 	bl	8005e48 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
	}
}
 8009a62:	e008      	b.n	8009a76 <DB6_write+0x2e>
	else if (state == 0)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <DB6_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009a70:	4803      	ldr	r0, [pc, #12]	; (8009a80 <DB6_write+0x38>)
 8009a72:	f7fc f9e9 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	40021000 	.word	0x40021000

08009a84 <DB7_write>:

static void DB7_write(int state)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d106      	bne.n	8009aa0 <DB7_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB7_BIT);
 8009a92:	2201      	movs	r2, #1
 8009a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a98:	4808      	ldr	r0, [pc, #32]	; (8009abc <DB7_write+0x38>)
 8009a9a:	f7fc f9d5 	bl	8005e48 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
	}
}
 8009a9e:	e008      	b.n	8009ab2 <DB7_write+0x2e>
	else if (state == 0)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <DB7_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009aac:	4803      	ldr	r0, [pc, #12]	; (8009abc <DB7_write+0x38>)
 8009aae:	f7fc f9cb 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40021000 	.word	0x40021000

08009ac0 <lcd_clock>:

static inline void lcd_clock()
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
	lcd_en_set;
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009aca:	4808      	ldr	r0, [pc, #32]	; (8009aec <lcd_clock+0x2c>)
 8009acc:	f7fc f9bc 	bl	8005e48 <HAL_GPIO_WritePin>
	delay_us( 10 );
 8009ad0:	200a      	movs	r0, #10
 8009ad2:	f7f9 ffa7 	bl	8003a24 <delay_us>
	lcd_en_clear;
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009adc:	4803      	ldr	r0, [pc, #12]	; (8009aec <lcd_clock+0x2c>)
 8009ade:	f7fc f9b3 	bl	8005e48 <HAL_GPIO_WritePin>
	delay_us( 10 );
 8009ae2:	200a      	movs	r0, #10
 8009ae4:	f7f9 ff9e 	bl	8003a24 <delay_us>
}
 8009ae8:	bf00      	nop
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	40021000 	.word	0x40021000

08009af0 <lcd_bus_write>:
	DB6_write,
	DB7_write,
};

static void lcd_bus_write(char data)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
	delay_us( 100 );
 8009afa:	2064      	movs	r0, #100	; 0x64
 8009afc:	f7f9 ff92 	bl	8003a24 <delay_us>
	for(size_t i = 0; i < 4; i++)
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e017      	b.n	8009b36 <lcd_bus_write+0x46>
	{
		if (data & ( 1 << i ))
 8009b06:	79fa      	ldrb	r2, [r7, #7]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	fa42 f303 	asr.w	r3, r2, r3
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d006      	beq.n	8009b24 <lcd_bus_write+0x34>
		{
			bit_write[i](1);
 8009b16:	4a0c      	ldr	r2, [pc, #48]	; (8009b48 <lcd_bus_write+0x58>)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b1e:	2001      	movs	r0, #1
 8009b20:	4798      	blx	r3
 8009b22:	e005      	b.n	8009b30 <lcd_bus_write+0x40>
		}
		else
		{
			bit_write[i](0);
 8009b24:	4a08      	ldr	r2, [pc, #32]	; (8009b48 <lcd_bus_write+0x58>)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	4798      	blx	r3
	for(size_t i = 0; i < 4; i++)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3301      	adds	r3, #1
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d9e4      	bls.n	8009b06 <lcd_bus_write+0x16>
		}
	}
	lcd_clock();
 8009b3c:	f7ff ffc0 	bl	8009ac0 <lcd_clock>
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20000050 	.word	0x20000050

08009b4c <lcd_command_set>:

void lcd_command_set(char command )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	71fb      	strb	r3, [r7, #7]
	lcd_rs_clear;			/* R/S = 0 */
 8009b56:	2200      	movs	r2, #0
 8009b58:	2180      	movs	r1, #128	; 0x80
 8009b5a:	480e      	ldr	r0, [pc, #56]	; (8009b94 <lcd_command_set+0x48>)
 8009b5c:	f7fc f974 	bl	8005e48 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8009b60:	2200      	movs	r2, #0
 8009b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009b66:	480b      	ldr	r0, [pc, #44]	; (8009b94 <lcd_command_set+0x48>)
 8009b68:	f7fc f96e 	bl	8005e48 <HAL_GPIO_WritePin>
	delay_ms( 10 );
 8009b6c:	200a      	movs	r0, #10
 8009b6e:	f7f9 ff64 	bl	8003a3a <delay_ms>
	lcd_bus_write(command >> 4);
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	091b      	lsrs	r3, r3, #4
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7ff ffb9 	bl	8009af0 <lcd_bus_write>
	lcd_bus_write(command & 0x0F);
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	f003 030f 	and.w	r3, r3, #15
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff ffb2 	bl	8009af0 <lcd_bus_write>
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	40021000 	.word	0x40021000

08009b98 <lcd_init>:

void lcd_init( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	lcd_rw_clear;
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ba2:	4818      	ldr	r0, [pc, #96]	; (8009c04 <lcd_init+0x6c>)
 8009ba4:	f7fc f950 	bl	8005e48 <HAL_GPIO_WritePin>
	lcd_rs_clear;
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	4815      	ldr	r0, [pc, #84]	; (8009c04 <lcd_init+0x6c>)
 8009bae:	f7fc f94b 	bl	8005e48 <HAL_GPIO_WritePin>

	lcd_bus_write(0x03);
 8009bb2:	2003      	movs	r0, #3
 8009bb4:	f7ff ff9c 	bl	8009af0 <lcd_bus_write>
	delay_ms( 5 );
 8009bb8:	2005      	movs	r0, #5
 8009bba:	f7f9 ff3e 	bl	8003a3a <delay_ms>

	lcd_bus_write(0x03);
 8009bbe:	2003      	movs	r0, #3
 8009bc0:	f7ff ff96 	bl	8009af0 <lcd_bus_write>
	delay_us( 100 );
 8009bc4:	2064      	movs	r0, #100	; 0x64
 8009bc6:	f7f9 ff2d 	bl	8003a24 <delay_us>

	lcd_bus_write(0x03);
 8009bca:	2003      	movs	r0, #3
 8009bcc:	f7ff ff90 	bl	8009af0 <lcd_bus_write>

	lcd_bus_write(0x02);
 8009bd0:	2002      	movs	r0, #2
 8009bd2:	f7ff ff8d 	bl	8009af0 <lcd_bus_write>
	delay_ms( 10 );
 8009bd6:	200a      	movs	r0, #10
 8009bd8:	f7f9 ff2f 	bl	8003a3a <delay_ms>

	lcd_command_set(LCD_INIT1_CMD);
 8009bdc:	2028      	movs	r0, #40	; 0x28
 8009bde:	f7ff ffb5 	bl	8009b4c <lcd_command_set>
	delay_ms( 1 );
 8009be2:	2001      	movs	r0, #1
 8009be4:	f7f9 ff29 	bl	8003a3a <delay_ms>

	lcd_command_set(LCD_INIT2_CMD);
 8009be8:	200c      	movs	r0, #12
 8009bea:	f7ff ffaf 	bl	8009b4c <lcd_command_set>
	delay_ms( 1 );
 8009bee:	2001      	movs	r0, #1
 8009bf0:	f7f9 ff23 	bl	8003a3a <delay_ms>

	lcd_command_set(LCD_INIT3_CMD);
 8009bf4:	2006      	movs	r0, #6
 8009bf6:	f7ff ffa9 	bl	8009b4c <lcd_command_set>
	delay_ms( 1 );
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	f7f9 ff1d 	bl	8003a3a <delay_ms>
}
 8009c00:	bf00      	nop
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	40021000 	.word	0x40021000

08009c08 <lcd_putchar>:

void lcd_putchar( char data )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
	lcd_rs_set;
 8009c12:	2201      	movs	r2, #1
 8009c14:	2180      	movs	r1, #128	; 0x80
 8009c16:	480e      	ldr	r0, [pc, #56]	; (8009c50 <lcd_putchar+0x48>)
 8009c18:	f7fc f916 	bl	8005e48 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c22:	480b      	ldr	r0, [pc, #44]	; (8009c50 <lcd_putchar+0x48>)
 8009c24:	f7fc f910 	bl	8005e48 <HAL_GPIO_WritePin>

	delay_ms( 10 );
 8009c28:	200a      	movs	r0, #10
 8009c2a:	f7f9 ff06 	bl	8003a3a <delay_ms>

	lcd_bus_write(data >> 4);
 8009c2e:	79fb      	ldrb	r3, [r7, #7]
 8009c30:	091b      	lsrs	r3, r3, #4
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff ff5b 	bl	8009af0 <lcd_bus_write>
	lcd_bus_write(data & 0x0F);
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	f003 030f 	and.w	r3, r3, #15
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff ff54 	bl	8009af0 <lcd_bus_write>
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40021000 	.word	0x40021000

08009c54 <lcd_puts>:

bool lcd_puts( char * string )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	if( string == NULL )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <lcd_puts+0x12>
	{
		return false;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e014      	b.n	8009c90 <lcd_puts+0x3c>
	}
	for(size_t i = 0; i < strlen( string ); i++ )
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	e009      	b.n	8009c80 <lcd_puts+0x2c>
	{
		lcd_putchar(string[i]);
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff ffc7 	bl	8009c08 <lcd_putchar>
	for(size_t i = 0; i < strlen( string ); i++ )
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7f6 faaf 	bl	80001e4 <strlen>
 8009c86:	4602      	mov	r2, r0
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d3ee      	bcc.n	8009c6c <lcd_puts+0x18>
	}
	return true;
 8009c8e:	2301      	movs	r3, #1
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <lwip_get_netif>:
ip4_addr_t netmask;
ip4_addr_t gw;

/* USER CODE BEGIN 2 */
const struct netif * const lwip_get_netif()
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
	return &gnetif;
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <lwip_get_netif+0x10>)
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20014620 	.word	0x20014620

08009cac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009cac:	b5b0      	push	{r4, r5, r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	f008 fab7 	bl	8012228 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8009cba:	4b2a      	ldr	r3, [pc, #168]	; (8009d64 <MX_LWIP_Init+0xb8>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009cc0:	4b29      	ldr	r3, [pc, #164]	; (8009d68 <MX_LWIP_Init+0xbc>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009cc6:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <MX_LWIP_Init+0xc0>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009ccc:	4b28      	ldr	r3, [pc, #160]	; (8009d70 <MX_LWIP_Init+0xc4>)
 8009cce:	9302      	str	r3, [sp, #8]
 8009cd0:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <MX_LWIP_Init+0xc8>)
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4b24      	ldr	r3, [pc, #144]	; (8009d6c <MX_LWIP_Init+0xc0>)
 8009cda:	4a23      	ldr	r2, [pc, #140]	; (8009d68 <MX_LWIP_Init+0xbc>)
 8009cdc:	4921      	ldr	r1, [pc, #132]	; (8009d64 <MX_LWIP_Init+0xb8>)
 8009cde:	4826      	ldr	r0, [pc, #152]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009ce0:	f009 fffc 	bl	8013cdc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009ce4:	4824      	ldr	r0, [pc, #144]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009ce6:	f00a f9b3 	bl	8014050 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009cea:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009cec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cf0:	089b      	lsrs	r3, r3, #2
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009cfc:	481e      	ldr	r0, [pc, #120]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009cfe:	f00a f9b7 	bl	8014070 <netif_set_up>
 8009d02:	e002      	b.n	8009d0a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009d04:	481c      	ldr	r0, [pc, #112]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009d06:	f00a fa1f 	bl	8014148 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009d0a:	491c      	ldr	r1, [pc, #112]	; (8009d7c <MX_LWIP_Init+0xd0>)
 8009d0c:	481a      	ldr	r0, [pc, #104]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009d0e:	f00a fab5 	bl	801427c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8009d12:	2300      	movs	r3, #0
 8009d14:	617b      	str	r3, [r7, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8009d16:	f107 0314 	add.w	r3, r7, #20
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 fde1 	bl	800a8e4 <osSemaphoreCreate>
 8009d22:	4603      	mov	r3, r0
 8009d24:	4a16      	ldr	r2, [pc, #88]	; (8009d80 <MX_LWIP_Init+0xd4>)
 8009d26:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8009d28:	4b16      	ldr	r3, [pc, #88]	; (8009d84 <MX_LWIP_Init+0xd8>)
 8009d2a:	4a13      	ldr	r2, [pc, #76]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009d2c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <MX_LWIP_Init+0xd4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a14      	ldr	r2, [pc, #80]	; (8009d84 <MX_LWIP_Init+0xd8>)
 8009d34:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, link_state, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8009d36:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <MX_LWIP_Init+0xdc>)
 8009d38:	463c      	mov	r4, r7
 8009d3a:	461d      	mov	r5, r3
 8009d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	6023      	str	r3, [r4, #0]
  linkStateTaskHandle = osThreadCreate (osThread(LinkThr), &link_arg);
 8009d44:	463b      	mov	r3, r7
 8009d46:	490f      	ldr	r1, [pc, #60]	; (8009d84 <MX_LWIP_Init+0xd8>)
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fc60 	bl	800a60e <osThreadCreate>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4a0e      	ldr	r2, [pc, #56]	; (8009d8c <MX_LWIP_Init+0xe0>)
 8009d52:	6013      	str	r3, [r2, #0]
  //osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  //osThreadCreate (osThread(LinkThr), &link_arg);
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009d54:	4808      	ldr	r0, [pc, #32]	; (8009d78 <MX_LWIP_Init+0xcc>)
 8009d56:	f012 ff33 	bl	801cbc0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009d5a:	bf00      	nop
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bdb0      	pop	{r4, r5, r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20014658 	.word	0x20014658
 8009d68:	2001465c 	.word	0x2001465c
 8009d6c:	20014660 	.word	0x20014660
 8009d70:	08012139 	.word	0x08012139
 8009d74:	0800a415 	.word	0x0800a415
 8009d78:	20014620 	.word	0x20014620
 8009d7c:	0800a481 	.word	0x0800a481
 8009d80:	20000328 	.word	0x20000328
 8009d84:	20014618 	.word	0x20014618
 8009d88:	080257bc 	.word	0x080257bc
 8009d8c:	20000324 	.word	0x20000324

08009d90 <ethernetif_phy_irq>:
/* Global Ethernet handle */
ETH_HandleTypeDef heth;

/* USER CODE BEGIN 3 */
void ethernetif_phy_irq()
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
	osSignalSet (linkStateTaskHandle, SIGNAL_LINK_INTERRUPT);
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <ethernetif_phy_irq+0x14>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2104      	movs	r1, #4
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fc86 	bl	800a6ac <osSignalSet>
}
 8009da0:	bf00      	nop
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20000324 	.word	0x20000324

08009da8 <link_state>:

void link_state(const void * arg)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
    struct link_str *link_arg = (struct link_str *)arg;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	61fb      	str	r3, [r7, #28]
    uint32_t regval = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61bb      	str	r3, [r7, #24]
    osEvent event;

    for (;;)
    {
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dc0:	2104      	movs	r1, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fcb2 	bl	800a72c <osSignalWait>

        if (event.status == osEventSignal)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d1f4      	bne.n	8009db8 <link_state+0x10>
        {
            /* Read PHY_MISR*/
            HAL_ETH_ReadPHYRegister((ETH_HandleTypeDef *)&heth, PHY_INTERRUPT_STATUS, &regval);
 8009dce:	f107 0318 	add.w	r3, r7, #24
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	211b      	movs	r1, #27
 8009dd6:	480f      	ldr	r0, [pc, #60]	; (8009e14 <link_state+0x6c>)
 8009dd8:	f7fa fec7 	bl	8004b6a <HAL_ETH_ReadPHYRegister>

            /* Check whether the PHY link is up */
            if (regval & PHY_LINK_INT_UP_OCCURRED)
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d008      	beq.n	8009df8 <link_state+0x50>
            {
                /* network cable is connected */
                netif_set_link_up(link_arg->netif);
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f00a f9de 	bl	80141ac <netif_set_link_up>
				BSP_LED_Off(RED);
 8009df0:	2002      	movs	r0, #2
 8009df2:	f7f9 febf 	bl	8003b74 <BSP_LED_Off>
 8009df6:	e7df      	b.n	8009db8 <link_state+0x10>
            }
            else if (regval & PHY_LINK_INT_DOWN_OCCURED)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0da      	beq.n	8009db8 <link_state+0x10>
            {
            	/* network cable is dis-connected */
                netif_set_link_down(link_arg->netif);
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f00a fa08 	bl	801421c <netif_set_link_down>
				BSP_LED_On(RED);
 8009e0c:	2002      	movs	r0, #2
 8009e0e:	f7f9 fe97 	bl	8003b40 <BSP_LED_On>
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8009e12:	e7d1      	b.n	8009db8 <link_state+0x10>
 8009e14:	20015f34 	.word	0x20015f34

08009e18 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08e      	sub	sp, #56	; 0x38
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	609a      	str	r2, [r3, #8]
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a4a      	ldr	r2, [pc, #296]	; (8009f60 <HAL_ETH_MspInit+0x148>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	f040 808d 	bne.w	8009f56 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	623b      	str	r3, [r7, #32]
 8009e40:	4b48      	ldr	r3, [pc, #288]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	4a47      	ldr	r2, [pc, #284]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8009e4c:	4b45      	ldr	r3, [pc, #276]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e54:	623b      	str	r3, [r7, #32]
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	2300      	movs	r3, #0
 8009e5a:	61fb      	str	r3, [r7, #28]
 8009e5c:	4b41      	ldr	r3, [pc, #260]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e60:	4a40      	ldr	r2, [pc, #256]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e66:	6313      	str	r3, [r2, #48]	; 0x30
 8009e68:	4b3e      	ldr	r3, [pc, #248]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2300      	movs	r3, #0
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	4b3a      	ldr	r3, [pc, #232]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	4a39      	ldr	r2, [pc, #228]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e82:	6313      	str	r3, [r2, #48]	; 0x30
 8009e84:	4b37      	ldr	r3, [pc, #220]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	4b33      	ldr	r3, [pc, #204]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e98:	4a32      	ldr	r2, [pc, #200]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009e9a:	f043 0304 	orr.w	r3, r3, #4
 8009e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea0:	4b30      	ldr	r3, [pc, #192]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	4b2c      	ldr	r3, [pc, #176]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb4:	4a2b      	ldr	r2, [pc, #172]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009eb6:	f043 0301 	orr.w	r3, r3, #1
 8009eba:	6313      	str	r3, [r2, #48]	; 0x30
 8009ebc:	4b29      	ldr	r3, [pc, #164]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	613b      	str	r3, [r7, #16]
 8009ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	4b25      	ldr	r3, [pc, #148]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	4a24      	ldr	r2, [pc, #144]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009ed2:	f043 0302 	orr.w	r3, r3, #2
 8009ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ed8:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <HAL_ETH_MspInit+0x14c>)
 8009eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009ee4:	2332      	movs	r3, #50	; 0x32
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009ef4:	230b      	movs	r3, #11
 8009ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009efc:	4619      	mov	r1, r3
 8009efe:	481a      	ldr	r0, [pc, #104]	; (8009f68 <HAL_ETH_MspInit+0x150>)
 8009f00:	f7fb fcf2 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009f04:	2386      	movs	r3, #134	; 0x86
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f10:	2303      	movs	r3, #3
 8009f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f14:	230b      	movs	r3, #11
 8009f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4813      	ldr	r0, [pc, #76]	; (8009f6c <HAL_ETH_MspInit+0x154>)
 8009f20:	f7fb fce2 	bl	80058e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXEN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8009f24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f32:	2303      	movs	r3, #3
 8009f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009f36:	230b      	movs	r3, #11
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3e:	4619      	mov	r1, r3
 8009f40:	480b      	ldr	r0, [pc, #44]	; (8009f70 <HAL_ETH_MspInit+0x158>)
 8009f42:	f7fb fcd1 	bl	80058e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009f46:	2200      	movs	r2, #0
 8009f48:	2105      	movs	r1, #5
 8009f4a:	203d      	movs	r0, #61	; 0x3d
 8009f4c:	f7fb fc72 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009f50:	203d      	movs	r0, #61	; 0x3d
 8009f52:	f7fb fc8b 	bl	800586c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009f56:	bf00      	nop
 8009f58:	3738      	adds	r7, #56	; 0x38
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	40028000 	.word	0x40028000
 8009f64:	40023800 	.word	0x40023800
 8009f68:	40020800 	.word	0x40020800
 8009f6c:	40020000 	.word	0x40020000
 8009f70:	40020400 	.word	0x40020400

08009f74 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009f7c:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <HAL_ETH_RxCpltCallback+0x1c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fd1b 	bl	800a9bc <osSemaphoreRelease>
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	2000032c 	.word	0x2000032c

08009f94 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009f94:	b5b0      	push	{r4, r5, r7, lr}
 8009f96:	b08a      	sub	sp, #40	; 0x28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009f9c:	4b54      	ldr	r3, [pc, #336]	; (800a0f0 <low_level_init+0x15c>)
 8009f9e:	4a55      	ldr	r2, [pc, #340]	; (800a0f4 <low_level_init+0x160>)
 8009fa0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009fa2:	4b53      	ldr	r3, [pc, #332]	; (800a0f0 <low_level_init+0x15c>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009fa8:	4b51      	ldr	r3, [pc, #324]	; (800a0f0 <low_level_init+0x15c>)
 8009faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009fae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009fb0:	4b4f      	ldr	r3, [pc, #316]	; (800a0f0 <low_level_init+0x15c>)
 8009fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fb6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = KSZ8021RNL_PHY_ADDRESS;
 8009fb8:	4b4d      	ldr	r3, [pc, #308]	; (800a0f0 <low_level_init+0x15c>)
 8009fba:	2203      	movs	r2, #3
 8009fbc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x10;
 8009fbe:	2310      	movs	r3, #16
 8009fc0:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x55;
 8009fc4:	2355      	movs	r3, #85	; 0x55
 8009fc6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0x03;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x44;
 8009fd6:	2344      	movs	r3, #68	; 0x44
 8009fd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x12;
 8009fdc:	2312      	movs	r3, #18
 8009fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8009fe2:	4a43      	ldr	r2, [pc, #268]	; (800a0f0 <low_level_init+0x15c>)
 8009fe4:	f107 0320 	add.w	r3, r7, #32
 8009fe8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009fea:	4b41      	ldr	r3, [pc, #260]	; (800a0f0 <low_level_init+0x15c>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009ff0:	4b3f      	ldr	r3, [pc, #252]	; (800a0f0 <low_level_init+0x15c>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009ff6:	4b3e      	ldr	r3, [pc, #248]	; (800a0f0 <low_level_init+0x15c>)
 8009ff8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009ffc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  phy_bootstrap();
 8009ffe:	f7fa f883 	bl	8004108 <phy_bootstrap>
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a002:	483b      	ldr	r0, [pc, #236]	; (800a0f0 <low_level_init+0x15c>)
 800a004:	f7fa f9da 	bl	80043bc <HAL_ETH_Init>
 800a008:	4603      	mov	r3, r0
 800a00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hal_eth_init_status == HAL_OK)
 800a00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a012:	2b00      	cmp	r3, #0
 800a014:	d108      	bne.n	800a028 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a01c:	f043 0304 	orr.w	r3, r3, #4
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a028:	2304      	movs	r3, #4
 800a02a:	4a33      	ldr	r2, [pc, #204]	; (800a0f8 <low_level_init+0x164>)
 800a02c:	4933      	ldr	r1, [pc, #204]	; (800a0fc <low_level_init+0x168>)
 800a02e:	4830      	ldr	r0, [pc, #192]	; (800a0f0 <low_level_init+0x15c>)
 800a030:	f7fa fad8 	bl	80045e4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a034:	2304      	movs	r3, #4
 800a036:	4a32      	ldr	r2, [pc, #200]	; (800a100 <low_level_init+0x16c>)
 800a038:	4932      	ldr	r1, [pc, #200]	; (800a104 <low_level_init+0x170>)
 800a03a:	482d      	ldr	r0, [pc, #180]	; (800a0f0 <low_level_init+0x15c>)
 800a03c:	f7fa fb3b 	bl	80046b6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2206      	movs	r2, #6
 800a044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a048:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <low_level_init+0x15c>)
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	781a      	ldrb	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a054:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <low_level_init+0x15c>)
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	785a      	ldrb	r2, [r3, #1]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a060:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <low_level_init+0x15c>)
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	789a      	ldrb	r2, [r3, #2]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a06c:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <low_level_init+0x15c>)
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	78da      	ldrb	r2, [r3, #3]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a078:	4b1d      	ldr	r3, [pc, #116]	; (800a0f0 <low_level_init+0x15c>)
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	791a      	ldrb	r2, [r3, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a084:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <low_level_init+0x15c>)
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	795a      	ldrb	r2, [r3, #5]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a096:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a09e:	f043 030a 	orr.w	r3, r3, #10
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a0ae:	f107 031c 	add.w	r3, r7, #28
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 fc15 	bl	800a8e4 <osSemaphoreCreate>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4a12      	ldr	r2, [pc, #72]	; (800a108 <low_level_init+0x174>)
 800a0be:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a0c0:	4b12      	ldr	r3, [pc, #72]	; (800a10c <low_level_init+0x178>)
 800a0c2:	f107 0408 	add.w	r4, r7, #8
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fa99 	bl	800a60e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a0dc:	4804      	ldr	r0, [pc, #16]	; (800a0f0 <low_level_init+0x15c>)
 800a0de:	f7fa fe12 	bl	8004d06 <HAL_ETH_Start>

/* USER CODE BEGIN PHY_PRE_CONFIG */
    phy_init(&heth);
 800a0e2:	4803      	ldr	r0, [pc, #12]	; (800a0f0 <low_level_init+0x15c>)
 800a0e4:	f7fa f85e 	bl	80041a4 <phy_init>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a0e8:	bf00      	nop
 800a0ea:	3728      	adds	r7, #40	; 0x28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f0:	20015f34 	.word	0x20015f34
 800a0f4:	40028000 	.word	0x40028000
 800a0f8:	20015f7c 	.word	0x20015f7c
 800a0fc:	20014664 	.word	0x20014664
 800a100:	200146e4 	.word	0x200146e4
 800a104:	20015eb4 	.word	0x20015eb4
 800a108:	2000032c 	.word	0x2000032c
 800a10c:	080257d8 	.word	0x080257d8

0800a110 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08a      	sub	sp, #40	; 0x28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a11a:	4b4b      	ldr	r3, [pc, #300]	; (800a248 <low_level_output+0x138>)
 800a11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a132:	4b45      	ldr	r3, [pc, #276]	; (800a248 <low_level_output+0x138>)
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	623b      	str	r3, [r7, #32]
 800a140:	e05a      	b.n	800a1f8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	da03      	bge.n	800a152 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a14a:	23f8      	movs	r3, #248	; 0xf8
 800a14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a150:	e05c      	b.n	800a20c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	895b      	ldrh	r3, [r3, #10]
 800a156:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a15c:	e02f      	b.n	800a1be <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	18d0      	adds	r0, r2, r3
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	18d1      	adds	r1, r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a172:	3304      	adds	r3, #4
 800a174:	461a      	mov	r2, r3
 800a176:	f016 ffd9 	bl	802112c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	da03      	bge.n	800a190 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a188:	23f8      	movs	r3, #248	; 0xf8
 800a18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a18e:	e03d      	b.n	800a20c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a1a0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a1ac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a1b8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d8c8      	bhi.n	800a15e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	18d0      	adds	r0, r2, r3
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	4413      	add	r3, r2
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	f016 ffa5 	bl	802112c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	623b      	str	r3, [r7, #32]
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1a1      	bne.n	800a142 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a1fe:	6979      	ldr	r1, [r7, #20]
 800a200:	4811      	ldr	r0, [pc, #68]	; (800a248 <low_level_output+0x138>)
 800a202:	f7fa fac5 	bl	8004790 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <low_level_output+0x138>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a214:	3314      	adds	r3, #20
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00d      	beq.n	800a23c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a220:	4b09      	ldr	r3, [pc, #36]	; (800a248 <low_level_output+0x138>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a228:	3314      	adds	r3, #20
 800a22a:	2220      	movs	r2, #32
 800a22c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a22e:	4b06      	ldr	r3, [pc, #24]	; (800a248 <low_level_output+0x138>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a236:	3304      	adds	r3, #4
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a23c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a240:	4618      	mov	r0, r3
 800a242:	3728      	adds	r7, #40	; 0x28
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20015f34 	.word	0x20015f34

0800a24c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08c      	sub	sp, #48	; 0x30
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a258:	2300      	movs	r3, #0
 800a25a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800a270:	484f      	ldr	r0, [pc, #316]	; (800a3b0 <low_level_input+0x164>)
 800a272:	f7fa fb77 	bl	8004964 <HAL_ETH_GetReceivedFrame_IT>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <low_level_input+0x34>

    return NULL;
 800a27c:	2300      	movs	r3, #0
 800a27e:	e092      	b.n	800a3a6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a280:	4b4b      	ldr	r3, [pc, #300]	; (800a3b0 <low_level_input+0x164>)
 800a282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a284:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a286:	4b4a      	ldr	r3, [pc, #296]	; (800a3b0 <low_level_input+0x164>)
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a28c:	89fb      	ldrh	r3, [r7, #14]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a292:	89fb      	ldrh	r3, [r7, #14]
 800a294:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a298:	4619      	mov	r1, r3
 800a29a:	2000      	movs	r0, #0
 800a29c:	f00a f8b8 	bl	8014410 <pbuf_alloc>
 800a2a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d04b      	beq.n	800a340 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a2a8:	4b41      	ldr	r3, [pc, #260]	; (800a3b0 <low_level_input+0x164>)
 800a2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2b6:	e040      	b.n	800a33a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	895b      	ldrh	r3, [r3, #10]
 800a2bc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a2c2:	e021      	b.n	800a308 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	18d0      	adds	r0, r2, r3
 800a2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	18d1      	adds	r1, r2, r3
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a2d8:	3304      	adds	r3, #4
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f016 ff26 	bl	802112c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a2f6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a302:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a312:	4293      	cmp	r3, r2
 800a314:	d8d6      	bhi.n	800a2c4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	18d0      	adds	r0, r2, r3
 800a31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	4413      	add	r3, r2
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	4619      	mov	r1, r3
 800a328:	f016 ff00 	bl	802112c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a32c:	69fa      	ldr	r2, [r7, #28]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1bb      	bne.n	800a2b8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a340:	4b1b      	ldr	r3, [pc, #108]	; (800a3b0 <low_level_input+0x164>)
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a344:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a346:	2300      	movs	r3, #0
 800a348:	613b      	str	r3, [r7, #16]
 800a34a:	e00b      	b.n	800a364 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	3301      	adds	r3, #1
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	4b12      	ldr	r3, [pc, #72]	; (800a3b0 <low_level_input+0x164>)
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d3ee      	bcc.n	800a34c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <low_level_input+0x164>)
 800a370:	2200      	movs	r2, #0
 800a372:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a374:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <low_level_input+0x164>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37c:	3314      	adds	r3, #20
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00d      	beq.n	800a3a4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a388:	4b09      	ldr	r3, [pc, #36]	; (800a3b0 <low_level_input+0x164>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a390:	3314      	adds	r3, #20
 800a392:	2280      	movs	r2, #128	; 0x80
 800a394:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a396:	4b06      	ldr	r3, [pc, #24]	; (800a3b0 <low_level_input+0x164>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39e:	3308      	adds	r3, #8
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3730      	adds	r7, #48	; 0x30
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20015f34 	.word	0x20015f34

0800a3b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a3c0:	4b12      	ldr	r3, [pc, #72]	; (800a40c <ethernetif_input+0x58>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 faa9 	bl	800a920 <osSemaphoreWait>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f5      	bne.n	800a3c0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a3d4:	480e      	ldr	r0, [pc, #56]	; (800a410 <ethernetif_input+0x5c>)
 800a3d6:	f016 fd01 	bl	8020ddc <sys_mutex_lock>
        p = low_level_input( netif );
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f7ff ff36 	bl	800a24c <low_level_input>
 800a3e0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	68f9      	ldr	r1, [r7, #12]
 800a3ee:	68b8      	ldr	r0, [r7, #8]
 800a3f0:	4798      	blx	r3
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	f00a fb1f 	bl	8014a3c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a3fe:	4804      	ldr	r0, [pc, #16]	; (800a410 <ethernetif_input+0x5c>)
 800a400:	f016 fcfb 	bl	8020dfa <sys_mutex_unlock>
      } while(p!=NULL);
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e4      	bne.n	800a3d4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a40a:	e7d9      	b.n	800a3c0 <ethernetif_input+0xc>
 800a40c:	2000032c 	.word	0x2000032c
 800a410:	20017790 	.word	0x20017790

0800a414 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <ethernetif_init+0x1c>
 800a422:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <ethernetif_init+0x48>)
 800a424:	f240 2246 	movw	r2, #582	; 0x246
 800a428:	490d      	ldr	r1, [pc, #52]	; (800a460 <ethernetif_init+0x4c>)
 800a42a:	480e      	ldr	r0, [pc, #56]	; (800a464 <ethernetif_init+0x50>)
 800a42c:	f017 fbc2 	bl	8021bb4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2273      	movs	r2, #115	; 0x73
 800a434:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2274      	movs	r2, #116	; 0x74
 800a43c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <ethernetif_init+0x54>)
 800a444:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a08      	ldr	r2, [pc, #32]	; (800a46c <ethernetif_init+0x58>)
 800a44a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff fda1 	bl	8009f94 <low_level_init>

  return ERR_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	080257ec 	.word	0x080257ec
 800a460:	08025808 	.word	0x08025808
 800a464:	08025818 	.word	0x08025818
 800a468:	0801eb65 	.word	0x0801eb65
 800a46c:	0800a111 	.word	0x0800a111

0800a470 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a474:	f7fb f8f6 	bl	8005664 <HAL_GetTick>
 800a478:	4603      	mov	r3, r0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a496:	089b      	lsrs	r3, r3, #2
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d05d      	beq.n	800a55e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a4a2:	4b34      	ldr	r3, [pc, #208]	; (800a574 <ethernetif_update_config+0xf4>)
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d03f      	beq.n	800a52a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a4aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4830      	ldr	r0, [pc, #192]	; (800a574 <ethernetif_update_config+0xf4>)
 800a4b2:	f7fa fbc2 	bl	8004c3a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a4b6:	f7fb f8d5 	bl	8005664 <HAL_GetTick>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a4be:	f107 0308 	add.w	r3, r7, #8
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	482b      	ldr	r0, [pc, #172]	; (800a574 <ethernetif_update_config+0xf4>)
 800a4c8:	f7fa fb4f 	bl	8004b6a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a4cc:	f7fb f8ca 	bl	8005664 <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4da:	d828      	bhi.n	800a52e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0eb      	beq.n	800a4be <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a4e6:	f107 0308 	add.w	r3, r7, #8
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	211e      	movs	r1, #30
 800a4ee:	4821      	ldr	r0, [pc, #132]	; (800a574 <ethernetif_update_config+0xf4>)
 800a4f0:	f7fa fb3b 	bl	8004b6a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a4fe:	4b1d      	ldr	r3, [pc, #116]	; (800a574 <ethernetif_update_config+0xf4>)
 800a500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a504:	60da      	str	r2, [r3, #12]
 800a506:	e002      	b.n	800a50e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a508:	4b1a      	ldr	r3, [pc, #104]	; (800a574 <ethernetif_update_config+0xf4>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a518:	4b16      	ldr	r3, [pc, #88]	; (800a574 <ethernetif_update_config+0xf4>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	609a      	str	r2, [r3, #8]
 800a51e:	e016      	b.n	800a54e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a520:	4b14      	ldr	r3, [pc, #80]	; (800a574 <ethernetif_update_config+0xf4>)
 800a522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a526:	609a      	str	r2, [r3, #8]
 800a528:	e011      	b.n	800a54e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a52a:	bf00      	nop
 800a52c:	e000      	b.n	800a530 <ethernetif_update_config+0xb0>
          goto error;
 800a52e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a530:	4b10      	ldr	r3, [pc, #64]	; (800a574 <ethernetif_update_config+0xf4>)
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	08db      	lsrs	r3, r3, #3
 800a536:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a538:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <ethernetif_update_config+0xf4>)
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	085b      	lsrs	r3, r3, #1
 800a53e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a540:	4313      	orrs	r3, r2
 800a542:	b29b      	uxth	r3, r3
 800a544:	461a      	mov	r2, r3
 800a546:	2100      	movs	r1, #0
 800a548:	480a      	ldr	r0, [pc, #40]	; (800a574 <ethernetif_update_config+0xf4>)
 800a54a:	f7fa fb76 	bl	8004c3a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a54e:	2100      	movs	r1, #0
 800a550:	4808      	ldr	r0, [pc, #32]	; (800a574 <ethernetif_update_config+0xf4>)
 800a552:	f7fa fc37 	bl	8004dc4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a556:	4807      	ldr	r0, [pc, #28]	; (800a574 <ethernetif_update_config+0xf4>)
 800a558:	f7fa fbd5 	bl	8004d06 <HAL_ETH_Start>
 800a55c:	e002      	b.n	800a564 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a55e:	4805      	ldr	r0, [pc, #20]	; (800a574 <ethernetif_update_config+0xf4>)
 800a560:	f7fa fc00 	bl	8004d64 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f807 	bl	800a578 <ethernetif_notify_conn_changed>
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20015f34 	.word	0x20015f34

0800a578 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a59a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a59e:	2b84      	cmp	r3, #132	; 0x84
 800a5a0:	d005      	beq.n	800a5ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a5a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3303      	adds	r3, #3
 800a5ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c2:	f3ef 8305 	mrs	r3, IPSR
 800a5c6:	607b      	str	r3, [r7, #4]
  return(result);
 800a5c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	bf14      	ite	ne
 800a5ce:	2301      	movne	r3, #1
 800a5d0:	2300      	moveq	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a5e4:	f001 fd14 	bl	800c010 <vTaskStartScheduler>
  
  return osOK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a5f2:	f7ff ffe3 	bl	800a5bc <inHandlerMode>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a5fc:	f001 fe12 	bl	800c224 <xTaskGetTickCountFromISR>
 800a600:	4603      	mov	r3, r0
 800a602:	e002      	b.n	800a60a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a604:	f001 fdfe 	bl	800c204 <xTaskGetTickCount>
 800a608:	4603      	mov	r3, r0
  }
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a60e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a610:	b087      	sub	sp, #28
 800a612:	af02      	add	r7, sp, #8
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685c      	ldr	r4, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a624:	b29e      	uxth	r6, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff ffad 	bl	800a58c <makeFreeRtosPriority>
 800a632:	4602      	mov	r2, r0
 800a634:	f107 030c 	add.w	r3, r7, #12
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	9200      	str	r2, [sp, #0]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	4632      	mov	r2, r6
 800a640:	4629      	mov	r1, r5
 800a642:	4620      	mov	r0, r4
 800a644:	f001 fad6 	bl	800bbf4 <xTaskCreate>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d001      	beq.n	800a652 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	e000      	b.n	800a654 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a65c <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800a660:	f002 f8d2 	bl	800c808 <xTaskGetCurrentTaskHandle>
 800a664:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800a666:	4618      	mov	r0, r3
 800a668:	bd80      	pop	{r7, pc}

0800a66a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fc08 	bl	800be88 <vTaskDelete>
  return osOK;
 800a678:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <osDelay+0x16>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e000      	b.n	800a69a <osDelay+0x18>
 800a698:	2301      	movs	r3, #1
 800a69a:	4618      	mov	r0, r3
 800a69c:	f001 fc84 	bl	800bfa8 <vTaskDelay>
  
  return osOK;
 800a6a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a6be:	f7ff ff7d 	bl	800a5bc <inHandlerMode>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d01c      	beq.n	800a702 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	f107 0208 	add.w	r2, r7, #8
 800a6ce:	f107 030c 	add.w	r3, r7, #12
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f002 fb7f 	bl	800cddc <xTaskGenericNotifyFromISR>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d002      	beq.n	800a6ea <osSignalSet+0x3e>
      return 0x80000000;
 800a6e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6e8:	e019      	b.n	800a71e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d015      	beq.n	800a71c <osSignalSet+0x70>
 800a6f0:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <osSignalSet+0x7c>)
 800a6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	e00c      	b.n	800a71c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	f107 0308 	add.w	r3, r7, #8
 800a708:	2201      	movs	r2, #1
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f002 faa8 	bl	800cc60 <xTaskGenericNotify>
 800a710:	4603      	mov	r3, r0
 800a712:	2b01      	cmp	r3, #1
 800a714:	d002      	beq.n	800a71c <osSignalSet+0x70>
    return 0x80000000;
 800a716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a71a:	e000      	b.n	800a71e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a71c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	e000ed04 	.word	0xe000ed04

0800a72c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a72c:	b590      	push	{r4, r7, lr}
 800a72e:	b089      	sub	sp, #36	; 0x24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a746:	d103      	bne.n	800a750 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	e009      	b.n	800a764 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d006      	beq.n	800a764 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <osSignalWait+0x38>
      ticks = 1;
 800a760:	2301      	movs	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a764:	f7ff ff2a 	bl	800a5bc <inHandlerMode>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a76e:	2382      	movs	r3, #130	; 0x82
 800a770:	613b      	str	r3, [r7, #16]
 800a772:	e01b      	b.n	800a7ac <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	f107 0310 	add.w	r3, r7, #16
 800a77a:	1d1a      	adds	r2, r3, #4
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2000      	movs	r0, #0
 800a780:	f002 fa0e 	bl	800cba0 <xTaskNotifyWait>
 800a784:	4603      	mov	r3, r0
 800a786:	2b01      	cmp	r3, #1
 800a788:	d008      	beq.n	800a79c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d102      	bne.n	800a796 <osSignalWait+0x6a>
 800a790:	2300      	movs	r3, #0
 800a792:	613b      	str	r3, [r7, #16]
 800a794:	e00a      	b.n	800a7ac <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a796:	2340      	movs	r3, #64	; 0x40
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	e007      	b.n	800a7ac <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	da02      	bge.n	800a7a8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a7a2:	2386      	movs	r3, #134	; 0x86
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	e001      	b.n	800a7ac <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a7a8:	2308      	movs	r3, #8
 800a7aa:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	f107 0310 	add.w	r3, r7, #16
 800a7b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	3724      	adds	r7, #36	; 0x24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd90      	pop	{r4, r7, pc}

0800a7c4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	f000 fbba 	bl	800af46 <xQueueCreateMutex>
 800a7d2:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <osMutexWait+0x18>
    return osErrorParameter;
 800a7f0:	2380      	movs	r3, #128	; 0x80
 800a7f2:	e03a      	b.n	800a86a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7fe:	d103      	bne.n	800a808 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	e009      	b.n	800a81c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d006      	beq.n	800a81c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <osMutexWait+0x40>
      ticks = 1;
 800a818:	2301      	movs	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a81c:	f7ff fece 	bl	800a5bc <inHandlerMode>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d017      	beq.n	800a856 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a826:	f107 0308 	add.w	r3, r7, #8
 800a82a:	461a      	mov	r2, r3
 800a82c:	2100      	movs	r1, #0
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 ffb4 	bl	800b79c <xQueueReceiveFromISR>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d001      	beq.n	800a83e <osMutexWait+0x62>
      return osErrorOS;
 800a83a:	23ff      	movs	r3, #255	; 0xff
 800a83c:	e015      	b.n	800a86a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d011      	beq.n	800a868 <osMutexWait+0x8c>
 800a844:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <osMutexWait+0x98>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	e008      	b.n	800a868 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fe93 	bl	800b584 <xQueueSemaphoreTake>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b01      	cmp	r3, #1
 800a862:	d001      	beq.n	800a868 <osMutexWait+0x8c>
    return osErrorOS;
 800a864:	23ff      	movs	r3, #255	; 0xff
 800a866:	e000      	b.n	800a86a <osMutexWait+0x8e>
  }
  
  return osOK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a884:	2300      	movs	r3, #0
 800a886:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a888:	f7ff fe98 	bl	800a5bc <inHandlerMode>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d016      	beq.n	800a8c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fd06 	bl	800b2aa <xQueueGiveFromISR>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d001      	beq.n	800a8a8 <osMutexRelease+0x30>
      return osErrorOS;
 800a8a4:	23ff      	movs	r3, #255	; 0xff
 800a8a6:	e017      	b.n	800a8d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d013      	beq.n	800a8d6 <osMutexRelease+0x5e>
 800a8ae:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <osMutexRelease+0x68>)
 800a8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	e00a      	b.n	800a8d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fb56 	bl	800af78 <xQueueGenericSend>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d001      	beq.n	800a8d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a8d2:	23ff      	movs	r3, #255	; 0xff
 800a8d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	e000ed04 	.word	0xe000ed04

0800a8e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d110      	bne.n	800a916 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800a8f4:	2203      	movs	r2, #3
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	f000 fab5 	bl	800ae68 <xQueueGenericCreate>
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <osSemaphoreCreate+0x2e>
 800a906:	2300      	movs	r3, #0
 800a908:	2200      	movs	r2, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 fb33 	bl	800af78 <xQueueGenericSend>
    return sema;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	e000      	b.n	800a918 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800a916:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a92a:	2300      	movs	r3, #0
 800a92c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	e03a      	b.n	800a9ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a942:	d103      	bne.n	800a94c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e009      	b.n	800a960 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d006      	beq.n	800a960 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <osSemaphoreWait+0x40>
      ticks = 1;
 800a95c:	2301      	movs	r3, #1
 800a95e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a960:	f7ff fe2c 	bl	800a5bc <inHandlerMode>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d017      	beq.n	800a99a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a96a:	f107 0308 	add.w	r3, r7, #8
 800a96e:	461a      	mov	r2, r3
 800a970:	2100      	movs	r1, #0
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 ff12 	bl	800b79c <xQueueReceiveFromISR>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d001      	beq.n	800a982 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a97e:	23ff      	movs	r3, #255	; 0xff
 800a980:	e015      	b.n	800a9ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d011      	beq.n	800a9ac <osSemaphoreWait+0x8c>
 800a988:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <osSemaphoreWait+0x98>)
 800a98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	e008      	b.n	800a9ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a99a:	68f9      	ldr	r1, [r7, #12]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fdf1 	bl	800b584 <xQueueSemaphoreTake>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d001      	beq.n	800a9ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a9a8:	23ff      	movs	r3, #255	; 0xff
 800a9aa:	e000      	b.n	800a9ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a9cc:	f7ff fdf6 	bl	800a5bc <inHandlerMode>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d016      	beq.n	800aa04 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a9d6:	f107 0308 	add.w	r3, r7, #8
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc64 	bl	800b2aa <xQueueGiveFromISR>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d001      	beq.n	800a9ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a9e8:	23ff      	movs	r3, #255	; 0xff
 800a9ea:	e017      	b.n	800aa1c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d013      	beq.n	800aa1a <osSemaphoreRelease+0x5e>
 800a9f2:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <osSemaphoreRelease+0x68>)
 800a9f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	e00a      	b.n	800aa1a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800aa04:	2300      	movs	r3, #0
 800aa06:	2200      	movs	r2, #0
 800aa08:	2100      	movs	r1, #0
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fab4 	bl	800af78 <xQueueGenericSend>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d001      	beq.n	800aa1a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800aa16:	23ff      	movs	r3, #255	; 0xff
 800aa18:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800aa30:	f7ff fdc4 	bl	800a5bc <inHandlerMode>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800aa3a:	2382      	movs	r3, #130	; 0x82
 800aa3c:	e003      	b.n	800aa46 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 ff68 	bl	800b914 <vQueueDelete>

  return osOK; 
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	4619      	mov	r1, r3
 800aa64:	f000 fa00 	bl	800ae68 <xQueueGenericCreate>
 800aa68:	4603      	mov	r3, r0
#endif
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
	...

0800aa74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <osMessagePut+0x1e>
    ticks = 1;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800aa92:	f7ff fd93 	bl	800a5bc <inHandlerMode>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d018      	beq.n	800aace <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800aa9c:	f107 0210 	add.w	r2, r7, #16
 800aaa0:	f107 0108 	add.w	r1, r7, #8
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 fb64 	bl	800b174 <xQueueGenericSendFromISR>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d001      	beq.n	800aab6 <osMessagePut+0x42>
      return osErrorOS;
 800aab2:	23ff      	movs	r3, #255	; 0xff
 800aab4:	e018      	b.n	800aae8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d014      	beq.n	800aae6 <osMessagePut+0x72>
 800aabc:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <osMessagePut+0x7c>)
 800aabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	e00b      	b.n	800aae6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aace:	f107 0108 	add.w	r1, r7, #8
 800aad2:	2300      	movs	r3, #0
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 fa4e 	bl	800af78 <xQueueGenericSend>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d001      	beq.n	800aae6 <osMessagePut+0x72>
      return osErrorOS;
 800aae2:	23ff      	movs	r3, #255	; 0xff
 800aae4:	e000      	b.n	800aae8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aaf4:	b590      	push	{r4, r7, lr}
 800aaf6:	b08b      	sub	sp, #44	; 0x2c
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ab0e:	2380      	movs	r3, #128	; 0x80
 800ab10:	617b      	str	r3, [r7, #20]
    return event;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	461c      	mov	r4, r3
 800ab16:	f107 0314 	add.w	r3, r7, #20
 800ab1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab22:	e054      	b.n	800abce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ab24:	2300      	movs	r3, #0
 800ab26:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab32:	d103      	bne.n	800ab3c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ab34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
 800ab3a:	e009      	b.n	800ab50 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <osMessageGet+0x5c>
      ticks = 1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ab50:	f7ff fd34 	bl	800a5bc <inHandlerMode>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d01c      	beq.n	800ab94 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ab5a:	f107 0220 	add.w	r2, r7, #32
 800ab5e:	f107 0314 	add.w	r3, r7, #20
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f000 fe18 	bl	800b79c <xQueueReceiveFromISR>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d102      	bne.n	800ab78 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ab72:	2310      	movs	r3, #16
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	e001      	b.n	800ab7c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d01d      	beq.n	800abbe <osMessageGet+0xca>
 800ab82:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <osMessageGet+0xe4>)
 800ab84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab88:	601a      	str	r2, [r3, #0]
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	e014      	b.n	800abbe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ab94:	f107 0314 	add.w	r3, r7, #20
 800ab98:	3304      	adds	r3, #4
 800ab9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68b8      	ldr	r0, [r7, #8]
 800aba0:	f000 fc10 	bl	800b3c4 <xQueueReceive>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d102      	bne.n	800abb0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800abaa:	2310      	movs	r3, #16
 800abac:	617b      	str	r3, [r7, #20]
 800abae:	e006      	b.n	800abbe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <osMessageGet+0xc6>
 800abb6:	2300      	movs	r3, #0
 800abb8:	e000      	b.n	800abbc <osMessageGet+0xc8>
 800abba:	2340      	movs	r3, #64	; 0x40
 800abbc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	461c      	mov	r4, r3
 800abc2:	f107 0314 	add.w	r3, r7, #20
 800abc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	372c      	adds	r7, #44	; 0x2c
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd90      	pop	{r4, r7, pc}
 800abd6:	bf00      	nop
 800abd8:	e000ed04 	.word	0xe000ed04

0800abdc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800abe4:	f7ff fcea 	bl	800a5bc <inHandlerMode>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fe72 	bl	800b8d8 <uxQueueMessagesWaitingFromISR>
 800abf4:	4603      	mov	r3, r0
 800abf6:	e003      	b.n	800ac00 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fe4f 	bl	800b89c <uxQueueMessagesWaiting>
 800abfe:	4603      	mov	r3, r0
  }
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ac10:	f7ff fcd4 	bl	800a5bc <inHandlerMode>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <osMessageDelete+0x16>
    return osErrorISR;
 800ac1a:	2382      	movs	r3, #130	; 0x82
 800ac1c:	e003      	b.n	800ac26 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fe78 	bl	800b914 <vQueueDelete>

  return osOK; 
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f103 0208 	add.w	r2, r3, #8
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f103 0208 	add.w	r2, r3, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f103 0208 	add.w	r2, r3, #8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	689a      	ldr	r2, [r3, #8]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ace6:	d103      	bne.n	800acf0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e00c      	b.n	800ad0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3308      	adds	r3, #8
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e002      	b.n	800acfe <vListInsert+0x2e>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d2f6      	bcs.n	800acf8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
}
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6892      	ldr	r2, [r2, #8]
 800ad58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	6852      	ldr	r2, [r2, #4]
 800ad62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d103      	bne.n	800ad76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689a      	ldr	r2, [r3, #8]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	1e5a      	subs	r2, r3, #1
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800adc2:	f002 fa7f 	bl	800d2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	68f9      	ldr	r1, [r7, #12]
 800add0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800add2:	fb01 f303 	mul.w	r3, r1, r3
 800add6:	441a      	add	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	3b01      	subs	r3, #1
 800adf4:	68f9      	ldr	r1, [r7, #12]
 800adf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adf8:	fb01 f303 	mul.w	r3, r1, r3
 800adfc:	441a      	add	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	22ff      	movs	r2, #255	; 0xff
 800ae06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	22ff      	movs	r2, #255	; 0xff
 800ae0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d114      	bne.n	800ae42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d01a      	beq.n	800ae56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3310      	adds	r3, #16
 800ae24:	4618      	mov	r0, r3
 800ae26:	f001 fb4d 	bl	800c4c4 <xTaskRemoveFromEventList>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d012      	beq.n	800ae56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae30:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <xQueueGenericReset+0xcc>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	e009      	b.n	800ae56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3310      	adds	r3, #16
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff fef1 	bl	800ac2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3324      	adds	r3, #36	; 0x24
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff feec 	bl	800ac2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae56:	f002 fa65 	bl	800d324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae5a:	2301      	movs	r3, #1
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	e000ed04 	.word	0xe000ed04

0800ae68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	; 0x28
 800ae6c:	af02      	add	r7, sp, #8
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	4613      	mov	r3, r2
 800ae74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	613b      	str	r3, [r7, #16]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	fb02 f303 	mul.w	r3, r2, r3
 800ae9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	3348      	adds	r3, #72	; 0x48
 800aea0:	4618      	mov	r0, r3
 800aea2:	f002 fb31 	bl	800d508 <pvPortMalloc>
 800aea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00d      	beq.n	800aeca <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	3348      	adds	r3, #72	; 0x48
 800aeb6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aeb8:	79fa      	ldrb	r2, [r7, #7]
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	4613      	mov	r3, r2
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 f805 	bl	800aed4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aeca:	69bb      	ldr	r3, [r7, #24]
	}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d103      	bne.n	800aef0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	e002      	b.n	800aef6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af02:	2101      	movs	r1, #1
 800af04:	69b8      	ldr	r0, [r7, #24]
 800af06:	f7ff ff47 	bl	800ad98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af0a:	bf00      	nop
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00e      	beq.n	800af3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800af32:	2300      	movs	r3, #0
 800af34:	2200      	movs	r2, #0
 800af36:	2100      	movs	r1, #0
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f81d 	bl	800af78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800af46:	b580      	push	{r7, lr}
 800af48:	b086      	sub	sp, #24
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	4603      	mov	r3, r0
 800af4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af50:	2301      	movs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	2300      	movs	r3, #0
 800af56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af58:	79fb      	ldrb	r3, [r7, #7]
 800af5a:	461a      	mov	r2, r3
 800af5c:	6939      	ldr	r1, [r7, #16]
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f7ff ff82 	bl	800ae68 <xQueueGenericCreate>
 800af64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff ffd3 	bl	800af12 <prvInitialiseMutex>

		return xNewQueue;
 800af6c:	68fb      	ldr	r3, [r7, #12]
	}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08e      	sub	sp, #56	; 0x38
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af86:	2300      	movs	r3, #0
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xQueueGenericSend+0x32>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <xQueueGenericSend+0x40>
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <xQueueGenericSend+0x44>
 800afb8:	2301      	movs	r3, #1
 800afba:	e000      	b.n	800afbe <xQueueGenericSend+0x46>
 800afbc:	2300      	movs	r3, #0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <xQueueGenericSend+0x60>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d103      	bne.n	800afe6 <xQueueGenericSend+0x6e>
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d101      	bne.n	800afea <xQueueGenericSend+0x72>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e000      	b.n	800afec <xQueueGenericSend+0x74>
 800afea:	2300      	movs	r3, #0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10a      	bne.n	800b006 <xQueueGenericSend+0x8e>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	623b      	str	r3, [r7, #32]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b006:	f001 fc0f 	bl	800c828 <xTaskGetSchedulerState>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <xQueueGenericSend+0x9e>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <xQueueGenericSend+0xa2>
 800b016:	2301      	movs	r3, #1
 800b018:	e000      	b.n	800b01c <xQueueGenericSend+0xa4>
 800b01a:	2300      	movs	r3, #0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10a      	bne.n	800b036 <xQueueGenericSend+0xbe>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	61fb      	str	r3, [r7, #28]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b036:	f002 f945 	bl	800d2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b042:	429a      	cmp	r2, r3
 800b044:	d302      	bcc.n	800b04c <xQueueGenericSend+0xd4>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d129      	bne.n	800b0a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b052:	f000 fc95 	bl	800b980 <prvCopyDataToQueue>
 800b056:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d010      	beq.n	800b082 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	3324      	adds	r3, #36	; 0x24
 800b064:	4618      	mov	r0, r3
 800b066:	f001 fa2d 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d013      	beq.n	800b098 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b070:	4b3f      	ldr	r3, [pc, #252]	; (800b170 <xQueueGenericSend+0x1f8>)
 800b072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b076:	601a      	str	r2, [r3, #0]
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	e00a      	b.n	800b098 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d007      	beq.n	800b098 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b088:	4b39      	ldr	r3, [pc, #228]	; (800b170 <xQueueGenericSend+0x1f8>)
 800b08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b098:	f002 f944 	bl	800d324 <vPortExitCritical>
				return pdPASS;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e063      	b.n	800b168 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d103      	bne.n	800b0ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0a6:	f002 f93d 	bl	800d324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	e05c      	b.n	800b168 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d106      	bne.n	800b0c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0b4:	f107 0314 	add.w	r3, r7, #20
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 fa65 	bl	800c588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0c2:	f002 f92f 	bl	800d324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0c6:	f000 fff3 	bl	800c0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0ca:	f002 f8fb 	bl	800d2c4 <vPortEnterCritical>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0d4:	b25b      	sxtb	r3, r3
 800b0d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0da:	d103      	bne.n	800b0e4 <xQueueGenericSend+0x16c>
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ea:	b25b      	sxtb	r3, r3
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0f0:	d103      	bne.n	800b0fa <xQueueGenericSend+0x182>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0fa:	f002 f913 	bl	800d324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0fe:	1d3a      	adds	r2, r7, #4
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f001 fa54 	bl	800c5b4 <xTaskCheckForTimeOut>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d124      	bne.n	800b15c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b114:	f000 fd2c 	bl	800bb70 <prvIsQueueFull>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d018      	beq.n	800b150 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	3310      	adds	r3, #16
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f001 f9a8 	bl	800c47c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b12c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b12e:	f000 fcb7 	bl	800baa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b132:	f000 ffcb 	bl	800c0cc <xTaskResumeAll>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f47f af7c 	bne.w	800b036 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b13e:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <xQueueGenericSend+0x1f8>)
 800b140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	e772      	b.n	800b036 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b152:	f000 fca5 	bl	800baa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b156:	f000 ffb9 	bl	800c0cc <xTaskResumeAll>
 800b15a:	e76c      	b.n	800b036 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b15c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b15e:	f000 fc9f 	bl	800baa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b162:	f000 ffb3 	bl	800c0cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b166:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3738      	adds	r7, #56	; 0x38
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	e000ed04 	.word	0xe000ed04

0800b174 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b090      	sub	sp, #64	; 0x40
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d103      	bne.n	800b1b0 <xQueueGenericSendFromISR+0x3c>
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <xQueueGenericSendFromISR+0x40>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e000      	b.n	800b1b6 <xQueueGenericSendFromISR+0x42>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d103      	bne.n	800b1de <xQueueGenericSendFromISR+0x6a>
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <xQueueGenericSendFromISR+0x6e>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <xQueueGenericSendFromISR+0x70>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10a      	bne.n	800b1fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	623b      	str	r3, [r7, #32]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1fe:	f002 f943 	bl	800d488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b202:	f3ef 8211 	mrs	r2, BASEPRI
 800b206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	61fa      	str	r2, [r7, #28]
 800b218:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b21a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b226:	429a      	cmp	r2, r3
 800b228:	d302      	bcc.n	800b230 <xQueueGenericSendFromISR+0xbc>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d12f      	bne.n	800b290 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b246:	f000 fb9b 	bl	800b980 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b24a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b252:	d112      	bne.n	800b27a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d016      	beq.n	800b28a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	3324      	adds	r3, #36	; 0x24
 800b260:	4618      	mov	r0, r3
 800b262:	f001 f92f 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00e      	beq.n	800b28a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00b      	beq.n	800b28a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	e007      	b.n	800b28a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b27a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b27e:	3301      	adds	r3, #1
 800b280:	b2db      	uxtb	r3, r3
 800b282:	b25a      	sxtb	r2, r3
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b28a:	2301      	movs	r3, #1
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b28e:	e001      	b.n	800b294 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b290:	2300      	movs	r3, #0
 800b292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b296:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b29e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3740      	adds	r7, #64	; 0x40
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b08e      	sub	sp, #56	; 0x38
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	623b      	str	r3, [r7, #32]
}
 800b2d0:	bf00      	nop
 800b2d2:	e7fe      	b.n	800b2d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	61fb      	str	r3, [r7, #28]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <xQueueGiveFromISR+0x58>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <xQueueGiveFromISR+0x5c>
 800b302:	2301      	movs	r3, #1
 800b304:	e000      	b.n	800b308 <xQueueGiveFromISR+0x5e>
 800b306:	2300      	movs	r3, #0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	61bb      	str	r3, [r7, #24]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b322:	f002 f8b1 	bl	800d488 <vPortValidateInterruptPriority>
	__asm volatile
 800b326:	f3ef 8211 	mrs	r2, BASEPRI
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	617a      	str	r2, [r7, #20]
 800b33c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b33e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b340:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34e:	429a      	cmp	r2, r3
 800b350:	d22b      	bcs.n	800b3aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b36c:	d112      	bne.n	800b394 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	2b00      	cmp	r3, #0
 800b374:	d016      	beq.n	800b3a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	3324      	adds	r3, #36	; 0x24
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 f8a2 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00e      	beq.n	800b3a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2201      	movs	r2, #1
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	e007      	b.n	800b3a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b398:	3301      	adds	r3, #1
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	b25a      	sxtb	r2, r3
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a8:	e001      	b.n	800b3ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f383 8811 	msr	BASEPRI, r3
}
 800b3b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3738      	adds	r7, #56	; 0x38
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08c      	sub	sp, #48	; 0x30
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <xQueueReceive+0x30>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	623b      	str	r3, [r7, #32]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <xQueueReceive+0x3e>
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <xQueueReceive+0x42>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <xQueueReceive+0x44>
 800b406:	2300      	movs	r3, #0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <xQueueReceive+0x5e>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	61fb      	str	r3, [r7, #28]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b422:	f001 fa01 	bl	800c828 <xTaskGetSchedulerState>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <xQueueReceive+0x6e>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <xQueueReceive+0x72>
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <xQueueReceive+0x74>
 800b436:	2300      	movs	r3, #0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10a      	bne.n	800b452 <xQueueReceive+0x8e>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	61bb      	str	r3, [r7, #24]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b452:	f001 ff37 	bl	800d2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d01f      	beq.n	800b4a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b466:	f000 faf5 	bl	800ba54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	1e5a      	subs	r2, r3, #1
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00f      	beq.n	800b49a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	3310      	adds	r3, #16
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 f820 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d007      	beq.n	800b49a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b48a:	4b3d      	ldr	r3, [pc, #244]	; (800b580 <xQueueReceive+0x1bc>)
 800b48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b49a:	f001 ff43 	bl	800d324 <vPortExitCritical>
				return pdPASS;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e069      	b.n	800b576 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d103      	bne.n	800b4b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4a8:	f001 ff3c 	bl	800d324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	e062      	b.n	800b576 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4b6:	f107 0310 	add.w	r3, r7, #16
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 f864 	bl	800c588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4c4:	f001 ff2e 	bl	800d324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4c8:	f000 fdf2 	bl	800c0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4cc:	f001 fefa 	bl	800d2c4 <vPortEnterCritical>
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4dc:	d103      	bne.n	800b4e6 <xQueueReceive+0x122>
 800b4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4ec:	b25b      	sxtb	r3, r3
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4f2:	d103      	bne.n	800b4fc <xQueueReceive+0x138>
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4fc:	f001 ff12 	bl	800d324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b500:	1d3a      	adds	r2, r7, #4
 800b502:	f107 0310 	add.w	r3, r7, #16
 800b506:	4611      	mov	r1, r2
 800b508:	4618      	mov	r0, r3
 800b50a:	f001 f853 	bl	800c5b4 <xTaskCheckForTimeOut>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d123      	bne.n	800b55c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b516:	f000 fb15 	bl	800bb44 <prvIsQueueEmpty>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d017      	beq.n	800b550 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	3324      	adds	r3, #36	; 0x24
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 ffa7 	bl	800c47c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b530:	f000 fab6 	bl	800baa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b534:	f000 fdca 	bl	800c0cc <xTaskResumeAll>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d189      	bne.n	800b452 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b53e:	4b10      	ldr	r3, [pc, #64]	; (800b580 <xQueueReceive+0x1bc>)
 800b540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	e780      	b.n	800b452 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b552:	f000 faa5 	bl	800baa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b556:	f000 fdb9 	bl	800c0cc <xTaskResumeAll>
 800b55a:	e77a      	b.n	800b452 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b55e:	f000 fa9f 	bl	800baa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b562:	f000 fdb3 	bl	800c0cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b568:	f000 faec 	bl	800bb44 <prvIsQueueEmpty>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f43f af6f 	beq.w	800b452 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b574:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b576:	4618      	mov	r0, r3
 800b578:	3730      	adds	r7, #48	; 0x30
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08e      	sub	sp, #56	; 0x38
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b58e:	2300      	movs	r3, #0
 800b590:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b596:	2300      	movs	r3, #0
 800b598:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	623b      	str	r3, [r7, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	61fb      	str	r3, [r7, #28]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5d4:	f001 f928 	bl	800c828 <xTaskGetSchedulerState>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d102      	bne.n	800b5e4 <xQueueSemaphoreTake+0x60>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <xQueueSemaphoreTake+0x64>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <xQueueSemaphoreTake+0x66>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	61bb      	str	r3, [r7, #24]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b604:	f001 fe5e 	bl	800d2c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b610:	2b00      	cmp	r3, #0
 800b612:	d024      	beq.n	800b65e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	1e5a      	subs	r2, r3, #1
 800b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d104      	bne.n	800b62e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b624:	f001 faa8 	bl	800cb78 <pvTaskIncrementMutexHeldCount>
 800b628:	4602      	mov	r2, r0
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00f      	beq.n	800b656 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	3310      	adds	r3, #16
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 ff42 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d007      	beq.n	800b656 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b646:	4b54      	ldr	r3, [pc, #336]	; (800b798 <xQueueSemaphoreTake+0x214>)
 800b648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b656:	f001 fe65 	bl	800d324 <vPortExitCritical>
				return pdPASS;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e097      	b.n	800b78e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d111      	bne.n	800b688 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	617b      	str	r3, [r7, #20]
}
 800b67c:	bf00      	nop
 800b67e:	e7fe      	b.n	800b67e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b680:	f001 fe50 	bl	800d324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b684:	2300      	movs	r3, #0
 800b686:	e082      	b.n	800b78e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b68e:	f107 030c 	add.w	r3, r7, #12
 800b692:	4618      	mov	r0, r3
 800b694:	f000 ff78 	bl	800c588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b69c:	f001 fe42 	bl	800d324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6a0:	f000 fd06 	bl	800c0b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6a4:	f001 fe0e 	bl	800d2c4 <vPortEnterCritical>
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6ae:	b25b      	sxtb	r3, r3
 800b6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6b4:	d103      	bne.n	800b6be <xQueueSemaphoreTake+0x13a>
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6c4:	b25b      	sxtb	r3, r3
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6ca:	d103      	bne.n	800b6d4 <xQueueSemaphoreTake+0x150>
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6d4:	f001 fe26 	bl	800d324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6d8:	463a      	mov	r2, r7
 800b6da:	f107 030c 	add.w	r3, r7, #12
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 ff67 	bl	800c5b4 <xTaskCheckForTimeOut>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d132      	bne.n	800b752 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6ee:	f000 fa29 	bl	800bb44 <prvIsQueueEmpty>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d026      	beq.n	800b746 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d109      	bne.n	800b714 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b700:	f001 fde0 	bl	800d2c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	4618      	mov	r0, r3
 800b70a:	f001 f8ab 	bl	800c864 <xTaskPriorityInherit>
 800b70e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b710:	f001 fe08 	bl	800d324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	3324      	adds	r3, #36	; 0x24
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fead 	bl	800c47c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b724:	f000 f9bc 	bl	800baa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b728:	f000 fcd0 	bl	800c0cc <xTaskResumeAll>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f47f af68 	bne.w	800b604 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b734:	4b18      	ldr	r3, [pc, #96]	; (800b798 <xQueueSemaphoreTake+0x214>)
 800b736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	e75e      	b.n	800b604 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b748:	f000 f9aa 	bl	800baa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b74c:	f000 fcbe 	bl	800c0cc <xTaskResumeAll>
 800b750:	e758      	b.n	800b604 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b754:	f000 f9a4 	bl	800baa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b758:	f000 fcb8 	bl	800c0cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b75c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b75e:	f000 f9f1 	bl	800bb44 <prvIsQueueEmpty>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	f43f af4d 	beq.w	800b604 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00d      	beq.n	800b78c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b770:	f001 fda8 	bl	800d2c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b776:	f000 f8eb 	bl	800b950 <prvGetDisinheritPriorityAfterTimeout>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b782:	4618      	mov	r0, r3
 800b784:	f001 f96a 	bl	800ca5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b788:	f001 fdcc 	bl	800d324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b78c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3738      	adds	r7, #56	; 0x38
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	e000ed04 	.word	0xe000ed04

0800b79c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08e      	sub	sp, #56	; 0x38
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	623b      	str	r3, [r7, #32]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d103      	bne.n	800b7d6 <xQueueReceiveFromISR+0x3a>
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <xQueueReceiveFromISR+0x3e>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e000      	b.n	800b7dc <xQueueReceiveFromISR+0x40>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	61fb      	str	r3, [r7, #28]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7f6:	f001 fe47 	bl	800d488 <vPortValidateInterruptPriority>
	__asm volatile
 800b7fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	61ba      	str	r2, [r7, #24]
 800b810:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b812:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d02f      	beq.n	800b882 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b830:	f000 f910 	bl	800ba54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	1e5a      	subs	r2, r3, #1
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b83c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b844:	d112      	bne.n	800b86c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d016      	beq.n	800b87c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	3310      	adds	r3, #16
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fe36 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00e      	beq.n	800b87c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	e007      	b.n	800b87c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b870:	3301      	adds	r3, #1
 800b872:	b2db      	uxtb	r3, r3
 800b874:	b25a      	sxtb	r2, r3
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b87c:	2301      	movs	r3, #1
 800b87e:	637b      	str	r3, [r7, #52]	; 0x34
 800b880:	e001      	b.n	800b886 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b882:	2300      	movs	r3, #0
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f383 8811 	msr	BASEPRI, r3
}
 800b890:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b894:	4618      	mov	r0, r3
 800b896:	3738      	adds	r7, #56	; 0x38
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10a      	bne.n	800b8c0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	60bb      	str	r3, [r7, #8]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b8c0:	f001 fd00 	bl	800d2c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b8ca:	f001 fd2b 	bl	800d324 <vPortExitCritical>

	return uxReturn;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	60fb      	str	r3, [r7, #12]
}
 800b8fc:	bf00      	nop
 800b8fe:	e7fe      	b.n	800b8fe <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b904:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b906:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b908:	4618      	mov	r0, r3
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <vQueueDelete+0x28>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	60bb      	str	r3, [r7, #8]
}
 800b938:	bf00      	nop
 800b93a:	e7fe      	b.n	800b93a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 f92f 	bl	800bba0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f001 feac 	bl	800d6a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b948:	bf00      	nop
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f1c3 0307 	rsb	r3, r3, #7
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	e001      	b.n	800b972 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b972:	68fb      	ldr	r3, [r7, #12]
	}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10d      	bne.n	800b9ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d14d      	bne.n	800ba42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 ffd0 	bl	800c950 <xTaskPriorityDisinherit>
 800b9b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	609a      	str	r2, [r3, #8]
 800b9b8:	e043      	b.n	800ba42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d119      	bne.n	800b9f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6858      	ldr	r0, [r3, #4]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	f015 fbae 	bl	802112c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d8:	441a      	add	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d32b      	bcc.n	800ba42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	605a      	str	r2, [r3, #4]
 800b9f2:	e026      	b.n	800ba42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	68d8      	ldr	r0, [r3, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	68b9      	ldr	r1, [r7, #8]
 800ba00:	f015 fb94 	bl	802112c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	68da      	ldr	r2, [r3, #12]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0c:	425b      	negs	r3, r3
 800ba0e:	441a      	add	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	68da      	ldr	r2, [r3, #12]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d207      	bcs.n	800ba30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba28:	425b      	negs	r3, r3
 800ba2a:	441a      	add	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d105      	bne.n	800ba42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ba4a:	697b      	ldr	r3, [r7, #20]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d018      	beq.n	800ba98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68da      	ldr	r2, [r3, #12]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6e:	441a      	add	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	68da      	ldr	r2, [r3, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d303      	bcc.n	800ba88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68d9      	ldr	r1, [r3, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	461a      	mov	r2, r3
 800ba92:	6838      	ldr	r0, [r7, #0]
 800ba94:	f015 fb4a 	bl	802112c <memcpy>
	}
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800baa8:	f001 fc0c 	bl	800d2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bab2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bab4:	e011      	b.n	800bada <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	2b00      	cmp	r3, #0
 800babc:	d012      	beq.n	800bae4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3324      	adds	r3, #36	; 0x24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f000 fcfe 	bl	800c4c4 <xTaskRemoveFromEventList>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bace:	f000 fdd3 	bl	800c678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	dce9      	bgt.n	800bab6 <prvUnlockQueue+0x16>
 800bae2:	e000      	b.n	800bae6 <prvUnlockQueue+0x46>
					break;
 800bae4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	22ff      	movs	r2, #255	; 0xff
 800baea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800baee:	f001 fc19 	bl	800d324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800baf2:	f001 fbe7 	bl	800d2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bafc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bafe:	e011      	b.n	800bb24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d012      	beq.n	800bb2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3310      	adds	r3, #16
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 fcd9 	bl	800c4c4 <xTaskRemoveFromEventList>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb18:	f000 fdae 	bl	800c678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dce9      	bgt.n	800bb00 <prvUnlockQueue+0x60>
 800bb2c:	e000      	b.n	800bb30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	22ff      	movs	r2, #255	; 0xff
 800bb34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb38:	f001 fbf4 	bl	800d324 <vPortExitCritical>
}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb4c:	f001 fbba 	bl	800d2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d102      	bne.n	800bb5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	e001      	b.n	800bb62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb62:	f001 fbdf 	bl	800d324 <vPortExitCritical>

	return xReturn;
 800bb66:	68fb      	ldr	r3, [r7, #12]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb78:	f001 fba4 	bl	800d2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d102      	bne.n	800bb8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	e001      	b.n	800bb92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb92:	f001 fbc7 	bl	800d324 <vPortExitCritical>

	return xReturn;
 800bb96:	68fb      	ldr	r3, [r7, #12]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bba8:	2300      	movs	r3, #0
 800bbaa:	60fb      	str	r3, [r7, #12]
 800bbac:	e016      	b.n	800bbdc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bbae:	4a10      	ldr	r2, [pc, #64]	; (800bbf0 <vQueueUnregisterQueue+0x50>)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	4413      	add	r3, r2
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d10b      	bne.n	800bbd6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bbbe:	4a0c      	ldr	r2, [pc, #48]	; (800bbf0 <vQueueUnregisterQueue+0x50>)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <vQueueUnregisterQueue+0x50>)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	4413      	add	r3, r2
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]
				break;
 800bbd4:	e006      	b.n	800bbe4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b07      	cmp	r3, #7
 800bbe0:	d9e5      	bls.n	800bbae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	2001774c 	.word	0x2001774c

0800bbf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08c      	sub	sp, #48	; 0x30
 800bbf8:	af04      	add	r7, sp, #16
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	4613      	mov	r3, r2
 800bc02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc04:	88fb      	ldrh	r3, [r7, #6]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 fc7d 	bl	800d508 <pvPortMalloc>
 800bc0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00e      	beq.n	800bc34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc16:	20b4      	movs	r0, #180	; 0xb4
 800bc18:	f001 fc76 	bl	800d508 <pvPortMalloc>
 800bc1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	631a      	str	r2, [r3, #48]	; 0x30
 800bc2a:	e005      	b.n	800bc38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc2c:	6978      	ldr	r0, [r7, #20]
 800bc2e:	f001 fd37 	bl	800d6a0 <vPortFree>
 800bc32:	e001      	b.n	800bc38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc34:	2300      	movs	r3, #0
 800bc36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d013      	beq.n	800bc66 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	2300      	movs	r3, #0
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	9302      	str	r3, [sp, #8]
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f80f 	bl	800bc78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc5a:	69f8      	ldr	r0, [r7, #28]
 800bc5c:	f000 f8aa 	bl	800bdb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc60:	2301      	movs	r3, #1
 800bc62:	61bb      	str	r3, [r7, #24]
 800bc64:	e002      	b.n	800bc6c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc6c:	69bb      	ldr	r3, [r7, #24]
	}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bc90:	3b01      	subs	r3, #1
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	617b      	str	r3, [r7, #20]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d01f      	beq.n	800bd06 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	61fb      	str	r3, [r7, #28]
 800bcca:	e012      	b.n	800bcf2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	7819      	ldrb	r1, [r3, #0]
 800bcd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	3334      	adds	r3, #52	; 0x34
 800bcdc:	460a      	mov	r2, r1
 800bcde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	4413      	add	r3, r2
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d006      	beq.n	800bcfa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	61fb      	str	r3, [r7, #28]
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	2b0f      	cmp	r3, #15
 800bcf6:	d9e9      	bls.n	800bccc <prvInitialiseNewTask+0x54>
 800bcf8:	e000      	b.n	800bcfc <prvInitialiseNewTask+0x84>
			{
				break;
 800bcfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd04:	e003      	b.n	800bd0e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	2b06      	cmp	r3, #6
 800bd12:	d901      	bls.n	800bd18 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd14:	2306      	movs	r3, #6
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	2200      	movs	r2, #0
 800bd28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe ff9d 	bl	800ac6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd36:	3318      	adds	r3, #24
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe ff98 	bl	800ac6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	f1c3 0207 	rsb	r2, r3, #7
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd66:	334c      	adds	r3, #76	; 0x4c
 800bd68:	2260      	movs	r2, #96	; 0x60
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f015 fa05 	bl	802117c <memset>
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	4a0c      	ldr	r2, [pc, #48]	; (800bda8 <prvInitialiseNewTask+0x130>)
 800bd76:	651a      	str	r2, [r3, #80]	; 0x50
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	4a0c      	ldr	r2, [pc, #48]	; (800bdac <prvInitialiseNewTask+0x134>)
 800bd7c:	655a      	str	r2, [r3, #84]	; 0x54
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	4a0b      	ldr	r2, [pc, #44]	; (800bdb0 <prvInitialiseNewTask+0x138>)
 800bd82:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	68f9      	ldr	r1, [r7, #12]
 800bd88:	69b8      	ldr	r0, [r7, #24]
 800bd8a:	f001 f971 	bl	800d070 <pxPortInitialiseStack>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d002      	beq.n	800bda0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bda0:	bf00      	nop
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	08029b00 	.word	0x08029b00
 800bdac:	08029b20 	.word	0x08029b20
 800bdb0:	08029ae0 	.word	0x08029ae0

0800bdb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bdbc:	f001 fa82 	bl	800d2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdc0:	4b2a      	ldr	r3, [pc, #168]	; (800be6c <prvAddNewTaskToReadyList+0xb8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	4a29      	ldr	r2, [pc, #164]	; (800be6c <prvAddNewTaskToReadyList+0xb8>)
 800bdc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdca:	4b29      	ldr	r3, [pc, #164]	; (800be70 <prvAddNewTaskToReadyList+0xbc>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d109      	bne.n	800bde6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdd2:	4a27      	ldr	r2, [pc, #156]	; (800be70 <prvAddNewTaskToReadyList+0xbc>)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdd8:	4b24      	ldr	r3, [pc, #144]	; (800be6c <prvAddNewTaskToReadyList+0xb8>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d110      	bne.n	800be02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bde0:	f000 fc6e 	bl	800c6c0 <prvInitialiseTaskLists>
 800bde4:	e00d      	b.n	800be02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bde6:	4b23      	ldr	r3, [pc, #140]	; (800be74 <prvAddNewTaskToReadyList+0xc0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d109      	bne.n	800be02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdee:	4b20      	ldr	r3, [pc, #128]	; (800be70 <prvAddNewTaskToReadyList+0xbc>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d802      	bhi.n	800be02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bdfc:	4a1c      	ldr	r2, [pc, #112]	; (800be70 <prvAddNewTaskToReadyList+0xbc>)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be02:	4b1d      	ldr	r3, [pc, #116]	; (800be78 <prvAddNewTaskToReadyList+0xc4>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3301      	adds	r3, #1
 800be08:	4a1b      	ldr	r2, [pc, #108]	; (800be78 <prvAddNewTaskToReadyList+0xc4>)
 800be0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	2201      	movs	r2, #1
 800be12:	409a      	lsls	r2, r3
 800be14:	4b19      	ldr	r3, [pc, #100]	; (800be7c <prvAddNewTaskToReadyList+0xc8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4313      	orrs	r3, r2
 800be1a:	4a18      	ldr	r2, [pc, #96]	; (800be7c <prvAddNewTaskToReadyList+0xc8>)
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4a15      	ldr	r2, [pc, #84]	; (800be80 <prvAddNewTaskToReadyList+0xcc>)
 800be2c:	441a      	add	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fe ff27 	bl	800ac88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be3a:	f001 fa73 	bl	800d324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be3e:	4b0d      	ldr	r3, [pc, #52]	; (800be74 <prvAddNewTaskToReadyList+0xc0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00e      	beq.n	800be64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be46:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <prvAddNewTaskToReadyList+0xbc>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	429a      	cmp	r2, r3
 800be52:	d207      	bcs.n	800be64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be54:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <prvAddNewTaskToReadyList+0xd0>)
 800be56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20000430 	.word	0x20000430
 800be70:	20000330 	.word	0x20000330
 800be74:	2000043c 	.word	0x2000043c
 800be78:	2000044c 	.word	0x2000044c
 800be7c:	20000438 	.word	0x20000438
 800be80:	20000334 	.word	0x20000334
 800be84:	e000ed04 	.word	0xe000ed04

0800be88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800be90:	f001 fa18 	bl	800d2c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <vTaskDelete+0x18>
 800be9a:	4b39      	ldr	r3, [pc, #228]	; (800bf80 <vTaskDelete+0xf8>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	e000      	b.n	800bea2 <vTaskDelete+0x1a>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe ff4a 	bl	800ad42 <uxListRemove>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d115      	bne.n	800bee0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb8:	4932      	ldr	r1, [pc, #200]	; (800bf84 <vTaskDelete+0xfc>)
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <vTaskDelete+0x58>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bece:	2201      	movs	r2, #1
 800bed0:	fa02 f303 	lsl.w	r3, r2, r3
 800bed4:	43da      	mvns	r2, r3
 800bed6:	4b2c      	ldr	r3, [pc, #176]	; (800bf88 <vTaskDelete+0x100>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4013      	ands	r3, r2
 800bedc:	4a2a      	ldr	r2, [pc, #168]	; (800bf88 <vTaskDelete+0x100>)
 800bede:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3318      	adds	r3, #24
 800beec:	4618      	mov	r0, r3
 800beee:	f7fe ff28 	bl	800ad42 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bef2:	4b26      	ldr	r3, [pc, #152]	; (800bf8c <vTaskDelete+0x104>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3301      	adds	r3, #1
 800bef8:	4a24      	ldr	r2, [pc, #144]	; (800bf8c <vTaskDelete+0x104>)
 800befa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800befc:	4b20      	ldr	r3, [pc, #128]	; (800bf80 <vTaskDelete+0xf8>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d10b      	bne.n	800bf1e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	4820      	ldr	r0, [pc, #128]	; (800bf90 <vTaskDelete+0x108>)
 800bf0e:	f7fe febb 	bl	800ac88 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bf12:	4b20      	ldr	r3, [pc, #128]	; (800bf94 <vTaskDelete+0x10c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3301      	adds	r3, #1
 800bf18:	4a1e      	ldr	r2, [pc, #120]	; (800bf94 <vTaskDelete+0x10c>)
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	e009      	b.n	800bf32 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bf1e:	4b1e      	ldr	r3, [pc, #120]	; (800bf98 <vTaskDelete+0x110>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	4a1c      	ldr	r2, [pc, #112]	; (800bf98 <vTaskDelete+0x110>)
 800bf26:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 fc37 	bl	800c79c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bf2e:	f000 fc4b 	bl	800c7c8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800bf32:	f001 f9f7 	bl	800d324 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bf36:	4b19      	ldr	r3, [pc, #100]	; (800bf9c <vTaskDelete+0x114>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d01b      	beq.n	800bf76 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800bf3e:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <vTaskDelete+0xf8>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d116      	bne.n	800bf76 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <vTaskDelete+0x118>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00a      	beq.n	800bf66 <vTaskDelete+0xde>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	60bb      	str	r3, [r7, #8]
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800bf66:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <vTaskDelete+0x11c>)
 800bf68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf76:	bf00      	nop
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000330 	.word	0x20000330
 800bf84:	20000334 	.word	0x20000334
 800bf88:	20000438 	.word	0x20000438
 800bf8c:	2000044c 	.word	0x2000044c
 800bf90:	20000404 	.word	0x20000404
 800bf94:	20000418 	.word	0x20000418
 800bf98:	20000430 	.word	0x20000430
 800bf9c:	2000043c 	.word	0x2000043c
 800bfa0:	20000458 	.word	0x20000458
 800bfa4:	e000ed04 	.word	0xe000ed04

0800bfa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d017      	beq.n	800bfea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bfba:	4b13      	ldr	r3, [pc, #76]	; (800c008 <vTaskDelay+0x60>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00a      	beq.n	800bfd8 <vTaskDelay+0x30>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	60bb      	str	r3, [r7, #8]
}
 800bfd4:	bf00      	nop
 800bfd6:	e7fe      	b.n	800bfd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bfd8:	f000 f86a 	bl	800c0b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bfdc:	2100      	movs	r1, #0
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 ffe0 	bl	800cfa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bfe4:	f000 f872 	bl	800c0cc <xTaskResumeAll>
 800bfe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d107      	bne.n	800c000 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bff0:	4b06      	ldr	r3, [pc, #24]	; (800c00c <vTaskDelay+0x64>)
 800bff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c000:	bf00      	nop
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20000458 	.word	0x20000458
 800c00c:	e000ed04 	.word	0xe000ed04

0800c010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c016:	4b1e      	ldr	r3, [pc, #120]	; (800c090 <vTaskStartScheduler+0x80>)
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	2300      	movs	r3, #0
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	2300      	movs	r3, #0
 800c020:	2280      	movs	r2, #128	; 0x80
 800c022:	491c      	ldr	r1, [pc, #112]	; (800c094 <vTaskStartScheduler+0x84>)
 800c024:	481c      	ldr	r0, [pc, #112]	; (800c098 <vTaskStartScheduler+0x88>)
 800c026:	f7ff fde5 	bl	800bbf4 <xTaskCreate>
 800c02a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d11b      	bne.n	800c06a <vTaskStartScheduler+0x5a>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60bb      	str	r3, [r7, #8]
}
 800c044:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c046:	4b15      	ldr	r3, [pc, #84]	; (800c09c <vTaskStartScheduler+0x8c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	334c      	adds	r3, #76	; 0x4c
 800c04c:	4a14      	ldr	r2, [pc, #80]	; (800c0a0 <vTaskStartScheduler+0x90>)
 800c04e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c050:	4b14      	ldr	r3, [pc, #80]	; (800c0a4 <vTaskStartScheduler+0x94>)
 800c052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c056:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c058:	4b13      	ldr	r3, [pc, #76]	; (800c0a8 <vTaskStartScheduler+0x98>)
 800c05a:	2201      	movs	r2, #1
 800c05c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c05e:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <vTaskStartScheduler+0x9c>)
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c064:	f001 f88c 	bl	800d180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c068:	e00e      	b.n	800c088 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c070:	d10a      	bne.n	800c088 <vTaskStartScheduler+0x78>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	607b      	str	r3, [r7, #4]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <vTaskStartScheduler+0x76>
}
 800c088:	bf00      	nop
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	20000454 	.word	0x20000454
 800c094:	08025840 	.word	0x08025840
 800c098:	0800c691 	.word	0x0800c691
 800c09c:	20000330 	.word	0x20000330
 800c0a0:	20000074 	.word	0x20000074
 800c0a4:	20000450 	.word	0x20000450
 800c0a8:	2000043c 	.word	0x2000043c
 800c0ac:	20000434 	.word	0x20000434

0800c0b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c0b4:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <vTaskSuspendAll+0x18>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	4a03      	ldr	r2, [pc, #12]	; (800c0c8 <vTaskSuspendAll+0x18>)
 800c0bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c0be:	bf00      	nop
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20000458 	.word	0x20000458

0800c0cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0da:	4b41      	ldr	r3, [pc, #260]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	603b      	str	r3, [r7, #0]
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0f8:	f001 f8e4 	bl	800d2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0fc:	4b38      	ldr	r3, [pc, #224]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	4a37      	ldr	r2, [pc, #220]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c106:	4b36      	ldr	r3, [pc, #216]	; (800c1e0 <xTaskResumeAll+0x114>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d161      	bne.n	800c1d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c10e:	4b35      	ldr	r3, [pc, #212]	; (800c1e4 <xTaskResumeAll+0x118>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d05d      	beq.n	800c1d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c116:	e02e      	b.n	800c176 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c118:	4b33      	ldr	r3, [pc, #204]	; (800c1e8 <xTaskResumeAll+0x11c>)
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3318      	adds	r3, #24
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe fe0c 	bl	800ad42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3304      	adds	r3, #4
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fe07 	bl	800ad42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	2201      	movs	r2, #1
 800c13a:	409a      	lsls	r2, r3
 800c13c:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <xTaskResumeAll+0x120>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4313      	orrs	r3, r2
 800c142:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <xTaskResumeAll+0x120>)
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4a27      	ldr	r2, [pc, #156]	; (800c1f0 <xTaskResumeAll+0x124>)
 800c154:	441a      	add	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3304      	adds	r3, #4
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7fe fd93 	bl	800ac88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c166:	4b23      	ldr	r3, [pc, #140]	; (800c1f4 <xTaskResumeAll+0x128>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d302      	bcc.n	800c176 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c170:	4b21      	ldr	r3, [pc, #132]	; (800c1f8 <xTaskResumeAll+0x12c>)
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c176:	4b1c      	ldr	r3, [pc, #112]	; (800c1e8 <xTaskResumeAll+0x11c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1cc      	bne.n	800c118 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c184:	f000 fb20 	bl	800c7c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c188:	4b1c      	ldr	r3, [pc, #112]	; (800c1fc <xTaskResumeAll+0x130>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d010      	beq.n	800c1b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c194:	f000 f858 	bl	800c248 <xTaskIncrementTick>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d002      	beq.n	800c1a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c19e:	4b16      	ldr	r3, [pc, #88]	; (800c1f8 <xTaskResumeAll+0x12c>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1f1      	bne.n	800c194 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c1b0:	4b12      	ldr	r3, [pc, #72]	; (800c1fc <xTaskResumeAll+0x130>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1b6:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <xTaskResumeAll+0x12c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <xTaskResumeAll+0x134>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1d2:	f001 f8a7 	bl	800d324 <vPortExitCritical>

	return xAlreadyYielded;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20000458 	.word	0x20000458
 800c1e4:	20000430 	.word	0x20000430
 800c1e8:	200003f0 	.word	0x200003f0
 800c1ec:	20000438 	.word	0x20000438
 800c1f0:	20000334 	.word	0x20000334
 800c1f4:	20000330 	.word	0x20000330
 800c1f8:	20000444 	.word	0x20000444
 800c1fc:	20000440 	.word	0x20000440
 800c200:	e000ed04 	.word	0xe000ed04

0800c204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <xTaskGetTickCount+0x1c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c210:	687b      	ldr	r3, [r7, #4]
}
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	20000434 	.word	0x20000434

0800c224 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c22a:	f001 f92d 	bl	800d488 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c22e:	2300      	movs	r3, #0
 800c230:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c232:	4b04      	ldr	r3, [pc, #16]	; (800c244 <xTaskGetTickCountFromISR+0x20>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c238:	683b      	ldr	r3, [r7, #0]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20000434 	.word	0x20000434

0800c248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c252:	4b4e      	ldr	r3, [pc, #312]	; (800c38c <xTaskIncrementTick+0x144>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f040 808e 	bne.w	800c378 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c25c:	4b4c      	ldr	r3, [pc, #304]	; (800c390 <xTaskIncrementTick+0x148>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3301      	adds	r3, #1
 800c262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c264:	4a4a      	ldr	r2, [pc, #296]	; (800c390 <xTaskIncrementTick+0x148>)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d120      	bne.n	800c2b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c270:	4b48      	ldr	r3, [pc, #288]	; (800c394 <xTaskIncrementTick+0x14c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <xTaskIncrementTick+0x48>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	603b      	str	r3, [r7, #0]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <xTaskIncrementTick+0x46>
 800c290:	4b40      	ldr	r3, [pc, #256]	; (800c394 <xTaskIncrementTick+0x14c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	60fb      	str	r3, [r7, #12]
 800c296:	4b40      	ldr	r3, [pc, #256]	; (800c398 <xTaskIncrementTick+0x150>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a3e      	ldr	r2, [pc, #248]	; (800c394 <xTaskIncrementTick+0x14c>)
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	4a3e      	ldr	r2, [pc, #248]	; (800c398 <xTaskIncrementTick+0x150>)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6013      	str	r3, [r2, #0]
 800c2a4:	4b3d      	ldr	r3, [pc, #244]	; (800c39c <xTaskIncrementTick+0x154>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	4a3c      	ldr	r2, [pc, #240]	; (800c39c <xTaskIncrementTick+0x154>)
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	f000 fa8b 	bl	800c7c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c2b2:	4b3b      	ldr	r3, [pc, #236]	; (800c3a0 <xTaskIncrementTick+0x158>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d348      	bcc.n	800c34e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2bc:	4b35      	ldr	r3, [pc, #212]	; (800c394 <xTaskIncrementTick+0x14c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c6:	4b36      	ldr	r3, [pc, #216]	; (800c3a0 <xTaskIncrementTick+0x158>)
 800c2c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2cc:	601a      	str	r2, [r3, #0]
					break;
 800c2ce:	e03e      	b.n	800c34e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d0:	4b30      	ldr	r3, [pc, #192]	; (800c394 <xTaskIncrementTick+0x14c>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d203      	bcs.n	800c2f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2e8:	4a2d      	ldr	r2, [pc, #180]	; (800c3a0 <xTaskIncrementTick+0x158>)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2ee:	e02e      	b.n	800c34e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fe fd24 	bl	800ad42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	3318      	adds	r3, #24
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe fd1b 	bl	800ad42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c310:	2201      	movs	r2, #1
 800c312:	409a      	lsls	r2, r3
 800c314:	4b23      	ldr	r3, [pc, #140]	; (800c3a4 <xTaskIncrementTick+0x15c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4313      	orrs	r3, r2
 800c31a:	4a22      	ldr	r2, [pc, #136]	; (800c3a4 <xTaskIncrementTick+0x15c>)
 800c31c:	6013      	str	r3, [r2, #0]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4a1f      	ldr	r2, [pc, #124]	; (800c3a8 <xTaskIncrementTick+0x160>)
 800c32c:	441a      	add	r2, r3
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	3304      	adds	r3, #4
 800c332:	4619      	mov	r1, r3
 800c334:	4610      	mov	r0, r2
 800c336:	f7fe fca7 	bl	800ac88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33e:	4b1b      	ldr	r3, [pc, #108]	; (800c3ac <xTaskIncrementTick+0x164>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c344:	429a      	cmp	r2, r3
 800c346:	d3b9      	bcc.n	800c2bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c348:	2301      	movs	r3, #1
 800c34a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c34c:	e7b6      	b.n	800c2bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c34e:	4b17      	ldr	r3, [pc, #92]	; (800c3ac <xTaskIncrementTick+0x164>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c354:	4914      	ldr	r1, [pc, #80]	; (800c3a8 <xTaskIncrementTick+0x160>)
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	440b      	add	r3, r1
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d901      	bls.n	800c36a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c366:	2301      	movs	r3, #1
 800c368:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c36a:	4b11      	ldr	r3, [pc, #68]	; (800c3b0 <xTaskIncrementTick+0x168>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d007      	beq.n	800c382 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c372:	2301      	movs	r3, #1
 800c374:	617b      	str	r3, [r7, #20]
 800c376:	e004      	b.n	800c382 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c378:	4b0e      	ldr	r3, [pc, #56]	; (800c3b4 <xTaskIncrementTick+0x16c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	4a0d      	ldr	r2, [pc, #52]	; (800c3b4 <xTaskIncrementTick+0x16c>)
 800c380:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c382:	697b      	ldr	r3, [r7, #20]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	20000458 	.word	0x20000458
 800c390:	20000434 	.word	0x20000434
 800c394:	200003e8 	.word	0x200003e8
 800c398:	200003ec 	.word	0x200003ec
 800c39c:	20000448 	.word	0x20000448
 800c3a0:	20000450 	.word	0x20000450
 800c3a4:	20000438 	.word	0x20000438
 800c3a8:	20000334 	.word	0x20000334
 800c3ac:	20000330 	.word	0x20000330
 800c3b0:	20000444 	.word	0x20000444
 800c3b4:	20000440 	.word	0x20000440

0800c3b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3be:	4b29      	ldr	r3, [pc, #164]	; (800c464 <vTaskSwitchContext+0xac>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3c6:	4b28      	ldr	r3, [pc, #160]	; (800c468 <vTaskSwitchContext+0xb0>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3cc:	e044      	b.n	800c458 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c3ce:	4b26      	ldr	r3, [pc, #152]	; (800c468 <vTaskSwitchContext+0xb0>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d4:	4b25      	ldr	r3, [pc, #148]	; (800c46c <vTaskSwitchContext+0xb4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	fab3 f383 	clz	r3, r3
 800c3e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c3e2:	7afb      	ldrb	r3, [r7, #11]
 800c3e4:	f1c3 031f 	rsb	r3, r3, #31
 800c3e8:	617b      	str	r3, [r7, #20]
 800c3ea:	4921      	ldr	r1, [pc, #132]	; (800c470 <vTaskSwitchContext+0xb8>)
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	440b      	add	r3, r1
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <vTaskSwitchContext+0x5a>
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4a14      	ldr	r2, [pc, #80]	; (800c470 <vTaskSwitchContext+0xb8>)
 800c420:	4413      	add	r3, r2
 800c422:	613b      	str	r3, [r7, #16]
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	605a      	str	r2, [r3, #4]
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	3308      	adds	r3, #8
 800c436:	429a      	cmp	r2, r3
 800c438:	d104      	bne.n	800c444 <vTaskSwitchContext+0x8c>
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	685a      	ldr	r2, [r3, #4]
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	605a      	str	r2, [r3, #4]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	4a0a      	ldr	r2, [pc, #40]	; (800c474 <vTaskSwitchContext+0xbc>)
 800c44c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c44e:	4b09      	ldr	r3, [pc, #36]	; (800c474 <vTaskSwitchContext+0xbc>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	334c      	adds	r3, #76	; 0x4c
 800c454:	4a08      	ldr	r2, [pc, #32]	; (800c478 <vTaskSwitchContext+0xc0>)
 800c456:	6013      	str	r3, [r2, #0]
}
 800c458:	bf00      	nop
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	20000458 	.word	0x20000458
 800c468:	20000444 	.word	0x20000444
 800c46c:	20000438 	.word	0x20000438
 800c470:	20000334 	.word	0x20000334
 800c474:	20000330 	.word	0x20000330
 800c478:	20000074 	.word	0x20000074

0800c47c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	60fb      	str	r3, [r7, #12]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4a2:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <vTaskPlaceOnEventList+0x44>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3318      	adds	r3, #24
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fe fc10 	bl	800acd0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	6838      	ldr	r0, [r7, #0]
 800c4b4:	f000 fd76 	bl	800cfa4 <prvAddCurrentTaskToDelayedList>
}
 800c4b8:	bf00      	nop
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20000330 	.word	0x20000330

0800c4c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10a      	bne.n	800c4f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4de:	f383 8811 	msr	BASEPRI, r3
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	60fb      	str	r3, [r7, #12]
}
 800c4ec:	bf00      	nop
 800c4ee:	e7fe      	b.n	800c4ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	3318      	adds	r3, #24
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe fc24 	bl	800ad42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4fa:	4b1d      	ldr	r3, [pc, #116]	; (800c570 <xTaskRemoveFromEventList+0xac>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d11c      	bne.n	800c53c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	3304      	adds	r3, #4
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fc1b 	bl	800ad42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c510:	2201      	movs	r2, #1
 800c512:	409a      	lsls	r2, r3
 800c514:	4b17      	ldr	r3, [pc, #92]	; (800c574 <xTaskRemoveFromEventList+0xb0>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4313      	orrs	r3, r2
 800c51a:	4a16      	ldr	r2, [pc, #88]	; (800c574 <xTaskRemoveFromEventList+0xb0>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4a13      	ldr	r2, [pc, #76]	; (800c578 <xTaskRemoveFromEventList+0xb4>)
 800c52c:	441a      	add	r2, r3
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	3304      	adds	r3, #4
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7fe fba7 	bl	800ac88 <vListInsertEnd>
 800c53a:	e005      	b.n	800c548 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	3318      	adds	r3, #24
 800c540:	4619      	mov	r1, r3
 800c542:	480e      	ldr	r0, [pc, #56]	; (800c57c <xTaskRemoveFromEventList+0xb8>)
 800c544:	f7fe fba0 	bl	800ac88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	4b0c      	ldr	r3, [pc, #48]	; (800c580 <xTaskRemoveFromEventList+0xbc>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c552:	429a      	cmp	r2, r3
 800c554:	d905      	bls.n	800c562 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c556:	2301      	movs	r3, #1
 800c558:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c55a:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <xTaskRemoveFromEventList+0xc0>)
 800c55c:	2201      	movs	r2, #1
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	e001      	b.n	800c566 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c562:	2300      	movs	r3, #0
 800c564:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c566:	697b      	ldr	r3, [r7, #20]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20000458 	.word	0x20000458
 800c574:	20000438 	.word	0x20000438
 800c578:	20000334 	.word	0x20000334
 800c57c:	200003f0 	.word	0x200003f0
 800c580:	20000330 	.word	0x20000330
 800c584:	20000444 	.word	0x20000444

0800c588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c590:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <vTaskInternalSetTimeOutState+0x24>)
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <vTaskInternalSetTimeOutState+0x28>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	605a      	str	r2, [r3, #4]
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	20000448 	.word	0x20000448
 800c5b0:	20000434 	.word	0x20000434

0800c5b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	613b      	str	r3, [r7, #16]
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	60fb      	str	r3, [r7, #12]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c5f6:	f000 fe65 	bl	800d2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5fa:	4b1d      	ldr	r3, [pc, #116]	; (800c670 <xTaskCheckForTimeOut+0xbc>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c612:	d102      	bne.n	800c61a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c614:	2300      	movs	r3, #0
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	e023      	b.n	800c662 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b15      	ldr	r3, [pc, #84]	; (800c674 <xTaskCheckForTimeOut+0xc0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d007      	beq.n	800c636 <xTaskCheckForTimeOut+0x82>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d302      	bcc.n	800c636 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	61fb      	str	r3, [r7, #28]
 800c634:	e015      	b.n	800c662 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d20b      	bcs.n	800c658 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	1ad2      	subs	r2, r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff ff9b 	bl	800c588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
 800c656:	e004      	b.n	800c662 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c65e:	2301      	movs	r3, #1
 800c660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c662:	f000 fe5f 	bl	800d324 <vPortExitCritical>

	return xReturn;
 800c666:	69fb      	ldr	r3, [r7, #28]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3720      	adds	r7, #32
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	20000434 	.word	0x20000434
 800c674:	20000448 	.word	0x20000448

0800c678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c67c:	4b03      	ldr	r3, [pc, #12]	; (800c68c <vTaskMissedYield+0x14>)
 800c67e:	2201      	movs	r2, #1
 800c680:	601a      	str	r2, [r3, #0]
}
 800c682:	bf00      	nop
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	20000444 	.word	0x20000444

0800c690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c698:	f000 f852 	bl	800c740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c69c:	4b06      	ldr	r3, [pc, #24]	; (800c6b8 <prvIdleTask+0x28>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d9f9      	bls.n	800c698 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6a4:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <prvIdleTask+0x2c>)
 800c6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6b4:	e7f0      	b.n	800c698 <prvIdleTask+0x8>
 800c6b6:	bf00      	nop
 800c6b8:	20000334 	.word	0x20000334
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	607b      	str	r3, [r7, #4]
 800c6ca:	e00c      	b.n	800c6e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4a12      	ldr	r2, [pc, #72]	; (800c720 <prvInitialiseTaskLists+0x60>)
 800c6d8:	4413      	add	r3, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe faa7 	bl	800ac2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	607b      	str	r3, [r7, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b06      	cmp	r3, #6
 800c6ea:	d9ef      	bls.n	800c6cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6ec:	480d      	ldr	r0, [pc, #52]	; (800c724 <prvInitialiseTaskLists+0x64>)
 800c6ee:	f7fe fa9e 	bl	800ac2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6f2:	480d      	ldr	r0, [pc, #52]	; (800c728 <prvInitialiseTaskLists+0x68>)
 800c6f4:	f7fe fa9b 	bl	800ac2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6f8:	480c      	ldr	r0, [pc, #48]	; (800c72c <prvInitialiseTaskLists+0x6c>)
 800c6fa:	f7fe fa98 	bl	800ac2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6fe:	480c      	ldr	r0, [pc, #48]	; (800c730 <prvInitialiseTaskLists+0x70>)
 800c700:	f7fe fa95 	bl	800ac2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c704:	480b      	ldr	r0, [pc, #44]	; (800c734 <prvInitialiseTaskLists+0x74>)
 800c706:	f7fe fa92 	bl	800ac2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c70a:	4b0b      	ldr	r3, [pc, #44]	; (800c738 <prvInitialiseTaskLists+0x78>)
 800c70c:	4a05      	ldr	r2, [pc, #20]	; (800c724 <prvInitialiseTaskLists+0x64>)
 800c70e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c710:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <prvInitialiseTaskLists+0x7c>)
 800c712:	4a05      	ldr	r2, [pc, #20]	; (800c728 <prvInitialiseTaskLists+0x68>)
 800c714:	601a      	str	r2, [r3, #0]
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000334 	.word	0x20000334
 800c724:	200003c0 	.word	0x200003c0
 800c728:	200003d4 	.word	0x200003d4
 800c72c:	200003f0 	.word	0x200003f0
 800c730:	20000404 	.word	0x20000404
 800c734:	2000041c 	.word	0x2000041c
 800c738:	200003e8 	.word	0x200003e8
 800c73c:	200003ec 	.word	0x200003ec

0800c740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c746:	e019      	b.n	800c77c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c748:	f000 fdbc 	bl	800d2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c74c:	4b10      	ldr	r3, [pc, #64]	; (800c790 <prvCheckTasksWaitingTermination+0x50>)
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	3304      	adds	r3, #4
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fe faf2 	bl	800ad42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c75e:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <prvCheckTasksWaitingTermination+0x54>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3b01      	subs	r3, #1
 800c764:	4a0b      	ldr	r2, [pc, #44]	; (800c794 <prvCheckTasksWaitingTermination+0x54>)
 800c766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c768:	4b0b      	ldr	r3, [pc, #44]	; (800c798 <prvCheckTasksWaitingTermination+0x58>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3b01      	subs	r3, #1
 800c76e:	4a0a      	ldr	r2, [pc, #40]	; (800c798 <prvCheckTasksWaitingTermination+0x58>)
 800c770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c772:	f000 fdd7 	bl	800d324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f810 	bl	800c79c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c77c:	4b06      	ldr	r3, [pc, #24]	; (800c798 <prvCheckTasksWaitingTermination+0x58>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1e1      	bne.n	800c748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20000404 	.word	0x20000404
 800c794:	20000430 	.word	0x20000430
 800c798:	20000418 	.word	0x20000418

0800c79c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	334c      	adds	r3, #76	; 0x4c
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f015 fadf 	bl	8021d6c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 ff74 	bl	800d6a0 <vPortFree>
			vPortFree( pxTCB );
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 ff71 	bl	800d6a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
	...

0800c7c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7ce:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <prvResetNextTaskUnblockTime+0x38>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d104      	bne.n	800c7e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7d8:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <prvResetNextTaskUnblockTime+0x3c>)
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7e0:	e008      	b.n	800c7f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e2:	4b07      	ldr	r3, [pc, #28]	; (800c800 <prvResetNextTaskUnblockTime+0x38>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	4a04      	ldr	r2, [pc, #16]	; (800c804 <prvResetNextTaskUnblockTime+0x3c>)
 800c7f2:	6013      	str	r3, [r2, #0]
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	200003e8 	.word	0x200003e8
 800c804:	20000450 	.word	0x20000450

0800c808 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c80e:	4b05      	ldr	r3, [pc, #20]	; (800c824 <xTaskGetCurrentTaskHandle+0x1c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c814:	687b      	ldr	r3, [r7, #4]
	}
 800c816:	4618      	mov	r0, r3
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	20000330 	.word	0x20000330

0800c828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c82e:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <xTaskGetSchedulerState+0x34>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c836:	2301      	movs	r3, #1
 800c838:	607b      	str	r3, [r7, #4]
 800c83a:	e008      	b.n	800c84e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c83c:	4b08      	ldr	r3, [pc, #32]	; (800c860 <xTaskGetSchedulerState+0x38>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d102      	bne.n	800c84a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c844:	2302      	movs	r3, #2
 800c846:	607b      	str	r3, [r7, #4]
 800c848:	e001      	b.n	800c84e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c84a:	2300      	movs	r3, #0
 800c84c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c84e:	687b      	ldr	r3, [r7, #4]
	}
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	2000043c 	.word	0x2000043c
 800c860:	20000458 	.word	0x20000458

0800c864 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d05e      	beq.n	800c938 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87e:	4b31      	ldr	r3, [pc, #196]	; (800c944 <xTaskPriorityInherit+0xe0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	429a      	cmp	r2, r3
 800c886:	d24e      	bcs.n	800c926 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	db06      	blt.n	800c89e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c890:	4b2c      	ldr	r3, [pc, #176]	; (800c944 <xTaskPriorityInherit+0xe0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c896:	f1c3 0207 	rsb	r2, r3, #7
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6959      	ldr	r1, [r3, #20]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4a26      	ldr	r2, [pc, #152]	; (800c948 <xTaskPriorityInherit+0xe4>)
 800c8b0:	4413      	add	r3, r2
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	d12f      	bne.n	800c916 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fa41 	bl	800ad42 <uxListRemove>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10a      	bne.n	800c8dc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d0:	43da      	mvns	r2, r3
 800c8d2:	4b1e      	ldr	r3, [pc, #120]	; (800c94c <xTaskPriorityInherit+0xe8>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	4a1c      	ldr	r2, [pc, #112]	; (800c94c <xTaskPriorityInherit+0xe8>)
 800c8da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8dc:	4b19      	ldr	r3, [pc, #100]	; (800c944 <xTaskPriorityInherit+0xe0>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	409a      	lsls	r2, r3
 800c8ee:	4b17      	ldr	r3, [pc, #92]	; (800c94c <xTaskPriorityInherit+0xe8>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	4a15      	ldr	r2, [pc, #84]	; (800c94c <xTaskPriorityInherit+0xe8>)
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4a10      	ldr	r2, [pc, #64]	; (800c948 <xTaskPriorityInherit+0xe4>)
 800c906:	441a      	add	r2, r3
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	3304      	adds	r3, #4
 800c90c:	4619      	mov	r1, r3
 800c90e:	4610      	mov	r0, r2
 800c910:	f7fe f9ba 	bl	800ac88 <vListInsertEnd>
 800c914:	e004      	b.n	800c920 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c916:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <xTaskPriorityInherit+0xe0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c920:	2301      	movs	r3, #1
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e008      	b.n	800c938 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c92a:	4b06      	ldr	r3, [pc, #24]	; (800c944 <xTaskPriorityInherit+0xe0>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	429a      	cmp	r2, r3
 800c932:	d201      	bcs.n	800c938 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c934:	2301      	movs	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c938:	68fb      	ldr	r3, [r7, #12]
	}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	20000330 	.word	0x20000330
 800c948:	20000334 	.word	0x20000334
 800c94c:	20000438 	.word	0x20000438

0800c950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c95c:	2300      	movs	r3, #0
 800c95e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d06e      	beq.n	800ca44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c966:	4b3a      	ldr	r3, [pc, #232]	; (800ca50 <xTaskPriorityDisinherit+0x100>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d00a      	beq.n	800c986 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	60fb      	str	r3, [r7, #12]
}
 800c982:	bf00      	nop
 800c984:	e7fe      	b.n	800c984 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10a      	bne.n	800c9a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	60bb      	str	r3, [r7, #8]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9a8:	1e5a      	subs	r2, r3, #1
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d044      	beq.n	800ca44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d140      	bne.n	800ca44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe f9bb 	bl	800ad42 <uxListRemove>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d115      	bne.n	800c9fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d6:	491f      	ldr	r1, [pc, #124]	; (800ca54 <xTaskPriorityDisinherit+0x104>)
 800c9d8:	4613      	mov	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	440b      	add	r3, r1
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <xTaskPriorityDisinherit+0xae>
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f2:	43da      	mvns	r2, r3
 800c9f4:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <xTaskPriorityDisinherit+0x108>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <xTaskPriorityDisinherit+0x108>)
 800c9fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	f1c3 0207 	rsb	r2, r3, #7
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca16:	2201      	movs	r2, #1
 800ca18:	409a      	lsls	r2, r3
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <xTaskPriorityDisinherit+0x108>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	4a0d      	ldr	r2, [pc, #52]	; (800ca58 <xTaskPriorityDisinherit+0x108>)
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4613      	mov	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4a08      	ldr	r2, [pc, #32]	; (800ca54 <xTaskPriorityDisinherit+0x104>)
 800ca32:	441a      	add	r2, r3
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	3304      	adds	r3, #4
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	f7fe f924 	bl	800ac88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca40:	2301      	movs	r3, #1
 800ca42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca44:	697b      	ldr	r3, [r7, #20]
	}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	20000330 	.word	0x20000330
 800ca54:	20000334 	.word	0x20000334
 800ca58:	20000438 	.word	0x20000438

0800ca5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d077      	beq.n	800cb64 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	60fb      	str	r3, [r7, #12]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d902      	bls.n	800caa2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	e002      	b.n	800caa8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caac:	69fa      	ldr	r2, [r7, #28]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d058      	beq.n	800cb64 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d153      	bne.n	800cb64 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cabc:	4b2b      	ldr	r3, [pc, #172]	; (800cb6c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d10a      	bne.n	800cadc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	60bb      	str	r3, [r7, #8]
}
 800cad8:	bf00      	nop
 800cada:	e7fe      	b.n	800cada <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	69fa      	ldr	r2, [r7, #28]
 800cae6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	2b00      	cmp	r3, #0
 800caee:	db04      	blt.n	800cafa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	f1c3 0207 	rsb	r2, r3, #7
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	6959      	ldr	r1, [r3, #20]
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4a19      	ldr	r2, [pc, #100]	; (800cb70 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cb0a:	4413      	add	r3, r2
 800cb0c:	4299      	cmp	r1, r3
 800cb0e:	d129      	bne.n	800cb64 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe f914 	bl	800ad42 <uxListRemove>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10a      	bne.n	800cb36 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb24:	2201      	movs	r2, #1
 800cb26:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2a:	43da      	mvns	r2, r3
 800cb2c:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4013      	ands	r3, r2
 800cb32:	4a10      	ldr	r2, [pc, #64]	; (800cb74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cb34:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	409a      	lsls	r2, r3
 800cb3e:	4b0d      	ldr	r3, [pc, #52]	; (800cb74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	4a0b      	ldr	r2, [pc, #44]	; (800cb74 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4a06      	ldr	r2, [pc, #24]	; (800cb70 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cb56:	441a      	add	r2, r3
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4610      	mov	r0, r2
 800cb60:	f7fe f892 	bl	800ac88 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb64:	bf00      	nop
 800cb66:	3720      	adds	r7, #32
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000330 	.word	0x20000330
 800cb70:	20000334 	.word	0x20000334
 800cb74:	20000438 	.word	0x20000438

0800cb78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cb78:	b480      	push	{r7}
 800cb7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cb7c:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb8a:	3201      	adds	r2, #1
 800cb8c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cb8e:	4b03      	ldr	r3, [pc, #12]	; (800cb9c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb90:	681b      	ldr	r3, [r3, #0]
	}
 800cb92:	4618      	mov	r0, r3
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	20000330 	.word	0x20000330

0800cba0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
 800cbac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cbae:	f000 fb89 	bl	800d2c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cbb2:	4b29      	ldr	r3, [pc, #164]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d01c      	beq.n	800cbfa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cbc0:	4b25      	ldr	r3, [pc, #148]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	43d2      	mvns	r2, r2
 800cbcc:	400a      	ands	r2, r1
 800cbce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cbd2:	4b21      	ldr	r3, [pc, #132]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00b      	beq.n	800cbfa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	6838      	ldr	r0, [r7, #0]
 800cbe6:	f000 f9dd 	bl	800cfa4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cbea:	4b1c      	ldr	r3, [pc, #112]	; (800cc5c <xTaskNotifyWait+0xbc>)
 800cbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cbfa:	f000 fb93 	bl	800d324 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cbfe:	f000 fb61 	bl	800d2c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d005      	beq.n	800cc14 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cc08:	4b13      	ldr	r3, [pc, #76]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cc14:	4b10      	ldr	r3, [pc, #64]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d002      	beq.n	800cc28 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
 800cc26:	e00a      	b.n	800cc3e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cc28:	4b0b      	ldr	r3, [pc, #44]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	43d2      	mvns	r2, r2
 800cc34:	400a      	ands	r2, r1
 800cc36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc3e:	4b06      	ldr	r3, [pc, #24]	; (800cc58 <xTaskNotifyWait+0xb8>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800cc48:	f000 fb6c 	bl	800d324 <vPortExitCritical>

		return xReturn;
 800cc4c:	697b      	ldr	r3, [r7, #20]
	}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	20000330 	.word	0x20000330
 800cc5c:	e000ed04 	.word	0xe000ed04

0800cc60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b08a      	sub	sp, #40	; 0x28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	603b      	str	r3, [r7, #0]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800cc70:	2301      	movs	r3, #1
 800cc72:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10a      	bne.n	800cc90 <xTaskGenericNotify+0x30>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	61bb      	str	r3, [r7, #24]
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cc94:	f000 fb16 	bl	800d2c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ccae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	2b04      	cmp	r3, #4
 800ccbc:	d82d      	bhi.n	800cd1a <xTaskGenericNotify+0xba>
 800ccbe:	a201      	add	r2, pc, #4	; (adr r2, 800ccc4 <xTaskGenericNotify+0x64>)
 800ccc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc4:	0800cd3d 	.word	0x0800cd3d
 800ccc8:	0800ccd9 	.word	0x0800ccd9
 800cccc:	0800cceb 	.word	0x0800cceb
 800ccd0:	0800ccfb 	.word	0x0800ccfb
 800ccd4:	0800cd05 	.word	0x0800cd05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	431a      	orrs	r2, r3
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cce8:	e02b      	b.n	800cd42 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ccf8:	e023      	b.n	800cd42 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cd02:	e01e      	b.n	800cd42 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cd04:	7ffb      	ldrb	r3, [r7, #31]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d004      	beq.n	800cd14 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cd12:	e016      	b.n	800cd42 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cd18:	e013      	b.n	800cd42 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cd20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd24:	d00c      	beq.n	800cd40 <xTaskGenericNotify+0xe0>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	617b      	str	r3, [r7, #20]
}
 800cd38:	bf00      	nop
 800cd3a:	e7fe      	b.n	800cd3a <xTaskGenericNotify+0xda>
					break;
 800cd3c:	bf00      	nop
 800cd3e:	e000      	b.n	800cd42 <xTaskGenericNotify+0xe2>

					break;
 800cd40:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cd42:	7ffb      	ldrb	r3, [r7, #31]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d139      	bne.n	800cdbc <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fd fff8 	bl	800ad42 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd56:	2201      	movs	r2, #1
 800cd58:	409a      	lsls	r2, r3
 800cd5a:	4b1c      	ldr	r3, [pc, #112]	; (800cdcc <xTaskGenericNotify+0x16c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	4a1a      	ldr	r2, [pc, #104]	; (800cdcc <xTaskGenericNotify+0x16c>)
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd68:	4613      	mov	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4a17      	ldr	r2, [pc, #92]	; (800cdd0 <xTaskGenericNotify+0x170>)
 800cd72:	441a      	add	r2, r3
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	3304      	adds	r3, #4
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4610      	mov	r0, r2
 800cd7c:	f7fd ff84 	bl	800ac88 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00a      	beq.n	800cd9e <xTaskGenericNotify+0x13e>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	613b      	str	r3, [r7, #16]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda2:	4b0c      	ldr	r3, [pc, #48]	; (800cdd4 <xTaskGenericNotify+0x174>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d907      	bls.n	800cdbc <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <xTaskGenericNotify+0x178>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cdbc:	f000 fab2 	bl	800d324 <vPortExitCritical>

		return xReturn;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3728      	adds	r7, #40	; 0x28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	20000438 	.word	0x20000438
 800cdd0:	20000334 	.word	0x20000334
 800cdd4:	20000330 	.word	0x20000330
 800cdd8:	e000ed04 	.word	0xe000ed04

0800cddc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08e      	sub	sp, #56	; 0x38
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	4613      	mov	r3, r2
 800cdea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cdec:	2301      	movs	r3, #1
 800cdee:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10a      	bne.n	800ce0c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce08:	bf00      	nop
 800ce0a:	e7fe      	b.n	800ce0a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce0c:	f000 fb3c 	bl	800d488 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ce14:	f3ef 8211 	mrs	r2, BASEPRI
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	623a      	str	r2, [r7, #32]
 800ce2a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ce2c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d004      	beq.n	800ce40 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ce46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	d82f      	bhi.n	800ceb8 <xTaskGenericNotifyFromISR+0xdc>
 800ce58:	a201      	add	r2, pc, #4	; (adr r2, 800ce60 <xTaskGenericNotifyFromISR+0x84>)
 800ce5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5e:	bf00      	nop
 800ce60:	0800cedb 	.word	0x0800cedb
 800ce64:	0800ce75 	.word	0x0800ce75
 800ce68:	0800ce87 	.word	0x0800ce87
 800ce6c:	0800ce97 	.word	0x0800ce97
 800ce70:	0800cea1 	.word	0x0800cea1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ce74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce76:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ce84:	e02c      	b.n	800cee0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ce94:	e024      	b.n	800cee0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ce9e:	e01f      	b.n	800cee0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d004      	beq.n	800ceb2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ceb0:	e016      	b.n	800cee0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ceb6:	e013      	b.n	800cee0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec2:	d00c      	beq.n	800cede <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	61bb      	str	r3, [r7, #24]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ceda:	bf00      	nop
 800cedc:	e000      	b.n	800cee0 <xTaskGenericNotifyFromISR+0x104>
					break;
 800cede:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d145      	bne.n	800cf74 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00a      	beq.n	800cf06 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef4:	f383 8811 	msr	BASEPRI, r3
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	617b      	str	r3, [r7, #20]
}
 800cf02:	bf00      	nop
 800cf04:	e7fe      	b.n	800cf04 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf06:	4b21      	ldr	r3, [pc, #132]	; (800cf8c <xTaskGenericNotifyFromISR+0x1b0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d11c      	bne.n	800cf48 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	3304      	adds	r3, #4
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fd ff15 	bl	800ad42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	409a      	lsls	r2, r3
 800cf20:	4b1b      	ldr	r3, [pc, #108]	; (800cf90 <xTaskGenericNotifyFromISR+0x1b4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4313      	orrs	r3, r2
 800cf26:	4a1a      	ldr	r2, [pc, #104]	; (800cf90 <xTaskGenericNotifyFromISR+0x1b4>)
 800cf28:	6013      	str	r3, [r2, #0]
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2e:	4613      	mov	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4413      	add	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	4a17      	ldr	r2, [pc, #92]	; (800cf94 <xTaskGenericNotifyFromISR+0x1b8>)
 800cf38:	441a      	add	r2, r3
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f7fd fea1 	bl	800ac88 <vListInsertEnd>
 800cf46:	e005      	b.n	800cf54 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4a:	3318      	adds	r3, #24
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	4812      	ldr	r0, [pc, #72]	; (800cf98 <xTaskGenericNotifyFromISR+0x1bc>)
 800cf50:	f7fd fe9a 	bl	800ac88 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf58:	4b10      	ldr	r3, [pc, #64]	; (800cf9c <xTaskGenericNotifyFromISR+0x1c0>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d908      	bls.n	800cf74 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cf62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cf68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cf6e:	4b0c      	ldr	r3, [pc, #48]	; (800cfa0 <xTaskGenericNotifyFromISR+0x1c4>)
 800cf70:	2201      	movs	r2, #1
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f383 8811 	msr	BASEPRI, r3
}
 800cf7e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3738      	adds	r7, #56	; 0x38
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000458 	.word	0x20000458
 800cf90:	20000438 	.word	0x20000438
 800cf94:	20000334 	.word	0x20000334
 800cf98:	200003f0 	.word	0x200003f0
 800cf9c:	20000330 	.word	0x20000330
 800cfa0:	20000444 	.word	0x20000444

0800cfa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfae:	4b29      	ldr	r3, [pc, #164]	; (800d054 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfb4:	4b28      	ldr	r3, [pc, #160]	; (800d058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fd fec1 	bl	800ad42 <uxListRemove>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10b      	bne.n	800cfde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cfc6:	4b24      	ldr	r3, [pc, #144]	; (800d058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	2201      	movs	r2, #1
 800cfce:	fa02 f303 	lsl.w	r3, r2, r3
 800cfd2:	43da      	mvns	r2, r3
 800cfd4:	4b21      	ldr	r3, [pc, #132]	; (800d05c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4013      	ands	r3, r2
 800cfda:	4a20      	ldr	r2, [pc, #128]	; (800d05c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe4:	d10a      	bne.n	800cffc <prvAddCurrentTaskToDelayedList+0x58>
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d007      	beq.n	800cffc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfec:	4b1a      	ldr	r3, [pc, #104]	; (800d058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3304      	adds	r3, #4
 800cff2:	4619      	mov	r1, r3
 800cff4:	481a      	ldr	r0, [pc, #104]	; (800d060 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cff6:	f7fd fe47 	bl	800ac88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cffa:	e026      	b.n	800d04a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4413      	add	r3, r2
 800d002:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d004:	4b14      	ldr	r3, [pc, #80]	; (800d058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	429a      	cmp	r2, r3
 800d012:	d209      	bcs.n	800d028 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d014:	4b13      	ldr	r3, [pc, #76]	; (800d064 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3304      	adds	r3, #4
 800d01e:	4619      	mov	r1, r3
 800d020:	4610      	mov	r0, r2
 800d022:	f7fd fe55 	bl	800acd0 <vListInsert>
}
 800d026:	e010      	b.n	800d04a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d028:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3304      	adds	r3, #4
 800d032:	4619      	mov	r1, r3
 800d034:	4610      	mov	r0, r2
 800d036:	f7fd fe4b 	bl	800acd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d03a:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	429a      	cmp	r2, r3
 800d042:	d202      	bcs.n	800d04a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d044:	4a09      	ldr	r2, [pc, #36]	; (800d06c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6013      	str	r3, [r2, #0]
}
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20000434 	.word	0x20000434
 800d058:	20000330 	.word	0x20000330
 800d05c:	20000438 	.word	0x20000438
 800d060:	2000041c 	.word	0x2000041c
 800d064:	200003ec 	.word	0x200003ec
 800d068:	200003e8 	.word	0x200003e8
 800d06c:	20000450 	.word	0x20000450

0800d070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3b04      	subs	r3, #4
 800d080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	3b04      	subs	r3, #4
 800d08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	f023 0201 	bic.w	r2, r3, #1
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3b04      	subs	r3, #4
 800d09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0a0:	4a0c      	ldr	r2, [pc, #48]	; (800d0d4 <pxPortInitialiseStack+0x64>)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3b14      	subs	r3, #20
 800d0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	3b04      	subs	r3, #4
 800d0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f06f 0202 	mvn.w	r2, #2
 800d0be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3b20      	subs	r3, #32
 800d0c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	0800d0d9 	.word	0x0800d0d9

0800d0d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0e2:	4b12      	ldr	r3, [pc, #72]	; (800d12c <prvTaskExitError+0x54>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0ea:	d00a      	beq.n	800d102 <prvTaskExitError+0x2a>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	60fb      	str	r3, [r7, #12]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <prvTaskExitError+0x28>
	__asm volatile
 800d102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	60bb      	str	r3, [r7, #8]
}
 800d114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d116:	bf00      	nop
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0fc      	beq.n	800d118 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d11e:	bf00      	nop
 800d120:	bf00      	nop
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	20000060 	.word	0x20000060

0800d130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <pxCurrentTCBConst2>)
 800d132:	6819      	ldr	r1, [r3, #0]
 800d134:	6808      	ldr	r0, [r1, #0]
 800d136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	f380 8809 	msr	PSP, r0
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8811 	msr	BASEPRI, r0
 800d14a:	4770      	bx	lr
 800d14c:	f3af 8000 	nop.w

0800d150 <pxCurrentTCBConst2>:
 800d150:	20000330 	.word	0x20000330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop

0800d158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d158:	4808      	ldr	r0, [pc, #32]	; (800d17c <prvPortStartFirstTask+0x24>)
 800d15a:	6800      	ldr	r0, [r0, #0]
 800d15c:	6800      	ldr	r0, [r0, #0]
 800d15e:	f380 8808 	msr	MSP, r0
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	f380 8814 	msr	CONTROL, r0
 800d16a:	b662      	cpsie	i
 800d16c:	b661      	cpsie	f
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	df00      	svc	0
 800d178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d17a:	bf00      	nop
 800d17c:	e000ed08 	.word	0xe000ed08

0800d180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d186:	4b46      	ldr	r3, [pc, #280]	; (800d2a0 <xPortStartScheduler+0x120>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a46      	ldr	r2, [pc, #280]	; (800d2a4 <xPortStartScheduler+0x124>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d10a      	bne.n	800d1a6 <xPortStartScheduler+0x26>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	613b      	str	r3, [r7, #16]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1a6:	4b3e      	ldr	r3, [pc, #248]	; (800d2a0 <xPortStartScheduler+0x120>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a3f      	ldr	r2, [pc, #252]	; (800d2a8 <xPortStartScheduler+0x128>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d10a      	bne.n	800d1c6 <xPortStartScheduler+0x46>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	60fb      	str	r3, [r7, #12]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1c6:	4b39      	ldr	r3, [pc, #228]	; (800d2ac <xPortStartScheduler+0x12c>)
 800d1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	22ff      	movs	r2, #255	; 0xff
 800d1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1e0:	78fb      	ldrb	r3, [r7, #3]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	4b31      	ldr	r3, [pc, #196]	; (800d2b0 <xPortStartScheduler+0x130>)
 800d1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1ee:	4b31      	ldr	r3, [pc, #196]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d1f0:	2207      	movs	r2, #7
 800d1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1f4:	e009      	b.n	800d20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1f6:	4b2f      	ldr	r3, [pc, #188]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	4a2d      	ldr	r2, [pc, #180]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	b2db      	uxtb	r3, r3
 800d208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d20a:	78fb      	ldrb	r3, [r7, #3]
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d212:	2b80      	cmp	r3, #128	; 0x80
 800d214:	d0ef      	beq.n	800d1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d216:	4b27      	ldr	r3, [pc, #156]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f1c3 0307 	rsb	r3, r3, #7
 800d21e:	2b04      	cmp	r3, #4
 800d220:	d00a      	beq.n	800d238 <xPortStartScheduler+0xb8>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	60bb      	str	r3, [r7, #8]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d238:	4b1e      	ldr	r3, [pc, #120]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	4a1d      	ldr	r2, [pc, #116]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d242:	4b1c      	ldr	r3, [pc, #112]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d24a:	4a1a      	ldr	r2, [pc, #104]	; (800d2b4 <xPortStartScheduler+0x134>)
 800d24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	b2da      	uxtb	r2, r3
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d256:	4b18      	ldr	r3, [pc, #96]	; (800d2b8 <xPortStartScheduler+0x138>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a17      	ldr	r2, [pc, #92]	; (800d2b8 <xPortStartScheduler+0x138>)
 800d25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d262:	4b15      	ldr	r3, [pc, #84]	; (800d2b8 <xPortStartScheduler+0x138>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a14      	ldr	r2, [pc, #80]	; (800d2b8 <xPortStartScheduler+0x138>)
 800d268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d26e:	f000 f8dd 	bl	800d42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d272:	4b12      	ldr	r3, [pc, #72]	; (800d2bc <xPortStartScheduler+0x13c>)
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d278:	f000 f8fc 	bl	800d474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d27c:	4b10      	ldr	r3, [pc, #64]	; (800d2c0 <xPortStartScheduler+0x140>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a0f      	ldr	r2, [pc, #60]	; (800d2c0 <xPortStartScheduler+0x140>)
 800d282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d288:	f7ff ff66 	bl	800d158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d28c:	f7ff f894 	bl	800c3b8 <vTaskSwitchContext>
	prvTaskExitError();
 800d290:	f7ff ff22 	bl	800d0d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	e000ed00 	.word	0xe000ed00
 800d2a4:	410fc271 	.word	0x410fc271
 800d2a8:	410fc270 	.word	0x410fc270
 800d2ac:	e000e400 	.word	0xe000e400
 800d2b0:	2000045c 	.word	0x2000045c
 800d2b4:	20000460 	.word	0x20000460
 800d2b8:	e000ed20 	.word	0xe000ed20
 800d2bc:	20000060 	.word	0x20000060
 800d2c0:	e000ef34 	.word	0xe000ef34

0800d2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	607b      	str	r3, [r7, #4]
}
 800d2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <vPortEnterCritical+0x58>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	4a0d      	ldr	r2, [pc, #52]	; (800d31c <vPortEnterCritical+0x58>)
 800d2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2e8:	4b0c      	ldr	r3, [pc, #48]	; (800d31c <vPortEnterCritical+0x58>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d10f      	bne.n	800d310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2f0:	4b0b      	ldr	r3, [pc, #44]	; (800d320 <vPortEnterCritical+0x5c>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00a      	beq.n	800d310 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	603b      	str	r3, [r7, #0]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <vPortEnterCritical+0x4a>
	}
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	20000060 	.word	0x20000060
 800d320:	e000ed04 	.word	0xe000ed04

0800d324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d32a:	4b12      	ldr	r3, [pc, #72]	; (800d374 <vPortExitCritical+0x50>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10a      	bne.n	800d348 <vPortExitCritical+0x24>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	607b      	str	r3, [r7, #4]
}
 800d344:	bf00      	nop
 800d346:	e7fe      	b.n	800d346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d348:	4b0a      	ldr	r3, [pc, #40]	; (800d374 <vPortExitCritical+0x50>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	4a09      	ldr	r2, [pc, #36]	; (800d374 <vPortExitCritical+0x50>)
 800d350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <vPortExitCritical+0x50>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d105      	bne.n	800d366 <vPortExitCritical+0x42>
 800d35a:	2300      	movs	r3, #0
 800d35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	f383 8811 	msr	BASEPRI, r3
}
 800d364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d366:	bf00      	nop
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	20000060 	.word	0x20000060
	...

0800d380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d380:	f3ef 8009 	mrs	r0, PSP
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	4b15      	ldr	r3, [pc, #84]	; (800d3e0 <pxCurrentTCBConst>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	f01e 0f10 	tst.w	lr, #16
 800d390:	bf08      	it	eq
 800d392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39a:	6010      	str	r0, [r2, #0]
 800d39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d3a4:	f380 8811 	msr	BASEPRI, r0
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f7ff f802 	bl	800c3b8 <vTaskSwitchContext>
 800d3b4:	f04f 0000 	mov.w	r0, #0
 800d3b8:	f380 8811 	msr	BASEPRI, r0
 800d3bc:	bc09      	pop	{r0, r3}
 800d3be:	6819      	ldr	r1, [r3, #0]
 800d3c0:	6808      	ldr	r0, [r1, #0]
 800d3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c6:	f01e 0f10 	tst.w	lr, #16
 800d3ca:	bf08      	it	eq
 800d3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3d0:	f380 8809 	msr	PSP, r0
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	f3af 8000 	nop.w

0800d3e0 <pxCurrentTCBConst>:
 800d3e0:	20000330 	.word	0x20000330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop

0800d3e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	607b      	str	r3, [r7, #4]
}
 800d400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d402:	f7fe ff21 	bl	800c248 <xTaskIncrementTick>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d003      	beq.n	800d414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d40c:	4b06      	ldr	r3, [pc, #24]	; (800d428 <SysTick_Handler+0x40>)
 800d40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	2300      	movs	r3, #0
 800d416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	f383 8811 	msr	BASEPRI, r3
}
 800d41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d420:	bf00      	nop
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	e000ed04 	.word	0xe000ed04

0800d42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d42c:	b480      	push	{r7}
 800d42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d430:	4b0b      	ldr	r3, [pc, #44]	; (800d460 <vPortSetupTimerInterrupt+0x34>)
 800d432:	2200      	movs	r2, #0
 800d434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d436:	4b0b      	ldr	r3, [pc, #44]	; (800d464 <vPortSetupTimerInterrupt+0x38>)
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d43c:	4b0a      	ldr	r3, [pc, #40]	; (800d468 <vPortSetupTimerInterrupt+0x3c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a0a      	ldr	r2, [pc, #40]	; (800d46c <vPortSetupTimerInterrupt+0x40>)
 800d442:	fba2 2303 	umull	r2, r3, r2, r3
 800d446:	099b      	lsrs	r3, r3, #6
 800d448:	4a09      	ldr	r2, [pc, #36]	; (800d470 <vPortSetupTimerInterrupt+0x44>)
 800d44a:	3b01      	subs	r3, #1
 800d44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d44e:	4b04      	ldr	r3, [pc, #16]	; (800d460 <vPortSetupTimerInterrupt+0x34>)
 800d450:	2207      	movs	r2, #7
 800d452:	601a      	str	r2, [r3, #0]
}
 800d454:	bf00      	nop
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	e000e010 	.word	0xe000e010
 800d464:	e000e018 	.word	0xe000e018
 800d468:	20000010 	.word	0x20000010
 800d46c:	10624dd3 	.word	0x10624dd3
 800d470:	e000e014 	.word	0xe000e014

0800d474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d484 <vPortEnableVFP+0x10>
 800d478:	6801      	ldr	r1, [r0, #0]
 800d47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d47e:	6001      	str	r1, [r0, #0]
 800d480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d482:	bf00      	nop
 800d484:	e000ed88 	.word	0xe000ed88

0800d488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d48e:	f3ef 8305 	mrs	r3, IPSR
 800d492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b0f      	cmp	r3, #15
 800d498:	d914      	bls.n	800d4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d49a:	4a17      	ldr	r2, [pc, #92]	; (800d4f8 <vPortValidateInterruptPriority+0x70>)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4413      	add	r3, r2
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4a4:	4b15      	ldr	r3, [pc, #84]	; (800d4fc <vPortValidateInterruptPriority+0x74>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	7afa      	ldrb	r2, [r7, #11]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d20a      	bcs.n	800d4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	607b      	str	r3, [r7, #4]
}
 800d4c0:	bf00      	nop
 800d4c2:	e7fe      	b.n	800d4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4c4:	4b0e      	ldr	r3, [pc, #56]	; (800d500 <vPortValidateInterruptPriority+0x78>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d4cc:	4b0d      	ldr	r3, [pc, #52]	; (800d504 <vPortValidateInterruptPriority+0x7c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d90a      	bls.n	800d4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	603b      	str	r3, [r7, #0]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <vPortValidateInterruptPriority+0x60>
	}
 800d4ea:	bf00      	nop
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	e000e3f0 	.word	0xe000e3f0
 800d4fc:	2000045c 	.word	0x2000045c
 800d500:	e000ed0c 	.word	0xe000ed0c
 800d504:	20000460 	.word	0x20000460

0800d508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08a      	sub	sp, #40	; 0x28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d510:	2300      	movs	r3, #0
 800d512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d514:	f7fe fdcc 	bl	800c0b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d518:	4b5b      	ldr	r3, [pc, #364]	; (800d688 <pvPortMalloc+0x180>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d520:	f000 f920 	bl	800d764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d524:	4b59      	ldr	r3, [pc, #356]	; (800d68c <pvPortMalloc+0x184>)
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4013      	ands	r3, r2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f040 8093 	bne.w	800d658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d01d      	beq.n	800d574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d538:	2208      	movs	r2, #8
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4413      	add	r3, r2
 800d53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f003 0307 	and.w	r3, r3, #7
 800d546:	2b00      	cmp	r3, #0
 800d548:	d014      	beq.n	800d574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f023 0307 	bic.w	r3, r3, #7
 800d550:	3308      	adds	r3, #8
 800d552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f003 0307 	and.w	r3, r3, #7
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00a      	beq.n	800d574 <pvPortMalloc+0x6c>
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	617b      	str	r3, [r7, #20]
}
 800d570:	bf00      	nop
 800d572:	e7fe      	b.n	800d572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d06e      	beq.n	800d658 <pvPortMalloc+0x150>
 800d57a:	4b45      	ldr	r3, [pc, #276]	; (800d690 <pvPortMalloc+0x188>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d869      	bhi.n	800d658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d584:	4b43      	ldr	r3, [pc, #268]	; (800d694 <pvPortMalloc+0x18c>)
 800d586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d588:	4b42      	ldr	r3, [pc, #264]	; (800d694 <pvPortMalloc+0x18c>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d58e:	e004      	b.n	800d59a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d903      	bls.n	800d5ac <pvPortMalloc+0xa4>
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1f1      	bne.n	800d590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d5ac:	4b36      	ldr	r3, [pc, #216]	; (800d688 <pvPortMalloc+0x180>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d050      	beq.n	800d658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2208      	movs	r2, #8
 800d5bc:	4413      	add	r3, r2
 800d5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	1ad2      	subs	r2, r2, r3
 800d5d0:	2308      	movs	r3, #8
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d91f      	bls.n	800d618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4413      	add	r3, r2
 800d5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	f003 0307 	and.w	r3, r3, #7
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00a      	beq.n	800d600 <pvPortMalloc+0xf8>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	613b      	str	r3, [r7, #16]
}
 800d5fc:	bf00      	nop
 800d5fe:	e7fe      	b.n	800d5fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	1ad2      	subs	r2, r2, r3
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d612:	69b8      	ldr	r0, [r7, #24]
 800d614:	f000 f90a 	bl	800d82c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d618:	4b1d      	ldr	r3, [pc, #116]	; (800d690 <pvPortMalloc+0x188>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	4a1b      	ldr	r2, [pc, #108]	; (800d690 <pvPortMalloc+0x188>)
 800d624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d626:	4b1a      	ldr	r3, [pc, #104]	; (800d690 <pvPortMalloc+0x188>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	4b1b      	ldr	r3, [pc, #108]	; (800d698 <pvPortMalloc+0x190>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d203      	bcs.n	800d63a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d632:	4b17      	ldr	r3, [pc, #92]	; (800d690 <pvPortMalloc+0x188>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a18      	ldr	r2, [pc, #96]	; (800d698 <pvPortMalloc+0x190>)
 800d638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	4b13      	ldr	r3, [pc, #76]	; (800d68c <pvPortMalloc+0x184>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	431a      	orrs	r2, r3
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	2200      	movs	r2, #0
 800d64c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d64e:	4b13      	ldr	r3, [pc, #76]	; (800d69c <pvPortMalloc+0x194>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3301      	adds	r3, #1
 800d654:	4a11      	ldr	r2, [pc, #68]	; (800d69c <pvPortMalloc+0x194>)
 800d656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d658:	f7fe fd38 	bl	800c0cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	f003 0307 	and.w	r3, r3, #7
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00a      	beq.n	800d67c <pvPortMalloc+0x174>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	60fb      	str	r3, [r7, #12]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <pvPortMalloc+0x172>
	return pvReturn;
 800d67c:	69fb      	ldr	r3, [r7, #28]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3728      	adds	r7, #40	; 0x28
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	20013cec 	.word	0x20013cec
 800d68c:	20013d00 	.word	0x20013d00
 800d690:	20013cf0 	.word	0x20013cf0
 800d694:	20013ce4 	.word	0x20013ce4
 800d698:	20013cf4 	.word	0x20013cf4
 800d69c:	20013cf8 	.word	0x20013cf8

0800d6a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d04d      	beq.n	800d74e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6b2:	2308      	movs	r3, #8
 800d6b4:	425b      	negs	r3, r3
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	4b24      	ldr	r3, [pc, #144]	; (800d758 <vPortFree+0xb8>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10a      	bne.n	800d6e4 <vPortFree+0x44>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	60fb      	str	r3, [r7, #12]
}
 800d6e0:	bf00      	nop
 800d6e2:	e7fe      	b.n	800d6e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00a      	beq.n	800d702 <vPortFree+0x62>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	60bb      	str	r3, [r7, #8]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	4b14      	ldr	r3, [pc, #80]	; (800d758 <vPortFree+0xb8>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4013      	ands	r3, r2
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d01e      	beq.n	800d74e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d11a      	bne.n	800d74e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	4b0e      	ldr	r3, [pc, #56]	; (800d758 <vPortFree+0xb8>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	43db      	mvns	r3, r3
 800d722:	401a      	ands	r2, r3
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d728:	f7fe fcc2 	bl	800c0b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	4b0a      	ldr	r3, [pc, #40]	; (800d75c <vPortFree+0xbc>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4413      	add	r3, r2
 800d736:	4a09      	ldr	r2, [pc, #36]	; (800d75c <vPortFree+0xbc>)
 800d738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d73a:	6938      	ldr	r0, [r7, #16]
 800d73c:	f000 f876 	bl	800d82c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d740:	4b07      	ldr	r3, [pc, #28]	; (800d760 <vPortFree+0xc0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3301      	adds	r3, #1
 800d746:	4a06      	ldr	r2, [pc, #24]	; (800d760 <vPortFree+0xc0>)
 800d748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d74a:	f7fe fcbf 	bl	800c0cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d74e:	bf00      	nop
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20013d00 	.word	0x20013d00
 800d75c:	20013cf0 	.word	0x20013cf0
 800d760:	20013cfc 	.word	0x20013cfc

0800d764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d76a:	4b29      	ldr	r3, [pc, #164]	; (800d810 <prvHeapInit+0xac>)
 800d76c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d76e:	4b29      	ldr	r3, [pc, #164]	; (800d814 <prvHeapInit+0xb0>)
 800d770:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f003 0307 	and.w	r3, r3, #7
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00c      	beq.n	800d796 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	3307      	adds	r3, #7
 800d780:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f023 0307 	bic.w	r3, r3, #7
 800d788:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	1ad3      	subs	r3, r2, r3
 800d790:	4a20      	ldr	r2, [pc, #128]	; (800d814 <prvHeapInit+0xb0>)
 800d792:	4413      	add	r3, r2
 800d794:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d79a:	4a1f      	ldr	r2, [pc, #124]	; (800d818 <prvHeapInit+0xb4>)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7a0:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <prvHeapInit+0xb4>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7ae:	2208      	movs	r2, #8
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f023 0307 	bic.w	r3, r3, #7
 800d7bc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	4a16      	ldr	r2, [pc, #88]	; (800d81c <prvHeapInit+0xb8>)
 800d7c2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7c4:	4b15      	ldr	r3, [pc, #84]	; (800d81c <prvHeapInit+0xb8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7cc:	4b13      	ldr	r3, [pc, #76]	; (800d81c <prvHeapInit+0xb8>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	1ad2      	subs	r2, r2, r3
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7e2:	4b0e      	ldr	r3, [pc, #56]	; (800d81c <prvHeapInit+0xb8>)
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	4a0c      	ldr	r2, [pc, #48]	; (800d820 <prvHeapInit+0xbc>)
 800d7f0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	4a0b      	ldr	r2, [pc, #44]	; (800d824 <prvHeapInit+0xc0>)
 800d7f8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <prvHeapInit+0xc4>)
 800d7fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d800:	601a      	str	r2, [r3, #0]
}
 800d802:	bf00      	nop
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	00013880 	.word	0x00013880
 800d814:	20000464 	.word	0x20000464
 800d818:	20013ce4 	.word	0x20013ce4
 800d81c:	20013cec 	.word	0x20013cec
 800d820:	20013cf4 	.word	0x20013cf4
 800d824:	20013cf0 	.word	0x20013cf0
 800d828:	20013d00 	.word	0x20013d00

0800d82c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d834:	4b28      	ldr	r3, [pc, #160]	; (800d8d8 <prvInsertBlockIntoFreeList+0xac>)
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	e002      	b.n	800d840 <prvInsertBlockIntoFreeList+0x14>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	429a      	cmp	r2, r3
 800d848:	d8f7      	bhi.n	800d83a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	4413      	add	r3, r2
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d108      	bne.n	800d86e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	441a      	add	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	441a      	add	r2, r3
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d118      	bne.n	800d8b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	4b15      	ldr	r3, [pc, #84]	; (800d8dc <prvInsertBlockIntoFreeList+0xb0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d00d      	beq.n	800d8aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	685a      	ldr	r2, [r3, #4]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	441a      	add	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	e008      	b.n	800d8bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <prvInsertBlockIntoFreeList+0xb0>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	601a      	str	r2, [r3, #0]
 800d8b2:	e003      	b.n	800d8bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d002      	beq.n	800d8ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	20013ce4 	.word	0x20013ce4
 800d8dc:	20013cec 	.word	0x20013cec

0800d8e0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	22fa      	movs	r2, #250	; 0xfa
 800d8ee:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	330c      	adds	r3, #12
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f004 fc7e 	bl	80121fc <tcpip_send_msg_wait_sem>
 800d900:	4603      	mov	r3, r0
 800d902:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d103      	bne.n	800d914 <netconn_apimsg+0x34>
    return apimsg->err;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d912:	e001      	b.n	800d918 <netconn_apimsg+0x38>
  }
  return err;
 800d914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08c      	sub	sp, #48	; 0x30
 800d924:	af00      	add	r7, sp, #0
 800d926:	4603      	mov	r3, r0
 800d928:	603a      	str	r2, [r7, #0]
 800d92a:	71fb      	strb	r3, [r7, #7]
 800d92c:	460b      	mov	r3, r1
 800d92e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	4618      	mov	r0, r3
 800d936:	f001 fa61 	bl	800edfc <netconn_alloc>
 800d93a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d054      	beq.n	800d9ec <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d942:	79bb      	ldrb	r3, [r7, #6]
 800d944:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d948:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d94a:	f107 0308 	add.w	r3, r7, #8
 800d94e:	4619      	mov	r1, r3
 800d950:	4829      	ldr	r0, [pc, #164]	; (800d9f8 <netconn_new_with_proto_and_callback+0xd8>)
 800d952:	f7ff ffc5 	bl	800d8e0 <netconn_apimsg>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d95c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d960:	2b00      	cmp	r3, #0
 800d962:	d043      	beq.n	800d9ec <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d005      	beq.n	800d978 <netconn_new_with_proto_and_callback+0x58>
 800d96c:	4b23      	ldr	r3, [pc, #140]	; (800d9fc <netconn_new_with_proto_and_callback+0xdc>)
 800d96e:	22a3      	movs	r2, #163	; 0xa3
 800d970:	4923      	ldr	r1, [pc, #140]	; (800da00 <netconn_new_with_proto_and_callback+0xe0>)
 800d972:	4824      	ldr	r0, [pc, #144]	; (800da04 <netconn_new_with_proto_and_callback+0xe4>)
 800d974:	f014 f91e 	bl	8021bb4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	3310      	adds	r3, #16
 800d97c:	4618      	mov	r0, r3
 800d97e:	f013 f958 	bl	8020c32 <sys_mbox_valid>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d105      	bne.n	800d994 <netconn_new_with_proto_and_callback+0x74>
 800d988:	4b1c      	ldr	r3, [pc, #112]	; (800d9fc <netconn_new_with_proto_and_callback+0xdc>)
 800d98a:	22a4      	movs	r2, #164	; 0xa4
 800d98c:	491e      	ldr	r1, [pc, #120]	; (800da08 <netconn_new_with_proto_and_callback+0xe8>)
 800d98e:	481d      	ldr	r0, [pc, #116]	; (800da04 <netconn_new_with_proto_and_callback+0xe4>)
 800d990:	f014 f910 	bl	8021bb4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	3314      	adds	r3, #20
 800d998:	4618      	mov	r0, r3
 800d99a:	f013 f94a 	bl	8020c32 <sys_mbox_valid>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <netconn_new_with_proto_and_callback+0x90>
 800d9a4:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <netconn_new_with_proto_and_callback+0xdc>)
 800d9a6:	22a6      	movs	r2, #166	; 0xa6
 800d9a8:	4918      	ldr	r1, [pc, #96]	; (800da0c <netconn_new_with_proto_and_callback+0xec>)
 800d9aa:	4816      	ldr	r0, [pc, #88]	; (800da04 <netconn_new_with_proto_and_callback+0xe4>)
 800d9ac:	f014 f902 	bl	8021bb4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	330c      	adds	r3, #12
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f013 f9cb 	bl	8020d50 <sys_sem_valid>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d105      	bne.n	800d9cc <netconn_new_with_proto_and_callback+0xac>
 800d9c0:	4b0e      	ldr	r3, [pc, #56]	; (800d9fc <netconn_new_with_proto_and_callback+0xdc>)
 800d9c2:	22a9      	movs	r2, #169	; 0xa9
 800d9c4:	4912      	ldr	r1, [pc, #72]	; (800da10 <netconn_new_with_proto_and_callback+0xf0>)
 800d9c6:	480f      	ldr	r0, [pc, #60]	; (800da04 <netconn_new_with_proto_and_callback+0xe4>)
 800d9c8:	f014 f8f4 	bl	8021bb4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	330c      	adds	r3, #12
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f013 f9b0 	bl	8020d36 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d8:	3310      	adds	r3, #16
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f013 f8a2 	bl	8020b24 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d9e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9e2:	2007      	movs	r0, #7
 800d9e4:	f006 f948 	bl	8013c78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e000      	b.n	800d9ee <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3730      	adds	r7, #48	; 0x30
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0800edd1 	.word	0x0800edd1
 800d9fc:	08025848 	.word	0x08025848
 800da00:	0802587c 	.word	0x0802587c
 800da04:	080258a0 	.word	0x080258a0
 800da08:	080258c8 	.word	0x080258c8
 800da0c:	080258e0 	.word	0x080258e0
 800da10:	08025904 	.word	0x08025904

0800da14 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08c      	sub	sp, #48	; 0x30
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	e014      	b.n	800da50 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800da2a:	2329      	movs	r3, #41	; 0x29
 800da2c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800da2e:	f107 030c 	add.w	r3, r7, #12
 800da32:	4619      	mov	r1, r3
 800da34:	4808      	ldr	r0, [pc, #32]	; (800da58 <netconn_prepare_delete+0x44>)
 800da36:	f7ff ff53 	bl	800d8e0 <netconn_apimsg>
 800da3a:	4603      	mov	r3, r0
 800da3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800da40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <netconn_prepare_delete+0x3a>
    return err;
 800da48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800da4c:	e000      	b.n	800da50 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3730      	adds	r7, #48	; 0x30
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	0800f335 	.word	0x0800f335

0800da5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d101      	bne.n	800da6e <netconn_delete+0x12>
    return ERR_OK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	e00d      	b.n	800da8a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff ffd0 	bl	800da14 <netconn_prepare_delete>
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800da78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d102      	bne.n	800da86 <netconn_delete+0x2a>
    netconn_free(conn);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f001 fa29 	bl	800eed8 <netconn_free>
  }
  return err;
 800da86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
	...

0800da94 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08e      	sub	sp, #56	; 0x38
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
 800daa0:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d109      	bne.n	800dabc <netconn_getaddr+0x28>
 800daa8:	4b1d      	ldr	r3, [pc, #116]	; (800db20 <netconn_getaddr+0x8c>)
 800daaa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800daae:	491d      	ldr	r1, [pc, #116]	; (800db24 <netconn_getaddr+0x90>)
 800dab0:	481d      	ldr	r0, [pc, #116]	; (800db28 <netconn_getaddr+0x94>)
 800dab2:	f014 f87f 	bl	8021bb4 <iprintf>
 800dab6:	f06f 030f 	mvn.w	r3, #15
 800daba:	e02d      	b.n	800db18 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d109      	bne.n	800dad6 <netconn_getaddr+0x42>
 800dac2:	4b17      	ldr	r3, [pc, #92]	; (800db20 <netconn_getaddr+0x8c>)
 800dac4:	f240 1213 	movw	r2, #275	; 0x113
 800dac8:	4918      	ldr	r1, [pc, #96]	; (800db2c <netconn_getaddr+0x98>)
 800daca:	4817      	ldr	r0, [pc, #92]	; (800db28 <netconn_getaddr+0x94>)
 800dacc:	f014 f872 	bl	8021bb4 <iprintf>
 800dad0:	f06f 030f 	mvn.w	r3, #15
 800dad4:	e020      	b.n	800db18 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d109      	bne.n	800daf0 <netconn_getaddr+0x5c>
 800dadc:	4b10      	ldr	r3, [pc, #64]	; (800db20 <netconn_getaddr+0x8c>)
 800dade:	f44f 728a 	mov.w	r2, #276	; 0x114
 800dae2:	4913      	ldr	r1, [pc, #76]	; (800db30 <netconn_getaddr+0x9c>)
 800dae4:	4810      	ldr	r0, [pc, #64]	; (800db28 <netconn_getaddr+0x94>)
 800dae6:	f014 f865 	bl	8021bb4 <iprintf>
 800daea:	f06f 030f 	mvn.w	r3, #15
 800daee:	e013      	b.n	800db18 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800daf4:	78fb      	ldrb	r3, [r7, #3]
 800daf6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800db02:	f107 0314 	add.w	r3, r7, #20
 800db06:	4619      	mov	r1, r3
 800db08:	480a      	ldr	r0, [pc, #40]	; (800db34 <netconn_getaddr+0xa0>)
 800db0a:	f7ff fee9 	bl	800d8e0 <netconn_apimsg>
 800db0e:	4603      	mov	r3, r0
 800db10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800db14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3738      	adds	r7, #56	; 0x38
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	08025848 	.word	0x08025848
 800db24:	08025920 	.word	0x08025920
 800db28:	080258a0 	.word	0x080258a0
 800db2c:	08025940 	.word	0x08025940
 800db30:	08025960 	.word	0x08025960
 800db34:	0800ff2d 	.word	0x0800ff2d

0800db38 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b08e      	sub	sp, #56	; 0x38
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	4613      	mov	r3, r2
 800db44:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d109      	bne.n	800db60 <netconn_bind+0x28>
 800db4c:	4b11      	ldr	r3, [pc, #68]	; (800db94 <netconn_bind+0x5c>)
 800db4e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800db52:	4911      	ldr	r1, [pc, #68]	; (800db98 <netconn_bind+0x60>)
 800db54:	4811      	ldr	r0, [pc, #68]	; (800db9c <netconn_bind+0x64>)
 800db56:	f014 f82d 	bl	8021bb4 <iprintf>
 800db5a:	f06f 030f 	mvn.w	r3, #15
 800db5e:	e015      	b.n	800db8c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800db66:	4b0e      	ldr	r3, [pc, #56]	; (800dba0 <netconn_bind+0x68>)
 800db68:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800db72:	88fb      	ldrh	r3, [r7, #6]
 800db74:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800db76:	f107 0314 	add.w	r3, r7, #20
 800db7a:	4619      	mov	r1, r3
 800db7c:	4809      	ldr	r0, [pc, #36]	; (800dba4 <netconn_bind+0x6c>)
 800db7e:	f7ff feaf 	bl	800d8e0 <netconn_apimsg>
 800db82:	4603      	mov	r3, r0
 800db84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800db88:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3738      	adds	r7, #56	; 0x38
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	08025848 	.word	0x08025848
 800db98:	08025980 	.word	0x08025980
 800db9c:	080258a0 	.word	0x080258a0
 800dba0:	080299c0 	.word	0x080299c0
 800dba4:	0800f4fd 	.word	0x0800f4fd

0800dba8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b08e      	sub	sp, #56	; 0x38
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d109      	bne.n	800dbd0 <netconn_connect+0x28>
 800dbbc:	4b11      	ldr	r3, [pc, #68]	; (800dc04 <netconn_connect+0x5c>)
 800dbbe:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800dbc2:	4911      	ldr	r1, [pc, #68]	; (800dc08 <netconn_connect+0x60>)
 800dbc4:	4811      	ldr	r0, [pc, #68]	; (800dc0c <netconn_connect+0x64>)
 800dbc6:	f013 fff5 	bl	8021bb4 <iprintf>
 800dbca:	f06f 030f 	mvn.w	r3, #15
 800dbce:	e015      	b.n	800dbfc <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800dbd6:	4b0e      	ldr	r3, [pc, #56]	; (800dc10 <netconn_connect+0x68>)
 800dbd8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800dbe2:	88fb      	ldrh	r3, [r7, #6]
 800dbe4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800dbe6:	f107 0314 	add.w	r3, r7, #20
 800dbea:	4619      	mov	r1, r3
 800dbec:	4809      	ldr	r0, [pc, #36]	; (800dc14 <netconn_connect+0x6c>)
 800dbee:	f7ff fe77 	bl	800d8e0 <netconn_apimsg>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dbf8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3738      	adds	r7, #56	; 0x38
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	08025848 	.word	0x08025848
 800dc08:	080259bc 	.word	0x080259bc
 800dc0c:	080258a0 	.word	0x080258a0
 800dc10:	080299c0 	.word	0x080299c0
 800dc14:	0800f691 	.word	0x0800f691

0800dc18 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08c      	sub	sp, #48	; 0x30
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d109      	bne.n	800dc3a <netconn_disconnect+0x22>
 800dc26:	4b0d      	ldr	r3, [pc, #52]	; (800dc5c <netconn_disconnect+0x44>)
 800dc28:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dc2c:	490c      	ldr	r1, [pc, #48]	; (800dc60 <netconn_disconnect+0x48>)
 800dc2e:	480d      	ldr	r0, [pc, #52]	; (800dc64 <netconn_disconnect+0x4c>)
 800dc30:	f013 ffc0 	bl	8021bb4 <iprintf>
 800dc34:	f06f 030f 	mvn.w	r3, #15
 800dc38:	e00c      	b.n	800dc54 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800dc3e:	f107 030c 	add.w	r3, r7, #12
 800dc42:	4619      	mov	r1, r3
 800dc44:	4808      	ldr	r0, [pc, #32]	; (800dc68 <netconn_disconnect+0x50>)
 800dc46:	f7ff fe4b 	bl	800d8e0 <netconn_apimsg>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dc50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3730      	adds	r7, #48	; 0x30
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	08025848 	.word	0x08025848
 800dc60:	080259dc 	.word	0x080259dc
 800dc64:	080258a0 	.word	0x080258a0
 800dc68:	0800f80d 	.word	0x0800f80d

0800dc6c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b08c      	sub	sp, #48	; 0x30
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <netconn_listen_with_backlog+0x26>
 800dc7e:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <netconn_listen_with_backlog+0x48>)
 800dc80:	f240 12bb 	movw	r2, #443	; 0x1bb
 800dc84:	490c      	ldr	r1, [pc, #48]	; (800dcb8 <netconn_listen_with_backlog+0x4c>)
 800dc86:	480d      	ldr	r0, [pc, #52]	; (800dcbc <netconn_listen_with_backlog+0x50>)
 800dc88:	f013 ff94 	bl	8021bb4 <iprintf>
 800dc8c:	f06f 030f 	mvn.w	r3, #15
 800dc90:	e00c      	b.n	800dcac <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800dc96:	f107 030c 	add.w	r3, r7, #12
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4808      	ldr	r0, [pc, #32]	; (800dcc0 <netconn_listen_with_backlog+0x54>)
 800dc9e:	f7ff fe1f 	bl	800d8e0 <netconn_apimsg>
 800dca2:	4603      	mov	r3, r0
 800dca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dca8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3730      	adds	r7, #48	; 0x30
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	08025848 	.word	0x08025848
 800dcb8:	08025a00 	.word	0x08025a00
 800dcbc:	080258a0 	.word	0x080258a0
 800dcc0:	0800f849 	.word	0x0800f849

0800dcc4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d109      	bne.n	800dce8 <netconn_accept+0x24>
 800dcd4:	4b3d      	ldr	r3, [pc, #244]	; (800ddcc <netconn_accept+0x108>)
 800dcd6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dcda:	493d      	ldr	r1, [pc, #244]	; (800ddd0 <netconn_accept+0x10c>)
 800dcdc:	483d      	ldr	r0, [pc, #244]	; (800ddd4 <netconn_accept+0x110>)
 800dcde:	f013 ff69 	bl	8021bb4 <iprintf>
 800dce2:	f06f 030f 	mvn.w	r3, #15
 800dce6:	e06c      	b.n	800ddc2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d109      	bne.n	800dd08 <netconn_accept+0x44>
 800dcf4:	4b35      	ldr	r3, [pc, #212]	; (800ddcc <netconn_accept+0x108>)
 800dcf6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800dcfa:	4937      	ldr	r1, [pc, #220]	; (800ddd8 <netconn_accept+0x114>)
 800dcfc:	4835      	ldr	r0, [pc, #212]	; (800ddd4 <netconn_accept+0x110>)
 800dcfe:	f013 ff59 	bl	8021bb4 <iprintf>
 800dd02:	f06f 030f 	mvn.w	r3, #15
 800dd06:	e05c      	b.n	800ddc2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fb99 	bl	800e440 <netconn_err>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800dd12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800dd1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd1e:	e050      	b.n	800ddc2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3314      	adds	r3, #20
 800dd24:	4618      	mov	r0, r3
 800dd26:	f012 ff84 	bl	8020c32 <sys_mbox_valid>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <netconn_accept+0x78>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7f1b      	ldrb	r3, [r3, #28]
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800dd3c:	f06f 030e 	mvn.w	r3, #14
 800dd40:	e03f      	b.n	800ddc2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7f1b      	ldrb	r3, [r3, #28]
 800dd46:	f003 0302 	and.w	r3, r3, #2
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00e      	beq.n	800dd6c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3314      	adds	r3, #20
 800dd52:	f107 020c 	add.w	r2, r7, #12
 800dd56:	4611      	mov	r1, r2
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f012 ff4e 	bl	8020bfa <sys_arch_mbox_tryfetch>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd64:	d10a      	bne.n	800dd7c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800dd66:	f06f 0306 	mvn.w	r3, #6
 800dd6a:	e02a      	b.n	800ddc2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3314      	adds	r3, #20
 800dd70:	f107 010c 	add.w	r1, r7, #12
 800dd74:	2200      	movs	r2, #0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f012 ff00 	bl	8020b7c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <netconn_accept+0xcc>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f107 0213 	add.w	r2, r7, #19
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 fbff 	bl	800e59c <lwip_netconn_is_err_msg>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800dda4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dda8:	e00b      	b.n	800ddc2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d102      	bne.n	800ddb6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ddb0:	f06f 030e 	mvn.w	r3, #14
 800ddb4:	e005      	b.n	800ddc2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ddc0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	08025848 	.word	0x08025848
 800ddd0:	08025a20 	.word	0x08025a20
 800ddd4:	080258a0 	.word	0x080258a0
 800ddd8:	08025a40 	.word	0x08025a40

0800dddc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	4613      	mov	r3, r2
 800dde8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d109      	bne.n	800de08 <netconn_recv_data+0x2c>
 800ddf4:	4b58      	ldr	r3, [pc, #352]	; (800df58 <netconn_recv_data+0x17c>)
 800ddf6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ddfa:	4958      	ldr	r1, [pc, #352]	; (800df5c <netconn_recv_data+0x180>)
 800ddfc:	4858      	ldr	r0, [pc, #352]	; (800df60 <netconn_recv_data+0x184>)
 800ddfe:	f013 fed9 	bl	8021bb4 <iprintf>
 800de02:	f06f 030f 	mvn.w	r3, #15
 800de06:	e0a2      	b.n	800df4e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d109      	bne.n	800de28 <netconn_recv_data+0x4c>
 800de14:	4b50      	ldr	r3, [pc, #320]	; (800df58 <netconn_recv_data+0x17c>)
 800de16:	f240 224a 	movw	r2, #586	; 0x24a
 800de1a:	4952      	ldr	r1, [pc, #328]	; (800df64 <netconn_recv_data+0x188>)
 800de1c:	4850      	ldr	r0, [pc, #320]	; (800df60 <netconn_recv_data+0x184>)
 800de1e:	f013 fec9 	bl	8021bb4 <iprintf>
 800de22:	f06f 030f 	mvn.w	r3, #15
 800de26:	e092      	b.n	800df4e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	3310      	adds	r3, #16
 800de2c:	4618      	mov	r0, r3
 800de2e:	f012 ff00 	bl	8020c32 <sys_mbox_valid>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10e      	bne.n	800de56 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f000 fb01 	bl	800e440 <netconn_err>
 800de3e:	4603      	mov	r3, r0
 800de40:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800de42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d002      	beq.n	800de50 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800de4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800de4e:	e07e      	b.n	800df4e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800de50:	f06f 030a 	mvn.w	r3, #10
 800de54:	e07b      	b.n	800df4e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	7f1b      	ldrb	r3, [r3, #28]
 800de5a:	f003 0302 	and.w	r3, r3, #2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10f      	bne.n	800de82 <netconn_recv_data+0xa6>
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	f003 0304 	and.w	r3, r3, #4
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10a      	bne.n	800de82 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	7f1b      	ldrb	r3, [r3, #28]
 800de70:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800de74:	2b00      	cmp	r3, #0
 800de76:	d104      	bne.n	800de82 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d023      	beq.n	800deca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3310      	adds	r3, #16
 800de86:	f107 0218 	add.w	r2, r7, #24
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f012 feb4 	bl	8020bfa <sys_arch_mbox_tryfetch>
 800de92:	4603      	mov	r3, r0
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de98:	d11f      	bne.n	800deda <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f000 fad0 	bl	800e440 <netconn_err>
 800dea0:	4603      	mov	r3, r0
 800dea2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800dea4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800deac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800deb0:	e04d      	b.n	800df4e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	7f1b      	ldrb	r3, [r3, #28]
 800deb6:	f003 0301 	and.w	r3, r3, #1
 800deba:	2b00      	cmp	r3, #0
 800debc:	d002      	beq.n	800dec4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800debe:	f06f 030a 	mvn.w	r3, #10
 800dec2:	e044      	b.n	800df4e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800dec4:	f06f 0306 	mvn.w	r3, #6
 800dec8:	e041      	b.n	800df4e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	3310      	adds	r3, #16
 800dece:	f107 0118 	add.w	r1, r7, #24
 800ded2:	2200      	movs	r2, #0
 800ded4:	4618      	mov	r0, r3
 800ded6:	f012 fe51 	bl	8020b7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dee2:	2b10      	cmp	r3, #16
 800dee4:	d117      	bne.n	800df16 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	f107 0217 	add.w	r2, r7, #23
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f000 fb54 	bl	800e59c <lwip_netconn_is_err_msg>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d009      	beq.n	800df0e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800defa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800defe:	f113 0f0f 	cmn.w	r3, #15
 800df02:	d101      	bne.n	800df08 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	e022      	b.n	800df4e <netconn_recv_data+0x172>
      }
      return err;
 800df08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800df0c:	e01f      	b.n	800df4e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	891b      	ldrh	r3, [r3, #8]
 800df12:	83fb      	strh	r3, [r7, #30]
 800df14:	e00d      	b.n	800df32 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d106      	bne.n	800df2a <netconn_recv_data+0x14e>
 800df1c:	4b0e      	ldr	r3, [pc, #56]	; (800df58 <netconn_recv_data+0x17c>)
 800df1e:	f240 2291 	movw	r2, #657	; 0x291
 800df22:	4911      	ldr	r1, [pc, #68]	; (800df68 <netconn_recv_data+0x18c>)
 800df24:	480e      	ldr	r0, [pc, #56]	; (800df60 <netconn_recv_data+0x184>)
 800df26:	f013 fe45 	bl	8021bb4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	891b      	ldrh	r3, [r3, #8]
 800df30:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df36:	2b00      	cmp	r3, #0
 800df38:	d005      	beq.n	800df46 <netconn_recv_data+0x16a>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3e:	8bfa      	ldrh	r2, [r7, #30]
 800df40:	2101      	movs	r1, #1
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3720      	adds	r7, #32
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	08025848 	.word	0x08025848
 800df5c:	08025a60 	.word	0x08025a60
 800df60:	080258a0 	.word	0x080258a0
 800df64:	08025a80 	.word	0x08025a80
 800df68:	08025a9c 	.word	0x08025a9c

0800df6c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <netconn_tcp_recvd_msg+0x1e>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df86:	2b10      	cmp	r3, #16
 800df88:	d009      	beq.n	800df9e <netconn_tcp_recvd_msg+0x32>
 800df8a:	4b0c      	ldr	r3, [pc, #48]	; (800dfbc <netconn_tcp_recvd_msg+0x50>)
 800df8c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800df90:	490b      	ldr	r1, [pc, #44]	; (800dfc0 <netconn_tcp_recvd_msg+0x54>)
 800df92:	480c      	ldr	r0, [pc, #48]	; (800dfc4 <netconn_tcp_recvd_msg+0x58>)
 800df94:	f013 fe0e 	bl	8021bb4 <iprintf>
 800df98:	f06f 030f 	mvn.w	r3, #15
 800df9c:	e00a      	b.n	800dfb4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	4806      	ldr	r0, [pc, #24]	; (800dfc8 <netconn_tcp_recvd_msg+0x5c>)
 800dfae:	f7ff fc97 	bl	800d8e0 <netconn_apimsg>
 800dfb2:	4603      	mov	r3, r0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	08025848 	.word	0x08025848
 800dfc0:	08025aa8 	.word	0x08025aa8
 800dfc4:	080258a0 	.word	0x080258a0
 800dfc8:	0800fa13 	.word	0x0800fa13

0800dfcc <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08c      	sub	sp, #48	; 0x30
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d005      	beq.n	800dfe8 <netconn_tcp_recvd+0x1c>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfe4:	2b10      	cmp	r3, #16
 800dfe6:	d009      	beq.n	800dffc <netconn_tcp_recvd+0x30>
 800dfe8:	4b0c      	ldr	r3, [pc, #48]	; (800e01c <netconn_tcp_recvd+0x50>)
 800dfea:	f240 22b5 	movw	r2, #693	; 0x2b5
 800dfee:	490c      	ldr	r1, [pc, #48]	; (800e020 <netconn_tcp_recvd+0x54>)
 800dff0:	480c      	ldr	r0, [pc, #48]	; (800e024 <netconn_tcp_recvd+0x58>)
 800dff2:	f013 fddf 	bl	8021bb4 <iprintf>
 800dff6:	f06f 030f 	mvn.w	r3, #15
 800dffa:	e00b      	b.n	800e014 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800dffc:	f107 030c 	add.w	r3, r7, #12
 800e000:	461a      	mov	r2, r3
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff ffb1 	bl	800df6c <netconn_tcp_recvd_msg>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800e010:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e014:	4618      	mov	r0, r3
 800e016:	3730      	adds	r7, #48	; 0x30
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	08025848 	.word	0x08025848
 800e020:	08025aa8 	.word	0x08025aa8
 800e024:	080258a0 	.word	0x080258a0

0800e028 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b090      	sub	sp, #64	; 0x40
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	3310      	adds	r3, #16
 800e03a:	4618      	mov	r0, r3
 800e03c:	f012 fdf9 	bl	8020c32 <sys_mbox_valid>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d102      	bne.n	800e04c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e046:	f06f 030a 	mvn.w	r3, #10
 800e04a:	e06d      	b.n	800e128 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	7f1b      	ldrb	r3, [r3, #28]
 800e050:	b25b      	sxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	da07      	bge.n	800e066 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	7f1b      	ldrb	r3, [r3, #28]
 800e05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e064:	e039      	b.n	800e0da <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	461a      	mov	r2, r3
 800e06a:	68b9      	ldr	r1, [r7, #8]
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7ff feb5 	bl	800dddc <netconn_recv_data>
 800e072:	4603      	mov	r3, r0
 800e074:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800e078:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e080:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e084:	e050      	b.n	800e128 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e08c:	79fb      	ldrb	r3, [r7, #7]
 800e08e:	f003 0308 	and.w	r3, r3, #8
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10e      	bne.n	800e0b4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <netconn_recv_data_tcp+0x7a>
 800e09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09e:	891b      	ldrh	r3, [r3, #8]
 800e0a0:	e000      	b.n	800e0a4 <netconn_recv_data_tcp+0x7c>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e0a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0a8:	f107 0214 	add.w	r2, r7, #20
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f7ff ff5c 	bl	800df6c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d134      	bne.n	800e124 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	f003 0310 	and.w	r3, r3, #16
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d009      	beq.n	800e0d8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	7f1b      	ldrb	r3, [r3, #28]
 800e0c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e0d2:	f06f 0306 	mvn.w	r3, #6
 800e0d6:	e027      	b.n	800e128 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e0d8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d005      	beq.n	800e0ee <netconn_recv_data_tcp+0xc6>
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d10f      	bne.n	800e116 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f000 f9a2 	bl	800e440 <netconn_err>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800e102:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <netconn_recv_data_tcp+0xe8>
          return err;
 800e10a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e10e:	e00b      	b.n	800e128 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e110:	f06f 030d 	mvn.w	r3, #13
 800e114:	e008      	b.n	800e128 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e116:	2101      	movs	r1, #1
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f000 f961 	bl	800e3e0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e11e:	f06f 030e 	mvn.w	r3, #14
 800e122:	e001      	b.n	800e128 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e124:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3740      	adds	r7, #64	; 0x40
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4613      	mov	r3, r2
 800e13c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d005      	beq.n	800e150 <netconn_recv_tcp_pbuf_flags+0x20>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e14c:	2b10      	cmp	r3, #16
 800e14e:	d009      	beq.n	800e164 <netconn_recv_tcp_pbuf_flags+0x34>
 800e150:	4b0a      	ldr	r3, [pc, #40]	; (800e17c <netconn_recv_tcp_pbuf_flags+0x4c>)
 800e152:	f240 3225 	movw	r2, #805	; 0x325
 800e156:	490a      	ldr	r1, [pc, #40]	; (800e180 <netconn_recv_tcp_pbuf_flags+0x50>)
 800e158:	480a      	ldr	r0, [pc, #40]	; (800e184 <netconn_recv_tcp_pbuf_flags+0x54>)
 800e15a:	f013 fd2b 	bl	8021bb4 <iprintf>
 800e15e:	f06f 030f 	mvn.w	r3, #15
 800e162:	e006      	b.n	800e172 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	461a      	mov	r2, r3
 800e168:	68b9      	ldr	r1, [r7, #8]
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f7ff ff5c 	bl	800e028 <netconn_recv_data_tcp>
 800e170:	4603      	mov	r3, r0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	08025848 	.word	0x08025848
 800e180:	08025aa8 	.word	0x08025aa8
 800e184:	080258a0 	.word	0x080258a0

0800e188 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	4613      	mov	r3, r2
 800e194:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1a4:	2b10      	cmp	r3, #16
 800e1a6:	d109      	bne.n	800e1bc <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e1a8:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e1aa:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800e1ae:	490a      	ldr	r1, [pc, #40]	; (800e1d8 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e1b0:	480a      	ldr	r0, [pc, #40]	; (800e1dc <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e1b2:	f013 fcff 	bl	8021bb4 <iprintf>
 800e1b6:	f06f 030f 	mvn.w	r3, #15
 800e1ba:	e006      	b.n	800e1ca <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f7ff fe0a 	bl	800dddc <netconn_recv_data>
 800e1c8:	4603      	mov	r3, r0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	08025848 	.word	0x08025848
 800e1d8:	08025acc 	.word	0x08025acc
 800e1dc:	080258a0 	.word	0x080258a0

0800e1e0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b08c      	sub	sp, #48	; 0x30
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d109      	bne.n	800e204 <netconn_send+0x24>
 800e1f0:	4b0e      	ldr	r3, [pc, #56]	; (800e22c <netconn_send+0x4c>)
 800e1f2:	f240 32b2 	movw	r2, #946	; 0x3b2
 800e1f6:	490e      	ldr	r1, [pc, #56]	; (800e230 <netconn_send+0x50>)
 800e1f8:	480e      	ldr	r0, [pc, #56]	; (800e234 <netconn_send+0x54>)
 800e1fa:	f013 fcdb 	bl	8021bb4 <iprintf>
 800e1fe:	f06f 030f 	mvn.w	r3, #15
 800e202:	e00e      	b.n	800e222 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e20c:	f107 030c 	add.w	r3, r7, #12
 800e210:	4619      	mov	r1, r3
 800e212:	4809      	ldr	r0, [pc, #36]	; (800e238 <netconn_send+0x58>)
 800e214:	f7ff fb64 	bl	800d8e0 <netconn_apimsg>
 800e218:	4603      	mov	r3, r0
 800e21a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e21e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e222:	4618      	mov	r0, r3
 800e224:	3730      	adds	r7, #48	; 0x30
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	08025848 	.word	0x08025848
 800e230:	08025b04 	.word	0x08025b04
 800e234:	080258a0 	.word	0x080258a0
 800e238:	0800f979 	.word	0x0800f979

0800e23c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af02      	add	r7, sp, #8
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e252:	78fa      	ldrb	r2, [r7, #3]
 800e254:	f107 0110 	add.w	r1, r7, #16
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	4613      	mov	r3, r2
 800e25e:	2201      	movs	r2, #1
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 f805 	bl	800e270 <netconn_write_vectors_partly>
 800e266:	4603      	mov	r3, r0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3718      	adds	r7, #24
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b092      	sub	sp, #72	; 0x48
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	4611      	mov	r1, r2
 800e27c:	461a      	mov	r2, r3
 800e27e:	460b      	mov	r3, r1
 800e280:	80fb      	strh	r3, [r7, #6]
 800e282:	4613      	mov	r3, r2
 800e284:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d109      	bne.n	800e2a0 <netconn_write_vectors_partly+0x30>
 800e28c:	4b4e      	ldr	r3, [pc, #312]	; (800e3c8 <netconn_write_vectors_partly+0x158>)
 800e28e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e292:	494e      	ldr	r1, [pc, #312]	; (800e3cc <netconn_write_vectors_partly+0x15c>)
 800e294:	484e      	ldr	r0, [pc, #312]	; (800e3d0 <netconn_write_vectors_partly+0x160>)
 800e296:	f013 fc8d 	bl	8021bb4 <iprintf>
 800e29a:	f06f 030f 	mvn.w	r3, #15
 800e29e:	e08e      	b.n	800e3be <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2a8:	2b10      	cmp	r3, #16
 800e2aa:	d009      	beq.n	800e2c0 <netconn_write_vectors_partly+0x50>
 800e2ac:	4b46      	ldr	r3, [pc, #280]	; (800e3c8 <netconn_write_vectors_partly+0x158>)
 800e2ae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e2b2:	4948      	ldr	r1, [pc, #288]	; (800e3d4 <netconn_write_vectors_partly+0x164>)
 800e2b4:	4846      	ldr	r0, [pc, #280]	; (800e3d0 <netconn_write_vectors_partly+0x160>)
 800e2b6:	f013 fc7d 	bl	8021bb4 <iprintf>
 800e2ba:	f06f 0305 	mvn.w	r3, #5
 800e2be:	e07e      	b.n	800e3be <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	7f1b      	ldrb	r3, [r3, #28]
 800e2c4:	f003 0302 	and.w	r3, r3, #2
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d104      	bne.n	800e2d6 <netconn_write_vectors_partly+0x66>
 800e2cc:	797b      	ldrb	r3, [r7, #5]
 800e2ce:	f003 0304 	and.w	r3, r3, #4
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <netconn_write_vectors_partly+0x6a>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e000      	b.n	800e2dc <netconn_write_vectors_partly+0x6c>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e2e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <netconn_write_vectors_partly+0x84>
 800e2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d102      	bne.n	800e2f4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e2ee:	f06f 0305 	mvn.w	r3, #5
 800e2f2:	e064      	b.n	800e3be <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	643b      	str	r3, [r7, #64]	; 0x40
 800e2fc:	e015      	b.n	800e32a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e300:	00db      	lsls	r3, r3, #3
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	4413      	add	r3, r2
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e30a:	4413      	add	r3, r2
 800e30c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	4413      	add	r3, r2
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d202      	bcs.n	800e324 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e31e:	f06f 0305 	mvn.w	r3, #5
 800e322:	e04c      	b.n	800e3be <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e326:	3301      	adds	r3, #1
 800e328:	643b      	str	r3, [r7, #64]	; 0x40
 800e32a:	88fb      	ldrh	r3, [r7, #6]
 800e32c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e32e:	429a      	cmp	r2, r3
 800e330:	dbe5      	blt.n	800e2fe <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	e040      	b.n	800e3be <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e33e:	2b00      	cmp	r3, #0
 800e340:	da0a      	bge.n	800e358 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e344:	2b00      	cmp	r3, #0
 800e346:	d102      	bne.n	800e34e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e348:	f06f 0305 	mvn.w	r3, #5
 800e34c:	e037      	b.n	800e3be <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e34e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e352:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e356:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e360:	88fb      	ldrh	r3, [r7, #6]
 800e362:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e364:	2300      	movs	r3, #0
 800e366:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e368:	797b      	ldrb	r3, [r7, #5]
 800e36a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e370:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e376:	f107 0314 	add.w	r3, r7, #20
 800e37a:	4619      	mov	r1, r3
 800e37c:	4816      	ldr	r0, [pc, #88]	; (800e3d8 <netconn_write_vectors_partly+0x168>)
 800e37e:	f7ff faaf 	bl	800d8e0 <netconn_apimsg>
 800e382:	4603      	mov	r3, r0
 800e384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e388:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d114      	bne.n	800e3ba <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e39a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e39c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10a      	bne.n	800e3ba <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d006      	beq.n	800e3ba <netconn_write_vectors_partly+0x14a>
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <netconn_write_vectors_partly+0x158>)
 800e3ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e3b2:	490a      	ldr	r1, [pc, #40]	; (800e3dc <netconn_write_vectors_partly+0x16c>)
 800e3b4:	4806      	ldr	r0, [pc, #24]	; (800e3d0 <netconn_write_vectors_partly+0x160>)
 800e3b6:	f013 fbfd 	bl	8021bb4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e3ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3748      	adds	r7, #72	; 0x48
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	08025848 	.word	0x08025848
 800e3cc:	08025b20 	.word	0x08025b20
 800e3d0:	080258a0 	.word	0x080258a0
 800e3d4:	08025b3c 	.word	0x08025b3c
 800e3d8:	0800fe15 	.word	0x0800fe15
 800e3dc:	08025b60 	.word	0x08025b60

0800e3e0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08c      	sub	sp, #48	; 0x30
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d109      	bne.n	800e406 <netconn_close_shutdown+0x26>
 800e3f2:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <netconn_close_shutdown+0x50>)
 800e3f4:	f240 4247 	movw	r2, #1095	; 0x447
 800e3f8:	490e      	ldr	r1, [pc, #56]	; (800e434 <netconn_close_shutdown+0x54>)
 800e3fa:	480f      	ldr	r0, [pc, #60]	; (800e438 <netconn_close_shutdown+0x58>)
 800e3fc:	f013 fbda 	bl	8021bb4 <iprintf>
 800e400:	f06f 030f 	mvn.w	r3, #15
 800e404:	e010      	b.n	800e428 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e40a:	78fb      	ldrb	r3, [r7, #3]
 800e40c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e40e:	2329      	movs	r3, #41	; 0x29
 800e410:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e412:	f107 030c 	add.w	r3, r7, #12
 800e416:	4619      	mov	r1, r3
 800e418:	4808      	ldr	r0, [pc, #32]	; (800e43c <netconn_close_shutdown+0x5c>)
 800e41a:	f7ff fa61 	bl	800d8e0 <netconn_apimsg>
 800e41e:	4603      	mov	r3, r0
 800e420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e424:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3730      	adds	r7, #48	; 0x30
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	08025848 	.word	0x08025848
 800e434:	08025b84 	.word	0x08025b84
 800e438:	080258a0 	.word	0x080258a0
 800e43c:	08010039 	.word	0x08010039

0800e440 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <netconn_err+0x12>
    return ERR_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	e00d      	b.n	800e46e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e452:	f012 fcfd 	bl	8020e50 <sys_arch_protect>
 800e456:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	7a1b      	ldrb	r3, [r3, #8]
 800e45c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f012 fd01 	bl	8020e6c <sys_arch_unprotect>
  return err;
 800e46a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
	...

0800e478 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b08a      	sub	sp, #40	; 0x28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d109      	bne.n	800e49c <netconn_gethostbyname+0x24>
 800e488:	4b24      	ldr	r3, [pc, #144]	; (800e51c <netconn_gethostbyname+0xa4>)
 800e48a:	f240 5204 	movw	r2, #1284	; 0x504
 800e48e:	4924      	ldr	r1, [pc, #144]	; (800e520 <netconn_gethostbyname+0xa8>)
 800e490:	4824      	ldr	r0, [pc, #144]	; (800e524 <netconn_gethostbyname+0xac>)
 800e492:	f013 fb8f 	bl	8021bb4 <iprintf>
 800e496:	f06f 030f 	mvn.w	r3, #15
 800e49a:	e03b      	b.n	800e514 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d109      	bne.n	800e4b6 <netconn_gethostbyname+0x3e>
 800e4a2:	4b1e      	ldr	r3, [pc, #120]	; (800e51c <netconn_gethostbyname+0xa4>)
 800e4a4:	f240 5205 	movw	r2, #1285	; 0x505
 800e4a8:	491f      	ldr	r1, [pc, #124]	; (800e528 <netconn_gethostbyname+0xb0>)
 800e4aa:	481e      	ldr	r0, [pc, #120]	; (800e524 <netconn_gethostbyname+0xac>)
 800e4ac:	f013 fb82 	bl	8021bb4 <iprintf>
 800e4b0:	f06f 030f 	mvn.w	r3, #15
 800e4b4:	e02e      	b.n	800e514 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800e4b6:	f107 030f 	add.w	r3, r7, #15
 800e4ba:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800e4bc:	f107 0310 	add.w	r3, r7, #16
 800e4c0:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f012 fbcd 	bl	8020c6e <sys_sem_new>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e4d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800e4e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4e4:	e016      	b.n	800e514 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800e4e6:	69fa      	ldr	r2, [r7, #28]
 800e4e8:	f107 0314 	add.w	r3, r7, #20
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	480f      	ldr	r0, [pc, #60]	; (800e52c <netconn_gethostbyname+0xb4>)
 800e4f0:	f003 fe84 	bl	80121fc <tcpip_send_msg_wait_sem>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f012 fc1a 	bl	8020d36 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800e502:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e506:	2b00      	cmp	r3, #0
 800e508:	d002      	beq.n	800e510 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800e50a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e50e:	e001      	b.n	800e514 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800e510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3728      	adds	r7, #40	; 0x28
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	08025848 	.word	0x08025848
 800e520:	08025ba0 	.word	0x08025ba0
 800e524:	080258a0 	.word	0x080258a0
 800e528:	08025bc4 	.word	0x08025bc4
 800e52c:	08010195 	.word	0x08010195

0800e530 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	4603      	mov	r3, r0
 800e538:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e53a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e53e:	f113 0f0d 	cmn.w	r3, #13
 800e542:	d009      	beq.n	800e558 <lwip_netconn_err_to_msg+0x28>
 800e544:	f113 0f0d 	cmn.w	r3, #13
 800e548:	dc0c      	bgt.n	800e564 <lwip_netconn_err_to_msg+0x34>
 800e54a:	f113 0f0f 	cmn.w	r3, #15
 800e54e:	d007      	beq.n	800e560 <lwip_netconn_err_to_msg+0x30>
 800e550:	f113 0f0e 	cmn.w	r3, #14
 800e554:	d002      	beq.n	800e55c <lwip_netconn_err_to_msg+0x2c>
 800e556:	e005      	b.n	800e564 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <lwip_netconn_err_to_msg+0x54>)
 800e55a:	e00e      	b.n	800e57a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e55c:	4b0a      	ldr	r3, [pc, #40]	; (800e588 <lwip_netconn_err_to_msg+0x58>)
 800e55e:	e00c      	b.n	800e57a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e560:	4b0a      	ldr	r3, [pc, #40]	; (800e58c <lwip_netconn_err_to_msg+0x5c>)
 800e562:	e00a      	b.n	800e57a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d005      	beq.n	800e578 <lwip_netconn_err_to_msg+0x48>
 800e56c:	4b08      	ldr	r3, [pc, #32]	; (800e590 <lwip_netconn_err_to_msg+0x60>)
 800e56e:	227d      	movs	r2, #125	; 0x7d
 800e570:	4908      	ldr	r1, [pc, #32]	; (800e594 <lwip_netconn_err_to_msg+0x64>)
 800e572:	4809      	ldr	r0, [pc, #36]	; (800e598 <lwip_netconn_err_to_msg+0x68>)
 800e574:	f013 fb1e 	bl	8021bb4 <iprintf>
      return NULL;
 800e578:	2300      	movs	r3, #0
  }
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	08029808 	.word	0x08029808
 800e588:	08029809 	.word	0x08029809
 800e58c:	0802980a 	.word	0x0802980a
 800e590:	08025be8 	.word	0x08025be8
 800e594:	08025c1c 	.word	0x08025c1c
 800e598:	08025c2c 	.word	0x08025c2c

0800e59c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d105      	bne.n	800e5b8 <lwip_netconn_is_err_msg+0x1c>
 800e5ac:	4b12      	ldr	r3, [pc, #72]	; (800e5f8 <lwip_netconn_is_err_msg+0x5c>)
 800e5ae:	2285      	movs	r2, #133	; 0x85
 800e5b0:	4912      	ldr	r1, [pc, #72]	; (800e5fc <lwip_netconn_is_err_msg+0x60>)
 800e5b2:	4813      	ldr	r0, [pc, #76]	; (800e600 <lwip_netconn_is_err_msg+0x64>)
 800e5b4:	f013 fafe 	bl	8021bb4 <iprintf>

  if (msg == &netconn_aborted) {
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4a12      	ldr	r2, [pc, #72]	; (800e604 <lwip_netconn_is_err_msg+0x68>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d104      	bne.n	800e5ca <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	22f3      	movs	r2, #243	; 0xf3
 800e5c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e012      	b.n	800e5f0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a0e      	ldr	r2, [pc, #56]	; (800e608 <lwip_netconn_is_err_msg+0x6c>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d104      	bne.n	800e5dc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	22f2      	movs	r2, #242	; 0xf2
 800e5d6:	701a      	strb	r2, [r3, #0]
    return 1;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e009      	b.n	800e5f0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4a0b      	ldr	r2, [pc, #44]	; (800e60c <lwip_netconn_is_err_msg+0x70>)
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	d104      	bne.n	800e5ee <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	22f1      	movs	r2, #241	; 0xf1
 800e5e8:	701a      	strb	r2, [r3, #0]
    return 1;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e000      	b.n	800e5f0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	08025be8 	.word	0x08025be8
 800e5fc:	08025c54 	.word	0x08025c54
 800e600:	08025c2c 	.word	0x08025c2c
 800e604:	08029808 	.word	0x08029808
 800e608:	08029809 	.word	0x08029809
 800e60c:	0802980a 	.word	0x0802980a

0800e610 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d105      	bne.n	800e630 <recv_udp+0x20>
 800e624:	4b34      	ldr	r3, [pc, #208]	; (800e6f8 <recv_udp+0xe8>)
 800e626:	22e5      	movs	r2, #229	; 0xe5
 800e628:	4934      	ldr	r1, [pc, #208]	; (800e6fc <recv_udp+0xec>)
 800e62a:	4835      	ldr	r0, [pc, #212]	; (800e700 <recv_udp+0xf0>)
 800e62c:	f013 fac2 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d105      	bne.n	800e642 <recv_udp+0x32>
 800e636:	4b30      	ldr	r3, [pc, #192]	; (800e6f8 <recv_udp+0xe8>)
 800e638:	22e6      	movs	r2, #230	; 0xe6
 800e63a:	4932      	ldr	r1, [pc, #200]	; (800e704 <recv_udp+0xf4>)
 800e63c:	4830      	ldr	r0, [pc, #192]	; (800e700 <recv_udp+0xf0>)
 800e63e:	f013 fab9 	bl	8021bb4 <iprintf>
  conn = (struct netconn *)arg;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d103      	bne.n	800e654 <recv_udp+0x44>
    pbuf_free(p);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f006 f9f5 	bl	8014a3c <pbuf_free>
    return;
 800e652:	e04d      	b.n	800e6f0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d005      	beq.n	800e66a <recv_udp+0x5a>
 800e65e:	4b26      	ldr	r3, [pc, #152]	; (800e6f8 <recv_udp+0xe8>)
 800e660:	22ee      	movs	r2, #238	; 0xee
 800e662:	4929      	ldr	r1, [pc, #164]	; (800e708 <recv_udp+0xf8>)
 800e664:	4826      	ldr	r0, [pc, #152]	; (800e700 <recv_udp+0xf0>)
 800e666:	f013 faa5 	bl	8021bb4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	3310      	adds	r3, #16
 800e66e:	4618      	mov	r0, r3
 800e670:	f012 fadf 	bl	8020c32 <sys_mbox_valid>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d103      	bne.n	800e682 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f006 f9de 	bl	8014a3c <pbuf_free>
    return;
 800e680:	e036      	b.n	800e6f0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e682:	2006      	movs	r0, #6
 800e684:	f005 faa6 	bl	8013bd4 <memp_malloc>
 800e688:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d103      	bne.n	800e698 <recv_udp+0x88>
    pbuf_free(p);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f006 f9d3 	bl	8014a3c <pbuf_free>
    return;
 800e696:	e02b      	b.n	800e6f0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <recv_udp+0xa0>
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	e000      	b.n	800e6b2 <recv_udp+0xa2>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	69ba      	ldr	r2, [r7, #24]
 800e6b4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e6ba:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	891b      	ldrh	r3, [r3, #8]
 800e6c0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	3310      	adds	r3, #16
 800e6c6:	69b9      	ldr	r1, [r7, #24]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f012 fa3d 	bl	8020b48 <sys_mbox_trypost>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d003      	beq.n	800e6dc <recv_udp+0xcc>
    netbuf_delete(buf);
 800e6d4:	69b8      	ldr	r0, [r7, #24]
 800e6d6:	f001 fdc1 	bl	801025c <netbuf_delete>
    return;
 800e6da:	e009      	b.n	800e6f0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d005      	beq.n	800e6f0 <recv_udp+0xe0>
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e8:	8afa      	ldrh	r2, [r7, #22]
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	69f8      	ldr	r0, [r7, #28]
 800e6ee:	4798      	blx	r3
  }
}
 800e6f0:	3720      	adds	r7, #32
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	08025be8 	.word	0x08025be8
 800e6fc:	08025c60 	.word	0x08025c60
 800e700:	08025c2c 	.word	0x08025c2c
 800e704:	08025c84 	.word	0x08025c84
 800e708:	08025ca4 	.word	0x08025ca4

0800e70c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b088      	sub	sp, #32
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <recv_tcp+0x22>
 800e720:	4b36      	ldr	r3, [pc, #216]	; (800e7fc <recv_tcp+0xf0>)
 800e722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e726:	4936      	ldr	r1, [pc, #216]	; (800e800 <recv_tcp+0xf4>)
 800e728:	4836      	ldr	r0, [pc, #216]	; (800e804 <recv_tcp+0xf8>)
 800e72a:	f013 fa43 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d106      	bne.n	800e742 <recv_tcp+0x36>
 800e734:	4b31      	ldr	r3, [pc, #196]	; (800e7fc <recv_tcp+0xf0>)
 800e736:	f240 122d 	movw	r2, #301	; 0x12d
 800e73a:	4933      	ldr	r1, [pc, #204]	; (800e808 <recv_tcp+0xfc>)
 800e73c:	4831      	ldr	r0, [pc, #196]	; (800e804 <recv_tcp+0xf8>)
 800e73e:	f013 fa39 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d006      	beq.n	800e758 <recv_tcp+0x4c>
 800e74a:	4b2c      	ldr	r3, [pc, #176]	; (800e7fc <recv_tcp+0xf0>)
 800e74c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e750:	492e      	ldr	r1, [pc, #184]	; (800e80c <recv_tcp+0x100>)
 800e752:	482c      	ldr	r0, [pc, #176]	; (800e804 <recv_tcp+0xf8>)
 800e754:	f013 fa2e 	bl	8021bb4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <recv_tcp+0x5c>
    return ERR_VAL;
 800e762:	f06f 0305 	mvn.w	r3, #5
 800e766:	e045      	b.n	800e7f4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d006      	beq.n	800e780 <recv_tcp+0x74>
 800e772:	4b22      	ldr	r3, [pc, #136]	; (800e7fc <recv_tcp+0xf0>)
 800e774:	f240 1235 	movw	r2, #309	; 0x135
 800e778:	4925      	ldr	r1, [pc, #148]	; (800e810 <recv_tcp+0x104>)
 800e77a:	4822      	ldr	r0, [pc, #136]	; (800e804 <recv_tcp+0xf8>)
 800e77c:	f013 fa1a 	bl	8021bb4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	3310      	adds	r3, #16
 800e784:	4618      	mov	r0, r3
 800e786:	f012 fa54 	bl	8020c32 <sys_mbox_valid>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10d      	bne.n	800e7ac <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d008      	beq.n	800e7a8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	891b      	ldrh	r3, [r3, #8]
 800e79a:	4619      	mov	r1, r3
 800e79c:	68b8      	ldr	r0, [r7, #8]
 800e79e:	f007 fa91 	bl	8015cc4 <tcp_recved>
      pbuf_free(p);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f006 f94a 	bl	8014a3c <pbuf_free>
    }
    return ERR_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e023      	b.n	800e7f4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d005      	beq.n	800e7be <recv_tcp+0xb2>
    msg = p;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	891b      	ldrh	r3, [r3, #8]
 800e7ba:	83fb      	strh	r3, [r7, #30]
 800e7bc:	e003      	b.n	800e7c6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e7be:	4b15      	ldr	r3, [pc, #84]	; (800e814 <recv_tcp+0x108>)
 800e7c0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	3310      	adds	r3, #16
 800e7ca:	69b9      	ldr	r1, [r7, #24]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f012 f9bb 	bl	8020b48 <sys_mbox_trypost>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e7d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7dc:	e00a      	b.n	800e7f4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d005      	beq.n	800e7f2 <recv_tcp+0xe6>
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ea:	8bfa      	ldrh	r2, [r7, #30]
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	6978      	ldr	r0, [r7, #20]
 800e7f0:	4798      	blx	r3
  }

  return ERR_OK;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3720      	adds	r7, #32
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	08025be8 	.word	0x08025be8
 800e800:	08025cc4 	.word	0x08025cc4
 800e804:	08025c2c 	.word	0x08025c2c
 800e808:	08025ce8 	.word	0x08025ce8
 800e80c:	08025d08 	.word	0x08025d08
 800e810:	08025d20 	.word	0x08025d20
 800e814:	0802980a 	.word	0x0802980a

0800e818 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <poll_tcp+0x22>
 800e82c:	4b29      	ldr	r3, [pc, #164]	; (800e8d4 <poll_tcp+0xbc>)
 800e82e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e832:	4929      	ldr	r1, [pc, #164]	; (800e8d8 <poll_tcp+0xc0>)
 800e834:	4829      	ldr	r0, [pc, #164]	; (800e8dc <poll_tcp+0xc4>)
 800e836:	f013 f9bd 	bl	8021bb4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	785b      	ldrb	r3, [r3, #1]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d104      	bne.n	800e84c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e842:	2101      	movs	r1, #1
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f001 f919 	bl	800fa7c <lwip_netconn_do_writemore>
 800e84a:	e016      	b.n	800e87a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	785b      	ldrb	r3, [r3, #1]
 800e850:	2b04      	cmp	r3, #4
 800e852:	d112      	bne.n	800e87a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00a      	beq.n	800e872 <poll_tcp+0x5a>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6a1b      	ldr	r3, [r3, #32]
 800e860:	7a5b      	ldrb	r3, [r3, #9]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d005      	beq.n	800e872 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6a1b      	ldr	r3, [r3, #32]
 800e86a:	7a5a      	ldrb	r2, [r3, #9]
 800e86c:	3a01      	subs	r2, #1
 800e86e:	b2d2      	uxtb	r2, r2
 800e870:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e872:	2101      	movs	r1, #1
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 fbf7 	bl	800f068 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	7f1b      	ldrb	r3, [r3, #28]
 800e87e:	f003 0310 	and.w	r3, r3, #16
 800e882:	2b00      	cmp	r3, #0
 800e884:	d021      	beq.n	800e8ca <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d01d      	beq.n	800e8ca <poll_tcp+0xb2>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e896:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e89a:	d316      	bcc.n	800e8ca <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e8a4:	2b04      	cmp	r3, #4
 800e8a6:	d810      	bhi.n	800e8ca <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	7f1b      	ldrb	r3, [r3, #28]
 800e8ac:	f023 0310 	bic.w	r3, r3, #16
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d005      	beq.n	800e8ca <poll_tcp+0xb2>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2102      	movs	r1, #2
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	08025be8 	.word	0x08025be8
 800e8d8:	08025d40 	.word	0x08025d40
 800e8dc:	08025c2c 	.word	0x08025c2c

0800e8e0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b086      	sub	sp, #24
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d106      	bne.n	800e906 <sent_tcp+0x26>
 800e8f8:	4b20      	ldr	r3, [pc, #128]	; (800e97c <sent_tcp+0x9c>)
 800e8fa:	f240 1293 	movw	r2, #403	; 0x193
 800e8fe:	4920      	ldr	r1, [pc, #128]	; (800e980 <sent_tcp+0xa0>)
 800e900:	4820      	ldr	r0, [pc, #128]	; (800e984 <sent_tcp+0xa4>)
 800e902:	f013 f957 	bl	8021bb4 <iprintf>

  if (conn) {
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d032      	beq.n	800e972 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	785b      	ldrb	r3, [r3, #1]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d104      	bne.n	800e91e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e914:	2101      	movs	r1, #1
 800e916:	6978      	ldr	r0, [r7, #20]
 800e918:	f001 f8b0 	bl	800fa7c <lwip_netconn_do_writemore>
 800e91c:	e007      	b.n	800e92e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	785b      	ldrb	r3, [r3, #1]
 800e922:	2b04      	cmp	r3, #4
 800e924:	d103      	bne.n	800e92e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e926:	2101      	movs	r1, #1
 800e928:	6978      	ldr	r0, [r7, #20]
 800e92a:	f000 fb9d 	bl	800f068 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d01d      	beq.n	800e972 <sent_tcp+0x92>
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e93e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e942:	d316      	bcc.n	800e972 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e94c:	2b04      	cmp	r3, #4
 800e94e:	d810      	bhi.n	800e972 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	7f1b      	ldrb	r3, [r3, #28]
 800e954:	f023 0310 	bic.w	r3, r3, #16
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e962:	2b00      	cmp	r3, #0
 800e964:	d005      	beq.n	800e972 <sent_tcp+0x92>
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	88fa      	ldrh	r2, [r7, #6]
 800e96c:	2102      	movs	r1, #2
 800e96e:	6978      	ldr	r0, [r7, #20]
 800e970:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	3718      	adds	r7, #24
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	08025be8 	.word	0x08025be8
 800e980:	08025d40 	.word	0x08025d40
 800e984:	08025c2c 	.word	0x08025c2c

0800e988 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	460b      	mov	r3, r1
 800e992:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <err_tcp+0x24>
 800e99e:	4b5f      	ldr	r3, [pc, #380]	; (800eb1c <err_tcp+0x194>)
 800e9a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e9a4:	495e      	ldr	r1, [pc, #376]	; (800eb20 <err_tcp+0x198>)
 800e9a6:	485f      	ldr	r0, [pc, #380]	; (800eb24 <err_tcp+0x19c>)
 800e9a8:	f013 f904 	bl	8021bb4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800e9ac:	f012 fa50 	bl	8020e50 <sys_arch_protect>
 800e9b0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	78fa      	ldrb	r2, [r7, #3]
 800e9bc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	7f1b      	ldrb	r3, [r3, #28]
 800e9c2:	f043 0301 	orr.w	r3, r3, #1
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	785b      	ldrb	r3, [r3, #1]
 800e9d0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800e9d8:	69b8      	ldr	r0, [r7, #24]
 800e9da:	f012 fa47 	bl	8020e6c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d005      	beq.n	800e9f2 <err_tcp+0x6a>
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	2104      	movs	r1, #4
 800e9ee:	69f8      	ldr	r0, [r7, #28]
 800e9f0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d005      	beq.n	800ea06 <err_tcp+0x7e>
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fe:	2200      	movs	r2, #0
 800ea00:	2100      	movs	r1, #0
 800ea02:	69f8      	ldr	r0, [r7, #28]
 800ea04:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d005      	beq.n	800ea1a <err_tcp+0x92>
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea12:	2200      	movs	r2, #0
 800ea14:	2102      	movs	r1, #2
 800ea16:	69f8      	ldr	r0, [r7, #28]
 800ea18:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ea1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fd86 	bl	800e530 <lwip_netconn_err_to_msg>
 800ea24:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	3310      	adds	r3, #16
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f012 f901 	bl	8020c32 <sys_mbox_valid>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d005      	beq.n	800ea42 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	3310      	adds	r3, #16
 800ea3a:	6939      	ldr	r1, [r7, #16]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f012 f883 	bl	8020b48 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	3314      	adds	r3, #20
 800ea46:	4618      	mov	r0, r3
 800ea48:	f012 f8f3 	bl	8020c32 <sys_mbox_valid>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	3314      	adds	r3, #20
 800ea56:	6939      	ldr	r1, [r7, #16]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f012 f875 	bl	8020b48 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ea5e:	7dfb      	ldrb	r3, [r7, #23]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d005      	beq.n	800ea70 <err_tcp+0xe8>
 800ea64:	7dfb      	ldrb	r3, [r7, #23]
 800ea66:	2b04      	cmp	r3, #4
 800ea68:	d002      	beq.n	800ea70 <err_tcp+0xe8>
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
 800ea6c:	2b03      	cmp	r3, #3
 800ea6e:	d143      	bne.n	800eaf8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	7f1b      	ldrb	r3, [r3, #28]
 800ea74:	f003 0304 	and.w	r3, r3, #4
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	bf14      	ite	ne
 800ea7c:	2301      	movne	r3, #1
 800ea7e:	2300      	moveq	r3, #0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	7f1b      	ldrb	r3, [r3, #28]
 800ea88:	f023 0304 	bic.w	r3, r3, #4
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d13b      	bne.n	800eb10 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	6a1b      	ldr	r3, [r3, #32]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d106      	bne.n	800eaae <err_tcp+0x126>
 800eaa0:	4b1e      	ldr	r3, [pc, #120]	; (800eb1c <err_tcp+0x194>)
 800eaa2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eaa6:	4920      	ldr	r1, [pc, #128]	; (800eb28 <err_tcp+0x1a0>)
 800eaa8:	481e      	ldr	r0, [pc, #120]	; (800eb24 <err_tcp+0x19c>)
 800eaaa:	f013 f883 	bl	8021bb4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	2b04      	cmp	r3, #4
 800eab2:	d104      	bne.n	800eabe <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	2200      	movs	r2, #0
 800eaba:	711a      	strb	r2, [r3, #4]
 800eabc:	e003      	b.n	800eac6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	78fa      	ldrb	r2, [r7, #3]
 800eac4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	330c      	adds	r3, #12
 800eace:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ead0:	68b8      	ldr	r0, [r7, #8]
 800ead2:	f012 f93d 	bl	8020d50 <sys_sem_valid>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d106      	bne.n	800eaea <err_tcp+0x162>
 800eadc:	4b0f      	ldr	r3, [pc, #60]	; (800eb1c <err_tcp+0x194>)
 800eade:	f240 12ef 	movw	r2, #495	; 0x1ef
 800eae2:	4912      	ldr	r1, [pc, #72]	; (800eb2c <err_tcp+0x1a4>)
 800eae4:	480f      	ldr	r0, [pc, #60]	; (800eb24 <err_tcp+0x19c>)
 800eae6:	f013 f865 	bl	8021bb4 <iprintf>
      conn->current_msg = NULL;
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	2200      	movs	r2, #0
 800eaee:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800eaf0:	68b8      	ldr	r0, [r7, #8]
 800eaf2:	f012 f913 	bl	8020d1c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800eaf6:	e00b      	b.n	800eb10 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d008      	beq.n	800eb12 <err_tcp+0x18a>
 800eb00:	4b06      	ldr	r3, [pc, #24]	; (800eb1c <err_tcp+0x194>)
 800eb02:	f240 12f7 	movw	r2, #503	; 0x1f7
 800eb06:	490a      	ldr	r1, [pc, #40]	; (800eb30 <err_tcp+0x1a8>)
 800eb08:	4806      	ldr	r0, [pc, #24]	; (800eb24 <err_tcp+0x19c>)
 800eb0a:	f013 f853 	bl	8021bb4 <iprintf>
  }
}
 800eb0e:	e000      	b.n	800eb12 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800eb10:	bf00      	nop
}
 800eb12:	bf00      	nop
 800eb14:	3720      	adds	r7, #32
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	08025be8 	.word	0x08025be8
 800eb20:	08025d40 	.word	0x08025d40
 800eb24:	08025c2c 	.word	0x08025c2c
 800eb28:	08025d50 	.word	0x08025d50
 800eb2c:	08025d6c 	.word	0x08025d6c
 800eb30:	08025d88 	.word	0x08025d88

0800eb34 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800eb42:	6879      	ldr	r1, [r7, #4]
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f008 f89b 	bl	8016c80 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800eb4a:	490a      	ldr	r1, [pc, #40]	; (800eb74 <setup_tcp+0x40>)
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f008 f8a9 	bl	8016ca4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800eb52:	4909      	ldr	r1, [pc, #36]	; (800eb78 <setup_tcp+0x44>)
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f008 f8c7 	bl	8016ce8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800eb5a:	2202      	movs	r2, #2
 800eb5c:	4907      	ldr	r1, [pc, #28]	; (800eb7c <setup_tcp+0x48>)
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f008 f91e 	bl	8016da0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800eb64:	4906      	ldr	r1, [pc, #24]	; (800eb80 <setup_tcp+0x4c>)
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f008 f8e0 	bl	8016d2c <tcp_err>
}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	0800e70d 	.word	0x0800e70d
 800eb78:	0800e8e1 	.word	0x0800e8e1
 800eb7c:	0800e819 	.word	0x0800e819
 800eb80:	0800e989 	.word	0x0800e989

0800eb84 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800eb84:	b590      	push	{r4, r7, lr}
 800eb86:	b089      	sub	sp, #36	; 0x24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <accept_function+0x1e>
    return ERR_VAL;
 800eb9c:	f06f 0305 	mvn.w	r3, #5
 800eba0:	e0a1      	b.n	800ece6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	3314      	adds	r3, #20
 800eba6:	4618      	mov	r0, r3
 800eba8:	f012 f843 	bl	8020c32 <sys_mbox_valid>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d102      	bne.n	800ebb8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ebb2:	f06f 0305 	mvn.w	r3, #5
 800ebb6:	e096      	b.n	800ece6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d11b      	bne.n	800ebf6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	f103 0414 	add.w	r4, r3, #20
 800ebc4:	f06f 000c 	mvn.w	r0, #12
 800ebc8:	f7ff fcb2 	bl	800e530 <lwip_netconn_err_to_msg>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	4619      	mov	r1, r3
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f011 ffb9 	bl	8020b48 <sys_mbox_trypost>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d109      	bne.n	800ebf0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d005      	beq.n	800ebf0 <accept_function+0x6c>
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2100      	movs	r1, #0
 800ebec:	69f8      	ldr	r0, [r7, #28]
 800ebee:	4798      	blx	r3
    }
    return ERR_VAL;
 800ebf0:	f06f 0305 	mvn.w	r3, #5
 800ebf4:	e077      	b.n	800ece6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ebf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d006      	beq.n	800ec0c <accept_function+0x88>
 800ebfe:	4b3c      	ldr	r3, [pc, #240]	; (800ecf0 <accept_function+0x16c>)
 800ec00:	f240 222a 	movw	r2, #554	; 0x22a
 800ec04:	493b      	ldr	r1, [pc, #236]	; (800ecf4 <accept_function+0x170>)
 800ec06:	483c      	ldr	r0, [pc, #240]	; (800ecf8 <accept_function+0x174>)
 800ec08:	f012 ffd4 	bl	8021bb4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	781a      	ldrb	r2, [r3, #0]
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec14:	4619      	mov	r1, r3
 800ec16:	4610      	mov	r0, r2
 800ec18:	f000 f8f0 	bl	800edfc <netconn_alloc>
 800ec1c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d11b      	bne.n	800ec5c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	f103 0414 	add.w	r4, r3, #20
 800ec2a:	f06f 000c 	mvn.w	r0, #12
 800ec2e:	f7ff fc7f 	bl	800e530 <lwip_netconn_err_to_msg>
 800ec32:	4603      	mov	r3, r0
 800ec34:	4619      	mov	r1, r3
 800ec36:	4620      	mov	r0, r4
 800ec38:	f011 ff86 	bl	8020b48 <sys_mbox_trypost>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d109      	bne.n	800ec56 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d005      	beq.n	800ec56 <accept_function+0xd2>
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	2200      	movs	r2, #0
 800ec50:	2100      	movs	r1, #0
 800ec52:	69f8      	ldr	r0, [r7, #28]
 800ec54:	4798      	blx	r3
    }
    return ERR_MEM;
 800ec56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec5a:	e044      	b.n	800ece6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ec62:	69b8      	ldr	r0, [r7, #24]
 800ec64:	f7ff ff66 	bl	800eb34 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	3314      	adds	r3, #20
 800ec6c:	69b9      	ldr	r1, [r7, #24]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f011 ff6a 	bl	8020b48 <sys_mbox_trypost>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d02a      	beq.n	800ecd0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ec80:	2100      	movs	r1, #0
 800ec82:	6978      	ldr	r0, [r7, #20]
 800ec84:	f007 fffc 	bl	8016c80 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ec88:	2100      	movs	r1, #0
 800ec8a:	6978      	ldr	r0, [r7, #20]
 800ec8c:	f008 f80a 	bl	8016ca4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ec90:	2100      	movs	r1, #0
 800ec92:	6978      	ldr	r0, [r7, #20]
 800ec94:	f008 f828 	bl	8016ce8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	6978      	ldr	r0, [r7, #20]
 800ec9e:	f008 f87f 	bl	8016da0 <tcp_poll>
    tcp_err(pcb, NULL);
 800eca2:	2100      	movs	r1, #0
 800eca4:	6978      	ldr	r0, [r7, #20]
 800eca6:	f008 f841 	bl	8016d2c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	2200      	movs	r2, #0
 800ecae:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	3310      	adds	r3, #16
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f011 ff35 	bl	8020b24 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	3310      	adds	r3, #16
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f011 ffc8 	bl	8020c54 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ecc4:	69b8      	ldr	r0, [r7, #24]
 800ecc6:	f000 f907 	bl	800eed8 <netconn_free>
    return ERR_MEM;
 800ecca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecce:	e00a      	b.n	800ece6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d005      	beq.n	800ece4 <accept_function+0x160>
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2100      	movs	r1, #0
 800ece0:	69f8      	ldr	r0, [r7, #28]
 800ece2:	4798      	blx	r3
  }

  return ERR_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3724      	adds	r7, #36	; 0x24
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd90      	pop	{r4, r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	08025be8 	.word	0x08025be8
 800ecf4:	08025da4 	.word	0x08025da4
 800ecf8:	08025c2c 	.word	0x08025c2c

0800ecfc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ecfc:	b590      	push	{r4, r7, lr}
 800ecfe:	b085      	sub	sp, #20
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d006      	beq.n	800ed20 <pcb_new+0x24>
 800ed12:	4b2b      	ldr	r3, [pc, #172]	; (800edc0 <pcb_new+0xc4>)
 800ed14:	f240 2265 	movw	r2, #613	; 0x265
 800ed18:	492a      	ldr	r1, [pc, #168]	; (800edc4 <pcb_new+0xc8>)
 800ed1a:	482b      	ldr	r0, [pc, #172]	; (800edc8 <pcb_new+0xcc>)
 800ed1c:	f012 ff4a 	bl	8021bb4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed2a:	2b10      	cmp	r3, #16
 800ed2c:	d022      	beq.n	800ed74 <pcb_new+0x78>
 800ed2e:	2b20      	cmp	r3, #32
 800ed30:	d133      	bne.n	800ed9a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681c      	ldr	r4, [r3, #0]
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f00d fb68 	bl	801c40e <udp_new_ip_type>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d02a      	beq.n	800eda2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2b22      	cmp	r3, #34	; 0x22
 800ed54:	d104      	bne.n	800ed60 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6858      	ldr	r0, [r3, #4]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	4917      	ldr	r1, [pc, #92]	; (800edcc <pcb_new+0xd0>)
 800ed6e:	f00d fad5 	bl	801c31c <udp_recv>
      }
      break;
 800ed72:	e016      	b.n	800eda2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681c      	ldr	r4, [r3, #0]
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f007 ff72 	bl	8016c64 <tcp_new_ip_type>
 800ed80:	4603      	mov	r3, r0
 800ed82:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff fece 	bl	800eb34 <setup_tcp>
      }
      break;
 800ed98:	e005      	b.n	800eda6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	22fa      	movs	r2, #250	; 0xfa
 800ed9e:	711a      	strb	r2, [r3, #4]
      return;
 800eda0:	e00a      	b.n	800edb8 <pcb_new+0xbc>
      break;
 800eda2:	bf00      	nop
 800eda4:	e000      	b.n	800eda8 <pcb_new+0xac>
      break;
 800eda6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d102      	bne.n	800edb8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	22ff      	movs	r2, #255	; 0xff
 800edb6:	711a      	strb	r2, [r3, #4]
  }
}
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd90      	pop	{r4, r7, pc}
 800edbe:	bf00      	nop
 800edc0:	08025be8 	.word	0x08025be8
 800edc4:	08025dcc 	.word	0x08025dcc
 800edc8:	08025c2c 	.word	0x08025c2c
 800edcc:	0800e611 	.word	0x0800e611

0800edd0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d102      	bne.n	800edf2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7ff ff85 	bl	800ecfc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
	...

0800edfc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	6039      	str	r1, [r7, #0]
 800ee06:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ee0c:	2007      	movs	r0, #7
 800ee0e:	f004 fee1 	bl	8013bd4 <memp_malloc>
 800ee12:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <netconn_alloc+0x22>
    return NULL;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	e052      	b.n	800eec4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2200      	movs	r2, #0
 800ee22:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	79fa      	ldrb	r2, [r7, #7]
 800ee28:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee36:	2b10      	cmp	r3, #16
 800ee38:	d004      	beq.n	800ee44 <netconn_alloc+0x48>
 800ee3a:	2b20      	cmp	r3, #32
 800ee3c:	d105      	bne.n	800ee4a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ee3e:	2306      	movs	r3, #6
 800ee40:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ee42:	e00a      	b.n	800ee5a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ee44:	2306      	movs	r3, #6
 800ee46:	617b      	str	r3, [r7, #20]
      break;
 800ee48:	e007      	b.n	800ee5a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ee4a:	4b20      	ldr	r3, [pc, #128]	; (800eecc <netconn_alloc+0xd0>)
 800ee4c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ee50:	491f      	ldr	r1, [pc, #124]	; (800eed0 <netconn_alloc+0xd4>)
 800ee52:	4820      	ldr	r0, [pc, #128]	; (800eed4 <netconn_alloc+0xd8>)
 800ee54:	f012 feae 	bl	8021bb4 <iprintf>
      goto free_and_return;
 800ee58:	e02f      	b.n	800eeba <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3310      	adds	r3, #16
 800ee5e:	6979      	ldr	r1, [r7, #20]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f011 fe41 	bl	8020ae8 <sys_mbox_new>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d125      	bne.n	800eeb8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	330c      	adds	r3, #12
 800ee70:	2100      	movs	r1, #0
 800ee72:	4618      	mov	r0, r3
 800ee74:	f011 fefb 	bl	8020c6e <sys_sem_new>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d005      	beq.n	800ee8a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	3310      	adds	r3, #16
 800ee82:	4618      	mov	r0, r3
 800ee84:	f011 fe4e 	bl	8020b24 <sys_mbox_free>
    goto free_and_return;
 800ee88:	e017      	b.n	800eeba <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3314      	adds	r3, #20
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f011 fee0 	bl	8020c54 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eea0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	683a      	ldr	r2, [r7, #0]
 800eea6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	7cfa      	ldrb	r2, [r7, #19]
 800eeb2:	771a      	strb	r2, [r3, #28]
  return conn;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	e005      	b.n	800eec4 <netconn_alloc+0xc8>
    goto free_and_return;
 800eeb8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800eeba:	68f9      	ldr	r1, [r7, #12]
 800eebc:	2007      	movs	r0, #7
 800eebe:	f004 fedb 	bl	8013c78 <memp_free>
  return NULL;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	08025be8 	.word	0x08025be8
 800eed0:	08025dec 	.word	0x08025dec
 800eed4:	08025c2c 	.word	0x08025c2c

0800eed8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d006      	beq.n	800eef6 <netconn_free+0x1e>
 800eee8:	4b1b      	ldr	r3, [pc, #108]	; (800ef58 <netconn_free+0x80>)
 800eeea:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800eeee:	491b      	ldr	r1, [pc, #108]	; (800ef5c <netconn_free+0x84>)
 800eef0:	481b      	ldr	r0, [pc, #108]	; (800ef60 <netconn_free+0x88>)
 800eef2:	f012 fe5f 	bl	8021bb4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	3310      	adds	r3, #16
 800eefa:	4618      	mov	r0, r3
 800eefc:	f011 fe99 	bl	8020c32 <sys_mbox_valid>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <netconn_free+0x3c>
 800ef06:	4b14      	ldr	r3, [pc, #80]	; (800ef58 <netconn_free+0x80>)
 800ef08:	f240 3223 	movw	r2, #803	; 0x323
 800ef0c:	4915      	ldr	r1, [pc, #84]	; (800ef64 <netconn_free+0x8c>)
 800ef0e:	4814      	ldr	r0, [pc, #80]	; (800ef60 <netconn_free+0x88>)
 800ef10:	f012 fe50 	bl	8021bb4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3314      	adds	r3, #20
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f011 fe8a 	bl	8020c32 <sys_mbox_valid>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d006      	beq.n	800ef32 <netconn_free+0x5a>
 800ef24:	4b0c      	ldr	r3, [pc, #48]	; (800ef58 <netconn_free+0x80>)
 800ef26:	f240 3226 	movw	r2, #806	; 0x326
 800ef2a:	490f      	ldr	r1, [pc, #60]	; (800ef68 <netconn_free+0x90>)
 800ef2c:	480c      	ldr	r0, [pc, #48]	; (800ef60 <netconn_free+0x88>)
 800ef2e:	f012 fe41 	bl	8021bb4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	330c      	adds	r3, #12
 800ef36:	4618      	mov	r0, r3
 800ef38:	f011 fefd 	bl	8020d36 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	330c      	adds	r3, #12
 800ef40:	4618      	mov	r0, r3
 800ef42:	f011 ff16 	bl	8020d72 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	2007      	movs	r0, #7
 800ef4a:	f004 fe95 	bl	8013c78 <memp_free>
}
 800ef4e:	bf00      	nop
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	08025be8 	.word	0x08025be8
 800ef5c:	08025e14 	.word	0x08025e14
 800ef60:	08025c2c 	.word	0x08025c2c
 800ef64:	08025e44 	.word	0x08025e44
 800ef68:	08025e80 	.word	0x08025e80

0800ef6c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b086      	sub	sp, #24
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3310      	adds	r3, #16
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f011 fe5a 	bl	8020c32 <sys_mbox_valid>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d02f      	beq.n	800efe4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ef84:	e018      	b.n	800efb8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef8e:	2b10      	cmp	r3, #16
 800ef90:	d10e      	bne.n	800efb0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	f107 020f 	add.w	r2, r7, #15
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff fafe 	bl	800e59c <lwip_netconn_is_err_msg>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d108      	bne.n	800efb8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f005 fd47 	bl	8014a3c <pbuf_free>
 800efae:	e003      	b.n	800efb8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f001 f952 	bl	801025c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	3310      	adds	r3, #16
 800efbc:	f107 0210 	add.w	r2, r7, #16
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f011 fe19 	bl	8020bfa <sys_arch_mbox_tryfetch>
 800efc8:	4603      	mov	r3, r0
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efce:	d1da      	bne.n	800ef86 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3310      	adds	r3, #16
 800efd4:	4618      	mov	r0, r3
 800efd6:	f011 fda5 	bl	8020b24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3310      	adds	r3, #16
 800efde:	4618      	mov	r0, r3
 800efe0:	f011 fe38 	bl	8020c54 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3314      	adds	r3, #20
 800efe8:	4618      	mov	r0, r3
 800efea:	f011 fe22 	bl	8020c32 <sys_mbox_valid>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d034      	beq.n	800f05e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800eff4:	e01d      	b.n	800f032 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f107 020e 	add.w	r2, r7, #14
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff facc 	bl	800e59c <lwip_netconn_is_err_msg>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d113      	bne.n	800f032 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f00e:	6978      	ldr	r0, [r7, #20]
 800f010:	f7ff ffac 	bl	800ef6c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d007      	beq.n	800f02c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	4618      	mov	r0, r3
 800f022:	f006 fc87 	bl	8015934 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2200      	movs	r2, #0
 800f02a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f02c:	6978      	ldr	r0, [r7, #20]
 800f02e:	f7ff ff53 	bl	800eed8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3314      	adds	r3, #20
 800f036:	f107 0210 	add.w	r2, r7, #16
 800f03a:	4611      	mov	r1, r2
 800f03c:	4618      	mov	r0, r3
 800f03e:	f011 fddc 	bl	8020bfa <sys_arch_mbox_tryfetch>
 800f042:	4603      	mov	r3, r0
 800f044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f048:	d1d5      	bne.n	800eff6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	3314      	adds	r3, #20
 800f04e:	4618      	mov	r0, r3
 800f050:	f011 fd68 	bl	8020b24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3314      	adds	r3, #20
 800f058:	4618      	mov	r0, r3
 800f05a:	f011 fdfb 	bl	8020c54 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f05e:	bf00      	nop
 800f060:	3718      	adds	r7, #24
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d106      	bne.n	800f08c <lwip_netconn_do_close_internal+0x24>
 800f07e:	4ba1      	ldr	r3, [pc, #644]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f080:	f240 32a2 	movw	r2, #930	; 0x3a2
 800f084:	49a0      	ldr	r1, [pc, #640]	; (800f308 <lwip_netconn_do_close_internal+0x2a0>)
 800f086:	48a1      	ldr	r0, [pc, #644]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f088:	f012 fd94 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f094:	2b10      	cmp	r3, #16
 800f096:	d006      	beq.n	800f0a6 <lwip_netconn_do_close_internal+0x3e>
 800f098:	4b9a      	ldr	r3, [pc, #616]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f09a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800f09e:	499c      	ldr	r1, [pc, #624]	; (800f310 <lwip_netconn_do_close_internal+0x2a8>)
 800f0a0:	489a      	ldr	r0, [pc, #616]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f0a2:	f012 fd87 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	785b      	ldrb	r3, [r3, #1]
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d006      	beq.n	800f0bc <lwip_netconn_do_close_internal+0x54>
 800f0ae:	4b95      	ldr	r3, [pc, #596]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f0b0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800f0b4:	4997      	ldr	r1, [pc, #604]	; (800f314 <lwip_netconn_do_close_internal+0x2ac>)
 800f0b6:	4895      	ldr	r0, [pc, #596]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f0b8:	f012 fd7c 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d106      	bne.n	800f0d2 <lwip_netconn_do_close_internal+0x6a>
 800f0c4:	4b8f      	ldr	r3, [pc, #572]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f0c6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800f0ca:	4993      	ldr	r1, [pc, #588]	; (800f318 <lwip_netconn_do_close_internal+0x2b0>)
 800f0cc:	488f      	ldr	r0, [pc, #572]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f0ce:	f012 fd71 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a1b      	ldr	r3, [r3, #32]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <lwip_netconn_do_close_internal+0x80>
 800f0da:	4b8a      	ldr	r3, [pc, #552]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f0dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f0e0:	498e      	ldr	r1, [pc, #568]	; (800f31c <lwip_netconn_do_close_internal+0x2b4>)
 800f0e2:	488a      	ldr	r0, [pc, #552]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f0e4:	f012 fd66 	bl	8021bb4 <iprintf>

  tpcb = conn->pcb.tcp;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	7a1b      	ldrb	r3, [r3, #8]
 800f0f4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	f003 0301 	and.w	r3, r3, #1
 800f0fc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
 800f100:	f003 0302 	and.w	r3, r3, #2
 800f104:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f106:	7bfb      	ldrb	r3, [r7, #15]
 800f108:	2b03      	cmp	r3, #3
 800f10a:	d102      	bne.n	800f112 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f10c:	2301      	movs	r3, #1
 800f10e:	75bb      	strb	r3, [r7, #22]
 800f110:	e01f      	b.n	800f152 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f112:	7bbb      	ldrb	r3, [r7, #14]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00e      	beq.n	800f136 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f11c:	2b05      	cmp	r3, #5
 800f11e:	d007      	beq.n	800f130 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f124:	2b06      	cmp	r3, #6
 800f126:	d003      	beq.n	800f130 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f12c:	2b08      	cmp	r3, #8
 800f12e:	d102      	bne.n	800f136 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f130:	2301      	movs	r3, #1
 800f132:	75bb      	strb	r3, [r7, #22]
 800f134:	e00d      	b.n	800f152 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f136:	7b7b      	ldrb	r3, [r7, #13]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d008      	beq.n	800f14e <lwip_netconn_do_close_internal+0xe6>
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	8b5b      	ldrh	r3, [r3, #26]
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f148:	2301      	movs	r3, #1
 800f14a:	75bb      	strb	r3, [r7, #22]
 800f14c:	e001      	b.n	800f152 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f152:	7dbb      	ldrb	r3, [r7, #22]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d003      	beq.n	800f160 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f158:	2100      	movs	r1, #0
 800f15a:	6938      	ldr	r0, [r7, #16]
 800f15c:	f007 fd90 	bl	8016c80 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	7d1b      	ldrb	r3, [r3, #20]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d104      	bne.n	800f172 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f168:	2100      	movs	r1, #0
 800f16a:	6938      	ldr	r0, [r7, #16]
 800f16c:	f007 fe00 	bl	8016d70 <tcp_accept>
 800f170:	e01d      	b.n	800f1ae <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d007      	beq.n	800f188 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f178:	2100      	movs	r1, #0
 800f17a:	6938      	ldr	r0, [r7, #16]
 800f17c:	f007 fd92 	bl	8016ca4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f180:	2100      	movs	r1, #0
 800f182:	6938      	ldr	r0, [r7, #16]
 800f184:	f007 fdf4 	bl	8016d70 <tcp_accept>
    }
    if (shut_tx) {
 800f188:	7b7b      	ldrb	r3, [r7, #13]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d003      	beq.n	800f196 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f18e:	2100      	movs	r1, #0
 800f190:	6938      	ldr	r0, [r7, #16]
 800f192:	f007 fda9 	bl	8016ce8 <tcp_sent>
    }
    if (shut_close) {
 800f196:	7dbb      	ldrb	r3, [r7, #22]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d008      	beq.n	800f1ae <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f19c:	2200      	movs	r2, #0
 800f19e:	2100      	movs	r1, #0
 800f1a0:	6938      	ldr	r0, [r7, #16]
 800f1a2:	f007 fdfd 	bl	8016da0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	6938      	ldr	r0, [r7, #16]
 800f1aa:	f007 fdbf 	bl	8016d2c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f1ae:	7dbb      	ldrb	r3, [r7, #22]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f1b4:	6938      	ldr	r0, [r7, #16]
 800f1b6:	f006 fa77 	bl	80156a8 <tcp_close>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	75fb      	strb	r3, [r7, #23]
 800f1be:	e007      	b.n	800f1d0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
 800f1c2:	7b7a      	ldrb	r2, [r7, #13]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6938      	ldr	r0, [r7, #16]
 800f1c8:	f006 fa9a 	bl	8015700 <tcp_shutdown>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d102      	bne.n	800f1de <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	757b      	strb	r3, [r7, #21]
 800f1dc:	e016      	b.n	800f20c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f1de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1e6:	d10f      	bne.n	800f208 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6a1b      	ldr	r3, [r3, #32]
 800f1ec:	7a5b      	ldrb	r3, [r3, #9]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10c      	bne.n	800f20c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f1f6:	7dbb      	ldrb	r3, [r7, #22]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d007      	beq.n	800f20c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f1fc:	6938      	ldr	r0, [r7, #16]
 800f1fe:	f006 fb99 	bl	8015934 <tcp_abort>
          err = ERR_OK;
 800f202:	2300      	movs	r3, #0
 800f204:	75fb      	strb	r3, [r7, #23]
 800f206:	e001      	b.n	800f20c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f208:	2301      	movs	r3, #1
 800f20a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f20c:	7d7b      	ldrb	r3, [r7, #21]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d044      	beq.n	800f29c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	330c      	adds	r3, #12
 800f21a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	7dfa      	ldrb	r2, [r7, #23]
 800f222:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f230:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d129      	bne.n	800f28c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f238:	7dbb      	ldrb	r3, [r7, #22]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00c      	beq.n	800f258 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <lwip_netconn_do_close_internal+0x1f0>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	2200      	movs	r2, #0
 800f252:	2104      	movs	r1, #4
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	4798      	blx	r3
      }
      if (shut_rx) {
 800f258:	7bbb      	ldrb	r3, [r7, #14]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d009      	beq.n	800f272 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f262:	2b00      	cmp	r3, #0
 800f264:	d005      	beq.n	800f272 <lwip_netconn_do_close_internal+0x20a>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	2200      	movs	r2, #0
 800f26c:	2100      	movs	r1, #0
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	4798      	blx	r3
      }
      if (shut_tx) {
 800f272:	7b7b      	ldrb	r3, [r7, #13]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d009      	beq.n	800f28c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d005      	beq.n	800f28c <lwip_netconn_do_close_internal+0x224>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f284:	2200      	movs	r2, #0
 800f286:	2102      	movs	r1, #2
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f28c:	78fb      	ldrb	r3, [r7, #3]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f292:	68b8      	ldr	r0, [r7, #8]
 800f294:	f011 fd42 	bl	8020d1c <sys_sem_signal>
    }
    return ERR_OK;
 800f298:	2300      	movs	r3, #0
 800f29a:	e02e      	b.n	800f2fa <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800f29c:	7d7b      	ldrb	r3, [r7, #21]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d11e      	bne.n	800f2e0 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d106      	bne.n	800f2b8 <lwip_netconn_do_close_internal+0x250>
 800f2aa:	4b16      	ldr	r3, [pc, #88]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f2ac:	f240 4241 	movw	r2, #1089	; 0x441
 800f2b0:	491b      	ldr	r1, [pc, #108]	; (800f320 <lwip_netconn_do_close_internal+0x2b8>)
 800f2b2:	4816      	ldr	r0, [pc, #88]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f2b4:	f012 fc7e 	bl	8021bb4 <iprintf>
    if (shut_tx) {
 800f2b8:	7b7b      	ldrb	r3, [r7, #13]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800f2be:	4919      	ldr	r1, [pc, #100]	; (800f324 <lwip_netconn_do_close_internal+0x2bc>)
 800f2c0:	6938      	ldr	r0, [r7, #16]
 800f2c2:	f007 fd11 	bl	8016ce8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	4917      	ldr	r1, [pc, #92]	; (800f328 <lwip_netconn_do_close_internal+0x2c0>)
 800f2ca:	6938      	ldr	r0, [r7, #16]
 800f2cc:	f007 fd68 	bl	8016da0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f2d0:	4916      	ldr	r1, [pc, #88]	; (800f32c <lwip_netconn_do_close_internal+0x2c4>)
 800f2d2:	6938      	ldr	r0, [r7, #16]
 800f2d4:	f007 fd2a 	bl	8016d2c <tcp_err>
    tcp_arg(tpcb, conn);
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	6938      	ldr	r0, [r7, #16]
 800f2dc:	f007 fcd0 	bl	8016c80 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d106      	bne.n	800f2f6 <lwip_netconn_do_close_internal+0x28e>
 800f2e8:	4b06      	ldr	r3, [pc, #24]	; (800f304 <lwip_netconn_do_close_internal+0x29c>)
 800f2ea:	f240 424d 	movw	r2, #1101	; 0x44d
 800f2ee:	4910      	ldr	r1, [pc, #64]	; (800f330 <lwip_netconn_do_close_internal+0x2c8>)
 800f2f0:	4806      	ldr	r0, [pc, #24]	; (800f30c <lwip_netconn_do_close_internal+0x2a4>)
 800f2f2:	f012 fc5f 	bl	8021bb4 <iprintf>
  return err;
 800f2f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	08025be8 	.word	0x08025be8
 800f308:	08025ebc 	.word	0x08025ebc
 800f30c:	08025c2c 	.word	0x08025c2c
 800f310:	08025ecc 	.word	0x08025ecc
 800f314:	08025eec 	.word	0x08025eec
 800f318:	08025f10 	.word	0x08025f10
 800f31c:	08025d50 	.word	0x08025d50
 800f320:	08025f24 	.word	0x08025f24
 800f324:	0800e8e1 	.word	0x0800e8e1
 800f328:	0800e819 	.word	0x0800e819
 800f32c:	0800e989 	.word	0x0800e989
 800f330:	08025f48 	.word	0x08025f48

0800f334 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	785b      	ldrb	r3, [r3, #1]
 800f346:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f348:	7afb      	ldrb	r3, [r7, #11]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00d      	beq.n	800f36a <lwip_netconn_do_delconn+0x36>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f358:	2b10      	cmp	r3, #16
 800f35a:	d006      	beq.n	800f36a <lwip_netconn_do_delconn+0x36>
 800f35c:	4b60      	ldr	r3, [pc, #384]	; (800f4e0 <lwip_netconn_do_delconn+0x1ac>)
 800f35e:	f240 425e 	movw	r2, #1118	; 0x45e
 800f362:	4960      	ldr	r1, [pc, #384]	; (800f4e4 <lwip_netconn_do_delconn+0x1b0>)
 800f364:	4860      	ldr	r0, [pc, #384]	; (800f4e8 <lwip_netconn_do_delconn+0x1b4>)
 800f366:	f012 fc25 	bl	8021bb4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d005      	beq.n	800f37c <lwip_netconn_do_delconn+0x48>
 800f370:	7afb      	ldrb	r3, [r7, #11]
 800f372:	2b02      	cmp	r3, #2
 800f374:	d002      	beq.n	800f37c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f376:	7afb      	ldrb	r3, [r7, #11]
 800f378:	2b03      	cmp	r3, #3
 800f37a:	d109      	bne.n	800f390 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f37c:	7afb      	ldrb	r3, [r7, #11]
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d10a      	bne.n	800f398 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	7f1b      	ldrb	r3, [r3, #28]
 800f388:	f003 0304 	and.w	r3, r3, #4
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d103      	bne.n	800f398 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	22fb      	movs	r2, #251	; 0xfb
 800f394:	711a      	strb	r2, [r3, #4]
 800f396:	e097      	b.n	800f4c8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f398:	7afb      	ldrb	r3, [r7, #11]
 800f39a:	2b03      	cmp	r3, #3
 800f39c:	d10d      	bne.n	800f3ba <lwip_netconn_do_delconn+0x86>
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	7f1b      	ldrb	r3, [r3, #28]
 800f3a4:	f003 0304 	and.w	r3, r3, #4
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d106      	bne.n	800f3ba <lwip_netconn_do_delconn+0x86>
 800f3ac:	4b4c      	ldr	r3, [pc, #304]	; (800f4e0 <lwip_netconn_do_delconn+0x1ac>)
 800f3ae:	f240 427a 	movw	r2, #1146	; 0x47a
 800f3b2:	494e      	ldr	r1, [pc, #312]	; (800f4ec <lwip_netconn_do_delconn+0x1b8>)
 800f3b4:	484c      	ldr	r0, [pc, #304]	; (800f4e8 <lwip_netconn_do_delconn+0x1b4>)
 800f3b6:	f012 fbfd 	bl	8021bb4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fdd1 	bl	800ef6c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d05f      	beq.n	800f494 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3de:	2b10      	cmp	r3, #16
 800f3e0:	d00d      	beq.n	800f3fe <lwip_netconn_do_delconn+0xca>
 800f3e2:	2b20      	cmp	r3, #32
 800f3e4:	d151      	bne.n	800f48a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f00c ffb0 	bl	801c35c <udp_remove>
          break;
 800f3fc:	e046      	b.n	800f48c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6a1b      	ldr	r3, [r3, #32]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d006      	beq.n	800f416 <lwip_netconn_do_delconn+0xe2>
 800f408:	4b35      	ldr	r3, [pc, #212]	; (800f4e0 <lwip_netconn_do_delconn+0x1ac>)
 800f40a:	f240 4294 	movw	r2, #1172	; 0x494
 800f40e:	4938      	ldr	r1, [pc, #224]	; (800f4f0 <lwip_netconn_do_delconn+0x1bc>)
 800f410:	4835      	ldr	r0, [pc, #212]	; (800f4e8 <lwip_netconn_do_delconn+0x1b4>)
 800f412:	f012 fbcf 	bl	8021bb4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2204      	movs	r2, #4
 800f41c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2203      	movs	r2, #3
 800f422:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2100      	movs	r1, #0
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff fe18 	bl	800f068 <lwip_netconn_do_close_internal>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d04b      	beq.n	800f4d6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	785b      	ldrb	r3, [r3, #1]
 800f444:	2b04      	cmp	r3, #4
 800f446:	d006      	beq.n	800f456 <lwip_netconn_do_delconn+0x122>
 800f448:	4b25      	ldr	r3, [pc, #148]	; (800f4e0 <lwip_netconn_do_delconn+0x1ac>)
 800f44a:	f240 429a 	movw	r2, #1178	; 0x49a
 800f44e:	4929      	ldr	r1, [pc, #164]	; (800f4f4 <lwip_netconn_do_delconn+0x1c0>)
 800f450:	4825      	ldr	r0, [pc, #148]	; (800f4e8 <lwip_netconn_do_delconn+0x1b4>)
 800f452:	f012 fbaf 	bl	8021bb4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f456:	4828      	ldr	r0, [pc, #160]	; (800f4f8 <lwip_netconn_do_delconn+0x1c4>)
 800f458:	f011 fccf 	bl	8020dfa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	330c      	adds	r3, #12
 800f462:	2100      	movs	r1, #0
 800f464:	4618      	mov	r0, r3
 800f466:	f011 fc28 	bl	8020cba <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f46a:	4823      	ldr	r0, [pc, #140]	; (800f4f8 <lwip_netconn_do_delconn+0x1c4>)
 800f46c:	f011 fcb6 	bl	8020ddc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	785b      	ldrb	r3, [r3, #1]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d02d      	beq.n	800f4d6 <lwip_netconn_do_delconn+0x1a2>
 800f47a:	4b19      	ldr	r3, [pc, #100]	; (800f4e0 <lwip_netconn_do_delconn+0x1ac>)
 800f47c:	f240 429e 	movw	r2, #1182	; 0x49e
 800f480:	491c      	ldr	r1, [pc, #112]	; (800f4f4 <lwip_netconn_do_delconn+0x1c0>)
 800f482:	4819      	ldr	r0, [pc, #100]	; (800f4e8 <lwip_netconn_do_delconn+0x1b4>)
 800f484:	f012 fb96 	bl	8021bb4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f488:	e025      	b.n	800f4d6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f48a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2200      	movs	r2, #0
 800f492:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d007      	beq.n	800f4ae <lwip_netconn_do_delconn+0x17a>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	6810      	ldr	r0, [r2, #0]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d007      	beq.n	800f4c8 <lwip_netconn_do_delconn+0x194>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	6810      	ldr	r0, [r2, #0]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2102      	movs	r1, #2
 800f4c6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f011 fc3e 	bl	8020d50 <sys_sem_valid>
 800f4d4:	e000      	b.n	800f4d8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800f4d6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	08025be8 	.word	0x08025be8
 800f4e4:	08025f58 	.word	0x08025f58
 800f4e8:	08025c2c 	.word	0x08025c2c
 800f4ec:	08025f6c 	.word	0x08025f6c
 800f4f0:	08025f8c 	.word	0x08025f8c
 800f4f4:	08025fa8 	.word	0x08025fa8
 800f4f8:	20017790 	.word	0x20017790

0800f4fc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d025      	beq.n	800f55e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f51c:	2b10      	cmp	r3, #16
 800f51e:	d00e      	beq.n	800f53e <lwip_netconn_do_bind+0x42>
 800f520:	2b20      	cmp	r3, #32
 800f522:	d119      	bne.n	800f558 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	6858      	ldr	r0, [r3, #4]
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	6899      	ldr	r1, [r3, #8]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	899b      	ldrh	r3, [r3, #12]
 800f532:	461a      	mov	r2, r3
 800f534:	f00c fdd4 	bl	801c0e0 <udp_bind>
 800f538:	4603      	mov	r3, r0
 800f53a:	73fb      	strb	r3, [r7, #15]
        break;
 800f53c:	e011      	b.n	800f562 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	6858      	ldr	r0, [r3, #4]
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	6899      	ldr	r1, [r3, #8]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	899b      	ldrh	r3, [r3, #12]
 800f54c:	461a      	mov	r2, r3
 800f54e:	f006 f9fd 	bl	801594c <tcp_bind>
 800f552:	4603      	mov	r3, r0
 800f554:	73fb      	strb	r3, [r7, #15]
        break;
 800f556:	e004      	b.n	800f562 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800f558:	23fa      	movs	r3, #250	; 0xfa
 800f55a:	73fb      	strb	r3, [r7, #15]
        break;
 800f55c:	e001      	b.n	800f562 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800f55e:	23fa      	movs	r3, #250	; 0xfa
 800f560:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	7bfa      	ldrb	r2, [r7, #15]
 800f566:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f568:	bf00      	nop
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b088      	sub	sp, #32
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	4613      	mov	r3, r2
 800f57c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800f57e:	2300      	movs	r3, #0
 800f580:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d102      	bne.n	800f592 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800f58c:	f06f 0305 	mvn.w	r3, #5
 800f590:	e070      	b.n	800f674 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	785b      	ldrb	r3, [r3, #1]
 800f596:	2b03      	cmp	r3, #3
 800f598:	d006      	beq.n	800f5a8 <lwip_netconn_do_connected+0x38>
 800f59a:	4b38      	ldr	r3, [pc, #224]	; (800f67c <lwip_netconn_do_connected+0x10c>)
 800f59c:	f240 5223 	movw	r2, #1315	; 0x523
 800f5a0:	4937      	ldr	r1, [pc, #220]	; (800f680 <lwip_netconn_do_connected+0x110>)
 800f5a2:	4838      	ldr	r0, [pc, #224]	; (800f684 <lwip_netconn_do_connected+0x114>)
 800f5a4:	f012 fb06 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	6a1b      	ldr	r3, [r3, #32]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d10c      	bne.n	800f5ca <lwip_netconn_do_connected+0x5a>
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	7f1b      	ldrb	r3, [r3, #28]
 800f5b4:	f003 0304 	and.w	r3, r3, #4
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d106      	bne.n	800f5ca <lwip_netconn_do_connected+0x5a>
 800f5bc:	4b2f      	ldr	r3, [pc, #188]	; (800f67c <lwip_netconn_do_connected+0x10c>)
 800f5be:	f240 5224 	movw	r2, #1316	; 0x524
 800f5c2:	4931      	ldr	r1, [pc, #196]	; (800f688 <lwip_netconn_do_connected+0x118>)
 800f5c4:	482f      	ldr	r0, [pc, #188]	; (800f684 <lwip_netconn_do_connected+0x114>)
 800f5c6:	f012 faf5 	bl	8021bb4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d008      	beq.n	800f5e4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	6a1b      	ldr	r3, [r3, #32]
 800f5d6:	79fa      	ldrb	r2, [r7, #7]
 800f5d8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	6a1b      	ldr	r3, [r3, #32]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	330c      	adds	r3, #12
 800f5e2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5ec:	2b10      	cmp	r3, #16
 800f5ee:	d106      	bne.n	800f5fe <lwip_netconn_do_connected+0x8e>
 800f5f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d102      	bne.n	800f5fe <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800f5f8:	69b8      	ldr	r0, [r7, #24]
 800f5fa:	f7ff fa9b 	bl	800eb34 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	7f1b      	ldrb	r3, [r3, #28]
 800f602:	f003 0304 	and.w	r3, r3, #4
 800f606:	2b00      	cmp	r3, #0
 800f608:	bf0c      	ite	eq
 800f60a:	2301      	moveq	r3, #1
 800f60c:	2300      	movne	r3, #0
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	7f1b      	ldrb	r3, [r3, #28]
 800f616:	f023 0304 	bic.w	r3, r3, #4
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d002      	beq.n	800f62c <lwip_netconn_do_connected+0xbc>
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10c      	bne.n	800f646 <lwip_netconn_do_connected+0xd6>
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d102      	bne.n	800f638 <lwip_netconn_do_connected+0xc8>
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d006      	beq.n	800f646 <lwip_netconn_do_connected+0xd6>
 800f638:	4b10      	ldr	r3, [pc, #64]	; (800f67c <lwip_netconn_do_connected+0x10c>)
 800f63a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800f63e:	4913      	ldr	r1, [pc, #76]	; (800f68c <lwip_netconn_do_connected+0x11c>)
 800f640:	4810      	ldr	r0, [pc, #64]	; (800f684 <lwip_netconn_do_connected+0x114>)
 800f642:	f012 fab7 	bl	8021bb4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	2200      	movs	r2, #0
 800f64a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	2200      	movs	r2, #0
 800f650:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f656:	2b00      	cmp	r3, #0
 800f658:	d005      	beq.n	800f666 <lwip_netconn_do_connected+0xf6>
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65e:	2200      	movs	r2, #0
 800f660:	2102      	movs	r1, #2
 800f662:	69b8      	ldr	r0, [r7, #24]
 800f664:	4798      	blx	r3

  if (was_blocking) {
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800f66c:	69f8      	ldr	r0, [r7, #28]
 800f66e:	f011 fb55 	bl	8020d1c <sys_sem_signal>
  }
  return ERR_OK;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3720      	adds	r7, #32
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	08025be8 	.word	0x08025be8
 800f680:	08025fb0 	.word	0x08025fb0
 800f684:	08025c2c 	.word	0x08025c2c
 800f688:	08025fd0 	.word	0x08025fd0
 800f68c:	08026010 	.word	0x08026010

0800f690 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d102      	bne.n	800f6ac <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800f6a6:	23f1      	movs	r3, #241	; 0xf1
 800f6a8:	75fb      	strb	r3, [r7, #23]
 800f6aa:	e09b      	b.n	800f7e4 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6b6:	2b10      	cmp	r3, #16
 800f6b8:	d00f      	beq.n	800f6da <lwip_netconn_do_connect+0x4a>
 800f6ba:	2b20      	cmp	r3, #32
 800f6bc:	f040 8087 	bne.w	800f7ce <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	6858      	ldr	r0, [r3, #4]
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	6899      	ldr	r1, [r3, #8]
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	899b      	ldrh	r3, [r3, #12]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	f00c fd8e 	bl	801c1f0 <udp_connect>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	75fb      	strb	r3, [r7, #23]
        break;
 800f6d8:	e084      	b.n	800f7e4 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	785b      	ldrb	r3, [r3, #1]
 800f6e0:	2b03      	cmp	r3, #3
 800f6e2:	d102      	bne.n	800f6ea <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800f6e4:	23f7      	movs	r3, #247	; 0xf7
 800f6e6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800f6e8:	e07b      	b.n	800f7e2 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	785b      	ldrb	r3, [r3, #1]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d002      	beq.n	800f6fa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800f6f4:	23f6      	movs	r3, #246	; 0xf6
 800f6f6:	75fb      	strb	r3, [r7, #23]
        break;
 800f6f8:	e073      	b.n	800f7e2 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff fa18 	bl	800eb34 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6858      	ldr	r0, [r3, #4]
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	6899      	ldr	r1, [r3, #8]
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	899a      	ldrh	r2, [r3, #12]
 800f712:	4b38      	ldr	r3, [pc, #224]	; (800f7f4 <lwip_netconn_do_connect+0x164>)
 800f714:	f006 fb6c 	bl	8015df0 <tcp_connect>
 800f718:	4603      	mov	r3, r0
 800f71a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800f71c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d15e      	bne.n	800f7e2 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	7f1b      	ldrb	r3, [r3, #28]
 800f72a:	f003 0302 	and.w	r3, r3, #2
 800f72e:	2b00      	cmp	r3, #0
 800f730:	bf14      	ite	ne
 800f732:	2301      	movne	r3, #1
 800f734:	2300      	moveq	r3, #0
 800f736:	b2db      	uxtb	r3, r3
 800f738:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2203      	movs	r2, #3
 800f740:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d009      	beq.n	800f75c <lwip_netconn_do_connect+0xcc>
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	7f1a      	ldrb	r2, [r3, #28]
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f042 0204 	orr.w	r2, r2, #4
 800f756:	b2d2      	uxtb	r2, r2
 800f758:	771a      	strb	r2, [r3, #28]
 800f75a:	e008      	b.n	800f76e <lwip_netconn_do_connect+0xde>
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	7f1a      	ldrb	r2, [r3, #28]
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f022 0204 	bic.w	r2, r2, #4
 800f76a:	b2d2      	uxtb	r2, r2
 800f76c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800f76e:	7bfb      	ldrb	r3, [r7, #15]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d002      	beq.n	800f77a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800f774:	23fb      	movs	r3, #251	; 0xfb
 800f776:	75fb      	strb	r3, [r7, #23]
        break;
 800f778:	e033      	b.n	800f7e2 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	2b03      	cmp	r3, #3
 800f78a:	d006      	beq.n	800f79a <lwip_netconn_do_connect+0x10a>
 800f78c:	4b1a      	ldr	r3, [pc, #104]	; (800f7f8 <lwip_netconn_do_connect+0x168>)
 800f78e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f792:	491a      	ldr	r1, [pc, #104]	; (800f7fc <lwip_netconn_do_connect+0x16c>)
 800f794:	481a      	ldr	r0, [pc, #104]	; (800f800 <lwip_netconn_do_connect+0x170>)
 800f796:	f012 fa0d 	bl	8021bb4 <iprintf>
              UNLOCK_TCPIP_CORE();
 800f79a:	481a      	ldr	r0, [pc, #104]	; (800f804 <lwip_netconn_do_connect+0x174>)
 800f79c:	f011 fb2d 	bl	8020dfa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	330c      	adds	r3, #12
 800f7a6:	2100      	movs	r1, #0
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f011 fa86 	bl	8020cba <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800f7ae:	4815      	ldr	r0, [pc, #84]	; (800f804 <lwip_netconn_do_connect+0x174>)
 800f7b0:	f011 fb14 	bl	8020ddc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	785b      	ldrb	r3, [r3, #1]
 800f7ba:	2b03      	cmp	r3, #3
 800f7bc:	d116      	bne.n	800f7ec <lwip_netconn_do_connect+0x15c>
 800f7be:	4b0e      	ldr	r3, [pc, #56]	; (800f7f8 <lwip_netconn_do_connect+0x168>)
 800f7c0:	f240 5274 	movw	r2, #1396	; 0x574
 800f7c4:	490d      	ldr	r1, [pc, #52]	; (800f7fc <lwip_netconn_do_connect+0x16c>)
 800f7c6:	480e      	ldr	r0, [pc, #56]	; (800f800 <lwip_netconn_do_connect+0x170>)
 800f7c8:	f012 f9f4 	bl	8021bb4 <iprintf>
              return;
 800f7cc:	e00e      	b.n	800f7ec <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800f7ce:	4b0a      	ldr	r3, [pc, #40]	; (800f7f8 <lwip_netconn_do_connect+0x168>)
 800f7d0:	f240 527d 	movw	r2, #1405	; 0x57d
 800f7d4:	490c      	ldr	r1, [pc, #48]	; (800f808 <lwip_netconn_do_connect+0x178>)
 800f7d6:	480a      	ldr	r0, [pc, #40]	; (800f800 <lwip_netconn_do_connect+0x170>)
 800f7d8:	f012 f9ec 	bl	8021bb4 <iprintf>
 800f7dc:	23fa      	movs	r3, #250	; 0xfa
 800f7de:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800f7e0:	e000      	b.n	800f7e4 <lwip_netconn_do_connect+0x154>
        break;
 800f7e2:	bf00      	nop
    }
  }
  msg->err = err;
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	7dfa      	ldrb	r2, [r7, #23]
 800f7e8:	711a      	strb	r2, [r3, #4]
 800f7ea:	e000      	b.n	800f7ee <lwip_netconn_do_connect+0x15e>
              return;
 800f7ec:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	0800f571 	.word	0x0800f571
 800f7f8:	08025be8 	.word	0x08025be8
 800f7fc:	08025fa8 	.word	0x08025fa8
 800f800:	08025c2c 	.word	0x08025c2c
 800f804:	20017790 	.word	0x20017790
 800f808:	08026030 	.word	0x08026030

0800f80c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f822:	2b20      	cmp	r3, #32
 800f824:	d109      	bne.n	800f83a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f00c fd4d 	bl	801c2cc <udp_disconnect>
    msg->err = ERR_OK;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f838:	e002      	b.n	800f840 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	22fa      	movs	r2, #250	; 0xfa
 800f83e:	711a      	strb	r2, [r3, #4]
}
 800f840:	bf00      	nop
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b086      	sub	sp, #24
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d07f      	beq.n	800f95e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f868:	2b10      	cmp	r3, #16
 800f86a:	d175      	bne.n	800f958 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	785b      	ldrb	r3, [r3, #1]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d165      	bne.n	800f942 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	7d1b      	ldrb	r3, [r3, #20]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800f882:	23fa      	movs	r3, #250	; 0xfa
 800f884:	72fb      	strb	r3, [r7, #11]
 800f886:	e06c      	b.n	800f962 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800f888:	23ff      	movs	r3, #255	; 0xff
 800f88a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	f107 020b 	add.w	r2, r7, #11
 800f896:	7cf9      	ldrb	r1, [r7, #19]
 800f898:	4618      	mov	r0, r3
 800f89a:	f006 f90f 	bl	8015abc <tcp_listen_with_backlog_and_err>
 800f89e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d05d      	beq.n	800f962 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3310      	adds	r3, #16
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f011 f9c0 	bl	8020c32 <sys_mbox_valid>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00b      	beq.n	800f8d0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3310      	adds	r3, #16
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f011 f930 	bl	8020b24 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	3310      	adds	r3, #16
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f011 f9c2 	bl	8020c54 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	3314      	adds	r3, #20
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f011 f9a9 	bl	8020c32 <sys_mbox_valid>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d108      	bne.n	800f8f8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	3314      	adds	r3, #20
 800f8ec:	2106      	movs	r1, #6
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f011 f8fa 	bl	8020ae8 <sys_mbox_new>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800f8f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d118      	bne.n	800f932 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2202      	movs	r2, #2
 800f906:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	685a      	ldr	r2, [r3, #4]
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4619      	mov	r1, r3
 800f91c:	4610      	mov	r0, r2
 800f91e:	f007 f9af 	bl	8016c80 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	4912      	ldr	r1, [pc, #72]	; (800f974 <lwip_netconn_do_listen+0x12c>)
 800f92a:	4618      	mov	r0, r3
 800f92c:	f007 fa20 	bl	8016d70 <tcp_accept>
 800f930:	e017      	b.n	800f962 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f005 feb8 	bl	80156a8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2200      	movs	r2, #0
 800f93e:	605a      	str	r2, [r3, #4]
 800f940:	e00f      	b.n	800f962 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	785b      	ldrb	r3, [r3, #1]
 800f948:	2b02      	cmp	r3, #2
 800f94a:	d102      	bne.n	800f952 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800f94c:	2300      	movs	r3, #0
 800f94e:	72fb      	strb	r3, [r7, #11]
 800f950:	e007      	b.n	800f962 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800f952:	23f5      	movs	r3, #245	; 0xf5
 800f954:	72fb      	strb	r3, [r7, #11]
 800f956:	e004      	b.n	800f962 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800f958:	23f0      	movs	r3, #240	; 0xf0
 800f95a:	72fb      	strb	r3, [r7, #11]
 800f95c:	e001      	b.n	800f962 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800f95e:	23f5      	movs	r3, #245	; 0xf5
 800f960:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800f962:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f96a:	bf00      	nop
 800f96c:	3718      	adds	r7, #24
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	0800eb85 	.word	0x0800eb85

0800f978 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fe fd59 	bl	800e440 <netconn_err>
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d134      	bne.n	800fa04 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d02d      	beq.n	800fa00 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9ae:	2b20      	cmp	r3, #32
 800f9b0:	d123      	bne.n	800f9fa <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10c      	bne.n	800f9d6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4610      	mov	r0, r2
 800f9cc:	f00c f99e 	bl	801bd0c <udp_send>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800f9d4:	e016      	b.n	800fa04 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6858      	ldr	r0, [r3, #4]
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	6819      	ldr	r1, [r3, #0]
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	f103 0208 	add.w	r2, r3, #8
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	899b      	ldrh	r3, [r3, #12]
 800f9f0:	f00c f9c0 	bl	801bd74 <udp_sendto>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]
          break;
 800f9f8:	e004      	b.n	800fa04 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800f9fa:	23f5      	movs	r3, #245	; 0xf5
 800f9fc:	73fb      	strb	r3, [r7, #15]
          break;
 800f9fe:	e001      	b.n	800fa04 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800fa00:	23f5      	movs	r3, #245	; 0xf5
 800fa02:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	7bfa      	ldrb	r2, [r7, #15]
 800fa08:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fa0a:	bf00      	nop
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b086      	sub	sp, #24
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	2200      	movs	r2, #0
 800fa22:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d022      	beq.n	800fa74 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa38:	2b10      	cmp	r3, #16
 800fa3a:	d11b      	bne.n	800fa74 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa48:	d202      	bcs.n	800fa50 <lwip_netconn_do_recv+0x3e>
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	e001      	b.n	800fa54 <lwip_netconn_do_recv+0x42>
 800fa50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa54:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	89fa      	ldrh	r2, [r7, #14]
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f006 f92f 	bl	8015cc4 <tcp_recved>
        remaining -= recved;
 800fa66:	89fb      	ldrh	r3, [r7, #14]
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1e6      	bne.n	800fa42 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fa74:	bf00      	nop
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b088      	sub	sp, #32
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	460b      	mov	r3, r1
 800fa86:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d106      	bne.n	800faa0 <lwip_netconn_do_writemore+0x24>
 800fa92:	4b96      	ldr	r3, [pc, #600]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800fa94:	f240 6273 	movw	r2, #1651	; 0x673
 800fa98:	4995      	ldr	r1, [pc, #596]	; (800fcf0 <lwip_netconn_do_writemore+0x274>)
 800fa9a:	4896      	ldr	r0, [pc, #600]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fa9c:	f012 f88a 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	785b      	ldrb	r3, [r3, #1]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d006      	beq.n	800fab6 <lwip_netconn_do_writemore+0x3a>
 800faa8:	4b90      	ldr	r3, [pc, #576]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800faaa:	f240 6274 	movw	r2, #1652	; 0x674
 800faae:	4992      	ldr	r1, [pc, #584]	; (800fcf8 <lwip_netconn_do_writemore+0x27c>)
 800fab0:	4890      	ldr	r0, [pc, #576]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fab2:	f012 f87f 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a1b      	ldr	r3, [r3, #32]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d106      	bne.n	800facc <lwip_netconn_do_writemore+0x50>
 800fabe:	4b8b      	ldr	r3, [pc, #556]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800fac0:	f240 6275 	movw	r2, #1653	; 0x675
 800fac4:	498d      	ldr	r1, [pc, #564]	; (800fcfc <lwip_netconn_do_writemore+0x280>)
 800fac6:	488b      	ldr	r0, [pc, #556]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fac8:	f012 f874 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d106      	bne.n	800fae2 <lwip_netconn_do_writemore+0x66>
 800fad4:	4b85      	ldr	r3, [pc, #532]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800fad6:	f240 6276 	movw	r2, #1654	; 0x676
 800fada:	4989      	ldr	r1, [pc, #548]	; (800fd00 <lwip_netconn_do_writemore+0x284>)
 800fadc:	4885      	ldr	r0, [pc, #532]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fade:	f012 f869 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	699a      	ldr	r2, [r3, #24]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a1b      	ldr	r3, [r3, #32]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	429a      	cmp	r2, r3
 800faf0:	d306      	bcc.n	800fb00 <lwip_netconn_do_writemore+0x84>
 800faf2:	4b7e      	ldr	r3, [pc, #504]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800faf4:	f240 6277 	movw	r2, #1655	; 0x677
 800faf8:	4982      	ldr	r1, [pc, #520]	; (800fd04 <lwip_netconn_do_writemore+0x288>)
 800fafa:	487e      	ldr	r0, [pc, #504]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fafc:	f012 f85a 	bl	8021bb4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6a1b      	ldr	r3, [r3, #32]
 800fb04:	899b      	ldrh	r3, [r3, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d106      	bne.n	800fb18 <lwip_netconn_do_writemore+0x9c>
 800fb0a:	4b78      	ldr	r3, [pc, #480]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800fb0c:	f240 6279 	movw	r2, #1657	; 0x679
 800fb10:	497d      	ldr	r1, [pc, #500]	; (800fd08 <lwip_netconn_do_writemore+0x28c>)
 800fb12:	4878      	ldr	r0, [pc, #480]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fb14:	f012 f84e 	bl	8021bb4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6a1b      	ldr	r3, [r3, #32]
 800fb1c:	7f1b      	ldrb	r3, [r3, #28]
 800fb1e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7f1b      	ldrb	r3, [r3, #28]
 800fb24:	f003 0302 	and.w	r3, r3, #2
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d104      	bne.n	800fb36 <lwip_netconn_do_writemore+0xba>
 800fb2c:	7ebb      	ldrb	r3, [r7, #26]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <lwip_netconn_do_writemore+0xbe>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <lwip_netconn_do_writemore+0xc0>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a1b      	ldr	r3, [r3, #32]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a1b      	ldr	r3, [r3, #32]
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a1b      	ldr	r3, [r3, #32]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a1b      	ldr	r3, [r3, #32]
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	1ad3      	subs	r3, r2, r3
 800fb60:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb68:	d307      	bcc.n	800fb7a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800fb6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb6e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fb70:	7ebb      	ldrb	r3, [r7, #26]
 800fb72:	f043 0302 	orr.w	r3, r3, #2
 800fb76:	76bb      	strb	r3, [r7, #26]
 800fb78:	e001      	b.n	800fb7e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fb86:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800fb88:	89fa      	ldrh	r2, [r7, #14]
 800fb8a:	8bbb      	ldrh	r3, [r7, #28]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d216      	bcs.n	800fbbe <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800fb90:	89fb      	ldrh	r3, [r7, #14]
 800fb92:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800fb94:	7e3b      	ldrb	r3, [r7, #24]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00d      	beq.n	800fbb6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800fb9a:	8bbb      	ldrh	r3, [r7, #28]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10e      	bne.n	800fbbe <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d102      	bne.n	800fbb0 <lwip_netconn_do_writemore+0x134>
 800fbaa:	f06f 0306 	mvn.w	r3, #6
 800fbae:	e000      	b.n	800fbb2 <lwip_netconn_do_writemore+0x136>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800fbb4:	e07d      	b.n	800fcb2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800fbb6:	7ebb      	ldrb	r3, [r7, #26]
 800fbb8:	f043 0302 	orr.w	r3, r3, #2
 800fbbc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6a1b      	ldr	r3, [r3, #32]
 800fbc2:	691a      	ldr	r2, [r3, #16]
 800fbc4:	8bbb      	ldrh	r3, [r7, #28]
 800fbc6:	441a      	add	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6a1b      	ldr	r3, [r3, #32]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d906      	bls.n	800fbe2 <lwip_netconn_do_writemore+0x166>
 800fbd4:	4b45      	ldr	r3, [pc, #276]	; (800fcec <lwip_netconn_do_writemore+0x270>)
 800fbd6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800fbda:	494c      	ldr	r1, [pc, #304]	; (800fd0c <lwip_netconn_do_writemore+0x290>)
 800fbdc:	4845      	ldr	r0, [pc, #276]	; (800fcf4 <lwip_netconn_do_writemore+0x278>)
 800fbde:	f011 ffe9 	bl	8021bb4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fbe2:	8bbb      	ldrh	r3, [r7, #28]
 800fbe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d103      	bne.n	800fbf4 <lwip_netconn_do_writemore+0x178>
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbf2:	d209      	bcs.n	800fc08 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fbf8:	8bba      	ldrh	r2, [r7, #28]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d10b      	bne.n	800fc16 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a1b      	ldr	r3, [r3, #32]
 800fc02:	899b      	ldrh	r3, [r3, #12]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d906      	bls.n	800fc16 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fc0c:	7ebb      	ldrb	r3, [r7, #26]
 800fc0e:	f043 0302 	orr.w	r3, r3, #2
 800fc12:	76bb      	strb	r3, [r7, #26]
 800fc14:	e001      	b.n	800fc1a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6858      	ldr	r0, [r3, #4]
 800fc1e:	7ebb      	ldrb	r3, [r7, #26]
 800fc20:	8bba      	ldrh	r2, [r7, #28]
 800fc22:	6979      	ldr	r1, [r7, #20]
 800fc24:	f009 ff6c 	bl	8019b00 <tcp_write>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800fc2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d12c      	bne.n	800fc8e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6a1b      	ldr	r3, [r3, #32]
 800fc38:	6999      	ldr	r1, [r3, #24]
 800fc3a:	8bba      	ldrh	r2, [r7, #28]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6a1b      	ldr	r3, [r3, #32]
 800fc40:	440a      	add	r2, r1
 800fc42:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6a1b      	ldr	r3, [r3, #32]
 800fc48:	6919      	ldr	r1, [r3, #16]
 800fc4a:	8bba      	ldrh	r2, [r7, #28]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	440a      	add	r2, r1
 800fc52:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6a1b      	ldr	r3, [r3, #32]
 800fc58:	691a      	ldr	r2, [r3, #16]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d113      	bne.n	800fc8e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a1b      	ldr	r3, [r3, #32]
 800fc6a:	899a      	ldrh	r2, [r3, #12]
 800fc6c:	3a01      	subs	r2, #1
 800fc6e:	b292      	uxth	r2, r2
 800fc70:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	899b      	ldrh	r3, [r3, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d008      	beq.n	800fc8e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6a1b      	ldr	r3, [r3, #32]
 800fc80:	689a      	ldr	r2, [r3, #8]
 800fc82:	3208      	adds	r2, #8
 800fc84:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a1b      	ldr	r3, [r3, #32]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800fc8e:	7e7b      	ldrb	r3, [r7, #25]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d004      	beq.n	800fc9e <lwip_netconn_do_writemore+0x222>
 800fc94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	f43f af50 	beq.w	800fb3e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800fc9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d004      	beq.n	800fcb0 <lwip_netconn_do_writemore+0x234>
 800fca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fcaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcae:	d146      	bne.n	800fd3e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800fcb0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800fcb2:	7e3b      	ldrb	r3, [r7, #24]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d02b      	beq.n	800fd10 <lwip_netconn_do_writemore+0x294>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6a1b      	ldr	r3, [r3, #32]
 800fcbc:	699a      	ldr	r2, [r3, #24]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6a1b      	ldr	r3, [r3, #32]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d223      	bcs.n	800fd10 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d005      	beq.n	800fcdc <lwip_netconn_do_writemore+0x260>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	2103      	movs	r1, #3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	7f1b      	ldrb	r3, [r3, #28]
 800fce0:	f043 0310 	orr.w	r3, r3, #16
 800fce4:	b2da      	uxtb	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	771a      	strb	r2, [r3, #28]
 800fcea:	e028      	b.n	800fd3e <lwip_netconn_do_writemore+0x2c2>
 800fcec:	08025be8 	.word	0x08025be8
 800fcf0:	08025d40 	.word	0x08025d40
 800fcf4:	08025c2c 	.word	0x08025c2c
 800fcf8:	08026048 	.word	0x08026048
 800fcfc:	08025d50 	.word	0x08025d50
 800fd00:	08026068 	.word	0x08026068
 800fd04:	08026080 	.word	0x08026080
 800fd08:	080260c0 	.word	0x080260c0
 800fd0c:	080260e8 	.word	0x080260e8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fd18:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fd1c:	d305      	bcc.n	800fd2a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fd26:	2b04      	cmp	r3, #4
 800fd28:	d909      	bls.n	800fd3e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d005      	beq.n	800fd3e <lwip_netconn_do_writemore+0x2c2>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd36:	2200      	movs	r2, #0
 800fd38:	2103      	movs	r1, #3
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800fd3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d11d      	bne.n	800fd82 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	699a      	ldr	r2, [r3, #24]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6a1b      	ldr	r3, [r3, #32]
 800fd50:	695b      	ldr	r3, [r3, #20]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d002      	beq.n	800fd5c <lwip_netconn_do_writemore+0x2e0>
 800fd56:	7e3b      	ldrb	r3, [r7, #24]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f00a fd13 	bl	801a790 <tcp_output>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800fd6e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fd72:	f113 0f04 	cmn.w	r3, #4
 800fd76:	d12c      	bne.n	800fdd2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fd78:	7b3b      	ldrb	r3, [r7, #12]
 800fd7a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	76fb      	strb	r3, [r7, #27]
 800fd80:	e027      	b.n	800fdd2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800fd82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd8a:	d120      	bne.n	800fdce <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f00a fcfd 	bl	801a790 <tcp_output>
 800fd96:	4603      	mov	r3, r0
 800fd98:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800fd9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fd9e:	f113 0f04 	cmn.w	r3, #4
 800fda2:	d104      	bne.n	800fdae <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fda4:	7b7b      	ldrb	r3, [r7, #13]
 800fda6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	76fb      	strb	r3, [r7, #27]
 800fdac:	e011      	b.n	800fdd2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800fdae:	7e3b      	ldrb	r3, [r7, #24]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00e      	beq.n	800fdd2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a1b      	ldr	r3, [r3, #32]
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d102      	bne.n	800fdc4 <lwip_netconn_do_writemore+0x348>
 800fdbe:	f06f 0306 	mvn.w	r3, #6
 800fdc2:	e000      	b.n	800fdc6 <lwip_netconn_do_writemore+0x34a>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	76fb      	strb	r3, [r7, #27]
 800fdcc:	e001      	b.n	800fdd2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800fdd2:	7efb      	ldrb	r3, [r7, #27]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d015      	beq.n	800fe04 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a1b      	ldr	r3, [r3, #32]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	330c      	adds	r3, #12
 800fde0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	7ffa      	ldrb	r2, [r7, #31]
 800fde8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fdf6:	78fb      	ldrb	r3, [r7, #3]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d006      	beq.n	800fe0a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800fdfc:	68b8      	ldr	r0, [r7, #8]
 800fdfe:	f010 ff8d 	bl	8020d1c <sys_sem_signal>
 800fe02:	e002      	b.n	800fe0a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800fe04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe08:	e000      	b.n	800fe0c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800fe0a:	2300      	movs	r3, #0
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3720      	adds	r7, #32
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fe fb0b 	bl	800e440 <netconn_err>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fe2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d166      	bne.n	800ff04 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe40:	2b10      	cmp	r3, #16
 800fe42:	d15d      	bne.n	800ff00 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	785b      	ldrb	r3, [r3, #1]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d002      	beq.n	800fe54 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800fe4e:	23fb      	movs	r3, #251	; 0xfb
 800fe50:	73fb      	strb	r3, [r7, #15]
 800fe52:	e057      	b.n	800ff04 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d04d      	beq.n	800fefa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2201      	movs	r2, #1
 800fe64:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d006      	beq.n	800fe7e <lwip_netconn_do_write+0x6a>
 800fe70:	4b28      	ldr	r3, [pc, #160]	; (800ff14 <lwip_netconn_do_write+0x100>)
 800fe72:	f240 7223 	movw	r2, #1827	; 0x723
 800fe76:	4928      	ldr	r1, [pc, #160]	; (800ff18 <lwip_netconn_do_write+0x104>)
 800fe78:	4828      	ldr	r0, [pc, #160]	; (800ff1c <lwip_netconn_do_write+0x108>)
 800fe7a:	f011 fe9b 	bl	8021bb4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d106      	bne.n	800fe94 <lwip_netconn_do_write+0x80>
 800fe86:	4b23      	ldr	r3, [pc, #140]	; (800ff14 <lwip_netconn_do_write+0x100>)
 800fe88:	f240 7224 	movw	r2, #1828	; 0x724
 800fe8c:	4924      	ldr	r1, [pc, #144]	; (800ff20 <lwip_netconn_do_write+0x10c>)
 800fe8e:	4823      	ldr	r0, [pc, #140]	; (800ff1c <lwip_netconn_do_write+0x108>)
 800fe90:	f011 fe90 	bl	8021bb4 <iprintf>
        msg->conn->current_msg = msg;
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68ba      	ldr	r2, [r7, #8]
 800fe9a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2100      	movs	r1, #0
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff fdea 	bl	800fa7c <lwip_netconn_do_writemore>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d02e      	beq.n	800ff0c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	785b      	ldrb	r3, [r3, #1]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d006      	beq.n	800fec6 <lwip_netconn_do_write+0xb2>
 800feb8:	4b16      	ldr	r3, [pc, #88]	; (800ff14 <lwip_netconn_do_write+0x100>)
 800feba:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800febe:	4919      	ldr	r1, [pc, #100]	; (800ff24 <lwip_netconn_do_write+0x110>)
 800fec0:	4816      	ldr	r0, [pc, #88]	; (800ff1c <lwip_netconn_do_write+0x108>)
 800fec2:	f011 fe77 	bl	8021bb4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800fec6:	4818      	ldr	r0, [pc, #96]	; (800ff28 <lwip_netconn_do_write+0x114>)
 800fec8:	f010 ff97 	bl	8020dfa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	330c      	adds	r3, #12
 800fed2:	2100      	movs	r1, #0
 800fed4:	4618      	mov	r0, r3
 800fed6:	f010 fef0 	bl	8020cba <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800feda:	4813      	ldr	r0, [pc, #76]	; (800ff28 <lwip_netconn_do_write+0x114>)
 800fedc:	f010 ff7e 	bl	8020ddc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	785b      	ldrb	r3, [r3, #1]
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d110      	bne.n	800ff0c <lwip_netconn_do_write+0xf8>
 800feea:	4b0a      	ldr	r3, [pc, #40]	; (800ff14 <lwip_netconn_do_write+0x100>)
 800feec:	f240 722c 	movw	r2, #1836	; 0x72c
 800fef0:	490c      	ldr	r1, [pc, #48]	; (800ff24 <lwip_netconn_do_write+0x110>)
 800fef2:	480a      	ldr	r0, [pc, #40]	; (800ff1c <lwip_netconn_do_write+0x108>)
 800fef4:	f011 fe5e 	bl	8021bb4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800fef8:	e008      	b.n	800ff0c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800fefa:	23f5      	movs	r3, #245	; 0xf5
 800fefc:	73fb      	strb	r3, [r7, #15]
 800fefe:	e001      	b.n	800ff04 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ff00:	23fa      	movs	r3, #250	; 0xfa
 800ff02:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	7bfa      	ldrb	r2, [r7, #15]
 800ff08:	711a      	strb	r2, [r3, #4]
 800ff0a:	e000      	b.n	800ff0e <lwip_netconn_do_write+0xfa>
        return;
 800ff0c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ff0e:	3710      	adds	r7, #16
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	08025be8 	.word	0x08025be8
 800ff18:	08025f8c 	.word	0x08025f8c
 800ff1c:	08025c2c 	.word	0x08025c2c
 800ff20:	08026114 	.word	0x08026114
 800ff24:	08025fa8 	.word	0x08025fa8
 800ff28:	20017790 	.word	0x20017790

0800ff2c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d06b      	beq.n	801001a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	7c1b      	ldrb	r3, [r3, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d007      	beq.n	800ff5a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	685a      	ldr	r2, [r3, #4]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	6812      	ldr	r2, [r2, #0]
 800ff56:	601a      	str	r2, [r3, #0]
 800ff58:	e006      	b.n	800ff68 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	685a      	ldr	r2, [r3, #4]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	689b      	ldr	r3, [r3, #8]
 800ff64:	6852      	ldr	r2, [r2, #4]
 800ff66:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff78:	2b10      	cmp	r3, #16
 800ff7a:	d021      	beq.n	800ffc0 <lwip_netconn_do_getaddr+0x94>
 800ff7c:	2b20      	cmp	r3, #32
 800ff7e:	d144      	bne.n	801000a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	7c1b      	ldrb	r3, [r3, #16]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d007      	beq.n	800ff98 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	685a      	ldr	r2, [r3, #4]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	8a52      	ldrh	r2, [r2, #18]
 800ff94:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800ff96:	e044      	b.n	8010022 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	7c1b      	ldrb	r3, [r3, #16]
 800ffa0:	f003 0304 	and.w	r3, r3, #4
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d103      	bne.n	800ffb0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	22f5      	movs	r2, #245	; 0xf5
 800ffac:	711a      	strb	r2, [r3, #4]
        break;
 800ffae:	e038      	b.n	8010022 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	685a      	ldr	r2, [r3, #4]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	8a92      	ldrh	r2, [r2, #20]
 800ffbc:	801a      	strh	r2, [r3, #0]
        break;
 800ffbe:	e030      	b.n	8010022 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	7c1b      	ldrb	r3, [r3, #16]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10f      	bne.n	800ffe8 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d005      	beq.n	800ffe0 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	7d1b      	ldrb	r3, [r3, #20]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d103      	bne.n	800ffe8 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	22f5      	movs	r2, #245	; 0xf5
 800ffe4:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800ffe6:	e01c      	b.n	8010022 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	7c1b      	ldrb	r3, [r3, #16]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d004      	beq.n	800fffa <lwip_netconn_do_getaddr+0xce>
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	8adb      	ldrh	r3, [r3, #22]
 800fff8:	e003      	b.n	8010002 <lwip_netconn_do_getaddr+0xd6>
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	8b1b      	ldrh	r3, [r3, #24]
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	68d2      	ldr	r2, [r2, #12]
 8010006:	8013      	strh	r3, [r2, #0]
        break;
 8010008:	e00b      	b.n	8010022 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 801000a:	4b08      	ldr	r3, [pc, #32]	; (801002c <lwip_netconn_do_getaddr+0x100>)
 801000c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010010:	4907      	ldr	r1, [pc, #28]	; (8010030 <lwip_netconn_do_getaddr+0x104>)
 8010012:	4808      	ldr	r0, [pc, #32]	; (8010034 <lwip_netconn_do_getaddr+0x108>)
 8010014:	f011 fdce 	bl	8021bb4 <iprintf>
        break;
 8010018:	e003      	b.n	8010022 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	22f5      	movs	r2, #245	; 0xf5
 801001e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010020:	bf00      	nop
 8010022:	bf00      	nop
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	08025be8 	.word	0x08025be8
 8010030:	08026128 	.word	0x08026128
 8010034:	08025c2c 	.word	0x08025c2c

08010038 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	785b      	ldrb	r3, [r3, #1]
 801004a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d069      	beq.n	801012a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010060:	2b10      	cmp	r3, #16
 8010062:	d162      	bne.n	801012a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010068:	2b03      	cmp	r3, #3
 801006a:	d002      	beq.n	8010072 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801006c:	7afb      	ldrb	r3, [r7, #11]
 801006e:	2b02      	cmp	r3, #2
 8010070:	d05b      	beq.n	801012a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010072:	7afb      	ldrb	r3, [r7, #11]
 8010074:	2b03      	cmp	r3, #3
 8010076:	d103      	bne.n	8010080 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	22f5      	movs	r2, #245	; 0xf5
 801007c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801007e:	e059      	b.n	8010134 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010080:	7afb      	ldrb	r3, [r7, #11]
 8010082:	2b01      	cmp	r3, #1
 8010084:	d103      	bne.n	801008e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	22fb      	movs	r2, #251	; 0xfb
 801008a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801008c:	e052      	b.n	8010134 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	7a1b      	ldrb	r3, [r3, #8]
 8010092:	f003 0301 	and.w	r3, r3, #1
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe ff64 	bl	800ef6c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d006      	beq.n	80100bc <lwip_netconn_do_close+0x84>
 80100ae:	4b23      	ldr	r3, [pc, #140]	; (801013c <lwip_netconn_do_close+0x104>)
 80100b0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80100b4:	4922      	ldr	r1, [pc, #136]	; (8010140 <lwip_netconn_do_close+0x108>)
 80100b6:	4823      	ldr	r0, [pc, #140]	; (8010144 <lwip_netconn_do_close+0x10c>)
 80100b8:	f011 fd7c 	bl	8021bb4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2204      	movs	r2, #4
 80100c2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2100      	movs	r1, #0
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fe ffc8 	bl	800f068 <lwip_netconn_do_close_internal>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d029      	beq.n	8010132 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	785b      	ldrb	r3, [r3, #1]
 80100e4:	2b04      	cmp	r3, #4
 80100e6:	d006      	beq.n	80100f6 <lwip_netconn_do_close+0xbe>
 80100e8:	4b14      	ldr	r3, [pc, #80]	; (801013c <lwip_netconn_do_close+0x104>)
 80100ea:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80100ee:	4916      	ldr	r1, [pc, #88]	; (8010148 <lwip_netconn_do_close+0x110>)
 80100f0:	4814      	ldr	r0, [pc, #80]	; (8010144 <lwip_netconn_do_close+0x10c>)
 80100f2:	f011 fd5f 	bl	8021bb4 <iprintf>
        UNLOCK_TCPIP_CORE();
 80100f6:	4815      	ldr	r0, [pc, #84]	; (801014c <lwip_netconn_do_close+0x114>)
 80100f8:	f010 fe7f 	bl	8020dfa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	330c      	adds	r3, #12
 8010102:	2100      	movs	r1, #0
 8010104:	4618      	mov	r0, r3
 8010106:	f010 fdd8 	bl	8020cba <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801010a:	4810      	ldr	r0, [pc, #64]	; (801014c <lwip_netconn_do_close+0x114>)
 801010c:	f010 fe66 	bl	8020ddc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	785b      	ldrb	r3, [r3, #1]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00b      	beq.n	8010132 <lwip_netconn_do_close+0xfa>
 801011a:	4b08      	ldr	r3, [pc, #32]	; (801013c <lwip_netconn_do_close+0x104>)
 801011c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010120:	4909      	ldr	r1, [pc, #36]	; (8010148 <lwip_netconn_do_close+0x110>)
 8010122:	4808      	ldr	r0, [pc, #32]	; (8010144 <lwip_netconn_do_close+0x10c>)
 8010124:	f011 fd46 	bl	8021bb4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010128:	e003      	b.n	8010132 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	22f5      	movs	r2, #245	; 0xf5
 801012e:	711a      	strb	r2, [r3, #4]
 8010130:	e000      	b.n	8010134 <lwip_netconn_do_close+0xfc>
      return;
 8010132:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010134:	3710      	adds	r7, #16
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	08025be8 	.word	0x08025be8
 8010140:	08025f8c 	.word	0x08025f8c
 8010144:	08025c2c 	.word	0x08025c2c
 8010148:	08025fa8 	.word	0x08025fa8
 801014c:	20017790 	.word	0x20017790

08010150 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d104      	bne.n	8010170 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	22fa      	movs	r2, #250	; 0xfa
 801016c:	701a      	strb	r2, [r3, #0]
 801016e:	e008      	b.n	8010182 <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	6812      	ldr	r2, [r2, #0]
 8010180:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	4618      	mov	r0, r3
 8010188:	f010 fdc8 	bl	8020d1c <sys_sem_signal>
}
 801018c:	bf00      	nop
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 8010194:	b590      	push	{r4, r7, lr}
 8010196:	b087      	sub	sp, #28
 8010198:	af02      	add	r7, sp, #8
 801019a:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 80101a0:	2300      	movs	r3, #0
 80101a2:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6818      	ldr	r0, [r3, #0]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6859      	ldr	r1, [r3, #4]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	68dc      	ldr	r4, [r3, #12]
 80101b0:	7afb      	ldrb	r3, [r7, #11]
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	4a15      	ldr	r2, [pc, #84]	; (801020c <lwip_netconn_do_gethostbyname+0x78>)
 80101b8:	f003 f83e 	bl	8013238 <dns_gethostbyname_addrtype>
 80101bc:	4603      	mov	r3, r0
 80101be:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	f993 3000 	ldrsb.w	r3, [r3]
 80101c8:	f113 0f05 	cmn.w	r3, #5
 80101cc:	d119      	bne.n	8010202 <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 80101ce:	4810      	ldr	r0, [pc, #64]	; (8010210 <lwip_netconn_do_gethostbyname+0x7c>)
 80101d0:	f010 fe13 	bl	8020dfa <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	2100      	movs	r1, #0
 80101da:	4618      	mov	r0, r3
 80101dc:	f010 fd6d 	bl	8020cba <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 80101e0:	480b      	ldr	r0, [pc, #44]	; (8010210 <lwip_netconn_do_gethostbyname+0x7c>)
 80101e2:	f010 fdfb 	bl	8020ddc <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	f993 3000 	ldrsb.w	r3, [r3]
 80101ee:	f113 0f05 	cmn.w	r3, #5
 80101f2:	d106      	bne.n	8010202 <lwip_netconn_do_gethostbyname+0x6e>
 80101f4:	4b07      	ldr	r3, [pc, #28]	; (8010214 <lwip_netconn_do_gethostbyname+0x80>)
 80101f6:	f640 0271 	movw	r2, #2161	; 0x871
 80101fa:	4907      	ldr	r1, [pc, #28]	; (8010218 <lwip_netconn_do_gethostbyname+0x84>)
 80101fc:	4807      	ldr	r0, [pc, #28]	; (801021c <lwip_netconn_do_gethostbyname+0x88>)
 80101fe:	f011 fcd9 	bl	8021bb4 <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010202:	bf00      	nop
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	bd90      	pop	{r4, r7, pc}
 801020a:	bf00      	nop
 801020c:	08010151 	.word	0x08010151
 8010210:	20017790 	.word	0x20017790
 8010214:	08025be8 	.word	0x08025be8
 8010218:	08026140 	.word	0x08026140
 801021c:	08025c2c 	.word	0x08025c2c

08010220 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 801022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801022e:	2b00      	cmp	r3, #0
 8010230:	dc04      	bgt.n	801023c <err_to_errno+0x1c>
 8010232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010236:	f113 0f10 	cmn.w	r3, #16
 801023a:	da01      	bge.n	8010240 <err_to_errno+0x20>
    return EIO;
 801023c:	2305      	movs	r3, #5
 801023e:	e005      	b.n	801024c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8010240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010244:	425b      	negs	r3, r3
 8010246:	4a04      	ldr	r2, [pc, #16]	; (8010258 <err_to_errno+0x38>)
 8010248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801024c:	4618      	mov	r0, r3
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr
 8010258:	0802980c 	.word	0x0802980c

0801025c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d013      	beq.n	8010292 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00b      	beq.n	801028a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4618      	mov	r0, r3
 8010278:	f004 fbe0 	bl	8014a3c <pbuf_free>
      buf->p = buf->ptr = NULL;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	605a      	str	r2, [r3, #4]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685a      	ldr	r2, [r3, #4]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801028a:	6879      	ldr	r1, [r7, #4]
 801028c:	2006      	movs	r0, #6
 801028e:	f003 fcf3 	bl	8013c78 <memp_free>
  }
}
 8010292:	bf00      	nop
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
	...

0801029c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <netbuf_free+0x1c>
 80102aa:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <netbuf_free+0x44>)
 80102ac:	2281      	movs	r2, #129	; 0x81
 80102ae:	490d      	ldr	r1, [pc, #52]	; (80102e4 <netbuf_free+0x48>)
 80102b0:	480d      	ldr	r0, [pc, #52]	; (80102e8 <netbuf_free+0x4c>)
 80102b2:	f011 fc7f 	bl	8021bb4 <iprintf>
 80102b6:	e00f      	b.n	80102d8 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d004      	beq.n	80102ca <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f004 fbb9 	bl	8014a3c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	605a      	str	r2, [r3, #4]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	08026168 	.word	0x08026168
 80102e4:	08026204 	.word	0x08026204
 80102e8:	080261b8 	.word	0x080261b8

080102ec <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	4613      	mov	r3, r2
 80102f8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d108      	bne.n	8010312 <netbuf_ref+0x26>
 8010300:	4b1c      	ldr	r3, [pc, #112]	; (8010374 <netbuf_ref+0x88>)
 8010302:	2299      	movs	r2, #153	; 0x99
 8010304:	491c      	ldr	r1, [pc, #112]	; (8010378 <netbuf_ref+0x8c>)
 8010306:	481d      	ldr	r0, [pc, #116]	; (801037c <netbuf_ref+0x90>)
 8010308:	f011 fc54 	bl	8021bb4 <iprintf>
 801030c:	f06f 030f 	mvn.w	r3, #15
 8010310:	e02b      	b.n	801036a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d004      	beq.n	8010324 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4618      	mov	r0, r3
 8010320:	f004 fb8c 	bl	8014a3c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8010324:	2241      	movs	r2, #65	; 0x41
 8010326:	2100      	movs	r1, #0
 8010328:	2036      	movs	r0, #54	; 0x36
 801032a:	f004 f871 	bl	8014410 <pbuf_alloc>
 801032e:	4602      	mov	r2, r0
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d105      	bne.n	8010348 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2200      	movs	r2, #0
 8010340:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8010342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010346:	e010      	b.n	801036a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	88fa      	ldrh	r2, [r7, #6]
 8010356:	811a      	strh	r2, [r3, #8]
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	6812      	ldr	r2, [r2, #0]
 801035c:	891b      	ldrh	r3, [r3, #8]
 801035e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	08026168 	.word	0x08026168
 8010378:	08026220 	.word	0x08026220
 801037c:	080261b8 	.word	0x080261b8

08010380 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent *
lwip_gethostbyname(const char *name)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 8010388:	f107 0308 	add.w	r3, r7, #8
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7fe f872 	bl	800e478 <netconn_gethostbyname>
 8010394:	4603      	mov	r3, r0
 8010396:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d004      	beq.n	80103aa <lwip_gethostbyname+0x2a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 80103a0:	4b17      	ldr	r3, [pc, #92]	; (8010400 <lwip_gethostbyname+0x80>)
 80103a2:	22d2      	movs	r2, #210	; 0xd2
 80103a4:	601a      	str	r2, [r3, #0]
    return NULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	e025      	b.n	80103f6 <lwip_gethostbyname+0x76>
  }

  /* fill hostent */
  s_hostent_addr = addr;
 80103aa:	4a16      	ldr	r2, [pc, #88]	; (8010404 <lwip_gethostbyname+0x84>)
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	6013      	str	r3, [r2, #0]
  s_phostent_addr[0] = &s_hostent_addr;
 80103b0:	4b15      	ldr	r3, [pc, #84]	; (8010408 <lwip_gethostbyname+0x88>)
 80103b2:	4a14      	ldr	r2, [pc, #80]	; (8010404 <lwip_gethostbyname+0x84>)
 80103b4:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 80103b6:	4b14      	ldr	r3, [pc, #80]	; (8010408 <lwip_gethostbyname+0x88>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	605a      	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 80103bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103c0:	6879      	ldr	r1, [r7, #4]
 80103c2:	4812      	ldr	r0, [pc, #72]	; (801040c <lwip_gethostbyname+0x8c>)
 80103c4:	f011 fe28 	bl	8022018 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 80103c8:	4b10      	ldr	r3, [pc, #64]	; (801040c <lwip_gethostbyname+0x8c>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 80103d0:	4b0f      	ldr	r3, [pc, #60]	; (8010410 <lwip_gethostbyname+0x90>)
 80103d2:	4a0e      	ldr	r2, [pc, #56]	; (801040c <lwip_gethostbyname+0x8c>)
 80103d4:	601a      	str	r2, [r3, #0]
  s_aliases = NULL;
 80103d6:	4b0f      	ldr	r3, [pc, #60]	; (8010414 <lwip_gethostbyname+0x94>)
 80103d8:	2200      	movs	r2, #0
 80103da:	601a      	str	r2, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 80103dc:	4b0c      	ldr	r3, [pc, #48]	; (8010410 <lwip_gethostbyname+0x90>)
 80103de:	4a0d      	ldr	r2, [pc, #52]	; (8010414 <lwip_gethostbyname+0x94>)
 80103e0:	605a      	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
 80103e2:	4b0b      	ldr	r3, [pc, #44]	; (8010410 <lwip_gethostbyname+0x90>)
 80103e4:	2202      	movs	r2, #2
 80103e6:	609a      	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
 80103e8:	4b09      	ldr	r3, [pc, #36]	; (8010410 <lwip_gethostbyname+0x90>)
 80103ea:	2204      	movs	r2, #4
 80103ec:	60da      	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char **)&s_phostent_addr;
 80103ee:	4b08      	ldr	r3, [pc, #32]	; (8010410 <lwip_gethostbyname+0x90>)
 80103f0:	4a05      	ldr	r2, [pc, #20]	; (8010408 <lwip_gethostbyname+0x88>)
 80103f2:	611a      	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
 80103f4:	4b06      	ldr	r3, [pc, #24]	; (8010410 <lwip_gethostbyname+0x90>)
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	2001778c 	.word	0x2001778c
 8010404:	20013d04 	.word	0x20013d04
 8010408:	20013d08 	.word	0x20013d08
 801040c:	20013d10 	.word	0x20013d10
 8010410:	20013e14 	.word	0x20013e14
 8010414:	20013e28 	.word	0x20013e28

08010418 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2b00      	cmp	r3, #0
 8010428:	db02      	blt.n	8010430 <tryget_socket_unconn_nouse+0x18>
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2b03      	cmp	r3, #3
 801042e:	dd01      	ble.n	8010434 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8010430:	2300      	movs	r3, #0
 8010432:	e003      	b.n	801043c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	011b      	lsls	r3, r3, #4
 8010438:	4a03      	ldr	r2, [pc, #12]	; (8010448 <tryget_socket_unconn_nouse+0x30>)
 801043a:	4413      	add	r3, r2
}
 801043c:	4618      	mov	r0, r3
 801043e:	3714      	adds	r7, #20
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	20013e2c 	.word	0x20013e2c

0801044c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff ffdf 	bl	8010418 <tryget_socket_unconn_nouse>
 801045a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 801045c:	68fb      	ldr	r3, [r7, #12]
}
 801045e:	4618      	mov	r0, r3
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b084      	sub	sp, #16
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7ff ffd2 	bl	8010418 <tryget_socket_unconn_nouse>
 8010474:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 8010476:	68fb      	ldr	r3, [r7, #12]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff ffdf 	bl	801044c <tryget_socket_unconn>
 801048e:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d005      	beq.n	80104a2 <tryget_socket+0x22>
    if (sock->conn) {
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d001      	beq.n	80104a2 <tryget_socket+0x22>
      return sock;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	e000      	b.n	80104a4 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80104a2:	2300      	movs	r3, #0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7ff ffe3 	bl	8010480 <tryget_socket>
 80104ba:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d104      	bne.n	80104cc <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80104c2:	4b05      	ldr	r3, [pc, #20]	; (80104d8 <get_socket+0x2c>)
 80104c4:	2209      	movs	r2, #9
 80104c6:	601a      	str	r2, [r3, #0]
    return NULL;
 80104c8:	2300      	movs	r3, #0
 80104ca:	e000      	b.n	80104ce <get_socket+0x22>
  }
  return sock;
 80104cc:	68fb      	ldr	r3, [r7, #12]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	2001b1d8 	.word	0x2001b1d8

080104dc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80104e6:	2300      	movs	r3, #0
 80104e8:	60fb      	str	r3, [r7, #12]
 80104ea:	e052      	b.n	8010592 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 80104ec:	f010 fcb0 	bl	8020e50 <sys_arch_protect>
 80104f0:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 80104f2:	4a2c      	ldr	r2, [pc, #176]	; (80105a4 <alloc_socket+0xc8>)
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	4413      	add	r3, r2
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d142      	bne.n	8010586 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8010500:	4a28      	ldr	r2, [pc, #160]	; (80105a4 <alloc_socket+0xc8>)
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	011b      	lsls	r3, r3, #4
 8010506:	4413      	add	r3, r2
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 801050c:	68b8      	ldr	r0, [r7, #8]
 801050e:	f010 fcad 	bl	8020e6c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8010512:	4a24      	ldr	r2, [pc, #144]	; (80105a4 <alloc_socket+0xc8>)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	011b      	lsls	r3, r3, #4
 8010518:	4413      	add	r3, r2
 801051a:	3304      	adds	r3, #4
 801051c:	2200      	movs	r2, #0
 801051e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8010520:	4a20      	ldr	r2, [pc, #128]	; (80105a4 <alloc_socket+0xc8>)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	011b      	lsls	r3, r3, #4
 8010526:	4413      	add	r3, r2
 8010528:	330e      	adds	r3, #14
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d006      	beq.n	801053e <alloc_socket+0x62>
 8010530:	4b1d      	ldr	r3, [pc, #116]	; (80105a8 <alloc_socket+0xcc>)
 8010532:	f240 220e 	movw	r2, #526	; 0x20e
 8010536:	491d      	ldr	r1, [pc, #116]	; (80105ac <alloc_socket+0xd0>)
 8010538:	481d      	ldr	r0, [pc, #116]	; (80105b0 <alloc_socket+0xd4>)
 801053a:	f011 fb3b 	bl	8021bb4 <iprintf>
      sockets[i].rcvevent   = 0;
 801053e:	4a19      	ldr	r2, [pc, #100]	; (80105a4 <alloc_socket+0xc8>)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	011b      	lsls	r3, r3, #4
 8010544:	4413      	add	r3, r2
 8010546:	3308      	adds	r3, #8
 8010548:	2200      	movs	r2, #0
 801054a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010554:	2b10      	cmp	r3, #16
 8010556:	d102      	bne.n	801055e <alloc_socket+0x82>
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d001      	beq.n	8010562 <alloc_socket+0x86>
 801055e:	2301      	movs	r3, #1
 8010560:	e000      	b.n	8010564 <alloc_socket+0x88>
 8010562:	2300      	movs	r3, #0
 8010564:	b299      	uxth	r1, r3
 8010566:	4a0f      	ldr	r2, [pc, #60]	; (80105a4 <alloc_socket+0xc8>)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	011b      	lsls	r3, r3, #4
 801056c:	4413      	add	r3, r2
 801056e:	330a      	adds	r3, #10
 8010570:	460a      	mov	r2, r1
 8010572:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8010574:	4a0b      	ldr	r2, [pc, #44]	; (80105a4 <alloc_socket+0xc8>)
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	011b      	lsls	r3, r3, #4
 801057a:	4413      	add	r3, r2
 801057c:	330c      	adds	r3, #12
 801057e:	2200      	movs	r2, #0
 8010580:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	e00a      	b.n	801059c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8010586:	68b8      	ldr	r0, [r7, #8]
 8010588:	f010 fc70 	bl	8020e6c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	3301      	adds	r3, #1
 8010590:	60fb      	str	r3, [r7, #12]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2b03      	cmp	r3, #3
 8010596:	dda9      	ble.n	80104ec <alloc_socket+0x10>
  }
  return -1;
 8010598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801059c:	4618      	mov	r0, r3
 801059e:	3710      	adds	r7, #16
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	20013e2c 	.word	0x20013e2c
 80105a8:	08026300 	.word	0x08026300
 80105ac:	08026334 	.word	0x08026334
 80105b0:	08026354 	.word	0x08026354

080105b4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
 80105c0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	6852      	ldr	r2, [r2, #4]
 80105c8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2200      	movs	r2, #0
 80105ce:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2200      	movs	r2, #0
 80105dc:	601a      	str	r2, [r3, #0]
  return 1;
 80105de:	2301      	movs	r3, #1
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3714      	adds	r7, #20
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00d      	beq.n	801061c <free_socket_free_elements+0x30>
    if (is_tcp) {
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d005      	beq.n	8010612 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4618      	mov	r0, r3
 801060c:	f004 fa16 	bl	8014a3c <pbuf_free>
 8010610:	e004      	b.n	801061c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4618      	mov	r0, r3
 8010618:	f7ff fe20 	bl	801025c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d002      	beq.n	8010628 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8010622:	68b8      	ldr	r0, [r7, #8]
 8010624:	f7fd fa1a 	bl	800da5c <netconn_delete>
  }
}
 8010628:	bf00      	nop
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 801063a:	f010 fc09 	bl	8020e50 <sys_arch_protect>
 801063e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8010640:	f107 0308 	add.w	r3, r7, #8
 8010644:	f107 020c 	add.w	r2, r7, #12
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7ff ffb2 	bl	80105b4 <free_socket_locked>
 8010650:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8010652:	6978      	ldr	r0, [r7, #20]
 8010654:	f010 fc0a 	bl	8020e6c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d006      	beq.n	801066c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f107 0208 	add.w	r2, r7, #8
 8010664:	4619      	mov	r1, r3
 8010666:	6838      	ldr	r0, [r7, #0]
 8010668:	f7ff ffc0 	bl	80105ec <free_socket_free_elements>
  }
}
 801066c:	bf00      	nop
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b099      	sub	sp, #100	; 0x64
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8010680:	2300      	movs	r3, #0
 8010682:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 8010684:	68f8      	ldr	r0, [r7, #12]
 8010686:	f7ff ff11 	bl	80104ac <get_socket>
 801068a:	65f8      	str	r0, [r7, #92]	; 0x5c
  if (!sock) {
 801068c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d102      	bne.n	8010698 <lwip_accept+0x24>
    return -1;
 8010692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010696:	e0f9      	b.n	801088c <lwip_accept+0x218>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8010698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80106a0:	4611      	mov	r1, r2
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fd fb0e 	bl	800dcc4 <netconn_accept>
 80106a8:	4603      	mov	r3, r0
 80106aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 80106ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d02c      	beq.n	8010710 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80106b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106c0:	2b10      	cmp	r3, #16
 80106c2:	d008      	beq.n	80106d6 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 80106c4:	235f      	movs	r3, #95	; 0x5f
 80106c6:	633b      	str	r3, [r7, #48]	; 0x30
 80106c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d01d      	beq.n	801070a <lwip_accept+0x96>
 80106ce:	4a71      	ldr	r2, [pc, #452]	; (8010894 <lwip_accept+0x220>)
 80106d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d2:	6013      	str	r3, [r2, #0]
 80106d4:	e019      	b.n	801070a <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 80106d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80106da:	f113 0f0f 	cmn.w	r3, #15
 80106de:	d108      	bne.n	80106f2 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 80106e0:	2316      	movs	r3, #22
 80106e2:	637b      	str	r3, [r7, #52]	; 0x34
 80106e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d00f      	beq.n	801070a <lwip_accept+0x96>
 80106ea:	4a6a      	ldr	r2, [pc, #424]	; (8010894 <lwip_accept+0x220>)
 80106ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ee:	6013      	str	r3, [r2, #0]
 80106f0:	e00b      	b.n	801070a <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 80106f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fd92 	bl	8010220 <err_to_errno>
 80106fc:	63b8      	str	r0, [r7, #56]	; 0x38
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	2b00      	cmp	r3, #0
 8010702:	d002      	beq.n	801070a <lwip_accept+0x96>
 8010704:	4a63      	ldr	r2, [pc, #396]	; (8010894 <lwip_accept+0x220>)
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 801070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801070e:	e0bd      	b.n	801088c <lwip_accept+0x218>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <lwip_accept+0xb0>
 8010716:	4b60      	ldr	r3, [pc, #384]	; (8010898 <lwip_accept+0x224>)
 8010718:	f240 228b 	movw	r2, #651	; 0x28b
 801071c:	495f      	ldr	r1, [pc, #380]	; (801089c <lwip_accept+0x228>)
 801071e:	4860      	ldr	r0, [pc, #384]	; (80108a0 <lwip_accept+0x22c>)
 8010720:	f011 fa48 	bl	8021bb4 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8010724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010726:	2101      	movs	r1, #1
 8010728:	4618      	mov	r0, r3
 801072a:	f7ff fed7 	bl	80104dc <alloc_socket>
 801072e:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 8010730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010736:	d10e      	bne.n	8010756 <lwip_accept+0xe2>
    netconn_delete(newconn);
 8010738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073a:	4618      	mov	r0, r3
 801073c:	f7fd f98e 	bl	800da5c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8010740:	2317      	movs	r3, #23
 8010742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <lwip_accept+0xdc>
 801074a:	4a52      	ldr	r2, [pc, #328]	; (8010894 <lwip_accept+0x220>)
 801074c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801074e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010754:	e09a      	b.n	801088c <lwip_accept+0x218>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8010756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010758:	2b00      	cmp	r3, #0
 801075a:	db02      	blt.n	8010762 <lwip_accept+0xee>
 801075c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075e:	2b03      	cmp	r3, #3
 8010760:	dd06      	ble.n	8010770 <lwip_accept+0xfc>
 8010762:	4b4d      	ldr	r3, [pc, #308]	; (8010898 <lwip_accept+0x224>)
 8010764:	f44f 7225 	mov.w	r2, #660	; 0x294
 8010768:	494e      	ldr	r1, [pc, #312]	; (80108a4 <lwip_accept+0x230>)
 801076a:	484d      	ldr	r0, [pc, #308]	; (80108a0 <lwip_accept+0x22c>)
 801076c:	f011 fa22 	bl	8021bb4 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8010770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	4a4c      	ldr	r2, [pc, #304]	; (80108a8 <lwip_accept+0x234>)
 8010776:	4413      	add	r3, r2
 8010778:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 801077a:	f010 fb69 	bl	8020e50 <sys_arch_protect>
 801077e:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 8010780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	b21b      	sxth	r3, r3
 8010786:	43db      	mvns	r3, r3
 8010788:	b21b      	sxth	r3, r3
 801078a:	65bb      	str	r3, [r7, #88]	; 0x58
  newconn->socket = newsock;
 801078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010790:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8010792:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010794:	f010 fb6a 	bl	8020e6c <sys_arch_unprotect>

  if (newconn->callback) {
 8010798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801079c:	2b00      	cmp	r3, #0
 801079e:	d012      	beq.n	80107c6 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 80107a0:	4842      	ldr	r0, [pc, #264]	; (80108ac <lwip_accept+0x238>)
 80107a2:	f010 fb1b 	bl	8020ddc <sys_mutex_lock>
    while (recvevent > 0) {
 80107a6:	e008      	b.n	80107ba <lwip_accept+0x146>
      recvevent--;
 80107a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107aa:	3b01      	subs	r3, #1
 80107ac:	65bb      	str	r3, [r7, #88]	; 0x58
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80107ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107b4:	2200      	movs	r2, #0
 80107b6:	2100      	movs	r1, #0
 80107b8:	4798      	blx	r3
    while (recvevent > 0) {
 80107ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dcf3      	bgt.n	80107a8 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 80107c0:	483a      	ldr	r0, [pc, #232]	; (80108ac <lwip_accept+0x238>)
 80107c2:	f010 fb1a 	bl	8020dfa <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d056      	beq.n	801087a <lwip_accept+0x206>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d053      	beq.n	801087a <lwip_accept+0x206>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 80107d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107d4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80107d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80107dc:	2300      	movs	r3, #0
 80107de:	f7fd f959 	bl	800da94 <netconn_getaddr>
 80107e2:	4603      	mov	r3, r0
 80107e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 80107e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d016      	beq.n	801081e <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 80107f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fd f932 	bl	800da5c <netconn_delete>
      free_socket(nsock, 1);
 80107f8:	2101      	movs	r1, #1
 80107fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80107fc:	f7ff ff18 	bl	8010630 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8010800:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010804:	4618      	mov	r0, r3
 8010806:	f7ff fd0b 	bl	8010220 <err_to_errno>
 801080a:	6478      	str	r0, [r7, #68]	; 0x44
 801080c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801080e:	2b00      	cmp	r3, #0
 8010810:	d002      	beq.n	8010818 <lwip_accept+0x1a4>
 8010812:	4a20      	ldr	r2, [pc, #128]	; (8010894 <lwip_accept+0x220>)
 8010814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010816:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8010818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801081c:	e036      	b.n	801088c <lwip_accept+0x218>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801081e:	f107 0314 	add.w	r3, r7, #20
 8010822:	2210      	movs	r2, #16
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	f107 0314 	add.w	r3, r7, #20
 801082a:	2202      	movs	r2, #2
 801082c:	705a      	strb	r2, [r3, #1]
 801082e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010830:	f107 0414 	add.w	r4, r7, #20
 8010834:	4618      	mov	r0, r3
 8010836:	f001 fd41 	bl	80122bc <lwip_htons>
 801083a:	4603      	mov	r3, r0
 801083c:	8063      	strh	r3, [r4, #2]
 801083e:	f107 0314 	add.w	r3, r7, #20
 8010842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010844:	605a      	str	r2, [r3, #4]
 8010846:	f107 0314 	add.w	r3, r7, #20
 801084a:	3308      	adds	r3, #8
 801084c:	2208      	movs	r2, #8
 801084e:	2100      	movs	r1, #0
 8010850:	4618      	mov	r0, r3
 8010852:	f010 fc93 	bl	802117c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	7d3a      	ldrb	r2, [r7, #20]
 801085c:	4293      	cmp	r3, r2
 801085e:	d903      	bls.n	8010868 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8010860:	7d3b      	ldrb	r3, [r7, #20]
 8010862:	461a      	mov	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	f107 0314 	add.w	r3, r7, #20
 8010870:	4619      	mov	r1, r3
 8010872:	68b8      	ldr	r0, [r7, #8]
 8010874:	f010 fc5a 	bl	802112c <memcpy>
  if ((addr != NULL) && (addrlen != NULL)) {
 8010878:	bf00      	nop
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 801087a:	2300      	movs	r3, #0
 801087c:	643b      	str	r3, [r7, #64]	; 0x40
 801087e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010880:	2b00      	cmp	r3, #0
 8010882:	d002      	beq.n	801088a <lwip_accept+0x216>
 8010884:	4a03      	ldr	r2, [pc, #12]	; (8010894 <lwip_accept+0x220>)
 8010886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010888:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 801088a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801088c:	4618      	mov	r0, r3
 801088e:	3764      	adds	r7, #100	; 0x64
 8010890:	46bd      	mov	sp, r7
 8010892:	bd90      	pop	{r4, r7, pc}
 8010894:	2001b1d8 	.word	0x2001b1d8
 8010898:	08026300 	.word	0x08026300
 801089c:	0802637c 	.word	0x0802637c
 80108a0:	08026354 	.word	0x08026354
 80108a4:	0802638c 	.word	0x0802638c
 80108a8:	20013e2c 	.word	0x20013e2c
 80108ac:	20017790 	.word	0x20017790

080108b0 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b08a      	sub	sp, #40	; 0x28
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff fdf5 	bl	80104ac <get_socket>
 80108c2:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 80108c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d102      	bne.n	80108d0 <lwip_bind+0x20>
    return -1;
 80108ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108ce:	e051      	b.n	8010974 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b10      	cmp	r3, #16
 80108d4:	d108      	bne.n	80108e8 <lwip_bind+0x38>
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	785b      	ldrb	r3, [r3, #1]
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d104      	bne.n	80108e8 <lwip_bind+0x38>
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	f003 0303 	and.w	r3, r3, #3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d014      	beq.n	8010912 <lwip_bind+0x62>
 80108e8:	4b24      	ldr	r3, [pc, #144]	; (801097c <lwip_bind+0xcc>)
 80108ea:	f240 22e2 	movw	r2, #738	; 0x2e2
 80108ee:	4924      	ldr	r1, [pc, #144]	; (8010980 <lwip_bind+0xd0>)
 80108f0:	4824      	ldr	r0, [pc, #144]	; (8010984 <lwip_bind+0xd4>)
 80108f2:	f011 f95f 	bl	8021bb4 <iprintf>
 80108f6:	f06f 000f 	mvn.w	r0, #15
 80108fa:	f7ff fc91 	bl	8010220 <err_to_errno>
 80108fe:	6178      	str	r0, [r7, #20]
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d002      	beq.n	801090c <lwip_bind+0x5c>
 8010906:	4a20      	ldr	r2, [pc, #128]	; (8010988 <lwip_bind+0xd8>)
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	6013      	str	r3, [r2, #0]
 801090c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010910:	e030      	b.n	8010974 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	613b      	str	r3, [r7, #16]
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	885b      	ldrh	r3, [r3, #2]
 801091c:	4618      	mov	r0, r3
 801091e:	f001 fccd 	bl	80122bc <lwip_htons>
 8010922:	4603      	mov	r3, r0
 8010924:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801092c:	f107 0110 	add.w	r1, r7, #16
 8010930:	4618      	mov	r0, r3
 8010932:	f7fd f901 	bl	800db38 <netconn_bind>
 8010936:	4603      	mov	r3, r0
 8010938:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 801093c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00e      	beq.n	8010962 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8010944:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010948:	4618      	mov	r0, r3
 801094a:	f7ff fc69 	bl	8010220 <err_to_errno>
 801094e:	61b8      	str	r0, [r7, #24]
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <lwip_bind+0xac>
 8010956:	4a0c      	ldr	r2, [pc, #48]	; (8010988 <lwip_bind+0xd8>)
 8010958:	69bb      	ldr	r3, [r7, #24]
 801095a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801095c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010960:	e008      	b.n	8010974 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8010962:	2300      	movs	r3, #0
 8010964:	61fb      	str	r3, [r7, #28]
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <lwip_bind+0xc2>
 801096c:	4a06      	ldr	r2, [pc, #24]	; (8010988 <lwip_bind+0xd8>)
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3728      	adds	r7, #40	; 0x28
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	08026300 	.word	0x08026300
 8010980:	080263a4 	.word	0x080263a4
 8010984:	08026354 	.word	0x08026354
 8010988:	2001b1d8 	.word	0x2001b1d8

0801098c <lwip_close>:

int
lwip_close(int s)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b086      	sub	sp, #24
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff fd87 	bl	80104ac <get_socket>
 801099e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d102      	bne.n	80109ac <lwip_close+0x20>
    return -1;
 80109a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109aa:	e039      	b.n	8010a20 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00b      	beq.n	80109cc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109be:	2b10      	cmp	r3, #16
 80109c0:	bf0c      	ite	eq
 80109c2:	2301      	moveq	r3, #1
 80109c4:	2300      	movne	r3, #0
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	617b      	str	r3, [r7, #20]
 80109ca:	e00a      	b.n	80109e2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d006      	beq.n	80109e2 <lwip_close+0x56>
 80109d4:	4b14      	ldr	r3, [pc, #80]	; (8010a28 <lwip_close+0x9c>)
 80109d6:	f44f 7245 	mov.w	r2, #788	; 0x314
 80109da:	4914      	ldr	r1, [pc, #80]	; (8010a2c <lwip_close+0xa0>)
 80109dc:	4814      	ldr	r0, [pc, #80]	; (8010a30 <lwip_close+0xa4>)
 80109de:	f011 f8e9 	bl	8021bb4 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fd f814 	bl	800da14 <netconn_prepare_delete>
 80109ec:	4603      	mov	r3, r0
 80109ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80109f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00e      	beq.n	8010a16 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 80109f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7ff fc0f 	bl	8010220 <err_to_errno>
 8010a02:	60b8      	str	r0, [r7, #8]
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d002      	beq.n	8010a10 <lwip_close+0x84>
 8010a0a:	4a0a      	ldr	r2, [pc, #40]	; (8010a34 <lwip_close+0xa8>)
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a14:	e004      	b.n	8010a20 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8010a16:	6979      	ldr	r1, [r7, #20]
 8010a18:	6938      	ldr	r0, [r7, #16]
 8010a1a:	f7ff fe09 	bl	8010630 <free_socket>
  set_errno(0);
  return 0;
 8010a1e:	2300      	movs	r3, #0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3718      	adds	r7, #24
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	08026300 	.word	0x08026300
 8010a2c:	080263c0 	.word	0x080263c0
 8010a30:	08026354 	.word	0x08026354
 8010a34:	2001b1d8 	.word	0x2001b1d8

08010a38 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08a      	sub	sp, #40	; 0x28
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	60b9      	str	r1, [r7, #8]
 8010a42:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f7ff fd31 	bl	80104ac <get_socket>
 8010a4a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d102      	bne.n	8010a58 <lwip_connect+0x20>
    return -1;
 8010a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a56:	e062      	b.n	8010b1e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	785b      	ldrb	r3, [r3, #1]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d108      	bne.n	8010a72 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fd f8d7 	bl	800dc18 <netconn_disconnect>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8010a70:	e039      	b.n	8010ae6 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2b10      	cmp	r3, #16
 8010a76:	d10c      	bne.n	8010a92 <lwip_connect+0x5a>
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	785b      	ldrb	r3, [r3, #1]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d003      	beq.n	8010a88 <lwip_connect+0x50>
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	785b      	ldrb	r3, [r3, #1]
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	d104      	bne.n	8010a92 <lwip_connect+0x5a>
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	f003 0303 	and.w	r3, r3, #3
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d014      	beq.n	8010abc <lwip_connect+0x84>
 8010a92:	4b25      	ldr	r3, [pc, #148]	; (8010b28 <lwip_connect+0xf0>)
 8010a94:	f240 3247 	movw	r2, #839	; 0x347
 8010a98:	4924      	ldr	r1, [pc, #144]	; (8010b2c <lwip_connect+0xf4>)
 8010a9a:	4825      	ldr	r0, [pc, #148]	; (8010b30 <lwip_connect+0xf8>)
 8010a9c:	f011 f88a 	bl	8021bb4 <iprintf>
 8010aa0:	f06f 000f 	mvn.w	r0, #15
 8010aa4:	f7ff fbbc 	bl	8010220 <err_to_errno>
 8010aa8:	61f8      	str	r0, [r7, #28]
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d002      	beq.n	8010ab6 <lwip_connect+0x7e>
 8010ab0:	4a20      	ldr	r2, [pc, #128]	; (8010b34 <lwip_connect+0xfc>)
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	6013      	str	r3, [r2, #0]
 8010ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aba:	e030      	b.n	8010b1e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	613b      	str	r3, [r7, #16]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	885b      	ldrh	r3, [r3, #2]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f001 fbf8 	bl	80122bc <lwip_htons>
 8010acc:	4603      	mov	r3, r0
 8010ace:	847b      	strh	r3, [r7, #34]	; 0x22
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ad6:	f107 0110 	add.w	r1, r7, #16
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fd f864 	bl	800dba8 <netconn_connect>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  if (err != ERR_OK) {
 8010ae6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00e      	beq.n	8010b0c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8010aee:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fb94 	bl	8010220 <err_to_errno>
 8010af8:	6178      	str	r0, [r7, #20]
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d002      	beq.n	8010b06 <lwip_connect+0xce>
 8010b00:	4a0c      	ldr	r2, [pc, #48]	; (8010b34 <lwip_connect+0xfc>)
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b0a:	e008      	b.n	8010b1e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	61bb      	str	r3, [r7, #24]
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <lwip_connect+0xe4>
 8010b16:	4a07      	ldr	r2, [pc, #28]	; (8010b34 <lwip_connect+0xfc>)
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010b1c:	2300      	movs	r3, #0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3728      	adds	r7, #40	; 0x28
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	08026300 	.word	0x08026300
 8010b2c:	080263d8 	.word	0x080263d8
 8010b30:	08026354 	.word	0x08026354
 8010b34:	2001b1d8 	.word	0x2001b1d8

08010b38 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b088      	sub	sp, #32
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7ff fcb2 	bl	80104ac <get_socket>
 8010b48:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d102      	bne.n	8010b56 <lwip_listen+0x1e>
    return -1;
 8010b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b54:	e03e      	b.n	8010bd4 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	2bfe      	cmp	r3, #254	; 0xfe
 8010b5a:	dc03      	bgt.n	8010b64 <lwip_listen+0x2c>
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b62:	e000      	b.n	8010b66 <lwip_listen+0x2e>
 8010b64:	23ff      	movs	r3, #255	; 0xff
 8010b66:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	b2d2      	uxtb	r2, r2
 8010b70:	4611      	mov	r1, r2
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7fd f87a 	bl	800dc6c <netconn_listen_with_backlog>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8010b7c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d01e      	beq.n	8010bc2 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b8e:	2b10      	cmp	r3, #16
 8010b90:	d008      	beq.n	8010ba4 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8010b92:	235f      	movs	r3, #95	; 0x5f
 8010b94:	60fb      	str	r3, [r7, #12]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00f      	beq.n	8010bbc <lwip_listen+0x84>
 8010b9c:	4a0f      	ldr	r2, [pc, #60]	; (8010bdc <lwip_listen+0xa4>)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6013      	str	r3, [r2, #0]
 8010ba2:	e00b      	b.n	8010bbc <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010ba4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7ff fb39 	bl	8010220 <err_to_errno>
 8010bae:	6138      	str	r0, [r7, #16]
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d002      	beq.n	8010bbc <lwip_listen+0x84>
 8010bb6:	4a09      	ldr	r2, [pc, #36]	; (8010bdc <lwip_listen+0xa4>)
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bc0:	e008      	b.n	8010bd4 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	617b      	str	r3, [r7, #20]
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <lwip_listen+0x9a>
 8010bcc:	4a03      	ldr	r2, [pc, #12]	; (8010bdc <lwip_listen+0xa4>)
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010bd2:	2300      	movs	r3, #0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3720      	adds	r7, #32
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	2001b1d8 	.word	0x2001b1d8

08010be0 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08c      	sub	sp, #48	; 0x30
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
 8010bec:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8010bee:	2308      	movs	r3, #8
 8010bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  ssize_t recvd = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	db01      	blt.n	8010c02 <lwip_recv_tcp+0x22>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	e001      	b.n	8010c06 <lwip_recv_tcp+0x26>
 8010c02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c06:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d106      	bne.n	8010c1c <lwip_recv_tcp+0x3c>
 8010c0e:	4b74      	ldr	r3, [pc, #464]	; (8010de0 <lwip_recv_tcp+0x200>)
 8010c10:	f240 329e 	movw	r2, #926	; 0x39e
 8010c14:	4973      	ldr	r1, [pc, #460]	; (8010de4 <lwip_recv_tcp+0x204>)
 8010c16:	4874      	ldr	r0, [pc, #464]	; (8010de8 <lwip_recv_tcp+0x208>)
 8010c18:	f010 ffcc 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c26:	2b10      	cmp	r3, #16
 8010c28:	d006      	beq.n	8010c38 <lwip_recv_tcp+0x58>
 8010c2a:	4b6d      	ldr	r3, [pc, #436]	; (8010de0 <lwip_recv_tcp+0x200>)
 8010c2c:	f240 329f 	movw	r2, #927	; 0x39f
 8010c30:	496e      	ldr	r1, [pc, #440]	; (8010dec <lwip_recv_tcp+0x20c>)
 8010c32:	486d      	ldr	r0, [pc, #436]	; (8010de8 <lwip_recv_tcp+0x208>)
 8010c34:	f010 ffbe 	bl	8021bb4 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	f003 0308 	and.w	r3, r3, #8
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d005      	beq.n	8010c4e <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8010c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c46:	f043 0304 	orr.w	r3, r3, #4
 8010c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d003      	beq.n	8010c5e <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	617b      	str	r3, [r7, #20]
 8010c5c:	e036      	b.n	8010ccc <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8010c66:	f107 0114 	add.w	r1, r7, #20
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fd fa60 	bl	800e130 <netconn_recv_tcp_pbuf_flags>
 8010c70:	4603      	mov	r3, r0
 8010c72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8010c76:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d019      	beq.n	8010cb2 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8010c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f300 808d 	bgt.w	8010da0 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8010c86:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7ff fac8 	bl	8010220 <err_to_errno>
 8010c90:	61f8      	str	r0, [r7, #28]
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <lwip_recv_tcp+0xbe>
 8010c98:	4a55      	ldr	r2, [pc, #340]	; (8010df0 <lwip_recv_tcp+0x210>)
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8010c9e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8010ca2:	f113 0f0f 	cmn.w	r3, #15
 8010ca6:	d101      	bne.n	8010cac <lwip_recv_tcp+0xcc>
          return 0;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e094      	b.n	8010dd6 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8010cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cb0:	e091      	b.n	8010dd6 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d106      	bne.n	8010cc6 <lwip_recv_tcp+0xe6>
 8010cb8:	4b49      	ldr	r3, [pc, #292]	; (8010de0 <lwip_recv_tcp+0x200>)
 8010cba:	f240 32c5 	movw	r2, #965	; 0x3c5
 8010cbe:	494d      	ldr	r1, [pc, #308]	; (8010df4 <lwip_recv_tcp+0x214>)
 8010cc0:	4849      	ldr	r0, [pc, #292]	; (8010de8 <lwip_recv_tcp+0x208>)
 8010cc2:	f010 ff77 	bl	8021bb4 <iprintf>
      sock->lastdata.pbuf = p;
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	891b      	ldrh	r3, [r3, #8]
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	dd03      	ble.n	8010ce0 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	891b      	ldrh	r3, [r3, #8]
 8010cdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010cde:	e001      	b.n	8010ce4 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if (recvd + copylen < recvd) {
 8010ce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	4413      	add	r3, r2
 8010cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cec:	429a      	cmp	r2, r3
 8010cee:	dd03      	ble.n	8010cf8 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8010cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	43db      	mvns	r3, r3
 8010cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8010cf8:	6978      	ldr	r0, [r7, #20]
 8010cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfc:	68ba      	ldr	r2, [r7, #8]
 8010cfe:	18d1      	adds	r1, r2, r3
 8010d00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d02:	2300      	movs	r3, #0
 8010d04:	f004 f8a0 	bl	8014e48 <pbuf_copy_partial>

    recvd += copylen;
 8010d08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d0c:	4413      	add	r3, r2
 8010d0e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8010d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d14:	429a      	cmp	r2, r3
 8010d16:	da06      	bge.n	8010d26 <lwip_recv_tcp+0x146>
 8010d18:	4b31      	ldr	r3, [pc, #196]	; (8010de0 <lwip_recv_tcp+0x200>)
 8010d1a:	f240 32dd 	movw	r2, #989	; 0x3dd
 8010d1e:	4936      	ldr	r1, [pc, #216]	; (8010df8 <lwip_recv_tcp+0x218>)
 8010d20:	4831      	ldr	r0, [pc, #196]	; (8010de8 <lwip_recv_tcp+0x208>)
 8010d22:	f010 ff47 	bl	8021bb4 <iprintf>
    recv_left -= copylen;
 8010d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d123      	bne.n	8010d80 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	891b      	ldrh	r3, [r3, #8]
 8010d3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d906      	bls.n	8010d50 <lwip_recv_tcp+0x170>
 8010d42:	4b27      	ldr	r3, [pc, #156]	; (8010de0 <lwip_recv_tcp+0x200>)
 8010d44:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010d48:	492c      	ldr	r1, [pc, #176]	; (8010dfc <lwip_recv_tcp+0x21c>)
 8010d4a:	4827      	ldr	r0, [pc, #156]	; (8010de8 <lwip_recv_tcp+0x208>)
 8010d4c:	f010 ff32 	bl	8021bb4 <iprintf>
      if (p->tot_len - copylen > 0) {
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	891b      	ldrh	r3, [r3, #8]
 8010d54:	461a      	mov	r2, r3
 8010d56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d58:	1ad3      	subs	r3, r2, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	dd09      	ble.n	8010d72 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d62:	4611      	mov	r1, r2
 8010d64:	4618      	mov	r0, r3
 8010d66:	f003 fe36 	bl	80149d6 <pbuf_free_header>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	605a      	str	r2, [r3, #4]
 8010d70:	e006      	b.n	8010d80 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2200      	movs	r2, #0
 8010d76:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f003 fe5e 	bl	8014a3c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8010d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010d84:	f043 0314 	orr.w	r3, r3, #20
 8010d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	dd08      	ble.n	8010da4 <lwip_recv_tcp+0x1c4>
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f43f af58 	beq.w	8010c4e <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8010d9e:	e001      	b.n	8010da4 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8010da0:	bf00      	nop
 8010da2:	e000      	b.n	8010da6 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8010da4:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8010da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	dd0b      	ble.n	8010dc4 <lwip_recv_tcp+0x1e4>
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	f003 0301 	and.w	r3, r3, #1
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d106      	bne.n	8010dc4 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fd f904 	bl	800dfcc <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	61bb      	str	r3, [r7, #24]
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d002      	beq.n	8010dd4 <lwip_recv_tcp+0x1f4>
 8010dce:	4a08      	ldr	r2, [pc, #32]	; (8010df0 <lwip_recv_tcp+0x210>)
 8010dd0:	69bb      	ldr	r3, [r7, #24]
 8010dd2:	6013      	str	r3, [r2, #0]
  return recvd;
 8010dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3730      	adds	r7, #48	; 0x30
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	08026300 	.word	0x08026300
 8010de4:	080263f8 	.word	0x080263f8
 8010de8:	08026354 	.word	0x08026354
 8010dec:	08026408 	.word	0x08026408
 8010df0:	2001b1d8 	.word	0x2001b1d8
 8010df4:	0802642c 	.word	0x0802642c
 8010df8:	08026438 	.word	0x08026438
 8010dfc:	08026460 	.word	0x08026460

08010e00 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8010e00:	b590      	push	{r4, r7, lr}
 8010e02:	b08b      	sub	sp, #44	; 0x2c
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	603b      	str	r3, [r7, #0]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d106      	bne.n	8010e28 <lwip_sock_make_addr+0x28>
 8010e1a:	4b2b      	ldr	r3, [pc, #172]	; (8010ec8 <lwip_sock_make_addr+0xc8>)
 8010e1c:	f240 4207 	movw	r2, #1031	; 0x407
 8010e20:	492a      	ldr	r1, [pc, #168]	; (8010ecc <lwip_sock_make_addr+0xcc>)
 8010e22:	482b      	ldr	r0, [pc, #172]	; (8010ed0 <lwip_sock_make_addr+0xd0>)
 8010e24:	f010 fec6 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <lwip_sock_make_addr+0x3c>
 8010e2e:	4b26      	ldr	r3, [pc, #152]	; (8010ec8 <lwip_sock_make_addr+0xc8>)
 8010e30:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010e34:	4927      	ldr	r1, [pc, #156]	; (8010ed4 <lwip_sock_make_addr+0xd4>)
 8010e36:	4826      	ldr	r0, [pc, #152]	; (8010ed0 <lwip_sock_make_addr+0xd0>)
 8010e38:	f010 febc 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8010e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d106      	bne.n	8010e50 <lwip_sock_make_addr+0x50>
 8010e42:	4b21      	ldr	r3, [pc, #132]	; (8010ec8 <lwip_sock_make_addr+0xc8>)
 8010e44:	f240 4209 	movw	r2, #1033	; 0x409
 8010e48:	4923      	ldr	r1, [pc, #140]	; (8010ed8 <lwip_sock_make_addr+0xd8>)
 8010e4a:	4821      	ldr	r0, [pc, #132]	; (8010ed0 <lwip_sock_make_addr+0xd0>)
 8010e4c:	f010 feb2 	bl	8021bb4 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8010e50:	f107 0314 	add.w	r3, r7, #20
 8010e54:	2210      	movs	r2, #16
 8010e56:	701a      	strb	r2, [r3, #0]
 8010e58:	f107 0314 	add.w	r3, r7, #20
 8010e5c:	2202      	movs	r2, #2
 8010e5e:	705a      	strb	r2, [r3, #1]
 8010e60:	f107 0414 	add.w	r4, r7, #20
 8010e64:	88fb      	ldrh	r3, [r7, #6]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f001 fa28 	bl	80122bc <lwip_htons>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	8063      	strh	r3, [r4, #2]
 8010e70:	f107 0314 	add.w	r3, r7, #20
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	6812      	ldr	r2, [r2, #0]
 8010e78:	605a      	str	r2, [r3, #4]
 8010e7a:	f107 0314 	add.w	r3, r7, #20
 8010e7e:	3308      	adds	r3, #8
 8010e80:	2208      	movs	r2, #8
 8010e82:	2100      	movs	r1, #0
 8010e84:	4618      	mov	r0, r3
 8010e86:	f010 f979 	bl	802117c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8010e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	7d3a      	ldrb	r2, [r7, #20]
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d202      	bcs.n	8010e9a <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8010e94:	2301      	movs	r3, #1
 8010e96:	627b      	str	r3, [r7, #36]	; 0x24
 8010e98:	e008      	b.n	8010eac <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	7d3a      	ldrb	r2, [r7, #20]
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d903      	bls.n	8010eac <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8010ea4:	7d3b      	ldrb	r3, [r7, #20]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	f107 0314 	add.w	r3, r7, #20
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6838      	ldr	r0, [r7, #0]
 8010eb8:	f010 f938 	bl	802112c <memcpy>
  return truncated;
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	372c      	adds	r7, #44	; 0x2c
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd90      	pop	{r4, r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	08026300 	.word	0x08026300
 8010ecc:	08026470 	.word	0x08026470
 8010ed0:	08026354 	.word	0x08026354
 8010ed4:	08026484 	.word	0x08026484
 8010ed8:	08026494 	.word	0x08026494

08010edc <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af02      	add	r7, sp, #8
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	60b9      	str	r1, [r7, #8]
 8010ee6:	607a      	str	r2, [r7, #4]
 8010ee8:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d101      	bne.n	8010ef4 <lwip_recv_tcp_from+0x18>
    return 0;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	e021      	b.n	8010f38 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d01d      	beq.n	8010f36 <lwip_recv_tcp_from+0x5a>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d01a      	beq.n	8010f36 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	6818      	ldr	r0, [r3, #0]
 8010f04:	f107 0216 	add.w	r2, r7, #22
 8010f08:	f107 0110 	add.w	r1, r7, #16
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f7fc fdc1 	bl	800da94 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00e      	beq.n	8010f36 <lwip_recv_tcp_from+0x5a>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00b      	beq.n	8010f36 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	6818      	ldr	r0, [r3, #0]
 8010f22:	8afa      	ldrh	r2, [r7, #22]
 8010f24:	f107 0110 	add.w	r1, r7, #16
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	f7ff ff67 	bl	8010e00 <lwip_sock_make_addr>
 8010f32:	4603      	mov	r3, r0
 8010f34:	e000      	b.n	8010f38 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8010f40:	b590      	push	{r4, r7, lr}
 8010f42:	b08d      	sub	sp, #52	; 0x34
 8010f44:	af02      	add	r7, sp, #8
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	689b      	ldr	r3, [r3, #8]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d10d      	bne.n	8010f72 <lwip_recvfrom_udp_raw+0x32>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	dd09      	ble.n	8010f72 <lwip_recvfrom_udp_raw+0x32>
 8010f5e:	4b5e      	ldr	r3, [pc, #376]	; (80110d8 <lwip_recvfrom_udp_raw+0x198>)
 8010f60:	f240 4249 	movw	r2, #1097	; 0x449
 8010f64:	495d      	ldr	r1, [pc, #372]	; (80110dc <lwip_recvfrom_udp_raw+0x19c>)
 8010f66:	485e      	ldr	r0, [pc, #376]	; (80110e0 <lwip_recvfrom_udp_raw+0x1a0>)
 8010f68:	f010 fe24 	bl	8021bb4 <iprintf>
 8010f6c:	f06f 030f 	mvn.w	r3, #15
 8010f70:	e0ae      	b.n	80110d0 <lwip_recvfrom_udp_raw+0x190>

  if (flags & MSG_DONTWAIT) {
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	f003 0308 	and.w	r3, r3, #8
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d003      	beq.n	8010f84 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8010f7c:	2304      	movs	r3, #4
 8010f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010f82:	e002      	b.n	8010f8a <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8010f84:	2300      	movs	r3, #0
 8010f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d11f      	bne.n	8010fd6 <lwip_recvfrom_udp_raw+0x96>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010f9e:	f107 0110 	add.w	r1, r7, #16
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fd f8f0 	bl	800e188 <netconn_recv_udp_raw_netbuf_flags>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8010fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d002      	beq.n	8010fbc <lwip_recvfrom_udp_raw+0x7c>
      return err;
 8010fb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010fba:	e089      	b.n	80110d0 <lwip_recvfrom_udp_raw+0x190>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d106      	bne.n	8010fd0 <lwip_recvfrom_udp_raw+0x90>
 8010fc2:	4b45      	ldr	r3, [pc, #276]	; (80110d8 <lwip_recvfrom_udp_raw+0x198>)
 8010fc4:	f240 425e 	movw	r2, #1118	; 0x45e
 8010fc8:	4946      	ldr	r1, [pc, #280]	; (80110e4 <lwip_recvfrom_udp_raw+0x1a4>)
 8010fca:	4845      	ldr	r0, [pc, #276]	; (80110e0 <lwip_recvfrom_udp_raw+0x1a0>)
 8010fcc:	f010 fdf2 	bl	8021bb4 <iprintf>
    sock->lastdata.netbuf = buf;
 8010fd0:	693a      	ldr	r2, [r7, #16]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	891b      	ldrh	r3, [r3, #8]
 8010fdc:	837b      	strh	r3, [r7, #26]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	61fb      	str	r3, [r7, #28]
 8010fe6:	e029      	b.n	801103c <lwip_recvfrom_udp_raw+0xfc>
    u16_t len_left = (u16_t)(buflen - copied);
 8010fe8:	8b7a      	ldrh	r2, [r7, #26]
 8010fea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	833b      	strh	r3, [r7, #24]
    if (msg->msg_iov[i].iov_len > len_left) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	689a      	ldr	r2, [r3, #8]
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	00db      	lsls	r3, r3, #3
 8010ff8:	4413      	add	r3, r2
 8010ffa:	685a      	ldr	r2, [r3, #4]
 8010ffc:	8b3b      	ldrh	r3, [r7, #24]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d902      	bls.n	8011008 <lwip_recvfrom_udp_raw+0xc8>
      copylen = len_left;
 8011002:	8b3b      	ldrh	r3, [r7, #24]
 8011004:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011006:	e006      	b.n	8011016 <lwip_recvfrom_udp_raw+0xd6>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	689a      	ldr	r2, [r3, #8]
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	00db      	lsls	r3, r3, #3
 8011010:	4413      	add	r3, r2
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	6818      	ldr	r0, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	689a      	ldr	r2, [r3, #8]
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	00db      	lsls	r3, r3, #3
 8011022:	4413      	add	r3, r2
 8011024:	6819      	ldr	r1, [r3, #0]
 8011026:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011028:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801102a:	f003 ff0d 	bl	8014e48 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 801102e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011032:	4413      	add	r3, r2
 8011034:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	3301      	adds	r3, #1
 801103a:	61fb      	str	r3, [r7, #28]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	69fa      	ldr	r2, [r7, #28]
 8011042:	429a      	cmp	r2, r3
 8011044:	da03      	bge.n	801104e <lwip_recvfrom_udp_raw+0x10e>
 8011046:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011048:	8b7b      	ldrh	r3, [r7, #26]
 801104a:	429a      	cmp	r2, r3
 801104c:	d3cc      	bcc.n	8010fe8 <lwip_recvfrom_udp_raw+0xa8>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d01a      	beq.n	801108c <lwip_recvfrom_udp_raw+0x14c>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d016      	beq.n	801108c <lwip_recvfrom_udp_raw+0x14c>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d012      	beq.n	801108c <lwip_recvfrom_udp_raw+0x14c>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00e      	beq.n	801108c <lwip_recvfrom_udp_raw+0x14c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6818      	ldr	r0, [r3, #0]
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	f103 0108 	add.w	r1, r3, #8
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	3304      	adds	r3, #4
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	4623      	mov	r3, r4
 8011088:	f7ff feba 	bl	8010e00 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	691b      	ldr	r3, [r3, #16]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d007      	beq.n	80110aa <lwip_recvfrom_udp_raw+0x16a>
    u8_t wrote_msg = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d102      	bne.n	80110aa <lwip_recvfrom_udp_raw+0x16a>
      msg->msg_controllen = 0;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <lwip_recvfrom_udp_raw+0x182>
    sock->lastdata.netbuf = NULL;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2200      	movs	r2, #0
 80110b8:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff f8cd 	bl	801025c <netbuf_delete>
  }
  if (datagram_len) {
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d002      	beq.n	80110ce <lwip_recvfrom_udp_raw+0x18e>
    *datagram_len = buflen;
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	8b7a      	ldrh	r2, [r7, #26]
 80110cc:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	372c      	adds	r7, #44	; 0x2c
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd90      	pop	{r4, r7, pc}
 80110d8:	08026300 	.word	0x08026300
 80110dc:	080264a4 	.word	0x080264a4
 80110e0:	08026354 	.word	0x08026354
 80110e4:	080264d0 	.word	0x080264d0

080110e8 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b096      	sub	sp, #88	; 0x58
 80110ec:	af02      	add	r7, sp, #8
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7ff f9d8 	bl	80104ac <get_socket>
 80110fc:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 80110fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011100:	2b00      	cmp	r3, #0
 8011102:	d102      	bne.n	801110a <lwip_recvfrom+0x22>
    return -1;
 8011104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011108:	e078      	b.n	80111fc <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801110a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011114:	2b10      	cmp	r3, #16
 8011116:	d112      	bne.n	801113e <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	68b9      	ldr	r1, [r7, #8]
 801111e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011120:	f7ff fd5e 	bl	8010be0 <lwip_recv_tcp>
 8011124:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8011126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011128:	9301      	str	r3, [sp, #4]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	4b35      	ldr	r3, [pc, #212]	; (8011204 <lwip_recvfrom+0x11c>)
 8011130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011136:	f7ff fed1 	bl	8010edc <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 801113a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801113c:	e05e      	b.n	80111fc <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 801114a:	2300      	movs	r3, #0
 801114c:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 8011156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801115a:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 801115c:	2301      	movs	r3, #1
 801115e:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 8011160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011162:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8011164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011166:	2b00      	cmp	r3, #0
 8011168:	d002      	beq.n	8011170 <lwip_recvfrom+0x88>
 801116a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	e000      	b.n	8011172 <lwip_recvfrom+0x8a>
 8011170:	2300      	movs	r3, #0
 8011172:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8011174:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8011178:	f107 0214 	add.w	r2, r7, #20
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	460b      	mov	r3, r1
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011186:	f7ff fedb 	bl	8010f40 <lwip_recvfrom_udp_raw>
 801118a:	4603      	mov	r3, r0
 801118c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 8011190:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00e      	beq.n	80111b6 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8011198:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 801119c:	4618      	mov	r0, r3
 801119e:	f7ff f83f 	bl	8010220 <err_to_errno>
 80111a2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80111a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <lwip_recvfrom+0xc8>
 80111aa:	4a17      	ldr	r2, [pc, #92]	; (8011208 <lwip_recvfrom+0x120>)
 80111ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ae:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80111b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111b4:	e022      	b.n	80111fc <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80111b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80111b8:	461a      	mov	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4293      	cmp	r3, r2
 80111be:	bf28      	it	cs
 80111c0:	4613      	movcs	r3, r2
 80111c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d206      	bcs.n	80111d8 <lwip_recvfrom+0xf0>
 80111ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80111cc:	461a      	mov	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	4293      	cmp	r3, r2
 80111d2:	bf28      	it	cs
 80111d4:	4613      	movcs	r3, r2
 80111d6:	e001      	b.n	80111dc <lwip_recvfrom+0xf4>
 80111d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80111dc:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 80111de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 80111e4:	69ba      	ldr	r2, [r7, #24]
 80111e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111e8:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 80111ea:	2300      	movs	r3, #0
 80111ec:	643b      	str	r3, [r7, #64]	; 0x40
 80111ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <lwip_recvfrom+0x112>
 80111f4:	4a04      	ldr	r2, [pc, #16]	; (8011208 <lwip_recvfrom+0x120>)
 80111f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 80111fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3750      	adds	r7, #80	; 0x50
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	080264dc 	.word	0x080264dc
 8011208:	2001b1d8 	.word	0x2001b1d8

0801120c <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b086      	sub	sp, #24
 8011210:	af02      	add	r7, sp, #8
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
 8011218:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 801121a:	2300      	movs	r3, #0
 801121c:	9301      	str	r3, [sp, #4]
 801121e:	2300      	movs	r3, #0
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	68b9      	ldr	r1, [r7, #8]
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	f7ff ff5d 	bl	80110e8 <lwip_recvfrom>
 801122e:	4603      	mov	r3, r0
}
 8011230:	4618      	mov	r0, r3
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b08a      	sub	sp, #40	; 0x28
 801123c:	af02      	add	r7, sp, #8
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
 8011244:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f7ff f930 	bl	80104ac <get_socket>
 801124c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d102      	bne.n	801125a <lwip_send+0x22>
    return -1;
 8011254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011258:	e046      	b.n	80112e8 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011264:	2b10      	cmp	r3, #16
 8011266:	d00b      	beq.n	8011280 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8011268:	2300      	movs	r3, #0
 801126a:	9301      	str	r3, [sp, #4]
 801126c:	2300      	movs	r3, #0
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	68b9      	ldr	r1, [r7, #8]
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f000 f83c 	bl	80112f4 <lwip_sendto>
 801127c:	4603      	mov	r3, r0
 801127e:	e033      	b.n	80112e8 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <lwip_send+0x56>
 801128a:	2203      	movs	r2, #3
 801128c:	e000      	b.n	8011290 <lwip_send+0x58>
 801128e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	105b      	asrs	r3, r3, #1
 8011294:	b25b      	sxtb	r3, r3
 8011296:	f003 0304 	and.w	r3, r3, #4
 801129a:	b25b      	sxtb	r3, r3
 801129c:	4313      	orrs	r3, r2
 801129e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 80112a0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	6818      	ldr	r0, [r3, #0]
 80112aa:	7efa      	ldrb	r2, [r7, #27]
 80112ac:	f107 0310 	add.w	r3, r7, #16
 80112b0:	9300      	str	r3, [sp, #0]
 80112b2:	4613      	mov	r3, r2
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	68b9      	ldr	r1, [r7, #8]
 80112b8:	f7fc ffc0 	bl	800e23c <netconn_write_partly>
 80112bc:	4603      	mov	r3, r0
 80112be:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80112c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fe ffab 	bl	8010220 <err_to_errno>
 80112ca:	6178      	str	r0, [r7, #20]
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d002      	beq.n	80112d8 <lwip_send+0xa0>
 80112d2:	4a07      	ldr	r2, [pc, #28]	; (80112f0 <lwip_send+0xb8>)
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80112d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d101      	bne.n	80112e4 <lwip_send+0xac>
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	e001      	b.n	80112e8 <lwip_send+0xb0>
 80112e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3720      	adds	r7, #32
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	2001b1d8 	.word	0x2001b1d8

080112f4 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08e      	sub	sp, #56	; 0x38
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f7ff f8d2 	bl	80104ac <get_socket>
 8011308:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 801130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130c:	2b00      	cmp	r3, #0
 801130e:	d102      	bne.n	8011316 <lwip_sendto+0x22>
    return -1;
 8011310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011314:	e093      	b.n	801143e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8011316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011320:	2b10      	cmp	r3, #16
 8011322:	d107      	bne.n	8011334 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	68b9      	ldr	r1, [r7, #8]
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f7ff ff84 	bl	8011238 <lwip_send>
 8011330:	4603      	mov	r3, r0
 8011332:	e084      	b.n	801143e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801133a:	d30a      	bcc.n	8011352 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 801133c:	235a      	movs	r3, #90	; 0x5a
 801133e:	623b      	str	r3, [r7, #32]
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d002      	beq.n	801134c <lwip_sendto+0x58>
 8011346:	4a40      	ldr	r2, [pc, #256]	; (8011448 <lwip_sendto+0x154>)
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011350:	e075      	b.n	801143e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8011356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011358:	2b00      	cmp	r3, #0
 801135a:	d102      	bne.n	8011362 <lwip_sendto+0x6e>
 801135c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801135e:	2b00      	cmp	r3, #0
 8011360:	d023      	beq.n	80113aa <lwip_sendto+0xb6>
 8011362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011364:	2b10      	cmp	r3, #16
 8011366:	d10b      	bne.n	8011380 <lwip_sendto+0x8c>
 8011368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801136a:	2b00      	cmp	r3, #0
 801136c:	d008      	beq.n	8011380 <lwip_sendto+0x8c>
 801136e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011370:	785b      	ldrb	r3, [r3, #1]
 8011372:	2b02      	cmp	r3, #2
 8011374:	d104      	bne.n	8011380 <lwip_sendto+0x8c>
 8011376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011378:	f003 0303 	and.w	r3, r3, #3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d014      	beq.n	80113aa <lwip_sendto+0xb6>
 8011380:	4b32      	ldr	r3, [pc, #200]	; (801144c <lwip_sendto+0x158>)
 8011382:	f240 6252 	movw	r2, #1618	; 0x652
 8011386:	4932      	ldr	r1, [pc, #200]	; (8011450 <lwip_sendto+0x15c>)
 8011388:	4832      	ldr	r0, [pc, #200]	; (8011454 <lwip_sendto+0x160>)
 801138a:	f010 fc13 	bl	8021bb4 <iprintf>
 801138e:	f06f 000f 	mvn.w	r0, #15
 8011392:	f7fe ff45 	bl	8010220 <err_to_errno>
 8011396:	62b8      	str	r0, [r7, #40]	; 0x28
 8011398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139a:	2b00      	cmp	r3, #0
 801139c:	d002      	beq.n	80113a4 <lwip_sendto+0xb0>
 801139e:	4a2a      	ldr	r2, [pc, #168]	; (8011448 <lwip_sendto+0x154>)
 80113a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113a8:	e049      	b.n	801143e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	617b      	str	r3, [r7, #20]
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80113b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00a      	beq.n	80113ce <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80113b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	61bb      	str	r3, [r7, #24]
 80113be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113c0:	885b      	ldrh	r3, [r3, #2]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f000 ff7a 	bl	80122bc <lwip_htons>
 80113c8:	4603      	mov	r3, r0
 80113ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80113cc:	e003      	b.n	80113d6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 80113ce:	2300      	movs	r3, #0
 80113d0:	86fb      	strh	r3, [r7, #54]	; 0x36
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80113d2:	2300      	movs	r3, #0
 80113d4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 80113d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80113d8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 80113da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80113dc:	f107 0310 	add.w	r3, r7, #16
 80113e0:	68b9      	ldr	r1, [r7, #8]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fe ff82 	bl	80102ec <netbuf_ref>
 80113e8:	4603      	mov	r3, r0
 80113ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 80113ee:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d10a      	bne.n	801140c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f107 0210 	add.w	r2, r7, #16
 80113fe:	4611      	mov	r1, r2
 8011400:	4618      	mov	r0, r3
 8011402:	f7fc feed 	bl	800e1e0 <netconn_send>
 8011406:	4603      	mov	r3, r0
 8011408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 801140c:	f107 0310 	add.w	r3, r7, #16
 8011410:	4618      	mov	r0, r3
 8011412:	f7fe ff43 	bl	801029c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8011416:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801141a:	4618      	mov	r0, r3
 801141c:	f7fe ff00 	bl	8010220 <err_to_errno>
 8011420:	6278      	str	r0, [r7, #36]	; 0x24
 8011422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <lwip_sendto+0x13a>
 8011428:	4a07      	ldr	r2, [pc, #28]	; (8011448 <lwip_sendto+0x154>)
 801142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 801142e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8011432:	2b00      	cmp	r3, #0
 8011434:	d101      	bne.n	801143a <lwip_sendto+0x146>
 8011436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011438:	e001      	b.n	801143e <lwip_sendto+0x14a>
 801143a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801143e:	4618      	mov	r0, r3
 8011440:	3738      	adds	r7, #56	; 0x38
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	2001b1d8 	.word	0x2001b1d8
 801144c:	08026300 	.word	0x08026300
 8011450:	080265e0 	.word	0x080265e0
 8011454:	08026354 	.word	0x08026354

08011458 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2b03      	cmp	r3, #3
 8011468:	d009      	beq.n	801147e <lwip_socket+0x26>
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	2b03      	cmp	r3, #3
 801146e:	dc23      	bgt.n	80114b8 <lwip_socket+0x60>
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d019      	beq.n	80114aa <lwip_socket+0x52>
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2b02      	cmp	r3, #2
 801147a:	d009      	beq.n	8011490 <lwip_socket+0x38>
 801147c:	e01c      	b.n	80114b8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	b2db      	uxtb	r3, r3
 8011482:	4a22      	ldr	r2, [pc, #136]	; (801150c <lwip_socket+0xb4>)
 8011484:	4619      	mov	r1, r3
 8011486:	2040      	movs	r0, #64	; 0x40
 8011488:	f7fc fa4a 	bl	800d920 <netconn_new_with_proto_and_callback>
 801148c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801148e:	e019      	b.n	80114c4 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b88      	cmp	r3, #136	; 0x88
 8011494:	d101      	bne.n	801149a <lwip_socket+0x42>
 8011496:	2321      	movs	r3, #33	; 0x21
 8011498:	e000      	b.n	801149c <lwip_socket+0x44>
 801149a:	2320      	movs	r3, #32
 801149c:	4a1b      	ldr	r2, [pc, #108]	; (801150c <lwip_socket+0xb4>)
 801149e:	2100      	movs	r1, #0
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fc fa3d 	bl	800d920 <netconn_new_with_proto_and_callback>
 80114a6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80114a8:	e00c      	b.n	80114c4 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80114aa:	4a18      	ldr	r2, [pc, #96]	; (801150c <lwip_socket+0xb4>)
 80114ac:	2100      	movs	r1, #0
 80114ae:	2010      	movs	r0, #16
 80114b0:	f7fc fa36 	bl	800d920 <netconn_new_with_proto_and_callback>
 80114b4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80114b6:	e005      	b.n	80114c4 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 80114b8:	4b15      	ldr	r3, [pc, #84]	; (8011510 <lwip_socket+0xb8>)
 80114ba:	2216      	movs	r2, #22
 80114bc:	601a      	str	r2, [r3, #0]
      return -1;
 80114be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114c2:	e01e      	b.n	8011502 <lwip_socket+0xaa>
  }

  if (!conn) {
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d105      	bne.n	80114d6 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 80114ca:	4b11      	ldr	r3, [pc, #68]	; (8011510 <lwip_socket+0xb8>)
 80114cc:	2269      	movs	r2, #105	; 0x69
 80114ce:	601a      	str	r2, [r3, #0]
    return -1;
 80114d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114d4:	e015      	b.n	8011502 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 80114d6:	2100      	movs	r1, #0
 80114d8:	6978      	ldr	r0, [r7, #20]
 80114da:	f7fe ffff 	bl	80104dc <alloc_socket>
 80114de:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114e6:	d108      	bne.n	80114fa <lwip_socket+0xa2>
    netconn_delete(conn);
 80114e8:	6978      	ldr	r0, [r7, #20]
 80114ea:	f7fc fab7 	bl	800da5c <netconn_delete>
    set_errno(ENFILE);
 80114ee:	4b08      	ldr	r3, [pc, #32]	; (8011510 <lwip_socket+0xb8>)
 80114f0:	2217      	movs	r2, #23
 80114f2:	601a      	str	r2, [r3, #0]
    return -1;
 80114f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114f8:	e003      	b.n	8011502 <lwip_socket+0xaa>
  }
  conn->socket = i;
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	693a      	ldr	r2, [r7, #16]
 80114fe:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8011500:	693b      	ldr	r3, [r7, #16]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	08011cc9 	.word	0x08011cc9
 8011510:	2001b1d8 	.word	0x2001b1d8

08011514 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 801151c:	480c      	ldr	r0, [pc, #48]	; (8011550 <lwip_link_select_cb+0x3c>)
 801151e:	f00f fc5d 	bl	8020ddc <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 8011522:	4b0c      	ldr	r3, [pc, #48]	; (8011554 <lwip_link_select_cb+0x40>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 801152a:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <lwip_link_select_cb+0x40>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 8011532:	4b08      	ldr	r3, [pc, #32]	; (8011554 <lwip_link_select_cb+0x40>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 801153a:	4a06      	ldr	r2, [pc, #24]	; (8011554 <lwip_link_select_cb+0x40>)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8011540:	4803      	ldr	r0, [pc, #12]	; (8011550 <lwip_link_select_cb+0x3c>)
 8011542:	f00f fc5a 	bl	8020dfa <sys_mutex_unlock>
}
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	20017790 	.word	0x20017790
 8011554:	20013e6c 	.word	0x20013e6c

08011558 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8011560:	481b      	ldr	r0, [pc, #108]	; (80115d0 <lwip_unlink_select_cb+0x78>)
 8011562:	f00f fc3b 	bl	8020ddc <sys_mutex_lock>
  if (select_cb->next != NULL) {
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d004      	beq.n	8011578 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	6852      	ldr	r2, [r2, #4]
 8011576:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 8011578:	4b16      	ldr	r3, [pc, #88]	; (80115d4 <lwip_unlink_select_cb+0x7c>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	429a      	cmp	r2, r3
 8011580:	d10f      	bne.n	80115a2 <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d006      	beq.n	8011598 <lwip_unlink_select_cb+0x40>
 801158a:	4b13      	ldr	r3, [pc, #76]	; (80115d8 <lwip_unlink_select_cb+0x80>)
 801158c:	f240 720d 	movw	r2, #1805	; 0x70d
 8011590:	4912      	ldr	r1, [pc, #72]	; (80115dc <lwip_unlink_select_cb+0x84>)
 8011592:	4813      	ldr	r0, [pc, #76]	; (80115e0 <lwip_unlink_select_cb+0x88>)
 8011594:	f010 fb0e 	bl	8021bb4 <iprintf>
    select_cb_list = select_cb->next;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4a0d      	ldr	r2, [pc, #52]	; (80115d4 <lwip_unlink_select_cb+0x7c>)
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	e00f      	b.n	80115c2 <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d106      	bne.n	80115b8 <lwip_unlink_select_cb+0x60>
 80115aa:	4b0b      	ldr	r3, [pc, #44]	; (80115d8 <lwip_unlink_select_cb+0x80>)
 80115ac:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 80115b0:	490c      	ldr	r1, [pc, #48]	; (80115e4 <lwip_unlink_select_cb+0x8c>)
 80115b2:	480b      	ldr	r0, [pc, #44]	; (80115e0 <lwip_unlink_select_cb+0x88>)
 80115b4:	f010 fafe 	bl	8021bb4 <iprintf>
    select_cb->prev->next = select_cb->next;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	6812      	ldr	r2, [r2, #0]
 80115c0:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80115c2:	4803      	ldr	r0, [pc, #12]	; (80115d0 <lwip_unlink_select_cb+0x78>)
 80115c4:	f00f fc19 	bl	8020dfa <sys_mutex_unlock>
}
 80115c8:	bf00      	nop
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	20017790 	.word	0x20017790
 80115d4:	20013e6c 	.word	0x20013e6c
 80115d8:	08026300 	.word	0x08026300
 80115dc:	08026600 	.word	0x08026600
 80115e0:	08026354 	.word	0x08026354
 80115e4:	08026618 	.word	0x08026618

080115e8 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b098      	sub	sp, #96	; 0x60
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
 80115f4:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 80115f6:	2300      	movs	r3, #0
 80115f8:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 80115fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115fe:	653b      	str	r3, [r7, #80]	; 0x50
 8011600:	2300      	movs	r3, #0
 8011602:	657b      	str	r3, [r7, #84]	; 0x54
 8011604:	e007      	b.n	8011616 <lwip_selscan+0x2e>
 8011606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	653a      	str	r2, [r7, #80]	; 0x50
 801160c:	2200      	movs	r2, #0
 801160e:	701a      	strb	r2, [r3, #0]
 8011610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011612:	3301      	adds	r3, #1
 8011614:	657b      	str	r3, [r7, #84]	; 0x54
 8011616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011618:	2b07      	cmp	r3, #7
 801161a:	d9f4      	bls.n	8011606 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 801161c:	f107 031c 	add.w	r3, r7, #28
 8011620:	64bb      	str	r3, [r7, #72]	; 0x48
 8011622:	2300      	movs	r3, #0
 8011624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011626:	e007      	b.n	8011638 <lwip_selscan+0x50>
 8011628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	64ba      	str	r2, [r7, #72]	; 0x48
 801162e:	2200      	movs	r2, #0
 8011630:	701a      	strb	r2, [r3, #0]
 8011632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011634:	3301      	adds	r3, #1
 8011636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801163a:	2b07      	cmp	r3, #7
 801163c:	d9f4      	bls.n	8011628 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 801163e:	f107 0314 	add.w	r3, r7, #20
 8011642:	643b      	str	r3, [r7, #64]	; 0x40
 8011644:	2300      	movs	r3, #0
 8011646:	647b      	str	r3, [r7, #68]	; 0x44
 8011648:	e007      	b.n	801165a <lwip_selscan+0x72>
 801164a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	643a      	str	r2, [r7, #64]	; 0x40
 8011650:	2200      	movs	r2, #0
 8011652:	701a      	strb	r2, [r3, #0]
 8011654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011656:	3301      	adds	r3, #1
 8011658:	647b      	str	r3, [r7, #68]	; 0x44
 801165a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801165c:	2b07      	cmp	r3, #7
 801165e:	d9f4      	bls.n	801164a <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011660:	2300      	movs	r3, #0
 8011662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011664:	e0e1      	b.n	801182a <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d00d      	beq.n	8011688 <lwip_selscan+0xa0>
 801166c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801166e:	095a      	lsrs	r2, r3, #5
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011676:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011678:	f002 021f 	and.w	r2, r2, #31
 801167c:	2101      	movs	r1, #1
 801167e:	fa01 f202 	lsl.w	r2, r1, r2
 8011682:	4013      	ands	r3, r2
 8011684:	2b00      	cmp	r3, #0
 8011686:	d123      	bne.n	80116d0 <lwip_selscan+0xe8>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d00d      	beq.n	80116aa <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 801168e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011690:	095a      	lsrs	r2, r3, #5
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801169a:	f002 021f 	and.w	r2, r2, #31
 801169e:	2101      	movs	r1, #1
 80116a0:	fa01 f202 	lsl.w	r2, r1, r2
 80116a4:	4013      	ands	r3, r2
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d112      	bne.n	80116d0 <lwip_selscan+0xe8>
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f000 80b8 	beq.w	8011822 <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 80116b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b4:	095a      	lsrs	r2, r3, #5
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116be:	f002 021f 	and.w	r2, r2, #31
 80116c2:	2101      	movs	r1, #1
 80116c4:	fa01 f202 	lsl.w	r2, r1, r2
 80116c8:	4013      	ands	r3, r2
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f000 80a9 	beq.w	8011822 <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 80116d0:	f00f fbbe 	bl	8020e50 <sys_arch_protect>
 80116d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 80116d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80116d8:	f7fe fec5 	bl	8010466 <tryget_socket_unconn_locked>
 80116dc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 80116de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8098 	beq.w	8011816 <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 80116e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	891b      	ldrh	r3, [r3, #8]
 80116f0:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 80116f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f4:	895b      	ldrh	r3, [r3, #10]
 80116f6:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	899b      	ldrh	r3, [r3, #12]
 80116fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 80116fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011700:	f00f fbb4 	bl	8020e6c <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d02c      	beq.n	8011764 <lwip_selscan+0x17c>
 801170a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801170c:	095a      	lsrs	r2, r3, #5
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011716:	f002 021f 	and.w	r2, r2, #31
 801171a:	2101      	movs	r1, #1
 801171c:	fa01 f202 	lsl.w	r2, r1, r2
 8011720:	4013      	ands	r3, r2
 8011722:	2b00      	cmp	r3, #0
 8011724:	d01e      	beq.n	8011764 <lwip_selscan+0x17c>
 8011726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011728:	2b00      	cmp	r3, #0
 801172a:	d103      	bne.n	8011734 <lwip_selscan+0x14c>
 801172c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011730:	2b00      	cmp	r3, #0
 8011732:	dd17      	ble.n	8011764 <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 8011734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011736:	095a      	lsrs	r2, r3, #5
 8011738:	0093      	lsls	r3, r2, #2
 801173a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801173e:	440b      	add	r3, r1
 8011740:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8011744:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011746:	f001 011f 	and.w	r1, r1, #31
 801174a:	2001      	movs	r0, #1
 801174c:	fa00 f101 	lsl.w	r1, r0, r1
 8011750:	4319      	orrs	r1, r3
 8011752:	0093      	lsls	r3, r2, #2
 8011754:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011758:	4413      	add	r3, r2
 801175a:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 801175e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011760:	3301      	adds	r3, #1
 8011762:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d028      	beq.n	80117bc <lwip_selscan+0x1d4>
 801176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801176c:	095a      	lsrs	r2, r3, #5
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011776:	f002 021f 	and.w	r2, r2, #31
 801177a:	2101      	movs	r1, #1
 801177c:	fa01 f202 	lsl.w	r2, r1, r2
 8011780:	4013      	ands	r3, r2
 8011782:	2b00      	cmp	r3, #0
 8011784:	d01a      	beq.n	80117bc <lwip_selscan+0x1d4>
 8011786:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011788:	2b00      	cmp	r3, #0
 801178a:	d017      	beq.n	80117bc <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 801178c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801178e:	095a      	lsrs	r2, r3, #5
 8011790:	0093      	lsls	r3, r2, #2
 8011792:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011796:	440b      	add	r3, r1
 8011798:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801179c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801179e:	f001 011f 	and.w	r1, r1, #31
 80117a2:	2001      	movs	r0, #1
 80117a4:	fa00 f101 	lsl.w	r1, r0, r1
 80117a8:	4319      	orrs	r1, r3
 80117aa:	0093      	lsls	r3, r2, #2
 80117ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80117b0:	4413      	add	r3, r2
 80117b2:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 80117b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117b8:	3301      	adds	r3, #1
 80117ba:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d030      	beq.n	8011824 <lwip_selscan+0x23c>
 80117c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117c4:	095a      	lsrs	r2, r3, #5
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117ce:	f002 021f 	and.w	r2, r2, #31
 80117d2:	2101      	movs	r1, #1
 80117d4:	fa01 f202 	lsl.w	r2, r1, r2
 80117d8:	4013      	ands	r3, r2
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d022      	beq.n	8011824 <lwip_selscan+0x23c>
 80117de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d01f      	beq.n	8011824 <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 80117e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117e6:	095a      	lsrs	r2, r3, #5
 80117e8:	0093      	lsls	r3, r2, #2
 80117ea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80117ee:	440b      	add	r3, r1
 80117f0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80117f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80117f6:	f001 011f 	and.w	r1, r1, #31
 80117fa:	2001      	movs	r0, #1
 80117fc:	fa00 f101 	lsl.w	r1, r0, r1
 8011800:	4319      	orrs	r1, r3
 8011802:	0093      	lsls	r3, r2, #2
 8011804:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011808:	4413      	add	r3, r2
 801180a:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 801180e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011810:	3301      	adds	r3, #1
 8011812:	65bb      	str	r3, [r7, #88]	; 0x58
 8011814:	e006      	b.n	8011824 <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 8011816:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011818:	f00f fb28 	bl	8020e6c <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 801181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011820:	e02b      	b.n	801187a <lwip_selscan+0x292>
      continue;
 8011822:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011826:	3301      	adds	r3, #1
 8011828:	65fb      	str	r3, [r7, #92]	; 0x5c
 801182a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	429a      	cmp	r2, r3
 8011830:	f6ff af19 	blt.w	8011666 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 8011834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011836:	461a      	mov	r2, r3
 8011838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801183c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011840:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 8011844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011846:	461a      	mov	r2, r3
 8011848:	f107 031c 	add.w	r3, r7, #28
 801184c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011850:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 8011854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011856:	461a      	mov	r2, r3
 8011858:	f107 0314 	add.w	r3, r7, #20
 801185c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011860:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 8011864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011866:	2b00      	cmp	r3, #0
 8011868:	da06      	bge.n	8011878 <lwip_selscan+0x290>
 801186a:	4b06      	ldr	r3, [pc, #24]	; (8011884 <lwip_selscan+0x29c>)
 801186c:	f240 7269 	movw	r2, #1897	; 0x769
 8011870:	4905      	ldr	r1, [pc, #20]	; (8011888 <lwip_selscan+0x2a0>)
 8011872:	4806      	ldr	r0, [pc, #24]	; (801188c <lwip_selscan+0x2a4>)
 8011874:	f010 f99e 	bl	8021bb4 <iprintf>
  return nready;
 8011878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 801187a:	4618      	mov	r0, r3
 801187c:	3760      	adds	r7, #96	; 0x60
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	08026300 	.word	0x08026300
 8011888:	08026630 	.word	0x08026630
 801188c:	08026354 	.word	0x08026354

08011890 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b0a0      	sub	sp, #128	; 0x80
 8011894:	af04      	add	r7, sp, #16
 8011896:	60f8      	str	r0, [r7, #12]
 8011898:	60b9      	str	r1, [r7, #8]
 801189a:	607a      	str	r2, [r7, #4]
 801189c:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 801189e:	2300      	movs	r3, #0
 80118a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	db02      	blt.n	80118ae <lwip_select+0x1e>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2b40      	cmp	r3, #64	; 0x40
 80118ac:	dd05      	ble.n	80118ba <lwip_select+0x2a>
    set_errno(EINVAL);
 80118ae:	4b84      	ldr	r3, [pc, #528]	; (8011ac0 <lwip_select+0x230>)
 80118b0:	2216      	movs	r2, #22
 80118b2:	601a      	str	r2, [r3, #0]
    return -1;
 80118b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118b8:	e1b5      	b.n	8011c26 <lwip_select+0x396>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80118ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80118be:	9302      	str	r3, [sp, #8]
 80118c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118c4:	9301      	str	r3, [sp, #4]
 80118c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80118ca:	9300      	str	r3, [sp, #0]
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	68b9      	ldr	r1, [r7, #8]
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	f7ff fe88 	bl	80115e8 <lwip_selscan>
 80118d8:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 80118da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118dc:	2b00      	cmp	r3, #0
 80118de:	da05      	bge.n	80118ec <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 80118e0:	4b77      	ldr	r3, [pc, #476]	; (8011ac0 <lwip_select+0x230>)
 80118e2:	2209      	movs	r2, #9
 80118e4:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 80118e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ea:	e19c      	b.n	8011c26 <lwip_select+0x396>
  } else if (nready > 0) {
 80118ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f300 8177 	bgt.w	8011be2 <lwip_select+0x352>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 80118f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d009      	beq.n	801190e <lwip_select+0x7e>
 80118fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011900:	4313      	orrs	r3, r2
 8011902:	d104      	bne.n	801190e <lwip_select+0x7e>
 8011904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011906:	689b      	ldr	r3, [r3, #8]
 8011908:	2b00      	cmp	r3, #0
 801190a:	f000 8169 	beq.w	8011be0 <lwip_select+0x350>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 801190e:	f107 0310 	add.w	r3, r7, #16
 8011912:	2224      	movs	r2, #36	; 0x24
 8011914:	2100      	movs	r1, #0
 8011916:	4618      	mov	r0, r3
 8011918:	f00f fc30 	bl	802117c <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8011928:	f107 0310 	add.w	r3, r7, #16
 801192c:	3320      	adds	r3, #32
 801192e:	2100      	movs	r1, #0
 8011930:	4618      	mov	r0, r3
 8011932:	f00f f99c 	bl	8020c6e <sys_sem_new>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d005      	beq.n	8011948 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 801193c:	4b60      	ldr	r3, [pc, #384]	; (8011ac0 <lwip_select+0x230>)
 801193e:	220c      	movs	r2, #12
 8011940:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 8011942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011946:	e16e      	b.n	8011c26 <lwip_select+0x396>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8011948:	f107 0310 	add.w	r3, r7, #16
 801194c:	4618      	mov	r0, r3
 801194e:	f7ff fde1 	bl	8011514 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011956:	2300      	movs	r3, #0
 8011958:	663b      	str	r3, [r7, #96]	; 0x60
 801195a:	e06b      	b.n	8011a34 <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00d      	beq.n	801197e <lwip_select+0xee>
 8011962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011964:	095a      	lsrs	r2, r3, #5
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801196c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801196e:	f002 021f 	and.w	r2, r2, #31
 8011972:	2101      	movs	r1, #1
 8011974:	fa01 f202 	lsl.w	r2, r1, r2
 8011978:	4013      	ands	r3, r2
 801197a:	2b00      	cmp	r3, #0
 801197c:	d121      	bne.n	80119c2 <lwip_select+0x132>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00d      	beq.n	80119a0 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 8011984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011986:	095a      	lsrs	r2, r3, #5
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801198e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011990:	f002 021f 	and.w	r2, r2, #31
 8011994:	2101      	movs	r1, #1
 8011996:	fa01 f202 	lsl.w	r2, r1, r2
 801199a:	4013      	ands	r3, r2
 801199c:	2b00      	cmp	r3, #0
 801199e:	d110      	bne.n	80119c2 <lwip_select+0x132>
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d043      	beq.n	8011a2e <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 80119a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119a8:	095a      	lsrs	r2, r3, #5
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119b2:	f002 021f 	and.w	r2, r2, #31
 80119b6:	2101      	movs	r1, #1
 80119b8:	fa01 f202 	lsl.w	r2, r1, r2
 80119bc:	4013      	ands	r3, r2
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d035      	beq.n	8011a2e <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 80119c2:	f00f fa45 	bl	8020e50 <sys_arch_protect>
 80119c6:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 80119c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80119ca:	f7fe fd4c 	bl	8010466 <tryget_socket_unconn_locked>
 80119ce:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 80119d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d01f      	beq.n	8011a16 <lwip_select+0x186>
            sock->select_waiting++;
 80119d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119d8:	7b9b      	ldrb	r3, [r3, #14]
 80119da:	3301      	adds	r3, #1
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119e0:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 80119e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119e4:	7b9b      	ldrb	r3, [r3, #14]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d111      	bne.n	8011a0e <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 80119ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ec:	7b9b      	ldrb	r3, [r3, #14]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f4:	739a      	strb	r2, [r3, #14]
              nready = -1;
 80119f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119fa:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 80119fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119fe:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 8011a00:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011a02:	f00f fa33 	bl	8020e6c <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 8011a06:	4b2e      	ldr	r3, [pc, #184]	; (8011ac0 <lwip_select+0x230>)
 8011a08:	2210      	movs	r2, #16
 8011a0a:	601a      	str	r2, [r3, #0]
              break;
 8011a0c:	e016      	b.n	8011a3c <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 8011a0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011a10:	f00f fa2c 	bl	8020e6c <sys_arch_unprotect>
 8011a14:	e00b      	b.n	8011a2e <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 8011a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a1a:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 8011a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 8011a20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011a22:	f00f fa23 	bl	8020e6c <sys_arch_unprotect>
            set_errno(EBADF);
 8011a26:	4b26      	ldr	r3, [pc, #152]	; (8011ac0 <lwip_select+0x230>)
 8011a28:	2209      	movs	r2, #9
 8011a2a:	601a      	str	r2, [r3, #0]
            break;
 8011a2c:	e006      	b.n	8011a3c <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a30:	3301      	adds	r3, #1
 8011a32:	663b      	str	r3, [r7, #96]	; 0x60
 8011a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	db8f      	blt.n	801195c <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 8011a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	db3b      	blt.n	8011aba <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011a46:	9302      	str	r3, [sp, #8]
 8011a48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011a4c:	9301      	str	r3, [sp, #4]
 8011a4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	68b9      	ldr	r1, [r7, #8]
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f7ff fdc4 	bl	80115e8 <lwip_selscan>
 8011a60:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 8011a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d128      	bne.n	8011aba <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 8011a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d102      	bne.n	8011a74 <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	667b      	str	r3, [r7, #100]	; 0x64
 8011a72:	e01a      	b.n	8011aaa <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 8011a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a7e:	fb03 f202 	mul.w	r2, r3, r2
 8011a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011a8a:	490e      	ldr	r1, [pc, #56]	; (8011ac4 <lwip_select+0x234>)
 8011a8c:	fb81 0103 	smull	r0, r1, r1, r3
 8011a90:	1189      	asrs	r1, r1, #6
 8011a92:	17db      	asrs	r3, r3, #31
 8011a94:	1acb      	subs	r3, r1, r3
 8011a96:	4413      	add	r3, r2
 8011a98:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 8011a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	dc02      	bgt.n	8011aa6 <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	667b      	str	r3, [r7, #100]	; 0x64
 8011aa4:	e001      	b.n	8011aaa <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 8011aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aa8:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8011aaa:	f107 0310 	add.w	r3, r7, #16
 8011aae:	3320      	adds	r3, #32
 8011ab0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f00f f901 	bl	8020cba <sys_arch_sem_wait>
 8011ab8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8011aba:	2300      	movs	r3, #0
 8011abc:	663b      	str	r3, [r7, #96]	; 0x60
 8011abe:	e065      	b.n	8011b8c <lwip_select+0x2fc>
 8011ac0:	2001b1d8 	.word	0x2001b1d8
 8011ac4:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00d      	beq.n	8011aea <lwip_select+0x25a>
 8011ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ad0:	095a      	lsrs	r2, r3, #5
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ada:	f002 021f 	and.w	r2, r2, #31
 8011ade:	2101      	movs	r1, #1
 8011ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d121      	bne.n	8011b2e <lwip_select+0x29e>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00d      	beq.n	8011b0c <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 8011af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011af2:	095a      	lsrs	r2, r3, #5
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011afa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011afc:	f002 021f 	and.w	r2, r2, #31
 8011b00:	2101      	movs	r1, #1
 8011b02:	fa01 f202 	lsl.w	r2, r1, r2
 8011b06:	4013      	ands	r3, r2
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d110      	bne.n	8011b2e <lwip_select+0x29e>
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d039      	beq.n	8011b86 <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 8011b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b14:	095a      	lsrs	r2, r3, #5
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b1e:	f002 021f 	and.w	r2, r2, #31
 8011b22:	2101      	movs	r1, #1
 8011b24:	fa01 f202 	lsl.w	r2, r1, r2
 8011b28:	4013      	ands	r3, r2
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d02b      	beq.n	8011b86 <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 8011b2e:	f00f f98f 	bl	8020e50 <sys_arch_protect>
 8011b32:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 8011b34:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011b36:	f7fe fc96 	bl	8010466 <tryget_socket_unconn_locked>
 8011b3a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 8011b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d018      	beq.n	8011b74 <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 8011b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b44:	7b9b      	ldrb	r3, [r3, #14]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d106      	bne.n	8011b58 <lwip_select+0x2c8>
 8011b4a:	4b39      	ldr	r3, [pc, #228]	; (8011c30 <lwip_select+0x3a0>)
 8011b4c:	f640 023c 	movw	r2, #2108	; 0x83c
 8011b50:	4938      	ldr	r1, [pc, #224]	; (8011c34 <lwip_select+0x3a4>)
 8011b52:	4839      	ldr	r0, [pc, #228]	; (8011c38 <lwip_select+0x3a8>)
 8011b54:	f010 f82e 	bl	8021bb4 <iprintf>
            if (sock->select_waiting > 0) {
 8011b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b5a:	7b9b      	ldrb	r3, [r3, #14]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d005      	beq.n	8011b6c <lwip_select+0x2dc>
              sock->select_waiting--;
 8011b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b62:	7b9b      	ldrb	r3, [r3, #14]
 8011b64:	3b01      	subs	r3, #1
 8011b66:	b2da      	uxtb	r2, r3
 8011b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b6a:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 8011b6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011b6e:	f00f f97d 	bl	8020e6c <sys_arch_unprotect>
 8011b72:	e008      	b.n	8011b86 <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 8011b74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011b76:	f00f f979 	bl	8020e6c <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 8011b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b7e:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 8011b80:	4b2e      	ldr	r3, [pc, #184]	; (8011c3c <lwip_select+0x3ac>)
 8011b82:	2209      	movs	r2, #9
 8011b84:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8011b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b88:	3301      	adds	r3, #1
 8011b8a:	663b      	str	r3, [r7, #96]	; 0x60
 8011b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b90:	429a      	cmp	r2, r3
 8011b92:	db99      	blt.n	8011ac8 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8011b94:	f107 0310 	add.w	r3, r7, #16
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7ff fcdd 	bl	8011558 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 8011b9e:	f107 0310 	add.w	r3, r7, #16
 8011ba2:	3320      	adds	r3, #32
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f00f f8c6 	bl	8020d36 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 8011baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	da02      	bge.n	8011bb6 <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 8011bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bb4:	e037      	b.n	8011c26 <lwip_select+0x396>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 8011bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bbc:	d011      	beq.n	8011be2 <lwip_select+0x352>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011bc2:	9302      	str	r3, [sp, #8]
 8011bc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	68b9      	ldr	r1, [r7, #8]
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	f7ff fd06 	bl	80115e8 <lwip_selscan>
 8011bdc:	66b8      	str	r0, [r7, #104]	; 0x68
 8011bde:	e000      	b.n	8011be2 <lwip_select+0x352>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
 8011be0:	bf00      	nop
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d007      	beq.n	8011bf8 <lwip_select+0x368>
    *readset = lreadset;
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	461a      	mov	r2, r3
 8011bec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011bf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011bf4:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d007      	beq.n	8011c0e <lwip_select+0x37e>
    *writeset = lwriteset;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	461a      	mov	r2, r3
 8011c02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011c06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c0a:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d007      	beq.n	8011c24 <lwip_select+0x394>
    *exceptset = lexceptset;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	461a      	mov	r2, r3
 8011c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c20:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 8011c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3770      	adds	r7, #112	; 0x70
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	08026300 	.word	0x08026300
 8011c34:	0802663c 	.word	0x0802663c
 8011c38:	08026354 	.word	0x08026354
 8011c3c:	2001b1d8 	.word	0x2001b1d8

08011c40 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b087      	sub	sp, #28
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011c4e:	2300      	movs	r3, #0
 8011c50:	617b      	str	r3, [r7, #20]
 8011c52:	e02c      	b.n	8011cae <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	695a      	ldr	r2, [r3, #20]
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	00db      	lsls	r3, r3, #3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d11e      	bne.n	8011ca8 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d009      	beq.n	8011c84 <lwip_poll_should_wake+0x44>
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <lwip_poll_should_wake+0x44>
        return 1;
 8011c80:	2301      	movs	r3, #1
 8011c82:	e01a      	b.n	8011cba <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d009      	beq.n	8011c9e <lwip_poll_should_wake+0x5e>
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	f003 0302 	and.w	r3, r3, #2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <lwip_poll_should_wake+0x5e>
        return 1;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e00d      	b.n	8011cba <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8011c9e:	6a3b      	ldr	r3, [r7, #32]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d001      	beq.n	8011ca8 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e008      	b.n	8011cba <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	3301      	adds	r3, #1
 8011cac:	617b      	str	r3, [r7, #20]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d3cd      	bcc.n	8011c54 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8011cb8:	2300      	movs	r3, #0
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	371c      	adds	r7, #28
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr
	...

08011cc8 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b08a      	sub	sp, #40	; 0x28
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	70fb      	strb	r3, [r7, #3]
 8011cd4:	4613      	mov	r3, r2
 8011cd6:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f000 80a4 	beq.w	8011e28 <event_callback+0x160>
    s = conn->socket;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	699b      	ldr	r3, [r3, #24]
 8011ce4:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	da18      	bge.n	8011d1e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8011cec:	f00f f8b0 	bl	8020e50 <sys_arch_protect>
 8011cf0:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	699b      	ldr	r3, [r3, #24]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	da0b      	bge.n	8011d12 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8011cfa:	78fb      	ldrb	r3, [r7, #3]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d104      	bne.n	8011d0a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	699b      	ldr	r3, [r3, #24]
 8011d04:	1e5a      	subs	r2, r3, #1
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8011d0a:	69f8      	ldr	r0, [r7, #28]
 8011d0c:	f00f f8ae 	bl	8020e6c <sys_arch_unprotect>
        return;
 8011d10:	e08d      	b.n	8011e2e <event_callback+0x166>
      }
      s = conn->socket;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	699b      	ldr	r3, [r3, #24]
 8011d16:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8011d18:	69f8      	ldr	r0, [r7, #28]
 8011d1a:	f00f f8a7 	bl	8020e6c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8011d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d20:	f7fe fbc4 	bl	80104ac <get_socket>
 8011d24:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d07f      	beq.n	8011e2c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8011d30:	f00f f88e 	bl	8020e50 <sys_arch_protect>
 8011d34:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8011d36:	78fb      	ldrb	r3, [r7, #3]
 8011d38:	2b04      	cmp	r3, #4
 8011d3a:	d83e      	bhi.n	8011dba <event_callback+0xf2>
 8011d3c:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <event_callback+0x7c>)
 8011d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d42:	bf00      	nop
 8011d44:	08011d59 	.word	0x08011d59
 8011d48:	08011d7b 	.word	0x08011d7b
 8011d4c:	08011d93 	.word	0x08011d93
 8011d50:	08011da7 	.word	0x08011da7
 8011d54:	08011db3 	.word	0x08011db3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	3301      	adds	r3, #1
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	b21a      	sxth	r2, r3
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	dd2a      	ble.n	8011dca <event_callback+0x102>
        check_waiters = 0;
 8011d74:	2300      	movs	r3, #0
 8011d76:	623b      	str	r3, [r7, #32]
      }
      break;
 8011d78:	e027      	b.n	8011dca <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8011d7a:	69bb      	ldr	r3, [r7, #24]
 8011d7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	3b01      	subs	r3, #1
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	b21a      	sxth	r2, r3
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	623b      	str	r3, [r7, #32]
      break;
 8011d90:	e01c      	b.n	8011dcc <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	895b      	ldrh	r3, [r3, #10]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <event_callback+0xd6>
        check_waiters = 0;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8011d9e:	69bb      	ldr	r3, [r7, #24]
 8011da0:	2201      	movs	r2, #1
 8011da2:	815a      	strh	r2, [r3, #10]
      break;
 8011da4:	e012      	b.n	8011dcc <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	2200      	movs	r2, #0
 8011daa:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	623b      	str	r3, [r7, #32]
      break;
 8011db0:	e00c      	b.n	8011dcc <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	2201      	movs	r2, #1
 8011db6:	819a      	strh	r2, [r3, #12]
      break;
 8011db8:	e008      	b.n	8011dcc <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8011dba:	4b1e      	ldr	r3, [pc, #120]	; (8011e34 <event_callback+0x16c>)
 8011dbc:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8011dc0:	491d      	ldr	r1, [pc, #116]	; (8011e38 <event_callback+0x170>)
 8011dc2:	481e      	ldr	r0, [pc, #120]	; (8011e3c <event_callback+0x174>)
 8011dc4:	f00f fef6 	bl	8021bb4 <iprintf>
      break;
 8011dc8:	e000      	b.n	8011dcc <event_callback+0x104>
      break;
 8011dca:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	7b9b      	ldrb	r3, [r3, #14]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d025      	beq.n	8011e20 <event_callback+0x158>
 8011dd4:	6a3b      	ldr	r3, [r7, #32]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d022      	beq.n	8011e20 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	bfcc      	ite	gt
 8011de4:	2301      	movgt	r3, #1
 8011de6:	2300      	movle	r3, #0
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	895b      	ldrh	r3, [r3, #10]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	bf14      	ite	ne
 8011df4:	2301      	movne	r3, #1
 8011df6:	2300      	moveq	r3, #0
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	899b      	ldrh	r3, [r3, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	bf14      	ite	ne
 8011e04:	2301      	movne	r3, #1
 8011e06:	2300      	moveq	r3, #0
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8011e0c:	69f8      	ldr	r0, [r7, #28]
 8011e0e:	f00f f82d 	bl	8020e6c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	693a      	ldr	r2, [r7, #16]
 8011e16:	6979      	ldr	r1, [r7, #20]
 8011e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e1a:	f000 f811 	bl	8011e40 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8011e1e:	e006      	b.n	8011e2e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8011e20:	69f8      	ldr	r0, [r7, #28]
 8011e22:	f00f f823 	bl	8020e6c <sys_arch_unprotect>
 8011e26:	e002      	b.n	8011e2e <event_callback+0x166>
    return;
 8011e28:	bf00      	nop
 8011e2a:	e000      	b.n	8011e2e <event_callback+0x166>
      return;
 8011e2c:	bf00      	nop
  }
  done_socket(sock);
}
 8011e2e:	3728      	adds	r7, #40	; 0x28
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	08026300 	.word	0x08026300
 8011e38:	0802667c 	.word	0x0802667c
 8011e3c:	08026354 	.word	0x08026354

08011e40 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b088      	sub	sp, #32
 8011e44:	af02      	add	r7, sp, #8
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	607a      	str	r2, [r7, #4]
 8011e4c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8011e4e:	4b3e      	ldr	r3, [pc, #248]	; (8011f48 <select_check_waiters+0x108>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	617b      	str	r3, [r7, #20]
 8011e54:	e06f      	b.n	8011f36 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	69db      	ldr	r3, [r3, #28]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d168      	bne.n	8011f30 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	695b      	ldr	r3, [r3, #20]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d009      	beq.n	8011e7e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	9300      	str	r3, [sp, #0]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68ba      	ldr	r2, [r7, #8]
 8011e72:	68f9      	ldr	r1, [r7, #12]
 8011e74:	6978      	ldr	r0, [r7, #20]
 8011e76:	f7ff fee3 	bl	8011c40 <lwip_poll_should_wake>
 8011e7a:	6138      	str	r0, [r7, #16]
 8011e7c:	e04d      	b.n	8011f1a <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d014      	beq.n	8011eae <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	689b      	ldr	r3, [r3, #8]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d010      	beq.n	8011eae <select_check_waiters+0x6e>
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	68fa      	ldr	r2, [r7, #12]
 8011e92:	0952      	lsrs	r2, r2, #5
 8011e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	f002 021f 	and.w	r2, r2, #31
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8011ea4:	4013      	ands	r3, r2
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d001      	beq.n	8011eae <select_check_waiters+0x6e>
            do_signal = 1;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d017      	beq.n	8011ee4 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d114      	bne.n	8011ee4 <select_check_waiters+0xa4>
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d010      	beq.n	8011ee4 <select_check_waiters+0xa4>
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	0952      	lsrs	r2, r2, #5
 8011eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	f002 021f 	and.w	r2, r2, #31
 8011ed4:	2101      	movs	r1, #1
 8011ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8011eda:	4013      	ands	r3, r2
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <select_check_waiters+0xa4>
            do_signal = 1;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d017      	beq.n	8011f1a <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d114      	bne.n	8011f1a <select_check_waiters+0xda>
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d010      	beq.n	8011f1a <select_check_waiters+0xda>
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	691b      	ldr	r3, [r3, #16]
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	0952      	lsrs	r2, r2, #5
 8011f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f04:	68fa      	ldr	r2, [r7, #12]
 8011f06:	f002 021f 	and.w	r2, r2, #31
 8011f0a:	2101      	movs	r1, #1
 8011f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8011f10:	4013      	ands	r3, r2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <select_check_waiters+0xda>
            do_signal = 1;
 8011f16:	2301      	movs	r3, #1
 8011f18:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d007      	beq.n	8011f30 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	2201      	movs	r2, #1
 8011f24:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	3320      	adds	r3, #32
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f00e fef6 	bl	8020d1c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	617b      	str	r3, [r7, #20]
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d18c      	bne.n	8011e56 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8011f3c:	bf00      	nop
 8011f3e:	bf00      	nop
 8011f40:	3718      	adds	r7, #24
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20013e6c 	.word	0x20013e6c

08011f4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011f56:	f009 fcdf 	bl	801b918 <sys_timeouts_sleeptime>
 8011f5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f62:	d10b      	bne.n	8011f7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011f64:	4813      	ldr	r0, [pc, #76]	; (8011fb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f66:	f00e ff48 	bl	8020dfa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f00e fe04 	bl	8020b7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011f74:	480f      	ldr	r0, [pc, #60]	; (8011fb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f76:	f00e ff31 	bl	8020ddc <sys_mutex_lock>
    return;
 8011f7a:	e018      	b.n	8011fae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d102      	bne.n	8011f88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011f82:	f009 fc8f 	bl	801b8a4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011f86:	e7e6      	b.n	8011f56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011f88:	480a      	ldr	r0, [pc, #40]	; (8011fb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f8a:	f00e ff36 	bl	8020dfa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	6839      	ldr	r1, [r7, #0]
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f00e fdf2 	bl	8020b7c <sys_arch_mbox_fetch>
 8011f98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011f9a:	4806      	ldr	r0, [pc, #24]	; (8011fb4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011f9c:	f00e ff1e 	bl	8020ddc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fa6:	d102      	bne.n	8011fae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011fa8:	f009 fc7c 	bl	801b8a4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011fac:	e7d3      	b.n	8011f56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20017790 	.word	0x20017790

08011fb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011fc0:	4810      	ldr	r0, [pc, #64]	; (8012004 <tcpip_thread+0x4c>)
 8011fc2:	f00e ff0b 	bl	8020ddc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011fc6:	4b10      	ldr	r3, [pc, #64]	; (8012008 <tcpip_thread+0x50>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d005      	beq.n	8011fda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011fce:	4b0e      	ldr	r3, [pc, #56]	; (8012008 <tcpip_thread+0x50>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4a0e      	ldr	r2, [pc, #56]	; (801200c <tcpip_thread+0x54>)
 8011fd4:	6812      	ldr	r2, [r2, #0]
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011fda:	f107 030c 	add.w	r3, r7, #12
 8011fde:	4619      	mov	r1, r3
 8011fe0:	480b      	ldr	r0, [pc, #44]	; (8012010 <tcpip_thread+0x58>)
 8011fe2:	f7ff ffb3 	bl	8011f4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d106      	bne.n	8011ffa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011fec:	4b09      	ldr	r3, [pc, #36]	; (8012014 <tcpip_thread+0x5c>)
 8011fee:	2291      	movs	r2, #145	; 0x91
 8011ff0:	4909      	ldr	r1, [pc, #36]	; (8012018 <tcpip_thread+0x60>)
 8011ff2:	480a      	ldr	r0, [pc, #40]	; (801201c <tcpip_thread+0x64>)
 8011ff4:	f00f fdde 	bl	8021bb4 <iprintf>
      continue;
 8011ff8:	e003      	b.n	8012002 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f000 f80f 	bl	8012020 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012002:	e7ea      	b.n	8011fda <tcpip_thread+0x22>
 8012004:	20017790 	.word	0x20017790
 8012008:	20013e70 	.word	0x20013e70
 801200c:	20013e74 	.word	0x20013e74
 8012010:	20013e78 	.word	0x20013e78
 8012014:	080266d0 	.word	0x080266d0
 8012018:	08026700 	.word	0x08026700
 801201c:	08026720 	.word	0x08026720

08012020 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	2b02      	cmp	r3, #2
 801202e:	d026      	beq.n	801207e <tcpip_thread_handle_msg+0x5e>
 8012030:	2b02      	cmp	r3, #2
 8012032:	dc2b      	bgt.n	801208c <tcpip_thread_handle_msg+0x6c>
 8012034:	2b00      	cmp	r3, #0
 8012036:	d002      	beq.n	801203e <tcpip_thread_handle_msg+0x1e>
 8012038:	2b01      	cmp	r3, #1
 801203a:	d015      	beq.n	8012068 <tcpip_thread_handle_msg+0x48>
 801203c:	e026      	b.n	801208c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	687a      	ldr	r2, [r7, #4]
 8012044:	6850      	ldr	r0, [r2, #4]
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	6892      	ldr	r2, [r2, #8]
 801204a:	4611      	mov	r1, r2
 801204c:	4798      	blx	r3
 801204e:	4603      	mov	r3, r0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d004      	beq.n	801205e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	4618      	mov	r0, r3
 801205a:	f002 fcef 	bl	8014a3c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801205e:	6879      	ldr	r1, [r7, #4]
 8012060:	2009      	movs	r0, #9
 8012062:	f001 fe09 	bl	8013c78 <memp_free>
      break;
 8012066:	e018      	b.n	801209a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	6892      	ldr	r2, [r2, #8]
 8012070:	4610      	mov	r0, r2
 8012072:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012074:	6879      	ldr	r1, [r7, #4]
 8012076:	2008      	movs	r0, #8
 8012078:	f001 fdfe 	bl	8013c78 <memp_free>
      break;
 801207c:	e00d      	b.n	801209a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	6892      	ldr	r2, [r2, #8]
 8012086:	4610      	mov	r0, r2
 8012088:	4798      	blx	r3
      break;
 801208a:	e006      	b.n	801209a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801208c:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <tcpip_thread_handle_msg+0x84>)
 801208e:	22cf      	movs	r2, #207	; 0xcf
 8012090:	4905      	ldr	r1, [pc, #20]	; (80120a8 <tcpip_thread_handle_msg+0x88>)
 8012092:	4806      	ldr	r0, [pc, #24]	; (80120ac <tcpip_thread_handle_msg+0x8c>)
 8012094:	f00f fd8e 	bl	8021bb4 <iprintf>
      break;
 8012098:	bf00      	nop
  }
}
 801209a:	bf00      	nop
 801209c:	3708      	adds	r7, #8
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	080266d0 	.word	0x080266d0
 80120a8:	08026700 	.word	0x08026700
 80120ac:	08026720 	.word	0x08026720

080120b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b086      	sub	sp, #24
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80120bc:	481a      	ldr	r0, [pc, #104]	; (8012128 <tcpip_inpkt+0x78>)
 80120be:	f00e fdb8 	bl	8020c32 <sys_mbox_valid>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d105      	bne.n	80120d4 <tcpip_inpkt+0x24>
 80120c8:	4b18      	ldr	r3, [pc, #96]	; (801212c <tcpip_inpkt+0x7c>)
 80120ca:	22fc      	movs	r2, #252	; 0xfc
 80120cc:	4918      	ldr	r1, [pc, #96]	; (8012130 <tcpip_inpkt+0x80>)
 80120ce:	4819      	ldr	r0, [pc, #100]	; (8012134 <tcpip_inpkt+0x84>)
 80120d0:	f00f fd70 	bl	8021bb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80120d4:	2009      	movs	r0, #9
 80120d6:	f001 fd7d 	bl	8013bd4 <memp_malloc>
 80120da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d102      	bne.n	80120e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80120e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120e6:	e01a      	b.n	801211e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	2200      	movs	r2, #0
 80120ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	68fa      	ldr	r2, [r7, #12]
 80120f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	68ba      	ldr	r2, [r7, #8]
 80120f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012100:	6979      	ldr	r1, [r7, #20]
 8012102:	4809      	ldr	r0, [pc, #36]	; (8012128 <tcpip_inpkt+0x78>)
 8012104:	f00e fd20 	bl	8020b48 <sys_mbox_trypost>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d006      	beq.n	801211c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801210e:	6979      	ldr	r1, [r7, #20]
 8012110:	2009      	movs	r0, #9
 8012112:	f001 fdb1 	bl	8013c78 <memp_free>
    return ERR_MEM;
 8012116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801211a:	e000      	b.n	801211e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801211c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801211e:	4618      	mov	r0, r3
 8012120:	3718      	adds	r7, #24
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	20013e78 	.word	0x20013e78
 801212c:	080266d0 	.word	0x080266d0
 8012130:	08026748 	.word	0x08026748
 8012134:	08026720 	.word	0x08026720

08012138 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012148:	f003 0318 	and.w	r3, r3, #24
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012150:	4a08      	ldr	r2, [pc, #32]	; (8012174 <tcpip_input+0x3c>)
 8012152:	6839      	ldr	r1, [r7, #0]
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff ffab 	bl	80120b0 <tcpip_inpkt>
 801215a:	4603      	mov	r3, r0
 801215c:	e005      	b.n	801216a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801215e:	4a06      	ldr	r2, [pc, #24]	; (8012178 <tcpip_input+0x40>)
 8012160:	6839      	ldr	r1, [r7, #0]
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7ff ffa4 	bl	80120b0 <tcpip_inpkt>
 8012168:	4603      	mov	r3, r0
}
 801216a:	4618      	mov	r0, r3
 801216c:	3708      	adds	r7, #8
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	0802093d 	.word	0x0802093d
 8012178:	0801f5c1 	.word	0x0801f5c1

0801217c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b084      	sub	sp, #16
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012186:	4819      	ldr	r0, [pc, #100]	; (80121ec <tcpip_try_callback+0x70>)
 8012188:	f00e fd53 	bl	8020c32 <sys_mbox_valid>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d106      	bne.n	80121a0 <tcpip_try_callback+0x24>
 8012192:	4b17      	ldr	r3, [pc, #92]	; (80121f0 <tcpip_try_callback+0x74>)
 8012194:	f240 125d 	movw	r2, #349	; 0x15d
 8012198:	4916      	ldr	r1, [pc, #88]	; (80121f4 <tcpip_try_callback+0x78>)
 801219a:	4817      	ldr	r0, [pc, #92]	; (80121f8 <tcpip_try_callback+0x7c>)
 801219c:	f00f fd0a 	bl	8021bb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80121a0:	2008      	movs	r0, #8
 80121a2:	f001 fd17 	bl	8013bd4 <memp_malloc>
 80121a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d102      	bne.n	80121b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80121ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121b2:	e017      	b.n	80121e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2201      	movs	r2, #1
 80121b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	683a      	ldr	r2, [r7, #0]
 80121c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80121c6:	68f9      	ldr	r1, [r7, #12]
 80121c8:	4808      	ldr	r0, [pc, #32]	; (80121ec <tcpip_try_callback+0x70>)
 80121ca:	f00e fcbd 	bl	8020b48 <sys_mbox_trypost>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d006      	beq.n	80121e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80121d4:	68f9      	ldr	r1, [r7, #12]
 80121d6:	2008      	movs	r0, #8
 80121d8:	f001 fd4e 	bl	8013c78 <memp_free>
    return ERR_MEM;
 80121dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121e0:	e000      	b.n	80121e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80121e2:	2300      	movs	r3, #0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3710      	adds	r7, #16
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	20013e78 	.word	0x20013e78
 80121f0:	080266d0 	.word	0x080266d0
 80121f4:	08026748 	.word	0x08026748
 80121f8:	08026720 	.word	0x08026720

080121fc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012208:	4806      	ldr	r0, [pc, #24]	; (8012224 <tcpip_send_msg_wait_sem+0x28>)
 801220a:	f00e fde7 	bl	8020ddc <sys_mutex_lock>
  fn(apimsg);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	68b8      	ldr	r0, [r7, #8]
 8012212:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012214:	4803      	ldr	r0, [pc, #12]	; (8012224 <tcpip_send_msg_wait_sem+0x28>)
 8012216:	f00e fdf0 	bl	8020dfa <sys_mutex_unlock>
  return ERR_OK;
 801221a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801221c:	4618      	mov	r0, r3
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	20017790 	.word	0x20017790

08012228 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af02      	add	r7, sp, #8
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012232:	f001 f845 	bl	80132c0 <lwip_init>

  tcpip_init_done = initfunc;
 8012236:	4a17      	ldr	r2, [pc, #92]	; (8012294 <tcpip_init+0x6c>)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801223c:	4a16      	ldr	r2, [pc, #88]	; (8012298 <tcpip_init+0x70>)
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012242:	2106      	movs	r1, #6
 8012244:	4815      	ldr	r0, [pc, #84]	; (801229c <tcpip_init+0x74>)
 8012246:	f00e fc4f 	bl	8020ae8 <sys_mbox_new>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d006      	beq.n	801225e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012250:	4b13      	ldr	r3, [pc, #76]	; (80122a0 <tcpip_init+0x78>)
 8012252:	f240 2261 	movw	r2, #609	; 0x261
 8012256:	4913      	ldr	r1, [pc, #76]	; (80122a4 <tcpip_init+0x7c>)
 8012258:	4813      	ldr	r0, [pc, #76]	; (80122a8 <tcpip_init+0x80>)
 801225a:	f00f fcab 	bl	8021bb4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801225e:	4813      	ldr	r0, [pc, #76]	; (80122ac <tcpip_init+0x84>)
 8012260:	f00e fda2 	bl	8020da8 <sys_mutex_new>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d006      	beq.n	8012278 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801226a:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <tcpip_init+0x78>)
 801226c:	f240 2265 	movw	r2, #613	; 0x265
 8012270:	490f      	ldr	r1, [pc, #60]	; (80122b0 <tcpip_init+0x88>)
 8012272:	480d      	ldr	r0, [pc, #52]	; (80122a8 <tcpip_init+0x80>)
 8012274:	f00f fc9e 	bl	8021bb4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012278:	2300      	movs	r3, #0
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012280:	2200      	movs	r2, #0
 8012282:	490c      	ldr	r1, [pc, #48]	; (80122b4 <tcpip_init+0x8c>)
 8012284:	480c      	ldr	r0, [pc, #48]	; (80122b8 <tcpip_init+0x90>)
 8012286:	f00e fdc5 	bl	8020e14 <sys_thread_new>
}
 801228a:	bf00      	nop
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	20013e70 	.word	0x20013e70
 8012298:	20013e74 	.word	0x20013e74
 801229c:	20013e78 	.word	0x20013e78
 80122a0:	080266d0 	.word	0x080266d0
 80122a4:	08026758 	.word	0x08026758
 80122a8:	08026720 	.word	0x08026720
 80122ac:	20017790 	.word	0x20017790
 80122b0:	0802677c 	.word	0x0802677c
 80122b4:	08011fb9 	.word	0x08011fb9
 80122b8:	080267a0 	.word	0x080267a0

080122bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80122c6:	88fb      	ldrh	r3, [r7, #6]
 80122c8:	021b      	lsls	r3, r3, #8
 80122ca:	b21a      	sxth	r2, r3
 80122cc:	88fb      	ldrh	r3, [r7, #6]
 80122ce:	0a1b      	lsrs	r3, r3, #8
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	b21b      	sxth	r3, r3
 80122d4:	4313      	orrs	r3, r2
 80122d6:	b21b      	sxth	r3, r3
 80122d8:	b29b      	uxth	r3, r3
}
 80122da:	4618      	mov	r0, r3
 80122dc:	370c      	adds	r7, #12
 80122de:	46bd      	mov	sp, r7
 80122e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e4:	4770      	bx	lr

080122e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80122e6:	b480      	push	{r7}
 80122e8:	b083      	sub	sp, #12
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	061a      	lsls	r2, r3, #24
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	021b      	lsls	r3, r3, #8
 80122f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80122fa:	431a      	orrs	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	0a1b      	lsrs	r3, r3, #8
 8012300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012304:	431a      	orrs	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	0e1b      	lsrs	r3, r3, #24
 801230a:	4313      	orrs	r3, r2
}
 801230c:	4618      	mov	r0, r3
 801230e:	370c      	adds	r7, #12
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8012318:	b480      	push	{r7}
 801231a:	b087      	sub	sp, #28
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	1c5a      	adds	r2, r3, #1
 8012328:	60fa      	str	r2, [r7, #12]
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	1c5a      	adds	r2, r3, #1
 8012332:	60ba      	str	r2, [r7, #8]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 8012338:	7dfa      	ldrb	r2, [r7, #23]
 801233a:	7dbb      	ldrb	r3, [r7, #22]
 801233c:	429a      	cmp	r2, r3
 801233e:	d016      	beq.n	801236e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8012340:	7dfb      	ldrb	r3, [r7, #23]
 8012342:	f043 0320 	orr.w	r3, r3, #32
 8012346:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8012348:	7d7b      	ldrb	r3, [r7, #21]
 801234a:	2b60      	cmp	r3, #96	; 0x60
 801234c:	d90c      	bls.n	8012368 <lwip_strnicmp+0x50>
 801234e:	7d7b      	ldrb	r3, [r7, #21]
 8012350:	2b7a      	cmp	r3, #122	; 0x7a
 8012352:	d809      	bhi.n	8012368 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8012354:	7dbb      	ldrb	r3, [r7, #22]
 8012356:	f043 0320 	orr.w	r3, r3, #32
 801235a:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 801235c:	7d7a      	ldrb	r2, [r7, #21]
 801235e:	7d3b      	ldrb	r3, [r7, #20]
 8012360:	429a      	cmp	r2, r3
 8012362:	d003      	beq.n	801236c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8012364:	2301      	movs	r3, #1
 8012366:	e00c      	b.n	8012382 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8012368:	2301      	movs	r3, #1
 801236a:	e00a      	b.n	8012382 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801236c:	bf00      	nop
      }
    }
    len--;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	3b01      	subs	r3, #1
 8012372:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d002      	beq.n	8012380 <lwip_strnicmp+0x68>
 801237a:	7dfb      	ldrb	r3, [r7, #23]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1d1      	bne.n	8012324 <lwip_strnicmp+0xc>
  return 0;
 8012380:	2300      	movs	r3, #0
}
 8012382:	4618      	mov	r0, r3
 8012384:	371c      	adds	r7, #28
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr

0801238e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 801238e:	b480      	push	{r7}
 8012390:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8012392:	bf00      	nop
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr

0801239c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 801239c:	b480      	push	{r7}
 801239e:	b083      	sub	sp, #12
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	4603      	mov	r3, r0
 80123a4:	6039      	str	r1, [r7, #0]
 80123a6:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d80f      	bhi.n	80123ce <dns_setserver+0x32>
    if (dnsserver != NULL) {
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d006      	beq.n	80123c2 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 80123b4:	79fb      	ldrb	r3, [r7, #7]
 80123b6:	4909      	ldr	r1, [pc, #36]	; (80123dc <dns_setserver+0x40>)
 80123b8:	683a      	ldr	r2, [r7, #0]
 80123ba:	6812      	ldr	r2, [r2, #0]
 80123bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 80123c0:	e005      	b.n	80123ce <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 80123c2:	79fb      	ldrb	r3, [r7, #7]
 80123c4:	4905      	ldr	r1, [pc, #20]	; (80123dc <dns_setserver+0x40>)
 80123c6:	4a06      	ldr	r2, [pc, #24]	; (80123e0 <dns_setserver+0x44>)
 80123c8:	6812      	ldr	r2, [r2, #0]
 80123ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80123ce:	bf00      	nop
 80123d0:	370c      	adds	r7, #12
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop
 80123dc:	20014300 	.word	0x20014300
 80123e0:	080299c0 	.word	0x080299c0

080123e4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80123e8:	f000 fc54 	bl	8012c94 <dns_check_entries>
}
 80123ec:	bf00      	nop
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80123fa:	2300      	movs	r3, #0
 80123fc:	73fb      	strb	r3, [r7, #15]
 80123fe:	e02e      	b.n	801245e <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8012400:	7bfa      	ldrb	r2, [r7, #15]
 8012402:	491b      	ldr	r1, [pc, #108]	; (8012470 <dns_lookup+0x80>)
 8012404:	4613      	mov	r3, r2
 8012406:	011b      	lsls	r3, r3, #4
 8012408:	4413      	add	r3, r2
 801240a:	011b      	lsls	r3, r3, #4
 801240c:	440b      	add	r3, r1
 801240e:	330a      	adds	r3, #10
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	2b03      	cmp	r3, #3
 8012414:	d120      	bne.n	8012458 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8012416:	7bfa      	ldrb	r2, [r7, #15]
 8012418:	4613      	mov	r3, r2
 801241a:	011b      	lsls	r3, r3, #4
 801241c:	4413      	add	r3, r2
 801241e:	011b      	lsls	r3, r3, #4
 8012420:	3310      	adds	r3, #16
 8012422:	4a13      	ldr	r2, [pc, #76]	; (8012470 <dns_lookup+0x80>)
 8012424:	4413      	add	r3, r2
 8012426:	f44f 7280 	mov.w	r2, #256	; 0x100
 801242a:	4619      	mov	r1, r3
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7ff ff73 	bl	8012318 <lwip_strnicmp>
 8012432:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10f      	bne.n	8012458 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d00a      	beq.n	8012454 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801243e:	7bfa      	ldrb	r2, [r7, #15]
 8012440:	490b      	ldr	r1, [pc, #44]	; (8012470 <dns_lookup+0x80>)
 8012442:	4613      	mov	r3, r2
 8012444:	011b      	lsls	r3, r3, #4
 8012446:	4413      	add	r3, r2
 8012448:	011b      	lsls	r3, r3, #4
 801244a:	440b      	add	r3, r1
 801244c:	3304      	adds	r3, #4
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 8012454:	2300      	movs	r3, #0
 8012456:	e007      	b.n	8012468 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012458:	7bfb      	ldrb	r3, [r7, #15]
 801245a:	3301      	adds	r3, #1
 801245c:	73fb      	strb	r3, [r7, #15]
 801245e:	7bfb      	ldrb	r3, [r7, #15]
 8012460:	2b03      	cmp	r3, #3
 8012462:	d9cd      	bls.n	8012400 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 8012464:	f06f 030f 	mvn.w	r3, #15
}
 8012468:	4618      	mov	r0, r3
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	20013e90 	.word	0x20013e90

08012474 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b088      	sub	sp, #32
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	4613      	mov	r3, r2
 8012480:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 8012482:	88fb      	ldrh	r3, [r7, #6]
 8012484:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 8012486:	8b7b      	ldrh	r3, [r7, #26]
 8012488:	4619      	mov	r1, r3
 801248a:	68b8      	ldr	r0, [r7, #8]
 801248c:	f002 feb8 	bl	8015200 <pbuf_try_get_at>
 8012490:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	2b00      	cmp	r3, #0
 8012496:	db04      	blt.n	80124a2 <dns_compare_name+0x2e>
 8012498:	8b7b      	ldrh	r3, [r7, #26]
 801249a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801249e:	4293      	cmp	r3, r2
 80124a0:	d102      	bne.n	80124a8 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 80124a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124a6:	e06c      	b.n	8012582 <dns_compare_name+0x10e>
    }
    response_offset++;
 80124a8:	8b7b      	ldrh	r3, [r7, #26]
 80124aa:	3301      	adds	r3, #1
 80124ac:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80124b4:	2bc0      	cmp	r3, #192	; 0xc0
 80124b6:	d144      	bne.n	8012542 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 80124b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124bc:	e061      	b.n	8012582 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 80124be:	8b7b      	ldrh	r3, [r7, #26]
 80124c0:	4619      	mov	r1, r3
 80124c2:	68b8      	ldr	r0, [r7, #8]
 80124c4:	f002 fe9c 	bl	8015200 <pbuf_try_get_at>
 80124c8:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	da02      	bge.n	80124d6 <dns_compare_name+0x62>
          return 0xFFFF;
 80124d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124d4:	e055      	b.n	8012582 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	74fb      	strb	r3, [r7, #19]
 80124dc:	7cfb      	ldrb	r3, [r7, #19]
 80124de:	3301      	adds	r3, #1
 80124e0:	4a2a      	ldr	r2, [pc, #168]	; (801258c <dns_compare_name+0x118>)
 80124e2:	4413      	add	r3, r2
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	f003 0303 	and.w	r3, r3, #3
 80124ea:	2b01      	cmp	r3, #1
 80124ec:	d103      	bne.n	80124f6 <dns_compare_name+0x82>
 80124ee:	7cfb      	ldrb	r3, [r7, #19]
 80124f0:	f103 0220 	add.w	r2, r3, #32
 80124f4:	e000      	b.n	80124f8 <dns_compare_name+0x84>
 80124f6:	7cfa      	ldrb	r2, [r7, #19]
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	74bb      	strb	r3, [r7, #18]
 80124fc:	7cbb      	ldrb	r3, [r7, #18]
 80124fe:	3301      	adds	r3, #1
 8012500:	4922      	ldr	r1, [pc, #136]	; (801258c <dns_compare_name+0x118>)
 8012502:	440b      	add	r3, r1
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	f003 0303 	and.w	r3, r3, #3
 801250a:	2b01      	cmp	r3, #1
 801250c:	d102      	bne.n	8012514 <dns_compare_name+0xa0>
 801250e:	7cbb      	ldrb	r3, [r7, #18]
 8012510:	3320      	adds	r3, #32
 8012512:	e000      	b.n	8012516 <dns_compare_name+0xa2>
 8012514:	7cbb      	ldrb	r3, [r7, #18]
 8012516:	429a      	cmp	r2, r3
 8012518:	d002      	beq.n	8012520 <dns_compare_name+0xac>
          return 0xFFFF;
 801251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801251e:	e030      	b.n	8012582 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 8012520:	8b7b      	ldrh	r3, [r7, #26]
 8012522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012526:	4293      	cmp	r3, r2
 8012528:	d102      	bne.n	8012530 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 801252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801252e:	e028      	b.n	8012582 <dns_compare_name+0x10e>
        }
        response_offset++;
 8012530:	8b7b      	ldrh	r3, [r7, #26]
 8012532:	3301      	adds	r3, #1
 8012534:	837b      	strh	r3, [r7, #26]
        ++query;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	3301      	adds	r3, #1
 801253a:	60fb      	str	r3, [r7, #12]
        --n;
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	3b01      	subs	r3, #1
 8012540:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	2b00      	cmp	r3, #0
 8012546:	dcba      	bgt.n	80124be <dns_compare_name+0x4a>
      }
      ++query;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	3301      	adds	r3, #1
 801254c:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 801254e:	8b7b      	ldrh	r3, [r7, #26]
 8012550:	4619      	mov	r1, r3
 8012552:	68b8      	ldr	r0, [r7, #8]
 8012554:	f002 fe54 	bl	8015200 <pbuf_try_get_at>
 8012558:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	2b00      	cmp	r3, #0
 801255e:	da02      	bge.n	8012566 <dns_compare_name+0xf2>
      return 0xFFFF;
 8012560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012564:	e00d      	b.n	8012582 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d18c      	bne.n	8012486 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 801256c:	8b7b      	ldrh	r3, [r7, #26]
 801256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012572:	4293      	cmp	r3, r2
 8012574:	d102      	bne.n	801257c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 8012576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801257a:	e002      	b.n	8012582 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 801257c:	8b7b      	ldrh	r3, [r7, #26]
 801257e:	3301      	adds	r3, #1
 8012580:	b29b      	uxth	r3, r3
}
 8012582:	4618      	mov	r0, r3
 8012584:	3720      	adds	r7, #32
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	080299dc 	.word	0x080299dc

08012590 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	460b      	mov	r3, r1
 801259a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 801259c:	887b      	ldrh	r3, [r7, #2]
 801259e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 80125a0:	89fb      	ldrh	r3, [r7, #14]
 80125a2:	1c5a      	adds	r2, r3, #1
 80125a4:	81fa      	strh	r2, [r7, #14]
 80125a6:	4619      	mov	r1, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f002 fe29 	bl	8015200 <pbuf_try_get_at>
 80125ae:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	db02      	blt.n	80125bc <dns_skip_name+0x2c>
 80125b6:	89fb      	ldrh	r3, [r7, #14]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d102      	bne.n	80125c2 <dns_skip_name+0x32>
      return 0xFFFF;
 80125bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125c0:	e02f      	b.n	8012622 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80125c8:	2bc0      	cmp	r3, #192	; 0xc0
 80125ca:	d01e      	beq.n	801260a <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 80125cc:	89fa      	ldrh	r2, [r7, #14]
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	4413      	add	r3, r2
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	8912      	ldrh	r2, [r2, #8]
 80125d6:	4293      	cmp	r3, r2
 80125d8:	db02      	blt.n	80125e0 <dns_skip_name+0x50>
        return 0xFFFF;
 80125da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125de:	e020      	b.n	8012622 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	b29a      	uxth	r2, r3
 80125e4:	89fb      	ldrh	r3, [r7, #14]
 80125e6:	4413      	add	r3, r2
 80125e8:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 80125ea:	89fb      	ldrh	r3, [r7, #14]
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f002 fe06 	bl	8015200 <pbuf_try_get_at>
 80125f4:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	da02      	bge.n	8012602 <dns_skip_name+0x72>
      return 0xFFFF;
 80125fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012600:	e00f      	b.n	8012622 <dns_skip_name+0x92>
    }
  } while (n != 0);
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1cb      	bne.n	80125a0 <dns_skip_name+0x10>
 8012608:	e000      	b.n	801260c <dns_skip_name+0x7c>
      break;
 801260a:	bf00      	nop

  if (offset == 0xFFFF) {
 801260c:	89fb      	ldrh	r3, [r7, #14]
 801260e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012612:	4293      	cmp	r3, r2
 8012614:	d102      	bne.n	801261c <dns_skip_name+0x8c>
    return 0xFFFF;
 8012616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801261a:	e002      	b.n	8012622 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 801261c:	89fb      	ldrh	r3, [r7, #14]
 801261e:	3301      	adds	r3, #1
 8012620:	b29b      	uxth	r3, r3
}
 8012622:	4618      	mov	r0, r3
 8012624:	3710      	adds	r7, #16
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
	...

0801262c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b090      	sub	sp, #64	; 0x40
 8012630:	af00      	add	r7, sp, #0
 8012632:	4603      	mov	r3, r0
 8012634:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8012636:	79fa      	ldrb	r2, [r7, #7]
 8012638:	4613      	mov	r3, r2
 801263a:	011b      	lsls	r3, r3, #4
 801263c:	4413      	add	r3, r2
 801263e:	011b      	lsls	r3, r3, #4
 8012640:	4a6c      	ldr	r2, [pc, #432]	; (80127f4 <dns_send+0x1c8>)
 8012642:	4413      	add	r3, r2
 8012644:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8012646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012648:	7adb      	ldrb	r3, [r3, #11]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d906      	bls.n	801265c <dns_send+0x30>
 801264e:	4b6a      	ldr	r3, [pc, #424]	; (80127f8 <dns_send+0x1cc>)
 8012650:	f240 22fa 	movw	r2, #762	; 0x2fa
 8012654:	4969      	ldr	r1, [pc, #420]	; (80127fc <dns_send+0x1d0>)
 8012656:	486a      	ldr	r0, [pc, #424]	; (8012800 <dns_send+0x1d4>)
 8012658:	f00f faac 	bl	8021bb4 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265e:	7adb      	ldrb	r3, [r3, #11]
 8012660:	461a      	mov	r2, r3
 8012662:	4b68      	ldr	r3, [pc, #416]	; (8012804 <dns_send+0x1d8>)
 8012664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d109      	bne.n	8012680 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 801266c:	79fb      	ldrb	r3, [r7, #7]
 801266e:	2100      	movs	r1, #0
 8012670:	4618      	mov	r0, r3
 8012672:	f000 f959 	bl	8012928 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8012676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012678:	2200      	movs	r2, #0
 801267a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801267c:	2300      	movs	r3, #0
 801267e:	e0b4      	b.n	80127ea <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	3310      	adds	r3, #16
 8012684:	4618      	mov	r0, r3
 8012686:	f7ed fdad 	bl	80001e4 <strlen>
 801268a:	4603      	mov	r3, r0
 801268c:	b29b      	uxth	r3, r3
 801268e:	3312      	adds	r3, #18
 8012690:	b29b      	uxth	r3, r3
 8012692:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012696:	4619      	mov	r1, r3
 8012698:	2036      	movs	r0, #54	; 0x36
 801269a:	f001 feb9 	bl	8014410 <pbuf_alloc>
 801269e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80126a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 8095 	beq.w	80127d2 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80126a8:	f107 0310 	add.w	r3, r7, #16
 80126ac:	220c      	movs	r2, #12
 80126ae:	2100      	movs	r1, #0
 80126b0:	4618      	mov	r0, r3
 80126b2:	f00e fd63 	bl	802117c <memset>
    hdr.id = lwip_htons(entry->txid);
 80126b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b8:	891b      	ldrh	r3, [r3, #8]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7ff fdfe 	bl	80122bc <lwip_htons>
 80126c0:	4603      	mov	r3, r0
 80126c2:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80126c4:	2301      	movs	r3, #1
 80126c6:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80126c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126cc:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80126ce:	f107 0310 	add.w	r3, r7, #16
 80126d2:	220c      	movs	r2, #12
 80126d4:	4619      	mov	r1, r3
 80126d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126d8:	f002 fc64 	bl	8014fa4 <pbuf_take>
    hostname = entry->name;
 80126dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126de:	3310      	adds	r3, #16
 80126e0:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	3b01      	subs	r3, #1
 80126e6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80126e8:	230c      	movs	r3, #12
 80126ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 80126ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ee:	3301      	adds	r3, #1
 80126f0:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 80126f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80126f6:	2300      	movs	r3, #0
 80126f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80126fc:	e007      	b.n	801270e <dns_send+0xe2>
        ++n;
 80126fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012702:	3301      	adds	r3, #1
 8012704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270a:	3301      	adds	r3, #1
 801270c:	63bb      	str	r3, [r7, #56]	; 0x38
 801270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	2b2e      	cmp	r3, #46	; 0x2e
 8012714:	d003      	beq.n	801271e <dns_send+0xf2>
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1ef      	bne.n	80126fe <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 801271e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8012726:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801272c:	4413      	add	r3, r2
 801272e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012732:	4293      	cmp	r3, r2
 8012734:	dc53      	bgt.n	80127de <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8012736:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801273a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801273c:	4619      	mov	r1, r3
 801273e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012740:	f002 fd80 	bl	8015244 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8012744:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012746:	3301      	adds	r3, #1
 8012748:	b29b      	uxth	r3, r3
 801274a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801274c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801274e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012750:	f002 fcba 	bl	80150c8 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8012754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012758:	b29a      	uxth	r2, r3
 801275a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801275c:	4413      	add	r3, r2
 801275e:	b29b      	uxth	r3, r3
 8012760:	3301      	adds	r3, #1
 8012762:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8012764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d1bf      	bne.n	80126ec <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 801276c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801276e:	2200      	movs	r2, #0
 8012770:	4619      	mov	r1, r3
 8012772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012774:	f002 fd66 	bl	8015244 <pbuf_put_at>
    query_idx++;
 8012778:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801277a:	3301      	adds	r3, #1
 801277c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801277e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012782:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8012784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012788:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801278a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801278c:	f107 010c 	add.w	r1, r7, #12
 8012790:	2204      	movs	r2, #4
 8012792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012794:	f002 fc98 	bl	80150c8 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8012798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279a:	7bdb      	ldrb	r3, [r3, #15]
 801279c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80127a0:	2335      	movs	r3, #53	; 0x35
 80127a2:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	7adb      	ldrb	r3, [r3, #11]
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	4a16      	ldr	r2, [pc, #88]	; (8012804 <dns_send+0x1d8>)
 80127ac:	4413      	add	r3, r2
 80127ae:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80127b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80127b4:	4a14      	ldr	r2, [pc, #80]	; (8012808 <dns_send+0x1dc>)
 80127b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80127ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127bc:	69fa      	ldr	r2, [r7, #28]
 80127be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127c0:	f009 fad8 	bl	801bd74 <udp_sendto>
 80127c4:	4603      	mov	r3, r0
 80127c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 80127ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127cc:	f002 f936 	bl	8014a3c <pbuf_free>
 80127d0:	e002      	b.n	80127d8 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 80127d2:	23ff      	movs	r3, #255	; 0xff
 80127d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 80127d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80127dc:	e005      	b.n	80127ea <dns_send+0x1be>
        goto overflow_return;
 80127de:	bf00      	nop
overflow_return:
  pbuf_free(p);
 80127e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127e2:	f002 f92b 	bl	8014a3c <pbuf_free>
  return ERR_VAL;
 80127e6:	f06f 0305 	mvn.w	r3, #5
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3740      	adds	r7, #64	; 0x40
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	20013e90 	.word	0x20013e90
 80127f8:	080267b0 	.word	0x080267b0
 80127fc:	080267e0 	.word	0x080267e0
 8012800:	080267f8 	.word	0x080267f8
 8012804:	20014300 	.word	0x20014300
 8012808:	20013e7c 	.word	0x20013e7c

0801280c <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8012812:	202e      	movs	r0, #46	; 0x2e
 8012814:	f009 fdfb 	bl	801c40e <udp_new_ip_type>
 8012818:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d101      	bne.n	8012824 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 8012820:	2300      	movs	r3, #0
 8012822:	e026      	b.n	8012872 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 8012824:	f00f fa54 	bl	8021cd0 <rand>
 8012828:	4603      	mov	r3, r0
 801282a:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 801282c:	88fb      	ldrh	r3, [r7, #6]
 801282e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012832:	d308      	bcc.n	8012846 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8012834:	88fb      	ldrh	r3, [r7, #6]
 8012836:	461a      	mov	r2, r3
 8012838:	4910      	ldr	r1, [pc, #64]	; (801287c <dns_alloc_random_port+0x70>)
 801283a:	68b8      	ldr	r0, [r7, #8]
 801283c:	f009 fc50 	bl	801c0e0 <udp_bind>
 8012840:	4603      	mov	r3, r0
 8012842:	73fb      	strb	r3, [r7, #15]
 8012844:	e001      	b.n	801284a <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 8012846:	23f8      	movs	r3, #248	; 0xf8
 8012848:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 801284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801284e:	f113 0f08 	cmn.w	r3, #8
 8012852:	d0e7      	beq.n	8012824 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 8012854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d004      	beq.n	8012866 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 801285c:	68b8      	ldr	r0, [r7, #8]
 801285e:	f009 fd7d 	bl	801c35c <udp_remove>
    return NULL;
 8012862:	2300      	movs	r3, #0
 8012864:	e005      	b.n	8012872 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 8012866:	2200      	movs	r2, #0
 8012868:	4905      	ldr	r1, [pc, #20]	; (8012880 <dns_alloc_random_port+0x74>)
 801286a:	68b8      	ldr	r0, [r7, #8]
 801286c:	f009 fd56 	bl	801c31c <udp_recv>
  return pcb;
 8012870:	68bb      	ldr	r3, [r7, #8]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	080299c0 	.word	0x080299c0
 8012880:	08012d2d 	.word	0x08012d2d

08012884 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 8012884:	b590      	push	{r4, r7, lr}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801288a:	2300      	movs	r3, #0
 801288c:	71fb      	strb	r3, [r7, #7]
 801288e:	e008      	b.n	80128a2 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 8012890:	79fb      	ldrb	r3, [r7, #7]
 8012892:	4a23      	ldr	r2, [pc, #140]	; (8012920 <dns_alloc_pcb+0x9c>)
 8012894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d006      	beq.n	80128aa <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 801289c:	79fb      	ldrb	r3, [r7, #7]
 801289e:	3301      	adds	r3, #1
 80128a0:	71fb      	strb	r3, [r7, #7]
 80128a2:	79fb      	ldrb	r3, [r7, #7]
 80128a4:	2b03      	cmp	r3, #3
 80128a6:	d9f3      	bls.n	8012890 <dns_alloc_pcb+0xc>
 80128a8:	e000      	b.n	80128ac <dns_alloc_pcb+0x28>
      break;
 80128aa:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 80128ac:	79fb      	ldrb	r3, [r7, #7]
 80128ae:	2b03      	cmp	r3, #3
 80128b0:	d811      	bhi.n	80128d6 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 80128b2:	79fc      	ldrb	r4, [r7, #7]
 80128b4:	f7ff ffaa 	bl	801280c <dns_alloc_random_port>
 80128b8:	4603      	mov	r3, r0
 80128ba:	4a19      	ldr	r2, [pc, #100]	; (8012920 <dns_alloc_pcb+0x9c>)
 80128bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80128c0:	79fb      	ldrb	r3, [r7, #7]
 80128c2:	4a17      	ldr	r2, [pc, #92]	; (8012920 <dns_alloc_pcb+0x9c>)
 80128c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d004      	beq.n	80128d6 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 80128cc:	4a15      	ldr	r2, [pc, #84]	; (8012924 <dns_alloc_pcb+0xa0>)
 80128ce:	79fb      	ldrb	r3, [r7, #7]
 80128d0:	7013      	strb	r3, [r2, #0]
      return i;
 80128d2:	79fb      	ldrb	r3, [r7, #7]
 80128d4:	e020      	b.n	8012918 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 80128d6:	2300      	movs	r3, #0
 80128d8:	71fb      	strb	r3, [r7, #7]
 80128da:	4b12      	ldr	r3, [pc, #72]	; (8012924 <dns_alloc_pcb+0xa0>)
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	3301      	adds	r3, #1
 80128e0:	71bb      	strb	r3, [r7, #6]
 80128e2:	e015      	b.n	8012910 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 80128e4:	79bb      	ldrb	r3, [r7, #6]
 80128e6:	2b03      	cmp	r3, #3
 80128e8:	d901      	bls.n	80128ee <dns_alloc_pcb+0x6a>
      idx = 0;
 80128ea:	2300      	movs	r3, #0
 80128ec:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 80128ee:	79bb      	ldrb	r3, [r7, #6]
 80128f0:	4a0b      	ldr	r2, [pc, #44]	; (8012920 <dns_alloc_pcb+0x9c>)
 80128f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d004      	beq.n	8012904 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 80128fa:	4a0a      	ldr	r2, [pc, #40]	; (8012924 <dns_alloc_pcb+0xa0>)
 80128fc:	79bb      	ldrb	r3, [r7, #6]
 80128fe:	7013      	strb	r3, [r2, #0]
      return idx;
 8012900:	79bb      	ldrb	r3, [r7, #6]
 8012902:	e009      	b.n	8012918 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8012904:	79fb      	ldrb	r3, [r7, #7]
 8012906:	3301      	adds	r3, #1
 8012908:	71fb      	strb	r3, [r7, #7]
 801290a:	79bb      	ldrb	r3, [r7, #6]
 801290c:	3301      	adds	r3, #1
 801290e:	71bb      	strb	r3, [r7, #6]
 8012910:	79fb      	ldrb	r3, [r7, #7]
 8012912:	2b03      	cmp	r3, #3
 8012914:	d9e6      	bls.n	80128e4 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 8012916:	2304      	movs	r3, #4
}
 8012918:	4618      	mov	r0, r3
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	bd90      	pop	{r4, r7, pc}
 8012920:	20013e7c 	.word	0x20013e7c
 8012924:	20013e8c 	.word	0x20013e8c

08012928 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8012928:	b590      	push	{r4, r7, lr}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	4603      	mov	r3, r0
 8012930:	6039      	str	r1, [r7, #0]
 8012932:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012934:	2300      	movs	r3, #0
 8012936:	73fb      	strb	r3, [r7, #15]
 8012938:	e03d      	b.n	80129b6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801293a:	7bfa      	ldrb	r2, [r7, #15]
 801293c:	4957      	ldr	r1, [pc, #348]	; (8012a9c <dns_call_found+0x174>)
 801293e:	4613      	mov	r3, r2
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	440b      	add	r3, r1
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d030      	beq.n	80129b0 <dns_call_found+0x88>
 801294e:	7bfa      	ldrb	r2, [r7, #15]
 8012950:	4952      	ldr	r1, [pc, #328]	; (8012a9c <dns_call_found+0x174>)
 8012952:	4613      	mov	r3, r2
 8012954:	005b      	lsls	r3, r3, #1
 8012956:	4413      	add	r3, r2
 8012958:	009b      	lsls	r3, r3, #2
 801295a:	440b      	add	r3, r1
 801295c:	3308      	adds	r3, #8
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	79fa      	ldrb	r2, [r7, #7]
 8012962:	429a      	cmp	r2, r3
 8012964:	d124      	bne.n	80129b0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8012966:	7bfa      	ldrb	r2, [r7, #15]
 8012968:	494c      	ldr	r1, [pc, #304]	; (8012a9c <dns_call_found+0x174>)
 801296a:	4613      	mov	r3, r2
 801296c:	005b      	lsls	r3, r3, #1
 801296e:	4413      	add	r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	440b      	add	r3, r1
 8012974:	681c      	ldr	r4, [r3, #0]
 8012976:	79fa      	ldrb	r2, [r7, #7]
 8012978:	4613      	mov	r3, r2
 801297a:	011b      	lsls	r3, r3, #4
 801297c:	4413      	add	r3, r2
 801297e:	011b      	lsls	r3, r3, #4
 8012980:	3310      	adds	r3, #16
 8012982:	4a47      	ldr	r2, [pc, #284]	; (8012aa0 <dns_call_found+0x178>)
 8012984:	1898      	adds	r0, r3, r2
 8012986:	7bfa      	ldrb	r2, [r7, #15]
 8012988:	4944      	ldr	r1, [pc, #272]	; (8012a9c <dns_call_found+0x174>)
 801298a:	4613      	mov	r3, r2
 801298c:	005b      	lsls	r3, r3, #1
 801298e:	4413      	add	r3, r2
 8012990:	009b      	lsls	r3, r3, #2
 8012992:	440b      	add	r3, r1
 8012994:	3304      	adds	r3, #4
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	461a      	mov	r2, r3
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 801299e:	7bfa      	ldrb	r2, [r7, #15]
 80129a0:	493e      	ldr	r1, [pc, #248]	; (8012a9c <dns_call_found+0x174>)
 80129a2:	4613      	mov	r3, r2
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	4413      	add	r3, r2
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	440b      	add	r3, r1
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80129b0:	7bfb      	ldrb	r3, [r7, #15]
 80129b2:	3301      	adds	r3, #1
 80129b4:	73fb      	strb	r3, [r7, #15]
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
 80129b8:	2b03      	cmp	r3, #3
 80129ba:	d9be      	bls.n	801293a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80129bc:	2300      	movs	r3, #0
 80129be:	73fb      	strb	r3, [r7, #15]
 80129c0:	e031      	b.n	8012a26 <dns_call_found+0xfe>
    if (i == idx) {
 80129c2:	7bfa      	ldrb	r2, [r7, #15]
 80129c4:	79fb      	ldrb	r3, [r7, #7]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d029      	beq.n	8012a1e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80129ca:	7bfa      	ldrb	r2, [r7, #15]
 80129cc:	4934      	ldr	r1, [pc, #208]	; (8012aa0 <dns_call_found+0x178>)
 80129ce:	4613      	mov	r3, r2
 80129d0:	011b      	lsls	r3, r3, #4
 80129d2:	4413      	add	r3, r2
 80129d4:	011b      	lsls	r3, r3, #4
 80129d6:	440b      	add	r3, r1
 80129d8:	330a      	adds	r3, #10
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d11f      	bne.n	8012a20 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80129e0:	7bfa      	ldrb	r2, [r7, #15]
 80129e2:	492f      	ldr	r1, [pc, #188]	; (8012aa0 <dns_call_found+0x178>)
 80129e4:	4613      	mov	r3, r2
 80129e6:	011b      	lsls	r3, r3, #4
 80129e8:	4413      	add	r3, r2
 80129ea:	011b      	lsls	r3, r3, #4
 80129ec:	440b      	add	r3, r1
 80129ee:	330f      	adds	r3, #15
 80129f0:	7819      	ldrb	r1, [r3, #0]
 80129f2:	79fa      	ldrb	r2, [r7, #7]
 80129f4:	482a      	ldr	r0, [pc, #168]	; (8012aa0 <dns_call_found+0x178>)
 80129f6:	4613      	mov	r3, r2
 80129f8:	011b      	lsls	r3, r3, #4
 80129fa:	4413      	add	r3, r2
 80129fc:	011b      	lsls	r3, r3, #4
 80129fe:	4403      	add	r3, r0
 8012a00:	330f      	adds	r3, #15
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	4299      	cmp	r1, r3
 8012a06:	d10b      	bne.n	8012a20 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012a08:	79fa      	ldrb	r2, [r7, #7]
 8012a0a:	4925      	ldr	r1, [pc, #148]	; (8012aa0 <dns_call_found+0x178>)
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	011b      	lsls	r3, r3, #4
 8012a10:	4413      	add	r3, r2
 8012a12:	011b      	lsls	r3, r3, #4
 8012a14:	440b      	add	r3, r1
 8012a16:	330f      	adds	r3, #15
 8012a18:	2204      	movs	r2, #4
 8012a1a:	701a      	strb	r2, [r3, #0]
        break;
 8012a1c:	e006      	b.n	8012a2c <dns_call_found+0x104>
      continue; /* only check other requests */
 8012a1e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012a20:	7bfb      	ldrb	r3, [r7, #15]
 8012a22:	3301      	adds	r3, #1
 8012a24:	73fb      	strb	r3, [r7, #15]
 8012a26:	7bfb      	ldrb	r3, [r7, #15]
 8012a28:	2b03      	cmp	r3, #3
 8012a2a:	d9ca      	bls.n	80129c2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8012a2c:	79fa      	ldrb	r2, [r7, #7]
 8012a2e:	491c      	ldr	r1, [pc, #112]	; (8012aa0 <dns_call_found+0x178>)
 8012a30:	4613      	mov	r3, r2
 8012a32:	011b      	lsls	r3, r3, #4
 8012a34:	4413      	add	r3, r2
 8012a36:	011b      	lsls	r3, r3, #4
 8012a38:	440b      	add	r3, r1
 8012a3a:	330f      	adds	r3, #15
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	2b03      	cmp	r3, #3
 8012a40:	d827      	bhi.n	8012a92 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8012a42:	79fa      	ldrb	r2, [r7, #7]
 8012a44:	4916      	ldr	r1, [pc, #88]	; (8012aa0 <dns_call_found+0x178>)
 8012a46:	4613      	mov	r3, r2
 8012a48:	011b      	lsls	r3, r3, #4
 8012a4a:	4413      	add	r3, r2
 8012a4c:	011b      	lsls	r3, r3, #4
 8012a4e:	440b      	add	r3, r1
 8012a50:	330f      	adds	r3, #15
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	461a      	mov	r2, r3
 8012a56:	4b13      	ldr	r3, [pc, #76]	; (8012aa4 <dns_call_found+0x17c>)
 8012a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f009 fc7d 	bl	801c35c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8012a62:	79fa      	ldrb	r2, [r7, #7]
 8012a64:	490e      	ldr	r1, [pc, #56]	; (8012aa0 <dns_call_found+0x178>)
 8012a66:	4613      	mov	r3, r2
 8012a68:	011b      	lsls	r3, r3, #4
 8012a6a:	4413      	add	r3, r2
 8012a6c:	011b      	lsls	r3, r3, #4
 8012a6e:	440b      	add	r3, r1
 8012a70:	330f      	adds	r3, #15
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	4619      	mov	r1, r3
 8012a76:	4b0b      	ldr	r3, [pc, #44]	; (8012aa4 <dns_call_found+0x17c>)
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012a7e:	79fa      	ldrb	r2, [r7, #7]
 8012a80:	4907      	ldr	r1, [pc, #28]	; (8012aa0 <dns_call_found+0x178>)
 8012a82:	4613      	mov	r3, r2
 8012a84:	011b      	lsls	r3, r3, #4
 8012a86:	4413      	add	r3, r2
 8012a88:	011b      	lsls	r3, r3, #4
 8012a8a:	440b      	add	r3, r1
 8012a8c:	330f      	adds	r3, #15
 8012a8e:	2204      	movs	r2, #4
 8012a90:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8012a92:	bf00      	nop
 8012a94:	3714      	adds	r7, #20
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd90      	pop	{r4, r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	200142d0 	.word	0x200142d0
 8012aa0:	20013e90 	.word	0x20013e90
 8012aa4:	20013e7c 	.word	0x20013e7c

08012aa8 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8012aae:	f00f f90f 	bl	8021cd0 <rand>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	71fb      	strb	r3, [r7, #7]
 8012aba:	e01a      	b.n	8012af2 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012abc:	79fa      	ldrb	r2, [r7, #7]
 8012abe:	4911      	ldr	r1, [pc, #68]	; (8012b04 <dns_create_txid+0x5c>)
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	011b      	lsls	r3, r3, #4
 8012ac4:	4413      	add	r3, r2
 8012ac6:	011b      	lsls	r3, r3, #4
 8012ac8:	440b      	add	r3, r1
 8012aca:	330a      	adds	r3, #10
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	2b02      	cmp	r3, #2
 8012ad0:	d10c      	bne.n	8012aec <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8012ad2:	79fa      	ldrb	r2, [r7, #7]
 8012ad4:	490b      	ldr	r1, [pc, #44]	; (8012b04 <dns_create_txid+0x5c>)
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	011b      	lsls	r3, r3, #4
 8012ada:	4413      	add	r3, r2
 8012adc:	011b      	lsls	r3, r3, #4
 8012ade:	440b      	add	r3, r1
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012ae4:	88ba      	ldrh	r2, [r7, #4]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d100      	bne.n	8012aec <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8012aea:	e7e0      	b.n	8012aae <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012aec:	79fb      	ldrb	r3, [r7, #7]
 8012aee:	3301      	adds	r3, #1
 8012af0:	71fb      	strb	r3, [r7, #7]
 8012af2:	79fb      	ldrb	r3, [r7, #7]
 8012af4:	2b03      	cmp	r3, #3
 8012af6:	d9e1      	bls.n	8012abc <dns_create_txid+0x14>
    }
  }

  return txid;
 8012af8:	88bb      	ldrh	r3, [r7, #4]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3708      	adds	r7, #8
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	20013e90 	.word	0x20013e90

08012b08 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b085      	sub	sp, #20
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8012b10:	2300      	movs	r3, #0
 8012b12:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d00d      	beq.n	8012b36 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7adb      	ldrb	r3, [r3, #11]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d109      	bne.n	8012b36 <dns_backupserver_available+0x2e>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	7adb      	ldrb	r3, [r3, #11]
 8012b26:	3301      	adds	r3, #1
 8012b28:	4a06      	ldr	r2, [pc, #24]	; (8012b44 <dns_backupserver_available+0x3c>)
 8012b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d001      	beq.n	8012b36 <dns_backupserver_available+0x2e>
      ret = 1;
 8012b32:	2301      	movs	r3, #1
 8012b34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	20014300 	.word	0x20014300

08012b48 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	4603      	mov	r3, r0
 8012b50:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8012b52:	79fa      	ldrb	r2, [r7, #7]
 8012b54:	4613      	mov	r3, r2
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	4413      	add	r3, r2
 8012b5a:	011b      	lsls	r3, r3, #4
 8012b5c:	4a48      	ldr	r2, [pc, #288]	; (8012c80 <dns_check_entry+0x138>)
 8012b5e:	4413      	add	r3, r2
 8012b60:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8012b62:	79fb      	ldrb	r3, [r7, #7]
 8012b64:	2b03      	cmp	r3, #3
 8012b66:	d906      	bls.n	8012b76 <dns_check_entry+0x2e>
 8012b68:	4b46      	ldr	r3, [pc, #280]	; (8012c84 <dns_check_entry+0x13c>)
 8012b6a:	f240 421c 	movw	r2, #1052	; 0x41c
 8012b6e:	4946      	ldr	r1, [pc, #280]	; (8012c88 <dns_check_entry+0x140>)
 8012b70:	4846      	ldr	r0, [pc, #280]	; (8012c8c <dns_check_entry+0x144>)
 8012b72:	f00f f81f 	bl	8021bb4 <iprintf>

  switch (entry->state) {
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	7a9b      	ldrb	r3, [r3, #10]
 8012b7a:	2b03      	cmp	r3, #3
 8012b7c:	d86f      	bhi.n	8012c5e <dns_check_entry+0x116>
 8012b7e:	a201      	add	r2, pc, #4	; (adr r2, 8012b84 <dns_check_entry+0x3c>)
 8012b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b84:	08012c6f 	.word	0x08012c6f
 8012b88:	08012b95 	.word	0x08012b95
 8012b8c:	08012bc7 	.word	0x08012bc7
 8012b90:	08012c3d 	.word	0x08012c3d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8012b94:	f7ff ff88 	bl	8012aa8 <dns_create_txid>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2202      	movs	r2, #2
 8012ba4:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8012bb8:	79fb      	ldrb	r3, [r7, #7]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7ff fd36 	bl	801262c <dns_send>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8012bc4:	e058      	b.n	8012c78 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	7b1b      	ldrb	r3, [r3, #12]
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	b2da      	uxtb	r2, r3
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	731a      	strb	r2, [r3, #12]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	7b1b      	ldrb	r3, [r3, #12]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d14b      	bne.n	8012c72 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	7b5b      	ldrb	r3, [r3, #13]
 8012bde:	3301      	adds	r3, #1
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	735a      	strb	r2, [r3, #13]
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	7b5b      	ldrb	r3, [r3, #13]
 8012bea:	2b04      	cmp	r3, #4
 8012bec:	d11b      	bne.n	8012c26 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8012bee:	68f8      	ldr	r0, [r7, #12]
 8012bf0:	f7ff ff8a 	bl	8012b08 <dns_backupserver_available>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00c      	beq.n	8012c14 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	7adb      	ldrb	r3, [r3, #11]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	b2da      	uxtb	r2, r3
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	735a      	strb	r2, [r3, #13]
 8012c12:	e00c      	b.n	8012c2e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8012c14:	79fb      	ldrb	r3, [r7, #7]
 8012c16:	2100      	movs	r1, #0
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ff fe85 	bl	8012928 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2200      	movs	r2, #0
 8012c22:	729a      	strb	r2, [r3, #10]
            break;
 8012c24:	e028      	b.n	8012c78 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	7b5a      	ldrb	r2, [r3, #13]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8012c2e:	79fb      	ldrb	r3, [r7, #7]
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7ff fcfb 	bl	801262c <dns_send>
 8012c36:	4603      	mov	r3, r0
 8012c38:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8012c3a:	e01a      	b.n	8012c72 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d008      	beq.n	8012c56 <dns_check_entry+0x10e>
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	1e5a      	subs	r2, r3, #1
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	601a      	str	r2, [r3, #0]
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10f      	bne.n	8012c76 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	729a      	strb	r2, [r3, #10]
      }
      break;
 8012c5c:	e00b      	b.n	8012c76 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8012c5e:	4b09      	ldr	r3, [pc, #36]	; (8012c84 <dns_check_entry+0x13c>)
 8012c60:	f240 425b 	movw	r2, #1115	; 0x45b
 8012c64:	490a      	ldr	r1, [pc, #40]	; (8012c90 <dns_check_entry+0x148>)
 8012c66:	4809      	ldr	r0, [pc, #36]	; (8012c8c <dns_check_entry+0x144>)
 8012c68:	f00e ffa4 	bl	8021bb4 <iprintf>
      break;
 8012c6c:	e004      	b.n	8012c78 <dns_check_entry+0x130>
      break;
 8012c6e:	bf00      	nop
 8012c70:	e002      	b.n	8012c78 <dns_check_entry+0x130>
      break;
 8012c72:	bf00      	nop
 8012c74:	e000      	b.n	8012c78 <dns_check_entry+0x130>
      break;
 8012c76:	bf00      	nop
  }
}
 8012c78:	bf00      	nop
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	20013e90 	.word	0x20013e90
 8012c84:	080267b0 	.word	0x080267b0
 8012c88:	08026820 	.word	0x08026820
 8012c8c:	080267f8 	.word	0x080267f8
 8012c90:	0802683c 	.word	0x0802683c

08012c94 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	71fb      	strb	r3, [r7, #7]
 8012c9e:	e006      	b.n	8012cae <dns_check_entries+0x1a>
    dns_check_entry(i);
 8012ca0:	79fb      	ldrb	r3, [r7, #7]
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff ff50 	bl	8012b48 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012ca8:	79fb      	ldrb	r3, [r7, #7]
 8012caa:	3301      	adds	r3, #1
 8012cac:	71fb      	strb	r3, [r7, #7]
 8012cae:	79fb      	ldrb	r3, [r7, #7]
 8012cb0:	2b03      	cmp	r3, #3
 8012cb2:	d9f5      	bls.n	8012ca0 <dns_check_entries+0xc>
  }
}
 8012cb4:	bf00      	nop
 8012cb6:	bf00      	nop
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	6039      	str	r1, [r7, #0]
 8012cca:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 8012ccc:	79fa      	ldrb	r2, [r7, #7]
 8012cce:	4613      	mov	r3, r2
 8012cd0:	011b      	lsls	r3, r3, #4
 8012cd2:	4413      	add	r3, r2
 8012cd4:	011b      	lsls	r3, r3, #4
 8012cd6:	4a13      	ldr	r2, [pc, #76]	; (8012d24 <dns_correct_response+0x64>)
 8012cd8:	4413      	add	r3, r2
 8012cda:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	2203      	movs	r2, #3
 8012ce0:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	683a      	ldr	r2, [r7, #0]
 8012ce6:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a0e      	ldr	r2, [pc, #56]	; (8012d28 <dns_correct_response+0x68>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d902      	bls.n	8012cf8 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	4a0c      	ldr	r2, [pc, #48]	; (8012d28 <dns_correct_response+0x68>)
 8012cf6:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	1d1a      	adds	r2, r3, #4
 8012cfc:	79fb      	ldrb	r3, [r7, #7]
 8012cfe:	4611      	mov	r1, r2
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fe11 	bl	8012928 <dns_call_found>

  if (entry->ttl == 0) {
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d106      	bne.n	8012d1c <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	7a9b      	ldrb	r3, [r3, #10]
 8012d12:	2b03      	cmp	r3, #3
 8012d14:	d102      	bne.n	8012d1c <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	729a      	strb	r2, [r3, #10]
    }
  }
}
 8012d1c:	bf00      	nop
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	20013e90 	.word	0x20013e90
 8012d28:	00093a80 	.word	0x00093a80

08012d2c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012d2c:	b590      	push	{r4, r7, lr}
 8012d2e:	b091      	sub	sp, #68	; 0x44
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
 8012d38:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	891b      	ldrh	r3, [r3, #8]
 8012d3e:	2b0f      	cmp	r3, #15
 8012d40:	f240 811e 	bls.w	8012f80 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8012d44:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012d48:	2300      	movs	r3, #0
 8012d4a:	220c      	movs	r2, #12
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f002 f87b 	bl	8014e48 <pbuf_copy_partial>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b0c      	cmp	r3, #12
 8012d56:	f040 8115 	bne.w	8012f84 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 8012d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7ff faad 	bl	80122bc <lwip_htons>
 8012d62:	4603      	mov	r3, r0
 8012d64:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012d66:	2300      	movs	r3, #0
 8012d68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8012d6c:	e102      	b.n	8012f74 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 8012d6e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8012d72:	4613      	mov	r3, r2
 8012d74:	011b      	lsls	r3, r3, #4
 8012d76:	4413      	add	r3, r2
 8012d78:	011b      	lsls	r3, r3, #4
 8012d7a:	4a92      	ldr	r2, [pc, #584]	; (8012fc4 <dns_recv+0x298>)
 8012d7c:	4413      	add	r3, r2
 8012d7e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 8012d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d82:	7a9b      	ldrb	r3, [r3, #10]
 8012d84:	2b02      	cmp	r3, #2
 8012d86:	f040 80f0 	bne.w	8012f6a <dns_recv+0x23e>
          (entry->txid == txid)) {
 8012d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d8c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 8012d8e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012d90:	429a      	cmp	r2, r3
 8012d92:	f040 80ea 	bne.w	8012f6a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 8012d96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff fa8f 	bl	80122bc <lwip_htons>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 8012da2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7ff fa89 	bl	80122bc <lwip_htons>
 8012daa:	4603      	mov	r3, r0
 8012dac:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8012dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012db2:	b25b      	sxtb	r3, r3
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	f280 80e7 	bge.w	8012f88 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 8012dba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	f040 80e5 	bne.w	8012f8c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc8:	7adb      	ldrb	r3, [r3, #11]
 8012dca:	4619      	mov	r1, r3
 8012dcc:	4b7e      	ldr	r3, [pc, #504]	; (8012fc8 <dns_recv+0x29c>)
 8012dce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	f040 80dc 	bne.w	8012f90 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8012dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dda:	3310      	adds	r3, #16
 8012ddc:	220c      	movs	r2, #12
 8012dde:	6879      	ldr	r1, [r7, #4]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fb47 	bl	8012474 <dns_compare_name>
 8012de6:	4603      	mov	r3, r0
 8012de8:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 8012dea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012df0:	4293      	cmp	r3, r2
 8012df2:	f000 80cf 	beq.w	8012f94 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8012df6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012df8:	f107 0114 	add.w	r1, r7, #20
 8012dfc:	2204      	movs	r2, #4
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f002 f822 	bl	8014e48 <pbuf_copy_partial>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b04      	cmp	r3, #4
 8012e08:	f040 80c6 	bne.w	8012f98 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8012e0c:	8afb      	ldrh	r3, [r7, #22]
 8012e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e12:	f040 80c3 	bne.w	8012f9c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 8012e16:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8012e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e1c:	f040 80be 	bne.w	8012f9c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8012e20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e22:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8012e26:	4293      	cmp	r3, r2
 8012e28:	f200 80ba 	bhi.w	8012fa0 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8012e2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e2e:	3304      	adds	r3, #4
 8012e30:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8012e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e36:	f003 030f 	and.w	r3, r3, #15
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d078      	beq.n	8012f30 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 8012e3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e40:	f7ff fe62 	bl	8012b08 <dns_backupserver_available>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d07a      	beq.n	8012f40 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 8012e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4c:	2203      	movs	r2, #3
 8012e4e:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 8012e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e52:	2201      	movs	r2, #1
 8012e54:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 8012e56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff fe74 	bl	8012b48 <dns_check_entry>

            goto ignore_packet;
 8012e60:	e0a9      	b.n	8012fb6 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 8012e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e64:	4619      	mov	r1, r3
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f7ff fb92 	bl	8012590 <dns_skip_name>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 8012e70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e76:	4293      	cmp	r3, r2
 8012e78:	f000 8094 	beq.w	8012fa4 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8012e7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e7e:	f107 0118 	add.w	r1, r7, #24
 8012e82:	220a      	movs	r2, #10
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f001 ffdf 	bl	8014e48 <pbuf_copy_partial>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b0a      	cmp	r3, #10
 8012e8e:	f040 808b 	bne.w	8012fa8 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8012e92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	f200 8087 	bhi.w	8012fac <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8012e9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ea0:	330a      	adds	r3, #10
 8012ea2:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8012ea4:	8b7b      	ldrh	r3, [r7, #26]
 8012ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012eaa:	d12b      	bne.n	8012f04 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8012eac:	8b3b      	ldrh	r3, [r7, #24]
 8012eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012eb2:	d127      	bne.n	8012f04 <dns_recv+0x1d8>
 8012eb4:	8c3b      	ldrh	r3, [r7, #32]
 8012eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eba:	d123      	bne.n	8012f04 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8012ebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ebe:	f107 0110 	add.w	r1, r7, #16
 8012ec2:	2204      	movs	r2, #4
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f001 ffbf 	bl	8014e48 <pbuf_copy_partial>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b04      	cmp	r3, #4
 8012ece:	d16f      	bne.n	8012fb0 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8012ed0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8012ed4:	6939      	ldr	r1, [r7, #16]
 8012ed6:	483b      	ldr	r0, [pc, #236]	; (8012fc4 <dns_recv+0x298>)
 8012ed8:	4613      	mov	r3, r2
 8012eda:	011b      	lsls	r3, r3, #4
 8012edc:	4413      	add	r3, r2
 8012ede:	011b      	lsls	r3, r3, #4
 8012ee0:	4403      	add	r3, r0
 8012ee2:	3304      	adds	r3, #4
 8012ee4:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f001 fda8 	bl	8014a3c <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7ff f9f9 	bl	80122e6 <lwip_htonl>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7ff fedf 	bl	8012cc0 <dns_correct_response>
 8012f02:	e05c      	b.n	8012fbe <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8012f04:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8012f06:	8c3b      	ldrh	r3, [r7, #32]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7ff f9d7 	bl	80122bc <lwip_htons>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	4423      	add	r3, r4
 8012f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f16:	da4d      	bge.n	8012fb4 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8012f18:	8c3b      	ldrh	r3, [r7, #32]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7ff f9ce 	bl	80122bc <lwip_htons>
 8012f20:	4603      	mov	r3, r0
 8012f22:	461a      	mov	r2, r3
 8012f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f26:	4413      	add	r3, r2
 8012f28:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 8012f2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8012f30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d004      	beq.n	8012f40 <dns_recv+0x214>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	891b      	ldrh	r3, [r3, #8]
 8012f3a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d390      	bcc.n	8012e62 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f001 fd7b 	bl	8014a3c <pbuf_free>
        dns_call_found(i, NULL);
 8012f46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f4a:	2100      	movs	r1, #0
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7ff fceb 	bl	8012928 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8012f52:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8012f56:	491b      	ldr	r1, [pc, #108]	; (8012fc4 <dns_recv+0x298>)
 8012f58:	4613      	mov	r3, r2
 8012f5a:	011b      	lsls	r3, r3, #4
 8012f5c:	4413      	add	r3, r2
 8012f5e:	011b      	lsls	r3, r3, #4
 8012f60:	440b      	add	r3, r1
 8012f62:	330a      	adds	r3, #10
 8012f64:	2200      	movs	r2, #0
 8012f66:	701a      	strb	r2, [r3, #0]
        return;
 8012f68:	e029      	b.n	8012fbe <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012f6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f6e:	3301      	adds	r3, #1
 8012f70:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8012f74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f78:	2b03      	cmp	r3, #3
 8012f7a:	f67f aef8 	bls.w	8012d6e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 8012f7e:	e001      	b.n	8012f84 <dns_recv+0x258>
    goto ignore_packet;
 8012f80:	bf00      	nop
 8012f82:	e018      	b.n	8012fb6 <dns_recv+0x28a>
ignore_packet:
 8012f84:	bf00      	nop
 8012f86:	e016      	b.n	8012fb6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f88:	bf00      	nop
 8012f8a:	e014      	b.n	8012fb6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f8c:	bf00      	nop
 8012f8e:	e012      	b.n	8012fb6 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 8012f90:	bf00      	nop
 8012f92:	e010      	b.n	8012fb6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f94:	bf00      	nop
 8012f96:	e00e      	b.n	8012fb6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f98:	bf00      	nop
 8012f9a:	e00c      	b.n	8012fb6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 8012f9c:	bf00      	nop
 8012f9e:	e00a      	b.n	8012fb6 <dns_recv+0x28a>
          goto ignore_packet;
 8012fa0:	bf00      	nop
 8012fa2:	e008      	b.n	8012fb6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8012fa4:	bf00      	nop
 8012fa6:	e006      	b.n	8012fb6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8012fa8:	bf00      	nop
 8012faa:	e004      	b.n	8012fb6 <dns_recv+0x28a>
              goto ignore_packet;
 8012fac:	bf00      	nop
 8012fae:	e002      	b.n	8012fb6 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 8012fb0:	bf00      	nop
 8012fb2:	e000      	b.n	8012fb6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 8012fb4:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f001 fd40 	bl	8014a3c <pbuf_free>
  return;
 8012fbc:	bf00      	nop
}
 8012fbe:	3744      	adds	r7, #68	; 0x44
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd90      	pop	{r4, r7, pc}
 8012fc4:	20013e90 	.word	0x20013e90
 8012fc8:	20014300 	.word	0x20014300

08012fcc <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b08a      	sub	sp, #40	; 0x28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012fe4:	e056      	b.n	8013094 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012fe6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012fea:	4990      	ldr	r1, [pc, #576]	; (801322c <dns_enqueue+0x260>)
 8012fec:	4613      	mov	r3, r2
 8012fee:	011b      	lsls	r3, r3, #4
 8012ff0:	4413      	add	r3, r2
 8012ff2:	011b      	lsls	r3, r3, #4
 8012ff4:	440b      	add	r3, r1
 8012ff6:	330a      	adds	r3, #10
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b02      	cmp	r3, #2
 8012ffc:	d145      	bne.n	801308a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8012ffe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013002:	4613      	mov	r3, r2
 8013004:	011b      	lsls	r3, r3, #4
 8013006:	4413      	add	r3, r2
 8013008:	011b      	lsls	r3, r3, #4
 801300a:	3310      	adds	r3, #16
 801300c:	4a87      	ldr	r2, [pc, #540]	; (801322c <dns_enqueue+0x260>)
 801300e:	4413      	add	r3, r2
 8013010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013014:	4619      	mov	r1, r3
 8013016:	68f8      	ldr	r0, [r7, #12]
 8013018:	f7ff f97e 	bl	8012318 <lwip_strnicmp>
 801301c:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801301e:	2b00      	cmp	r3, #0
 8013020:	d133      	bne.n	801308a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013022:	2300      	movs	r3, #0
 8013024:	76fb      	strb	r3, [r7, #27]
 8013026:	e02d      	b.n	8013084 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 8013028:	7efa      	ldrb	r2, [r7, #27]
 801302a:	4981      	ldr	r1, [pc, #516]	; (8013230 <dns_enqueue+0x264>)
 801302c:	4613      	mov	r3, r2
 801302e:	005b      	lsls	r3, r3, #1
 8013030:	4413      	add	r3, r2
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	440b      	add	r3, r1
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d120      	bne.n	801307e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 801303c:	7efa      	ldrb	r2, [r7, #27]
 801303e:	497c      	ldr	r1, [pc, #496]	; (8013230 <dns_enqueue+0x264>)
 8013040:	4613      	mov	r3, r2
 8013042:	005b      	lsls	r3, r3, #1
 8013044:	4413      	add	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	440b      	add	r3, r1
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 801304e:	7efa      	ldrb	r2, [r7, #27]
 8013050:	4977      	ldr	r1, [pc, #476]	; (8013230 <dns_enqueue+0x264>)
 8013052:	4613      	mov	r3, r2
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	4413      	add	r3, r2
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	440b      	add	r3, r1
 801305c:	3304      	adds	r3, #4
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 8013062:	7efa      	ldrb	r2, [r7, #27]
 8013064:	4972      	ldr	r1, [pc, #456]	; (8013230 <dns_enqueue+0x264>)
 8013066:	4613      	mov	r3, r2
 8013068:	005b      	lsls	r3, r3, #1
 801306a:	4413      	add	r3, r2
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	440b      	add	r3, r1
 8013070:	3308      	adds	r3, #8
 8013072:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013076:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 8013078:	f06f 0304 	mvn.w	r3, #4
 801307c:	e0d1      	b.n	8013222 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801307e:	7efb      	ldrb	r3, [r7, #27]
 8013080:	3301      	adds	r3, #1
 8013082:	76fb      	strb	r3, [r7, #27]
 8013084:	7efb      	ldrb	r3, [r7, #27]
 8013086:	2b03      	cmp	r3, #3
 8013088:	d9ce      	bls.n	8013028 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801308a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801308e:	3301      	adds	r3, #1
 8013090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013098:	2b03      	cmp	r3, #3
 801309a:	d9a4      	bls.n	8012fe6 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 801309c:	2300      	movs	r3, #0
 801309e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 80130a2:	2304      	movs	r3, #4
 80130a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80130a8:	2300      	movs	r3, #0
 80130aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130ae:	e027      	b.n	8013100 <dns_enqueue+0x134>
    entry = &dns_table[i];
 80130b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80130b4:	4613      	mov	r3, r2
 80130b6:	011b      	lsls	r3, r3, #4
 80130b8:	4413      	add	r3, r2
 80130ba:	011b      	lsls	r3, r3, #4
 80130bc:	4a5b      	ldr	r2, [pc, #364]	; (801322c <dns_enqueue+0x260>)
 80130be:	4413      	add	r3, r2
 80130c0:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 80130c2:	6a3b      	ldr	r3, [r7, #32]
 80130c4:	7a9b      	ldrb	r3, [r3, #10]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d01f      	beq.n	801310a <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 80130ca:	6a3b      	ldr	r3, [r7, #32]
 80130cc:	7a9b      	ldrb	r3, [r3, #10]
 80130ce:	2b03      	cmp	r3, #3
 80130d0:	d111      	bne.n	80130f6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80130d2:	4b58      	ldr	r3, [pc, #352]	; (8013234 <dns_enqueue+0x268>)
 80130d4:	781a      	ldrb	r2, [r3, #0]
 80130d6:	6a3b      	ldr	r3, [r7, #32]
 80130d8:	7b9b      	ldrb	r3, [r3, #14]
 80130da:	1ad3      	subs	r3, r2, r3
 80130dc:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 80130de:	7eba      	ldrb	r2, [r7, #26]
 80130e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d906      	bls.n	80130f6 <dns_enqueue+0x12a>
        lseq = age;
 80130e8:	7ebb      	ldrb	r3, [r7, #26]
 80130ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 80130ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80130f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130fa:	3301      	adds	r3, #1
 80130fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013104:	2b03      	cmp	r3, #3
 8013106:	d9d3      	bls.n	80130b0 <dns_enqueue+0xe4>
 8013108:	e000      	b.n	801310c <dns_enqueue+0x140>
      break;
 801310a:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 801310c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013110:	2b04      	cmp	r3, #4
 8013112:	d11f      	bne.n	8013154 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8013114:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013118:	2b03      	cmp	r3, #3
 801311a:	d80b      	bhi.n	8013134 <dns_enqueue+0x168>
 801311c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8013120:	4942      	ldr	r1, [pc, #264]	; (801322c <dns_enqueue+0x260>)
 8013122:	4613      	mov	r3, r2
 8013124:	011b      	lsls	r3, r3, #4
 8013126:	4413      	add	r3, r2
 8013128:	011b      	lsls	r3, r3, #4
 801312a:	440b      	add	r3, r1
 801312c:	330a      	adds	r3, #10
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	2b03      	cmp	r3, #3
 8013132:	d002      	beq.n	801313a <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 8013134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013138:	e073      	b.n	8013222 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 801313a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 8013142:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013146:	4613      	mov	r3, r2
 8013148:	011b      	lsls	r3, r3, #4
 801314a:	4413      	add	r3, r2
 801314c:	011b      	lsls	r3, r3, #4
 801314e:	4a37      	ldr	r2, [pc, #220]	; (801322c <dns_enqueue+0x260>)
 8013150:	4413      	add	r3, r2
 8013152:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 8013154:	2300      	movs	r3, #0
 8013156:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013158:	2300      	movs	r3, #0
 801315a:	76fb      	strb	r3, [r7, #27]
 801315c:	e015      	b.n	801318a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 801315e:	7efa      	ldrb	r2, [r7, #27]
 8013160:	4933      	ldr	r1, [pc, #204]	; (8013230 <dns_enqueue+0x264>)
 8013162:	4613      	mov	r3, r2
 8013164:	005b      	lsls	r3, r3, #1
 8013166:	4413      	add	r3, r2
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	440b      	add	r3, r1
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d108      	bne.n	8013184 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8013172:	7efa      	ldrb	r2, [r7, #27]
 8013174:	4613      	mov	r3, r2
 8013176:	005b      	lsls	r3, r3, #1
 8013178:	4413      	add	r3, r2
 801317a:	009b      	lsls	r3, r3, #2
 801317c:	4a2c      	ldr	r2, [pc, #176]	; (8013230 <dns_enqueue+0x264>)
 801317e:	4413      	add	r3, r2
 8013180:	61fb      	str	r3, [r7, #28]
      break;
 8013182:	e005      	b.n	8013190 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8013184:	7efb      	ldrb	r3, [r7, #27]
 8013186:	3301      	adds	r3, #1
 8013188:	76fb      	strb	r3, [r7, #27]
 801318a:	7efb      	ldrb	r3, [r7, #27]
 801318c:	2b03      	cmp	r3, #3
 801318e:	d9e6      	bls.n	801315e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d102      	bne.n	801319c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8013196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801319a:	e042      	b.n	8013222 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80131a2:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 80131a4:	6a3b      	ldr	r3, [r7, #32]
 80131a6:	2201      	movs	r2, #1
 80131a8:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 80131aa:	4b22      	ldr	r3, [pc, #136]	; (8013234 <dns_enqueue+0x268>)
 80131ac:	781a      	ldrb	r2, [r3, #0]
 80131ae:	6a3b      	ldr	r3, [r7, #32]
 80131b0:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	683a      	ldr	r2, [r7, #0]
 80131bc:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	2bff      	cmp	r3, #255	; 0xff
 80131c2:	bf28      	it	cs
 80131c4:	23ff      	movcs	r3, #255	; 0xff
 80131c6:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 80131c8:	6a3b      	ldr	r3, [r7, #32]
 80131ca:	3310      	adds	r3, #16
 80131cc:	697a      	ldr	r2, [r7, #20]
 80131ce:	68f9      	ldr	r1, [r7, #12]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f00d ffab 	bl	802112c <memcpy>
  entry->name[namelen] = 0;
 80131d6:	6a3a      	ldr	r2, [r7, #32]
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	4413      	add	r3, r2
 80131dc:	3310      	adds	r3, #16
 80131de:	2200      	movs	r2, #0
 80131e0:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 80131e2:	f7ff fb4f 	bl	8012884 <dns_alloc_pcb>
 80131e6:	4603      	mov	r3, r0
 80131e8:	461a      	mov	r2, r3
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 80131ee:	6a3b      	ldr	r3, [r7, #32]
 80131f0:	7bdb      	ldrb	r3, [r3, #15]
 80131f2:	2b03      	cmp	r3, #3
 80131f4:	d908      	bls.n	8013208 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 80131f6:	6a3b      	ldr	r3, [r7, #32]
 80131f8:	2200      	movs	r2, #0
 80131fa:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	2200      	movs	r2, #0
 8013200:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 8013202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013206:	e00c      	b.n	8013222 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 8013208:	4b0a      	ldr	r3, [pc, #40]	; (8013234 <dns_enqueue+0x268>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	3301      	adds	r3, #1
 801320e:	b2da      	uxtb	r2, r3
 8013210:	4b08      	ldr	r3, [pc, #32]	; (8013234 <dns_enqueue+0x268>)
 8013212:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8013214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013218:	4618      	mov	r0, r3
 801321a:	f7ff fc95 	bl	8012b48 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 801321e:	f06f 0304 	mvn.w	r3, #4
}
 8013222:	4618      	mov	r0, r3
 8013224:	3728      	adds	r7, #40	; 0x28
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	20013e90 	.word	0x20013e90
 8013230:	200142d0 	.word	0x200142d0
 8013234:	20013e8d 	.word	0x20013e8d

08013238 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b086      	sub	sp, #24
 801323c:	af00      	add	r7, sp, #0
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	607a      	str	r2, [r7, #4]
 8013244:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d006      	beq.n	801325a <dns_gethostbyname_addrtype+0x22>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d003      	beq.n	801325a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d102      	bne.n	8013260 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 801325a:	f06f 030f 	mvn.w	r3, #15
 801325e:	e029      	b.n	80132b4 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8013260:	68f8      	ldr	r0, [r7, #12]
 8013262:	f7ec ffbf 	bl	80001e4 <strlen>
 8013266:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	2bff      	cmp	r3, #255	; 0xff
 801326c:	d902      	bls.n	8013274 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 801326e:	f06f 030f 	mvn.w	r3, #15
 8013272:	e01f      	b.n	80132b4 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8013274:	68b9      	ldr	r1, [r7, #8]
 8013276:	68f8      	ldr	r0, [r7, #12]
 8013278:	f00c fbfe 	bl	801fa78 <ip4addr_aton>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	e016      	b.n	80132b4 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8013286:	68b9      	ldr	r1, [r7, #8]
 8013288:	68f8      	ldr	r0, [r7, #12]
 801328a:	f7ff f8b1 	bl	80123f0 <dns_lookup>
 801328e:	4603      	mov	r3, r0
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	e00d      	b.n	80132b4 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8013298:	4b08      	ldr	r3, [pc, #32]	; (80132bc <dns_gethostbyname_addrtype+0x84>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d102      	bne.n	80132a6 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 80132a0:	f06f 0305 	mvn.w	r3, #5
 80132a4:	e006      	b.n	80132b4 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	6979      	ldr	r1, [r7, #20]
 80132ac:	68f8      	ldr	r0, [r7, #12]
 80132ae:	f7ff fe8d 	bl	8012fcc <dns_enqueue>
 80132b2:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3718      	adds	r7, #24
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	20014300 	.word	0x20014300

080132c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80132c6:	2300      	movs	r3, #0
 80132c8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80132ca:	f00d fd5f 	bl	8020d8c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80132ce:	f000 f8d7 	bl	8013480 <mem_init>
  memp_init();
 80132d2:	f000 fc33 	bl	8013b3c <memp_init>
  pbuf_init();
  netif_init();
 80132d6:	f000 fcf9 	bl	8013ccc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80132da:	f008 fb55 	bl	801b988 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80132de:	f001 ffd3 	bl	8015288 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80132e2:	f7ff f854 	bl	801238e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80132e6:	f008 fa95 	bl	801b814 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80132ea:	bf00      	nop
 80132ec:	3708      	adds	r7, #8
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
	...

080132f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	4603      	mov	r3, r0
 80132fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80132fe:	4b05      	ldr	r3, [pc, #20]	; (8013314 <ptr_to_mem+0x20>)
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	88fb      	ldrh	r3, [r7, #6]
 8013304:	4413      	add	r3, r2
}
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr
 8013312:	bf00      	nop
 8013314:	20014308 	.word	0x20014308

08013318 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013320:	4b05      	ldr	r3, [pc, #20]	; (8013338 <mem_to_ptr+0x20>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	b29b      	uxth	r3, r3
}
 801332a:	4618      	mov	r0, r3
 801332c:	370c      	adds	r7, #12
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop
 8013338:	20014308 	.word	0x20014308

0801333c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801333c:	b590      	push	{r4, r7, lr}
 801333e:	b085      	sub	sp, #20
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013344:	4b45      	ldr	r3, [pc, #276]	; (801345c <plug_holes+0x120>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	429a      	cmp	r2, r3
 801334c:	d206      	bcs.n	801335c <plug_holes+0x20>
 801334e:	4b44      	ldr	r3, [pc, #272]	; (8013460 <plug_holes+0x124>)
 8013350:	f240 12df 	movw	r2, #479	; 0x1df
 8013354:	4943      	ldr	r1, [pc, #268]	; (8013464 <plug_holes+0x128>)
 8013356:	4844      	ldr	r0, [pc, #272]	; (8013468 <plug_holes+0x12c>)
 8013358:	f00e fc2c 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801335c:	4b43      	ldr	r3, [pc, #268]	; (801346c <plug_holes+0x130>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	429a      	cmp	r2, r3
 8013364:	d306      	bcc.n	8013374 <plug_holes+0x38>
 8013366:	4b3e      	ldr	r3, [pc, #248]	; (8013460 <plug_holes+0x124>)
 8013368:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801336c:	4940      	ldr	r1, [pc, #256]	; (8013470 <plug_holes+0x134>)
 801336e:	483e      	ldr	r0, [pc, #248]	; (8013468 <plug_holes+0x12c>)
 8013370:	f00e fc20 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	791b      	ldrb	r3, [r3, #4]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d006      	beq.n	801338a <plug_holes+0x4e>
 801337c:	4b38      	ldr	r3, [pc, #224]	; (8013460 <plug_holes+0x124>)
 801337e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013382:	493c      	ldr	r1, [pc, #240]	; (8013474 <plug_holes+0x138>)
 8013384:	4838      	ldr	r0, [pc, #224]	; (8013468 <plug_holes+0x12c>)
 8013386:	f00e fc15 	bl	8021bb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013392:	d906      	bls.n	80133a2 <plug_holes+0x66>
 8013394:	4b32      	ldr	r3, [pc, #200]	; (8013460 <plug_holes+0x124>)
 8013396:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801339a:	4937      	ldr	r1, [pc, #220]	; (8013478 <plug_holes+0x13c>)
 801339c:	4832      	ldr	r0, [pc, #200]	; (8013468 <plug_holes+0x12c>)
 801339e:	f00e fc09 	bl	8021bb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	881b      	ldrh	r3, [r3, #0]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7ff ffa4 	bl	80132f4 <ptr_to_mem>
 80133ac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d024      	beq.n	8013400 <plug_holes+0xc4>
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	791b      	ldrb	r3, [r3, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d120      	bne.n	8013400 <plug_holes+0xc4>
 80133be:	4b2b      	ldr	r3, [pc, #172]	; (801346c <plug_holes+0x130>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d01b      	beq.n	8013400 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80133c8:	4b2c      	ldr	r3, [pc, #176]	; (801347c <plug_holes+0x140>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d102      	bne.n	80133d8 <plug_holes+0x9c>
      lfree = mem;
 80133d2:	4a2a      	ldr	r2, [pc, #168]	; (801347c <plug_holes+0x140>)
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	881a      	ldrh	r2, [r3, #0]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133e8:	d00a      	beq.n	8013400 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff ff80 	bl	80132f4 <ptr_to_mem>
 80133f4:	4604      	mov	r4, r0
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7ff ff8e 	bl	8013318 <mem_to_ptr>
 80133fc:	4603      	mov	r3, r0
 80133fe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	885b      	ldrh	r3, [r3, #2]
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff ff75 	bl	80132f4 <ptr_to_mem>
 801340a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801340c:	68ba      	ldr	r2, [r7, #8]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	429a      	cmp	r2, r3
 8013412:	d01f      	beq.n	8013454 <plug_holes+0x118>
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	791b      	ldrb	r3, [r3, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d11b      	bne.n	8013454 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801341c:	4b17      	ldr	r3, [pc, #92]	; (801347c <plug_holes+0x140>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	429a      	cmp	r2, r3
 8013424:	d102      	bne.n	801342c <plug_holes+0xf0>
      lfree = pmem;
 8013426:	4a15      	ldr	r2, [pc, #84]	; (801347c <plug_holes+0x140>)
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	881a      	ldrh	r2, [r3, #0]
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	881b      	ldrh	r3, [r3, #0]
 8013438:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801343c:	d00a      	beq.n	8013454 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	881b      	ldrh	r3, [r3, #0]
 8013442:	4618      	mov	r0, r3
 8013444:	f7ff ff56 	bl	80132f4 <ptr_to_mem>
 8013448:	4604      	mov	r4, r0
 801344a:	68b8      	ldr	r0, [r7, #8]
 801344c:	f7ff ff64 	bl	8013318 <mem_to_ptr>
 8013450:	4603      	mov	r3, r0
 8013452:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013454:	bf00      	nop
 8013456:	3714      	adds	r7, #20
 8013458:	46bd      	mov	sp, r7
 801345a:	bd90      	pop	{r4, r7, pc}
 801345c:	20014308 	.word	0x20014308
 8013460:	0802685c 	.word	0x0802685c
 8013464:	0802688c 	.word	0x0802688c
 8013468:	080268a4 	.word	0x080268a4
 801346c:	2001430c 	.word	0x2001430c
 8013470:	080268cc 	.word	0x080268cc
 8013474:	080268e8 	.word	0x080268e8
 8013478:	08026904 	.word	0x08026904
 801347c:	20014314 	.word	0x20014314

08013480 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013486:	4b1f      	ldr	r3, [pc, #124]	; (8013504 <mem_init+0x84>)
 8013488:	3303      	adds	r3, #3
 801348a:	f023 0303 	bic.w	r3, r3, #3
 801348e:	461a      	mov	r2, r3
 8013490:	4b1d      	ldr	r3, [pc, #116]	; (8013508 <mem_init+0x88>)
 8013492:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013494:	4b1c      	ldr	r3, [pc, #112]	; (8013508 <mem_init+0x88>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80134a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2200      	movs	r2, #0
 80134a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80134ae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80134b2:	f7ff ff1f 	bl	80132f4 <ptr_to_mem>
 80134b6:	4603      	mov	r3, r0
 80134b8:	4a14      	ldr	r2, [pc, #80]	; (801350c <mem_init+0x8c>)
 80134ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80134bc:	4b13      	ldr	r3, [pc, #76]	; (801350c <mem_init+0x8c>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	2201      	movs	r2, #1
 80134c2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80134c4:	4b11      	ldr	r3, [pc, #68]	; (801350c <mem_init+0x8c>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80134cc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80134ce:	4b0f      	ldr	r3, [pc, #60]	; (801350c <mem_init+0x8c>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80134d6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80134d8:	4b0b      	ldr	r3, [pc, #44]	; (8013508 <mem_init+0x88>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	4a0c      	ldr	r2, [pc, #48]	; (8013510 <mem_init+0x90>)
 80134de:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80134e0:	480c      	ldr	r0, [pc, #48]	; (8013514 <mem_init+0x94>)
 80134e2:	f00d fc61 	bl	8020da8 <sys_mutex_new>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d006      	beq.n	80134fa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80134ec:	4b0a      	ldr	r3, [pc, #40]	; (8013518 <mem_init+0x98>)
 80134ee:	f240 221f 	movw	r2, #543	; 0x21f
 80134f2:	490a      	ldr	r1, [pc, #40]	; (801351c <mem_init+0x9c>)
 80134f4:	480a      	ldr	r0, [pc, #40]	; (8013520 <mem_init+0xa0>)
 80134f6:	f00e fb5d 	bl	8021bb4 <iprintf>
  }
}
 80134fa:	bf00      	nop
 80134fc:	3708      	adds	r7, #8
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	200177ac 	.word	0x200177ac
 8013508:	20014308 	.word	0x20014308
 801350c:	2001430c 	.word	0x2001430c
 8013510:	20014314 	.word	0x20014314
 8013514:	20014310 	.word	0x20014310
 8013518:	0802685c 	.word	0x0802685c
 801351c:	08026930 	.word	0x08026930
 8013520:	080268a4 	.word	0x080268a4

08013524 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b086      	sub	sp, #24
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7ff fef3 	bl	8013318 <mem_to_ptr>
 8013532:	4603      	mov	r3, r0
 8013534:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	4618      	mov	r0, r3
 801353c:	f7ff feda 	bl	80132f4 <ptr_to_mem>
 8013540:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	885b      	ldrh	r3, [r3, #2]
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff fed4 	bl	80132f4 <ptr_to_mem>
 801354c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	881b      	ldrh	r3, [r3, #0]
 8013552:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013556:	d818      	bhi.n	801358a <mem_link_valid+0x66>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	885b      	ldrh	r3, [r3, #2]
 801355c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013560:	d813      	bhi.n	801358a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013566:	8afa      	ldrh	r2, [r7, #22]
 8013568:	429a      	cmp	r2, r3
 801356a:	d004      	beq.n	8013576 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	881b      	ldrh	r3, [r3, #0]
 8013570:	8afa      	ldrh	r2, [r7, #22]
 8013572:	429a      	cmp	r2, r3
 8013574:	d109      	bne.n	801358a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013576:	4b08      	ldr	r3, [pc, #32]	; (8013598 <mem_link_valid+0x74>)
 8013578:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801357a:	693a      	ldr	r2, [r7, #16]
 801357c:	429a      	cmp	r2, r3
 801357e:	d006      	beq.n	801358e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	885b      	ldrh	r3, [r3, #2]
 8013584:	8afa      	ldrh	r2, [r7, #22]
 8013586:	429a      	cmp	r2, r3
 8013588:	d001      	beq.n	801358e <mem_link_valid+0x6a>
    return 0;
 801358a:	2300      	movs	r3, #0
 801358c:	e000      	b.n	8013590 <mem_link_valid+0x6c>
  }
  return 1;
 801358e:	2301      	movs	r3, #1
}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	2001430c 	.word	0x2001430c

0801359c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b088      	sub	sp, #32
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d070      	beq.n	801368c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f003 0303 	and.w	r3, r3, #3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d00d      	beq.n	80135d0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80135b4:	4b37      	ldr	r3, [pc, #220]	; (8013694 <mem_free+0xf8>)
 80135b6:	f240 2273 	movw	r2, #627	; 0x273
 80135ba:	4937      	ldr	r1, [pc, #220]	; (8013698 <mem_free+0xfc>)
 80135bc:	4837      	ldr	r0, [pc, #220]	; (801369c <mem_free+0x100>)
 80135be:	f00e faf9 	bl	8021bb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135c2:	f00d fc45 	bl	8020e50 <sys_arch_protect>
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f00d fc4f 	bl	8020e6c <sys_arch_unprotect>
    return;
 80135ce:	e05e      	b.n	801368e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3b08      	subs	r3, #8
 80135d4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80135d6:	4b32      	ldr	r3, [pc, #200]	; (80136a0 <mem_free+0x104>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	69fa      	ldr	r2, [r7, #28]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d306      	bcc.n	80135ee <mem_free+0x52>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f103 020c 	add.w	r2, r3, #12
 80135e6:	4b2f      	ldr	r3, [pc, #188]	; (80136a4 <mem_free+0x108>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d90d      	bls.n	801360a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80135ee:	4b29      	ldr	r3, [pc, #164]	; (8013694 <mem_free+0xf8>)
 80135f0:	f240 227f 	movw	r2, #639	; 0x27f
 80135f4:	492c      	ldr	r1, [pc, #176]	; (80136a8 <mem_free+0x10c>)
 80135f6:	4829      	ldr	r0, [pc, #164]	; (801369c <mem_free+0x100>)
 80135f8:	f00e fadc 	bl	8021bb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135fc:	f00d fc28 	bl	8020e50 <sys_arch_protect>
 8013600:	6138      	str	r0, [r7, #16]
 8013602:	6938      	ldr	r0, [r7, #16]
 8013604:	f00d fc32 	bl	8020e6c <sys_arch_unprotect>
    return;
 8013608:	e041      	b.n	801368e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801360a:	4828      	ldr	r0, [pc, #160]	; (80136ac <mem_free+0x110>)
 801360c:	f00d fbe6 	bl	8020ddc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	791b      	ldrb	r3, [r3, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d110      	bne.n	801363a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013618:	4b1e      	ldr	r3, [pc, #120]	; (8013694 <mem_free+0xf8>)
 801361a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801361e:	4924      	ldr	r1, [pc, #144]	; (80136b0 <mem_free+0x114>)
 8013620:	481e      	ldr	r0, [pc, #120]	; (801369c <mem_free+0x100>)
 8013622:	f00e fac7 	bl	8021bb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013626:	4821      	ldr	r0, [pc, #132]	; (80136ac <mem_free+0x110>)
 8013628:	f00d fbe7 	bl	8020dfa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801362c:	f00d fc10 	bl	8020e50 <sys_arch_protect>
 8013630:	6178      	str	r0, [r7, #20]
 8013632:	6978      	ldr	r0, [r7, #20]
 8013634:	f00d fc1a 	bl	8020e6c <sys_arch_unprotect>
    return;
 8013638:	e029      	b.n	801368e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801363a:	69f8      	ldr	r0, [r7, #28]
 801363c:	f7ff ff72 	bl	8013524 <mem_link_valid>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d110      	bne.n	8013668 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013646:	4b13      	ldr	r3, [pc, #76]	; (8013694 <mem_free+0xf8>)
 8013648:	f240 2295 	movw	r2, #661	; 0x295
 801364c:	4919      	ldr	r1, [pc, #100]	; (80136b4 <mem_free+0x118>)
 801364e:	4813      	ldr	r0, [pc, #76]	; (801369c <mem_free+0x100>)
 8013650:	f00e fab0 	bl	8021bb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013654:	4815      	ldr	r0, [pc, #84]	; (80136ac <mem_free+0x110>)
 8013656:	f00d fbd0 	bl	8020dfa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801365a:	f00d fbf9 	bl	8020e50 <sys_arch_protect>
 801365e:	61b8      	str	r0, [r7, #24]
 8013660:	69b8      	ldr	r0, [r7, #24]
 8013662:	f00d fc03 	bl	8020e6c <sys_arch_unprotect>
    return;
 8013666:	e012      	b.n	801368e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	2200      	movs	r2, #0
 801366c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801366e:	4b12      	ldr	r3, [pc, #72]	; (80136b8 <mem_free+0x11c>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	69fa      	ldr	r2, [r7, #28]
 8013674:	429a      	cmp	r2, r3
 8013676:	d202      	bcs.n	801367e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013678:	4a0f      	ldr	r2, [pc, #60]	; (80136b8 <mem_free+0x11c>)
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801367e:	69f8      	ldr	r0, [r7, #28]
 8013680:	f7ff fe5c 	bl	801333c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013684:	4809      	ldr	r0, [pc, #36]	; (80136ac <mem_free+0x110>)
 8013686:	f00d fbb8 	bl	8020dfa <sys_mutex_unlock>
 801368a:	e000      	b.n	801368e <mem_free+0xf2>
    return;
 801368c:	bf00      	nop
}
 801368e:	3720      	adds	r7, #32
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	0802685c 	.word	0x0802685c
 8013698:	0802694c 	.word	0x0802694c
 801369c:	080268a4 	.word	0x080268a4
 80136a0:	20014308 	.word	0x20014308
 80136a4:	2001430c 	.word	0x2001430c
 80136a8:	08026970 	.word	0x08026970
 80136ac:	20014310 	.word	0x20014310
 80136b0:	0802698c 	.word	0x0802698c
 80136b4:	080269b4 	.word	0x080269b4
 80136b8:	20014314 	.word	0x20014314

080136bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b088      	sub	sp, #32
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	460b      	mov	r3, r1
 80136c6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80136c8:	887b      	ldrh	r3, [r7, #2]
 80136ca:	3303      	adds	r3, #3
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	f023 0303 	bic.w	r3, r3, #3
 80136d2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80136d4:	8bfb      	ldrh	r3, [r7, #30]
 80136d6:	2b0b      	cmp	r3, #11
 80136d8:	d801      	bhi.n	80136de <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80136da:	230c      	movs	r3, #12
 80136dc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80136de:	8bfb      	ldrh	r3, [r7, #30]
 80136e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80136e4:	d803      	bhi.n	80136ee <mem_trim+0x32>
 80136e6:	8bfa      	ldrh	r2, [r7, #30]
 80136e8:	887b      	ldrh	r3, [r7, #2]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d201      	bcs.n	80136f2 <mem_trim+0x36>
    return NULL;
 80136ee:	2300      	movs	r3, #0
 80136f0:	e0d8      	b.n	80138a4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80136f2:	4b6e      	ldr	r3, [pc, #440]	; (80138ac <mem_trim+0x1f0>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d304      	bcc.n	8013706 <mem_trim+0x4a>
 80136fc:	4b6c      	ldr	r3, [pc, #432]	; (80138b0 <mem_trim+0x1f4>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	429a      	cmp	r2, r3
 8013704:	d306      	bcc.n	8013714 <mem_trim+0x58>
 8013706:	4b6b      	ldr	r3, [pc, #428]	; (80138b4 <mem_trim+0x1f8>)
 8013708:	f240 22d1 	movw	r2, #721	; 0x2d1
 801370c:	496a      	ldr	r1, [pc, #424]	; (80138b8 <mem_trim+0x1fc>)
 801370e:	486b      	ldr	r0, [pc, #428]	; (80138bc <mem_trim+0x200>)
 8013710:	f00e fa50 	bl	8021bb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013714:	4b65      	ldr	r3, [pc, #404]	; (80138ac <mem_trim+0x1f0>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	687a      	ldr	r2, [r7, #4]
 801371a:	429a      	cmp	r2, r3
 801371c:	d304      	bcc.n	8013728 <mem_trim+0x6c>
 801371e:	4b64      	ldr	r3, [pc, #400]	; (80138b0 <mem_trim+0x1f4>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	429a      	cmp	r2, r3
 8013726:	d307      	bcc.n	8013738 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013728:	f00d fb92 	bl	8020e50 <sys_arch_protect>
 801372c:	60b8      	str	r0, [r7, #8]
 801372e:	68b8      	ldr	r0, [r7, #8]
 8013730:	f00d fb9c 	bl	8020e6c <sys_arch_unprotect>
    return rmem;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	e0b5      	b.n	80138a4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	3b08      	subs	r3, #8
 801373c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801373e:	69b8      	ldr	r0, [r7, #24]
 8013740:	f7ff fdea 	bl	8013318 <mem_to_ptr>
 8013744:	4603      	mov	r3, r0
 8013746:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	881a      	ldrh	r2, [r3, #0]
 801374c:	8afb      	ldrh	r3, [r7, #22]
 801374e:	1ad3      	subs	r3, r2, r3
 8013750:	b29b      	uxth	r3, r3
 8013752:	3b08      	subs	r3, #8
 8013754:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013756:	8bfa      	ldrh	r2, [r7, #30]
 8013758:	8abb      	ldrh	r3, [r7, #20]
 801375a:	429a      	cmp	r2, r3
 801375c:	d906      	bls.n	801376c <mem_trim+0xb0>
 801375e:	4b55      	ldr	r3, [pc, #340]	; (80138b4 <mem_trim+0x1f8>)
 8013760:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013764:	4956      	ldr	r1, [pc, #344]	; (80138c0 <mem_trim+0x204>)
 8013766:	4855      	ldr	r0, [pc, #340]	; (80138bc <mem_trim+0x200>)
 8013768:	f00e fa24 	bl	8021bb4 <iprintf>
  if (newsize > size) {
 801376c:	8bfa      	ldrh	r2, [r7, #30]
 801376e:	8abb      	ldrh	r3, [r7, #20]
 8013770:	429a      	cmp	r2, r3
 8013772:	d901      	bls.n	8013778 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013774:	2300      	movs	r3, #0
 8013776:	e095      	b.n	80138a4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013778:	8bfa      	ldrh	r2, [r7, #30]
 801377a:	8abb      	ldrh	r3, [r7, #20]
 801377c:	429a      	cmp	r2, r3
 801377e:	d101      	bne.n	8013784 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	e08f      	b.n	80138a4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013784:	484f      	ldr	r0, [pc, #316]	; (80138c4 <mem_trim+0x208>)
 8013786:	f00d fb29 	bl	8020ddc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	881b      	ldrh	r3, [r3, #0]
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff fdb0 	bl	80132f4 <ptr_to_mem>
 8013794:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	791b      	ldrb	r3, [r3, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d13f      	bne.n	801381e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80137a6:	d106      	bne.n	80137b6 <mem_trim+0xfa>
 80137a8:	4b42      	ldr	r3, [pc, #264]	; (80138b4 <mem_trim+0x1f8>)
 80137aa:	f240 22f5 	movw	r2, #757	; 0x2f5
 80137ae:	4946      	ldr	r1, [pc, #280]	; (80138c8 <mem_trim+0x20c>)
 80137b0:	4842      	ldr	r0, [pc, #264]	; (80138bc <mem_trim+0x200>)
 80137b2:	f00e f9ff 	bl	8021bb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	881b      	ldrh	r3, [r3, #0]
 80137ba:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80137bc:	8afa      	ldrh	r2, [r7, #22]
 80137be:	8bfb      	ldrh	r3, [r7, #30]
 80137c0:	4413      	add	r3, r2
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	3308      	adds	r3, #8
 80137c6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80137c8:	4b40      	ldr	r3, [pc, #256]	; (80138cc <mem_trim+0x210>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	693a      	ldr	r2, [r7, #16]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d106      	bne.n	80137e0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80137d2:	89fb      	ldrh	r3, [r7, #14]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7ff fd8d 	bl	80132f4 <ptr_to_mem>
 80137da:	4603      	mov	r3, r0
 80137dc:	4a3b      	ldr	r2, [pc, #236]	; (80138cc <mem_trim+0x210>)
 80137de:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80137e0:	89fb      	ldrh	r3, [r7, #14]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff fd86 	bl	80132f4 <ptr_to_mem>
 80137e8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	2200      	movs	r2, #0
 80137ee:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	89ba      	ldrh	r2, [r7, #12]
 80137f4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	8afa      	ldrh	r2, [r7, #22]
 80137fa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	89fa      	ldrh	r2, [r7, #14]
 8013800:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801380a:	d047      	beq.n	801389c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	881b      	ldrh	r3, [r3, #0]
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff fd6f 	bl	80132f4 <ptr_to_mem>
 8013816:	4602      	mov	r2, r0
 8013818:	89fb      	ldrh	r3, [r7, #14]
 801381a:	8053      	strh	r3, [r2, #2]
 801381c:	e03e      	b.n	801389c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801381e:	8bfb      	ldrh	r3, [r7, #30]
 8013820:	f103 0214 	add.w	r2, r3, #20
 8013824:	8abb      	ldrh	r3, [r7, #20]
 8013826:	429a      	cmp	r2, r3
 8013828:	d838      	bhi.n	801389c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801382a:	8afa      	ldrh	r2, [r7, #22]
 801382c:	8bfb      	ldrh	r3, [r7, #30]
 801382e:	4413      	add	r3, r2
 8013830:	b29b      	uxth	r3, r3
 8013832:	3308      	adds	r3, #8
 8013834:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	881b      	ldrh	r3, [r3, #0]
 801383a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801383e:	d106      	bne.n	801384e <mem_trim+0x192>
 8013840:	4b1c      	ldr	r3, [pc, #112]	; (80138b4 <mem_trim+0x1f8>)
 8013842:	f240 3216 	movw	r2, #790	; 0x316
 8013846:	4920      	ldr	r1, [pc, #128]	; (80138c8 <mem_trim+0x20c>)
 8013848:	481c      	ldr	r0, [pc, #112]	; (80138bc <mem_trim+0x200>)
 801384a:	f00e f9b3 	bl	8021bb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801384e:	89fb      	ldrh	r3, [r7, #14]
 8013850:	4618      	mov	r0, r3
 8013852:	f7ff fd4f 	bl	80132f4 <ptr_to_mem>
 8013856:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013858:	4b1c      	ldr	r3, [pc, #112]	; (80138cc <mem_trim+0x210>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	693a      	ldr	r2, [r7, #16]
 801385e:	429a      	cmp	r2, r3
 8013860:	d202      	bcs.n	8013868 <mem_trim+0x1ac>
      lfree = mem2;
 8013862:	4a1a      	ldr	r2, [pc, #104]	; (80138cc <mem_trim+0x210>)
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	2200      	movs	r2, #0
 801386c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	881a      	ldrh	r2, [r3, #0]
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	8afa      	ldrh	r2, [r7, #22]
 801387a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	89fa      	ldrh	r2, [r7, #14]
 8013880:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	881b      	ldrh	r3, [r3, #0]
 8013886:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801388a:	d007      	beq.n	801389c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	881b      	ldrh	r3, [r3, #0]
 8013890:	4618      	mov	r0, r3
 8013892:	f7ff fd2f 	bl	80132f4 <ptr_to_mem>
 8013896:	4602      	mov	r2, r0
 8013898:	89fb      	ldrh	r3, [r7, #14]
 801389a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801389c:	4809      	ldr	r0, [pc, #36]	; (80138c4 <mem_trim+0x208>)
 801389e:	f00d faac 	bl	8020dfa <sys_mutex_unlock>
  return rmem;
 80138a2:	687b      	ldr	r3, [r7, #4]
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3720      	adds	r7, #32
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	20014308 	.word	0x20014308
 80138b0:	2001430c 	.word	0x2001430c
 80138b4:	0802685c 	.word	0x0802685c
 80138b8:	080269e8 	.word	0x080269e8
 80138bc:	080268a4 	.word	0x080268a4
 80138c0:	08026a00 	.word	0x08026a00
 80138c4:	20014310 	.word	0x20014310
 80138c8:	08026a20 	.word	0x08026a20
 80138cc:	20014314 	.word	0x20014314

080138d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b088      	sub	sp, #32
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	4603      	mov	r3, r0
 80138d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80138da:	88fb      	ldrh	r3, [r7, #6]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d101      	bne.n	80138e4 <mem_malloc+0x14>
    return NULL;
 80138e0:	2300      	movs	r3, #0
 80138e2:	e0e2      	b.n	8013aaa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80138e4:	88fb      	ldrh	r3, [r7, #6]
 80138e6:	3303      	adds	r3, #3
 80138e8:	b29b      	uxth	r3, r3
 80138ea:	f023 0303 	bic.w	r3, r3, #3
 80138ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80138f0:	8bbb      	ldrh	r3, [r7, #28]
 80138f2:	2b0b      	cmp	r3, #11
 80138f4:	d801      	bhi.n	80138fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80138f6:	230c      	movs	r3, #12
 80138f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80138fa:	8bbb      	ldrh	r3, [r7, #28]
 80138fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013900:	d803      	bhi.n	801390a <mem_malloc+0x3a>
 8013902:	8bba      	ldrh	r2, [r7, #28]
 8013904:	88fb      	ldrh	r3, [r7, #6]
 8013906:	429a      	cmp	r2, r3
 8013908:	d201      	bcs.n	801390e <mem_malloc+0x3e>
    return NULL;
 801390a:	2300      	movs	r3, #0
 801390c:	e0cd      	b.n	8013aaa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801390e:	4869      	ldr	r0, [pc, #420]	; (8013ab4 <mem_malloc+0x1e4>)
 8013910:	f00d fa64 	bl	8020ddc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013914:	4b68      	ldr	r3, [pc, #416]	; (8013ab8 <mem_malloc+0x1e8>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff fcfd 	bl	8013318 <mem_to_ptr>
 801391e:	4603      	mov	r3, r0
 8013920:	83fb      	strh	r3, [r7, #30]
 8013922:	e0b7      	b.n	8013a94 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013924:	8bfb      	ldrh	r3, [r7, #30]
 8013926:	4618      	mov	r0, r3
 8013928:	f7ff fce4 	bl	80132f4 <ptr_to_mem>
 801392c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	791b      	ldrb	r3, [r3, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	f040 80a7 	bne.w	8013a86 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	881b      	ldrh	r3, [r3, #0]
 801393c:	461a      	mov	r2, r3
 801393e:	8bfb      	ldrh	r3, [r7, #30]
 8013940:	1ad3      	subs	r3, r2, r3
 8013942:	f1a3 0208 	sub.w	r2, r3, #8
 8013946:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013948:	429a      	cmp	r2, r3
 801394a:	f0c0 809c 	bcc.w	8013a86 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	461a      	mov	r2, r3
 8013954:	8bfb      	ldrh	r3, [r7, #30]
 8013956:	1ad3      	subs	r3, r2, r3
 8013958:	f1a3 0208 	sub.w	r2, r3, #8
 801395c:	8bbb      	ldrh	r3, [r7, #28]
 801395e:	3314      	adds	r3, #20
 8013960:	429a      	cmp	r2, r3
 8013962:	d333      	bcc.n	80139cc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013964:	8bfa      	ldrh	r2, [r7, #30]
 8013966:	8bbb      	ldrh	r3, [r7, #28]
 8013968:	4413      	add	r3, r2
 801396a:	b29b      	uxth	r3, r3
 801396c:	3308      	adds	r3, #8
 801396e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013970:	8a7b      	ldrh	r3, [r7, #18]
 8013972:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013976:	d106      	bne.n	8013986 <mem_malloc+0xb6>
 8013978:	4b50      	ldr	r3, [pc, #320]	; (8013abc <mem_malloc+0x1ec>)
 801397a:	f240 3287 	movw	r2, #903	; 0x387
 801397e:	4950      	ldr	r1, [pc, #320]	; (8013ac0 <mem_malloc+0x1f0>)
 8013980:	4850      	ldr	r0, [pc, #320]	; (8013ac4 <mem_malloc+0x1f4>)
 8013982:	f00e f917 	bl	8021bb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013986:	8a7b      	ldrh	r3, [r7, #18]
 8013988:	4618      	mov	r0, r3
 801398a:	f7ff fcb3 	bl	80132f4 <ptr_to_mem>
 801398e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2200      	movs	r2, #0
 8013994:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	881a      	ldrh	r2, [r3, #0]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	8bfa      	ldrh	r2, [r7, #30]
 80139a2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	8a7a      	ldrh	r2, [r7, #18]
 80139a8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	2201      	movs	r2, #1
 80139ae:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80139b8:	d00b      	beq.n	80139d2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	881b      	ldrh	r3, [r3, #0]
 80139be:	4618      	mov	r0, r3
 80139c0:	f7ff fc98 	bl	80132f4 <ptr_to_mem>
 80139c4:	4602      	mov	r2, r0
 80139c6:	8a7b      	ldrh	r3, [r7, #18]
 80139c8:	8053      	strh	r3, [r2, #2]
 80139ca:	e002      	b.n	80139d2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	2201      	movs	r2, #1
 80139d0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80139d2:	4b39      	ldr	r3, [pc, #228]	; (8013ab8 <mem_malloc+0x1e8>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	697a      	ldr	r2, [r7, #20]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d127      	bne.n	8013a2c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80139dc:	4b36      	ldr	r3, [pc, #216]	; (8013ab8 <mem_malloc+0x1e8>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80139e2:	e005      	b.n	80139f0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80139e4:	69bb      	ldr	r3, [r7, #24]
 80139e6:	881b      	ldrh	r3, [r3, #0]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ff fc83 	bl	80132f4 <ptr_to_mem>
 80139ee:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	791b      	ldrb	r3, [r3, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d004      	beq.n	8013a02 <mem_malloc+0x132>
 80139f8:	4b33      	ldr	r3, [pc, #204]	; (8013ac8 <mem_malloc+0x1f8>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	69ba      	ldr	r2, [r7, #24]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d1f0      	bne.n	80139e4 <mem_malloc+0x114>
          }
          lfree = cur;
 8013a02:	4a2d      	ldr	r2, [pc, #180]	; (8013ab8 <mem_malloc+0x1e8>)
 8013a04:	69bb      	ldr	r3, [r7, #24]
 8013a06:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013a08:	4b2b      	ldr	r3, [pc, #172]	; (8013ab8 <mem_malloc+0x1e8>)
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	4b2e      	ldr	r3, [pc, #184]	; (8013ac8 <mem_malloc+0x1f8>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d00b      	beq.n	8013a2c <mem_malloc+0x15c>
 8013a14:	4b28      	ldr	r3, [pc, #160]	; (8013ab8 <mem_malloc+0x1e8>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	791b      	ldrb	r3, [r3, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d006      	beq.n	8013a2c <mem_malloc+0x15c>
 8013a1e:	4b27      	ldr	r3, [pc, #156]	; (8013abc <mem_malloc+0x1ec>)
 8013a20:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013a24:	4929      	ldr	r1, [pc, #164]	; (8013acc <mem_malloc+0x1fc>)
 8013a26:	4827      	ldr	r0, [pc, #156]	; (8013ac4 <mem_malloc+0x1f4>)
 8013a28:	f00e f8c4 	bl	8021bb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013a2c:	4821      	ldr	r0, [pc, #132]	; (8013ab4 <mem_malloc+0x1e4>)
 8013a2e:	f00d f9e4 	bl	8020dfa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013a32:	8bba      	ldrh	r2, [r7, #28]
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	4413      	add	r3, r2
 8013a38:	3308      	adds	r3, #8
 8013a3a:	4a23      	ldr	r2, [pc, #140]	; (8013ac8 <mem_malloc+0x1f8>)
 8013a3c:	6812      	ldr	r2, [r2, #0]
 8013a3e:	4293      	cmp	r3, r2
 8013a40:	d906      	bls.n	8013a50 <mem_malloc+0x180>
 8013a42:	4b1e      	ldr	r3, [pc, #120]	; (8013abc <mem_malloc+0x1ec>)
 8013a44:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013a48:	4921      	ldr	r1, [pc, #132]	; (8013ad0 <mem_malloc+0x200>)
 8013a4a:	481e      	ldr	r0, [pc, #120]	; (8013ac4 <mem_malloc+0x1f4>)
 8013a4c:	f00e f8b2 	bl	8021bb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	f003 0303 	and.w	r3, r3, #3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d006      	beq.n	8013a68 <mem_malloc+0x198>
 8013a5a:	4b18      	ldr	r3, [pc, #96]	; (8013abc <mem_malloc+0x1ec>)
 8013a5c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013a60:	491c      	ldr	r1, [pc, #112]	; (8013ad4 <mem_malloc+0x204>)
 8013a62:	4818      	ldr	r0, [pc, #96]	; (8013ac4 <mem_malloc+0x1f4>)
 8013a64:	f00e f8a6 	bl	8021bb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	f003 0303 	and.w	r3, r3, #3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d006      	beq.n	8013a80 <mem_malloc+0x1b0>
 8013a72:	4b12      	ldr	r3, [pc, #72]	; (8013abc <mem_malloc+0x1ec>)
 8013a74:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013a78:	4917      	ldr	r1, [pc, #92]	; (8013ad8 <mem_malloc+0x208>)
 8013a7a:	4812      	ldr	r0, [pc, #72]	; (8013ac4 <mem_malloc+0x1f4>)
 8013a7c:	f00e f89a 	bl	8021bb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	3308      	adds	r3, #8
 8013a84:	e011      	b.n	8013aaa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013a86:	8bfb      	ldrh	r3, [r7, #30]
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7ff fc33 	bl	80132f4 <ptr_to_mem>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	881b      	ldrh	r3, [r3, #0]
 8013a92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013a94:	8bfa      	ldrh	r2, [r7, #30]
 8013a96:	8bbb      	ldrh	r3, [r7, #28]
 8013a98:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	f4ff af41 	bcc.w	8013924 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013aa2:	4804      	ldr	r0, [pc, #16]	; (8013ab4 <mem_malloc+0x1e4>)
 8013aa4:	f00d f9a9 	bl	8020dfa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3720      	adds	r7, #32
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	20014310 	.word	0x20014310
 8013ab8:	20014314 	.word	0x20014314
 8013abc:	0802685c 	.word	0x0802685c
 8013ac0:	08026a20 	.word	0x08026a20
 8013ac4:	080268a4 	.word	0x080268a4
 8013ac8:	2001430c 	.word	0x2001430c
 8013acc:	08026a34 	.word	0x08026a34
 8013ad0:	08026a50 	.word	0x08026a50
 8013ad4:	08026a80 	.word	0x08026a80
 8013ad8:	08026ab0 	.word	0x08026ab0

08013adc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013adc:	b480      	push	{r7}
 8013ade:	b085      	sub	sp, #20
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	689b      	ldr	r3, [r3, #8]
 8013af0:	3303      	adds	r3, #3
 8013af2:	f023 0303 	bic.w	r3, r3, #3
 8013af6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013af8:	2300      	movs	r3, #0
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	e011      	b.n	8013b22 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	68db      	ldr	r3, [r3, #12]
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	68ba      	ldr	r2, [r7, #8]
 8013b0e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	889b      	ldrh	r3, [r3, #4]
 8013b14:	461a      	mov	r2, r3
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	4413      	add	r3, r2
 8013b1a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	60fb      	str	r3, [r7, #12]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	88db      	ldrh	r3, [r3, #6]
 8013b26:	461a      	mov	r2, r3
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	dbe7      	blt.n	8013afe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013b2e:	bf00      	nop
 8013b30:	bf00      	nop
 8013b32:	3714      	adds	r7, #20
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013b42:	2300      	movs	r3, #0
 8013b44:	80fb      	strh	r3, [r7, #6]
 8013b46:	e009      	b.n	8013b5c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013b48:	88fb      	ldrh	r3, [r7, #6]
 8013b4a:	4a08      	ldr	r2, [pc, #32]	; (8013b6c <memp_init+0x30>)
 8013b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7ff ffc3 	bl	8013adc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013b56:	88fb      	ldrh	r3, [r7, #6]
 8013b58:	3301      	adds	r3, #1
 8013b5a:	80fb      	strh	r3, [r7, #6]
 8013b5c:	88fb      	ldrh	r3, [r7, #6]
 8013b5e:	2b0d      	cmp	r3, #13
 8013b60:	d9f2      	bls.n	8013b48 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013b62:	bf00      	nop
 8013b64:	bf00      	nop
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	08029930 	.word	0x08029930

08013b70 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013b78:	f00d f96a 	bl	8020e50 <sys_arch_protect>
 8013b7c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	68db      	ldr	r3, [r3, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d015      	beq.n	8013bb8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	68ba      	ldr	r2, [r7, #8]
 8013b92:	6812      	ldr	r2, [r2, #0]
 8013b94:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	f003 0303 	and.w	r3, r3, #3
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d006      	beq.n	8013bae <do_memp_malloc_pool+0x3e>
 8013ba0:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <do_memp_malloc_pool+0x58>)
 8013ba2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013ba6:	4909      	ldr	r1, [pc, #36]	; (8013bcc <do_memp_malloc_pool+0x5c>)
 8013ba8:	4809      	ldr	r0, [pc, #36]	; (8013bd0 <do_memp_malloc_pool+0x60>)
 8013baa:	f00e f803 	bl	8021bb4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013bae:	68f8      	ldr	r0, [r7, #12]
 8013bb0:	f00d f95c 	bl	8020e6c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	e003      	b.n	8013bc0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f00d f957 	bl	8020e6c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013bbe:	2300      	movs	r3, #0
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3710      	adds	r7, #16
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	08026b74 	.word	0x08026b74
 8013bcc:	08026ba4 	.word	0x08026ba4
 8013bd0:	08026bc8 	.word	0x08026bc8

08013bd4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b084      	sub	sp, #16
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4603      	mov	r3, r0
 8013bdc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013bde:	79fb      	ldrb	r3, [r7, #7]
 8013be0:	2b0d      	cmp	r3, #13
 8013be2:	d908      	bls.n	8013bf6 <memp_malloc+0x22>
 8013be4:	4b0a      	ldr	r3, [pc, #40]	; (8013c10 <memp_malloc+0x3c>)
 8013be6:	f240 1257 	movw	r2, #343	; 0x157
 8013bea:	490a      	ldr	r1, [pc, #40]	; (8013c14 <memp_malloc+0x40>)
 8013bec:	480a      	ldr	r0, [pc, #40]	; (8013c18 <memp_malloc+0x44>)
 8013bee:	f00d ffe1 	bl	8021bb4 <iprintf>
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	e008      	b.n	8013c08 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013bf6:	79fb      	ldrb	r3, [r7, #7]
 8013bf8:	4a08      	ldr	r2, [pc, #32]	; (8013c1c <memp_malloc+0x48>)
 8013bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7ff ffb6 	bl	8013b70 <do_memp_malloc_pool>
 8013c04:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013c06:	68fb      	ldr	r3, [r7, #12]
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3710      	adds	r7, #16
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	08026b74 	.word	0x08026b74
 8013c14:	08026c04 	.word	0x08026c04
 8013c18:	08026bc8 	.word	0x08026bc8
 8013c1c:	08029930 	.word	0x08029930

08013c20 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	f003 0303 	and.w	r3, r3, #3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d006      	beq.n	8013c42 <do_memp_free_pool+0x22>
 8013c34:	4b0d      	ldr	r3, [pc, #52]	; (8013c6c <do_memp_free_pool+0x4c>)
 8013c36:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013c3a:	490d      	ldr	r1, [pc, #52]	; (8013c70 <do_memp_free_pool+0x50>)
 8013c3c:	480d      	ldr	r0, [pc, #52]	; (8013c74 <do_memp_free_pool+0x54>)
 8013c3e:	f00d ffb9 	bl	8021bb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013c46:	f00d f903 	bl	8020e50 <sys_arch_protect>
 8013c4a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013c5e:	68b8      	ldr	r0, [r7, #8]
 8013c60:	f00d f904 	bl	8020e6c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013c64:	bf00      	nop
 8013c66:	3710      	adds	r7, #16
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	08026b74 	.word	0x08026b74
 8013c70:	08026c24 	.word	0x08026c24
 8013c74:	08026bc8 	.word	0x08026bc8

08013c78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	4603      	mov	r3, r0
 8013c80:	6039      	str	r1, [r7, #0]
 8013c82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013c84:	79fb      	ldrb	r3, [r7, #7]
 8013c86:	2b0d      	cmp	r3, #13
 8013c88:	d907      	bls.n	8013c9a <memp_free+0x22>
 8013c8a:	4b0c      	ldr	r3, [pc, #48]	; (8013cbc <memp_free+0x44>)
 8013c8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013c90:	490b      	ldr	r1, [pc, #44]	; (8013cc0 <memp_free+0x48>)
 8013c92:	480c      	ldr	r0, [pc, #48]	; (8013cc4 <memp_free+0x4c>)
 8013c94:	f00d ff8e 	bl	8021bb4 <iprintf>
 8013c98:	e00c      	b.n	8013cb4 <memp_free+0x3c>

  if (mem == NULL) {
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d008      	beq.n	8013cb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013ca0:	79fb      	ldrb	r3, [r7, #7]
 8013ca2:	4a09      	ldr	r2, [pc, #36]	; (8013cc8 <memp_free+0x50>)
 8013ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ca8:	6839      	ldr	r1, [r7, #0]
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7ff ffb8 	bl	8013c20 <do_memp_free_pool>
 8013cb0:	e000      	b.n	8013cb4 <memp_free+0x3c>
    return;
 8013cb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	08026b74 	.word	0x08026b74
 8013cc0:	08026c44 	.word	0x08026c44
 8013cc4:	08026bc8 	.word	0x08026bc8
 8013cc8:	08029930 	.word	0x08029930

08013ccc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013cd0:	bf00      	nop
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd8:	4770      	bx	lr
	...

08013cdc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
 8013ce8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d108      	bne.n	8013d02 <netif_add+0x26>
 8013cf0:	4b5b      	ldr	r3, [pc, #364]	; (8013e60 <netif_add+0x184>)
 8013cf2:	f240 1227 	movw	r2, #295	; 0x127
 8013cf6:	495b      	ldr	r1, [pc, #364]	; (8013e64 <netif_add+0x188>)
 8013cf8:	485b      	ldr	r0, [pc, #364]	; (8013e68 <netif_add+0x18c>)
 8013cfa:	f00d ff5b 	bl	8021bb4 <iprintf>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	e0a9      	b.n	8013e56 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d108      	bne.n	8013d1a <netif_add+0x3e>
 8013d08:	4b55      	ldr	r3, [pc, #340]	; (8013e60 <netif_add+0x184>)
 8013d0a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013d0e:	4957      	ldr	r1, [pc, #348]	; (8013e6c <netif_add+0x190>)
 8013d10:	4855      	ldr	r0, [pc, #340]	; (8013e68 <netif_add+0x18c>)
 8013d12:	f00d ff4f 	bl	8021bb4 <iprintf>
 8013d16:	2300      	movs	r3, #0
 8013d18:	e09d      	b.n	8013e56 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d101      	bne.n	8013d24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013d20:	4b53      	ldr	r3, [pc, #332]	; (8013e70 <netif_add+0x194>)
 8013d22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d101      	bne.n	8013d2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013d2a:	4b51      	ldr	r3, [pc, #324]	; (8013e70 <netif_add+0x194>)
 8013d2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013d34:	4b4e      	ldr	r3, [pc, #312]	; (8013e70 <netif_add+0x194>)
 8013d36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2200      	movs	r2, #0
 8013d48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	4a49      	ldr	r2, [pc, #292]	; (8013e74 <netif_add+0x198>)
 8013d4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2200      	movs	r2, #0
 8013d54:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	3324      	adds	r3, #36	; 0x24
 8013d62:	2204      	movs	r2, #4
 8013d64:	2100      	movs	r1, #0
 8013d66:	4618      	mov	r0, r3
 8013d68:	f00d fa08 	bl	802117c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	6a3a      	ldr	r2, [r7, #32]
 8013d76:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013d78:	4b3f      	ldr	r3, [pc, #252]	; (8013e78 <netif_add+0x19c>)
 8013d7a:	781a      	ldrb	r2, [r3, #0]
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d86:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	68b9      	ldr	r1, [r7, #8]
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	f000 f914 	bl	8013fbc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	4798      	blx	r3
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d001      	beq.n	8013da4 <netif_add+0xc8>
    return NULL;
 8013da0:	2300      	movs	r3, #0
 8013da2:	e058      	b.n	8013e56 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013daa:	2bff      	cmp	r3, #255	; 0xff
 8013dac:	d103      	bne.n	8013db6 <netif_add+0xda>
        netif->num = 0;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2200      	movs	r2, #0
 8013db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8013db6:	2300      	movs	r3, #0
 8013db8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013dba:	4b30      	ldr	r3, [pc, #192]	; (8013e7c <netif_add+0x1a0>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	617b      	str	r3, [r7, #20]
 8013dc0:	e02b      	b.n	8013e1a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013dc2:	697a      	ldr	r2, [r7, #20]
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d106      	bne.n	8013dd8 <netif_add+0xfc>
 8013dca:	4b25      	ldr	r3, [pc, #148]	; (8013e60 <netif_add+0x184>)
 8013dcc:	f240 128b 	movw	r2, #395	; 0x18b
 8013dd0:	492b      	ldr	r1, [pc, #172]	; (8013e80 <netif_add+0x1a4>)
 8013dd2:	4825      	ldr	r0, [pc, #148]	; (8013e68 <netif_add+0x18c>)
 8013dd4:	f00d feee 	bl	8021bb4 <iprintf>
        num_netifs++;
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	3301      	adds	r3, #1
 8013ddc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	2bff      	cmp	r3, #255	; 0xff
 8013de2:	dd06      	ble.n	8013df2 <netif_add+0x116>
 8013de4:	4b1e      	ldr	r3, [pc, #120]	; (8013e60 <netif_add+0x184>)
 8013de6:	f240 128d 	movw	r2, #397	; 0x18d
 8013dea:	4926      	ldr	r1, [pc, #152]	; (8013e84 <netif_add+0x1a8>)
 8013dec:	481e      	ldr	r0, [pc, #120]	; (8013e68 <netif_add+0x18c>)
 8013dee:	f00d fee1 	bl	8021bb4 <iprintf>
        if (netif2->num == netif->num) {
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d108      	bne.n	8013e14 <netif_add+0x138>
          netif->num++;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013e08:	3301      	adds	r3, #1
 8013e0a:	b2da      	uxtb	r2, r3
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8013e12:	e005      	b.n	8013e20 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	617b      	str	r3, [r7, #20]
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d1d0      	bne.n	8013dc2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d1be      	bne.n	8013da4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013e2c:	2bfe      	cmp	r3, #254	; 0xfe
 8013e2e:	d103      	bne.n	8013e38 <netif_add+0x15c>
    netif_num = 0;
 8013e30:	4b11      	ldr	r3, [pc, #68]	; (8013e78 <netif_add+0x19c>)
 8013e32:	2200      	movs	r2, #0
 8013e34:	701a      	strb	r2, [r3, #0]
 8013e36:	e006      	b.n	8013e46 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013e3e:	3301      	adds	r3, #1
 8013e40:	b2da      	uxtb	r2, r3
 8013e42:	4b0d      	ldr	r3, [pc, #52]	; (8013e78 <netif_add+0x19c>)
 8013e44:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013e46:	4b0d      	ldr	r3, [pc, #52]	; (8013e7c <netif_add+0x1a0>)
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013e4e:	4a0b      	ldr	r2, [pc, #44]	; (8013e7c <netif_add+0x1a0>)
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013e54:	68fb      	ldr	r3, [r7, #12]
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3718      	adds	r7, #24
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	08026c60 	.word	0x08026c60
 8013e64:	08026cf4 	.word	0x08026cf4
 8013e68:	08026cb0 	.word	0x08026cb0
 8013e6c:	08026d10 	.word	0x08026d10
 8013e70:	080299c0 	.word	0x080299c0
 8013e74:	0801429f 	.word	0x0801429f
 8013e78:	20014350 	.word	0x20014350
 8013e7c:	2001b178 	.word	0x2001b178
 8013e80:	08026d34 	.word	0x08026d34
 8013e84:	08026d48 	.word	0x08026d48

08013e88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013e92:	6839      	ldr	r1, [r7, #0]
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f003 f929 	bl	80170ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013e9a:	6839      	ldr	r1, [r7, #0]
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f008 fac3 	bl	801c428 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013ea2:	bf00      	nop
 8013ea4:	3708      	adds	r7, #8
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
	...

08013eac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b086      	sub	sp, #24
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d106      	bne.n	8013ecc <netif_do_set_ipaddr+0x20>
 8013ebe:	4b1d      	ldr	r3, [pc, #116]	; (8013f34 <netif_do_set_ipaddr+0x88>)
 8013ec0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013ec4:	491c      	ldr	r1, [pc, #112]	; (8013f38 <netif_do_set_ipaddr+0x8c>)
 8013ec6:	481d      	ldr	r0, [pc, #116]	; (8013f3c <netif_do_set_ipaddr+0x90>)
 8013ec8:	f00d fe74 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d106      	bne.n	8013ee0 <netif_do_set_ipaddr+0x34>
 8013ed2:	4b18      	ldr	r3, [pc, #96]	; (8013f34 <netif_do_set_ipaddr+0x88>)
 8013ed4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013ed8:	4917      	ldr	r1, [pc, #92]	; (8013f38 <netif_do_set_ipaddr+0x8c>)
 8013eda:	4818      	ldr	r0, [pc, #96]	; (8013f3c <netif_do_set_ipaddr+0x90>)
 8013edc:	f00d fe6a 	bl	8021bb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d01c      	beq.n	8013f28 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	3304      	adds	r3, #4
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013efe:	f107 0314 	add.w	r3, r7, #20
 8013f02:	4619      	mov	r1, r3
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f7ff ffbf 	bl	8013e88 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d002      	beq.n	8013f16 <netif_do_set_ipaddr+0x6a>
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	e000      	b.n	8013f18 <netif_do_set_ipaddr+0x6c>
 8013f16:	2300      	movs	r3, #0
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013f1c:	2101      	movs	r1, #1
 8013f1e:	68f8      	ldr	r0, [r7, #12]
 8013f20:	f000 f8d2 	bl	80140c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013f24:	2301      	movs	r3, #1
 8013f26:	e000      	b.n	8013f2a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3718      	adds	r7, #24
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	08026c60 	.word	0x08026c60
 8013f38:	08026d78 	.word	0x08026d78
 8013f3c:	08026cb0 	.word	0x08026cb0

08013f40 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b085      	sub	sp, #20
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	3308      	adds	r3, #8
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d00a      	beq.n	8013f70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <netif_do_set_netmask+0x26>
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	e000      	b.n	8013f68 <netif_do_set_netmask+0x28>
 8013f66:	2300      	movs	r3, #0
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e000      	b.n	8013f72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3714      	adds	r7, #20
 8013f76:	46bd      	mov	sp, r7
 8013f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7c:	4770      	bx	lr

08013f7e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013f7e:	b480      	push	{r7}
 8013f80:	b085      	sub	sp, #20
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	60f8      	str	r0, [r7, #12]
 8013f86:	60b9      	str	r1, [r7, #8]
 8013f88:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	330c      	adds	r3, #12
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d00a      	beq.n	8013fae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d002      	beq.n	8013fa4 <netif_do_set_gw+0x26>
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	e000      	b.n	8013fa6 <netif_do_set_gw+0x28>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	68fa      	ldr	r2, [r7, #12]
 8013fa8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013faa:	2301      	movs	r3, #1
 8013fac:	e000      	b.n	8013fb0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013fae:	2300      	movs	r3, #0
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3714      	adds	r7, #20
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr

08013fbc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b088      	sub	sp, #32
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	607a      	str	r2, [r7, #4]
 8013fc8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d101      	bne.n	8013fdc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013fd8:	4b1c      	ldr	r3, [pc, #112]	; (801404c <netif_set_addr+0x90>)
 8013fda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d101      	bne.n	8013fe6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013fe2:	4b1a      	ldr	r3, [pc, #104]	; (801404c <netif_set_addr+0x90>)
 8013fe4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d101      	bne.n	8013ff0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013fec:	4b17      	ldr	r3, [pc, #92]	; (801404c <netif_set_addr+0x90>)
 8013fee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d003      	beq.n	8013ffe <netif_set_addr+0x42>
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d101      	bne.n	8014002 <netif_set_addr+0x46>
 8013ffe:	2301      	movs	r3, #1
 8014000:	e000      	b.n	8014004 <netif_set_addr+0x48>
 8014002:	2300      	movs	r3, #0
 8014004:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d006      	beq.n	801401a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801400c:	f107 0310 	add.w	r3, r7, #16
 8014010:	461a      	mov	r2, r3
 8014012:	68b9      	ldr	r1, [r7, #8]
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f7ff ff49 	bl	8013eac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801401a:	69fa      	ldr	r2, [r7, #28]
 801401c:	6879      	ldr	r1, [r7, #4]
 801401e:	68f8      	ldr	r0, [r7, #12]
 8014020:	f7ff ff8e 	bl	8013f40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014024:	69ba      	ldr	r2, [r7, #24]
 8014026:	6839      	ldr	r1, [r7, #0]
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f7ff ffa8 	bl	8013f7e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d106      	bne.n	8014042 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014034:	f107 0310 	add.w	r3, r7, #16
 8014038:	461a      	mov	r2, r3
 801403a:	68b9      	ldr	r1, [r7, #8]
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f7ff ff35 	bl	8013eac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014042:	bf00      	nop
 8014044:	3720      	adds	r7, #32
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	080299c0 	.word	0x080299c0

08014050 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014058:	4a04      	ldr	r2, [pc, #16]	; (801406c <netif_set_default+0x1c>)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801405e:	bf00      	nop
 8014060:	370c      	adds	r7, #12
 8014062:	46bd      	mov	sp, r7
 8014064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014068:	4770      	bx	lr
 801406a:	bf00      	nop
 801406c:	2001b17c 	.word	0x2001b17c

08014070 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d107      	bne.n	801408e <netif_set_up+0x1e>
 801407e:	4b0f      	ldr	r3, [pc, #60]	; (80140bc <netif_set_up+0x4c>)
 8014080:	f44f 7254 	mov.w	r2, #848	; 0x350
 8014084:	490e      	ldr	r1, [pc, #56]	; (80140c0 <netif_set_up+0x50>)
 8014086:	480f      	ldr	r0, [pc, #60]	; (80140c4 <netif_set_up+0x54>)
 8014088:	f00d fd94 	bl	8021bb4 <iprintf>
 801408c:	e013      	b.n	80140b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014094:	f003 0301 	and.w	r3, r3, #1
 8014098:	2b00      	cmp	r3, #0
 801409a:	d10c      	bne.n	80140b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80140a2:	f043 0301 	orr.w	r3, r3, #1
 80140a6:	b2da      	uxtb	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80140ae:	2103      	movs	r1, #3
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f000 f809 	bl	80140c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	08026c60 	.word	0x08026c60
 80140c0:	08026de8 	.word	0x08026de8
 80140c4:	08026cb0 	.word	0x08026cb0

080140c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	460b      	mov	r3, r1
 80140d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d106      	bne.n	80140e8 <netif_issue_reports+0x20>
 80140da:	4b18      	ldr	r3, [pc, #96]	; (801413c <netif_issue_reports+0x74>)
 80140dc:	f240 326d 	movw	r2, #877	; 0x36d
 80140e0:	4917      	ldr	r1, [pc, #92]	; (8014140 <netif_issue_reports+0x78>)
 80140e2:	4818      	ldr	r0, [pc, #96]	; (8014144 <netif_issue_reports+0x7c>)
 80140e4:	f00d fd66 	bl	8021bb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80140ee:	f003 0304 	and.w	r3, r3, #4
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d01e      	beq.n	8014134 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80140fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014100:	2b00      	cmp	r3, #0
 8014102:	d017      	beq.n	8014134 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	f003 0301 	and.w	r3, r3, #1
 801410a:	2b00      	cmp	r3, #0
 801410c:	d013      	beq.n	8014136 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	3304      	adds	r3, #4
 8014112:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00e      	beq.n	8014136 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801411e:	f003 0308 	and.w	r3, r3, #8
 8014122:	2b00      	cmp	r3, #0
 8014124:	d007      	beq.n	8014136 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	3304      	adds	r3, #4
 801412a:	4619      	mov	r1, r3
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f00b f807 	bl	801f140 <etharp_request>
 8014132:	e000      	b.n	8014136 <netif_issue_reports+0x6e>
    return;
 8014134:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014136:	3708      	adds	r7, #8
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	08026c60 	.word	0x08026c60
 8014140:	08026e04 	.word	0x08026e04
 8014144:	08026cb0 	.word	0x08026cb0

08014148 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d107      	bne.n	8014166 <netif_set_down+0x1e>
 8014156:	4b12      	ldr	r3, [pc, #72]	; (80141a0 <netif_set_down+0x58>)
 8014158:	f240 329b 	movw	r2, #923	; 0x39b
 801415c:	4911      	ldr	r1, [pc, #68]	; (80141a4 <netif_set_down+0x5c>)
 801415e:	4812      	ldr	r0, [pc, #72]	; (80141a8 <netif_set_down+0x60>)
 8014160:	f00d fd28 	bl	8021bb4 <iprintf>
 8014164:	e019      	b.n	801419a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801416c:	f003 0301 	and.w	r3, r3, #1
 8014170:	2b00      	cmp	r3, #0
 8014172:	d012      	beq.n	801419a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801417a:	f023 0301 	bic.w	r3, r3, #1
 801417e:	b2da      	uxtb	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801418c:	f003 0308 	and.w	r3, r3, #8
 8014190:	2b00      	cmp	r3, #0
 8014192:	d002      	beq.n	801419a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f00a fb8d 	bl	801e8b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	08026c60 	.word	0x08026c60
 80141a4:	08026e28 	.word	0x08026e28
 80141a8:	08026cb0 	.word	0x08026cb0

080141ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d107      	bne.n	80141ca <netif_set_link_up+0x1e>
 80141ba:	4b15      	ldr	r3, [pc, #84]	; (8014210 <netif_set_link_up+0x64>)
 80141bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80141c0:	4914      	ldr	r1, [pc, #80]	; (8014214 <netif_set_link_up+0x68>)
 80141c2:	4815      	ldr	r0, [pc, #84]	; (8014218 <netif_set_link_up+0x6c>)
 80141c4:	f00d fcf6 	bl	8021bb4 <iprintf>
 80141c8:	e01e      	b.n	8014208 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141d0:	f003 0304 	and.w	r3, r3, #4
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d117      	bne.n	8014208 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80141de:	f043 0304 	orr.w	r3, r3, #4
 80141e2:	b2da      	uxtb	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f008 fd66 	bl	801ccbc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80141f0:	2103      	movs	r1, #3
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7ff ff68 	bl	80140c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	69db      	ldr	r3, [r3, #28]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d003      	beq.n	8014208 <netif_set_link_up+0x5c>
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	69db      	ldr	r3, [r3, #28]
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	08026c60 	.word	0x08026c60
 8014214:	08026e48 	.word	0x08026e48
 8014218:	08026cb0 	.word	0x08026cb0

0801421c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d107      	bne.n	801423a <netif_set_link_down+0x1e>
 801422a:	4b11      	ldr	r3, [pc, #68]	; (8014270 <netif_set_link_down+0x54>)
 801422c:	f240 4206 	movw	r2, #1030	; 0x406
 8014230:	4910      	ldr	r1, [pc, #64]	; (8014274 <netif_set_link_down+0x58>)
 8014232:	4811      	ldr	r0, [pc, #68]	; (8014278 <netif_set_link_down+0x5c>)
 8014234:	f00d fcbe 	bl	8021bb4 <iprintf>
 8014238:	e017      	b.n	801426a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014240:	f003 0304 	and.w	r3, r3, #4
 8014244:	2b00      	cmp	r3, #0
 8014246:	d010      	beq.n	801426a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801424e:	f023 0304 	bic.w	r3, r3, #4
 8014252:	b2da      	uxtb	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	69db      	ldr	r3, [r3, #28]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d003      	beq.n	801426a <netif_set_link_down+0x4e>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	69db      	ldr	r3, [r3, #28]
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	08026c60 	.word	0x08026c60
 8014274:	08026e6c 	.word	0x08026e6c
 8014278:	08026cb0 	.word	0x08026cb0

0801427c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801427c:	b480      	push	{r7}
 801427e:	b083      	sub	sp, #12
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d002      	beq.n	8014292 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	683a      	ldr	r2, [r7, #0]
 8014290:	61da      	str	r2, [r3, #28]
  }
}
 8014292:	bf00      	nop
 8014294:	370c      	adds	r7, #12
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr

0801429e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801429e:	b480      	push	{r7}
 80142a0:	b085      	sub	sp, #20
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	60f8      	str	r0, [r7, #12]
 80142a6:	60b9      	str	r1, [r7, #8]
 80142a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80142aa:	f06f 030b 	mvn.w	r3, #11
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3714      	adds	r7, #20
 80142b2:	46bd      	mov	sp, r7
 80142b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b8:	4770      	bx	lr
	...

080142bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80142bc:	b480      	push	{r7}
 80142be:	b085      	sub	sp, #20
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	4603      	mov	r3, r0
 80142c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80142c6:	79fb      	ldrb	r3, [r7, #7]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d013      	beq.n	80142f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80142cc:	4b0d      	ldr	r3, [pc, #52]	; (8014304 <netif_get_by_index+0x48>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	60fb      	str	r3, [r7, #12]
 80142d2:	e00c      	b.n	80142ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80142da:	3301      	adds	r3, #1
 80142dc:	b2db      	uxtb	r3, r3
 80142de:	79fa      	ldrb	r2, [r7, #7]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d101      	bne.n	80142e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	e006      	b.n	80142f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	60fb      	str	r3, [r7, #12]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d1ef      	bne.n	80142d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80142f4:	2300      	movs	r3, #0
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3714      	adds	r7, #20
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr
 8014302:	bf00      	nop
 8014304:	2001b178 	.word	0x2001b178

08014308 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801430e:	f00c fd9f 	bl	8020e50 <sys_arch_protect>
 8014312:	6038      	str	r0, [r7, #0]
 8014314:	4b0d      	ldr	r3, [pc, #52]	; (801434c <pbuf_free_ooseq+0x44>)
 8014316:	2200      	movs	r2, #0
 8014318:	701a      	strb	r2, [r3, #0]
 801431a:	6838      	ldr	r0, [r7, #0]
 801431c:	f00c fda6 	bl	8020e6c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014320:	4b0b      	ldr	r3, [pc, #44]	; (8014350 <pbuf_free_ooseq+0x48>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	607b      	str	r3, [r7, #4]
 8014326:	e00a      	b.n	801433e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801432c:	2b00      	cmp	r3, #0
 801432e:	d003      	beq.n	8014338 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f002 ff19 	bl	8017168 <tcp_free_ooseq>
      return;
 8014336:	e005      	b.n	8014344 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	68db      	ldr	r3, [r3, #12]
 801433c:	607b      	str	r3, [r7, #4]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d1f1      	bne.n	8014328 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
 801434a:	bf00      	nop
 801434c:	2001b180 	.word	0x2001b180
 8014350:	2001b188 	.word	0x2001b188

08014354 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801435c:	f7ff ffd4 	bl	8014308 <pbuf_free_ooseq>
}
 8014360:	bf00      	nop
 8014362:	3708      	adds	r7, #8
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801436e:	f00c fd6f 	bl	8020e50 <sys_arch_protect>
 8014372:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014374:	4b0f      	ldr	r3, [pc, #60]	; (80143b4 <pbuf_pool_is_empty+0x4c>)
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801437a:	4b0e      	ldr	r3, [pc, #56]	; (80143b4 <pbuf_pool_is_empty+0x4c>)
 801437c:	2201      	movs	r2, #1
 801437e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f00c fd73 	bl	8020e6c <sys_arch_unprotect>

  if (!queued) {
 8014386:	78fb      	ldrb	r3, [r7, #3]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d10f      	bne.n	80143ac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801438c:	2100      	movs	r1, #0
 801438e:	480a      	ldr	r0, [pc, #40]	; (80143b8 <pbuf_pool_is_empty+0x50>)
 8014390:	f7fd fef4 	bl	801217c <tcpip_try_callback>
 8014394:	4603      	mov	r3, r0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d008      	beq.n	80143ac <pbuf_pool_is_empty+0x44>
 801439a:	f00c fd59 	bl	8020e50 <sys_arch_protect>
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	4b04      	ldr	r3, [pc, #16]	; (80143b4 <pbuf_pool_is_empty+0x4c>)
 80143a2:	2200      	movs	r2, #0
 80143a4:	701a      	strb	r2, [r3, #0]
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f00c fd60 	bl	8020e6c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80143ac:	bf00      	nop
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	2001b180 	.word	0x2001b180
 80143b8:	08014355 	.word	0x08014355

080143bc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80143bc:	b480      	push	{r7}
 80143be:	b085      	sub	sp, #20
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	4611      	mov	r1, r2
 80143c8:	461a      	mov	r2, r3
 80143ca:	460b      	mov	r3, r1
 80143cc:	80fb      	strh	r3, [r7, #6]
 80143ce:	4613      	mov	r3, r2
 80143d0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	2200      	movs	r2, #0
 80143d6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	68ba      	ldr	r2, [r7, #8]
 80143dc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	88fa      	ldrh	r2, [r7, #6]
 80143e2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	88ba      	ldrh	r2, [r7, #4]
 80143e8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80143ea:	8b3b      	ldrh	r3, [r7, #24]
 80143ec:	b2da      	uxtb	r2, r3
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	7f3a      	ldrb	r2, [r7, #28]
 80143f6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2201      	movs	r2, #1
 80143fc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2200      	movs	r2, #0
 8014402:	73da      	strb	r2, [r3, #15]
}
 8014404:	bf00      	nop
 8014406:	3714      	adds	r7, #20
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr

08014410 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b08c      	sub	sp, #48	; 0x30
 8014414:	af02      	add	r7, sp, #8
 8014416:	4603      	mov	r3, r0
 8014418:	71fb      	strb	r3, [r7, #7]
 801441a:	460b      	mov	r3, r1
 801441c:	80bb      	strh	r3, [r7, #4]
 801441e:	4613      	mov	r3, r2
 8014420:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014422:	79fb      	ldrb	r3, [r7, #7]
 8014424:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014426:	887b      	ldrh	r3, [r7, #2]
 8014428:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801442c:	d07f      	beq.n	801452e <pbuf_alloc+0x11e>
 801442e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014432:	f300 80c8 	bgt.w	80145c6 <pbuf_alloc+0x1b6>
 8014436:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801443a:	d010      	beq.n	801445e <pbuf_alloc+0x4e>
 801443c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014440:	f300 80c1 	bgt.w	80145c6 <pbuf_alloc+0x1b6>
 8014444:	2b01      	cmp	r3, #1
 8014446:	d002      	beq.n	801444e <pbuf_alloc+0x3e>
 8014448:	2b41      	cmp	r3, #65	; 0x41
 801444a:	f040 80bc 	bne.w	80145c6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801444e:	887a      	ldrh	r2, [r7, #2]
 8014450:	88bb      	ldrh	r3, [r7, #4]
 8014452:	4619      	mov	r1, r3
 8014454:	2000      	movs	r0, #0
 8014456:	f000 f8d1 	bl	80145fc <pbuf_alloc_reference>
 801445a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801445c:	e0bd      	b.n	80145da <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801445e:	2300      	movs	r3, #0
 8014460:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014462:	2300      	movs	r3, #0
 8014464:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014466:	88bb      	ldrh	r3, [r7, #4]
 8014468:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801446a:	200d      	movs	r0, #13
 801446c:	f7ff fbb2 	bl	8013bd4 <memp_malloc>
 8014470:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d109      	bne.n	801448c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014478:	f7ff ff76 	bl	8014368 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	2b00      	cmp	r3, #0
 8014480:	d002      	beq.n	8014488 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014484:	f000 fada 	bl	8014a3c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014488:	2300      	movs	r3, #0
 801448a:	e0a7      	b.n	80145dc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801448c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801448e:	3303      	adds	r3, #3
 8014490:	b29b      	uxth	r3, r3
 8014492:	f023 0303 	bic.w	r3, r3, #3
 8014496:	b29b      	uxth	r3, r3
 8014498:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801449c:	b29b      	uxth	r3, r3
 801449e:	8b7a      	ldrh	r2, [r7, #26]
 80144a0:	4293      	cmp	r3, r2
 80144a2:	bf28      	it	cs
 80144a4:	4613      	movcs	r3, r2
 80144a6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80144a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144aa:	3310      	adds	r3, #16
 80144ac:	693a      	ldr	r2, [r7, #16]
 80144ae:	4413      	add	r3, r2
 80144b0:	3303      	adds	r3, #3
 80144b2:	f023 0303 	bic.w	r3, r3, #3
 80144b6:	4618      	mov	r0, r3
 80144b8:	89f9      	ldrh	r1, [r7, #14]
 80144ba:	8b7a      	ldrh	r2, [r7, #26]
 80144bc:	2300      	movs	r3, #0
 80144be:	9301      	str	r3, [sp, #4]
 80144c0:	887b      	ldrh	r3, [r7, #2]
 80144c2:	9300      	str	r3, [sp, #0]
 80144c4:	460b      	mov	r3, r1
 80144c6:	4601      	mov	r1, r0
 80144c8:	6938      	ldr	r0, [r7, #16]
 80144ca:	f7ff ff77 	bl	80143bc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	f003 0303 	and.w	r3, r3, #3
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d006      	beq.n	80144e8 <pbuf_alloc+0xd8>
 80144da:	4b42      	ldr	r3, [pc, #264]	; (80145e4 <pbuf_alloc+0x1d4>)
 80144dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80144e0:	4941      	ldr	r1, [pc, #260]	; (80145e8 <pbuf_alloc+0x1d8>)
 80144e2:	4842      	ldr	r0, [pc, #264]	; (80145ec <pbuf_alloc+0x1dc>)
 80144e4:	f00d fb66 	bl	8021bb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80144e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144ea:	3303      	adds	r3, #3
 80144ec:	f023 0303 	bic.w	r3, r3, #3
 80144f0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80144f4:	d106      	bne.n	8014504 <pbuf_alloc+0xf4>
 80144f6:	4b3b      	ldr	r3, [pc, #236]	; (80145e4 <pbuf_alloc+0x1d4>)
 80144f8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80144fc:	493c      	ldr	r1, [pc, #240]	; (80145f0 <pbuf_alloc+0x1e0>)
 80144fe:	483b      	ldr	r0, [pc, #236]	; (80145ec <pbuf_alloc+0x1dc>)
 8014500:	f00d fb58 	bl	8021bb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014506:	2b00      	cmp	r3, #0
 8014508:	d102      	bne.n	8014510 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801450a:	693b      	ldr	r3, [r7, #16]
 801450c:	627b      	str	r3, [r7, #36]	; 0x24
 801450e:	e002      	b.n	8014516 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	693a      	ldr	r2, [r7, #16]
 8014514:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801451a:	8b7a      	ldrh	r2, [r7, #26]
 801451c:	89fb      	ldrh	r3, [r7, #14]
 801451e:	1ad3      	subs	r3, r2, r3
 8014520:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014526:	8b7b      	ldrh	r3, [r7, #26]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d19e      	bne.n	801446a <pbuf_alloc+0x5a>
      break;
 801452c:	e055      	b.n	80145da <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801452e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014530:	3303      	adds	r3, #3
 8014532:	b29b      	uxth	r3, r3
 8014534:	f023 0303 	bic.w	r3, r3, #3
 8014538:	b29a      	uxth	r2, r3
 801453a:	88bb      	ldrh	r3, [r7, #4]
 801453c:	3303      	adds	r3, #3
 801453e:	b29b      	uxth	r3, r3
 8014540:	f023 0303 	bic.w	r3, r3, #3
 8014544:	b29b      	uxth	r3, r3
 8014546:	4413      	add	r3, r2
 8014548:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801454a:	8b3b      	ldrh	r3, [r7, #24]
 801454c:	3310      	adds	r3, #16
 801454e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014550:	8b3a      	ldrh	r2, [r7, #24]
 8014552:	88bb      	ldrh	r3, [r7, #4]
 8014554:	3303      	adds	r3, #3
 8014556:	f023 0303 	bic.w	r3, r3, #3
 801455a:	429a      	cmp	r2, r3
 801455c:	d306      	bcc.n	801456c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801455e:	8afa      	ldrh	r2, [r7, #22]
 8014560:	88bb      	ldrh	r3, [r7, #4]
 8014562:	3303      	adds	r3, #3
 8014564:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014568:	429a      	cmp	r2, r3
 801456a:	d201      	bcs.n	8014570 <pbuf_alloc+0x160>
        return NULL;
 801456c:	2300      	movs	r3, #0
 801456e:	e035      	b.n	80145dc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014570:	8afb      	ldrh	r3, [r7, #22]
 8014572:	4618      	mov	r0, r3
 8014574:	f7ff f9ac 	bl	80138d0 <mem_malloc>
 8014578:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801457c:	2b00      	cmp	r3, #0
 801457e:	d101      	bne.n	8014584 <pbuf_alloc+0x174>
        return NULL;
 8014580:	2300      	movs	r3, #0
 8014582:	e02b      	b.n	80145dc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014586:	3310      	adds	r3, #16
 8014588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801458a:	4413      	add	r3, r2
 801458c:	3303      	adds	r3, #3
 801458e:	f023 0303 	bic.w	r3, r3, #3
 8014592:	4618      	mov	r0, r3
 8014594:	88b9      	ldrh	r1, [r7, #4]
 8014596:	88ba      	ldrh	r2, [r7, #4]
 8014598:	2300      	movs	r3, #0
 801459a:	9301      	str	r3, [sp, #4]
 801459c:	887b      	ldrh	r3, [r7, #2]
 801459e:	9300      	str	r3, [sp, #0]
 80145a0:	460b      	mov	r3, r1
 80145a2:	4601      	mov	r1, r0
 80145a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145a6:	f7ff ff09 	bl	80143bc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80145aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	f003 0303 	and.w	r3, r3, #3
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d010      	beq.n	80145d8 <pbuf_alloc+0x1c8>
 80145b6:	4b0b      	ldr	r3, [pc, #44]	; (80145e4 <pbuf_alloc+0x1d4>)
 80145b8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80145bc:	490d      	ldr	r1, [pc, #52]	; (80145f4 <pbuf_alloc+0x1e4>)
 80145be:	480b      	ldr	r0, [pc, #44]	; (80145ec <pbuf_alloc+0x1dc>)
 80145c0:	f00d faf8 	bl	8021bb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80145c4:	e008      	b.n	80145d8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80145c6:	4b07      	ldr	r3, [pc, #28]	; (80145e4 <pbuf_alloc+0x1d4>)
 80145c8:	f240 1227 	movw	r2, #295	; 0x127
 80145cc:	490a      	ldr	r1, [pc, #40]	; (80145f8 <pbuf_alloc+0x1e8>)
 80145ce:	4807      	ldr	r0, [pc, #28]	; (80145ec <pbuf_alloc+0x1dc>)
 80145d0:	f00d faf0 	bl	8021bb4 <iprintf>
      return NULL;
 80145d4:	2300      	movs	r3, #0
 80145d6:	e001      	b.n	80145dc <pbuf_alloc+0x1cc>
      break;
 80145d8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80145da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3728      	adds	r7, #40	; 0x28
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	08026e90 	.word	0x08026e90
 80145e8:	08026ec0 	.word	0x08026ec0
 80145ec:	08026ef0 	.word	0x08026ef0
 80145f0:	08026f18 	.word	0x08026f18
 80145f4:	08026f4c 	.word	0x08026f4c
 80145f8:	08026f78 	.word	0x08026f78

080145fc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b086      	sub	sp, #24
 8014600:	af02      	add	r7, sp, #8
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	460b      	mov	r3, r1
 8014606:	807b      	strh	r3, [r7, #2]
 8014608:	4613      	mov	r3, r2
 801460a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801460c:	883b      	ldrh	r3, [r7, #0]
 801460e:	2b41      	cmp	r3, #65	; 0x41
 8014610:	d009      	beq.n	8014626 <pbuf_alloc_reference+0x2a>
 8014612:	883b      	ldrh	r3, [r7, #0]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d006      	beq.n	8014626 <pbuf_alloc_reference+0x2a>
 8014618:	4b0f      	ldr	r3, [pc, #60]	; (8014658 <pbuf_alloc_reference+0x5c>)
 801461a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801461e:	490f      	ldr	r1, [pc, #60]	; (801465c <pbuf_alloc_reference+0x60>)
 8014620:	480f      	ldr	r0, [pc, #60]	; (8014660 <pbuf_alloc_reference+0x64>)
 8014622:	f00d fac7 	bl	8021bb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014626:	200c      	movs	r0, #12
 8014628:	f7ff fad4 	bl	8013bd4 <memp_malloc>
 801462c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d101      	bne.n	8014638 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014634:	2300      	movs	r3, #0
 8014636:	e00b      	b.n	8014650 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014638:	8879      	ldrh	r1, [r7, #2]
 801463a:	887a      	ldrh	r2, [r7, #2]
 801463c:	2300      	movs	r3, #0
 801463e:	9301      	str	r3, [sp, #4]
 8014640:	883b      	ldrh	r3, [r7, #0]
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	460b      	mov	r3, r1
 8014646:	6879      	ldr	r1, [r7, #4]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f7ff feb7 	bl	80143bc <pbuf_init_alloced_pbuf>
  return p;
 801464e:	68fb      	ldr	r3, [r7, #12]
}
 8014650:	4618      	mov	r0, r3
 8014652:	3710      	adds	r7, #16
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	08026e90 	.word	0x08026e90
 801465c:	08026f94 	.word	0x08026f94
 8014660:	08026ef0 	.word	0x08026ef0

08014664 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b088      	sub	sp, #32
 8014668:	af02      	add	r7, sp, #8
 801466a:	607b      	str	r3, [r7, #4]
 801466c:	4603      	mov	r3, r0
 801466e:	73fb      	strb	r3, [r7, #15]
 8014670:	460b      	mov	r3, r1
 8014672:	81bb      	strh	r3, [r7, #12]
 8014674:	4613      	mov	r3, r2
 8014676:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014678:	7bfb      	ldrb	r3, [r7, #15]
 801467a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801467c:	8a7b      	ldrh	r3, [r7, #18]
 801467e:	3303      	adds	r3, #3
 8014680:	f023 0203 	bic.w	r2, r3, #3
 8014684:	89bb      	ldrh	r3, [r7, #12]
 8014686:	441a      	add	r2, r3
 8014688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801468a:	429a      	cmp	r2, r3
 801468c:	d901      	bls.n	8014692 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801468e:	2300      	movs	r3, #0
 8014690:	e018      	b.n	80146c4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014692:	6a3b      	ldr	r3, [r7, #32]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d007      	beq.n	80146a8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014698:	8a7b      	ldrh	r3, [r7, #18]
 801469a:	3303      	adds	r3, #3
 801469c:	f023 0303 	bic.w	r3, r3, #3
 80146a0:	6a3a      	ldr	r2, [r7, #32]
 80146a2:	4413      	add	r3, r2
 80146a4:	617b      	str	r3, [r7, #20]
 80146a6:	e001      	b.n	80146ac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80146a8:	2300      	movs	r3, #0
 80146aa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	89b9      	ldrh	r1, [r7, #12]
 80146b0:	89ba      	ldrh	r2, [r7, #12]
 80146b2:	2302      	movs	r3, #2
 80146b4:	9301      	str	r3, [sp, #4]
 80146b6:	897b      	ldrh	r3, [r7, #10]
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	460b      	mov	r3, r1
 80146bc:	6979      	ldr	r1, [r7, #20]
 80146be:	f7ff fe7d 	bl	80143bc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80146c2:	687b      	ldr	r3, [r7, #4]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	460b      	mov	r3, r1
 80146d6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d106      	bne.n	80146ec <pbuf_realloc+0x20>
 80146de:	4b3a      	ldr	r3, [pc, #232]	; (80147c8 <pbuf_realloc+0xfc>)
 80146e0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80146e4:	4939      	ldr	r1, [pc, #228]	; (80147cc <pbuf_realloc+0x100>)
 80146e6:	483a      	ldr	r0, [pc, #232]	; (80147d0 <pbuf_realloc+0x104>)
 80146e8:	f00d fa64 	bl	8021bb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	891b      	ldrh	r3, [r3, #8]
 80146f0:	887a      	ldrh	r2, [r7, #2]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d263      	bcs.n	80147be <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	891a      	ldrh	r2, [r3, #8]
 80146fa:	887b      	ldrh	r3, [r7, #2]
 80146fc:	1ad3      	subs	r3, r2, r3
 80146fe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014700:	887b      	ldrh	r3, [r7, #2]
 8014702:	817b      	strh	r3, [r7, #10]
  q = p;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014708:	e018      	b.n	801473c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	895b      	ldrh	r3, [r3, #10]
 801470e:	897a      	ldrh	r2, [r7, #10]
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	891a      	ldrh	r2, [r3, #8]
 8014718:	893b      	ldrh	r3, [r7, #8]
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	b29a      	uxth	r2, r3
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d106      	bne.n	801473c <pbuf_realloc+0x70>
 801472e:	4b26      	ldr	r3, [pc, #152]	; (80147c8 <pbuf_realloc+0xfc>)
 8014730:	f240 12af 	movw	r2, #431	; 0x1af
 8014734:	4927      	ldr	r1, [pc, #156]	; (80147d4 <pbuf_realloc+0x108>)
 8014736:	4826      	ldr	r0, [pc, #152]	; (80147d0 <pbuf_realloc+0x104>)
 8014738:	f00d fa3c 	bl	8021bb4 <iprintf>
  while (rem_len > q->len) {
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	895b      	ldrh	r3, [r3, #10]
 8014740:	897a      	ldrh	r2, [r7, #10]
 8014742:	429a      	cmp	r2, r3
 8014744:	d8e1      	bhi.n	801470a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	7b1b      	ldrb	r3, [r3, #12]
 801474a:	f003 030f 	and.w	r3, r3, #15
 801474e:	2b00      	cmp	r3, #0
 8014750:	d121      	bne.n	8014796 <pbuf_realloc+0xca>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	895b      	ldrh	r3, [r3, #10]
 8014756:	897a      	ldrh	r2, [r7, #10]
 8014758:	429a      	cmp	r2, r3
 801475a:	d01c      	beq.n	8014796 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	7b5b      	ldrb	r3, [r3, #13]
 8014760:	f003 0302 	and.w	r3, r3, #2
 8014764:	2b00      	cmp	r3, #0
 8014766:	d116      	bne.n	8014796 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	1ad3      	subs	r3, r2, r3
 8014770:	b29a      	uxth	r2, r3
 8014772:	897b      	ldrh	r3, [r7, #10]
 8014774:	4413      	add	r3, r2
 8014776:	b29b      	uxth	r3, r3
 8014778:	4619      	mov	r1, r3
 801477a:	68f8      	ldr	r0, [r7, #12]
 801477c:	f7fe ff9e 	bl	80136bc <mem_trim>
 8014780:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d106      	bne.n	8014796 <pbuf_realloc+0xca>
 8014788:	4b0f      	ldr	r3, [pc, #60]	; (80147c8 <pbuf_realloc+0xfc>)
 801478a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801478e:	4912      	ldr	r1, [pc, #72]	; (80147d8 <pbuf_realloc+0x10c>)
 8014790:	480f      	ldr	r0, [pc, #60]	; (80147d0 <pbuf_realloc+0x104>)
 8014792:	f00d fa0f 	bl	8021bb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	897a      	ldrh	r2, [r7, #10]
 801479a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	895a      	ldrh	r2, [r3, #10]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d004      	beq.n	80147b6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4618      	mov	r0, r3
 80147b2:	f000 f943 	bl	8014a3c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2200      	movs	r2, #0
 80147ba:	601a      	str	r2, [r3, #0]
 80147bc:	e000      	b.n	80147c0 <pbuf_realloc+0xf4>
    return;
 80147be:	bf00      	nop

}
 80147c0:	3710      	adds	r7, #16
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	08026e90 	.word	0x08026e90
 80147cc:	08026fa8 	.word	0x08026fa8
 80147d0:	08026ef0 	.word	0x08026ef0
 80147d4:	08026fc0 	.word	0x08026fc0
 80147d8:	08026fd8 	.word	0x08026fd8

080147dc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b086      	sub	sp, #24
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	4613      	mov	r3, r2
 80147e8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d106      	bne.n	80147fe <pbuf_add_header_impl+0x22>
 80147f0:	4b2b      	ldr	r3, [pc, #172]	; (80148a0 <pbuf_add_header_impl+0xc4>)
 80147f2:	f240 12df 	movw	r2, #479	; 0x1df
 80147f6:	492b      	ldr	r1, [pc, #172]	; (80148a4 <pbuf_add_header_impl+0xc8>)
 80147f8:	482b      	ldr	r0, [pc, #172]	; (80148a8 <pbuf_add_header_impl+0xcc>)
 80147fa:	f00d f9db 	bl	8021bb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d003      	beq.n	801480c <pbuf_add_header_impl+0x30>
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801480a:	d301      	bcc.n	8014810 <pbuf_add_header_impl+0x34>
    return 1;
 801480c:	2301      	movs	r3, #1
 801480e:	e043      	b.n	8014898 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d101      	bne.n	801481a <pbuf_add_header_impl+0x3e>
    return 0;
 8014816:	2300      	movs	r3, #0
 8014818:	e03e      	b.n	8014898 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	891a      	ldrh	r2, [r3, #8]
 8014822:	8a7b      	ldrh	r3, [r7, #18]
 8014824:	4413      	add	r3, r2
 8014826:	b29b      	uxth	r3, r3
 8014828:	8a7a      	ldrh	r2, [r7, #18]
 801482a:	429a      	cmp	r2, r3
 801482c:	d901      	bls.n	8014832 <pbuf_add_header_impl+0x56>
    return 1;
 801482e:	2301      	movs	r3, #1
 8014830:	e032      	b.n	8014898 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	7b1b      	ldrb	r3, [r3, #12]
 8014836:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014838:	8a3b      	ldrh	r3, [r7, #16]
 801483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801483e:	2b00      	cmp	r3, #0
 8014840:	d00c      	beq.n	801485c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	685a      	ldr	r2, [r3, #4]
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	425b      	negs	r3, r3
 801484a:	4413      	add	r3, r2
 801484c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	3310      	adds	r3, #16
 8014852:	697a      	ldr	r2, [r7, #20]
 8014854:	429a      	cmp	r2, r3
 8014856:	d20d      	bcs.n	8014874 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014858:	2301      	movs	r3, #1
 801485a:	e01d      	b.n	8014898 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801485c:	79fb      	ldrb	r3, [r7, #7]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d006      	beq.n	8014870 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	685a      	ldr	r2, [r3, #4]
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	425b      	negs	r3, r3
 801486a:	4413      	add	r3, r2
 801486c:	617b      	str	r3, [r7, #20]
 801486e:	e001      	b.n	8014874 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014870:	2301      	movs	r3, #1
 8014872:	e011      	b.n	8014898 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	697a      	ldr	r2, [r7, #20]
 8014878:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	895a      	ldrh	r2, [r3, #10]
 801487e:	8a7b      	ldrh	r3, [r7, #18]
 8014880:	4413      	add	r3, r2
 8014882:	b29a      	uxth	r2, r3
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	891a      	ldrh	r2, [r3, #8]
 801488c:	8a7b      	ldrh	r3, [r7, #18]
 801488e:	4413      	add	r3, r2
 8014890:	b29a      	uxth	r2, r3
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	811a      	strh	r2, [r3, #8]


  return 0;
 8014896:	2300      	movs	r3, #0
}
 8014898:	4618      	mov	r0, r3
 801489a:	3718      	adds	r7, #24
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}
 80148a0:	08026e90 	.word	0x08026e90
 80148a4:	08026ff4 	.word	0x08026ff4
 80148a8:	08026ef0 	.word	0x08026ef0

080148ac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80148b6:	2200      	movs	r2, #0
 80148b8:	6839      	ldr	r1, [r7, #0]
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f7ff ff8e 	bl	80147dc <pbuf_add_header_impl>
 80148c0:	4603      	mov	r3, r0
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3708      	adds	r7, #8
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
	...

080148cc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d106      	bne.n	80148ea <pbuf_remove_header+0x1e>
 80148dc:	4b20      	ldr	r3, [pc, #128]	; (8014960 <pbuf_remove_header+0x94>)
 80148de:	f240 224b 	movw	r2, #587	; 0x24b
 80148e2:	4920      	ldr	r1, [pc, #128]	; (8014964 <pbuf_remove_header+0x98>)
 80148e4:	4820      	ldr	r0, [pc, #128]	; (8014968 <pbuf_remove_header+0x9c>)
 80148e6:	f00d f965 	bl	8021bb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d003      	beq.n	80148f8 <pbuf_remove_header+0x2c>
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148f6:	d301      	bcc.n	80148fc <pbuf_remove_header+0x30>
    return 1;
 80148f8:	2301      	movs	r3, #1
 80148fa:	e02c      	b.n	8014956 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d101      	bne.n	8014906 <pbuf_remove_header+0x3a>
    return 0;
 8014902:	2300      	movs	r3, #0
 8014904:	e027      	b.n	8014956 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	895b      	ldrh	r3, [r3, #10]
 801490e:	89fa      	ldrh	r2, [r7, #14]
 8014910:	429a      	cmp	r2, r3
 8014912:	d908      	bls.n	8014926 <pbuf_remove_header+0x5a>
 8014914:	4b12      	ldr	r3, [pc, #72]	; (8014960 <pbuf_remove_header+0x94>)
 8014916:	f240 2255 	movw	r2, #597	; 0x255
 801491a:	4914      	ldr	r1, [pc, #80]	; (801496c <pbuf_remove_header+0xa0>)
 801491c:	4812      	ldr	r0, [pc, #72]	; (8014968 <pbuf_remove_header+0x9c>)
 801491e:	f00d f949 	bl	8021bb4 <iprintf>
 8014922:	2301      	movs	r3, #1
 8014924:	e017      	b.n	8014956 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685a      	ldr	r2, [r3, #4]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	441a      	add	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	895a      	ldrh	r2, [r3, #10]
 801493c:	89fb      	ldrh	r3, [r7, #14]
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	b29a      	uxth	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	891a      	ldrh	r2, [r3, #8]
 801494a:	89fb      	ldrh	r3, [r7, #14]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	b29a      	uxth	r2, r3
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014954:	2300      	movs	r3, #0
}
 8014956:	4618      	mov	r0, r3
 8014958:	3710      	adds	r7, #16
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	08026e90 	.word	0x08026e90
 8014964:	08026ff4 	.word	0x08026ff4
 8014968:	08026ef0 	.word	0x08026ef0
 801496c:	08027000 	.word	0x08027000

08014970 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	460b      	mov	r3, r1
 801497a:	807b      	strh	r3, [r7, #2]
 801497c:	4613      	mov	r3, r2
 801497e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014980:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014984:	2b00      	cmp	r3, #0
 8014986:	da08      	bge.n	801499a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014988:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801498c:	425b      	negs	r3, r3
 801498e:	4619      	mov	r1, r3
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f7ff ff9b 	bl	80148cc <pbuf_remove_header>
 8014996:	4603      	mov	r3, r0
 8014998:	e007      	b.n	80149aa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801499a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801499e:	787a      	ldrb	r2, [r7, #1]
 80149a0:	4619      	mov	r1, r3
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f7ff ff1a 	bl	80147dc <pbuf_add_header_impl>
 80149a8:	4603      	mov	r3, r0
  }
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3708      	adds	r7, #8
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80149b2:	b580      	push	{r7, lr}
 80149b4:	b082      	sub	sp, #8
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
 80149ba:	460b      	mov	r3, r1
 80149bc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80149be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80149c2:	2201      	movs	r2, #1
 80149c4:	4619      	mov	r1, r3
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f7ff ffd2 	bl	8014970 <pbuf_header_impl>
 80149cc:	4603      	mov	r3, r0
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3708      	adds	r7, #8
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b086      	sub	sp, #24
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
 80149de:	460b      	mov	r3, r1
 80149e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 80149e6:	887b      	ldrh	r3, [r7, #2]
 80149e8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80149ea:	e01c      	b.n	8014a26 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	895b      	ldrh	r3, [r3, #10]
 80149f0:	8a7a      	ldrh	r2, [r7, #18]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d310      	bcc.n	8014a18 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	895b      	ldrh	r3, [r3, #10]
 80149fe:	8a7a      	ldrh	r2, [r7, #18]
 8014a00:	1ad3      	subs	r3, r2, r3
 8014a02:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f000 f813 	bl	8014a3c <pbuf_free>
 8014a16:	e006      	b.n	8014a26 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8014a18:	8a7b      	ldrh	r3, [r7, #18]
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	6978      	ldr	r0, [r7, #20]
 8014a1e:	f7ff ff55 	bl	80148cc <pbuf_remove_header>
      free_left = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8014a26:	8a7b      	ldrh	r3, [r7, #18]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <pbuf_free_header+0x5c>
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1dc      	bne.n	80149ec <pbuf_free_header+0x16>
    }
  }
  return p;
 8014a32:	697b      	ldr	r3, [r7, #20]
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3718      	adds	r7, #24
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b088      	sub	sp, #32
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d10b      	bne.n	8014a62 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d106      	bne.n	8014a5e <pbuf_free+0x22>
 8014a50:	4b3b      	ldr	r3, [pc, #236]	; (8014b40 <pbuf_free+0x104>)
 8014a52:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014a56:	493b      	ldr	r1, [pc, #236]	; (8014b44 <pbuf_free+0x108>)
 8014a58:	483b      	ldr	r0, [pc, #236]	; (8014b48 <pbuf_free+0x10c>)
 8014a5a:	f00d f8ab 	bl	8021bb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e069      	b.n	8014b36 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014a62:	2300      	movs	r3, #0
 8014a64:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014a66:	e062      	b.n	8014b2e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014a68:	f00c f9f2 	bl	8020e50 <sys_arch_protect>
 8014a6c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	7b9b      	ldrb	r3, [r3, #14]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d106      	bne.n	8014a84 <pbuf_free+0x48>
 8014a76:	4b32      	ldr	r3, [pc, #200]	; (8014b40 <pbuf_free+0x104>)
 8014a78:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014a7c:	4933      	ldr	r1, [pc, #204]	; (8014b4c <pbuf_free+0x110>)
 8014a7e:	4832      	ldr	r0, [pc, #200]	; (8014b48 <pbuf_free+0x10c>)
 8014a80:	f00d f898 	bl	8021bb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7b9b      	ldrb	r3, [r3, #14]
 8014a88:	3b01      	subs	r3, #1
 8014a8a:	b2da      	uxtb	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	739a      	strb	r2, [r3, #14]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	7b9b      	ldrb	r3, [r3, #14]
 8014a94:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014a96:	69b8      	ldr	r0, [r7, #24]
 8014a98:	f00c f9e8 	bl	8020e6c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014a9c:	7dfb      	ldrb	r3, [r7, #23]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d143      	bne.n	8014b2a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	7b1b      	ldrb	r3, [r3, #12]
 8014aac:	f003 030f 	and.w	r3, r3, #15
 8014ab0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	7b5b      	ldrb	r3, [r3, #13]
 8014ab6:	f003 0302 	and.w	r3, r3, #2
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d011      	beq.n	8014ae2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	691b      	ldr	r3, [r3, #16]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d106      	bne.n	8014ad8 <pbuf_free+0x9c>
 8014aca:	4b1d      	ldr	r3, [pc, #116]	; (8014b40 <pbuf_free+0x104>)
 8014acc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014ad0:	491f      	ldr	r1, [pc, #124]	; (8014b50 <pbuf_free+0x114>)
 8014ad2:	481d      	ldr	r0, [pc, #116]	; (8014b48 <pbuf_free+0x10c>)
 8014ad4:	f00d f86e 	bl	8021bb4 <iprintf>
        pc->custom_free_function(p);
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	691b      	ldr	r3, [r3, #16]
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	4798      	blx	r3
 8014ae0:	e01d      	b.n	8014b1e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014ae2:	7bfb      	ldrb	r3, [r7, #15]
 8014ae4:	2b02      	cmp	r3, #2
 8014ae6:	d104      	bne.n	8014af2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014ae8:	6879      	ldr	r1, [r7, #4]
 8014aea:	200d      	movs	r0, #13
 8014aec:	f7ff f8c4 	bl	8013c78 <memp_free>
 8014af0:	e015      	b.n	8014b1e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014af2:	7bfb      	ldrb	r3, [r7, #15]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d104      	bne.n	8014b02 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014af8:	6879      	ldr	r1, [r7, #4]
 8014afa:	200c      	movs	r0, #12
 8014afc:	f7ff f8bc 	bl	8013c78 <memp_free>
 8014b00:	e00d      	b.n	8014b1e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014b02:	7bfb      	ldrb	r3, [r7, #15]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d103      	bne.n	8014b10 <pbuf_free+0xd4>
          mem_free(p);
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f7fe fd47 	bl	801359c <mem_free>
 8014b0e:	e006      	b.n	8014b1e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014b10:	4b0b      	ldr	r3, [pc, #44]	; (8014b40 <pbuf_free+0x104>)
 8014b12:	f240 320f 	movw	r2, #783	; 0x30f
 8014b16:	490f      	ldr	r1, [pc, #60]	; (8014b54 <pbuf_free+0x118>)
 8014b18:	480b      	ldr	r0, [pc, #44]	; (8014b48 <pbuf_free+0x10c>)
 8014b1a:	f00d f84b 	bl	8021bb4 <iprintf>
        }
      }
      count++;
 8014b1e:	7ffb      	ldrb	r3, [r7, #31]
 8014b20:	3301      	adds	r3, #1
 8014b22:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	607b      	str	r3, [r7, #4]
 8014b28:	e001      	b.n	8014b2e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d199      	bne.n	8014a68 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3720      	adds	r7, #32
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	08026e90 	.word	0x08026e90
 8014b44:	08026ff4 	.word	0x08026ff4
 8014b48:	08026ef0 	.word	0x08026ef0
 8014b4c:	08027020 	.word	0x08027020
 8014b50:	08027038 	.word	0x08027038
 8014b54:	0802705c 	.word	0x0802705c

08014b58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b085      	sub	sp, #20
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014b60:	2300      	movs	r3, #0
 8014b62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014b64:	e005      	b.n	8014b72 <pbuf_clen+0x1a>
    ++len;
 8014b66:	89fb      	ldrh	r3, [r7, #14]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d1f6      	bne.n	8014b66 <pbuf_clen+0xe>
  }
  return len;
 8014b78:	89fb      	ldrh	r3, [r7, #14]
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3714      	adds	r7, #20
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b84:	4770      	bx	lr
	...

08014b88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d016      	beq.n	8014bc4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014b96:	f00c f95b 	bl	8020e50 <sys_arch_protect>
 8014b9a:	60f8      	str	r0, [r7, #12]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	7b9b      	ldrb	r3, [r3, #14]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	b2da      	uxtb	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	739a      	strb	r2, [r3, #14]
 8014ba8:	68f8      	ldr	r0, [r7, #12]
 8014baa:	f00c f95f 	bl	8020e6c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	7b9b      	ldrb	r3, [r3, #14]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d106      	bne.n	8014bc4 <pbuf_ref+0x3c>
 8014bb6:	4b05      	ldr	r3, [pc, #20]	; (8014bcc <pbuf_ref+0x44>)
 8014bb8:	f240 3242 	movw	r2, #834	; 0x342
 8014bbc:	4904      	ldr	r1, [pc, #16]	; (8014bd0 <pbuf_ref+0x48>)
 8014bbe:	4805      	ldr	r0, [pc, #20]	; (8014bd4 <pbuf_ref+0x4c>)
 8014bc0:	f00c fff8 	bl	8021bb4 <iprintf>
  }
}
 8014bc4:	bf00      	nop
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	08026e90 	.word	0x08026e90
 8014bd0:	08027070 	.word	0x08027070
 8014bd4:	08026ef0 	.word	0x08026ef0

08014bd8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d002      	beq.n	8014bee <pbuf_cat+0x16>
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d107      	bne.n	8014bfe <pbuf_cat+0x26>
 8014bee:	4b20      	ldr	r3, [pc, #128]	; (8014c70 <pbuf_cat+0x98>)
 8014bf0:	f240 3259 	movw	r2, #857	; 0x359
 8014bf4:	491f      	ldr	r1, [pc, #124]	; (8014c74 <pbuf_cat+0x9c>)
 8014bf6:	4820      	ldr	r0, [pc, #128]	; (8014c78 <pbuf_cat+0xa0>)
 8014bf8:	f00c ffdc 	bl	8021bb4 <iprintf>
 8014bfc:	e034      	b.n	8014c68 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	60fb      	str	r3, [r7, #12]
 8014c02:	e00a      	b.n	8014c1a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	891a      	ldrh	r2, [r3, #8]
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	891b      	ldrh	r3, [r3, #8]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	60fb      	str	r3, [r7, #12]
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1f0      	bne.n	8014c04 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	891a      	ldrh	r2, [r3, #8]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	895b      	ldrh	r3, [r3, #10]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d006      	beq.n	8014c3c <pbuf_cat+0x64>
 8014c2e:	4b10      	ldr	r3, [pc, #64]	; (8014c70 <pbuf_cat+0x98>)
 8014c30:	f240 3262 	movw	r2, #866	; 0x362
 8014c34:	4911      	ldr	r1, [pc, #68]	; (8014c7c <pbuf_cat+0xa4>)
 8014c36:	4810      	ldr	r0, [pc, #64]	; (8014c78 <pbuf_cat+0xa0>)
 8014c38:	f00c ffbc 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d006      	beq.n	8014c52 <pbuf_cat+0x7a>
 8014c44:	4b0a      	ldr	r3, [pc, #40]	; (8014c70 <pbuf_cat+0x98>)
 8014c46:	f240 3263 	movw	r2, #867	; 0x363
 8014c4a:	490d      	ldr	r1, [pc, #52]	; (8014c80 <pbuf_cat+0xa8>)
 8014c4c:	480a      	ldr	r0, [pc, #40]	; (8014c78 <pbuf_cat+0xa0>)
 8014c4e:	f00c ffb1 	bl	8021bb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	891a      	ldrh	r2, [r3, #8]
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	891b      	ldrh	r3, [r3, #8]
 8014c5a:	4413      	add	r3, r2
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	683a      	ldr	r2, [r7, #0]
 8014c66:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	08026e90 	.word	0x08026e90
 8014c74:	08027084 	.word	0x08027084
 8014c78:	08026ef0 	.word	0x08026ef0
 8014c7c:	080270bc 	.word	0x080270bc
 8014c80:	080270ec 	.word	0x080270ec

08014c84 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014c8e:	6839      	ldr	r1, [r7, #0]
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7ff ffa1 	bl	8014bd8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014c96:	6838      	ldr	r0, [r7, #0]
 8014c98:	f7ff ff76 	bl	8014b88 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014c9c:	bf00      	nop
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b086      	sub	sp, #24
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	617b      	str	r3, [r7, #20]
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d008      	beq.n	8014cce <pbuf_copy+0x2a>
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d005      	beq.n	8014cce <pbuf_copy+0x2a>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	891a      	ldrh	r2, [r3, #8]
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	891b      	ldrh	r3, [r3, #8]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d209      	bcs.n	8014ce2 <pbuf_copy+0x3e>
 8014cce:	4b57      	ldr	r3, [pc, #348]	; (8014e2c <pbuf_copy+0x188>)
 8014cd0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014cd4:	4956      	ldr	r1, [pc, #344]	; (8014e30 <pbuf_copy+0x18c>)
 8014cd6:	4857      	ldr	r0, [pc, #348]	; (8014e34 <pbuf_copy+0x190>)
 8014cd8:	f00c ff6c 	bl	8021bb4 <iprintf>
 8014cdc:	f06f 030f 	mvn.w	r3, #15
 8014ce0:	e09f      	b.n	8014e22 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	895b      	ldrh	r3, [r3, #10]
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	1ad2      	subs	r2, r2, r3
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	895b      	ldrh	r3, [r3, #10]
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	1acb      	subs	r3, r1, r3
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d306      	bcc.n	8014d08 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	895b      	ldrh	r3, [r3, #10]
 8014cfe:	461a      	mov	r2, r3
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	1ad3      	subs	r3, r2, r3
 8014d04:	60fb      	str	r3, [r7, #12]
 8014d06:	e005      	b.n	8014d14 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	895b      	ldrh	r3, [r3, #10]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	1ad3      	subs	r3, r2, r3
 8014d12:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	685a      	ldr	r2, [r3, #4]
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	18d0      	adds	r0, r2, r3
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	685a      	ldr	r2, [r3, #4]
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	4413      	add	r3, r2
 8014d24:	68fa      	ldr	r2, [r7, #12]
 8014d26:	4619      	mov	r1, r3
 8014d28:	f00c fa00 	bl	802112c <memcpy>
    offset_to += len;
 8014d2c:	697a      	ldr	r2, [r7, #20]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	4413      	add	r3, r2
 8014d32:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014d34:	693a      	ldr	r2, [r7, #16]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	4413      	add	r3, r2
 8014d3a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	895b      	ldrh	r3, [r3, #10]
 8014d40:	461a      	mov	r2, r3
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	4293      	cmp	r3, r2
 8014d46:	d906      	bls.n	8014d56 <pbuf_copy+0xb2>
 8014d48:	4b38      	ldr	r3, [pc, #224]	; (8014e2c <pbuf_copy+0x188>)
 8014d4a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014d4e:	493a      	ldr	r1, [pc, #232]	; (8014e38 <pbuf_copy+0x194>)
 8014d50:	4838      	ldr	r0, [pc, #224]	; (8014e34 <pbuf_copy+0x190>)
 8014d52:	f00c ff2f 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	895b      	ldrh	r3, [r3, #10]
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	693b      	ldr	r3, [r7, #16]
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	d906      	bls.n	8014d70 <pbuf_copy+0xcc>
 8014d62:	4b32      	ldr	r3, [pc, #200]	; (8014e2c <pbuf_copy+0x188>)
 8014d64:	f240 32da 	movw	r2, #986	; 0x3da
 8014d68:	4934      	ldr	r1, [pc, #208]	; (8014e3c <pbuf_copy+0x198>)
 8014d6a:	4832      	ldr	r0, [pc, #200]	; (8014e34 <pbuf_copy+0x190>)
 8014d6c:	f00c ff22 	bl	8021bb4 <iprintf>
    if (offset_from >= p_from->len) {
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	895b      	ldrh	r3, [r3, #10]
 8014d74:	461a      	mov	r2, r3
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d304      	bcc.n	8014d86 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	895b      	ldrh	r3, [r3, #10]
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d114      	bne.n	8014dbc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014d92:	2300      	movs	r3, #0
 8014d94:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d10c      	bne.n	8014dbc <pbuf_copy+0x118>
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d009      	beq.n	8014dbc <pbuf_copy+0x118>
 8014da8:	4b20      	ldr	r3, [pc, #128]	; (8014e2c <pbuf_copy+0x188>)
 8014daa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014dae:	4924      	ldr	r1, [pc, #144]	; (8014e40 <pbuf_copy+0x19c>)
 8014db0:	4820      	ldr	r0, [pc, #128]	; (8014e34 <pbuf_copy+0x190>)
 8014db2:	f00c feff 	bl	8021bb4 <iprintf>
 8014db6:	f06f 030f 	mvn.w	r3, #15
 8014dba:	e032      	b.n	8014e22 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d013      	beq.n	8014dea <pbuf_copy+0x146>
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	895a      	ldrh	r2, [r3, #10]
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	891b      	ldrh	r3, [r3, #8]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d10d      	bne.n	8014dea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d009      	beq.n	8014dea <pbuf_copy+0x146>
 8014dd6:	4b15      	ldr	r3, [pc, #84]	; (8014e2c <pbuf_copy+0x188>)
 8014dd8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014ddc:	4919      	ldr	r1, [pc, #100]	; (8014e44 <pbuf_copy+0x1a0>)
 8014dde:	4815      	ldr	r0, [pc, #84]	; (8014e34 <pbuf_copy+0x190>)
 8014de0:	f00c fee8 	bl	8021bb4 <iprintf>
 8014de4:	f06f 0305 	mvn.w	r3, #5
 8014de8:	e01b      	b.n	8014e22 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d013      	beq.n	8014e18 <pbuf_copy+0x174>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	895a      	ldrh	r2, [r3, #10]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	891b      	ldrh	r3, [r3, #8]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d10d      	bne.n	8014e18 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d009      	beq.n	8014e18 <pbuf_copy+0x174>
 8014e04:	4b09      	ldr	r3, [pc, #36]	; (8014e2c <pbuf_copy+0x188>)
 8014e06:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014e0a:	490e      	ldr	r1, [pc, #56]	; (8014e44 <pbuf_copy+0x1a0>)
 8014e0c:	4809      	ldr	r0, [pc, #36]	; (8014e34 <pbuf_copy+0x190>)
 8014e0e:	f00c fed1 	bl	8021bb4 <iprintf>
 8014e12:	f06f 0305 	mvn.w	r3, #5
 8014e16:	e004      	b.n	8014e22 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f47f af61 	bne.w	8014ce2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3718      	adds	r7, #24
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	08026e90 	.word	0x08026e90
 8014e30:	08027138 	.word	0x08027138
 8014e34:	08026ef0 	.word	0x08026ef0
 8014e38:	08027168 	.word	0x08027168
 8014e3c:	08027180 	.word	0x08027180
 8014e40:	0802719c 	.word	0x0802719c
 8014e44:	080271ac 	.word	0x080271ac

08014e48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b088      	sub	sp, #32
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	4611      	mov	r1, r2
 8014e54:	461a      	mov	r2, r3
 8014e56:	460b      	mov	r3, r1
 8014e58:	80fb      	strh	r3, [r7, #6]
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014e62:	2300      	movs	r3, #0
 8014e64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d108      	bne.n	8014e7e <pbuf_copy_partial+0x36>
 8014e6c:	4b2b      	ldr	r3, [pc, #172]	; (8014f1c <pbuf_copy_partial+0xd4>)
 8014e6e:	f240 420a 	movw	r2, #1034	; 0x40a
 8014e72:	492b      	ldr	r1, [pc, #172]	; (8014f20 <pbuf_copy_partial+0xd8>)
 8014e74:	482b      	ldr	r0, [pc, #172]	; (8014f24 <pbuf_copy_partial+0xdc>)
 8014e76:	f00c fe9d 	bl	8021bb4 <iprintf>
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e04a      	b.n	8014f14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d108      	bne.n	8014e96 <pbuf_copy_partial+0x4e>
 8014e84:	4b25      	ldr	r3, [pc, #148]	; (8014f1c <pbuf_copy_partial+0xd4>)
 8014e86:	f240 420b 	movw	r2, #1035	; 0x40b
 8014e8a:	4927      	ldr	r1, [pc, #156]	; (8014f28 <pbuf_copy_partial+0xe0>)
 8014e8c:	4825      	ldr	r0, [pc, #148]	; (8014f24 <pbuf_copy_partial+0xdc>)
 8014e8e:	f00c fe91 	bl	8021bb4 <iprintf>
 8014e92:	2300      	movs	r3, #0
 8014e94:	e03e      	b.n	8014f14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	61fb      	str	r3, [r7, #28]
 8014e9a:	e034      	b.n	8014f06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014e9c:	88bb      	ldrh	r3, [r7, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d00a      	beq.n	8014eb8 <pbuf_copy_partial+0x70>
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	895b      	ldrh	r3, [r3, #10]
 8014ea6:	88ba      	ldrh	r2, [r7, #4]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d305      	bcc.n	8014eb8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	895b      	ldrh	r3, [r3, #10]
 8014eb0:	88ba      	ldrh	r2, [r7, #4]
 8014eb2:	1ad3      	subs	r3, r2, r3
 8014eb4:	80bb      	strh	r3, [r7, #4]
 8014eb6:	e023      	b.n	8014f00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014eb8:	69fb      	ldr	r3, [r7, #28]
 8014eba:	895a      	ldrh	r2, [r3, #10]
 8014ebc:	88bb      	ldrh	r3, [r7, #4]
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014ec2:	8b3a      	ldrh	r2, [r7, #24]
 8014ec4:	88fb      	ldrh	r3, [r7, #6]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d901      	bls.n	8014ece <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014eca:	88fb      	ldrh	r3, [r7, #6]
 8014ecc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014ece:	8b7b      	ldrh	r3, [r7, #26]
 8014ed0:	68ba      	ldr	r2, [r7, #8]
 8014ed2:	18d0      	adds	r0, r2, r3
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	685a      	ldr	r2, [r3, #4]
 8014ed8:	88bb      	ldrh	r3, [r7, #4]
 8014eda:	4413      	add	r3, r2
 8014edc:	8b3a      	ldrh	r2, [r7, #24]
 8014ede:	4619      	mov	r1, r3
 8014ee0:	f00c f924 	bl	802112c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014ee4:	8afa      	ldrh	r2, [r7, #22]
 8014ee6:	8b3b      	ldrh	r3, [r7, #24]
 8014ee8:	4413      	add	r3, r2
 8014eea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014eec:	8b7a      	ldrh	r2, [r7, #26]
 8014eee:	8b3b      	ldrh	r3, [r7, #24]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014ef4:	88fa      	ldrh	r2, [r7, #6]
 8014ef6:	8b3b      	ldrh	r3, [r7, #24]
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014efc:	2300      	movs	r3, #0
 8014efe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	61fb      	str	r3, [r7, #28]
 8014f06:	88fb      	ldrh	r3, [r7, #6]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d002      	beq.n	8014f12 <pbuf_copy_partial+0xca>
 8014f0c:	69fb      	ldr	r3, [r7, #28]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d1c4      	bne.n	8014e9c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014f12:	8afb      	ldrh	r3, [r7, #22]
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3720      	adds	r7, #32
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	08026e90 	.word	0x08026e90
 8014f20:	080271d8 	.word	0x080271d8
 8014f24:	08026ef0 	.word	0x08026ef0
 8014f28:	080271f8 	.word	0x080271f8

08014f2c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b087      	sub	sp, #28
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	460b      	mov	r3, r1
 8014f36:	607a      	str	r2, [r7, #4]
 8014f38:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8014f3a:	897b      	ldrh	r3, [r7, #10]
 8014f3c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8014f42:	e007      	b.n	8014f54 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	895b      	ldrh	r3, [r3, #10]
 8014f48:	8afa      	ldrh	r2, [r7, #22]
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d004      	beq.n	8014f64 <pbuf_skip_const+0x38>
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	895b      	ldrh	r3, [r3, #10]
 8014f5e:	8afa      	ldrh	r2, [r7, #22]
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d2ef      	bcs.n	8014f44 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d002      	beq.n	8014f70 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	8afa      	ldrh	r2, [r7, #22]
 8014f6e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8014f70:	693b      	ldr	r3, [r7, #16]
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	371c      	adds	r7, #28
 8014f76:	46bd      	mov	sp, r7
 8014f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7c:	4770      	bx	lr

08014f7e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8014f7e:	b580      	push	{r7, lr}
 8014f80:	b086      	sub	sp, #24
 8014f82:	af00      	add	r7, sp, #0
 8014f84:	60f8      	str	r0, [r7, #12]
 8014f86:	460b      	mov	r3, r1
 8014f88:	607a      	str	r2, [r7, #4]
 8014f8a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8014f8c:	897b      	ldrh	r3, [r7, #10]
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	4619      	mov	r1, r3
 8014f92:	68f8      	ldr	r0, [r7, #12]
 8014f94:	f7ff ffca 	bl	8014f2c <pbuf_skip_const>
 8014f98:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8014f9a:	697b      	ldr	r3, [r7, #20]
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3718      	adds	r7, #24
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b088      	sub	sp, #32
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8014fb2:	88fb      	ldrh	r3, [r7, #6]
 8014fb4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d109      	bne.n	8014fd4 <pbuf_take+0x30>
 8014fc0:	4b3a      	ldr	r3, [pc, #232]	; (80150ac <pbuf_take+0x108>)
 8014fc2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8014fc6:	493a      	ldr	r1, [pc, #232]	; (80150b0 <pbuf_take+0x10c>)
 8014fc8:	483a      	ldr	r0, [pc, #232]	; (80150b4 <pbuf_take+0x110>)
 8014fca:	f00c fdf3 	bl	8021bb4 <iprintf>
 8014fce:	f06f 030f 	mvn.w	r3, #15
 8014fd2:	e067      	b.n	80150a4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d109      	bne.n	8014fee <pbuf_take+0x4a>
 8014fda:	4b34      	ldr	r3, [pc, #208]	; (80150ac <pbuf_take+0x108>)
 8014fdc:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8014fe0:	4935      	ldr	r1, [pc, #212]	; (80150b8 <pbuf_take+0x114>)
 8014fe2:	4834      	ldr	r0, [pc, #208]	; (80150b4 <pbuf_take+0x110>)
 8014fe4:	f00c fde6 	bl	8021bb4 <iprintf>
 8014fe8:	f06f 030f 	mvn.w	r3, #15
 8014fec:	e05a      	b.n	80150a4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	891b      	ldrh	r3, [r3, #8]
 8014ff2:	88fa      	ldrh	r2, [r7, #6]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d909      	bls.n	801500c <pbuf_take+0x68>
 8014ff8:	4b2c      	ldr	r3, [pc, #176]	; (80150ac <pbuf_take+0x108>)
 8014ffa:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8014ffe:	492f      	ldr	r1, [pc, #188]	; (80150bc <pbuf_take+0x118>)
 8015000:	482c      	ldr	r0, [pc, #176]	; (80150b4 <pbuf_take+0x110>)
 8015002:	f00c fdd7 	bl	8021bb4 <iprintf>
 8015006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801500a:	e04b      	b.n	80150a4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d007      	beq.n	8015022 <pbuf_take+0x7e>
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d004      	beq.n	8015022 <pbuf_take+0x7e>
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	891b      	ldrh	r3, [r3, #8]
 801501c:	88fa      	ldrh	r2, [r7, #6]
 801501e:	429a      	cmp	r2, r3
 8015020:	d902      	bls.n	8015028 <pbuf_take+0x84>
    return ERR_ARG;
 8015022:	f06f 030f 	mvn.w	r3, #15
 8015026:	e03d      	b.n	80150a4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	61fb      	str	r3, [r7, #28]
 801502c:	e028      	b.n	8015080 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801502e:	69fb      	ldr	r3, [r7, #28]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d106      	bne.n	8015042 <pbuf_take+0x9e>
 8015034:	4b1d      	ldr	r3, [pc, #116]	; (80150ac <pbuf_take+0x108>)
 8015036:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801503a:	4921      	ldr	r1, [pc, #132]	; (80150c0 <pbuf_take+0x11c>)
 801503c:	481d      	ldr	r0, [pc, #116]	; (80150b4 <pbuf_take+0x110>)
 801503e:	f00c fdb9 	bl	8021bb4 <iprintf>
    buf_copy_len = total_copy_len;
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8015046:	69fb      	ldr	r3, [r7, #28]
 8015048:	895b      	ldrh	r3, [r3, #10]
 801504a:	461a      	mov	r2, r3
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	4293      	cmp	r3, r2
 8015050:	d902      	bls.n	8015058 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	895b      	ldrh	r3, [r3, #10]
 8015056:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	6858      	ldr	r0, [r3, #4]
 801505c:	68ba      	ldr	r2, [r7, #8]
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	4413      	add	r3, r2
 8015062:	69ba      	ldr	r2, [r7, #24]
 8015064:	4619      	mov	r1, r3
 8015066:	f00c f861 	bl	802112c <memcpy>
    total_copy_len -= buf_copy_len;
 801506a:	697a      	ldr	r2, [r7, #20]
 801506c:	69bb      	ldr	r3, [r7, #24]
 801506e:	1ad3      	subs	r3, r2, r3
 8015070:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8015072:	693a      	ldr	r2, [r7, #16]
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	4413      	add	r3, r2
 8015078:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801507a:	69fb      	ldr	r3, [r7, #28]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	61fb      	str	r3, [r7, #28]
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d1d3      	bne.n	801502e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d103      	bne.n	8015094 <pbuf_take+0xf0>
 801508c:	88fb      	ldrh	r3, [r7, #6]
 801508e:	693a      	ldr	r2, [r7, #16]
 8015090:	429a      	cmp	r2, r3
 8015092:	d006      	beq.n	80150a2 <pbuf_take+0xfe>
 8015094:	4b05      	ldr	r3, [pc, #20]	; (80150ac <pbuf_take+0x108>)
 8015096:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801509a:	490a      	ldr	r1, [pc, #40]	; (80150c4 <pbuf_take+0x120>)
 801509c:	4805      	ldr	r0, [pc, #20]	; (80150b4 <pbuf_take+0x110>)
 801509e:	f00c fd89 	bl	8021bb4 <iprintf>
  return ERR_OK;
 80150a2:	2300      	movs	r3, #0
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3720      	adds	r7, #32
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	08026e90 	.word	0x08026e90
 80150b0:	08027268 	.word	0x08027268
 80150b4:	08026ef0 	.word	0x08026ef0
 80150b8:	08027280 	.word	0x08027280
 80150bc:	0802729c 	.word	0x0802729c
 80150c0:	080272bc 	.word	0x080272bc
 80150c4:	080272d4 	.word	0x080272d4

080150c8 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b088      	sub	sp, #32
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	4611      	mov	r1, r2
 80150d4:	461a      	mov	r2, r3
 80150d6:	460b      	mov	r3, r1
 80150d8:	80fb      	strh	r3, [r7, #6]
 80150da:	4613      	mov	r3, r2
 80150dc:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80150de:	f107 0210 	add.w	r2, r7, #16
 80150e2:	88bb      	ldrh	r3, [r7, #4]
 80150e4:	4619      	mov	r1, r3
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	f7ff ff49 	bl	8014f7e <pbuf_skip>
 80150ec:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80150ee:	69fb      	ldr	r3, [r7, #28]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d047      	beq.n	8015184 <pbuf_take_at+0xbc>
 80150f4:	69fb      	ldr	r3, [r7, #28]
 80150f6:	891b      	ldrh	r3, [r3, #8]
 80150f8:	461a      	mov	r2, r3
 80150fa:	8a3b      	ldrh	r3, [r7, #16]
 80150fc:	4619      	mov	r1, r3
 80150fe:	88fb      	ldrh	r3, [r7, #6]
 8015100:	440b      	add	r3, r1
 8015102:	429a      	cmp	r2, r3
 8015104:	db3e      	blt.n	8015184 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8015106:	88fb      	ldrh	r3, [r7, #6]
 8015108:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801510e:	69fb      	ldr	r3, [r7, #28]
 8015110:	895a      	ldrh	r2, [r3, #10]
 8015112:	8a3b      	ldrh	r3, [r7, #16]
 8015114:	429a      	cmp	r2, r3
 8015116:	d806      	bhi.n	8015126 <pbuf_take_at+0x5e>
 8015118:	4b1d      	ldr	r3, [pc, #116]	; (8015190 <pbuf_take_at+0xc8>)
 801511a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801511e:	491d      	ldr	r1, [pc, #116]	; (8015194 <pbuf_take_at+0xcc>)
 8015120:	481d      	ldr	r0, [pc, #116]	; (8015198 <pbuf_take_at+0xd0>)
 8015122:	f00c fd47 	bl	8021bb4 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	895b      	ldrh	r3, [r3, #10]
 801512a:	461a      	mov	r2, r3
 801512c:	8a3b      	ldrh	r3, [r7, #16]
 801512e:	1ad2      	subs	r2, r2, r3
 8015130:	88fb      	ldrh	r3, [r7, #6]
 8015132:	429a      	cmp	r2, r3
 8015134:	da05      	bge.n	8015142 <pbuf_take_at+0x7a>
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	895a      	ldrh	r2, [r3, #10]
 801513a:	8a3b      	ldrh	r3, [r7, #16]
 801513c:	1ad3      	subs	r3, r2, r3
 801513e:	b29b      	uxth	r3, r3
 8015140:	e000      	b.n	8015144 <pbuf_take_at+0x7c>
 8015142:	88fb      	ldrh	r3, [r7, #6]
 8015144:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8015146:	69fb      	ldr	r3, [r7, #28]
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	8a3a      	ldrh	r2, [r7, #16]
 801514c:	4413      	add	r3, r2
 801514e:	8a7a      	ldrh	r2, [r7, #18]
 8015150:	68b9      	ldr	r1, [r7, #8]
 8015152:	4618      	mov	r0, r3
 8015154:	f00b ffea 	bl	802112c <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8015158:	8b7a      	ldrh	r2, [r7, #26]
 801515a:	8a7b      	ldrh	r3, [r7, #18]
 801515c:	1ad3      	subs	r3, r2, r3
 801515e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8015160:	8a7b      	ldrh	r3, [r7, #18]
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	4413      	add	r3, r2
 8015166:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8015168:	8b7b      	ldrh	r3, [r7, #26]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d008      	beq.n	8015180 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801516e:	69fb      	ldr	r3, [r7, #28]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	8b7a      	ldrh	r2, [r7, #26]
 8015174:	6979      	ldr	r1, [r7, #20]
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff ff14 	bl	8014fa4 <pbuf_take>
 801517c:	4603      	mov	r3, r0
 801517e:	e003      	b.n	8015188 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8015180:	2300      	movs	r3, #0
 8015182:	e001      	b.n	8015188 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8015184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015188:	4618      	mov	r0, r3
 801518a:	3720      	adds	r7, #32
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	08026e90 	.word	0x08026e90
 8015194:	080272ec 	.word	0x080272ec
 8015198:	08026ef0 	.word	0x08026ef0

0801519c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	4603      	mov	r3, r0
 80151a4:	603a      	str	r2, [r7, #0]
 80151a6:	71fb      	strb	r3, [r7, #7]
 80151a8:	460b      	mov	r3, r1
 80151aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	8919      	ldrh	r1, [r3, #8]
 80151b0:	88ba      	ldrh	r2, [r7, #4]
 80151b2:	79fb      	ldrb	r3, [r7, #7]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7ff f92b 	bl	8014410 <pbuf_alloc>
 80151ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d101      	bne.n	80151c6 <pbuf_clone+0x2a>
    return NULL;
 80151c2:	2300      	movs	r3, #0
 80151c4:	e011      	b.n	80151ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80151c6:	6839      	ldr	r1, [r7, #0]
 80151c8:	68f8      	ldr	r0, [r7, #12]
 80151ca:	f7ff fd6b 	bl	8014ca4 <pbuf_copy>
 80151ce:	4603      	mov	r3, r0
 80151d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80151d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d006      	beq.n	80151e8 <pbuf_clone+0x4c>
 80151da:	4b06      	ldr	r3, [pc, #24]	; (80151f4 <pbuf_clone+0x58>)
 80151dc:	f240 5224 	movw	r2, #1316	; 0x524
 80151e0:	4905      	ldr	r1, [pc, #20]	; (80151f8 <pbuf_clone+0x5c>)
 80151e2:	4806      	ldr	r0, [pc, #24]	; (80151fc <pbuf_clone+0x60>)
 80151e4:	f00c fce6 	bl	8021bb4 <iprintf>
  return q;
 80151e8:	68fb      	ldr	r3, [r7, #12]
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3710      	adds	r7, #16
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	08026e90 	.word	0x08026e90
 80151f8:	08027304 	.word	0x08027304
 80151fc:	08026ef0 	.word	0x08026ef0

08015200 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	460b      	mov	r3, r1
 801520a:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 801520c:	f107 020a 	add.w	r2, r7, #10
 8015210:	887b      	ldrh	r3, [r7, #2]
 8015212:	4619      	mov	r1, r3
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f7ff fe89 	bl	8014f2c <pbuf_skip_const>
 801521a:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d00a      	beq.n	8015238 <pbuf_try_get_at+0x38>
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	895a      	ldrh	r2, [r3, #10]
 8015226:	897b      	ldrh	r3, [r7, #10]
 8015228:	429a      	cmp	r2, r3
 801522a:	d905      	bls.n	8015238 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	897a      	ldrh	r2, [r7, #10]
 8015232:	4413      	add	r3, r2
 8015234:	781b      	ldrb	r3, [r3, #0]
 8015236:	e001      	b.n	801523c <pbuf_try_get_at+0x3c>
  }
  return -1;
 8015238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801523c:	4618      	mov	r0, r3
 801523e:	3710      	adds	r7, #16
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	460b      	mov	r3, r1
 801524e:	807b      	strh	r3, [r7, #2]
 8015250:	4613      	mov	r3, r2
 8015252:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8015254:	f107 020a 	add.w	r2, r7, #10
 8015258:	887b      	ldrh	r3, [r7, #2]
 801525a:	4619      	mov	r1, r3
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f7ff fe8e 	bl	8014f7e <pbuf_skip>
 8015262:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00a      	beq.n	8015280 <pbuf_put_at+0x3c>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	895a      	ldrh	r2, [r3, #10]
 801526e:	897b      	ldrh	r3, [r7, #10]
 8015270:	429a      	cmp	r2, r3
 8015272:	d905      	bls.n	8015280 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	897a      	ldrh	r2, [r7, #10]
 801527a:	4413      	add	r3, r2
 801527c:	787a      	ldrb	r2, [r7, #1]
 801527e:	701a      	strb	r2, [r3, #0]
  }
}
 8015280:	bf00      	nop
 8015282:	3710      	adds	r7, #16
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801528c:	f00c fd20 	bl	8021cd0 <rand>
 8015290:	4603      	mov	r3, r0
 8015292:	b29b      	uxth	r3, r3
 8015294:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015298:	b29b      	uxth	r3, r3
 801529a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801529e:	b29a      	uxth	r2, r3
 80152a0:	4b01      	ldr	r3, [pc, #4]	; (80152a8 <tcp_init+0x20>)
 80152a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80152a4:	bf00      	nop
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	20000064 	.word	0x20000064

080152ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	7d1b      	ldrb	r3, [r3, #20]
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d105      	bne.n	80152c8 <tcp_free+0x1c>
 80152bc:	4b06      	ldr	r3, [pc, #24]	; (80152d8 <tcp_free+0x2c>)
 80152be:	22d4      	movs	r2, #212	; 0xd4
 80152c0:	4906      	ldr	r1, [pc, #24]	; (80152dc <tcp_free+0x30>)
 80152c2:	4807      	ldr	r0, [pc, #28]	; (80152e0 <tcp_free+0x34>)
 80152c4:	f00c fc76 	bl	8021bb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80152c8:	6879      	ldr	r1, [r7, #4]
 80152ca:	2001      	movs	r0, #1
 80152cc:	f7fe fcd4 	bl	8013c78 <memp_free>
}
 80152d0:	bf00      	nop
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	08027390 	.word	0x08027390
 80152dc:	080273c0 	.word	0x080273c0
 80152e0:	080273d4 	.word	0x080273d4

080152e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	7d1b      	ldrb	r3, [r3, #20]
 80152f0:	2b01      	cmp	r3, #1
 80152f2:	d105      	bne.n	8015300 <tcp_free_listen+0x1c>
 80152f4:	4b06      	ldr	r3, [pc, #24]	; (8015310 <tcp_free_listen+0x2c>)
 80152f6:	22df      	movs	r2, #223	; 0xdf
 80152f8:	4906      	ldr	r1, [pc, #24]	; (8015314 <tcp_free_listen+0x30>)
 80152fa:	4807      	ldr	r0, [pc, #28]	; (8015318 <tcp_free_listen+0x34>)
 80152fc:	f00c fc5a 	bl	8021bb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015300:	6879      	ldr	r1, [r7, #4]
 8015302:	2002      	movs	r0, #2
 8015304:	f7fe fcb8 	bl	8013c78 <memp_free>
}
 8015308:	bf00      	nop
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	08027390 	.word	0x08027390
 8015314:	080273fc 	.word	0x080273fc
 8015318:	080273d4 	.word	0x080273d4

0801531c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015320:	f001 f9be 	bl	80166a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015324:	4b07      	ldr	r3, [pc, #28]	; (8015344 <tcp_tmr+0x28>)
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	3301      	adds	r3, #1
 801532a:	b2da      	uxtb	r2, r3
 801532c:	4b05      	ldr	r3, [pc, #20]	; (8015344 <tcp_tmr+0x28>)
 801532e:	701a      	strb	r2, [r3, #0]
 8015330:	4b04      	ldr	r3, [pc, #16]	; (8015344 <tcp_tmr+0x28>)
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	f003 0301 	and.w	r3, r3, #1
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801533c:	f000 fe70 	bl	8016020 <tcp_slowtmr>
  }
}
 8015340:	bf00      	nop
 8015342:	bd80      	pop	{r7, pc}
 8015344:	20014351 	.word	0x20014351

08015348 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d105      	bne.n	8015364 <tcp_remove_listener+0x1c>
 8015358:	4b0d      	ldr	r3, [pc, #52]	; (8015390 <tcp_remove_listener+0x48>)
 801535a:	22ff      	movs	r2, #255	; 0xff
 801535c:	490d      	ldr	r1, [pc, #52]	; (8015394 <tcp_remove_listener+0x4c>)
 801535e:	480e      	ldr	r0, [pc, #56]	; (8015398 <tcp_remove_listener+0x50>)
 8015360:	f00c fc28 	bl	8021bb4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	60fb      	str	r3, [r7, #12]
 8015368:	e00a      	b.n	8015380 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801536e:	683a      	ldr	r2, [r7, #0]
 8015370:	429a      	cmp	r2, r3
 8015372:	d102      	bne.n	801537a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2200      	movs	r2, #0
 8015378:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	68db      	ldr	r3, [r3, #12]
 801537e:	60fb      	str	r3, [r7, #12]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d1f1      	bne.n	801536a <tcp_remove_listener+0x22>
    }
  }
}
 8015386:	bf00      	nop
 8015388:	bf00      	nop
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	08027390 	.word	0x08027390
 8015394:	08027418 	.word	0x08027418
 8015398:	080273d4 	.word	0x080273d4

0801539c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d106      	bne.n	80153b8 <tcp_listen_closed+0x1c>
 80153aa:	4b14      	ldr	r3, [pc, #80]	; (80153fc <tcp_listen_closed+0x60>)
 80153ac:	f240 1211 	movw	r2, #273	; 0x111
 80153b0:	4913      	ldr	r1, [pc, #76]	; (8015400 <tcp_listen_closed+0x64>)
 80153b2:	4814      	ldr	r0, [pc, #80]	; (8015404 <tcp_listen_closed+0x68>)
 80153b4:	f00c fbfe 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	7d1b      	ldrb	r3, [r3, #20]
 80153bc:	2b01      	cmp	r3, #1
 80153be:	d006      	beq.n	80153ce <tcp_listen_closed+0x32>
 80153c0:	4b0e      	ldr	r3, [pc, #56]	; (80153fc <tcp_listen_closed+0x60>)
 80153c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80153c6:	4910      	ldr	r1, [pc, #64]	; (8015408 <tcp_listen_closed+0x6c>)
 80153c8:	480e      	ldr	r0, [pc, #56]	; (8015404 <tcp_listen_closed+0x68>)
 80153ca:	f00c fbf3 	bl	8021bb4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80153ce:	2301      	movs	r3, #1
 80153d0:	60fb      	str	r3, [r7, #12]
 80153d2:	e00b      	b.n	80153ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80153d4:	4a0d      	ldr	r2, [pc, #52]	; (801540c <tcp_listen_closed+0x70>)
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	6879      	ldr	r1, [r7, #4]
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7ff ffb1 	bl	8015348 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	3301      	adds	r3, #1
 80153ea:	60fb      	str	r3, [r7, #12]
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2b03      	cmp	r3, #3
 80153f0:	d9f0      	bls.n	80153d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80153f2:	bf00      	nop
 80153f4:	bf00      	nop
 80153f6:	3710      	adds	r7, #16
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	08027390 	.word	0x08027390
 8015400:	08027440 	.word	0x08027440
 8015404:	080273d4 	.word	0x080273d4
 8015408:	0802744c 	.word	0x0802744c
 801540c:	08029980 	.word	0x08029980

08015410 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015410:	b5b0      	push	{r4, r5, r7, lr}
 8015412:	b088      	sub	sp, #32
 8015414:	af04      	add	r7, sp, #16
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	460b      	mov	r3, r1
 801541a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d106      	bne.n	8015430 <tcp_close_shutdown+0x20>
 8015422:	4b63      	ldr	r3, [pc, #396]	; (80155b0 <tcp_close_shutdown+0x1a0>)
 8015424:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015428:	4962      	ldr	r1, [pc, #392]	; (80155b4 <tcp_close_shutdown+0x1a4>)
 801542a:	4863      	ldr	r0, [pc, #396]	; (80155b8 <tcp_close_shutdown+0x1a8>)
 801542c:	f00c fbc2 	bl	8021bb4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015430:	78fb      	ldrb	r3, [r7, #3]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d066      	beq.n	8015504 <tcp_close_shutdown+0xf4>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	7d1b      	ldrb	r3, [r3, #20]
 801543a:	2b04      	cmp	r3, #4
 801543c:	d003      	beq.n	8015446 <tcp_close_shutdown+0x36>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	7d1b      	ldrb	r3, [r3, #20]
 8015442:	2b07      	cmp	r3, #7
 8015444:	d15e      	bne.n	8015504 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801544a:	2b00      	cmp	r3, #0
 801544c:	d104      	bne.n	8015458 <tcp_close_shutdown+0x48>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015452:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015456:	d055      	beq.n	8015504 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	8b5b      	ldrh	r3, [r3, #26]
 801545c:	f003 0310 	and.w	r3, r3, #16
 8015460:	2b00      	cmp	r3, #0
 8015462:	d106      	bne.n	8015472 <tcp_close_shutdown+0x62>
 8015464:	4b52      	ldr	r3, [pc, #328]	; (80155b0 <tcp_close_shutdown+0x1a0>)
 8015466:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801546a:	4954      	ldr	r1, [pc, #336]	; (80155bc <tcp_close_shutdown+0x1ac>)
 801546c:	4852      	ldr	r0, [pc, #328]	; (80155b8 <tcp_close_shutdown+0x1a8>)
 801546e:	f00c fba1 	bl	8021bb4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801547a:	687d      	ldr	r5, [r7, #4]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	3304      	adds	r3, #4
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	8ad2      	ldrh	r2, [r2, #22]
 8015484:	6879      	ldr	r1, [r7, #4]
 8015486:	8b09      	ldrh	r1, [r1, #24]
 8015488:	9102      	str	r1, [sp, #8]
 801548a:	9201      	str	r2, [sp, #4]
 801548c:	9300      	str	r3, [sp, #0]
 801548e:	462b      	mov	r3, r5
 8015490:	4622      	mov	r2, r4
 8015492:	4601      	mov	r1, r0
 8015494:	6878      	ldr	r0, [r7, #4]
 8015496:	f005 ff3b 	bl	801b310 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f001 fcb0 	bl	8016e00 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80154a0:	4b47      	ldr	r3, [pc, #284]	; (80155c0 <tcp_close_shutdown+0x1b0>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d105      	bne.n	80154b6 <tcp_close_shutdown+0xa6>
 80154aa:	4b45      	ldr	r3, [pc, #276]	; (80155c0 <tcp_close_shutdown+0x1b0>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	4a43      	ldr	r2, [pc, #268]	; (80155c0 <tcp_close_shutdown+0x1b0>)
 80154b2:	6013      	str	r3, [r2, #0]
 80154b4:	e013      	b.n	80154de <tcp_close_shutdown+0xce>
 80154b6:	4b42      	ldr	r3, [pc, #264]	; (80155c0 <tcp_close_shutdown+0x1b0>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	60fb      	str	r3, [r7, #12]
 80154bc:	e00c      	b.n	80154d8 <tcp_close_shutdown+0xc8>
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	68db      	ldr	r3, [r3, #12]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d104      	bne.n	80154d2 <tcp_close_shutdown+0xc2>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	68da      	ldr	r2, [r3, #12]
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	60da      	str	r2, [r3, #12]
 80154d0:	e005      	b.n	80154de <tcp_close_shutdown+0xce>
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	60fb      	str	r3, [r7, #12]
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d1ef      	bne.n	80154be <tcp_close_shutdown+0xae>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2200      	movs	r2, #0
 80154e2:	60da      	str	r2, [r3, #12]
 80154e4:	4b37      	ldr	r3, [pc, #220]	; (80155c4 <tcp_close_shutdown+0x1b4>)
 80154e6:	2201      	movs	r2, #1
 80154e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80154ea:	4b37      	ldr	r3, [pc, #220]	; (80155c8 <tcp_close_shutdown+0x1b8>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d102      	bne.n	80154fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80154f4:	f004 f944 	bl	8019780 <tcp_trigger_input_pcb_close>
 80154f8:	e002      	b.n	8015500 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f7ff fed6 	bl	80152ac <tcp_free>
      }
      return ERR_OK;
 8015500:	2300      	movs	r3, #0
 8015502:	e050      	b.n	80155a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	7d1b      	ldrb	r3, [r3, #20]
 8015508:	2b02      	cmp	r3, #2
 801550a:	d03b      	beq.n	8015584 <tcp_close_shutdown+0x174>
 801550c:	2b02      	cmp	r3, #2
 801550e:	dc44      	bgt.n	801559a <tcp_close_shutdown+0x18a>
 8015510:	2b00      	cmp	r3, #0
 8015512:	d002      	beq.n	801551a <tcp_close_shutdown+0x10a>
 8015514:	2b01      	cmp	r3, #1
 8015516:	d02a      	beq.n	801556e <tcp_close_shutdown+0x15e>
 8015518:	e03f      	b.n	801559a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	8adb      	ldrh	r3, [r3, #22]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d021      	beq.n	8015566 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015522:	4b2a      	ldr	r3, [pc, #168]	; (80155cc <tcp_close_shutdown+0x1bc>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	687a      	ldr	r2, [r7, #4]
 8015528:	429a      	cmp	r2, r3
 801552a:	d105      	bne.n	8015538 <tcp_close_shutdown+0x128>
 801552c:	4b27      	ldr	r3, [pc, #156]	; (80155cc <tcp_close_shutdown+0x1bc>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	68db      	ldr	r3, [r3, #12]
 8015532:	4a26      	ldr	r2, [pc, #152]	; (80155cc <tcp_close_shutdown+0x1bc>)
 8015534:	6013      	str	r3, [r2, #0]
 8015536:	e013      	b.n	8015560 <tcp_close_shutdown+0x150>
 8015538:	4b24      	ldr	r3, [pc, #144]	; (80155cc <tcp_close_shutdown+0x1bc>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	60bb      	str	r3, [r7, #8]
 801553e:	e00c      	b.n	801555a <tcp_close_shutdown+0x14a>
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	687a      	ldr	r2, [r7, #4]
 8015546:	429a      	cmp	r2, r3
 8015548:	d104      	bne.n	8015554 <tcp_close_shutdown+0x144>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	68da      	ldr	r2, [r3, #12]
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	60da      	str	r2, [r3, #12]
 8015552:	e005      	b.n	8015560 <tcp_close_shutdown+0x150>
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	60bb      	str	r3, [r7, #8]
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d1ef      	bne.n	8015540 <tcp_close_shutdown+0x130>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2200      	movs	r2, #0
 8015564:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7ff fea0 	bl	80152ac <tcp_free>
      break;
 801556c:	e01a      	b.n	80155a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f7ff ff14 	bl	801539c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015574:	6879      	ldr	r1, [r7, #4]
 8015576:	4816      	ldr	r0, [pc, #88]	; (80155d0 <tcp_close_shutdown+0x1c0>)
 8015578:	f001 fc92 	bl	8016ea0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f7ff feb1 	bl	80152e4 <tcp_free_listen>
      break;
 8015582:	e00f      	b.n	80155a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015584:	6879      	ldr	r1, [r7, #4]
 8015586:	480e      	ldr	r0, [pc, #56]	; (80155c0 <tcp_close_shutdown+0x1b0>)
 8015588:	f001 fc8a 	bl	8016ea0 <tcp_pcb_remove>
 801558c:	4b0d      	ldr	r3, [pc, #52]	; (80155c4 <tcp_close_shutdown+0x1b4>)
 801558e:	2201      	movs	r2, #1
 8015590:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f7ff fe8a 	bl	80152ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015598:	e004      	b.n	80155a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 f81a 	bl	80155d4 <tcp_close_shutdown_fin>
 80155a0:	4603      	mov	r3, r0
 80155a2:	e000      	b.n	80155a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80155a4:	2300      	movs	r3, #0
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3710      	adds	r7, #16
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bdb0      	pop	{r4, r5, r7, pc}
 80155ae:	bf00      	nop
 80155b0:	08027390 	.word	0x08027390
 80155b4:	08027464 	.word	0x08027464
 80155b8:	080273d4 	.word	0x080273d4
 80155bc:	08027484 	.word	0x08027484
 80155c0:	2001b188 	.word	0x2001b188
 80155c4:	2001b184 	.word	0x2001b184
 80155c8:	2001b19c 	.word	0x2001b19c
 80155cc:	2001b194 	.word	0x2001b194
 80155d0:	2001b190 	.word	0x2001b190

080155d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b084      	sub	sp, #16
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d106      	bne.n	80155f0 <tcp_close_shutdown_fin+0x1c>
 80155e2:	4b2e      	ldr	r3, [pc, #184]	; (801569c <tcp_close_shutdown_fin+0xc8>)
 80155e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80155e8:	492d      	ldr	r1, [pc, #180]	; (80156a0 <tcp_close_shutdown_fin+0xcc>)
 80155ea:	482e      	ldr	r0, [pc, #184]	; (80156a4 <tcp_close_shutdown_fin+0xd0>)
 80155ec:	f00c fae2 	bl	8021bb4 <iprintf>

  switch (pcb->state) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	7d1b      	ldrb	r3, [r3, #20]
 80155f4:	2b07      	cmp	r3, #7
 80155f6:	d020      	beq.n	801563a <tcp_close_shutdown_fin+0x66>
 80155f8:	2b07      	cmp	r3, #7
 80155fa:	dc2b      	bgt.n	8015654 <tcp_close_shutdown_fin+0x80>
 80155fc:	2b03      	cmp	r3, #3
 80155fe:	d002      	beq.n	8015606 <tcp_close_shutdown_fin+0x32>
 8015600:	2b04      	cmp	r3, #4
 8015602:	d00d      	beq.n	8015620 <tcp_close_shutdown_fin+0x4c>
 8015604:	e026      	b.n	8015654 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f004 ff84 	bl	801a514 <tcp_send_fin>
 801560c:	4603      	mov	r3, r0
 801560e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d11f      	bne.n	8015658 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2205      	movs	r2, #5
 801561c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801561e:	e01b      	b.n	8015658 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f004 ff77 	bl	801a514 <tcp_send_fin>
 8015626:	4603      	mov	r3, r0
 8015628:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801562a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d114      	bne.n	801565c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2205      	movs	r2, #5
 8015636:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015638:	e010      	b.n	801565c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f004 ff6a 	bl	801a514 <tcp_send_fin>
 8015640:	4603      	mov	r3, r0
 8015642:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d109      	bne.n	8015660 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2209      	movs	r2, #9
 8015650:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015652:	e005      	b.n	8015660 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015654:	2300      	movs	r3, #0
 8015656:	e01c      	b.n	8015692 <tcp_close_shutdown_fin+0xbe>
      break;
 8015658:	bf00      	nop
 801565a:	e002      	b.n	8015662 <tcp_close_shutdown_fin+0x8e>
      break;
 801565c:	bf00      	nop
 801565e:	e000      	b.n	8015662 <tcp_close_shutdown_fin+0x8e>
      break;
 8015660:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d103      	bne.n	8015672 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f005 f890 	bl	801a790 <tcp_output>
 8015670:	e00d      	b.n	801568e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801567a:	d108      	bne.n	801568e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	8b5b      	ldrh	r3, [r3, #26]
 8015680:	f043 0308 	orr.w	r3, r3, #8
 8015684:	b29a      	uxth	r2, r3
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801568a:	2300      	movs	r3, #0
 801568c:	e001      	b.n	8015692 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801568e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015692:	4618      	mov	r0, r3
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
 801569a:	bf00      	nop
 801569c:	08027390 	.word	0x08027390
 80156a0:	08027440 	.word	0x08027440
 80156a4:	080273d4 	.word	0x080273d4

080156a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d109      	bne.n	80156ca <tcp_close+0x22>
 80156b6:	4b0f      	ldr	r3, [pc, #60]	; (80156f4 <tcp_close+0x4c>)
 80156b8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80156bc:	490e      	ldr	r1, [pc, #56]	; (80156f8 <tcp_close+0x50>)
 80156be:	480f      	ldr	r0, [pc, #60]	; (80156fc <tcp_close+0x54>)
 80156c0:	f00c fa78 	bl	8021bb4 <iprintf>
 80156c4:	f06f 030f 	mvn.w	r3, #15
 80156c8:	e00f      	b.n	80156ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	7d1b      	ldrb	r3, [r3, #20]
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d006      	beq.n	80156e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	8b5b      	ldrh	r3, [r3, #26]
 80156d6:	f043 0310 	orr.w	r3, r3, #16
 80156da:	b29a      	uxth	r2, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80156e0:	2101      	movs	r1, #1
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7ff fe94 	bl	8015410 <tcp_close_shutdown>
 80156e8:	4603      	mov	r3, r0
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	08027390 	.word	0x08027390
 80156f8:	080274a0 	.word	0x080274a0
 80156fc:	080273d4 	.word	0x080273d4

08015700 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b084      	sub	sp, #16
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d109      	bne.n	8015726 <tcp_shutdown+0x26>
 8015712:	4b26      	ldr	r3, [pc, #152]	; (80157ac <tcp_shutdown+0xac>)
 8015714:	f240 2207 	movw	r2, #519	; 0x207
 8015718:	4925      	ldr	r1, [pc, #148]	; (80157b0 <tcp_shutdown+0xb0>)
 801571a:	4826      	ldr	r0, [pc, #152]	; (80157b4 <tcp_shutdown+0xb4>)
 801571c:	f00c fa4a 	bl	8021bb4 <iprintf>
 8015720:	f06f 030f 	mvn.w	r3, #15
 8015724:	e03d      	b.n	80157a2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	7d1b      	ldrb	r3, [r3, #20]
 801572a:	2b01      	cmp	r3, #1
 801572c:	d102      	bne.n	8015734 <tcp_shutdown+0x34>
    return ERR_CONN;
 801572e:	f06f 030a 	mvn.w	r3, #10
 8015732:	e036      	b.n	80157a2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d01b      	beq.n	8015772 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	8b5b      	ldrh	r3, [r3, #26]
 801573e:	f043 0310 	orr.w	r3, r3, #16
 8015742:	b29a      	uxth	r2, r3
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d005      	beq.n	801575a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801574e:	2101      	movs	r1, #1
 8015750:	68f8      	ldr	r0, [r7, #12]
 8015752:	f7ff fe5d 	bl	8015410 <tcp_close_shutdown>
 8015756:	4603      	mov	r3, r0
 8015758:	e023      	b.n	80157a2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801575e:	2b00      	cmp	r3, #0
 8015760:	d007      	beq.n	8015772 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015766:	4618      	mov	r0, r3
 8015768:	f7ff f968 	bl	8014a3c <pbuf_free>
      pcb->refused_data = NULL;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2200      	movs	r2, #0
 8015770:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d013      	beq.n	80157a0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	7d1b      	ldrb	r3, [r3, #20]
 801577c:	2b04      	cmp	r3, #4
 801577e:	dc02      	bgt.n	8015786 <tcp_shutdown+0x86>
 8015780:	2b03      	cmp	r3, #3
 8015782:	da02      	bge.n	801578a <tcp_shutdown+0x8a>
 8015784:	e009      	b.n	801579a <tcp_shutdown+0x9a>
 8015786:	2b07      	cmp	r3, #7
 8015788:	d107      	bne.n	801579a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	b2db      	uxtb	r3, r3
 801578e:	4619      	mov	r1, r3
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f7ff fe3d 	bl	8015410 <tcp_close_shutdown>
 8015796:	4603      	mov	r3, r0
 8015798:	e003      	b.n	80157a2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801579a:	f06f 030a 	mvn.w	r3, #10
 801579e:	e000      	b.n	80157a2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80157a0:	2300      	movs	r3, #0
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3710      	adds	r7, #16
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	08027390 	.word	0x08027390
 80157b0:	080274b8 	.word	0x080274b8
 80157b4:	080273d4 	.word	0x080273d4

080157b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b08e      	sub	sp, #56	; 0x38
 80157bc:	af04      	add	r7, sp, #16
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d107      	bne.n	80157d8 <tcp_abandon+0x20>
 80157c8:	4b52      	ldr	r3, [pc, #328]	; (8015914 <tcp_abandon+0x15c>)
 80157ca:	f240 223d 	movw	r2, #573	; 0x23d
 80157ce:	4952      	ldr	r1, [pc, #328]	; (8015918 <tcp_abandon+0x160>)
 80157d0:	4852      	ldr	r0, [pc, #328]	; (801591c <tcp_abandon+0x164>)
 80157d2:	f00c f9ef 	bl	8021bb4 <iprintf>
 80157d6:	e099      	b.n	801590c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	7d1b      	ldrb	r3, [r3, #20]
 80157dc:	2b01      	cmp	r3, #1
 80157de:	d106      	bne.n	80157ee <tcp_abandon+0x36>
 80157e0:	4b4c      	ldr	r3, [pc, #304]	; (8015914 <tcp_abandon+0x15c>)
 80157e2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80157e6:	494e      	ldr	r1, [pc, #312]	; (8015920 <tcp_abandon+0x168>)
 80157e8:	484c      	ldr	r0, [pc, #304]	; (801591c <tcp_abandon+0x164>)
 80157ea:	f00c f9e3 	bl	8021bb4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	7d1b      	ldrb	r3, [r3, #20]
 80157f2:	2b0a      	cmp	r3, #10
 80157f4:	d107      	bne.n	8015806 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80157f6:	6879      	ldr	r1, [r7, #4]
 80157f8:	484a      	ldr	r0, [pc, #296]	; (8015924 <tcp_abandon+0x16c>)
 80157fa:	f001 fb51 	bl	8016ea0 <tcp_pcb_remove>
    tcp_free(pcb);
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7ff fd54 	bl	80152ac <tcp_free>
 8015804:	e082      	b.n	801590c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015806:	2300      	movs	r3, #0
 8015808:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801580a:	2300      	movs	r3, #0
 801580c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015812:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015818:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015820:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	691b      	ldr	r3, [r3, #16]
 8015826:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	7d1b      	ldrb	r3, [r3, #20]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d126      	bne.n	801587e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	8adb      	ldrh	r3, [r3, #22]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d02e      	beq.n	8015896 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015838:	4b3b      	ldr	r3, [pc, #236]	; (8015928 <tcp_abandon+0x170>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	429a      	cmp	r2, r3
 8015840:	d105      	bne.n	801584e <tcp_abandon+0x96>
 8015842:	4b39      	ldr	r3, [pc, #228]	; (8015928 <tcp_abandon+0x170>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	68db      	ldr	r3, [r3, #12]
 8015848:	4a37      	ldr	r2, [pc, #220]	; (8015928 <tcp_abandon+0x170>)
 801584a:	6013      	str	r3, [r2, #0]
 801584c:	e013      	b.n	8015876 <tcp_abandon+0xbe>
 801584e:	4b36      	ldr	r3, [pc, #216]	; (8015928 <tcp_abandon+0x170>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	61fb      	str	r3, [r7, #28]
 8015854:	e00c      	b.n	8015870 <tcp_abandon+0xb8>
 8015856:	69fb      	ldr	r3, [r7, #28]
 8015858:	68db      	ldr	r3, [r3, #12]
 801585a:	687a      	ldr	r2, [r7, #4]
 801585c:	429a      	cmp	r2, r3
 801585e:	d104      	bne.n	801586a <tcp_abandon+0xb2>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	68da      	ldr	r2, [r3, #12]
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	60da      	str	r2, [r3, #12]
 8015868:	e005      	b.n	8015876 <tcp_abandon+0xbe>
 801586a:	69fb      	ldr	r3, [r7, #28]
 801586c:	68db      	ldr	r3, [r3, #12]
 801586e:	61fb      	str	r3, [r7, #28]
 8015870:	69fb      	ldr	r3, [r7, #28]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1ef      	bne.n	8015856 <tcp_abandon+0x9e>
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2200      	movs	r2, #0
 801587a:	60da      	str	r2, [r3, #12]
 801587c:	e00b      	b.n	8015896 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	8adb      	ldrh	r3, [r3, #22]
 8015886:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015888:	6879      	ldr	r1, [r7, #4]
 801588a:	4828      	ldr	r0, [pc, #160]	; (801592c <tcp_abandon+0x174>)
 801588c:	f001 fb08 	bl	8016ea0 <tcp_pcb_remove>
 8015890:	4b27      	ldr	r3, [pc, #156]	; (8015930 <tcp_abandon+0x178>)
 8015892:	2201      	movs	r2, #1
 8015894:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801589a:	2b00      	cmp	r3, #0
 801589c:	d004      	beq.n	80158a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158a2:	4618      	mov	r0, r3
 80158a4:	f000 ffdc 	bl	8016860 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d004      	beq.n	80158ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158b4:	4618      	mov	r0, r3
 80158b6:	f000 ffd3 	bl	8016860 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d004      	beq.n	80158cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 ffca 	bl	8016860 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80158cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d00e      	beq.n	80158f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80158d2:	6879      	ldr	r1, [r7, #4]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	3304      	adds	r3, #4
 80158d8:	687a      	ldr	r2, [r7, #4]
 80158da:	8b12      	ldrh	r2, [r2, #24]
 80158dc:	9202      	str	r2, [sp, #8]
 80158de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80158e0:	9201      	str	r2, [sp, #4]
 80158e2:	9300      	str	r3, [sp, #0]
 80158e4:	460b      	mov	r3, r1
 80158e6:	697a      	ldr	r2, [r7, #20]
 80158e8:	69b9      	ldr	r1, [r7, #24]
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f005 fd10 	bl	801b310 <tcp_rst>
    }
    last_state = pcb->state;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	7d1b      	ldrb	r3, [r3, #20]
 80158f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	f7ff fcd8 	bl	80152ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d004      	beq.n	801590c <tcp_abandon+0x154>
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	f06f 010c 	mvn.w	r1, #12
 8015908:	68f8      	ldr	r0, [r7, #12]
 801590a:	4798      	blx	r3
  }
}
 801590c:	3728      	adds	r7, #40	; 0x28
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	08027390 	.word	0x08027390
 8015918:	080274d4 	.word	0x080274d4
 801591c:	080273d4 	.word	0x080273d4
 8015920:	080274f0 	.word	0x080274f0
 8015924:	2001b198 	.word	0x2001b198
 8015928:	2001b194 	.word	0x2001b194
 801592c:	2001b188 	.word	0x2001b188
 8015930:	2001b184 	.word	0x2001b184

08015934 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801593c:	2101      	movs	r1, #1
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f7ff ff3a 	bl	80157b8 <tcp_abandon>
}
 8015944:	bf00      	nop
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b088      	sub	sp, #32
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	4613      	mov	r3, r2
 8015958:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801595a:	2304      	movs	r3, #4
 801595c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d101      	bne.n	8015968 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015964:	4b3e      	ldr	r3, [pc, #248]	; (8015a60 <tcp_bind+0x114>)
 8015966:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d109      	bne.n	8015982 <tcp_bind+0x36>
 801596e:	4b3d      	ldr	r3, [pc, #244]	; (8015a64 <tcp_bind+0x118>)
 8015970:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015974:	493c      	ldr	r1, [pc, #240]	; (8015a68 <tcp_bind+0x11c>)
 8015976:	483d      	ldr	r0, [pc, #244]	; (8015a6c <tcp_bind+0x120>)
 8015978:	f00c f91c 	bl	8021bb4 <iprintf>
 801597c:	f06f 030f 	mvn.w	r3, #15
 8015980:	e06a      	b.n	8015a58 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	7d1b      	ldrb	r3, [r3, #20]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d009      	beq.n	801599e <tcp_bind+0x52>
 801598a:	4b36      	ldr	r3, [pc, #216]	; (8015a64 <tcp_bind+0x118>)
 801598c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015990:	4937      	ldr	r1, [pc, #220]	; (8015a70 <tcp_bind+0x124>)
 8015992:	4836      	ldr	r0, [pc, #216]	; (8015a6c <tcp_bind+0x120>)
 8015994:	f00c f90e 	bl	8021bb4 <iprintf>
 8015998:	f06f 0305 	mvn.w	r3, #5
 801599c:	e05c      	b.n	8015a58 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801599e:	88fb      	ldrh	r3, [r7, #6]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d109      	bne.n	80159b8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80159a4:	f000 f9de 	bl	8015d64 <tcp_new_port>
 80159a8:	4603      	mov	r3, r0
 80159aa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80159ac:	88fb      	ldrh	r3, [r7, #6]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d135      	bne.n	8015a1e <tcp_bind+0xd2>
      return ERR_BUF;
 80159b2:	f06f 0301 	mvn.w	r3, #1
 80159b6:	e04f      	b.n	8015a58 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80159b8:	2300      	movs	r3, #0
 80159ba:	61fb      	str	r3, [r7, #28]
 80159bc:	e02b      	b.n	8015a16 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80159be:	4a2d      	ldr	r2, [pc, #180]	; (8015a74 <tcp_bind+0x128>)
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	61bb      	str	r3, [r7, #24]
 80159ca:	e01e      	b.n	8015a0a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	8adb      	ldrh	r3, [r3, #22]
 80159d0:	88fa      	ldrh	r2, [r7, #6]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d116      	bne.n	8015a04 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80159d6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d010      	beq.n	80159fe <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80159dc:	69bb      	ldr	r3, [r7, #24]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d00c      	beq.n	80159fe <tcp_bind+0xb2>
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d009      	beq.n	80159fe <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d005      	beq.n	80159fe <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	681a      	ldr	r2, [r3, #0]
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d102      	bne.n	8015a04 <tcp_bind+0xb8>
              return ERR_USE;
 80159fe:	f06f 0307 	mvn.w	r3, #7
 8015a02:	e029      	b.n	8015a58 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015a04:	69bb      	ldr	r3, [r7, #24]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	61bb      	str	r3, [r7, #24]
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d1dd      	bne.n	80159cc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	3301      	adds	r3, #1
 8015a14:	61fb      	str	r3, [r7, #28]
 8015a16:	69fa      	ldr	r2, [r7, #28]
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	dbcf      	blt.n	80159be <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d00c      	beq.n	8015a3e <tcp_bind+0xf2>
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d008      	beq.n	8015a3e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d002      	beq.n	8015a38 <tcp_bind+0xec>
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	e000      	b.n	8015a3a <tcp_bind+0xee>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	68fa      	ldr	r2, [r7, #12]
 8015a3c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	88fa      	ldrh	r2, [r7, #6]
 8015a42:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015a44:	4b0c      	ldr	r3, [pc, #48]	; (8015a78 <tcp_bind+0x12c>)
 8015a46:	681a      	ldr	r2, [r3, #0]
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	60da      	str	r2, [r3, #12]
 8015a4c:	4a0a      	ldr	r2, [pc, #40]	; (8015a78 <tcp_bind+0x12c>)
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	6013      	str	r3, [r2, #0]
 8015a52:	f005 fe1f 	bl	801b694 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3720      	adds	r7, #32
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	080299c0 	.word	0x080299c0
 8015a64:	08027390 	.word	0x08027390
 8015a68:	08027524 	.word	0x08027524
 8015a6c:	080273d4 	.word	0x080273d4
 8015a70:	0802753c 	.word	0x0802753c
 8015a74:	08029980 	.word	0x08029980
 8015a78:	2001b194 	.word	0x2001b194

08015a7c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	4613      	mov	r3, r2
 8015a88:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d106      	bne.n	8015a9e <tcp_accept_null+0x22>
 8015a90:	4b07      	ldr	r3, [pc, #28]	; (8015ab0 <tcp_accept_null+0x34>)
 8015a92:	f240 320f 	movw	r2, #783	; 0x30f
 8015a96:	4907      	ldr	r1, [pc, #28]	; (8015ab4 <tcp_accept_null+0x38>)
 8015a98:	4807      	ldr	r0, [pc, #28]	; (8015ab8 <tcp_accept_null+0x3c>)
 8015a9a:	f00c f88b 	bl	8021bb4 <iprintf>

  tcp_abort(pcb);
 8015a9e:	68b8      	ldr	r0, [r7, #8]
 8015aa0:	f7ff ff48 	bl	8015934 <tcp_abort>

  return ERR_ABRT;
 8015aa4:	f06f 030c 	mvn.w	r3, #12
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3710      	adds	r7, #16
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	08027390 	.word	0x08027390
 8015ab4:	08027564 	.word	0x08027564
 8015ab8:	080273d4 	.word	0x080273d4

08015abc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b088      	sub	sp, #32
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	607a      	str	r2, [r7, #4]
 8015ac8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8015aca:	2300      	movs	r3, #0
 8015acc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d109      	bne.n	8015ae8 <tcp_listen_with_backlog_and_err+0x2c>
 8015ad4:	4b47      	ldr	r3, [pc, #284]	; (8015bf4 <tcp_listen_with_backlog_and_err+0x138>)
 8015ad6:	f240 3259 	movw	r2, #857	; 0x359
 8015ada:	4947      	ldr	r1, [pc, #284]	; (8015bf8 <tcp_listen_with_backlog_and_err+0x13c>)
 8015adc:	4847      	ldr	r0, [pc, #284]	; (8015bfc <tcp_listen_with_backlog_and_err+0x140>)
 8015ade:	f00c f869 	bl	8021bb4 <iprintf>
 8015ae2:	23f0      	movs	r3, #240	; 0xf0
 8015ae4:	76fb      	strb	r3, [r7, #27]
 8015ae6:	e079      	b.n	8015bdc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	7d1b      	ldrb	r3, [r3, #20]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d009      	beq.n	8015b04 <tcp_listen_with_backlog_and_err+0x48>
 8015af0:	4b40      	ldr	r3, [pc, #256]	; (8015bf4 <tcp_listen_with_backlog_and_err+0x138>)
 8015af2:	f240 325a 	movw	r2, #858	; 0x35a
 8015af6:	4942      	ldr	r1, [pc, #264]	; (8015c00 <tcp_listen_with_backlog_and_err+0x144>)
 8015af8:	4840      	ldr	r0, [pc, #256]	; (8015bfc <tcp_listen_with_backlog_and_err+0x140>)
 8015afa:	f00c f85b 	bl	8021bb4 <iprintf>
 8015afe:	23f1      	movs	r3, #241	; 0xf1
 8015b00:	76fb      	strb	r3, [r7, #27]
 8015b02:	e06b      	b.n	8015bdc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	7d1b      	ldrb	r3, [r3, #20]
 8015b08:	2b01      	cmp	r3, #1
 8015b0a:	d104      	bne.n	8015b16 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015b10:	23f7      	movs	r3, #247	; 0xf7
 8015b12:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015b14:	e062      	b.n	8015bdc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015b16:	2002      	movs	r0, #2
 8015b18:	f7fe f85c 	bl	8013bd4 <memp_malloc>
 8015b1c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d102      	bne.n	8015b2a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015b24:	23ff      	movs	r3, #255	; 0xff
 8015b26:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015b28:	e058      	b.n	8015bdc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	691a      	ldr	r2, [r3, #16]
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	8ada      	ldrh	r2, [r3, #22]
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015b3a:	69fb      	ldr	r3, [r7, #28]
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	7d5a      	ldrb	r2, [r3, #21]
 8015b44:	69fb      	ldr	r3, [r7, #28]
 8015b46:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	7a5a      	ldrb	r2, [r3, #9]
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015b50:	69fb      	ldr	r3, [r7, #28]
 8015b52:	2200      	movs	r2, #0
 8015b54:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	7ada      	ldrb	r2, [r3, #11]
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	7a9a      	ldrb	r2, [r3, #10]
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	69fb      	ldr	r3, [r7, #28]
 8015b6c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	8adb      	ldrh	r3, [r3, #22]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d021      	beq.n	8015bba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015b76:	4b23      	ldr	r3, [pc, #140]	; (8015c04 <tcp_listen_with_backlog_and_err+0x148>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	68fa      	ldr	r2, [r7, #12]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d105      	bne.n	8015b8c <tcp_listen_with_backlog_and_err+0xd0>
 8015b80:	4b20      	ldr	r3, [pc, #128]	; (8015c04 <tcp_listen_with_backlog_and_err+0x148>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	4a1f      	ldr	r2, [pc, #124]	; (8015c04 <tcp_listen_with_backlog_and_err+0x148>)
 8015b88:	6013      	str	r3, [r2, #0]
 8015b8a:	e013      	b.n	8015bb4 <tcp_listen_with_backlog_and_err+0xf8>
 8015b8c:	4b1d      	ldr	r3, [pc, #116]	; (8015c04 <tcp_listen_with_backlog_and_err+0x148>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	617b      	str	r3, [r7, #20]
 8015b92:	e00c      	b.n	8015bae <tcp_listen_with_backlog_and_err+0xf2>
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	68db      	ldr	r3, [r3, #12]
 8015b98:	68fa      	ldr	r2, [r7, #12]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d104      	bne.n	8015ba8 <tcp_listen_with_backlog_and_err+0xec>
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	68da      	ldr	r2, [r3, #12]
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	60da      	str	r2, [r3, #12]
 8015ba6:	e005      	b.n	8015bb4 <tcp_listen_with_backlog_and_err+0xf8>
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	68db      	ldr	r3, [r3, #12]
 8015bac:	617b      	str	r3, [r7, #20]
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d1ef      	bne.n	8015b94 <tcp_listen_with_backlog_and_err+0xd8>
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015bba:	68f8      	ldr	r0, [r7, #12]
 8015bbc:	f7ff fb76 	bl	80152ac <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	4a11      	ldr	r2, [pc, #68]	; (8015c08 <tcp_listen_with_backlog_and_err+0x14c>)
 8015bc4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015bc6:	4b11      	ldr	r3, [pc, #68]	; (8015c0c <tcp_listen_with_backlog_and_err+0x150>)
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	69fb      	ldr	r3, [r7, #28]
 8015bcc:	60da      	str	r2, [r3, #12]
 8015bce:	4a0f      	ldr	r2, [pc, #60]	; (8015c0c <tcp_listen_with_backlog_and_err+0x150>)
 8015bd0:	69fb      	ldr	r3, [r7, #28]
 8015bd2:	6013      	str	r3, [r2, #0]
 8015bd4:	f005 fd5e 	bl	801b694 <tcp_timer_needed>
  res = ERR_OK;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d002      	beq.n	8015be8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	7efa      	ldrb	r2, [r7, #27]
 8015be6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015be8:	69fb      	ldr	r3, [r7, #28]
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3720      	adds	r7, #32
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	08027390 	.word	0x08027390
 8015bf8:	08027584 	.word	0x08027584
 8015bfc:	080273d4 	.word	0x080273d4
 8015c00:	080275b4 	.word	0x080275b4
 8015c04:	2001b194 	.word	0x2001b194
 8015c08:	08015a7d 	.word	0x08015a7d
 8015c0c:	2001b190 	.word	0x2001b190

08015c10 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d106      	bne.n	8015c2c <tcp_update_rcv_ann_wnd+0x1c>
 8015c1e:	4b25      	ldr	r3, [pc, #148]	; (8015cb4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015c20:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015c24:	4924      	ldr	r1, [pc, #144]	; (8015cb8 <tcp_update_rcv_ann_wnd+0xa8>)
 8015c26:	4825      	ldr	r0, [pc, #148]	; (8015cbc <tcp_update_rcv_ann_wnd+0xac>)
 8015c28:	f00b ffc4 	bl	8021bb4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015c34:	4413      	add	r3, r2
 8015c36:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015c40:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015c44:	bf28      	it	cs
 8015c46:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015c4a:	b292      	uxth	r2, r2
 8015c4c:	4413      	add	r3, r2
 8015c4e:	68fa      	ldr	r2, [r7, #12]
 8015c50:	1ad3      	subs	r3, r2, r3
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	db08      	blt.n	8015c68 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c62:	68fa      	ldr	r2, [r7, #12]
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	e020      	b.n	8015caa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c70:	1ad3      	subs	r3, r2, r3
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	dd03      	ble.n	8015c7e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2200      	movs	r2, #0
 8015c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015c7c:	e014      	b.n	8015ca8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c86:	1ad3      	subs	r3, r2, r3
 8015c88:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c90:	d306      	bcc.n	8015ca0 <tcp_update_rcv_ann_wnd+0x90>
 8015c92:	4b08      	ldr	r3, [pc, #32]	; (8015cb4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015c94:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015c98:	4909      	ldr	r1, [pc, #36]	; (8015cc0 <tcp_update_rcv_ann_wnd+0xb0>)
 8015c9a:	4808      	ldr	r0, [pc, #32]	; (8015cbc <tcp_update_rcv_ann_wnd+0xac>)
 8015c9c:	f00b ff8a 	bl	8021bb4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015ca8:	2300      	movs	r3, #0
  }
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3710      	adds	r7, #16
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
 8015cb2:	bf00      	nop
 8015cb4:	08027390 	.word	0x08027390
 8015cb8:	080275ec 	.word	0x080275ec
 8015cbc:	080273d4 	.word	0x080273d4
 8015cc0:	08027610 	.word	0x08027610

08015cc4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	460b      	mov	r3, r1
 8015cce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d107      	bne.n	8015ce6 <tcp_recved+0x22>
 8015cd6:	4b1f      	ldr	r3, [pc, #124]	; (8015d54 <tcp_recved+0x90>)
 8015cd8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015cdc:	491e      	ldr	r1, [pc, #120]	; (8015d58 <tcp_recved+0x94>)
 8015cde:	481f      	ldr	r0, [pc, #124]	; (8015d5c <tcp_recved+0x98>)
 8015ce0:	f00b ff68 	bl	8021bb4 <iprintf>
 8015ce4:	e032      	b.n	8015d4c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	7d1b      	ldrb	r3, [r3, #20]
 8015cea:	2b01      	cmp	r3, #1
 8015cec:	d106      	bne.n	8015cfc <tcp_recved+0x38>
 8015cee:	4b19      	ldr	r3, [pc, #100]	; (8015d54 <tcp_recved+0x90>)
 8015cf0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015cf4:	491a      	ldr	r1, [pc, #104]	; (8015d60 <tcp_recved+0x9c>)
 8015cf6:	4819      	ldr	r0, [pc, #100]	; (8015d5c <tcp_recved+0x98>)
 8015cf8:	f00b ff5c 	bl	8021bb4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d00:	887b      	ldrh	r3, [r7, #2]
 8015d02:	4413      	add	r3, r2
 8015d04:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015d06:	89fb      	ldrh	r3, [r7, #14]
 8015d08:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015d0c:	d804      	bhi.n	8015d18 <tcp_recved+0x54>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d12:	89fa      	ldrh	r2, [r7, #14]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d204      	bcs.n	8015d22 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015d1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8015d20:	e002      	b.n	8015d28 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	89fa      	ldrh	r2, [r7, #14]
 8015d26:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f7ff ff71 	bl	8015c10 <tcp_update_rcv_ann_wnd>
 8015d2e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015d36:	d309      	bcc.n	8015d4c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	8b5b      	ldrh	r3, [r3, #26]
 8015d3c:	f043 0302 	orr.w	r3, r3, #2
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f004 fd22 	bl	801a790 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015d4c:	3710      	adds	r7, #16
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	08027390 	.word	0x08027390
 8015d58:	0802762c 	.word	0x0802762c
 8015d5c:	080273d4 	.word	0x080273d4
 8015d60:	08027644 	.word	0x08027644

08015d64 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b083      	sub	sp, #12
 8015d68:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015d6e:	4b1e      	ldr	r3, [pc, #120]	; (8015de8 <tcp_new_port+0x84>)
 8015d70:	881b      	ldrh	r3, [r3, #0]
 8015d72:	3301      	adds	r3, #1
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	4b1c      	ldr	r3, [pc, #112]	; (8015de8 <tcp_new_port+0x84>)
 8015d78:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015d7a:	4b1b      	ldr	r3, [pc, #108]	; (8015de8 <tcp_new_port+0x84>)
 8015d7c:	881b      	ldrh	r3, [r3, #0]
 8015d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d103      	bne.n	8015d8e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015d86:	4b18      	ldr	r3, [pc, #96]	; (8015de8 <tcp_new_port+0x84>)
 8015d88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015d8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015d8e:	2300      	movs	r3, #0
 8015d90:	71fb      	strb	r3, [r7, #7]
 8015d92:	e01e      	b.n	8015dd2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015d94:	79fb      	ldrb	r3, [r7, #7]
 8015d96:	4a15      	ldr	r2, [pc, #84]	; (8015dec <tcp_new_port+0x88>)
 8015d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	603b      	str	r3, [r7, #0]
 8015da0:	e011      	b.n	8015dc6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	8ada      	ldrh	r2, [r3, #22]
 8015da6:	4b10      	ldr	r3, [pc, #64]	; (8015de8 <tcp_new_port+0x84>)
 8015da8:	881b      	ldrh	r3, [r3, #0]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d108      	bne.n	8015dc0 <tcp_new_port+0x5c>
        n++;
 8015dae:	88bb      	ldrh	r3, [r7, #4]
 8015db0:	3301      	adds	r3, #1
 8015db2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015db4:	88bb      	ldrh	r3, [r7, #4]
 8015db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015dba:	d3d8      	bcc.n	8015d6e <tcp_new_port+0xa>
          return 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	e00d      	b.n	8015ddc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	68db      	ldr	r3, [r3, #12]
 8015dc4:	603b      	str	r3, [r7, #0]
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d1ea      	bne.n	8015da2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015dcc:	79fb      	ldrb	r3, [r7, #7]
 8015dce:	3301      	adds	r3, #1
 8015dd0:	71fb      	strb	r3, [r7, #7]
 8015dd2:	79fb      	ldrb	r3, [r7, #7]
 8015dd4:	2b03      	cmp	r3, #3
 8015dd6:	d9dd      	bls.n	8015d94 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015dd8:	4b03      	ldr	r3, [pc, #12]	; (8015de8 <tcp_new_port+0x84>)
 8015dda:	881b      	ldrh	r3, [r3, #0]
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	370c      	adds	r7, #12
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr
 8015de8:	20000064 	.word	0x20000064
 8015dec:	08029980 	.word	0x08029980

08015df0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b08a      	sub	sp, #40	; 0x28
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	60f8      	str	r0, [r7, #12]
 8015df8:	60b9      	str	r1, [r7, #8]
 8015dfa:	603b      	str	r3, [r7, #0]
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8015e00:	2300      	movs	r3, #0
 8015e02:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d109      	bne.n	8015e1e <tcp_connect+0x2e>
 8015e0a:	4b7d      	ldr	r3, [pc, #500]	; (8016000 <tcp_connect+0x210>)
 8015e0c:	f240 4235 	movw	r2, #1077	; 0x435
 8015e10:	497c      	ldr	r1, [pc, #496]	; (8016004 <tcp_connect+0x214>)
 8015e12:	487d      	ldr	r0, [pc, #500]	; (8016008 <tcp_connect+0x218>)
 8015e14:	f00b fece 	bl	8021bb4 <iprintf>
 8015e18:	f06f 030f 	mvn.w	r3, #15
 8015e1c:	e0ec      	b.n	8015ff8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d109      	bne.n	8015e38 <tcp_connect+0x48>
 8015e24:	4b76      	ldr	r3, [pc, #472]	; (8016000 <tcp_connect+0x210>)
 8015e26:	f240 4236 	movw	r2, #1078	; 0x436
 8015e2a:	4978      	ldr	r1, [pc, #480]	; (801600c <tcp_connect+0x21c>)
 8015e2c:	4876      	ldr	r0, [pc, #472]	; (8016008 <tcp_connect+0x218>)
 8015e2e:	f00b fec1 	bl	8021bb4 <iprintf>
 8015e32:	f06f 030f 	mvn.w	r3, #15
 8015e36:	e0df      	b.n	8015ff8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	7d1b      	ldrb	r3, [r3, #20]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d009      	beq.n	8015e54 <tcp_connect+0x64>
 8015e40:	4b6f      	ldr	r3, [pc, #444]	; (8016000 <tcp_connect+0x210>)
 8015e42:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8015e46:	4972      	ldr	r1, [pc, #456]	; (8016010 <tcp_connect+0x220>)
 8015e48:	486f      	ldr	r0, [pc, #444]	; (8016008 <tcp_connect+0x218>)
 8015e4a:	f00b feb3 	bl	8021bb4 <iprintf>
 8015e4e:	f06f 0309 	mvn.w	r3, #9
 8015e52:	e0d1      	b.n	8015ff8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d002      	beq.n	8015e60 <tcp_connect+0x70>
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	e000      	b.n	8015e62 <tcp_connect+0x72>
 8015e60:	2300      	movs	r3, #0
 8015e62:	68fa      	ldr	r2, [r7, #12]
 8015e64:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	88fa      	ldrh	r2, [r7, #6]
 8015e6a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	7a1b      	ldrb	r3, [r3, #8]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d006      	beq.n	8015e82 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	7a1b      	ldrb	r3, [r3, #8]
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7fe fa1f 	bl	80142bc <netif_get_by_index>
 8015e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8015e80:	e005      	b.n	8015e8e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	3304      	adds	r3, #4
 8015e86:	4618      	mov	r0, r3
 8015e88:	f009 fb00 	bl	801f48c <ip4_route>
 8015e8c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d102      	bne.n	8015e9a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8015e94:	f06f 0303 	mvn.w	r3, #3
 8015e98:	e0ae      	b.n	8015ff8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d003      	beq.n	8015ea8 <tcp_connect+0xb8>
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d111      	bne.n	8015ecc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8015ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d002      	beq.n	8015eb4 <tcp_connect+0xc4>
 8015eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb0:	3304      	adds	r3, #4
 8015eb2:	e000      	b.n	8015eb6 <tcp_connect+0xc6>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8015eb8:	69fb      	ldr	r3, [r7, #28]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d102      	bne.n	8015ec4 <tcp_connect+0xd4>
      return ERR_RTE;
 8015ebe:	f06f 0303 	mvn.w	r3, #3
 8015ec2:	e099      	b.n	8015ff8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	681a      	ldr	r2, [r3, #0]
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	8adb      	ldrh	r3, [r3, #22]
 8015ed0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	8adb      	ldrh	r3, [r3, #22]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d10c      	bne.n	8015ef4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8015eda:	f7ff ff43 	bl	8015d64 <tcp_new_port>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	461a      	mov	r2, r3
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	8adb      	ldrh	r3, [r3, #22]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d102      	bne.n	8015ef4 <tcp_connect+0x104>
      return ERR_BUF;
 8015eee:	f06f 0301 	mvn.w	r3, #1
 8015ef2:	e081      	b.n	8015ff8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8015ef4:	68f8      	ldr	r0, [r7, #12]
 8015ef6:	f001 f867 	bl	8016fc8 <tcp_next_iss>
 8015efa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2200      	movs	r2, #0
 8015f00:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	697a      	ldr	r2, [r7, #20]
 8015f06:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	1e5a      	subs	r2, r3, #1
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	1e5a      	subs	r2, r3, #1
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	1e5a      	subs	r2, r3, #1
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015f48:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3304      	adds	r3, #4
 8015f52:	461a      	mov	r2, r3
 8015f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f56:	f001 f85d 	bl	8017014 <tcp_eff_send_mss_netif>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2201      	movs	r2, #1
 8015f66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	683a      	ldr	r2, [r7, #0]
 8015f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8015f72:	2102      	movs	r1, #2
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	f004 fb1d 	bl	801a5b4 <tcp_enqueue_flags>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8015f7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d136      	bne.n	8015ff4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2202      	movs	r2, #2
 8015f8a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8015f8c:	8b7b      	ldrh	r3, [r7, #26]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d021      	beq.n	8015fd6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015f92:	4b20      	ldr	r3, [pc, #128]	; (8016014 <tcp_connect+0x224>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	68fa      	ldr	r2, [r7, #12]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d105      	bne.n	8015fa8 <tcp_connect+0x1b8>
 8015f9c:	4b1d      	ldr	r3, [pc, #116]	; (8016014 <tcp_connect+0x224>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	68db      	ldr	r3, [r3, #12]
 8015fa2:	4a1c      	ldr	r2, [pc, #112]	; (8016014 <tcp_connect+0x224>)
 8015fa4:	6013      	str	r3, [r2, #0]
 8015fa6:	e013      	b.n	8015fd0 <tcp_connect+0x1e0>
 8015fa8:	4b1a      	ldr	r3, [pc, #104]	; (8016014 <tcp_connect+0x224>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	623b      	str	r3, [r7, #32]
 8015fae:	e00c      	b.n	8015fca <tcp_connect+0x1da>
 8015fb0:	6a3b      	ldr	r3, [r7, #32]
 8015fb2:	68db      	ldr	r3, [r3, #12]
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d104      	bne.n	8015fc4 <tcp_connect+0x1d4>
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	68da      	ldr	r2, [r3, #12]
 8015fbe:	6a3b      	ldr	r3, [r7, #32]
 8015fc0:	60da      	str	r2, [r3, #12]
 8015fc2:	e005      	b.n	8015fd0 <tcp_connect+0x1e0>
 8015fc4:	6a3b      	ldr	r3, [r7, #32]
 8015fc6:	68db      	ldr	r3, [r3, #12]
 8015fc8:	623b      	str	r3, [r7, #32]
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d1ef      	bne.n	8015fb0 <tcp_connect+0x1c0>
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8015fd6:	4b10      	ldr	r3, [pc, #64]	; (8016018 <tcp_connect+0x228>)
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	60da      	str	r2, [r3, #12]
 8015fde:	4a0e      	ldr	r2, [pc, #56]	; (8016018 <tcp_connect+0x228>)
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	6013      	str	r3, [r2, #0]
 8015fe4:	f005 fb56 	bl	801b694 <tcp_timer_needed>
 8015fe8:	4b0c      	ldr	r3, [pc, #48]	; (801601c <tcp_connect+0x22c>)
 8015fea:	2201      	movs	r2, #1
 8015fec:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f004 fbce 	bl	801a790 <tcp_output>
  }
  return ret;
 8015ff4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3728      	adds	r7, #40	; 0x28
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	08027390 	.word	0x08027390
 8016004:	0802766c 	.word	0x0802766c
 8016008:	080273d4 	.word	0x080273d4
 801600c:	08027688 	.word	0x08027688
 8016010:	080276a4 	.word	0x080276a4
 8016014:	2001b194 	.word	0x2001b194
 8016018:	2001b188 	.word	0x2001b188
 801601c:	2001b184 	.word	0x2001b184

08016020 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016020:	b5b0      	push	{r4, r5, r7, lr}
 8016022:	b090      	sub	sp, #64	; 0x40
 8016024:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016026:	2300      	movs	r3, #0
 8016028:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801602c:	4b94      	ldr	r3, [pc, #592]	; (8016280 <tcp_slowtmr+0x260>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	3301      	adds	r3, #1
 8016032:	4a93      	ldr	r2, [pc, #588]	; (8016280 <tcp_slowtmr+0x260>)
 8016034:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016036:	4b93      	ldr	r3, [pc, #588]	; (8016284 <tcp_slowtmr+0x264>)
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	3301      	adds	r3, #1
 801603c:	b2da      	uxtb	r2, r3
 801603e:	4b91      	ldr	r3, [pc, #580]	; (8016284 <tcp_slowtmr+0x264>)
 8016040:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016042:	2300      	movs	r3, #0
 8016044:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016046:	4b90      	ldr	r3, [pc, #576]	; (8016288 <tcp_slowtmr+0x268>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801604c:	e29f      	b.n	801658e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016050:	7d1b      	ldrb	r3, [r3, #20]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d106      	bne.n	8016064 <tcp_slowtmr+0x44>
 8016056:	4b8d      	ldr	r3, [pc, #564]	; (801628c <tcp_slowtmr+0x26c>)
 8016058:	f240 42be 	movw	r2, #1214	; 0x4be
 801605c:	498c      	ldr	r1, [pc, #560]	; (8016290 <tcp_slowtmr+0x270>)
 801605e:	488d      	ldr	r0, [pc, #564]	; (8016294 <tcp_slowtmr+0x274>)
 8016060:	f00b fda8 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016066:	7d1b      	ldrb	r3, [r3, #20]
 8016068:	2b01      	cmp	r3, #1
 801606a:	d106      	bne.n	801607a <tcp_slowtmr+0x5a>
 801606c:	4b87      	ldr	r3, [pc, #540]	; (801628c <tcp_slowtmr+0x26c>)
 801606e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016072:	4989      	ldr	r1, [pc, #548]	; (8016298 <tcp_slowtmr+0x278>)
 8016074:	4887      	ldr	r0, [pc, #540]	; (8016294 <tcp_slowtmr+0x274>)
 8016076:	f00b fd9d 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607c:	7d1b      	ldrb	r3, [r3, #20]
 801607e:	2b0a      	cmp	r3, #10
 8016080:	d106      	bne.n	8016090 <tcp_slowtmr+0x70>
 8016082:	4b82      	ldr	r3, [pc, #520]	; (801628c <tcp_slowtmr+0x26c>)
 8016084:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016088:	4984      	ldr	r1, [pc, #528]	; (801629c <tcp_slowtmr+0x27c>)
 801608a:	4882      	ldr	r0, [pc, #520]	; (8016294 <tcp_slowtmr+0x274>)
 801608c:	f00b fd92 	bl	8021bb4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016092:	7f9a      	ldrb	r2, [r3, #30]
 8016094:	4b7b      	ldr	r3, [pc, #492]	; (8016284 <tcp_slowtmr+0x264>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	429a      	cmp	r2, r3
 801609a:	d105      	bne.n	80160a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80160a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80160a6:	e272      	b.n	801658e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80160a8:	4b76      	ldr	r3, [pc, #472]	; (8016284 <tcp_slowtmr+0x264>)
 80160aa:	781a      	ldrb	r2, [r3, #0]
 80160ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80160b0:	2300      	movs	r3, #0
 80160b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80160bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160be:	7d1b      	ldrb	r3, [r3, #20]
 80160c0:	2b02      	cmp	r3, #2
 80160c2:	d10a      	bne.n	80160da <tcp_slowtmr+0xba>
 80160c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160ca:	2b05      	cmp	r3, #5
 80160cc:	d905      	bls.n	80160da <tcp_slowtmr+0xba>
      ++pcb_remove;
 80160ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d2:	3301      	adds	r3, #1
 80160d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80160d8:	e11e      	b.n	8016318 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80160da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160e0:	2b0b      	cmp	r3, #11
 80160e2:	d905      	bls.n	80160f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80160e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160e8:	3301      	adds	r3, #1
 80160ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160ee:	e113      	b.n	8016318 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d075      	beq.n	80161e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80160fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d006      	beq.n	8016110 <tcp_slowtmr+0xf0>
 8016102:	4b62      	ldr	r3, [pc, #392]	; (801628c <tcp_slowtmr+0x26c>)
 8016104:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016108:	4965      	ldr	r1, [pc, #404]	; (80162a0 <tcp_slowtmr+0x280>)
 801610a:	4862      	ldr	r0, [pc, #392]	; (8016294 <tcp_slowtmr+0x274>)
 801610c:	f00b fd52 	bl	8021bb4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016114:	2b00      	cmp	r3, #0
 8016116:	d106      	bne.n	8016126 <tcp_slowtmr+0x106>
 8016118:	4b5c      	ldr	r3, [pc, #368]	; (801628c <tcp_slowtmr+0x26c>)
 801611a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801611e:	4961      	ldr	r1, [pc, #388]	; (80162a4 <tcp_slowtmr+0x284>)
 8016120:	485c      	ldr	r0, [pc, #368]	; (8016294 <tcp_slowtmr+0x274>)
 8016122:	f00b fd47 	bl	8021bb4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016128:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801612c:	2b0b      	cmp	r3, #11
 801612e:	d905      	bls.n	801613c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016134:	3301      	adds	r3, #1
 8016136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801613a:	e0ed      	b.n	8016318 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016142:	3b01      	subs	r3, #1
 8016144:	4a58      	ldr	r2, [pc, #352]	; (80162a8 <tcp_slowtmr+0x288>)
 8016146:	5cd3      	ldrb	r3, [r2, r3]
 8016148:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016150:	7c7a      	ldrb	r2, [r7, #17]
 8016152:	429a      	cmp	r2, r3
 8016154:	d907      	bls.n	8016166 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016158:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801615c:	3301      	adds	r3, #1
 801615e:	b2da      	uxtb	r2, r3
 8016160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016162:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016168:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801616c:	7c7a      	ldrb	r2, [r7, #17]
 801616e:	429a      	cmp	r2, r3
 8016170:	f200 80d2 	bhi.w	8016318 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016174:	2301      	movs	r3, #1
 8016176:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801617e:	2b00      	cmp	r3, #0
 8016180:	d108      	bne.n	8016194 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016184:	f005 f9b8 	bl	801b4f8 <tcp_zero_window_probe>
 8016188:	4603      	mov	r3, r0
 801618a:	2b00      	cmp	r3, #0
 801618c:	d014      	beq.n	80161b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801618e:	2300      	movs	r3, #0
 8016190:	623b      	str	r3, [r7, #32]
 8016192:	e011      	b.n	80161b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801619a:	4619      	mov	r1, r3
 801619c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801619e:	f004 f86d 	bl	801a27c <tcp_split_unsent_seg>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d107      	bne.n	80161b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80161a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161aa:	f004 faf1 	bl	801a790 <tcp_output>
 80161ae:	4603      	mov	r3, r0
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d101      	bne.n	80161b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80161b4:	2300      	movs	r3, #0
 80161b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80161b8:	6a3b      	ldr	r3, [r7, #32]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	f000 80ac 	beq.w	8016318 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	2200      	movs	r2, #0
 80161c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80161c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80161ce:	2b06      	cmp	r3, #6
 80161d0:	f200 80a2 	bhi.w	8016318 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80161d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80161da:	3301      	adds	r3, #1
 80161dc:	b2da      	uxtb	r2, r3
 80161de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80161e4:	e098      	b.n	8016318 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80161e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	db0f      	blt.n	8016210 <tcp_slowtmr+0x1f0>
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80161f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80161fa:	4293      	cmp	r3, r2
 80161fc:	d008      	beq.n	8016210 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80161fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016200:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016204:	b29b      	uxth	r3, r3
 8016206:	3301      	adds	r3, #1
 8016208:	b29b      	uxth	r3, r3
 801620a:	b21a      	sxth	r2, r3
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016212:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016218:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801621c:	429a      	cmp	r2, r3
 801621e:	db7b      	blt.n	8016318 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016222:	f004 fda9 	bl	801ad78 <tcp_rexmit_rto_prepare>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d007      	beq.n	801623c <tcp_slowtmr+0x21c>
 801622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016230:	2b00      	cmp	r3, #0
 8016232:	d171      	bne.n	8016318 <tcp_slowtmr+0x2f8>
 8016234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016238:	2b00      	cmp	r3, #0
 801623a:	d06d      	beq.n	8016318 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801623e:	7d1b      	ldrb	r3, [r3, #20]
 8016240:	2b02      	cmp	r3, #2
 8016242:	d03a      	beq.n	80162ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801624a:	2b0c      	cmp	r3, #12
 801624c:	bf28      	it	cs
 801624e:	230c      	movcs	r3, #12
 8016250:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016254:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016258:	10db      	asrs	r3, r3, #3
 801625a:	b21b      	sxth	r3, r3
 801625c:	461a      	mov	r2, r3
 801625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016260:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016264:	4413      	add	r3, r2
 8016266:	7efa      	ldrb	r2, [r7, #27]
 8016268:	4910      	ldr	r1, [pc, #64]	; (80162ac <tcp_slowtmr+0x28c>)
 801626a:	5c8a      	ldrb	r2, [r1, r2]
 801626c:	4093      	lsls	r3, r2
 801626e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016276:	4293      	cmp	r3, r2
 8016278:	dc1a      	bgt.n	80162b0 <tcp_slowtmr+0x290>
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	b21a      	sxth	r2, r3
 801627e:	e019      	b.n	80162b4 <tcp_slowtmr+0x294>
 8016280:	2001b18c 	.word	0x2001b18c
 8016284:	20014352 	.word	0x20014352
 8016288:	2001b188 	.word	0x2001b188
 801628c:	08027390 	.word	0x08027390
 8016290:	080276d4 	.word	0x080276d4
 8016294:	080273d4 	.word	0x080273d4
 8016298:	08027700 	.word	0x08027700
 801629c:	0802772c 	.word	0x0802772c
 80162a0:	0802775c 	.word	0x0802775c
 80162a4:	08027790 	.word	0x08027790
 80162a8:	08029978 	.word	0x08029978
 80162ac:	08029968 	.word	0x08029968
 80162b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80162ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162bc:	2200      	movs	r2, #0
 80162be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80162c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80162cc:	4293      	cmp	r3, r2
 80162ce:	bf28      	it	cs
 80162d0:	4613      	movcs	r3, r2
 80162d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80162d4:	8a7b      	ldrh	r3, [r7, #18]
 80162d6:	085b      	lsrs	r3, r3, #1
 80162d8:	b29a      	uxth	r2, r3
 80162da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80162e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80162e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162ea:	005b      	lsls	r3, r3, #1
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	429a      	cmp	r2, r3
 80162f0:	d206      	bcs.n	8016300 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80162f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016302:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630c:	2200      	movs	r2, #0
 801630e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016314:	f004 fdaa 	bl	801ae6c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631a:	7d1b      	ldrb	r3, [r3, #20]
 801631c:	2b06      	cmp	r3, #6
 801631e:	d111      	bne.n	8016344 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016322:	8b5b      	ldrh	r3, [r3, #26]
 8016324:	f003 0310 	and.w	r3, r3, #16
 8016328:	2b00      	cmp	r3, #0
 801632a:	d00b      	beq.n	8016344 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801632c:	4b9d      	ldr	r3, [pc, #628]	; (80165a4 <tcp_slowtmr+0x584>)
 801632e:	681a      	ldr	r2, [r3, #0]
 8016330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016332:	6a1b      	ldr	r3, [r3, #32]
 8016334:	1ad3      	subs	r3, r2, r3
 8016336:	2b28      	cmp	r3, #40	; 0x28
 8016338:	d904      	bls.n	8016344 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801633a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801633e:	3301      	adds	r3, #1
 8016340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016346:	7a5b      	ldrb	r3, [r3, #9]
 8016348:	f003 0308 	and.w	r3, r3, #8
 801634c:	2b00      	cmp	r3, #0
 801634e:	d04c      	beq.n	80163ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016352:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016354:	2b04      	cmp	r3, #4
 8016356:	d003      	beq.n	8016360 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801635c:	2b07      	cmp	r3, #7
 801635e:	d144      	bne.n	80163ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016360:	4b90      	ldr	r3, [pc, #576]	; (80165a4 <tcp_slowtmr+0x584>)
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016366:	6a1b      	ldr	r3, [r3, #32]
 8016368:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801636c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016370:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8016374:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8016378:	498b      	ldr	r1, [pc, #556]	; (80165a8 <tcp_slowtmr+0x588>)
 801637a:	fba1 1303 	umull	r1, r3, r1, r3
 801637e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016380:	429a      	cmp	r2, r3
 8016382:	d90a      	bls.n	801639a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016388:	3301      	adds	r3, #1
 801638a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801638e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016392:	3301      	adds	r3, #1
 8016394:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016398:	e027      	b.n	80163ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801639a:	4b82      	ldr	r3, [pc, #520]	; (80165a4 <tcp_slowtmr+0x584>)
 801639c:	681a      	ldr	r2, [r3, #0]
 801639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a0:	6a1b      	ldr	r3, [r3, #32]
 80163a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80163a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80163aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80163b0:	4618      	mov	r0, r3
 80163b2:	4b7e      	ldr	r3, [pc, #504]	; (80165ac <tcp_slowtmr+0x58c>)
 80163b4:	fb03 f300 	mul.w	r3, r3, r0
 80163b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80163ba:	497b      	ldr	r1, [pc, #492]	; (80165a8 <tcp_slowtmr+0x588>)
 80163bc:	fba1 1303 	umull	r1, r3, r1, r3
 80163c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d911      	bls.n	80163ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80163c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80163c8:	f005 f856 	bl	801b478 <tcp_keepalive>
 80163cc:	4603      	mov	r3, r0
 80163ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80163d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d107      	bne.n	80163ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80163da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80163e0:	3301      	adds	r3, #1
 80163e2:	b2da      	uxtb	r2, r3
 80163e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80163ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d011      	beq.n	8016416 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80163f2:	4b6c      	ldr	r3, [pc, #432]	; (80165a4 <tcp_slowtmr+0x584>)
 80163f4:	681a      	ldr	r2, [r3, #0]
 80163f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f8:	6a1b      	ldr	r3, [r3, #32]
 80163fa:	1ad2      	subs	r2, r2, r3
 80163fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016402:	4619      	mov	r1, r3
 8016404:	460b      	mov	r3, r1
 8016406:	005b      	lsls	r3, r3, #1
 8016408:	440b      	add	r3, r1
 801640a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801640c:	429a      	cmp	r2, r3
 801640e:	d302      	bcc.n	8016416 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016412:	f000 fea9 	bl	8017168 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016418:	7d1b      	ldrb	r3, [r3, #20]
 801641a:	2b03      	cmp	r3, #3
 801641c:	d10b      	bne.n	8016436 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801641e:	4b61      	ldr	r3, [pc, #388]	; (80165a4 <tcp_slowtmr+0x584>)
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016424:	6a1b      	ldr	r3, [r3, #32]
 8016426:	1ad3      	subs	r3, r2, r3
 8016428:	2b28      	cmp	r3, #40	; 0x28
 801642a:	d904      	bls.n	8016436 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801642c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016430:	3301      	adds	r3, #1
 8016432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016438:	7d1b      	ldrb	r3, [r3, #20]
 801643a:	2b09      	cmp	r3, #9
 801643c:	d10b      	bne.n	8016456 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801643e:	4b59      	ldr	r3, [pc, #356]	; (80165a4 <tcp_slowtmr+0x584>)
 8016440:	681a      	ldr	r2, [r3, #0]
 8016442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016444:	6a1b      	ldr	r3, [r3, #32]
 8016446:	1ad3      	subs	r3, r2, r3
 8016448:	2bf0      	cmp	r3, #240	; 0xf0
 801644a:	d904      	bls.n	8016456 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801644c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016450:	3301      	adds	r3, #1
 8016452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801645a:	2b00      	cmp	r3, #0
 801645c:	d060      	beq.n	8016520 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016464:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016468:	f000 fcca 	bl	8016e00 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646e:	2b00      	cmp	r3, #0
 8016470:	d010      	beq.n	8016494 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016472:	4b4f      	ldr	r3, [pc, #316]	; (80165b0 <tcp_slowtmr+0x590>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016478:	429a      	cmp	r2, r3
 801647a:	d106      	bne.n	801648a <tcp_slowtmr+0x46a>
 801647c:	4b4d      	ldr	r3, [pc, #308]	; (80165b4 <tcp_slowtmr+0x594>)
 801647e:	f240 526d 	movw	r2, #1389	; 0x56d
 8016482:	494d      	ldr	r1, [pc, #308]	; (80165b8 <tcp_slowtmr+0x598>)
 8016484:	484d      	ldr	r0, [pc, #308]	; (80165bc <tcp_slowtmr+0x59c>)
 8016486:	f00b fb95 	bl	8021bb4 <iprintf>
        prev->next = pcb->next;
 801648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648c:	68da      	ldr	r2, [r3, #12]
 801648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016490:	60da      	str	r2, [r3, #12]
 8016492:	e00f      	b.n	80164b4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016494:	4b46      	ldr	r3, [pc, #280]	; (80165b0 <tcp_slowtmr+0x590>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801649a:	429a      	cmp	r2, r3
 801649c:	d006      	beq.n	80164ac <tcp_slowtmr+0x48c>
 801649e:	4b45      	ldr	r3, [pc, #276]	; (80165b4 <tcp_slowtmr+0x594>)
 80164a0:	f240 5271 	movw	r2, #1393	; 0x571
 80164a4:	4946      	ldr	r1, [pc, #280]	; (80165c0 <tcp_slowtmr+0x5a0>)
 80164a6:	4845      	ldr	r0, [pc, #276]	; (80165bc <tcp_slowtmr+0x59c>)
 80164a8:	f00b fb84 	bl	8021bb4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80164ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	4a3f      	ldr	r2, [pc, #252]	; (80165b0 <tcp_slowtmr+0x590>)
 80164b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80164b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d013      	beq.n	80164e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80164bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80164c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80164c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c8:	3304      	adds	r3, #4
 80164ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164cc:	8ad2      	ldrh	r2, [r2, #22]
 80164ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164d0:	8b09      	ldrh	r1, [r1, #24]
 80164d2:	9102      	str	r1, [sp, #8]
 80164d4:	9201      	str	r2, [sp, #4]
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	462b      	mov	r3, r5
 80164da:	4622      	mov	r2, r4
 80164dc:	4601      	mov	r1, r0
 80164de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80164e0:	f004 ff16 	bl	801b310 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80164e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e6:	691b      	ldr	r3, [r3, #16]
 80164e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80164ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ec:	7d1b      	ldrb	r3, [r3, #20]
 80164ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80164f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80164f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f6:	68db      	ldr	r3, [r3, #12]
 80164f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80164fa:	6838      	ldr	r0, [r7, #0]
 80164fc:	f7fe fed6 	bl	80152ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016500:	4b30      	ldr	r3, [pc, #192]	; (80165c4 <tcp_slowtmr+0x5a4>)
 8016502:	2200      	movs	r2, #0
 8016504:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d004      	beq.n	8016516 <tcp_slowtmr+0x4f6>
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	f06f 010c 	mvn.w	r1, #12
 8016512:	68b8      	ldr	r0, [r7, #8]
 8016514:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016516:	4b2b      	ldr	r3, [pc, #172]	; (80165c4 <tcp_slowtmr+0x5a4>)
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d037      	beq.n	801658e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801651e:	e590      	b.n	8016042 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016522:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652c:	7f1b      	ldrb	r3, [r3, #28]
 801652e:	3301      	adds	r3, #1
 8016530:	b2da      	uxtb	r2, r3
 8016532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016534:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016538:	7f1a      	ldrb	r2, [r3, #28]
 801653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653c:	7f5b      	ldrb	r3, [r3, #29]
 801653e:	429a      	cmp	r2, r3
 8016540:	d325      	bcc.n	801658e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016544:	2200      	movs	r2, #0
 8016546:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016548:	4b1e      	ldr	r3, [pc, #120]	; (80165c4 <tcp_slowtmr+0x5a4>)
 801654a:	2200      	movs	r2, #0
 801654c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016554:	2b00      	cmp	r3, #0
 8016556:	d00b      	beq.n	8016570 <tcp_slowtmr+0x550>
 8016558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801655e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016560:	6912      	ldr	r2, [r2, #16]
 8016562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016564:	4610      	mov	r0, r2
 8016566:	4798      	blx	r3
 8016568:	4603      	mov	r3, r0
 801656a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801656e:	e002      	b.n	8016576 <tcp_slowtmr+0x556>
 8016570:	2300      	movs	r3, #0
 8016572:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016576:	4b13      	ldr	r3, [pc, #76]	; (80165c4 <tcp_slowtmr+0x5a4>)
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d000      	beq.n	8016580 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801657e:	e560      	b.n	8016042 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016580:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016584:	2b00      	cmp	r3, #0
 8016586:	d102      	bne.n	801658e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801658a:	f004 f901 	bl	801a790 <tcp_output>
  while (pcb != NULL) {
 801658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016590:	2b00      	cmp	r3, #0
 8016592:	f47f ad5c 	bne.w	801604e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016596:	2300      	movs	r3, #0
 8016598:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801659a:	4b0b      	ldr	r3, [pc, #44]	; (80165c8 <tcp_slowtmr+0x5a8>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80165a0:	e067      	b.n	8016672 <tcp_slowtmr+0x652>
 80165a2:	bf00      	nop
 80165a4:	2001b18c 	.word	0x2001b18c
 80165a8:	10624dd3 	.word	0x10624dd3
 80165ac:	000124f8 	.word	0x000124f8
 80165b0:	2001b188 	.word	0x2001b188
 80165b4:	08027390 	.word	0x08027390
 80165b8:	080277c8 	.word	0x080277c8
 80165bc:	080273d4 	.word	0x080273d4
 80165c0:	080277f4 	.word	0x080277f4
 80165c4:	2001b184 	.word	0x2001b184
 80165c8:	2001b198 	.word	0x2001b198
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80165cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ce:	7d1b      	ldrb	r3, [r3, #20]
 80165d0:	2b0a      	cmp	r3, #10
 80165d2:	d006      	beq.n	80165e2 <tcp_slowtmr+0x5c2>
 80165d4:	4b2b      	ldr	r3, [pc, #172]	; (8016684 <tcp_slowtmr+0x664>)
 80165d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80165da:	492b      	ldr	r1, [pc, #172]	; (8016688 <tcp_slowtmr+0x668>)
 80165dc:	482b      	ldr	r0, [pc, #172]	; (801668c <tcp_slowtmr+0x66c>)
 80165de:	f00b fae9 	bl	8021bb4 <iprintf>
    pcb_remove = 0;
 80165e2:	2300      	movs	r3, #0
 80165e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80165e8:	4b29      	ldr	r3, [pc, #164]	; (8016690 <tcp_slowtmr+0x670>)
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ee:	6a1b      	ldr	r3, [r3, #32]
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	2bf0      	cmp	r3, #240	; 0xf0
 80165f4:	d904      	bls.n	8016600 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80165f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165fa:	3301      	adds	r3, #1
 80165fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016604:	2b00      	cmp	r3, #0
 8016606:	d02f      	beq.n	8016668 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801660a:	f000 fbf9 	bl	8016e00 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016610:	2b00      	cmp	r3, #0
 8016612:	d010      	beq.n	8016636 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016614:	4b1f      	ldr	r3, [pc, #124]	; (8016694 <tcp_slowtmr+0x674>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801661a:	429a      	cmp	r2, r3
 801661c:	d106      	bne.n	801662c <tcp_slowtmr+0x60c>
 801661e:	4b19      	ldr	r3, [pc, #100]	; (8016684 <tcp_slowtmr+0x664>)
 8016620:	f240 52af 	movw	r2, #1455	; 0x5af
 8016624:	491c      	ldr	r1, [pc, #112]	; (8016698 <tcp_slowtmr+0x678>)
 8016626:	4819      	ldr	r0, [pc, #100]	; (801668c <tcp_slowtmr+0x66c>)
 8016628:	f00b fac4 	bl	8021bb4 <iprintf>
        prev->next = pcb->next;
 801662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662e:	68da      	ldr	r2, [r3, #12]
 8016630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016632:	60da      	str	r2, [r3, #12]
 8016634:	e00f      	b.n	8016656 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016636:	4b17      	ldr	r3, [pc, #92]	; (8016694 <tcp_slowtmr+0x674>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801663c:	429a      	cmp	r2, r3
 801663e:	d006      	beq.n	801664e <tcp_slowtmr+0x62e>
 8016640:	4b10      	ldr	r3, [pc, #64]	; (8016684 <tcp_slowtmr+0x664>)
 8016642:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016646:	4915      	ldr	r1, [pc, #84]	; (801669c <tcp_slowtmr+0x67c>)
 8016648:	4810      	ldr	r0, [pc, #64]	; (801668c <tcp_slowtmr+0x66c>)
 801664a:	f00b fab3 	bl	8021bb4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	4a10      	ldr	r2, [pc, #64]	; (8016694 <tcp_slowtmr+0x674>)
 8016654:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016658:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665c:	68db      	ldr	r3, [r3, #12]
 801665e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016660:	69f8      	ldr	r0, [r7, #28]
 8016662:	f7fe fe23 	bl	80152ac <tcp_free>
 8016666:	e004      	b.n	8016672 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801666a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801666e:	68db      	ldr	r3, [r3, #12]
 8016670:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016674:	2b00      	cmp	r3, #0
 8016676:	d1a9      	bne.n	80165cc <tcp_slowtmr+0x5ac>
    }
  }
}
 8016678:	bf00      	nop
 801667a:	bf00      	nop
 801667c:	3730      	adds	r7, #48	; 0x30
 801667e:	46bd      	mov	sp, r7
 8016680:	bdb0      	pop	{r4, r5, r7, pc}
 8016682:	bf00      	nop
 8016684:	08027390 	.word	0x08027390
 8016688:	08027820 	.word	0x08027820
 801668c:	080273d4 	.word	0x080273d4
 8016690:	2001b18c 	.word	0x2001b18c
 8016694:	2001b198 	.word	0x2001b198
 8016698:	08027850 	.word	0x08027850
 801669c:	08027878 	.word	0x08027878

080166a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b082      	sub	sp, #8
 80166a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80166a6:	4b2d      	ldr	r3, [pc, #180]	; (801675c <tcp_fasttmr+0xbc>)
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	3301      	adds	r3, #1
 80166ac:	b2da      	uxtb	r2, r3
 80166ae:	4b2b      	ldr	r3, [pc, #172]	; (801675c <tcp_fasttmr+0xbc>)
 80166b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80166b2:	4b2b      	ldr	r3, [pc, #172]	; (8016760 <tcp_fasttmr+0xc0>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80166b8:	e048      	b.n	801674c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	7f9a      	ldrb	r2, [r3, #30]
 80166be:	4b27      	ldr	r3, [pc, #156]	; (801675c <tcp_fasttmr+0xbc>)
 80166c0:	781b      	ldrb	r3, [r3, #0]
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d03f      	beq.n	8016746 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80166c6:	4b25      	ldr	r3, [pc, #148]	; (801675c <tcp_fasttmr+0xbc>)
 80166c8:	781a      	ldrb	r2, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	8b5b      	ldrh	r3, [r3, #26]
 80166d2:	f003 0301 	and.w	r3, r3, #1
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d010      	beq.n	80166fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	8b5b      	ldrh	r3, [r3, #26]
 80166de:	f043 0302 	orr.w	r3, r3, #2
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f004 f851 	bl	801a790 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	8b5b      	ldrh	r3, [r3, #26]
 80166f2:	f023 0303 	bic.w	r3, r3, #3
 80166f6:	b29a      	uxth	r2, r3
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	8b5b      	ldrh	r3, [r3, #26]
 8016700:	f003 0308 	and.w	r3, r3, #8
 8016704:	2b00      	cmp	r3, #0
 8016706:	d009      	beq.n	801671c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	8b5b      	ldrh	r3, [r3, #26]
 801670c:	f023 0308 	bic.w	r3, r3, #8
 8016710:	b29a      	uxth	r2, r3
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f7fe ff5c 	bl	80155d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	68db      	ldr	r3, [r3, #12]
 8016720:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016726:	2b00      	cmp	r3, #0
 8016728:	d00a      	beq.n	8016740 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801672a:	4b0e      	ldr	r3, [pc, #56]	; (8016764 <tcp_fasttmr+0xc4>)
 801672c:	2200      	movs	r2, #0
 801672e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f000 f819 	bl	8016768 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016736:	4b0b      	ldr	r3, [pc, #44]	; (8016764 <tcp_fasttmr+0xc4>)
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d000      	beq.n	8016740 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801673e:	e7b8      	b.n	80166b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	607b      	str	r3, [r7, #4]
 8016744:	e002      	b.n	801674c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d1b3      	bne.n	80166ba <tcp_fasttmr+0x1a>
    }
  }
}
 8016752:	bf00      	nop
 8016754:	bf00      	nop
 8016756:	3708      	adds	r7, #8
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}
 801675c:	20014352 	.word	0x20014352
 8016760:	2001b188 	.word	0x2001b188
 8016764:	2001b184 	.word	0x2001b184

08016768 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016768:	b590      	push	{r4, r7, lr}
 801676a:	b085      	sub	sp, #20
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d109      	bne.n	801678a <tcp_process_refused_data+0x22>
 8016776:	4b37      	ldr	r3, [pc, #220]	; (8016854 <tcp_process_refused_data+0xec>)
 8016778:	f240 6209 	movw	r2, #1545	; 0x609
 801677c:	4936      	ldr	r1, [pc, #216]	; (8016858 <tcp_process_refused_data+0xf0>)
 801677e:	4837      	ldr	r0, [pc, #220]	; (801685c <tcp_process_refused_data+0xf4>)
 8016780:	f00b fa18 	bl	8021bb4 <iprintf>
 8016784:	f06f 030f 	mvn.w	r3, #15
 8016788:	e060      	b.n	801684c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801678e:	7b5b      	ldrb	r3, [r3, #13]
 8016790:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016796:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2200      	movs	r2, #0
 801679c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d00b      	beq.n	80167c0 <tcp_process_refused_data+0x58>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6918      	ldr	r0, [r3, #16]
 80167b2:	2300      	movs	r3, #0
 80167b4:	68ba      	ldr	r2, [r7, #8]
 80167b6:	6879      	ldr	r1, [r7, #4]
 80167b8:	47a0      	blx	r4
 80167ba:	4603      	mov	r3, r0
 80167bc:	73fb      	strb	r3, [r7, #15]
 80167be:	e007      	b.n	80167d0 <tcp_process_refused_data+0x68>
 80167c0:	2300      	movs	r3, #0
 80167c2:	68ba      	ldr	r2, [r7, #8]
 80167c4:	6879      	ldr	r1, [r7, #4]
 80167c6:	2000      	movs	r0, #0
 80167c8:	f000 f8a4 	bl	8016914 <tcp_recv_null>
 80167cc:	4603      	mov	r3, r0
 80167ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80167d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d12a      	bne.n	801682e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80167d8:	7bbb      	ldrb	r3, [r7, #14]
 80167da:	f003 0320 	and.w	r3, r3, #32
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d033      	beq.n	801684a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80167ea:	d005      	beq.n	80167f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167f0:	3301      	adds	r3, #1
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d00b      	beq.n	801681a <tcp_process_refused_data+0xb2>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6918      	ldr	r0, [r3, #16]
 801680c:	2300      	movs	r3, #0
 801680e:	2200      	movs	r2, #0
 8016810:	6879      	ldr	r1, [r7, #4]
 8016812:	47a0      	blx	r4
 8016814:	4603      	mov	r3, r0
 8016816:	73fb      	strb	r3, [r7, #15]
 8016818:	e001      	b.n	801681e <tcp_process_refused_data+0xb6>
 801681a:	2300      	movs	r3, #0
 801681c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016822:	f113 0f0d 	cmn.w	r3, #13
 8016826:	d110      	bne.n	801684a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016828:	f06f 030c 	mvn.w	r3, #12
 801682c:	e00e      	b.n	801684c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801682e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016832:	f113 0f0d 	cmn.w	r3, #13
 8016836:	d102      	bne.n	801683e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016838:	f06f 030c 	mvn.w	r3, #12
 801683c:	e006      	b.n	801684c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	68ba      	ldr	r2, [r7, #8]
 8016842:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016844:	f06f 0304 	mvn.w	r3, #4
 8016848:	e000      	b.n	801684c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801684a:	2300      	movs	r3, #0
}
 801684c:	4618      	mov	r0, r3
 801684e:	3714      	adds	r7, #20
 8016850:	46bd      	mov	sp, r7
 8016852:	bd90      	pop	{r4, r7, pc}
 8016854:	08027390 	.word	0x08027390
 8016858:	080278a0 	.word	0x080278a0
 801685c:	080273d4 	.word	0x080273d4

08016860 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016868:	e007      	b.n	801687a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f000 f80a 	bl	801688a <tcp_seg_free>
    seg = next;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d1f4      	bne.n	801686a <tcp_segs_free+0xa>
  }
}
 8016880:	bf00      	nop
 8016882:	bf00      	nop
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801688a:	b580      	push	{r7, lr}
 801688c:	b082      	sub	sp, #8
 801688e:	af00      	add	r7, sp, #0
 8016890:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d00c      	beq.n	80168b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d004      	beq.n	80168aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7fe f8c9 	bl	8014a3c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80168aa:	6879      	ldr	r1, [r7, #4]
 80168ac:	2003      	movs	r0, #3
 80168ae:	f7fd f9e3 	bl	8013c78 <memp_free>
  }
}
 80168b2:	bf00      	nop
 80168b4:	3708      	adds	r7, #8
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
	...

080168bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b084      	sub	sp, #16
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d106      	bne.n	80168d8 <tcp_seg_copy+0x1c>
 80168ca:	4b0f      	ldr	r3, [pc, #60]	; (8016908 <tcp_seg_copy+0x4c>)
 80168cc:	f240 6282 	movw	r2, #1666	; 0x682
 80168d0:	490e      	ldr	r1, [pc, #56]	; (801690c <tcp_seg_copy+0x50>)
 80168d2:	480f      	ldr	r0, [pc, #60]	; (8016910 <tcp_seg_copy+0x54>)
 80168d4:	f00b f96e 	bl	8021bb4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80168d8:	2003      	movs	r0, #3
 80168da:	f7fd f97b 	bl	8013bd4 <memp_malloc>
 80168de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d101      	bne.n	80168ea <tcp_seg_copy+0x2e>
    return NULL;
 80168e6:	2300      	movs	r3, #0
 80168e8:	e00a      	b.n	8016900 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80168ea:	2214      	movs	r2, #20
 80168ec:	6879      	ldr	r1, [r7, #4]
 80168ee:	68f8      	ldr	r0, [r7, #12]
 80168f0:	f00a fc1c 	bl	802112c <memcpy>
  pbuf_ref(cseg->p);
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7fe f945 	bl	8014b88 <pbuf_ref>
  return cseg;
 80168fe:	68fb      	ldr	r3, [r7, #12]
}
 8016900:	4618      	mov	r0, r3
 8016902:	3710      	adds	r7, #16
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	08027390 	.word	0x08027390
 801690c:	080278e4 	.word	0x080278e4
 8016910:	080273d4 	.word	0x080273d4

08016914 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	60f8      	str	r0, [r7, #12]
 801691c:	60b9      	str	r1, [r7, #8]
 801691e:	607a      	str	r2, [r7, #4]
 8016920:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d109      	bne.n	801693c <tcp_recv_null+0x28>
 8016928:	4b12      	ldr	r3, [pc, #72]	; (8016974 <tcp_recv_null+0x60>)
 801692a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801692e:	4912      	ldr	r1, [pc, #72]	; (8016978 <tcp_recv_null+0x64>)
 8016930:	4812      	ldr	r0, [pc, #72]	; (801697c <tcp_recv_null+0x68>)
 8016932:	f00b f93f 	bl	8021bb4 <iprintf>
 8016936:	f06f 030f 	mvn.w	r3, #15
 801693a:	e016      	b.n	801696a <tcp_recv_null+0x56>

  if (p != NULL) {
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d009      	beq.n	8016956 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	891b      	ldrh	r3, [r3, #8]
 8016946:	4619      	mov	r1, r3
 8016948:	68b8      	ldr	r0, [r7, #8]
 801694a:	f7ff f9bb 	bl	8015cc4 <tcp_recved>
    pbuf_free(p);
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f7fe f874 	bl	8014a3c <pbuf_free>
 8016954:	e008      	b.n	8016968 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d104      	bne.n	8016968 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801695e:	68b8      	ldr	r0, [r7, #8]
 8016960:	f7fe fea2 	bl	80156a8 <tcp_close>
 8016964:	4603      	mov	r3, r0
 8016966:	e000      	b.n	801696a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	4618      	mov	r0, r3
 801696c:	3710      	adds	r7, #16
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	08027390 	.word	0x08027390
 8016978:	08027900 	.word	0x08027900
 801697c:	080273d4 	.word	0x080273d4

08016980 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b086      	sub	sp, #24
 8016984:	af00      	add	r7, sp, #0
 8016986:	4603      	mov	r3, r0
 8016988:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801698a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801698e:	2b00      	cmp	r3, #0
 8016990:	db01      	blt.n	8016996 <tcp_kill_prio+0x16>
 8016992:	79fb      	ldrb	r3, [r7, #7]
 8016994:	e000      	b.n	8016998 <tcp_kill_prio+0x18>
 8016996:	237f      	movs	r3, #127	; 0x7f
 8016998:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801699a:	7afb      	ldrb	r3, [r7, #11]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d034      	beq.n	8016a0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80169a0:	7afb      	ldrb	r3, [r7, #11]
 80169a2:	3b01      	subs	r3, #1
 80169a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80169a6:	2300      	movs	r3, #0
 80169a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80169aa:	2300      	movs	r3, #0
 80169ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80169ae:	4b19      	ldr	r3, [pc, #100]	; (8016a14 <tcp_kill_prio+0x94>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	617b      	str	r3, [r7, #20]
 80169b4:	e01f      	b.n	80169f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	7d5b      	ldrb	r3, [r3, #21]
 80169ba:	7afa      	ldrb	r2, [r7, #11]
 80169bc:	429a      	cmp	r2, r3
 80169be:	d80c      	bhi.n	80169da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80169c4:	7afa      	ldrb	r2, [r7, #11]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d112      	bne.n	80169f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80169ca:	4b13      	ldr	r3, [pc, #76]	; (8016a18 <tcp_kill_prio+0x98>)
 80169cc:	681a      	ldr	r2, [r3, #0]
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	6a1b      	ldr	r3, [r3, #32]
 80169d2:	1ad3      	subs	r3, r2, r3
 80169d4:	68fa      	ldr	r2, [r7, #12]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d80a      	bhi.n	80169f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80169da:	4b0f      	ldr	r3, [pc, #60]	; (8016a18 <tcp_kill_prio+0x98>)
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	6a1b      	ldr	r3, [r3, #32]
 80169e2:	1ad3      	subs	r3, r2, r3
 80169e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80169e6:	697b      	ldr	r3, [r7, #20]
 80169e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	7d5b      	ldrb	r3, [r3, #21]
 80169ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	68db      	ldr	r3, [r3, #12]
 80169f4:	617b      	str	r3, [r7, #20]
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d1dc      	bne.n	80169b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d004      	beq.n	8016a0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016a02:	6938      	ldr	r0, [r7, #16]
 8016a04:	f7fe ff96 	bl	8015934 <tcp_abort>
 8016a08:	e000      	b.n	8016a0c <tcp_kill_prio+0x8c>
    return;
 8016a0a:	bf00      	nop
  }
}
 8016a0c:	3718      	adds	r7, #24
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	2001b188 	.word	0x2001b188
 8016a18:	2001b18c 	.word	0x2001b18c

08016a1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b086      	sub	sp, #24
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	4603      	mov	r3, r0
 8016a24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016a26:	79fb      	ldrb	r3, [r7, #7]
 8016a28:	2b08      	cmp	r3, #8
 8016a2a:	d009      	beq.n	8016a40 <tcp_kill_state+0x24>
 8016a2c:	79fb      	ldrb	r3, [r7, #7]
 8016a2e:	2b09      	cmp	r3, #9
 8016a30:	d006      	beq.n	8016a40 <tcp_kill_state+0x24>
 8016a32:	4b1a      	ldr	r3, [pc, #104]	; (8016a9c <tcp_kill_state+0x80>)
 8016a34:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016a38:	4919      	ldr	r1, [pc, #100]	; (8016aa0 <tcp_kill_state+0x84>)
 8016a3a:	481a      	ldr	r0, [pc, #104]	; (8016aa4 <tcp_kill_state+0x88>)
 8016a3c:	f00b f8ba 	bl	8021bb4 <iprintf>

  inactivity = 0;
 8016a40:	2300      	movs	r3, #0
 8016a42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016a44:	2300      	movs	r3, #0
 8016a46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a48:	4b17      	ldr	r3, [pc, #92]	; (8016aa8 <tcp_kill_state+0x8c>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	617b      	str	r3, [r7, #20]
 8016a4e:	e017      	b.n	8016a80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	7d1b      	ldrb	r3, [r3, #20]
 8016a54:	79fa      	ldrb	r2, [r7, #7]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d10f      	bne.n	8016a7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016a5a:	4b14      	ldr	r3, [pc, #80]	; (8016aac <tcp_kill_state+0x90>)
 8016a5c:	681a      	ldr	r2, [r3, #0]
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	6a1b      	ldr	r3, [r3, #32]
 8016a62:	1ad3      	subs	r3, r2, r3
 8016a64:	68fa      	ldr	r2, [r7, #12]
 8016a66:	429a      	cmp	r2, r3
 8016a68:	d807      	bhi.n	8016a7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016a6a:	4b10      	ldr	r3, [pc, #64]	; (8016aac <tcp_kill_state+0x90>)
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	6a1b      	ldr	r3, [r3, #32]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	68db      	ldr	r3, [r3, #12]
 8016a7e:	617b      	str	r3, [r7, #20]
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d1e4      	bne.n	8016a50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d003      	beq.n	8016a94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	6938      	ldr	r0, [r7, #16]
 8016a90:	f7fe fe92 	bl	80157b8 <tcp_abandon>
  }
}
 8016a94:	bf00      	nop
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	08027390 	.word	0x08027390
 8016aa0:	0802791c 	.word	0x0802791c
 8016aa4:	080273d4 	.word	0x080273d4
 8016aa8:	2001b188 	.word	0x2001b188
 8016aac:	2001b18c 	.word	0x2001b18c

08016ab0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016aba:	2300      	movs	r3, #0
 8016abc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016abe:	4b12      	ldr	r3, [pc, #72]	; (8016b08 <tcp_kill_timewait+0x58>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	60fb      	str	r3, [r7, #12]
 8016ac4:	e012      	b.n	8016aec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016ac6:	4b11      	ldr	r3, [pc, #68]	; (8016b0c <tcp_kill_timewait+0x5c>)
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	6a1b      	ldr	r3, [r3, #32]
 8016ace:	1ad3      	subs	r3, r2, r3
 8016ad0:	687a      	ldr	r2, [r7, #4]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d807      	bhi.n	8016ae6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016ad6:	4b0d      	ldr	r3, [pc, #52]	; (8016b0c <tcp_kill_timewait+0x5c>)
 8016ad8:	681a      	ldr	r2, [r3, #0]
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	6a1b      	ldr	r3, [r3, #32]
 8016ade:	1ad3      	subs	r3, r2, r3
 8016ae0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	68db      	ldr	r3, [r3, #12]
 8016aea:	60fb      	str	r3, [r7, #12]
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d1e9      	bne.n	8016ac6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d002      	beq.n	8016afe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016af8:	68b8      	ldr	r0, [r7, #8]
 8016afa:	f7fe ff1b 	bl	8015934 <tcp_abort>
  }
}
 8016afe:	bf00      	nop
 8016b00:	3710      	adds	r7, #16
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	bf00      	nop
 8016b08:	2001b198 	.word	0x2001b198
 8016b0c:	2001b18c 	.word	0x2001b18c

08016b10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016b16:	4b10      	ldr	r3, [pc, #64]	; (8016b58 <tcp_handle_closepend+0x48>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016b1c:	e014      	b.n	8016b48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	8b5b      	ldrh	r3, [r3, #26]
 8016b28:	f003 0308 	and.w	r3, r3, #8
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d009      	beq.n	8016b44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	8b5b      	ldrh	r3, [r3, #26]
 8016b34:	f023 0308 	bic.w	r3, r3, #8
 8016b38:	b29a      	uxth	r2, r3
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f7fe fd48 	bl	80155d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d1e7      	bne.n	8016b1e <tcp_handle_closepend+0xe>
  }
}
 8016b4e:	bf00      	nop
 8016b50:	bf00      	nop
 8016b52:	3708      	adds	r7, #8
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	2001b188 	.word	0x2001b188

08016b5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	4603      	mov	r3, r0
 8016b64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016b66:	2001      	movs	r0, #1
 8016b68:	f7fd f834 	bl	8013bd4 <memp_malloc>
 8016b6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d126      	bne.n	8016bc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016b74:	f7ff ffcc 	bl	8016b10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016b78:	f7ff ff9a 	bl	8016ab0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016b7c:	2001      	movs	r0, #1
 8016b7e:	f7fd f829 	bl	8013bd4 <memp_malloc>
 8016b82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d11b      	bne.n	8016bc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016b8a:	2009      	movs	r0, #9
 8016b8c:	f7ff ff46 	bl	8016a1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016b90:	2001      	movs	r0, #1
 8016b92:	f7fd f81f 	bl	8013bd4 <memp_malloc>
 8016b96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d111      	bne.n	8016bc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016b9e:	2008      	movs	r0, #8
 8016ba0:	f7ff ff3c 	bl	8016a1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016ba4:	2001      	movs	r0, #1
 8016ba6:	f7fd f815 	bl	8013bd4 <memp_malloc>
 8016baa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d107      	bne.n	8016bc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016bb2:	79fb      	ldrb	r3, [r7, #7]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7ff fee3 	bl	8016980 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016bba:	2001      	movs	r0, #1
 8016bbc:	f7fd f80a 	bl	8013bd4 <memp_malloc>
 8016bc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d03f      	beq.n	8016c48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016bc8:	229c      	movs	r2, #156	; 0x9c
 8016bca:	2100      	movs	r1, #0
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	f00a fad5 	bl	802117c <memset>
    pcb->prio = prio;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	79fa      	ldrb	r2, [r7, #7]
 8016bd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016bde:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	22ff      	movs	r2, #255	; 0xff
 8016bf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016bfe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	2206      	movs	r2, #6
 8016c04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2206      	movs	r2, #6
 8016c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c14:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	2201      	movs	r2, #1
 8016c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016c1e:	4b0d      	ldr	r3, [pc, #52]	; (8016c54 <tcp_alloc+0xf8>)
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016c26:	4b0c      	ldr	r3, [pc, #48]	; (8016c58 <tcp_alloc+0xfc>)
 8016c28:	781a      	ldrb	r2, [r3, #0]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016c34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	4a08      	ldr	r2, [pc, #32]	; (8016c5c <tcp_alloc+0x100>)
 8016c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	4a07      	ldr	r2, [pc, #28]	; (8016c60 <tcp_alloc+0x104>)
 8016c44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016c48:	68fb      	ldr	r3, [r7, #12]
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3710      	adds	r7, #16
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	2001b18c 	.word	0x2001b18c
 8016c58:	20014352 	.word	0x20014352
 8016c5c:	08016915 	.word	0x08016915
 8016c60:	006ddd00 	.word	0x006ddd00

08016c64 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b084      	sub	sp, #16
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016c6e:	2040      	movs	r0, #64	; 0x40
 8016c70:	f7ff ff74 	bl	8016b5c <tcp_alloc>
 8016c74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016c76:	68fb      	ldr	r3, [r7, #12]
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3710      	adds	r7, #16
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016c80:	b480      	push	{r7}
 8016c82:	b083      	sub	sp, #12
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d002      	beq.n	8016c96 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	683a      	ldr	r2, [r7, #0]
 8016c94:	611a      	str	r2, [r3, #16]
  }
}
 8016c96:	bf00      	nop
 8016c98:	370c      	adds	r7, #12
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca0:	4770      	bx	lr
	...

08016ca4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00e      	beq.n	8016cd2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	7d1b      	ldrb	r3, [r3, #20]
 8016cb8:	2b01      	cmp	r3, #1
 8016cba:	d106      	bne.n	8016cca <tcp_recv+0x26>
 8016cbc:	4b07      	ldr	r3, [pc, #28]	; (8016cdc <tcp_recv+0x38>)
 8016cbe:	f240 72df 	movw	r2, #2015	; 0x7df
 8016cc2:	4907      	ldr	r1, [pc, #28]	; (8016ce0 <tcp_recv+0x3c>)
 8016cc4:	4807      	ldr	r0, [pc, #28]	; (8016ce4 <tcp_recv+0x40>)
 8016cc6:	f00a ff75 	bl	8021bb4 <iprintf>
    pcb->recv = recv;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	683a      	ldr	r2, [r7, #0]
 8016cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8016cd2:	bf00      	nop
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	08027390 	.word	0x08027390
 8016ce0:	0802792c 	.word	0x0802792c
 8016ce4:	080273d4 	.word	0x080273d4

08016ce8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
 8016cf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d00e      	beq.n	8016d16 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	7d1b      	ldrb	r3, [r3, #20]
 8016cfc:	2b01      	cmp	r3, #1
 8016cfe:	d106      	bne.n	8016d0e <tcp_sent+0x26>
 8016d00:	4b07      	ldr	r3, [pc, #28]	; (8016d20 <tcp_sent+0x38>)
 8016d02:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8016d06:	4907      	ldr	r1, [pc, #28]	; (8016d24 <tcp_sent+0x3c>)
 8016d08:	4807      	ldr	r0, [pc, #28]	; (8016d28 <tcp_sent+0x40>)
 8016d0a:	f00a ff53 	bl	8021bb4 <iprintf>
    pcb->sent = sent;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	683a      	ldr	r2, [r7, #0]
 8016d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8016d16:	bf00      	nop
 8016d18:	3708      	adds	r7, #8
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	bd80      	pop	{r7, pc}
 8016d1e:	bf00      	nop
 8016d20:	08027390 	.word	0x08027390
 8016d24:	08027954 	.word	0x08027954
 8016d28:	080273d4 	.word	0x080273d4

08016d2c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d00e      	beq.n	8016d5a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	7d1b      	ldrb	r3, [r3, #20]
 8016d40:	2b01      	cmp	r3, #1
 8016d42:	d106      	bne.n	8016d52 <tcp_err+0x26>
 8016d44:	4b07      	ldr	r3, [pc, #28]	; (8016d64 <tcp_err+0x38>)
 8016d46:	f640 020d 	movw	r2, #2061	; 0x80d
 8016d4a:	4907      	ldr	r1, [pc, #28]	; (8016d68 <tcp_err+0x3c>)
 8016d4c:	4807      	ldr	r0, [pc, #28]	; (8016d6c <tcp_err+0x40>)
 8016d4e:	f00a ff31 	bl	8021bb4 <iprintf>
    pcb->errf = err;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	683a      	ldr	r2, [r7, #0]
 8016d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016d5a:	bf00      	nop
 8016d5c:	3708      	adds	r7, #8
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	08027390 	.word	0x08027390
 8016d68:	0802797c 	.word	0x0802797c
 8016d6c:	080273d4 	.word	0x080273d4

08016d70 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016d70:	b480      	push	{r7}
 8016d72:	b085      	sub	sp, #20
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d008      	beq.n	8016d92 <tcp_accept+0x22>
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	7d1b      	ldrb	r3, [r3, #20]
 8016d84:	2b01      	cmp	r3, #1
 8016d86:	d104      	bne.n	8016d92 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	683a      	ldr	r2, [r7, #0]
 8016d90:	619a      	str	r2, [r3, #24]
  }
}
 8016d92:	bf00      	nop
 8016d94:	3714      	adds	r7, #20
 8016d96:	46bd      	mov	sp, r7
 8016d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9c:	4770      	bx	lr
	...

08016da0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b084      	sub	sp, #16
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	60f8      	str	r0, [r7, #12]
 8016da8:	60b9      	str	r1, [r7, #8]
 8016daa:	4613      	mov	r3, r2
 8016dac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d107      	bne.n	8016dc4 <tcp_poll+0x24>
 8016db4:	4b0e      	ldr	r3, [pc, #56]	; (8016df0 <tcp_poll+0x50>)
 8016db6:	f640 023d 	movw	r2, #2109	; 0x83d
 8016dba:	490e      	ldr	r1, [pc, #56]	; (8016df4 <tcp_poll+0x54>)
 8016dbc:	480e      	ldr	r0, [pc, #56]	; (8016df8 <tcp_poll+0x58>)
 8016dbe:	f00a fef9 	bl	8021bb4 <iprintf>
 8016dc2:	e011      	b.n	8016de8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	7d1b      	ldrb	r3, [r3, #20]
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d106      	bne.n	8016dda <tcp_poll+0x3a>
 8016dcc:	4b08      	ldr	r3, [pc, #32]	; (8016df0 <tcp_poll+0x50>)
 8016dce:	f640 023e 	movw	r2, #2110	; 0x83e
 8016dd2:	490a      	ldr	r1, [pc, #40]	; (8016dfc <tcp_poll+0x5c>)
 8016dd4:	4808      	ldr	r0, [pc, #32]	; (8016df8 <tcp_poll+0x58>)
 8016dd6:	f00a feed 	bl	8021bb4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	68ba      	ldr	r2, [r7, #8]
 8016dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	79fa      	ldrb	r2, [r7, #7]
 8016de6:	775a      	strb	r2, [r3, #29]
}
 8016de8:	3710      	adds	r7, #16
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	08027390 	.word	0x08027390
 8016df4:	080279a4 	.word	0x080279a4
 8016df8:	080273d4 	.word	0x080273d4
 8016dfc:	080279bc 	.word	0x080279bc

08016e00 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d107      	bne.n	8016e1e <tcp_pcb_purge+0x1e>
 8016e0e:	4b21      	ldr	r3, [pc, #132]	; (8016e94 <tcp_pcb_purge+0x94>)
 8016e10:	f640 0251 	movw	r2, #2129	; 0x851
 8016e14:	4920      	ldr	r1, [pc, #128]	; (8016e98 <tcp_pcb_purge+0x98>)
 8016e16:	4821      	ldr	r0, [pc, #132]	; (8016e9c <tcp_pcb_purge+0x9c>)
 8016e18:	f00a fecc 	bl	8021bb4 <iprintf>
 8016e1c:	e037      	b.n	8016e8e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	7d1b      	ldrb	r3, [r3, #20]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d033      	beq.n	8016e8e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016e2a:	2b0a      	cmp	r3, #10
 8016e2c:	d02f      	beq.n	8016e8e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d02b      	beq.n	8016e8e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d007      	beq.n	8016e4e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7fd fdfa 	bl	8014a3c <pbuf_free>
      pcb->refused_data = NULL;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d002      	beq.n	8016e5c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f000 f986 	bl	8017168 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7ff fcf9 	bl	8016860 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7ff fcf4 	bl	8016860 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2200      	movs	r2, #0
 8016e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016e8e:	3708      	adds	r7, #8
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	08027390 	.word	0x08027390
 8016e98:	080279dc 	.word	0x080279dc
 8016e9c:	080273d4 	.word	0x080273d4

08016ea0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d106      	bne.n	8016ebe <tcp_pcb_remove+0x1e>
 8016eb0:	4b3e      	ldr	r3, [pc, #248]	; (8016fac <tcp_pcb_remove+0x10c>)
 8016eb2:	f640 0283 	movw	r2, #2179	; 0x883
 8016eb6:	493e      	ldr	r1, [pc, #248]	; (8016fb0 <tcp_pcb_remove+0x110>)
 8016eb8:	483e      	ldr	r0, [pc, #248]	; (8016fb4 <tcp_pcb_remove+0x114>)
 8016eba:	f00a fe7b 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d106      	bne.n	8016ed2 <tcp_pcb_remove+0x32>
 8016ec4:	4b39      	ldr	r3, [pc, #228]	; (8016fac <tcp_pcb_remove+0x10c>)
 8016ec6:	f640 0284 	movw	r2, #2180	; 0x884
 8016eca:	493b      	ldr	r1, [pc, #236]	; (8016fb8 <tcp_pcb_remove+0x118>)
 8016ecc:	4839      	ldr	r0, [pc, #228]	; (8016fb4 <tcp_pcb_remove+0x114>)
 8016ece:	f00a fe71 	bl	8021bb4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	683a      	ldr	r2, [r7, #0]
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d105      	bne.n	8016ee8 <tcp_pcb_remove+0x48>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	68da      	ldr	r2, [r3, #12]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	601a      	str	r2, [r3, #0]
 8016ee6:	e013      	b.n	8016f10 <tcp_pcb_remove+0x70>
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	60fb      	str	r3, [r7, #12]
 8016eee:	e00c      	b.n	8016f0a <tcp_pcb_remove+0x6a>
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	683a      	ldr	r2, [r7, #0]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d104      	bne.n	8016f04 <tcp_pcb_remove+0x64>
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	68da      	ldr	r2, [r3, #12]
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	60da      	str	r2, [r3, #12]
 8016f02:	e005      	b.n	8016f10 <tcp_pcb_remove+0x70>
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	60fb      	str	r3, [r7, #12]
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d1ef      	bne.n	8016ef0 <tcp_pcb_remove+0x50>
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	2200      	movs	r2, #0
 8016f14:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016f16:	6838      	ldr	r0, [r7, #0]
 8016f18:	f7ff ff72 	bl	8016e00 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	7d1b      	ldrb	r3, [r3, #20]
 8016f20:	2b0a      	cmp	r3, #10
 8016f22:	d013      	beq.n	8016f4c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016f28:	2b01      	cmp	r3, #1
 8016f2a:	d00f      	beq.n	8016f4c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	8b5b      	ldrh	r3, [r3, #26]
 8016f30:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d009      	beq.n	8016f4c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	8b5b      	ldrh	r3, [r3, #26]
 8016f3c:	f043 0302 	orr.w	r3, r3, #2
 8016f40:	b29a      	uxth	r2, r3
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016f46:	6838      	ldr	r0, [r7, #0]
 8016f48:	f003 fc22 	bl	801a790 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	7d1b      	ldrb	r3, [r3, #20]
 8016f50:	2b01      	cmp	r3, #1
 8016f52:	d020      	beq.n	8016f96 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d006      	beq.n	8016f6a <tcp_pcb_remove+0xca>
 8016f5c:	4b13      	ldr	r3, [pc, #76]	; (8016fac <tcp_pcb_remove+0x10c>)
 8016f5e:	f640 0293 	movw	r2, #2195	; 0x893
 8016f62:	4916      	ldr	r1, [pc, #88]	; (8016fbc <tcp_pcb_remove+0x11c>)
 8016f64:	4813      	ldr	r0, [pc, #76]	; (8016fb4 <tcp_pcb_remove+0x114>)
 8016f66:	f00a fe25 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d006      	beq.n	8016f80 <tcp_pcb_remove+0xe0>
 8016f72:	4b0e      	ldr	r3, [pc, #56]	; (8016fac <tcp_pcb_remove+0x10c>)
 8016f74:	f640 0294 	movw	r2, #2196	; 0x894
 8016f78:	4911      	ldr	r1, [pc, #68]	; (8016fc0 <tcp_pcb_remove+0x120>)
 8016f7a:	480e      	ldr	r0, [pc, #56]	; (8016fb4 <tcp_pcb_remove+0x114>)
 8016f7c:	f00a fe1a 	bl	8021bb4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d006      	beq.n	8016f96 <tcp_pcb_remove+0xf6>
 8016f88:	4b08      	ldr	r3, [pc, #32]	; (8016fac <tcp_pcb_remove+0x10c>)
 8016f8a:	f640 0296 	movw	r2, #2198	; 0x896
 8016f8e:	490d      	ldr	r1, [pc, #52]	; (8016fc4 <tcp_pcb_remove+0x124>)
 8016f90:	4808      	ldr	r0, [pc, #32]	; (8016fb4 <tcp_pcb_remove+0x114>)
 8016f92:	f00a fe0f 	bl	8021bb4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016fa2:	bf00      	nop
 8016fa4:	3710      	adds	r7, #16
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	08027390 	.word	0x08027390
 8016fb0:	080279f8 	.word	0x080279f8
 8016fb4:	080273d4 	.word	0x080273d4
 8016fb8:	08027a14 	.word	0x08027a14
 8016fbc:	08027a34 	.word	0x08027a34
 8016fc0:	08027a4c 	.word	0x08027a4c
 8016fc4:	08027a68 	.word	0x08027a68

08016fc8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <tcp_next_iss+0x1c>
 8016fd6:	4b0a      	ldr	r3, [pc, #40]	; (8017000 <tcp_next_iss+0x38>)
 8016fd8:	f640 02af 	movw	r2, #2223	; 0x8af
 8016fdc:	4909      	ldr	r1, [pc, #36]	; (8017004 <tcp_next_iss+0x3c>)
 8016fde:	480a      	ldr	r0, [pc, #40]	; (8017008 <tcp_next_iss+0x40>)
 8016fe0:	f00a fde8 	bl	8021bb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016fe4:	4b09      	ldr	r3, [pc, #36]	; (801700c <tcp_next_iss+0x44>)
 8016fe6:	681a      	ldr	r2, [r3, #0]
 8016fe8:	4b09      	ldr	r3, [pc, #36]	; (8017010 <tcp_next_iss+0x48>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	4413      	add	r3, r2
 8016fee:	4a07      	ldr	r2, [pc, #28]	; (801700c <tcp_next_iss+0x44>)
 8016ff0:	6013      	str	r3, [r2, #0]
  return iss;
 8016ff2:	4b06      	ldr	r3, [pc, #24]	; (801700c <tcp_next_iss+0x44>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	08027390 	.word	0x08027390
 8017004:	08027a80 	.word	0x08027a80
 8017008:	080273d4 	.word	0x080273d4
 801700c:	20000068 	.word	0x20000068
 8017010:	2001b18c 	.word	0x2001b18c

08017014 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b086      	sub	sp, #24
 8017018:	af00      	add	r7, sp, #0
 801701a:	4603      	mov	r3, r0
 801701c:	60b9      	str	r1, [r7, #8]
 801701e:	607a      	str	r2, [r7, #4]
 8017020:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d106      	bne.n	8017036 <tcp_eff_send_mss_netif+0x22>
 8017028:	4b14      	ldr	r3, [pc, #80]	; (801707c <tcp_eff_send_mss_netif+0x68>)
 801702a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801702e:	4914      	ldr	r1, [pc, #80]	; (8017080 <tcp_eff_send_mss_netif+0x6c>)
 8017030:	4814      	ldr	r0, [pc, #80]	; (8017084 <tcp_eff_send_mss_netif+0x70>)
 8017032:	f00a fdbf 	bl	8021bb4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d101      	bne.n	8017040 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801703c:	89fb      	ldrh	r3, [r7, #14]
 801703e:	e019      	b.n	8017074 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017044:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017046:	8afb      	ldrh	r3, [r7, #22]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d012      	beq.n	8017072 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801704c:	2328      	movs	r3, #40	; 0x28
 801704e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017050:	8afa      	ldrh	r2, [r7, #22]
 8017052:	8abb      	ldrh	r3, [r7, #20]
 8017054:	429a      	cmp	r2, r3
 8017056:	d904      	bls.n	8017062 <tcp_eff_send_mss_netif+0x4e>
 8017058:	8afa      	ldrh	r2, [r7, #22]
 801705a:	8abb      	ldrh	r3, [r7, #20]
 801705c:	1ad3      	subs	r3, r2, r3
 801705e:	b29b      	uxth	r3, r3
 8017060:	e000      	b.n	8017064 <tcp_eff_send_mss_netif+0x50>
 8017062:	2300      	movs	r3, #0
 8017064:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017066:	8a7a      	ldrh	r2, [r7, #18]
 8017068:	89fb      	ldrh	r3, [r7, #14]
 801706a:	4293      	cmp	r3, r2
 801706c:	bf28      	it	cs
 801706e:	4613      	movcs	r3, r2
 8017070:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017072:	89fb      	ldrh	r3, [r7, #14]
}
 8017074:	4618      	mov	r0, r3
 8017076:	3718      	adds	r7, #24
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}
 801707c:	08027390 	.word	0x08027390
 8017080:	08027a9c 	.word	0x08027a9c
 8017084:	080273d4 	.word	0x080273d4

08017088 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b084      	sub	sp, #16
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d119      	bne.n	80170d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801709c:	4b10      	ldr	r3, [pc, #64]	; (80170e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801709e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80170a2:	4910      	ldr	r1, [pc, #64]	; (80170e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80170a4:	4810      	ldr	r0, [pc, #64]	; (80170e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80170a6:	f00a fd85 	bl	8021bb4 <iprintf>

  while (pcb != NULL) {
 80170aa:	e011      	b.n	80170d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d108      	bne.n	80170ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	68db      	ldr	r3, [r3, #12]
 80170bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7fe fc38 	bl	8015934 <tcp_abort>
      pcb = next;
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	60fb      	str	r3, [r7, #12]
 80170c8:	e002      	b.n	80170d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	68db      	ldr	r3, [r3, #12]
 80170ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d1ea      	bne.n	80170ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80170d6:	bf00      	nop
 80170d8:	bf00      	nop
 80170da:	3710      	adds	r7, #16
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}
 80170e0:	08027390 	.word	0x08027390
 80170e4:	08027ac4 	.word	0x08027ac4
 80170e8:	080273d4 	.word	0x080273d4

080170ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b084      	sub	sp, #16
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d02a      	beq.n	8017152 <tcp_netif_ip_addr_changed+0x66>
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d026      	beq.n	8017152 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017104:	4b15      	ldr	r3, [pc, #84]	; (801715c <tcp_netif_ip_addr_changed+0x70>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	4619      	mov	r1, r3
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f7ff ffbc 	bl	8017088 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017110:	4b13      	ldr	r3, [pc, #76]	; (8017160 <tcp_netif_ip_addr_changed+0x74>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	4619      	mov	r1, r3
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f7ff ffb6 	bl	8017088 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d017      	beq.n	8017152 <tcp_netif_ip_addr_changed+0x66>
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d013      	beq.n	8017152 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801712a:	4b0e      	ldr	r3, [pc, #56]	; (8017164 <tcp_netif_ip_addr_changed+0x78>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	60fb      	str	r3, [r7, #12]
 8017130:	e00c      	b.n	801714c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	429a      	cmp	r2, r3
 801713c:	d103      	bne.n	8017146 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	681a      	ldr	r2, [r3, #0]
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	68db      	ldr	r3, [r3, #12]
 801714a:	60fb      	str	r3, [r7, #12]
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d1ef      	bne.n	8017132 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017152:	bf00      	nop
 8017154:	3710      	adds	r7, #16
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	2001b188 	.word	0x2001b188
 8017160:	2001b194 	.word	0x2001b194
 8017164:	2001b190 	.word	0x2001b190

08017168 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b082      	sub	sp, #8
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017174:	2b00      	cmp	r3, #0
 8017176:	d007      	beq.n	8017188 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801717c:	4618      	mov	r0, r3
 801717e:	f7ff fb6f 	bl	8016860 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2200      	movs	r2, #0
 8017186:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017188:	bf00      	nop
 801718a:	3708      	adds	r7, #8
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}

08017190 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017190:	b590      	push	{r4, r7, lr}
 8017192:	b08d      	sub	sp, #52	; 0x34
 8017194:	af04      	add	r7, sp, #16
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d105      	bne.n	80171ac <tcp_input+0x1c>
 80171a0:	4b9b      	ldr	r3, [pc, #620]	; (8017410 <tcp_input+0x280>)
 80171a2:	2283      	movs	r2, #131	; 0x83
 80171a4:	499b      	ldr	r1, [pc, #620]	; (8017414 <tcp_input+0x284>)
 80171a6:	489c      	ldr	r0, [pc, #624]	; (8017418 <tcp_input+0x288>)
 80171a8:	f00a fd04 	bl	8021bb4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	4a9a      	ldr	r2, [pc, #616]	; (801741c <tcp_input+0x28c>)
 80171b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	895b      	ldrh	r3, [r3, #10]
 80171b8:	2b13      	cmp	r3, #19
 80171ba:	f240 83c4 	bls.w	8017946 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80171be:	4b98      	ldr	r3, [pc, #608]	; (8017420 <tcp_input+0x290>)
 80171c0:	695b      	ldr	r3, [r3, #20]
 80171c2:	4a97      	ldr	r2, [pc, #604]	; (8017420 <tcp_input+0x290>)
 80171c4:	6812      	ldr	r2, [r2, #0]
 80171c6:	4611      	mov	r1, r2
 80171c8:	4618      	mov	r0, r3
 80171ca:	f008 fc13 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 80171ce:	4603      	mov	r3, r0
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	f040 83ba 	bne.w	801794a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80171d6:	4b92      	ldr	r3, [pc, #584]	; (8017420 <tcp_input+0x290>)
 80171d8:	695b      	ldr	r3, [r3, #20]
 80171da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80171de:	2be0      	cmp	r3, #224	; 0xe0
 80171e0:	f000 83b3 	beq.w	801794a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80171e4:	4b8d      	ldr	r3, [pc, #564]	; (801741c <tcp_input+0x28c>)
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	899b      	ldrh	r3, [r3, #12]
 80171ea:	b29b      	uxth	r3, r3
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7fb f865 	bl	80122bc <lwip_htons>
 80171f2:	4603      	mov	r3, r0
 80171f4:	0b1b      	lsrs	r3, r3, #12
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	009b      	lsls	r3, r3, #2
 80171fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80171fe:	7cbb      	ldrb	r3, [r7, #18]
 8017200:	2b13      	cmp	r3, #19
 8017202:	f240 83a4 	bls.w	801794e <tcp_input+0x7be>
 8017206:	7cbb      	ldrb	r3, [r7, #18]
 8017208:	b29a      	uxth	r2, r3
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	891b      	ldrh	r3, [r3, #8]
 801720e:	429a      	cmp	r2, r3
 8017210:	f200 839d 	bhi.w	801794e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017214:	7cbb      	ldrb	r3, [r7, #18]
 8017216:	b29b      	uxth	r3, r3
 8017218:	3b14      	subs	r3, #20
 801721a:	b29a      	uxth	r2, r3
 801721c:	4b81      	ldr	r3, [pc, #516]	; (8017424 <tcp_input+0x294>)
 801721e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017220:	4b81      	ldr	r3, [pc, #516]	; (8017428 <tcp_input+0x298>)
 8017222:	2200      	movs	r2, #0
 8017224:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	895a      	ldrh	r2, [r3, #10]
 801722a:	7cbb      	ldrb	r3, [r7, #18]
 801722c:	b29b      	uxth	r3, r3
 801722e:	429a      	cmp	r2, r3
 8017230:	d309      	bcc.n	8017246 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017232:	4b7c      	ldr	r3, [pc, #496]	; (8017424 <tcp_input+0x294>)
 8017234:	881a      	ldrh	r2, [r3, #0]
 8017236:	4b7d      	ldr	r3, [pc, #500]	; (801742c <tcp_input+0x29c>)
 8017238:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801723a:	7cbb      	ldrb	r3, [r7, #18]
 801723c:	4619      	mov	r1, r3
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7fd fb44 	bl	80148cc <pbuf_remove_header>
 8017244:	e04e      	b.n	80172e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d105      	bne.n	801725a <tcp_input+0xca>
 801724e:	4b70      	ldr	r3, [pc, #448]	; (8017410 <tcp_input+0x280>)
 8017250:	22c2      	movs	r2, #194	; 0xc2
 8017252:	4977      	ldr	r1, [pc, #476]	; (8017430 <tcp_input+0x2a0>)
 8017254:	4870      	ldr	r0, [pc, #448]	; (8017418 <tcp_input+0x288>)
 8017256:	f00a fcad 	bl	8021bb4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801725a:	2114      	movs	r1, #20
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f7fd fb35 	bl	80148cc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	895a      	ldrh	r2, [r3, #10]
 8017266:	4b71      	ldr	r3, [pc, #452]	; (801742c <tcp_input+0x29c>)
 8017268:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801726a:	4b6e      	ldr	r3, [pc, #440]	; (8017424 <tcp_input+0x294>)
 801726c:	881a      	ldrh	r2, [r3, #0]
 801726e:	4b6f      	ldr	r3, [pc, #444]	; (801742c <tcp_input+0x29c>)
 8017270:	881b      	ldrh	r3, [r3, #0]
 8017272:	1ad3      	subs	r3, r2, r3
 8017274:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017276:	4b6d      	ldr	r3, [pc, #436]	; (801742c <tcp_input+0x29c>)
 8017278:	881b      	ldrh	r3, [r3, #0]
 801727a:	4619      	mov	r1, r3
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7fd fb25 	bl	80148cc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	895b      	ldrh	r3, [r3, #10]
 8017288:	8a3a      	ldrh	r2, [r7, #16]
 801728a:	429a      	cmp	r2, r3
 801728c:	f200 8361 	bhi.w	8017952 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	685b      	ldr	r3, [r3, #4]
 8017296:	4a64      	ldr	r2, [pc, #400]	; (8017428 <tcp_input+0x298>)
 8017298:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	8a3a      	ldrh	r2, [r7, #16]
 80172a0:	4611      	mov	r1, r2
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7fd fb12 	bl	80148cc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	891a      	ldrh	r2, [r3, #8]
 80172ac:	8a3b      	ldrh	r3, [r7, #16]
 80172ae:	1ad3      	subs	r3, r2, r3
 80172b0:	b29a      	uxth	r2, r3
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	895b      	ldrh	r3, [r3, #10]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d005      	beq.n	80172ca <tcp_input+0x13a>
 80172be:	4b54      	ldr	r3, [pc, #336]	; (8017410 <tcp_input+0x280>)
 80172c0:	22df      	movs	r2, #223	; 0xdf
 80172c2:	495c      	ldr	r1, [pc, #368]	; (8017434 <tcp_input+0x2a4>)
 80172c4:	4854      	ldr	r0, [pc, #336]	; (8017418 <tcp_input+0x288>)
 80172c6:	f00a fc75 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	891a      	ldrh	r2, [r3, #8]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	891b      	ldrh	r3, [r3, #8]
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d005      	beq.n	80172e4 <tcp_input+0x154>
 80172d8:	4b4d      	ldr	r3, [pc, #308]	; (8017410 <tcp_input+0x280>)
 80172da:	22e0      	movs	r2, #224	; 0xe0
 80172dc:	4956      	ldr	r1, [pc, #344]	; (8017438 <tcp_input+0x2a8>)
 80172de:	484e      	ldr	r0, [pc, #312]	; (8017418 <tcp_input+0x288>)
 80172e0:	f00a fc68 	bl	8021bb4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80172e4:	4b4d      	ldr	r3, [pc, #308]	; (801741c <tcp_input+0x28c>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	881b      	ldrh	r3, [r3, #0]
 80172ea:	b29b      	uxth	r3, r3
 80172ec:	4a4b      	ldr	r2, [pc, #300]	; (801741c <tcp_input+0x28c>)
 80172ee:	6814      	ldr	r4, [r2, #0]
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7fa ffe3 	bl	80122bc <lwip_htons>
 80172f6:	4603      	mov	r3, r0
 80172f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80172fa:	4b48      	ldr	r3, [pc, #288]	; (801741c <tcp_input+0x28c>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	885b      	ldrh	r3, [r3, #2]
 8017300:	b29b      	uxth	r3, r3
 8017302:	4a46      	ldr	r2, [pc, #280]	; (801741c <tcp_input+0x28c>)
 8017304:	6814      	ldr	r4, [r2, #0]
 8017306:	4618      	mov	r0, r3
 8017308:	f7fa ffd8 	bl	80122bc <lwip_htons>
 801730c:	4603      	mov	r3, r0
 801730e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017310:	4b42      	ldr	r3, [pc, #264]	; (801741c <tcp_input+0x28c>)
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	4a41      	ldr	r2, [pc, #260]	; (801741c <tcp_input+0x28c>)
 8017318:	6814      	ldr	r4, [r2, #0]
 801731a:	4618      	mov	r0, r3
 801731c:	f7fa ffe3 	bl	80122e6 <lwip_htonl>
 8017320:	4603      	mov	r3, r0
 8017322:	6063      	str	r3, [r4, #4]
 8017324:	6863      	ldr	r3, [r4, #4]
 8017326:	4a45      	ldr	r2, [pc, #276]	; (801743c <tcp_input+0x2ac>)
 8017328:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801732a:	4b3c      	ldr	r3, [pc, #240]	; (801741c <tcp_input+0x28c>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	689b      	ldr	r3, [r3, #8]
 8017330:	4a3a      	ldr	r2, [pc, #232]	; (801741c <tcp_input+0x28c>)
 8017332:	6814      	ldr	r4, [r2, #0]
 8017334:	4618      	mov	r0, r3
 8017336:	f7fa ffd6 	bl	80122e6 <lwip_htonl>
 801733a:	4603      	mov	r3, r0
 801733c:	60a3      	str	r3, [r4, #8]
 801733e:	68a3      	ldr	r3, [r4, #8]
 8017340:	4a3f      	ldr	r2, [pc, #252]	; (8017440 <tcp_input+0x2b0>)
 8017342:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017344:	4b35      	ldr	r3, [pc, #212]	; (801741c <tcp_input+0x28c>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	89db      	ldrh	r3, [r3, #14]
 801734a:	b29b      	uxth	r3, r3
 801734c:	4a33      	ldr	r2, [pc, #204]	; (801741c <tcp_input+0x28c>)
 801734e:	6814      	ldr	r4, [r2, #0]
 8017350:	4618      	mov	r0, r3
 8017352:	f7fa ffb3 	bl	80122bc <lwip_htons>
 8017356:	4603      	mov	r3, r0
 8017358:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801735a:	4b30      	ldr	r3, [pc, #192]	; (801741c <tcp_input+0x28c>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	899b      	ldrh	r3, [r3, #12]
 8017360:	b29b      	uxth	r3, r3
 8017362:	4618      	mov	r0, r3
 8017364:	f7fa ffaa 	bl	80122bc <lwip_htons>
 8017368:	4603      	mov	r3, r0
 801736a:	b2db      	uxtb	r3, r3
 801736c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017370:	b2da      	uxtb	r2, r3
 8017372:	4b34      	ldr	r3, [pc, #208]	; (8017444 <tcp_input+0x2b4>)
 8017374:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	891a      	ldrh	r2, [r3, #8]
 801737a:	4b33      	ldr	r3, [pc, #204]	; (8017448 <tcp_input+0x2b8>)
 801737c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801737e:	4b31      	ldr	r3, [pc, #196]	; (8017444 <tcp_input+0x2b4>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	f003 0303 	and.w	r3, r3, #3
 8017386:	2b00      	cmp	r3, #0
 8017388:	d00c      	beq.n	80173a4 <tcp_input+0x214>
    tcplen++;
 801738a:	4b2f      	ldr	r3, [pc, #188]	; (8017448 <tcp_input+0x2b8>)
 801738c:	881b      	ldrh	r3, [r3, #0]
 801738e:	3301      	adds	r3, #1
 8017390:	b29a      	uxth	r2, r3
 8017392:	4b2d      	ldr	r3, [pc, #180]	; (8017448 <tcp_input+0x2b8>)
 8017394:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	891a      	ldrh	r2, [r3, #8]
 801739a:	4b2b      	ldr	r3, [pc, #172]	; (8017448 <tcp_input+0x2b8>)
 801739c:	881b      	ldrh	r3, [r3, #0]
 801739e:	429a      	cmp	r2, r3
 80173a0:	f200 82d9 	bhi.w	8017956 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80173a4:	2300      	movs	r3, #0
 80173a6:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80173a8:	4b28      	ldr	r3, [pc, #160]	; (801744c <tcp_input+0x2bc>)
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	61bb      	str	r3, [r7, #24]
 80173ae:	e09d      	b.n	80174ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80173b0:	69bb      	ldr	r3, [r7, #24]
 80173b2:	7d1b      	ldrb	r3, [r3, #20]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d105      	bne.n	80173c4 <tcp_input+0x234>
 80173b8:	4b15      	ldr	r3, [pc, #84]	; (8017410 <tcp_input+0x280>)
 80173ba:	22fb      	movs	r2, #251	; 0xfb
 80173bc:	4924      	ldr	r1, [pc, #144]	; (8017450 <tcp_input+0x2c0>)
 80173be:	4816      	ldr	r0, [pc, #88]	; (8017418 <tcp_input+0x288>)
 80173c0:	f00a fbf8 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	7d1b      	ldrb	r3, [r3, #20]
 80173c8:	2b0a      	cmp	r3, #10
 80173ca:	d105      	bne.n	80173d8 <tcp_input+0x248>
 80173cc:	4b10      	ldr	r3, [pc, #64]	; (8017410 <tcp_input+0x280>)
 80173ce:	22fc      	movs	r2, #252	; 0xfc
 80173d0:	4920      	ldr	r1, [pc, #128]	; (8017454 <tcp_input+0x2c4>)
 80173d2:	4811      	ldr	r0, [pc, #68]	; (8017418 <tcp_input+0x288>)
 80173d4:	f00a fbee 	bl	8021bb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80173d8:	69bb      	ldr	r3, [r7, #24]
 80173da:	7d1b      	ldrb	r3, [r3, #20]
 80173dc:	2b01      	cmp	r3, #1
 80173de:	d105      	bne.n	80173ec <tcp_input+0x25c>
 80173e0:	4b0b      	ldr	r3, [pc, #44]	; (8017410 <tcp_input+0x280>)
 80173e2:	22fd      	movs	r2, #253	; 0xfd
 80173e4:	491c      	ldr	r1, [pc, #112]	; (8017458 <tcp_input+0x2c8>)
 80173e6:	480c      	ldr	r0, [pc, #48]	; (8017418 <tcp_input+0x288>)
 80173e8:	f00a fbe4 	bl	8021bb4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80173ec:	69bb      	ldr	r3, [r7, #24]
 80173ee:	7a1b      	ldrb	r3, [r3, #8]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d033      	beq.n	801745c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80173f4:	69bb      	ldr	r3, [r7, #24]
 80173f6:	7a1a      	ldrb	r2, [r3, #8]
 80173f8:	4b09      	ldr	r3, [pc, #36]	; (8017420 <tcp_input+0x290>)
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017400:	3301      	adds	r3, #1
 8017402:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017404:	429a      	cmp	r2, r3
 8017406:	d029      	beq.n	801745c <tcp_input+0x2cc>
      prev = pcb;
 8017408:	69bb      	ldr	r3, [r7, #24]
 801740a:	61fb      	str	r3, [r7, #28]
      continue;
 801740c:	e06b      	b.n	80174e6 <tcp_input+0x356>
 801740e:	bf00      	nop
 8017410:	08027af8 	.word	0x08027af8
 8017414:	08027b2c 	.word	0x08027b2c
 8017418:	08027b44 	.word	0x08027b44
 801741c:	20014368 	.word	0x20014368
 8017420:	20017794 	.word	0x20017794
 8017424:	2001436c 	.word	0x2001436c
 8017428:	20014370 	.word	0x20014370
 801742c:	2001436e 	.word	0x2001436e
 8017430:	08027b6c 	.word	0x08027b6c
 8017434:	08027b7c 	.word	0x08027b7c
 8017438:	08027b88 	.word	0x08027b88
 801743c:	20014378 	.word	0x20014378
 8017440:	2001437c 	.word	0x2001437c
 8017444:	20014384 	.word	0x20014384
 8017448:	20014382 	.word	0x20014382
 801744c:	2001b188 	.word	0x2001b188
 8017450:	08027ba8 	.word	0x08027ba8
 8017454:	08027bd0 	.word	0x08027bd0
 8017458:	08027bfc 	.word	0x08027bfc
    }

    if (pcb->remote_port == tcphdr->src &&
 801745c:	69bb      	ldr	r3, [r7, #24]
 801745e:	8b1a      	ldrh	r2, [r3, #24]
 8017460:	4b94      	ldr	r3, [pc, #592]	; (80176b4 <tcp_input+0x524>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	881b      	ldrh	r3, [r3, #0]
 8017466:	b29b      	uxth	r3, r3
 8017468:	429a      	cmp	r2, r3
 801746a:	d13a      	bne.n	80174e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	8ada      	ldrh	r2, [r3, #22]
 8017470:	4b90      	ldr	r3, [pc, #576]	; (80176b4 <tcp_input+0x524>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	885b      	ldrh	r3, [r3, #2]
 8017476:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017478:	429a      	cmp	r2, r3
 801747a:	d132      	bne.n	80174e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801747c:	69bb      	ldr	r3, [r7, #24]
 801747e:	685a      	ldr	r2, [r3, #4]
 8017480:	4b8d      	ldr	r3, [pc, #564]	; (80176b8 <tcp_input+0x528>)
 8017482:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017484:	429a      	cmp	r2, r3
 8017486:	d12c      	bne.n	80174e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017488:	69bb      	ldr	r3, [r7, #24]
 801748a:	681a      	ldr	r2, [r3, #0]
 801748c:	4b8a      	ldr	r3, [pc, #552]	; (80176b8 <tcp_input+0x528>)
 801748e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017490:	429a      	cmp	r2, r3
 8017492:	d126      	bne.n	80174e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017494:	69bb      	ldr	r3, [r7, #24]
 8017496:	68db      	ldr	r3, [r3, #12]
 8017498:	69ba      	ldr	r2, [r7, #24]
 801749a:	429a      	cmp	r2, r3
 801749c:	d106      	bne.n	80174ac <tcp_input+0x31c>
 801749e:	4b87      	ldr	r3, [pc, #540]	; (80176bc <tcp_input+0x52c>)
 80174a0:	f240 120d 	movw	r2, #269	; 0x10d
 80174a4:	4986      	ldr	r1, [pc, #536]	; (80176c0 <tcp_input+0x530>)
 80174a6:	4887      	ldr	r0, [pc, #540]	; (80176c4 <tcp_input+0x534>)
 80174a8:	f00a fb84 	bl	8021bb4 <iprintf>
      if (prev != NULL) {
 80174ac:	69fb      	ldr	r3, [r7, #28]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d00a      	beq.n	80174c8 <tcp_input+0x338>
        prev->next = pcb->next;
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	68da      	ldr	r2, [r3, #12]
 80174b6:	69fb      	ldr	r3, [r7, #28]
 80174b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80174ba:	4b83      	ldr	r3, [pc, #524]	; (80176c8 <tcp_input+0x538>)
 80174bc:	681a      	ldr	r2, [r3, #0]
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80174c2:	4a81      	ldr	r2, [pc, #516]	; (80176c8 <tcp_input+0x538>)
 80174c4:	69bb      	ldr	r3, [r7, #24]
 80174c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80174c8:	69bb      	ldr	r3, [r7, #24]
 80174ca:	68db      	ldr	r3, [r3, #12]
 80174cc:	69ba      	ldr	r2, [r7, #24]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d111      	bne.n	80174f6 <tcp_input+0x366>
 80174d2:	4b7a      	ldr	r3, [pc, #488]	; (80176bc <tcp_input+0x52c>)
 80174d4:	f240 1215 	movw	r2, #277	; 0x115
 80174d8:	497c      	ldr	r1, [pc, #496]	; (80176cc <tcp_input+0x53c>)
 80174da:	487a      	ldr	r0, [pc, #488]	; (80176c4 <tcp_input+0x534>)
 80174dc:	f00a fb6a 	bl	8021bb4 <iprintf>
      break;
 80174e0:	e009      	b.n	80174f6 <tcp_input+0x366>
    }
    prev = pcb;
 80174e2:	69bb      	ldr	r3, [r7, #24]
 80174e4:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80174e6:	69bb      	ldr	r3, [r7, #24]
 80174e8:	68db      	ldr	r3, [r3, #12]
 80174ea:	61bb      	str	r3, [r7, #24]
 80174ec:	69bb      	ldr	r3, [r7, #24]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	f47f af5e 	bne.w	80173b0 <tcp_input+0x220>
 80174f4:	e000      	b.n	80174f8 <tcp_input+0x368>
      break;
 80174f6:	bf00      	nop
  }

  if (pcb == NULL) {
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	f040 8095 	bne.w	801762a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017500:	4b73      	ldr	r3, [pc, #460]	; (80176d0 <tcp_input+0x540>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	61bb      	str	r3, [r7, #24]
 8017506:	e03f      	b.n	8017588 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017508:	69bb      	ldr	r3, [r7, #24]
 801750a:	7d1b      	ldrb	r3, [r3, #20]
 801750c:	2b0a      	cmp	r3, #10
 801750e:	d006      	beq.n	801751e <tcp_input+0x38e>
 8017510:	4b6a      	ldr	r3, [pc, #424]	; (80176bc <tcp_input+0x52c>)
 8017512:	f240 121f 	movw	r2, #287	; 0x11f
 8017516:	496f      	ldr	r1, [pc, #444]	; (80176d4 <tcp_input+0x544>)
 8017518:	486a      	ldr	r0, [pc, #424]	; (80176c4 <tcp_input+0x534>)
 801751a:	f00a fb4b 	bl	8021bb4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801751e:	69bb      	ldr	r3, [r7, #24]
 8017520:	7a1b      	ldrb	r3, [r3, #8]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d009      	beq.n	801753a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017526:	69bb      	ldr	r3, [r7, #24]
 8017528:	7a1a      	ldrb	r2, [r3, #8]
 801752a:	4b63      	ldr	r3, [pc, #396]	; (80176b8 <tcp_input+0x528>)
 801752c:	685b      	ldr	r3, [r3, #4]
 801752e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017532:	3301      	adds	r3, #1
 8017534:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017536:	429a      	cmp	r2, r3
 8017538:	d122      	bne.n	8017580 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801753a:	69bb      	ldr	r3, [r7, #24]
 801753c:	8b1a      	ldrh	r2, [r3, #24]
 801753e:	4b5d      	ldr	r3, [pc, #372]	; (80176b4 <tcp_input+0x524>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	881b      	ldrh	r3, [r3, #0]
 8017544:	b29b      	uxth	r3, r3
 8017546:	429a      	cmp	r2, r3
 8017548:	d11b      	bne.n	8017582 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801754a:	69bb      	ldr	r3, [r7, #24]
 801754c:	8ada      	ldrh	r2, [r3, #22]
 801754e:	4b59      	ldr	r3, [pc, #356]	; (80176b4 <tcp_input+0x524>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	885b      	ldrh	r3, [r3, #2]
 8017554:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017556:	429a      	cmp	r2, r3
 8017558:	d113      	bne.n	8017582 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801755a:	69bb      	ldr	r3, [r7, #24]
 801755c:	685a      	ldr	r2, [r3, #4]
 801755e:	4b56      	ldr	r3, [pc, #344]	; (80176b8 <tcp_input+0x528>)
 8017560:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017562:	429a      	cmp	r2, r3
 8017564:	d10d      	bne.n	8017582 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017566:	69bb      	ldr	r3, [r7, #24]
 8017568:	681a      	ldr	r2, [r3, #0]
 801756a:	4b53      	ldr	r3, [pc, #332]	; (80176b8 <tcp_input+0x528>)
 801756c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801756e:	429a      	cmp	r2, r3
 8017570:	d107      	bne.n	8017582 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017572:	69b8      	ldr	r0, [r7, #24]
 8017574:	f000 fb54 	bl	8017c20 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f7fd fa5f 	bl	8014a3c <pbuf_free>
        return;
 801757e:	e1f0      	b.n	8017962 <tcp_input+0x7d2>
        continue;
 8017580:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017582:	69bb      	ldr	r3, [r7, #24]
 8017584:	68db      	ldr	r3, [r3, #12]
 8017586:	61bb      	str	r3, [r7, #24]
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d1bc      	bne.n	8017508 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801758e:	2300      	movs	r3, #0
 8017590:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017592:	4b51      	ldr	r3, [pc, #324]	; (80176d8 <tcp_input+0x548>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	617b      	str	r3, [r7, #20]
 8017598:	e02a      	b.n	80175f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801759a:	697b      	ldr	r3, [r7, #20]
 801759c:	7a1b      	ldrb	r3, [r3, #8]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d00c      	beq.n	80175bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80175a2:	697b      	ldr	r3, [r7, #20]
 80175a4:	7a1a      	ldrb	r2, [r3, #8]
 80175a6:	4b44      	ldr	r3, [pc, #272]	; (80176b8 <tcp_input+0x528>)
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80175ae:	3301      	adds	r3, #1
 80175b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d002      	beq.n	80175bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80175b6:	697b      	ldr	r3, [r7, #20]
 80175b8:	61fb      	str	r3, [r7, #28]
        continue;
 80175ba:	e016      	b.n	80175ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	8ada      	ldrh	r2, [r3, #22]
 80175c0:	4b3c      	ldr	r3, [pc, #240]	; (80176b4 <tcp_input+0x524>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	885b      	ldrh	r3, [r3, #2]
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d10c      	bne.n	80175e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80175cc:	697b      	ldr	r3, [r7, #20]
 80175ce:	681a      	ldr	r2, [r3, #0]
 80175d0:	4b39      	ldr	r3, [pc, #228]	; (80176b8 <tcp_input+0x528>)
 80175d2:	695b      	ldr	r3, [r3, #20]
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d00f      	beq.n	80175f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d00d      	beq.n	80175fa <tcp_input+0x46a>
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d009      	beq.n	80175fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	68db      	ldr	r3, [r3, #12]
 80175ee:	617b      	str	r3, [r7, #20]
 80175f0:	697b      	ldr	r3, [r7, #20]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d1d1      	bne.n	801759a <tcp_input+0x40a>
 80175f6:	e000      	b.n	80175fa <tcp_input+0x46a>
            break;
 80175f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d014      	beq.n	801762a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d00a      	beq.n	801761c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	68da      	ldr	r2, [r3, #12]
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801760e:	4b32      	ldr	r3, [pc, #200]	; (80176d8 <tcp_input+0x548>)
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017616:	4a30      	ldr	r2, [pc, #192]	; (80176d8 <tcp_input+0x548>)
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801761c:	6978      	ldr	r0, [r7, #20]
 801761e:	f000 fa01 	bl	8017a24 <tcp_listen_input>
      }
      pbuf_free(p);
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f7fd fa0a 	bl	8014a3c <pbuf_free>
      return;
 8017628:	e19b      	b.n	8017962 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801762a:	69bb      	ldr	r3, [r7, #24]
 801762c:	2b00      	cmp	r3, #0
 801762e:	f000 8160 	beq.w	80178f2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017632:	4b2a      	ldr	r3, [pc, #168]	; (80176dc <tcp_input+0x54c>)
 8017634:	2200      	movs	r2, #0
 8017636:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	891a      	ldrh	r2, [r3, #8]
 801763c:	4b27      	ldr	r3, [pc, #156]	; (80176dc <tcp_input+0x54c>)
 801763e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017640:	4a26      	ldr	r2, [pc, #152]	; (80176dc <tcp_input+0x54c>)
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017646:	4b1b      	ldr	r3, [pc, #108]	; (80176b4 <tcp_input+0x524>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	4a24      	ldr	r2, [pc, #144]	; (80176dc <tcp_input+0x54c>)
 801764c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801764e:	4b24      	ldr	r3, [pc, #144]	; (80176e0 <tcp_input+0x550>)
 8017650:	2200      	movs	r2, #0
 8017652:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017654:	4b23      	ldr	r3, [pc, #140]	; (80176e4 <tcp_input+0x554>)
 8017656:	2200      	movs	r2, #0
 8017658:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801765a:	4b23      	ldr	r3, [pc, #140]	; (80176e8 <tcp_input+0x558>)
 801765c:	2200      	movs	r2, #0
 801765e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017660:	4b22      	ldr	r3, [pc, #136]	; (80176ec <tcp_input+0x55c>)
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	f003 0308 	and.w	r3, r3, #8
 8017668:	2b00      	cmp	r3, #0
 801766a:	d006      	beq.n	801767a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	7b5b      	ldrb	r3, [r3, #13]
 8017670:	f043 0301 	orr.w	r3, r3, #1
 8017674:	b2da      	uxtb	r2, r3
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801767a:	69bb      	ldr	r3, [r7, #24]
 801767c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801767e:	2b00      	cmp	r3, #0
 8017680:	d038      	beq.n	80176f4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017682:	69b8      	ldr	r0, [r7, #24]
 8017684:	f7ff f870 	bl	8016768 <tcp_process_refused_data>
 8017688:	4603      	mov	r3, r0
 801768a:	f113 0f0d 	cmn.w	r3, #13
 801768e:	d007      	beq.n	80176a0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017690:	69bb      	ldr	r3, [r7, #24]
 8017692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017694:	2b00      	cmp	r3, #0
 8017696:	d02d      	beq.n	80176f4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017698:	4b15      	ldr	r3, [pc, #84]	; (80176f0 <tcp_input+0x560>)
 801769a:	881b      	ldrh	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d029      	beq.n	80176f4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80176a0:	69bb      	ldr	r3, [r7, #24]
 80176a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f040 8104 	bne.w	80178b2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80176aa:	69b8      	ldr	r0, [r7, #24]
 80176ac:	f003 fe82 	bl	801b3b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80176b0:	e0ff      	b.n	80178b2 <tcp_input+0x722>
 80176b2:	bf00      	nop
 80176b4:	20014368 	.word	0x20014368
 80176b8:	20017794 	.word	0x20017794
 80176bc:	08027af8 	.word	0x08027af8
 80176c0:	08027c24 	.word	0x08027c24
 80176c4:	08027b44 	.word	0x08027b44
 80176c8:	2001b188 	.word	0x2001b188
 80176cc:	08027c50 	.word	0x08027c50
 80176d0:	2001b198 	.word	0x2001b198
 80176d4:	08027c7c 	.word	0x08027c7c
 80176d8:	2001b190 	.word	0x2001b190
 80176dc:	20014354 	.word	0x20014354
 80176e0:	20014388 	.word	0x20014388
 80176e4:	20014385 	.word	0x20014385
 80176e8:	20014380 	.word	0x20014380
 80176ec:	20014384 	.word	0x20014384
 80176f0:	20014382 	.word	0x20014382
      }
    }
    tcp_input_pcb = pcb;
 80176f4:	4a9c      	ldr	r2, [pc, #624]	; (8017968 <tcp_input+0x7d8>)
 80176f6:	69bb      	ldr	r3, [r7, #24]
 80176f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80176fa:	69b8      	ldr	r0, [r7, #24]
 80176fc:	f000 fb0a 	bl	8017d14 <tcp_process>
 8017700:	4603      	mov	r3, r0
 8017702:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017704:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017708:	f113 0f0d 	cmn.w	r3, #13
 801770c:	f000 80d3 	beq.w	80178b6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8017710:	4b96      	ldr	r3, [pc, #600]	; (801796c <tcp_input+0x7dc>)
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	f003 0308 	and.w	r3, r3, #8
 8017718:	2b00      	cmp	r3, #0
 801771a:	d015      	beq.n	8017748 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801771c:	69bb      	ldr	r3, [r7, #24]
 801771e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017722:	2b00      	cmp	r3, #0
 8017724:	d008      	beq.n	8017738 <tcp_input+0x5a8>
 8017726:	69bb      	ldr	r3, [r7, #24]
 8017728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801772c:	69ba      	ldr	r2, [r7, #24]
 801772e:	6912      	ldr	r2, [r2, #16]
 8017730:	f06f 010d 	mvn.w	r1, #13
 8017734:	4610      	mov	r0, r2
 8017736:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017738:	69b9      	ldr	r1, [r7, #24]
 801773a:	488d      	ldr	r0, [pc, #564]	; (8017970 <tcp_input+0x7e0>)
 801773c:	f7ff fbb0 	bl	8016ea0 <tcp_pcb_remove>
        tcp_free(pcb);
 8017740:	69b8      	ldr	r0, [r7, #24]
 8017742:	f7fd fdb3 	bl	80152ac <tcp_free>
 8017746:	e0c1      	b.n	80178cc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8017748:	2300      	movs	r3, #0
 801774a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801774c:	4b89      	ldr	r3, [pc, #548]	; (8017974 <tcp_input+0x7e4>)
 801774e:	881b      	ldrh	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d01d      	beq.n	8017790 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017754:	4b87      	ldr	r3, [pc, #540]	; (8017974 <tcp_input+0x7e4>)
 8017756:	881b      	ldrh	r3, [r3, #0]
 8017758:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801775a:	69bb      	ldr	r3, [r7, #24]
 801775c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017760:	2b00      	cmp	r3, #0
 8017762:	d00a      	beq.n	801777a <tcp_input+0x5ea>
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801776a:	69ba      	ldr	r2, [r7, #24]
 801776c:	6910      	ldr	r0, [r2, #16]
 801776e:	89fa      	ldrh	r2, [r7, #14]
 8017770:	69b9      	ldr	r1, [r7, #24]
 8017772:	4798      	blx	r3
 8017774:	4603      	mov	r3, r0
 8017776:	74fb      	strb	r3, [r7, #19]
 8017778:	e001      	b.n	801777e <tcp_input+0x5ee>
 801777a:	2300      	movs	r3, #0
 801777c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801777e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017782:	f113 0f0d 	cmn.w	r3, #13
 8017786:	f000 8098 	beq.w	80178ba <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801778a:	4b7a      	ldr	r3, [pc, #488]	; (8017974 <tcp_input+0x7e4>)
 801778c:	2200      	movs	r2, #0
 801778e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017790:	69b8      	ldr	r0, [r7, #24]
 8017792:	f000 f907 	bl	80179a4 <tcp_input_delayed_close>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	f040 8090 	bne.w	80178be <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801779e:	4b76      	ldr	r3, [pc, #472]	; (8017978 <tcp_input+0x7e8>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d041      	beq.n	801782a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80177a6:	69bb      	ldr	r3, [r7, #24]
 80177a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d006      	beq.n	80177bc <tcp_input+0x62c>
 80177ae:	4b73      	ldr	r3, [pc, #460]	; (801797c <tcp_input+0x7ec>)
 80177b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80177b4:	4972      	ldr	r1, [pc, #456]	; (8017980 <tcp_input+0x7f0>)
 80177b6:	4873      	ldr	r0, [pc, #460]	; (8017984 <tcp_input+0x7f4>)
 80177b8:	f00a f9fc 	bl	8021bb4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80177bc:	69bb      	ldr	r3, [r7, #24]
 80177be:	8b5b      	ldrh	r3, [r3, #26]
 80177c0:	f003 0310 	and.w	r3, r3, #16
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d008      	beq.n	80177da <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80177c8:	4b6b      	ldr	r3, [pc, #428]	; (8017978 <tcp_input+0x7e8>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7fd f935 	bl	8014a3c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80177d2:	69b8      	ldr	r0, [r7, #24]
 80177d4:	f7fe f8ae 	bl	8015934 <tcp_abort>
            goto aborted;
 80177d8:	e078      	b.n	80178cc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80177da:	69bb      	ldr	r3, [r7, #24]
 80177dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d00c      	beq.n	80177fe <tcp_input+0x66e>
 80177e4:	69bb      	ldr	r3, [r7, #24]
 80177e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	6918      	ldr	r0, [r3, #16]
 80177ee:	4b62      	ldr	r3, [pc, #392]	; (8017978 <tcp_input+0x7e8>)
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	2300      	movs	r3, #0
 80177f4:	69b9      	ldr	r1, [r7, #24]
 80177f6:	47a0      	blx	r4
 80177f8:	4603      	mov	r3, r0
 80177fa:	74fb      	strb	r3, [r7, #19]
 80177fc:	e008      	b.n	8017810 <tcp_input+0x680>
 80177fe:	4b5e      	ldr	r3, [pc, #376]	; (8017978 <tcp_input+0x7e8>)
 8017800:	681a      	ldr	r2, [r3, #0]
 8017802:	2300      	movs	r3, #0
 8017804:	69b9      	ldr	r1, [r7, #24]
 8017806:	2000      	movs	r0, #0
 8017808:	f7ff f884 	bl	8016914 <tcp_recv_null>
 801780c:	4603      	mov	r3, r0
 801780e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017810:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017814:	f113 0f0d 	cmn.w	r3, #13
 8017818:	d053      	beq.n	80178c2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801781a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d003      	beq.n	801782a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017822:	4b55      	ldr	r3, [pc, #340]	; (8017978 <tcp_input+0x7e8>)
 8017824:	681a      	ldr	r2, [r3, #0]
 8017826:	69bb      	ldr	r3, [r7, #24]
 8017828:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801782a:	4b50      	ldr	r3, [pc, #320]	; (801796c <tcp_input+0x7dc>)
 801782c:	781b      	ldrb	r3, [r3, #0]
 801782e:	f003 0320 	and.w	r3, r3, #32
 8017832:	2b00      	cmp	r3, #0
 8017834:	d030      	beq.n	8017898 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8017836:	69bb      	ldr	r3, [r7, #24]
 8017838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801783a:	2b00      	cmp	r3, #0
 801783c:	d009      	beq.n	8017852 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801783e:	69bb      	ldr	r3, [r7, #24]
 8017840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017842:	7b5a      	ldrb	r2, [r3, #13]
 8017844:	69bb      	ldr	r3, [r7, #24]
 8017846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017848:	f042 0220 	orr.w	r2, r2, #32
 801784c:	b2d2      	uxtb	r2, r2
 801784e:	735a      	strb	r2, [r3, #13]
 8017850:	e022      	b.n	8017898 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017852:	69bb      	ldr	r3, [r7, #24]
 8017854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017856:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801785a:	d005      	beq.n	8017868 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801785c:	69bb      	ldr	r3, [r7, #24]
 801785e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017860:	3301      	adds	r3, #1
 8017862:	b29a      	uxth	r2, r3
 8017864:	69bb      	ldr	r3, [r7, #24]
 8017866:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017868:	69bb      	ldr	r3, [r7, #24]
 801786a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801786e:	2b00      	cmp	r3, #0
 8017870:	d00b      	beq.n	801788a <tcp_input+0x6fa>
 8017872:	69bb      	ldr	r3, [r7, #24]
 8017874:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017878:	69bb      	ldr	r3, [r7, #24]
 801787a:	6918      	ldr	r0, [r3, #16]
 801787c:	2300      	movs	r3, #0
 801787e:	2200      	movs	r2, #0
 8017880:	69b9      	ldr	r1, [r7, #24]
 8017882:	47a0      	blx	r4
 8017884:	4603      	mov	r3, r0
 8017886:	74fb      	strb	r3, [r7, #19]
 8017888:	e001      	b.n	801788e <tcp_input+0x6fe>
 801788a:	2300      	movs	r3, #0
 801788c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801788e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017892:	f113 0f0d 	cmn.w	r3, #13
 8017896:	d016      	beq.n	80178c6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017898:	4b33      	ldr	r3, [pc, #204]	; (8017968 <tcp_input+0x7d8>)
 801789a:	2200      	movs	r2, #0
 801789c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801789e:	69b8      	ldr	r0, [r7, #24]
 80178a0:	f000 f880 	bl	80179a4 <tcp_input_delayed_close>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d10f      	bne.n	80178ca <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80178aa:	69b8      	ldr	r0, [r7, #24]
 80178ac:	f002 ff70 	bl	801a790 <tcp_output>
 80178b0:	e00c      	b.n	80178cc <tcp_input+0x73c>
        goto aborted;
 80178b2:	bf00      	nop
 80178b4:	e00a      	b.n	80178cc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80178b6:	bf00      	nop
 80178b8:	e008      	b.n	80178cc <tcp_input+0x73c>
              goto aborted;
 80178ba:	bf00      	nop
 80178bc:	e006      	b.n	80178cc <tcp_input+0x73c>
          goto aborted;
 80178be:	bf00      	nop
 80178c0:	e004      	b.n	80178cc <tcp_input+0x73c>
            goto aborted;
 80178c2:	bf00      	nop
 80178c4:	e002      	b.n	80178cc <tcp_input+0x73c>
              goto aborted;
 80178c6:	bf00      	nop
 80178c8:	e000      	b.n	80178cc <tcp_input+0x73c>
          goto aborted;
 80178ca:	bf00      	nop
    tcp_input_pcb = NULL;
 80178cc:	4b26      	ldr	r3, [pc, #152]	; (8017968 <tcp_input+0x7d8>)
 80178ce:	2200      	movs	r2, #0
 80178d0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80178d2:	4b29      	ldr	r3, [pc, #164]	; (8017978 <tcp_input+0x7e8>)
 80178d4:	2200      	movs	r2, #0
 80178d6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80178d8:	4b2b      	ldr	r3, [pc, #172]	; (8017988 <tcp_input+0x7f8>)
 80178da:	685b      	ldr	r3, [r3, #4]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d03f      	beq.n	8017960 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80178e0:	4b29      	ldr	r3, [pc, #164]	; (8017988 <tcp_input+0x7f8>)
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7fd f8a9 	bl	8014a3c <pbuf_free>
      inseg.p = NULL;
 80178ea:	4b27      	ldr	r3, [pc, #156]	; (8017988 <tcp_input+0x7f8>)
 80178ec:	2200      	movs	r2, #0
 80178ee:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80178f0:	e036      	b.n	8017960 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80178f2:	4b26      	ldr	r3, [pc, #152]	; (801798c <tcp_input+0x7fc>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	899b      	ldrh	r3, [r3, #12]
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	4618      	mov	r0, r3
 80178fc:	f7fa fcde 	bl	80122bc <lwip_htons>
 8017900:	4603      	mov	r3, r0
 8017902:	b2db      	uxtb	r3, r3
 8017904:	f003 0304 	and.w	r3, r3, #4
 8017908:	2b00      	cmp	r3, #0
 801790a:	d118      	bne.n	801793e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801790c:	4b20      	ldr	r3, [pc, #128]	; (8017990 <tcp_input+0x800>)
 801790e:	6819      	ldr	r1, [r3, #0]
 8017910:	4b20      	ldr	r3, [pc, #128]	; (8017994 <tcp_input+0x804>)
 8017912:	881b      	ldrh	r3, [r3, #0]
 8017914:	461a      	mov	r2, r3
 8017916:	4b20      	ldr	r3, [pc, #128]	; (8017998 <tcp_input+0x808>)
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801791c:	4b1b      	ldr	r3, [pc, #108]	; (801798c <tcp_input+0x7fc>)
 801791e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017920:	885b      	ldrh	r3, [r3, #2]
 8017922:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017924:	4a19      	ldr	r2, [pc, #100]	; (801798c <tcp_input+0x7fc>)
 8017926:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017928:	8812      	ldrh	r2, [r2, #0]
 801792a:	b292      	uxth	r2, r2
 801792c:	9202      	str	r2, [sp, #8]
 801792e:	9301      	str	r3, [sp, #4]
 8017930:	4b1a      	ldr	r3, [pc, #104]	; (801799c <tcp_input+0x80c>)
 8017932:	9300      	str	r3, [sp, #0]
 8017934:	4b1a      	ldr	r3, [pc, #104]	; (80179a0 <tcp_input+0x810>)
 8017936:	4602      	mov	r2, r0
 8017938:	2000      	movs	r0, #0
 801793a:	f003 fce9 	bl	801b310 <tcp_rst>
    pbuf_free(p);
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f7fd f87c 	bl	8014a3c <pbuf_free>
  return;
 8017944:	e00c      	b.n	8017960 <tcp_input+0x7d0>
    goto dropped;
 8017946:	bf00      	nop
 8017948:	e006      	b.n	8017958 <tcp_input+0x7c8>
    goto dropped;
 801794a:	bf00      	nop
 801794c:	e004      	b.n	8017958 <tcp_input+0x7c8>
    goto dropped;
 801794e:	bf00      	nop
 8017950:	e002      	b.n	8017958 <tcp_input+0x7c8>
      goto dropped;
 8017952:	bf00      	nop
 8017954:	e000      	b.n	8017958 <tcp_input+0x7c8>
      goto dropped;
 8017956:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	f7fd f86f 	bl	8014a3c <pbuf_free>
 801795e:	e000      	b.n	8017962 <tcp_input+0x7d2>
  return;
 8017960:	bf00      	nop
}
 8017962:	3724      	adds	r7, #36	; 0x24
 8017964:	46bd      	mov	sp, r7
 8017966:	bd90      	pop	{r4, r7, pc}
 8017968:	2001b19c 	.word	0x2001b19c
 801796c:	20014385 	.word	0x20014385
 8017970:	2001b188 	.word	0x2001b188
 8017974:	20014380 	.word	0x20014380
 8017978:	20014388 	.word	0x20014388
 801797c:	08027af8 	.word	0x08027af8
 8017980:	08027cac 	.word	0x08027cac
 8017984:	08027b44 	.word	0x08027b44
 8017988:	20014354 	.word	0x20014354
 801798c:	20014368 	.word	0x20014368
 8017990:	2001437c 	.word	0x2001437c
 8017994:	20014382 	.word	0x20014382
 8017998:	20014378 	.word	0x20014378
 801799c:	200177a4 	.word	0x200177a4
 80179a0:	200177a8 	.word	0x200177a8

080179a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d106      	bne.n	80179c0 <tcp_input_delayed_close+0x1c>
 80179b2:	4b17      	ldr	r3, [pc, #92]	; (8017a10 <tcp_input_delayed_close+0x6c>)
 80179b4:	f240 225a 	movw	r2, #602	; 0x25a
 80179b8:	4916      	ldr	r1, [pc, #88]	; (8017a14 <tcp_input_delayed_close+0x70>)
 80179ba:	4817      	ldr	r0, [pc, #92]	; (8017a18 <tcp_input_delayed_close+0x74>)
 80179bc:	f00a f8fa 	bl	8021bb4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80179c0:	4b16      	ldr	r3, [pc, #88]	; (8017a1c <tcp_input_delayed_close+0x78>)
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	f003 0310 	and.w	r3, r3, #16
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d01c      	beq.n	8017a06 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	8b5b      	ldrh	r3, [r3, #26]
 80179d0:	f003 0310 	and.w	r3, r3, #16
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d10d      	bne.n	80179f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d008      	beq.n	80179f4 <tcp_input_delayed_close+0x50>
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	6912      	ldr	r2, [r2, #16]
 80179ec:	f06f 010e 	mvn.w	r1, #14
 80179f0:	4610      	mov	r0, r2
 80179f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80179f4:	6879      	ldr	r1, [r7, #4]
 80179f6:	480a      	ldr	r0, [pc, #40]	; (8017a20 <tcp_input_delayed_close+0x7c>)
 80179f8:	f7ff fa52 	bl	8016ea0 <tcp_pcb_remove>
    tcp_free(pcb);
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f7fd fc55 	bl	80152ac <tcp_free>
    return 1;
 8017a02:	2301      	movs	r3, #1
 8017a04:	e000      	b.n	8017a08 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017a06:	2300      	movs	r3, #0
}
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	08027af8 	.word	0x08027af8
 8017a14:	08027cc8 	.word	0x08027cc8
 8017a18:	08027b44 	.word	0x08027b44
 8017a1c:	20014385 	.word	0x20014385
 8017a20:	2001b188 	.word	0x2001b188

08017a24 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017a24:	b590      	push	{r4, r7, lr}
 8017a26:	b08b      	sub	sp, #44	; 0x2c
 8017a28:	af04      	add	r7, sp, #16
 8017a2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017a2c:	4b6f      	ldr	r3, [pc, #444]	; (8017bec <tcp_listen_input+0x1c8>)
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	f003 0304 	and.w	r3, r3, #4
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f040 80d2 	bne.w	8017bde <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d106      	bne.n	8017a4e <tcp_listen_input+0x2a>
 8017a40:	4b6b      	ldr	r3, [pc, #428]	; (8017bf0 <tcp_listen_input+0x1cc>)
 8017a42:	f240 2281 	movw	r2, #641	; 0x281
 8017a46:	496b      	ldr	r1, [pc, #428]	; (8017bf4 <tcp_listen_input+0x1d0>)
 8017a48:	486b      	ldr	r0, [pc, #428]	; (8017bf8 <tcp_listen_input+0x1d4>)
 8017a4a:	f00a f8b3 	bl	8021bb4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017a4e:	4b67      	ldr	r3, [pc, #412]	; (8017bec <tcp_listen_input+0x1c8>)
 8017a50:	781b      	ldrb	r3, [r3, #0]
 8017a52:	f003 0310 	and.w	r3, r3, #16
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d019      	beq.n	8017a8e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a5a:	4b68      	ldr	r3, [pc, #416]	; (8017bfc <tcp_listen_input+0x1d8>)
 8017a5c:	6819      	ldr	r1, [r3, #0]
 8017a5e:	4b68      	ldr	r3, [pc, #416]	; (8017c00 <tcp_listen_input+0x1dc>)
 8017a60:	881b      	ldrh	r3, [r3, #0]
 8017a62:	461a      	mov	r2, r3
 8017a64:	4b67      	ldr	r3, [pc, #412]	; (8017c04 <tcp_listen_input+0x1e0>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a6a:	4b67      	ldr	r3, [pc, #412]	; (8017c08 <tcp_listen_input+0x1e4>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a6e:	885b      	ldrh	r3, [r3, #2]
 8017a70:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a72:	4a65      	ldr	r2, [pc, #404]	; (8017c08 <tcp_listen_input+0x1e4>)
 8017a74:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a76:	8812      	ldrh	r2, [r2, #0]
 8017a78:	b292      	uxth	r2, r2
 8017a7a:	9202      	str	r2, [sp, #8]
 8017a7c:	9301      	str	r3, [sp, #4]
 8017a7e:	4b63      	ldr	r3, [pc, #396]	; (8017c0c <tcp_listen_input+0x1e8>)
 8017a80:	9300      	str	r3, [sp, #0]
 8017a82:	4b63      	ldr	r3, [pc, #396]	; (8017c10 <tcp_listen_input+0x1ec>)
 8017a84:	4602      	mov	r2, r0
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f003 fc42 	bl	801b310 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017a8c:	e0a9      	b.n	8017be2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017a8e:	4b57      	ldr	r3, [pc, #348]	; (8017bec <tcp_listen_input+0x1c8>)
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	f003 0302 	and.w	r3, r3, #2
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	f000 80a3 	beq.w	8017be2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	7d5b      	ldrb	r3, [r3, #21]
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7ff f85b 	bl	8016b5c <tcp_alloc>
 8017aa6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d111      	bne.n	8017ad2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	699b      	ldr	r3, [r3, #24]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d00a      	beq.n	8017acc <tcp_listen_input+0xa8>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	699b      	ldr	r3, [r3, #24]
 8017aba:	687a      	ldr	r2, [r7, #4]
 8017abc:	6910      	ldr	r0, [r2, #16]
 8017abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ac2:	2100      	movs	r1, #0
 8017ac4:	4798      	blx	r3
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	73bb      	strb	r3, [r7, #14]
      return;
 8017aca:	e08b      	b.n	8017be4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017acc:	23f0      	movs	r3, #240	; 0xf0
 8017ace:	73bb      	strb	r3, [r7, #14]
      return;
 8017ad0:	e088      	b.n	8017be4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017ad2:	4b50      	ldr	r3, [pc, #320]	; (8017c14 <tcp_listen_input+0x1f0>)
 8017ad4:	695a      	ldr	r2, [r3, #20]
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017ada:	4b4e      	ldr	r3, [pc, #312]	; (8017c14 <tcp_listen_input+0x1f0>)
 8017adc:	691a      	ldr	r2, [r3, #16]
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	8ada      	ldrh	r2, [r3, #22]
 8017ae6:	697b      	ldr	r3, [r7, #20]
 8017ae8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017aea:	4b47      	ldr	r3, [pc, #284]	; (8017c08 <tcp_listen_input+0x1e4>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	881b      	ldrh	r3, [r3, #0]
 8017af0:	b29a      	uxth	r2, r3
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	2203      	movs	r2, #3
 8017afa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017afc:	4b41      	ldr	r3, [pc, #260]	; (8017c04 <tcp_listen_input+0x1e0>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	1c5a      	adds	r2, r3, #1
 8017b02:	697b      	ldr	r3, [r7, #20]
 8017b04:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017b06:	697b      	ldr	r3, [r7, #20]
 8017b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b0a:	697b      	ldr	r3, [r7, #20]
 8017b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017b0e:	6978      	ldr	r0, [r7, #20]
 8017b10:	f7ff fa5a 	bl	8016fc8 <tcp_next_iss>
 8017b14:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	693a      	ldr	r2, [r7, #16]
 8017b1a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017b1c:	697b      	ldr	r3, [r7, #20]
 8017b1e:	693a      	ldr	r2, [r7, #16]
 8017b20:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8017b22:	697b      	ldr	r3, [r7, #20]
 8017b24:	693a      	ldr	r2, [r7, #16]
 8017b26:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017b28:	697b      	ldr	r3, [r7, #20]
 8017b2a:	693a      	ldr	r2, [r7, #16]
 8017b2c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017b2e:	4b35      	ldr	r3, [pc, #212]	; (8017c04 <tcp_listen_input+0x1e0>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	1e5a      	subs	r2, r3, #1
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	691a      	ldr	r2, [r3, #16]
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	7a5b      	ldrb	r3, [r3, #9]
 8017b4a:	f003 030c 	and.w	r3, r3, #12
 8017b4e:	b2da      	uxtb	r2, r3
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	7a1a      	ldrb	r2, [r3, #8]
 8017b58:	697b      	ldr	r3, [r7, #20]
 8017b5a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017b5c:	4b2e      	ldr	r3, [pc, #184]	; (8017c18 <tcp_listen_input+0x1f4>)
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	60da      	str	r2, [r3, #12]
 8017b64:	4a2c      	ldr	r2, [pc, #176]	; (8017c18 <tcp_listen_input+0x1f4>)
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	6013      	str	r3, [r2, #0]
 8017b6a:	f003 fd93 	bl	801b694 <tcp_timer_needed>
 8017b6e:	4b2b      	ldr	r3, [pc, #172]	; (8017c1c <tcp_listen_input+0x1f8>)
 8017b70:	2201      	movs	r2, #1
 8017b72:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017b74:	6978      	ldr	r0, [r7, #20]
 8017b76:	f001 fd8d 	bl	8019694 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017b7a:	4b23      	ldr	r3, [pc, #140]	; (8017c08 <tcp_listen_input+0x1e4>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	89db      	ldrh	r3, [r3, #14]
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f007 fc75 	bl	801f48c <ip4_route>
 8017ba2:	4601      	mov	r1, r0
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	3304      	adds	r3, #4
 8017ba8:	461a      	mov	r2, r3
 8017baa:	4620      	mov	r0, r4
 8017bac:	f7ff fa32 	bl	8017014 <tcp_eff_send_mss_netif>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	697b      	ldr	r3, [r7, #20]
 8017bb6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017bb8:	2112      	movs	r1, #18
 8017bba:	6978      	ldr	r0, [r7, #20]
 8017bbc:	f002 fcfa 	bl	801a5b4 <tcp_enqueue_flags>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d004      	beq.n	8017bd6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017bcc:	2100      	movs	r1, #0
 8017bce:	6978      	ldr	r0, [r7, #20]
 8017bd0:	f7fd fdf2 	bl	80157b8 <tcp_abandon>
      return;
 8017bd4:	e006      	b.n	8017be4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017bd6:	6978      	ldr	r0, [r7, #20]
 8017bd8:	f002 fdda 	bl	801a790 <tcp_output>
  return;
 8017bdc:	e001      	b.n	8017be2 <tcp_listen_input+0x1be>
    return;
 8017bde:	bf00      	nop
 8017be0:	e000      	b.n	8017be4 <tcp_listen_input+0x1c0>
  return;
 8017be2:	bf00      	nop
}
 8017be4:	371c      	adds	r7, #28
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd90      	pop	{r4, r7, pc}
 8017bea:	bf00      	nop
 8017bec:	20014384 	.word	0x20014384
 8017bf0:	08027af8 	.word	0x08027af8
 8017bf4:	08027cf0 	.word	0x08027cf0
 8017bf8:	08027b44 	.word	0x08027b44
 8017bfc:	2001437c 	.word	0x2001437c
 8017c00:	20014382 	.word	0x20014382
 8017c04:	20014378 	.word	0x20014378
 8017c08:	20014368 	.word	0x20014368
 8017c0c:	200177a4 	.word	0x200177a4
 8017c10:	200177a8 	.word	0x200177a8
 8017c14:	20017794 	.word	0x20017794
 8017c18:	2001b188 	.word	0x2001b188
 8017c1c:	2001b184 	.word	0x2001b184

08017c20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b086      	sub	sp, #24
 8017c24:	af04      	add	r7, sp, #16
 8017c26:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017c28:	4b2f      	ldr	r3, [pc, #188]	; (8017ce8 <tcp_timewait_input+0xc8>)
 8017c2a:	781b      	ldrb	r3, [r3, #0]
 8017c2c:	f003 0304 	and.w	r3, r3, #4
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d153      	bne.n	8017cdc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d106      	bne.n	8017c48 <tcp_timewait_input+0x28>
 8017c3a:	4b2c      	ldr	r3, [pc, #176]	; (8017cec <tcp_timewait_input+0xcc>)
 8017c3c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017c40:	492b      	ldr	r1, [pc, #172]	; (8017cf0 <tcp_timewait_input+0xd0>)
 8017c42:	482c      	ldr	r0, [pc, #176]	; (8017cf4 <tcp_timewait_input+0xd4>)
 8017c44:	f009 ffb6 	bl	8021bb4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017c48:	4b27      	ldr	r3, [pc, #156]	; (8017ce8 <tcp_timewait_input+0xc8>)
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	f003 0302 	and.w	r3, r3, #2
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d02a      	beq.n	8017caa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017c54:	4b28      	ldr	r3, [pc, #160]	; (8017cf8 <tcp_timewait_input+0xd8>)
 8017c56:	681a      	ldr	r2, [r3, #0]
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c5c:	1ad3      	subs	r3, r2, r3
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	db2d      	blt.n	8017cbe <tcp_timewait_input+0x9e>
 8017c62:	4b25      	ldr	r3, [pc, #148]	; (8017cf8 <tcp_timewait_input+0xd8>)
 8017c64:	681a      	ldr	r2, [r3, #0]
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c6a:	6879      	ldr	r1, [r7, #4]
 8017c6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017c6e:	440b      	add	r3, r1
 8017c70:	1ad3      	subs	r3, r2, r3
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	dc23      	bgt.n	8017cbe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c76:	4b21      	ldr	r3, [pc, #132]	; (8017cfc <tcp_timewait_input+0xdc>)
 8017c78:	6819      	ldr	r1, [r3, #0]
 8017c7a:	4b21      	ldr	r3, [pc, #132]	; (8017d00 <tcp_timewait_input+0xe0>)
 8017c7c:	881b      	ldrh	r3, [r3, #0]
 8017c7e:	461a      	mov	r2, r3
 8017c80:	4b1d      	ldr	r3, [pc, #116]	; (8017cf8 <tcp_timewait_input+0xd8>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c86:	4b1f      	ldr	r3, [pc, #124]	; (8017d04 <tcp_timewait_input+0xe4>)
 8017c88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c8a:	885b      	ldrh	r3, [r3, #2]
 8017c8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c8e:	4a1d      	ldr	r2, [pc, #116]	; (8017d04 <tcp_timewait_input+0xe4>)
 8017c90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c92:	8812      	ldrh	r2, [r2, #0]
 8017c94:	b292      	uxth	r2, r2
 8017c96:	9202      	str	r2, [sp, #8]
 8017c98:	9301      	str	r3, [sp, #4]
 8017c9a:	4b1b      	ldr	r3, [pc, #108]	; (8017d08 <tcp_timewait_input+0xe8>)
 8017c9c:	9300      	str	r3, [sp, #0]
 8017c9e:	4b1b      	ldr	r3, [pc, #108]	; (8017d0c <tcp_timewait_input+0xec>)
 8017ca0:	4602      	mov	r2, r0
 8017ca2:	6878      	ldr	r0, [r7, #4]
 8017ca4:	f003 fb34 	bl	801b310 <tcp_rst>
      return;
 8017ca8:	e01b      	b.n	8017ce2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017caa:	4b0f      	ldr	r3, [pc, #60]	; (8017ce8 <tcp_timewait_input+0xc8>)
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	f003 0301 	and.w	r3, r3, #1
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d003      	beq.n	8017cbe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017cb6:	4b16      	ldr	r3, [pc, #88]	; (8017d10 <tcp_timewait_input+0xf0>)
 8017cb8:	681a      	ldr	r2, [r3, #0]
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017cbe:	4b10      	ldr	r3, [pc, #64]	; (8017d00 <tcp_timewait_input+0xe0>)
 8017cc0:	881b      	ldrh	r3, [r3, #0]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d00c      	beq.n	8017ce0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	8b5b      	ldrh	r3, [r3, #26]
 8017cca:	f043 0302 	orr.w	r3, r3, #2
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017cd4:	6878      	ldr	r0, [r7, #4]
 8017cd6:	f002 fd5b 	bl	801a790 <tcp_output>
  }
  return;
 8017cda:	e001      	b.n	8017ce0 <tcp_timewait_input+0xc0>
    return;
 8017cdc:	bf00      	nop
 8017cde:	e000      	b.n	8017ce2 <tcp_timewait_input+0xc2>
  return;
 8017ce0:	bf00      	nop
}
 8017ce2:	3708      	adds	r7, #8
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}
 8017ce8:	20014384 	.word	0x20014384
 8017cec:	08027af8 	.word	0x08027af8
 8017cf0:	08027d10 	.word	0x08027d10
 8017cf4:	08027b44 	.word	0x08027b44
 8017cf8:	20014378 	.word	0x20014378
 8017cfc:	2001437c 	.word	0x2001437c
 8017d00:	20014382 	.word	0x20014382
 8017d04:	20014368 	.word	0x20014368
 8017d08:	200177a4 	.word	0x200177a4
 8017d0c:	200177a8 	.word	0x200177a8
 8017d10:	2001b18c 	.word	0x2001b18c

08017d14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017d14:	b590      	push	{r4, r7, lr}
 8017d16:	b08d      	sub	sp, #52	; 0x34
 8017d18:	af04      	add	r7, sp, #16
 8017d1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8017d20:	2300      	movs	r3, #0
 8017d22:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d106      	bne.n	8017d38 <tcp_process+0x24>
 8017d2a:	4ba5      	ldr	r3, [pc, #660]	; (8017fc0 <tcp_process+0x2ac>)
 8017d2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017d30:	49a4      	ldr	r1, [pc, #656]	; (8017fc4 <tcp_process+0x2b0>)
 8017d32:	48a5      	ldr	r0, [pc, #660]	; (8017fc8 <tcp_process+0x2b4>)
 8017d34:	f009 ff3e 	bl	8021bb4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017d38:	4ba4      	ldr	r3, [pc, #656]	; (8017fcc <tcp_process+0x2b8>)
 8017d3a:	781b      	ldrb	r3, [r3, #0]
 8017d3c:	f003 0304 	and.w	r3, r3, #4
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d04e      	beq.n	8017de2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	7d1b      	ldrb	r3, [r3, #20]
 8017d48:	2b02      	cmp	r3, #2
 8017d4a:	d108      	bne.n	8017d5e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017d50:	4b9f      	ldr	r3, [pc, #636]	; (8017fd0 <tcp_process+0x2bc>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	429a      	cmp	r2, r3
 8017d56:	d123      	bne.n	8017da0 <tcp_process+0x8c>
        acceptable = 1;
 8017d58:	2301      	movs	r3, #1
 8017d5a:	77fb      	strb	r3, [r7, #31]
 8017d5c:	e020      	b.n	8017da0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017d62:	4b9c      	ldr	r3, [pc, #624]	; (8017fd4 <tcp_process+0x2c0>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d102      	bne.n	8017d70 <tcp_process+0x5c>
        acceptable = 1;
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	77fb      	strb	r3, [r7, #31]
 8017d6e:	e017      	b.n	8017da0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017d70:	4b98      	ldr	r3, [pc, #608]	; (8017fd4 <tcp_process+0x2c0>)
 8017d72:	681a      	ldr	r2, [r3, #0]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d78:	1ad3      	subs	r3, r2, r3
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	db10      	blt.n	8017da0 <tcp_process+0x8c>
 8017d7e:	4b95      	ldr	r3, [pc, #596]	; (8017fd4 <tcp_process+0x2c0>)
 8017d80:	681a      	ldr	r2, [r3, #0]
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d86:	6879      	ldr	r1, [r7, #4]
 8017d88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017d8a:	440b      	add	r3, r1
 8017d8c:	1ad3      	subs	r3, r2, r3
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	dc06      	bgt.n	8017da0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	8b5b      	ldrh	r3, [r3, #26]
 8017d96:	f043 0302 	orr.w	r3, r3, #2
 8017d9a:	b29a      	uxth	r2, r3
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017da0:	7ffb      	ldrb	r3, [r7, #31]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d01b      	beq.n	8017dde <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	7d1b      	ldrb	r3, [r3, #20]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d106      	bne.n	8017dbc <tcp_process+0xa8>
 8017dae:	4b84      	ldr	r3, [pc, #528]	; (8017fc0 <tcp_process+0x2ac>)
 8017db0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017db4:	4988      	ldr	r1, [pc, #544]	; (8017fd8 <tcp_process+0x2c4>)
 8017db6:	4884      	ldr	r0, [pc, #528]	; (8017fc8 <tcp_process+0x2b4>)
 8017db8:	f009 fefc 	bl	8021bb4 <iprintf>
      recv_flags |= TF_RESET;
 8017dbc:	4b87      	ldr	r3, [pc, #540]	; (8017fdc <tcp_process+0x2c8>)
 8017dbe:	781b      	ldrb	r3, [r3, #0]
 8017dc0:	f043 0308 	orr.w	r3, r3, #8
 8017dc4:	b2da      	uxtb	r2, r3
 8017dc6:	4b85      	ldr	r3, [pc, #532]	; (8017fdc <tcp_process+0x2c8>)
 8017dc8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	8b5b      	ldrh	r3, [r3, #26]
 8017dce:	f023 0301 	bic.w	r3, r3, #1
 8017dd2:	b29a      	uxth	r2, r3
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017dd8:	f06f 030d 	mvn.w	r3, #13
 8017ddc:	e37a      	b.n	80184d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017dde:	2300      	movs	r3, #0
 8017de0:	e378      	b.n	80184d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017de2:	4b7a      	ldr	r3, [pc, #488]	; (8017fcc <tcp_process+0x2b8>)
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	f003 0302 	and.w	r3, r3, #2
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d010      	beq.n	8017e10 <tcp_process+0xfc>
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	7d1b      	ldrb	r3, [r3, #20]
 8017df2:	2b02      	cmp	r3, #2
 8017df4:	d00c      	beq.n	8017e10 <tcp_process+0xfc>
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	7d1b      	ldrb	r3, [r3, #20]
 8017dfa:	2b03      	cmp	r3, #3
 8017dfc:	d008      	beq.n	8017e10 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	8b5b      	ldrh	r3, [r3, #26]
 8017e02:	f043 0302 	orr.w	r3, r3, #2
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	e361      	b.n	80184d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	8b5b      	ldrh	r3, [r3, #26]
 8017e14:	f003 0310 	and.w	r3, r3, #16
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d103      	bne.n	8017e24 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017e1c:	4b70      	ldr	r3, [pc, #448]	; (8017fe0 <tcp_process+0x2cc>)
 8017e1e:	681a      	ldr	r2, [r3, #0]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2200      	movs	r2, #0
 8017e28:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017e34:	6878      	ldr	r0, [r7, #4]
 8017e36:	f001 fc2d 	bl	8019694 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	7d1b      	ldrb	r3, [r3, #20]
 8017e3e:	3b02      	subs	r3, #2
 8017e40:	2b07      	cmp	r3, #7
 8017e42:	f200 8337 	bhi.w	80184b4 <tcp_process+0x7a0>
 8017e46:	a201      	add	r2, pc, #4	; (adr r2, 8017e4c <tcp_process+0x138>)
 8017e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e4c:	08017e6d 	.word	0x08017e6d
 8017e50:	0801809d 	.word	0x0801809d
 8017e54:	08018215 	.word	0x08018215
 8017e58:	0801823f 	.word	0x0801823f
 8017e5c:	08018363 	.word	0x08018363
 8017e60:	08018215 	.word	0x08018215
 8017e64:	080183ef 	.word	0x080183ef
 8017e68:	0801847f 	.word	0x0801847f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017e6c:	4b57      	ldr	r3, [pc, #348]	; (8017fcc <tcp_process+0x2b8>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	f003 0310 	and.w	r3, r3, #16
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	f000 80e4 	beq.w	8018042 <tcp_process+0x32e>
 8017e7a:	4b54      	ldr	r3, [pc, #336]	; (8017fcc <tcp_process+0x2b8>)
 8017e7c:	781b      	ldrb	r3, [r3, #0]
 8017e7e:	f003 0302 	and.w	r3, r3, #2
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	f000 80dd 	beq.w	8018042 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e8c:	1c5a      	adds	r2, r3, #1
 8017e8e:	4b50      	ldr	r3, [pc, #320]	; (8017fd0 <tcp_process+0x2bc>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	429a      	cmp	r2, r3
 8017e94:	f040 80d5 	bne.w	8018042 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017e98:	4b4e      	ldr	r3, [pc, #312]	; (8017fd4 <tcp_process+0x2c0>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	1c5a      	adds	r2, r3, #1
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017eaa:	4b49      	ldr	r3, [pc, #292]	; (8017fd0 <tcp_process+0x2bc>)
 8017eac:	681a      	ldr	r2, [r3, #0]
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017eb2:	4b4c      	ldr	r3, [pc, #304]	; (8017fe4 <tcp_process+0x2d0>)
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	89db      	ldrh	r3, [r3, #14]
 8017eb8:	b29a      	uxth	r2, r3
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017ecc:	4b41      	ldr	r3, [pc, #260]	; (8017fd4 <tcp_process+0x2c0>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	1e5a      	subs	r2, r3, #1
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	2204      	movs	r2, #4
 8017eda:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	3304      	adds	r3, #4
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f007 fad1 	bl	801f48c <ip4_route>
 8017eea:	4601      	mov	r1, r0
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	3304      	adds	r3, #4
 8017ef0:	461a      	mov	r2, r3
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	f7ff f88e 	bl	8017014 <tcp_eff_send_mss_netif>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	461a      	mov	r2, r3
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f04:	009a      	lsls	r2, r3, #2
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f0a:	005b      	lsls	r3, r3, #1
 8017f0c:	f241 111c 	movw	r1, #4380	; 0x111c
 8017f10:	428b      	cmp	r3, r1
 8017f12:	bf38      	it	cc
 8017f14:	460b      	movcc	r3, r1
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d204      	bcs.n	8017f24 <tcp_process+0x210>
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f1e:	009b      	lsls	r3, r3, #2
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	e00d      	b.n	8017f40 <tcp_process+0x22c>
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	f241 121c 	movw	r2, #4380	; 0x111c
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	d904      	bls.n	8017f3c <tcp_process+0x228>
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f36:	005b      	lsls	r3, r3, #1
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	e001      	b.n	8017f40 <tcp_process+0x22c>
 8017f3c:	f241 131c 	movw	r3, #4380	; 0x111c
 8017f40:	687a      	ldr	r2, [r7, #4]
 8017f42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d106      	bne.n	8017f5e <tcp_process+0x24a>
 8017f50:	4b1b      	ldr	r3, [pc, #108]	; (8017fc0 <tcp_process+0x2ac>)
 8017f52:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017f56:	4924      	ldr	r1, [pc, #144]	; (8017fe8 <tcp_process+0x2d4>)
 8017f58:	481b      	ldr	r0, [pc, #108]	; (8017fc8 <tcp_process+0x2b4>)
 8017f5a:	f009 fe2b 	bl	8021bb4 <iprintf>
        --pcb->snd_queuelen;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f64:	3b01      	subs	r3, #1
 8017f66:	b29a      	uxth	r2, r3
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f72:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d111      	bne.n	8017f9e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f7e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017f80:	697b      	ldr	r3, [r7, #20]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d106      	bne.n	8017f94 <tcp_process+0x280>
 8017f86:	4b0e      	ldr	r3, [pc, #56]	; (8017fc0 <tcp_process+0x2ac>)
 8017f88:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017f8c:	4917      	ldr	r1, [pc, #92]	; (8017fec <tcp_process+0x2d8>)
 8017f8e:	480e      	ldr	r0, [pc, #56]	; (8017fc8 <tcp_process+0x2b4>)
 8017f90:	f009 fe10 	bl	8021bb4 <iprintf>
          pcb->unsent = rseg->next;
 8017f94:	697b      	ldr	r3, [r7, #20]
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8017f9c:	e003      	b.n	8017fa6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8017f9e:	697b      	ldr	r3, [r7, #20]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017fa6:	6978      	ldr	r0, [r7, #20]
 8017fa8:	f7fe fc6f 	bl	801688a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d11d      	bne.n	8017ff0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fba:	861a      	strh	r2, [r3, #48]	; 0x30
 8017fbc:	e01f      	b.n	8017ffe <tcp_process+0x2ea>
 8017fbe:	bf00      	nop
 8017fc0:	08027af8 	.word	0x08027af8
 8017fc4:	08027d30 	.word	0x08027d30
 8017fc8:	08027b44 	.word	0x08027b44
 8017fcc:	20014384 	.word	0x20014384
 8017fd0:	2001437c 	.word	0x2001437c
 8017fd4:	20014378 	.word	0x20014378
 8017fd8:	08027d4c 	.word	0x08027d4c
 8017fdc:	20014385 	.word	0x20014385
 8017fe0:	2001b18c 	.word	0x2001b18c
 8017fe4:	20014368 	.word	0x20014368
 8017fe8:	08027d6c 	.word	0x08027d6c
 8017fec:	08027d84 	.word	0x08027d84
        } else {
          pcb->rtime = 0;
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018004:	2b00      	cmp	r3, #0
 8018006:	d00a      	beq.n	801801e <tcp_process+0x30a>
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	6910      	ldr	r0, [r2, #16]
 8018012:	2200      	movs	r2, #0
 8018014:	6879      	ldr	r1, [r7, #4]
 8018016:	4798      	blx	r3
 8018018:	4603      	mov	r3, r0
 801801a:	77bb      	strb	r3, [r7, #30]
 801801c:	e001      	b.n	8018022 <tcp_process+0x30e>
 801801e:	2300      	movs	r3, #0
 8018020:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8018022:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018026:	f113 0f0d 	cmn.w	r3, #13
 801802a:	d102      	bne.n	8018032 <tcp_process+0x31e>
          return ERR_ABRT;
 801802c:	f06f 030c 	mvn.w	r3, #12
 8018030:	e250      	b.n	80184d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	8b5b      	ldrh	r3, [r3, #26]
 8018036:	f043 0302 	orr.w	r3, r3, #2
 801803a:	b29a      	uxth	r2, r3
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018040:	e23a      	b.n	80184b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018042:	4b9d      	ldr	r3, [pc, #628]	; (80182b8 <tcp_process+0x5a4>)
 8018044:	781b      	ldrb	r3, [r3, #0]
 8018046:	f003 0310 	and.w	r3, r3, #16
 801804a:	2b00      	cmp	r3, #0
 801804c:	f000 8234 	beq.w	80184b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018050:	4b9a      	ldr	r3, [pc, #616]	; (80182bc <tcp_process+0x5a8>)
 8018052:	6819      	ldr	r1, [r3, #0]
 8018054:	4b9a      	ldr	r3, [pc, #616]	; (80182c0 <tcp_process+0x5ac>)
 8018056:	881b      	ldrh	r3, [r3, #0]
 8018058:	461a      	mov	r2, r3
 801805a:	4b9a      	ldr	r3, [pc, #616]	; (80182c4 <tcp_process+0x5b0>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018060:	4b99      	ldr	r3, [pc, #612]	; (80182c8 <tcp_process+0x5b4>)
 8018062:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018064:	885b      	ldrh	r3, [r3, #2]
 8018066:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018068:	4a97      	ldr	r2, [pc, #604]	; (80182c8 <tcp_process+0x5b4>)
 801806a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801806c:	8812      	ldrh	r2, [r2, #0]
 801806e:	b292      	uxth	r2, r2
 8018070:	9202      	str	r2, [sp, #8]
 8018072:	9301      	str	r3, [sp, #4]
 8018074:	4b95      	ldr	r3, [pc, #596]	; (80182cc <tcp_process+0x5b8>)
 8018076:	9300      	str	r3, [sp, #0]
 8018078:	4b95      	ldr	r3, [pc, #596]	; (80182d0 <tcp_process+0x5bc>)
 801807a:	4602      	mov	r2, r0
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f003 f947 	bl	801b310 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018088:	2b05      	cmp	r3, #5
 801808a:	f200 8215 	bhi.w	80184b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2200      	movs	r2, #0
 8018092:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f002 ff11 	bl	801aebc <tcp_rexmit_rto>
      break;
 801809a:	e20d      	b.n	80184b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801809c:	4b86      	ldr	r3, [pc, #536]	; (80182b8 <tcp_process+0x5a4>)
 801809e:	781b      	ldrb	r3, [r3, #0]
 80180a0:	f003 0310 	and.w	r3, r3, #16
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f000 80a1 	beq.w	80181ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80180aa:	4b84      	ldr	r3, [pc, #528]	; (80182bc <tcp_process+0x5a8>)
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180b2:	1ad3      	subs	r3, r2, r3
 80180b4:	3b01      	subs	r3, #1
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	db7e      	blt.n	80181b8 <tcp_process+0x4a4>
 80180ba:	4b80      	ldr	r3, [pc, #512]	; (80182bc <tcp_process+0x5a8>)
 80180bc:	681a      	ldr	r2, [r3, #0]
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180c2:	1ad3      	subs	r3, r2, r3
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	dc77      	bgt.n	80181b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2204      	movs	r2, #4
 80180cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d102      	bne.n	80180dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80180d6:	23fa      	movs	r3, #250	; 0xfa
 80180d8:	77bb      	strb	r3, [r7, #30]
 80180da:	e01d      	b.n	8018118 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80180e0:	699b      	ldr	r3, [r3, #24]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d106      	bne.n	80180f4 <tcp_process+0x3e0>
 80180e6:	4b7b      	ldr	r3, [pc, #492]	; (80182d4 <tcp_process+0x5c0>)
 80180e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80180ec:	497a      	ldr	r1, [pc, #488]	; (80182d8 <tcp_process+0x5c4>)
 80180ee:	487b      	ldr	r0, [pc, #492]	; (80182dc <tcp_process+0x5c8>)
 80180f0:	f009 fd60 	bl	8021bb4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80180f8:	699b      	ldr	r3, [r3, #24]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d00a      	beq.n	8018114 <tcp_process+0x400>
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018102:	699b      	ldr	r3, [r3, #24]
 8018104:	687a      	ldr	r2, [r7, #4]
 8018106:	6910      	ldr	r0, [r2, #16]
 8018108:	2200      	movs	r2, #0
 801810a:	6879      	ldr	r1, [r7, #4]
 801810c:	4798      	blx	r3
 801810e:	4603      	mov	r3, r0
 8018110:	77bb      	strb	r3, [r7, #30]
 8018112:	e001      	b.n	8018118 <tcp_process+0x404>
 8018114:	23f0      	movs	r3, #240	; 0xf0
 8018116:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8018118:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d00a      	beq.n	8018136 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018120:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018124:	f113 0f0d 	cmn.w	r3, #13
 8018128:	d002      	beq.n	8018130 <tcp_process+0x41c>
              tcp_abort(pcb);
 801812a:	6878      	ldr	r0, [r7, #4]
 801812c:	f7fd fc02 	bl	8015934 <tcp_abort>
            }
            return ERR_ABRT;
 8018130:	f06f 030c 	mvn.w	r3, #12
 8018134:	e1ce      	b.n	80184d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f000 fae0 	bl	80186fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801813c:	4b68      	ldr	r3, [pc, #416]	; (80182e0 <tcp_process+0x5cc>)
 801813e:	881b      	ldrh	r3, [r3, #0]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d005      	beq.n	8018150 <tcp_process+0x43c>
            recv_acked--;
 8018144:	4b66      	ldr	r3, [pc, #408]	; (80182e0 <tcp_process+0x5cc>)
 8018146:	881b      	ldrh	r3, [r3, #0]
 8018148:	3b01      	subs	r3, #1
 801814a:	b29a      	uxth	r2, r3
 801814c:	4b64      	ldr	r3, [pc, #400]	; (80182e0 <tcp_process+0x5cc>)
 801814e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018154:	009a      	lsls	r2, r3, #2
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801815a:	005b      	lsls	r3, r3, #1
 801815c:	f241 111c 	movw	r1, #4380	; 0x111c
 8018160:	428b      	cmp	r3, r1
 8018162:	bf38      	it	cc
 8018164:	460b      	movcc	r3, r1
 8018166:	429a      	cmp	r2, r3
 8018168:	d204      	bcs.n	8018174 <tcp_process+0x460>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801816e:	009b      	lsls	r3, r3, #2
 8018170:	b29b      	uxth	r3, r3
 8018172:	e00d      	b.n	8018190 <tcp_process+0x47c>
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018178:	005b      	lsls	r3, r3, #1
 801817a:	f241 121c 	movw	r2, #4380	; 0x111c
 801817e:	4293      	cmp	r3, r2
 8018180:	d904      	bls.n	801818c <tcp_process+0x478>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018186:	005b      	lsls	r3, r3, #1
 8018188:	b29b      	uxth	r3, r3
 801818a:	e001      	b.n	8018190 <tcp_process+0x47c>
 801818c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018196:	4b53      	ldr	r3, [pc, #332]	; (80182e4 <tcp_process+0x5d0>)
 8018198:	781b      	ldrb	r3, [r3, #0]
 801819a:	f003 0320 	and.w	r3, r3, #32
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d037      	beq.n	8018212 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	8b5b      	ldrh	r3, [r3, #26]
 80181a6:	f043 0302 	orr.w	r3, r3, #2
 80181aa:	b29a      	uxth	r2, r3
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2207      	movs	r2, #7
 80181b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80181b6:	e02c      	b.n	8018212 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80181b8:	4b40      	ldr	r3, [pc, #256]	; (80182bc <tcp_process+0x5a8>)
 80181ba:	6819      	ldr	r1, [r3, #0]
 80181bc:	4b40      	ldr	r3, [pc, #256]	; (80182c0 <tcp_process+0x5ac>)
 80181be:	881b      	ldrh	r3, [r3, #0]
 80181c0:	461a      	mov	r2, r3
 80181c2:	4b40      	ldr	r3, [pc, #256]	; (80182c4 <tcp_process+0x5b0>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80181c8:	4b3f      	ldr	r3, [pc, #252]	; (80182c8 <tcp_process+0x5b4>)
 80181ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80181cc:	885b      	ldrh	r3, [r3, #2]
 80181ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80181d0:	4a3d      	ldr	r2, [pc, #244]	; (80182c8 <tcp_process+0x5b4>)
 80181d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80181d4:	8812      	ldrh	r2, [r2, #0]
 80181d6:	b292      	uxth	r2, r2
 80181d8:	9202      	str	r2, [sp, #8]
 80181da:	9301      	str	r3, [sp, #4]
 80181dc:	4b3b      	ldr	r3, [pc, #236]	; (80182cc <tcp_process+0x5b8>)
 80181de:	9300      	str	r3, [sp, #0]
 80181e0:	4b3b      	ldr	r3, [pc, #236]	; (80182d0 <tcp_process+0x5bc>)
 80181e2:	4602      	mov	r2, r0
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f003 f893 	bl	801b310 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80181ea:	e167      	b.n	80184bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80181ec:	4b32      	ldr	r3, [pc, #200]	; (80182b8 <tcp_process+0x5a4>)
 80181ee:	781b      	ldrb	r3, [r3, #0]
 80181f0:	f003 0302 	and.w	r3, r3, #2
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	f000 8161 	beq.w	80184bc <tcp_process+0x7a8>
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181fe:	1e5a      	subs	r2, r3, #1
 8018200:	4b30      	ldr	r3, [pc, #192]	; (80182c4 <tcp_process+0x5b0>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	429a      	cmp	r2, r3
 8018206:	f040 8159 	bne.w	80184bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	f002 fe78 	bl	801af00 <tcp_rexmit>
      break;
 8018210:	e154      	b.n	80184bc <tcp_process+0x7a8>
 8018212:	e153      	b.n	80184bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f000 fa71 	bl	80186fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801821a:	4b32      	ldr	r3, [pc, #200]	; (80182e4 <tcp_process+0x5d0>)
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	f003 0320 	and.w	r3, r3, #32
 8018222:	2b00      	cmp	r3, #0
 8018224:	f000 814c 	beq.w	80184c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	8b5b      	ldrh	r3, [r3, #26]
 801822c:	f043 0302 	orr.w	r3, r3, #2
 8018230:	b29a      	uxth	r2, r3
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	2207      	movs	r2, #7
 801823a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801823c:	e140      	b.n	80184c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801823e:	6878      	ldr	r0, [r7, #4]
 8018240:	f000 fa5c 	bl	80186fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018244:	4b27      	ldr	r3, [pc, #156]	; (80182e4 <tcp_process+0x5d0>)
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	f003 0320 	and.w	r3, r3, #32
 801824c:	2b00      	cmp	r3, #0
 801824e:	d071      	beq.n	8018334 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018250:	4b19      	ldr	r3, [pc, #100]	; (80182b8 <tcp_process+0x5a4>)
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	f003 0310 	and.w	r3, r3, #16
 8018258:	2b00      	cmp	r3, #0
 801825a:	d060      	beq.n	801831e <tcp_process+0x60a>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018260:	4b16      	ldr	r3, [pc, #88]	; (80182bc <tcp_process+0x5a8>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	429a      	cmp	r2, r3
 8018266:	d15a      	bne.n	801831e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801826c:	2b00      	cmp	r3, #0
 801826e:	d156      	bne.n	801831e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	8b5b      	ldrh	r3, [r3, #26]
 8018274:	f043 0302 	orr.w	r3, r3, #2
 8018278:	b29a      	uxth	r2, r3
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7fe fdbe 	bl	8016e00 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018284:	4b18      	ldr	r3, [pc, #96]	; (80182e8 <tcp_process+0x5d4>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	687a      	ldr	r2, [r7, #4]
 801828a:	429a      	cmp	r2, r3
 801828c:	d105      	bne.n	801829a <tcp_process+0x586>
 801828e:	4b16      	ldr	r3, [pc, #88]	; (80182e8 <tcp_process+0x5d4>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	68db      	ldr	r3, [r3, #12]
 8018294:	4a14      	ldr	r2, [pc, #80]	; (80182e8 <tcp_process+0x5d4>)
 8018296:	6013      	str	r3, [r2, #0]
 8018298:	e02e      	b.n	80182f8 <tcp_process+0x5e4>
 801829a:	4b13      	ldr	r3, [pc, #76]	; (80182e8 <tcp_process+0x5d4>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	613b      	str	r3, [r7, #16]
 80182a0:	e027      	b.n	80182f2 <tcp_process+0x5de>
 80182a2:	693b      	ldr	r3, [r7, #16]
 80182a4:	68db      	ldr	r3, [r3, #12]
 80182a6:	687a      	ldr	r2, [r7, #4]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d11f      	bne.n	80182ec <tcp_process+0x5d8>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	68da      	ldr	r2, [r3, #12]
 80182b0:	693b      	ldr	r3, [r7, #16]
 80182b2:	60da      	str	r2, [r3, #12]
 80182b4:	e020      	b.n	80182f8 <tcp_process+0x5e4>
 80182b6:	bf00      	nop
 80182b8:	20014384 	.word	0x20014384
 80182bc:	2001437c 	.word	0x2001437c
 80182c0:	20014382 	.word	0x20014382
 80182c4:	20014378 	.word	0x20014378
 80182c8:	20014368 	.word	0x20014368
 80182cc:	200177a4 	.word	0x200177a4
 80182d0:	200177a8 	.word	0x200177a8
 80182d4:	08027af8 	.word	0x08027af8
 80182d8:	08027d98 	.word	0x08027d98
 80182dc:	08027b44 	.word	0x08027b44
 80182e0:	20014380 	.word	0x20014380
 80182e4:	20014385 	.word	0x20014385
 80182e8:	2001b188 	.word	0x2001b188
 80182ec:	693b      	ldr	r3, [r7, #16]
 80182ee:	68db      	ldr	r3, [r3, #12]
 80182f0:	613b      	str	r3, [r7, #16]
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d1d4      	bne.n	80182a2 <tcp_process+0x58e>
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2200      	movs	r2, #0
 80182fc:	60da      	str	r2, [r3, #12]
 80182fe:	4b77      	ldr	r3, [pc, #476]	; (80184dc <tcp_process+0x7c8>)
 8018300:	2201      	movs	r2, #1
 8018302:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	220a      	movs	r2, #10
 8018308:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801830a:	4b75      	ldr	r3, [pc, #468]	; (80184e0 <tcp_process+0x7cc>)
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	60da      	str	r2, [r3, #12]
 8018312:	4a73      	ldr	r2, [pc, #460]	; (80184e0 <tcp_process+0x7cc>)
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	6013      	str	r3, [r2, #0]
 8018318:	f003 f9bc 	bl	801b694 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801831c:	e0d2      	b.n	80184c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	8b5b      	ldrh	r3, [r3, #26]
 8018322:	f043 0302 	orr.w	r3, r3, #2
 8018326:	b29a      	uxth	r2, r3
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2208      	movs	r2, #8
 8018330:	751a      	strb	r2, [r3, #20]
      break;
 8018332:	e0c7      	b.n	80184c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018334:	4b6b      	ldr	r3, [pc, #428]	; (80184e4 <tcp_process+0x7d0>)
 8018336:	781b      	ldrb	r3, [r3, #0]
 8018338:	f003 0310 	and.w	r3, r3, #16
 801833c:	2b00      	cmp	r3, #0
 801833e:	f000 80c1 	beq.w	80184c4 <tcp_process+0x7b0>
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018346:	4b68      	ldr	r3, [pc, #416]	; (80184e8 <tcp_process+0x7d4>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	429a      	cmp	r2, r3
 801834c:	f040 80ba 	bne.w	80184c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018354:	2b00      	cmp	r3, #0
 8018356:	f040 80b5 	bne.w	80184c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2206      	movs	r2, #6
 801835e:	751a      	strb	r2, [r3, #20]
      break;
 8018360:	e0b0      	b.n	80184c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f000 f9ca 	bl	80186fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018368:	4b60      	ldr	r3, [pc, #384]	; (80184ec <tcp_process+0x7d8>)
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	f003 0320 	and.w	r3, r3, #32
 8018370:	2b00      	cmp	r3, #0
 8018372:	f000 80a9 	beq.w	80184c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	8b5b      	ldrh	r3, [r3, #26]
 801837a:	f043 0302 	orr.w	r3, r3, #2
 801837e:	b29a      	uxth	r2, r3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018384:	6878      	ldr	r0, [r7, #4]
 8018386:	f7fe fd3b 	bl	8016e00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801838a:	4b59      	ldr	r3, [pc, #356]	; (80184f0 <tcp_process+0x7dc>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	687a      	ldr	r2, [r7, #4]
 8018390:	429a      	cmp	r2, r3
 8018392:	d105      	bne.n	80183a0 <tcp_process+0x68c>
 8018394:	4b56      	ldr	r3, [pc, #344]	; (80184f0 <tcp_process+0x7dc>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	68db      	ldr	r3, [r3, #12]
 801839a:	4a55      	ldr	r2, [pc, #340]	; (80184f0 <tcp_process+0x7dc>)
 801839c:	6013      	str	r3, [r2, #0]
 801839e:	e013      	b.n	80183c8 <tcp_process+0x6b4>
 80183a0:	4b53      	ldr	r3, [pc, #332]	; (80184f0 <tcp_process+0x7dc>)
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	60fb      	str	r3, [r7, #12]
 80183a6:	e00c      	b.n	80183c2 <tcp_process+0x6ae>
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	68db      	ldr	r3, [r3, #12]
 80183ac:	687a      	ldr	r2, [r7, #4]
 80183ae:	429a      	cmp	r2, r3
 80183b0:	d104      	bne.n	80183bc <tcp_process+0x6a8>
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	68da      	ldr	r2, [r3, #12]
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	60da      	str	r2, [r3, #12]
 80183ba:	e005      	b.n	80183c8 <tcp_process+0x6b4>
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	68db      	ldr	r3, [r3, #12]
 80183c0:	60fb      	str	r3, [r7, #12]
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d1ef      	bne.n	80183a8 <tcp_process+0x694>
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2200      	movs	r2, #0
 80183cc:	60da      	str	r2, [r3, #12]
 80183ce:	4b43      	ldr	r3, [pc, #268]	; (80184dc <tcp_process+0x7c8>)
 80183d0:	2201      	movs	r2, #1
 80183d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	220a      	movs	r2, #10
 80183d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80183da:	4b41      	ldr	r3, [pc, #260]	; (80184e0 <tcp_process+0x7cc>)
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	60da      	str	r2, [r3, #12]
 80183e2:	4a3f      	ldr	r2, [pc, #252]	; (80184e0 <tcp_process+0x7cc>)
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6013      	str	r3, [r2, #0]
 80183e8:	f003 f954 	bl	801b694 <tcp_timer_needed>
      }
      break;
 80183ec:	e06c      	b.n	80184c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f000 f984 	bl	80186fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80183f4:	4b3b      	ldr	r3, [pc, #236]	; (80184e4 <tcp_process+0x7d0>)
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	f003 0310 	and.w	r3, r3, #16
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d065      	beq.n	80184cc <tcp_process+0x7b8>
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018404:	4b38      	ldr	r3, [pc, #224]	; (80184e8 <tcp_process+0x7d4>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	429a      	cmp	r2, r3
 801840a:	d15f      	bne.n	80184cc <tcp_process+0x7b8>
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018410:	2b00      	cmp	r3, #0
 8018412:	d15b      	bne.n	80184cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f7fe fcf3 	bl	8016e00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801841a:	4b35      	ldr	r3, [pc, #212]	; (80184f0 <tcp_process+0x7dc>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	687a      	ldr	r2, [r7, #4]
 8018420:	429a      	cmp	r2, r3
 8018422:	d105      	bne.n	8018430 <tcp_process+0x71c>
 8018424:	4b32      	ldr	r3, [pc, #200]	; (80184f0 <tcp_process+0x7dc>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	4a31      	ldr	r2, [pc, #196]	; (80184f0 <tcp_process+0x7dc>)
 801842c:	6013      	str	r3, [r2, #0]
 801842e:	e013      	b.n	8018458 <tcp_process+0x744>
 8018430:	4b2f      	ldr	r3, [pc, #188]	; (80184f0 <tcp_process+0x7dc>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	61bb      	str	r3, [r7, #24]
 8018436:	e00c      	b.n	8018452 <tcp_process+0x73e>
 8018438:	69bb      	ldr	r3, [r7, #24]
 801843a:	68db      	ldr	r3, [r3, #12]
 801843c:	687a      	ldr	r2, [r7, #4]
 801843e:	429a      	cmp	r2, r3
 8018440:	d104      	bne.n	801844c <tcp_process+0x738>
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	68da      	ldr	r2, [r3, #12]
 8018446:	69bb      	ldr	r3, [r7, #24]
 8018448:	60da      	str	r2, [r3, #12]
 801844a:	e005      	b.n	8018458 <tcp_process+0x744>
 801844c:	69bb      	ldr	r3, [r7, #24]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	61bb      	str	r3, [r7, #24]
 8018452:	69bb      	ldr	r3, [r7, #24]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d1ef      	bne.n	8018438 <tcp_process+0x724>
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2200      	movs	r2, #0
 801845c:	60da      	str	r2, [r3, #12]
 801845e:	4b1f      	ldr	r3, [pc, #124]	; (80184dc <tcp_process+0x7c8>)
 8018460:	2201      	movs	r2, #1
 8018462:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	220a      	movs	r2, #10
 8018468:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801846a:	4b1d      	ldr	r3, [pc, #116]	; (80184e0 <tcp_process+0x7cc>)
 801846c:	681a      	ldr	r2, [r3, #0]
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	60da      	str	r2, [r3, #12]
 8018472:	4a1b      	ldr	r2, [pc, #108]	; (80184e0 <tcp_process+0x7cc>)
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	6013      	str	r3, [r2, #0]
 8018478:	f003 f90c 	bl	801b694 <tcp_timer_needed>
      }
      break;
 801847c:	e026      	b.n	80184cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801847e:	6878      	ldr	r0, [r7, #4]
 8018480:	f000 f93c 	bl	80186fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018484:	4b17      	ldr	r3, [pc, #92]	; (80184e4 <tcp_process+0x7d0>)
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	f003 0310 	and.w	r3, r3, #16
 801848c:	2b00      	cmp	r3, #0
 801848e:	d01f      	beq.n	80184d0 <tcp_process+0x7bc>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018494:	4b14      	ldr	r3, [pc, #80]	; (80184e8 <tcp_process+0x7d4>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	429a      	cmp	r2, r3
 801849a:	d119      	bne.n	80184d0 <tcp_process+0x7bc>
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d115      	bne.n	80184d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80184a4:	4b11      	ldr	r3, [pc, #68]	; (80184ec <tcp_process+0x7d8>)
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	f043 0310 	orr.w	r3, r3, #16
 80184ac:	b2da      	uxtb	r2, r3
 80184ae:	4b0f      	ldr	r3, [pc, #60]	; (80184ec <tcp_process+0x7d8>)
 80184b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80184b2:	e00d      	b.n	80184d0 <tcp_process+0x7bc>
    default:
      break;
 80184b4:	bf00      	nop
 80184b6:	e00c      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184b8:	bf00      	nop
 80184ba:	e00a      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184bc:	bf00      	nop
 80184be:	e008      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184c0:	bf00      	nop
 80184c2:	e006      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184c4:	bf00      	nop
 80184c6:	e004      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184c8:	bf00      	nop
 80184ca:	e002      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184cc:	bf00      	nop
 80184ce:	e000      	b.n	80184d2 <tcp_process+0x7be>
      break;
 80184d0:	bf00      	nop
  }
  return ERR_OK;
 80184d2:	2300      	movs	r3, #0
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3724      	adds	r7, #36	; 0x24
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd90      	pop	{r4, r7, pc}
 80184dc:	2001b184 	.word	0x2001b184
 80184e0:	2001b198 	.word	0x2001b198
 80184e4:	20014384 	.word	0x20014384
 80184e8:	2001437c 	.word	0x2001437c
 80184ec:	20014385 	.word	0x20014385
 80184f0:	2001b188 	.word	0x2001b188

080184f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80184f4:	b590      	push	{r4, r7, lr}
 80184f6:	b085      	sub	sp, #20
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d106      	bne.n	8018512 <tcp_oos_insert_segment+0x1e>
 8018504:	4b3b      	ldr	r3, [pc, #236]	; (80185f4 <tcp_oos_insert_segment+0x100>)
 8018506:	f240 421f 	movw	r2, #1055	; 0x41f
 801850a:	493b      	ldr	r1, [pc, #236]	; (80185f8 <tcp_oos_insert_segment+0x104>)
 801850c:	483b      	ldr	r0, [pc, #236]	; (80185fc <tcp_oos_insert_segment+0x108>)
 801850e:	f009 fb51 	bl	8021bb4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	691b      	ldr	r3, [r3, #16]
 8018516:	899b      	ldrh	r3, [r3, #12]
 8018518:	b29b      	uxth	r3, r3
 801851a:	4618      	mov	r0, r3
 801851c:	f7f9 fece 	bl	80122bc <lwip_htons>
 8018520:	4603      	mov	r3, r0
 8018522:	b2db      	uxtb	r3, r3
 8018524:	f003 0301 	and.w	r3, r3, #1
 8018528:	2b00      	cmp	r3, #0
 801852a:	d028      	beq.n	801857e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801852c:	6838      	ldr	r0, [r7, #0]
 801852e:	f7fe f997 	bl	8016860 <tcp_segs_free>
    next = NULL;
 8018532:	2300      	movs	r3, #0
 8018534:	603b      	str	r3, [r7, #0]
 8018536:	e056      	b.n	80185e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	691b      	ldr	r3, [r3, #16]
 801853c:	899b      	ldrh	r3, [r3, #12]
 801853e:	b29b      	uxth	r3, r3
 8018540:	4618      	mov	r0, r3
 8018542:	f7f9 febb 	bl	80122bc <lwip_htons>
 8018546:	4603      	mov	r3, r0
 8018548:	b2db      	uxtb	r3, r3
 801854a:	f003 0301 	and.w	r3, r3, #1
 801854e:	2b00      	cmp	r3, #0
 8018550:	d00d      	beq.n	801856e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	691b      	ldr	r3, [r3, #16]
 8018556:	899b      	ldrh	r3, [r3, #12]
 8018558:	b29c      	uxth	r4, r3
 801855a:	2001      	movs	r0, #1
 801855c:	f7f9 feae 	bl	80122bc <lwip_htons>
 8018560:	4603      	mov	r3, r0
 8018562:	461a      	mov	r2, r3
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	691b      	ldr	r3, [r3, #16]
 8018568:	4322      	orrs	r2, r4
 801856a:	b292      	uxth	r2, r2
 801856c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018578:	68f8      	ldr	r0, [r7, #12]
 801857a:	f7fe f986 	bl	801688a <tcp_seg_free>
    while (next &&
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d00e      	beq.n	80185a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	891b      	ldrh	r3, [r3, #8]
 8018588:	461a      	mov	r2, r3
 801858a:	4b1d      	ldr	r3, [pc, #116]	; (8018600 <tcp_oos_insert_segment+0x10c>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	441a      	add	r2, r3
 8018590:	683b      	ldr	r3, [r7, #0]
 8018592:	691b      	ldr	r3, [r3, #16]
 8018594:	685b      	ldr	r3, [r3, #4]
 8018596:	6839      	ldr	r1, [r7, #0]
 8018598:	8909      	ldrh	r1, [r1, #8]
 801859a:	440b      	add	r3, r1
 801859c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801859e:	2b00      	cmp	r3, #0
 80185a0:	daca      	bge.n	8018538 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d01e      	beq.n	80185e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	891b      	ldrh	r3, [r3, #8]
 80185ac:	461a      	mov	r2, r3
 80185ae:	4b14      	ldr	r3, [pc, #80]	; (8018600 <tcp_oos_insert_segment+0x10c>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	441a      	add	r2, r3
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	691b      	ldr	r3, [r3, #16]
 80185b8:	685b      	ldr	r3, [r3, #4]
 80185ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 80185bc:	2b00      	cmp	r3, #0
 80185be:	dd12      	ble.n	80185e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80185c0:	683b      	ldr	r3, [r7, #0]
 80185c2:	691b      	ldr	r3, [r3, #16]
 80185c4:	685b      	ldr	r3, [r3, #4]
 80185c6:	b29a      	uxth	r2, r3
 80185c8:	4b0d      	ldr	r3, [pc, #52]	; (8018600 <tcp_oos_insert_segment+0x10c>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	b29b      	uxth	r3, r3
 80185ce:	1ad3      	subs	r3, r2, r3
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	685a      	ldr	r2, [r3, #4]
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	891b      	ldrh	r3, [r3, #8]
 80185de:	4619      	mov	r1, r3
 80185e0:	4610      	mov	r0, r2
 80185e2:	f7fc f873 	bl	80146cc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	683a      	ldr	r2, [r7, #0]
 80185ea:	601a      	str	r2, [r3, #0]
}
 80185ec:	bf00      	nop
 80185ee:	3714      	adds	r7, #20
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd90      	pop	{r4, r7, pc}
 80185f4:	08027af8 	.word	0x08027af8
 80185f8:	08027db8 	.word	0x08027db8
 80185fc:	08027b44 	.word	0x08027b44
 8018600:	20014378 	.word	0x20014378

08018604 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018604:	b5b0      	push	{r4, r5, r7, lr}
 8018606:	b086      	sub	sp, #24
 8018608:	af00      	add	r7, sp, #0
 801860a:	60f8      	str	r0, [r7, #12]
 801860c:	60b9      	str	r1, [r7, #8]
 801860e:	607a      	str	r2, [r7, #4]
 8018610:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018612:	e03e      	b.n	8018692 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018618:	68bb      	ldr	r3, [r7, #8]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	685b      	ldr	r3, [r3, #4]
 8018622:	4618      	mov	r0, r3
 8018624:	f7fc fa98 	bl	8014b58 <pbuf_clen>
 8018628:	4603      	mov	r3, r0
 801862a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018632:	8a7a      	ldrh	r2, [r7, #18]
 8018634:	429a      	cmp	r2, r3
 8018636:	d906      	bls.n	8018646 <tcp_free_acked_segments+0x42>
 8018638:	4b2a      	ldr	r3, [pc, #168]	; (80186e4 <tcp_free_acked_segments+0xe0>)
 801863a:	f240 4257 	movw	r2, #1111	; 0x457
 801863e:	492a      	ldr	r1, [pc, #168]	; (80186e8 <tcp_free_acked_segments+0xe4>)
 8018640:	482a      	ldr	r0, [pc, #168]	; (80186ec <tcp_free_acked_segments+0xe8>)
 8018642:	f009 fab7 	bl	8021bb4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801864c:	8a7b      	ldrh	r3, [r7, #18]
 801864e:	1ad3      	subs	r3, r2, r3
 8018650:	b29a      	uxth	r2, r3
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	891a      	ldrh	r2, [r3, #8]
 801865c:	4b24      	ldr	r3, [pc, #144]	; (80186f0 <tcp_free_acked_segments+0xec>)
 801865e:	881b      	ldrh	r3, [r3, #0]
 8018660:	4413      	add	r3, r2
 8018662:	b29a      	uxth	r2, r3
 8018664:	4b22      	ldr	r3, [pc, #136]	; (80186f0 <tcp_free_acked_segments+0xec>)
 8018666:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018668:	6978      	ldr	r0, [r7, #20]
 801866a:	f7fe f90e 	bl	801688a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018674:	2b00      	cmp	r3, #0
 8018676:	d00c      	beq.n	8018692 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018678:	68bb      	ldr	r3, [r7, #8]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d109      	bne.n	8018692 <tcp_free_acked_segments+0x8e>
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d106      	bne.n	8018692 <tcp_free_acked_segments+0x8e>
 8018684:	4b17      	ldr	r3, [pc, #92]	; (80186e4 <tcp_free_acked_segments+0xe0>)
 8018686:	f240 4261 	movw	r2, #1121	; 0x461
 801868a:	491a      	ldr	r1, [pc, #104]	; (80186f4 <tcp_free_acked_segments+0xf0>)
 801868c:	4817      	ldr	r0, [pc, #92]	; (80186ec <tcp_free_acked_segments+0xe8>)
 801868e:	f009 fa91 	bl	8021bb4 <iprintf>
  while (seg_list != NULL &&
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d020      	beq.n	80186da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018698:	68bb      	ldr	r3, [r7, #8]
 801869a:	691b      	ldr	r3, [r3, #16]
 801869c:	685b      	ldr	r3, [r3, #4]
 801869e:	4618      	mov	r0, r3
 80186a0:	f7f9 fe21 	bl	80122e6 <lwip_htonl>
 80186a4:	4604      	mov	r4, r0
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	891b      	ldrh	r3, [r3, #8]
 80186aa:	461d      	mov	r5, r3
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	691b      	ldr	r3, [r3, #16]
 80186b0:	899b      	ldrh	r3, [r3, #12]
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7f9 fe01 	bl	80122bc <lwip_htons>
 80186ba:	4603      	mov	r3, r0
 80186bc:	b2db      	uxtb	r3, r3
 80186be:	f003 0303 	and.w	r3, r3, #3
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d001      	beq.n	80186ca <tcp_free_acked_segments+0xc6>
 80186c6:	2301      	movs	r3, #1
 80186c8:	e000      	b.n	80186cc <tcp_free_acked_segments+0xc8>
 80186ca:	2300      	movs	r3, #0
 80186cc:	442b      	add	r3, r5
 80186ce:	18e2      	adds	r2, r4, r3
 80186d0:	4b09      	ldr	r3, [pc, #36]	; (80186f8 <tcp_free_acked_segments+0xf4>)
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	dd9c      	ble.n	8018614 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80186da:	68bb      	ldr	r3, [r7, #8]
}
 80186dc:	4618      	mov	r0, r3
 80186de:	3718      	adds	r7, #24
 80186e0:	46bd      	mov	sp, r7
 80186e2:	bdb0      	pop	{r4, r5, r7, pc}
 80186e4:	08027af8 	.word	0x08027af8
 80186e8:	08027de0 	.word	0x08027de0
 80186ec:	08027b44 	.word	0x08027b44
 80186f0:	20014380 	.word	0x20014380
 80186f4:	08027e08 	.word	0x08027e08
 80186f8:	2001437c 	.word	0x2001437c

080186fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80186fc:	b5b0      	push	{r4, r5, r7, lr}
 80186fe:	b094      	sub	sp, #80	; 0x50
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018704:	2300      	movs	r3, #0
 8018706:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d106      	bne.n	801871c <tcp_receive+0x20>
 801870e:	4ba6      	ldr	r3, [pc, #664]	; (80189a8 <tcp_receive+0x2ac>)
 8018710:	f240 427b 	movw	r2, #1147	; 0x47b
 8018714:	49a5      	ldr	r1, [pc, #660]	; (80189ac <tcp_receive+0x2b0>)
 8018716:	48a6      	ldr	r0, [pc, #664]	; (80189b0 <tcp_receive+0x2b4>)
 8018718:	f009 fa4c 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	7d1b      	ldrb	r3, [r3, #20]
 8018720:	2b03      	cmp	r3, #3
 8018722:	d806      	bhi.n	8018732 <tcp_receive+0x36>
 8018724:	4ba0      	ldr	r3, [pc, #640]	; (80189a8 <tcp_receive+0x2ac>)
 8018726:	f240 427c 	movw	r2, #1148	; 0x47c
 801872a:	49a2      	ldr	r1, [pc, #648]	; (80189b4 <tcp_receive+0x2b8>)
 801872c:	48a0      	ldr	r0, [pc, #640]	; (80189b0 <tcp_receive+0x2b4>)
 801872e:	f009 fa41 	bl	8021bb4 <iprintf>

  if (flags & TCP_ACK) {
 8018732:	4ba1      	ldr	r3, [pc, #644]	; (80189b8 <tcp_receive+0x2bc>)
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	f003 0310 	and.w	r3, r3, #16
 801873a:	2b00      	cmp	r3, #0
 801873c:	f000 8263 	beq.w	8018c06 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018746:	461a      	mov	r2, r3
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801874c:	4413      	add	r3, r2
 801874e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018754:	4b99      	ldr	r3, [pc, #612]	; (80189bc <tcp_receive+0x2c0>)
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	1ad3      	subs	r3, r2, r3
 801875a:	2b00      	cmp	r3, #0
 801875c:	db1b      	blt.n	8018796 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018762:	4b96      	ldr	r3, [pc, #600]	; (80189bc <tcp_receive+0x2c0>)
 8018764:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018766:	429a      	cmp	r2, r3
 8018768:	d106      	bne.n	8018778 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801876e:	4b94      	ldr	r3, [pc, #592]	; (80189c0 <tcp_receive+0x2c4>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	1ad3      	subs	r3, r2, r3
 8018774:	2b00      	cmp	r3, #0
 8018776:	db0e      	blt.n	8018796 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801877c:	4b90      	ldr	r3, [pc, #576]	; (80189c0 <tcp_receive+0x2c4>)
 801877e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018780:	429a      	cmp	r2, r3
 8018782:	d125      	bne.n	80187d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018784:	4b8f      	ldr	r3, [pc, #572]	; (80189c4 <tcp_receive+0x2c8>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	89db      	ldrh	r3, [r3, #14]
 801878a:	b29a      	uxth	r2, r3
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018792:	429a      	cmp	r2, r3
 8018794:	d91c      	bls.n	80187d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018796:	4b8b      	ldr	r3, [pc, #556]	; (80189c4 <tcp_receive+0x2c8>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	89db      	ldrh	r3, [r3, #14]
 801879c:	b29a      	uxth	r2, r3
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d205      	bcs.n	80187c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80187c0:	4b7e      	ldr	r3, [pc, #504]	; (80189bc <tcp_receive+0x2c0>)
 80187c2:	681a      	ldr	r2, [r3, #0]
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80187c8:	4b7d      	ldr	r3, [pc, #500]	; (80189c0 <tcp_receive+0x2c4>)
 80187ca:	681a      	ldr	r2, [r3, #0]
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80187d0:	4b7b      	ldr	r3, [pc, #492]	; (80189c0 <tcp_receive+0x2c4>)
 80187d2:	681a      	ldr	r2, [r3, #0]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187d8:	1ad3      	subs	r3, r2, r3
 80187da:	2b00      	cmp	r3, #0
 80187dc:	dc58      	bgt.n	8018890 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80187de:	4b7a      	ldr	r3, [pc, #488]	; (80189c8 <tcp_receive+0x2cc>)
 80187e0:	881b      	ldrh	r3, [r3, #0]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d14b      	bne.n	801887e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187ea:	687a      	ldr	r2, [r7, #4]
 80187ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80187f0:	4413      	add	r3, r2
 80187f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d142      	bne.n	801887e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80187fe:	2b00      	cmp	r3, #0
 8018800:	db3d      	blt.n	801887e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018806:	4b6e      	ldr	r3, [pc, #440]	; (80189c0 <tcp_receive+0x2c4>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	429a      	cmp	r2, r3
 801880c:	d137      	bne.n	801887e <tcp_receive+0x182>
              found_dupack = 1;
 801880e:	2301      	movs	r3, #1
 8018810:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018818:	2bff      	cmp	r3, #255	; 0xff
 801881a:	d007      	beq.n	801882c <tcp_receive+0x130>
                ++pcb->dupacks;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018822:	3301      	adds	r3, #1
 8018824:	b2da      	uxtb	r2, r3
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018832:	2b03      	cmp	r3, #3
 8018834:	d91b      	bls.n	801886e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018840:	4413      	add	r3, r2
 8018842:	b29a      	uxth	r2, r3
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801884a:	429a      	cmp	r2, r3
 801884c:	d30a      	bcc.n	8018864 <tcp_receive+0x168>
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018858:	4413      	add	r3, r2
 801885a:	b29a      	uxth	r2, r3
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018862:	e004      	b.n	801886e <tcp_receive+0x172>
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801886a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018874:	2b02      	cmp	r3, #2
 8018876:	d902      	bls.n	801887e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f002 fbad 	bl	801afd8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801887e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018880:	2b00      	cmp	r3, #0
 8018882:	f040 8160 	bne.w	8018b46 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2200      	movs	r2, #0
 801888a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801888e:	e15a      	b.n	8018b46 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018890:	4b4b      	ldr	r3, [pc, #300]	; (80189c0 <tcp_receive+0x2c4>)
 8018892:	681a      	ldr	r2, [r3, #0]
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018898:	1ad3      	subs	r3, r2, r3
 801889a:	3b01      	subs	r3, #1
 801889c:	2b00      	cmp	r3, #0
 801889e:	f2c0 814d 	blt.w	8018b3c <tcp_receive+0x440>
 80188a2:	4b47      	ldr	r3, [pc, #284]	; (80189c0 <tcp_receive+0x2c4>)
 80188a4:	681a      	ldr	r2, [r3, #0]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188aa:	1ad3      	subs	r3, r2, r3
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	f300 8145 	bgt.w	8018b3c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	8b5b      	ldrh	r3, [r3, #26]
 80188b6:	f003 0304 	and.w	r3, r3, #4
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d010      	beq.n	80188e0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	8b5b      	ldrh	r3, [r3, #26]
 80188c2:	f023 0304 	bic.w	r3, r3, #4
 80188c6:	b29a      	uxth	r2, r3
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2200      	movs	r2, #0
 80188dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2200      	movs	r2, #0
 80188e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80188ee:	10db      	asrs	r3, r3, #3
 80188f0:	b21b      	sxth	r3, r3
 80188f2:	b29a      	uxth	r2, r3
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	4413      	add	r3, r2
 80188fe:	b29b      	uxth	r3, r3
 8018900:	b21a      	sxth	r2, r3
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018908:	4b2d      	ldr	r3, [pc, #180]	; (80189c0 <tcp_receive+0x2c4>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	b29a      	uxth	r2, r3
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018912:	b29b      	uxth	r3, r3
 8018914:	1ad3      	subs	r3, r2, r3
 8018916:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	2200      	movs	r2, #0
 801891c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018920:	4b27      	ldr	r3, [pc, #156]	; (80189c0 <tcp_receive+0x2c4>)
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	7d1b      	ldrb	r3, [r3, #20]
 801892c:	2b03      	cmp	r3, #3
 801892e:	f240 8096 	bls.w	8018a5e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801893e:	429a      	cmp	r2, r3
 8018940:	d244      	bcs.n	80189cc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	8b5b      	ldrh	r3, [r3, #26]
 8018946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801894a:	2b00      	cmp	r3, #0
 801894c:	d001      	beq.n	8018952 <tcp_receive+0x256>
 801894e:	2301      	movs	r3, #1
 8018950:	e000      	b.n	8018954 <tcp_receive+0x258>
 8018952:	2302      	movs	r3, #2
 8018954:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801895c:	b29a      	uxth	r2, r3
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018962:	fb12 f303 	smulbb	r3, r2, r3
 8018966:	b29b      	uxth	r3, r3
 8018968:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801896a:	4293      	cmp	r3, r2
 801896c:	bf28      	it	cs
 801896e:	4613      	movcs	r3, r2
 8018970:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801897a:	4413      	add	r3, r2
 801897c:	b29a      	uxth	r2, r3
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018984:	429a      	cmp	r2, r3
 8018986:	d309      	bcc.n	801899c <tcp_receive+0x2a0>
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801898e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018990:	4413      	add	r3, r2
 8018992:	b29a      	uxth	r2, r3
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801899a:	e060      	b.n	8018a5e <tcp_receive+0x362>
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80189a6:	e05a      	b.n	8018a5e <tcp_receive+0x362>
 80189a8:	08027af8 	.word	0x08027af8
 80189ac:	08027e28 	.word	0x08027e28
 80189b0:	08027b44 	.word	0x08027b44
 80189b4:	08027e44 	.word	0x08027e44
 80189b8:	20014384 	.word	0x20014384
 80189bc:	20014378 	.word	0x20014378
 80189c0:	2001437c 	.word	0x2001437c
 80189c4:	20014368 	.word	0x20014368
 80189c8:	20014382 	.word	0x20014382
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80189d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80189d4:	4413      	add	r3, r2
 80189d6:	b29a      	uxth	r2, r3
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80189de:	429a      	cmp	r2, r3
 80189e0:	d309      	bcc.n	80189f6 <tcp_receive+0x2fa>
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80189e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80189ea:	4413      	add	r3, r2
 80189ec:	b29a      	uxth	r2, r3
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80189f4:	e004      	b.n	8018a00 <tcp_receive+0x304>
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d326      	bcc.n	8018a5e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018a1c:	1ad3      	subs	r3, r2, r3
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a30:	4413      	add	r3, r2
 8018a32:	b29a      	uxth	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018a3a:	429a      	cmp	r2, r3
 8018a3c:	d30a      	bcc.n	8018a54 <tcp_receive+0x358>
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a48:	4413      	add	r3, r2
 8018a4a:	b29a      	uxth	r2, r3
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018a52:	e004      	b.n	8018a5e <tcp_receive+0x362>
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a66:	4a98      	ldr	r2, [pc, #608]	; (8018cc8 <tcp_receive+0x5cc>)
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f7ff fdcb 	bl	8018604 <tcp_free_acked_segments>
 8018a6e:	4602      	mov	r2, r0
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a7c:	4a93      	ldr	r2, [pc, #588]	; (8018ccc <tcp_receive+0x5d0>)
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f7ff fdc0 	bl	8018604 <tcp_free_acked_segments>
 8018a84:	4602      	mov	r2, r0
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d104      	bne.n	8018a9c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a98:	861a      	strh	r2, [r3, #48]	; 0x30
 8018a9a:	e002      	b.n	8018aa2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d103      	bne.n	8018ab8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018abe:	4b84      	ldr	r3, [pc, #528]	; (8018cd0 <tcp_receive+0x5d4>)
 8018ac0:	881b      	ldrh	r3, [r3, #0]
 8018ac2:	4413      	add	r3, r2
 8018ac4:	b29a      	uxth	r2, r3
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	8b5b      	ldrh	r3, [r3, #26]
 8018ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d035      	beq.n	8018b44 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d118      	bne.n	8018b12 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d00c      	beq.n	8018b02 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018af0:	691b      	ldr	r3, [r3, #16]
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7f9 fbf6 	bl	80122e6 <lwip_htonl>
 8018afa:	4603      	mov	r3, r0
 8018afc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	dc20      	bgt.n	8018b44 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	8b5b      	ldrh	r3, [r3, #26]
 8018b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018b0a:	b29a      	uxth	r2, r3
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b10:	e018      	b.n	8018b44 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b1a:	691b      	ldr	r3, [r3, #16]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7f9 fbe1 	bl	80122e6 <lwip_htonl>
 8018b24:	4603      	mov	r3, r0
 8018b26:	1ae3      	subs	r3, r4, r3
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	dc0b      	bgt.n	8018b44 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	8b5b      	ldrh	r3, [r3, #26]
 8018b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018b34:	b29a      	uxth	r2, r3
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b3a:	e003      	b.n	8018b44 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018b3c:	6878      	ldr	r0, [r7, #4]
 8018b3e:	f002 fc39 	bl	801b3b4 <tcp_send_empty_ack>
 8018b42:	e000      	b.n	8018b46 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b44:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d05b      	beq.n	8018c06 <tcp_receive+0x50a>
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018b52:	4b60      	ldr	r3, [pc, #384]	; (8018cd4 <tcp_receive+0x5d8>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	1ad3      	subs	r3, r2, r3
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	da54      	bge.n	8018c06 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018b5c:	4b5e      	ldr	r3, [pc, #376]	; (8018cd8 <tcp_receive+0x5dc>)
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	b29a      	uxth	r2, r3
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	1ad3      	subs	r3, r2, r3
 8018b6a:	b29b      	uxth	r3, r3
 8018b6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018b70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018b7a:	10db      	asrs	r3, r3, #3
 8018b7c:	b21b      	sxth	r3, r3
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	1ad3      	subs	r3, r2, r3
 8018b82:	b29b      	uxth	r3, r3
 8018b84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018b8e:	b29a      	uxth	r2, r3
 8018b90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018b94:	4413      	add	r3, r2
 8018b96:	b29b      	uxth	r3, r3
 8018b98:	b21a      	sxth	r2, r3
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018b9e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	da05      	bge.n	8018bb2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8018ba6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018baa:	425b      	negs	r3, r3
 8018bac:	b29b      	uxth	r3, r3
 8018bae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018bb2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018bbc:	109b      	asrs	r3, r3, #2
 8018bbe:	b21b      	sxth	r3, r3
 8018bc0:	b29b      	uxth	r3, r3
 8018bc2:	1ad3      	subs	r3, r2, r3
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018bd0:	b29a      	uxth	r2, r3
 8018bd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018bd6:	4413      	add	r3, r2
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	b21a      	sxth	r2, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018be6:	10db      	asrs	r3, r3, #3
 8018be8:	b21b      	sxth	r3, r3
 8018bea:	b29a      	uxth	r2, r3
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018bf2:	b29b      	uxth	r3, r3
 8018bf4:	4413      	add	r3, r2
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	b21a      	sxth	r2, r3
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2200      	movs	r2, #0
 8018c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018c06:	4b35      	ldr	r3, [pc, #212]	; (8018cdc <tcp_receive+0x5e0>)
 8018c08:	881b      	ldrh	r3, [r3, #0]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	f000 84e1 	beq.w	80195d2 <tcp_receive+0xed6>
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	7d1b      	ldrb	r3, [r3, #20]
 8018c14:	2b06      	cmp	r3, #6
 8018c16:	f200 84dc 	bhi.w	80195d2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c1e:	4b30      	ldr	r3, [pc, #192]	; (8018ce0 <tcp_receive+0x5e4>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	1ad3      	subs	r3, r2, r3
 8018c24:	3b01      	subs	r3, #1
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	f2c0 808e 	blt.w	8018d48 <tcp_receive+0x64c>
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c30:	4b2a      	ldr	r3, [pc, #168]	; (8018cdc <tcp_receive+0x5e0>)
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	4619      	mov	r1, r3
 8018c36:	4b2a      	ldr	r3, [pc, #168]	; (8018ce0 <tcp_receive+0x5e4>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	440b      	add	r3, r1
 8018c3c:	1ad3      	subs	r3, r2, r3
 8018c3e:	3301      	adds	r3, #1
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	f300 8081 	bgt.w	8018d48 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018c46:	4b27      	ldr	r3, [pc, #156]	; (8018ce4 <tcp_receive+0x5e8>)
 8018c48:	685b      	ldr	r3, [r3, #4]
 8018c4a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c50:	4b23      	ldr	r3, [pc, #140]	; (8018ce0 <tcp_receive+0x5e4>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	1ad3      	subs	r3, r2, r3
 8018c56:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018c58:	4b22      	ldr	r3, [pc, #136]	; (8018ce4 <tcp_receive+0x5e8>)
 8018c5a:	685b      	ldr	r3, [r3, #4]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d106      	bne.n	8018c6e <tcp_receive+0x572>
 8018c60:	4b21      	ldr	r3, [pc, #132]	; (8018ce8 <tcp_receive+0x5ec>)
 8018c62:	f240 5294 	movw	r2, #1428	; 0x594
 8018c66:	4921      	ldr	r1, [pc, #132]	; (8018cec <tcp_receive+0x5f0>)
 8018c68:	4821      	ldr	r0, [pc, #132]	; (8018cf0 <tcp_receive+0x5f4>)
 8018c6a:	f008 ffa3 	bl	8021bb4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018c74:	4293      	cmp	r3, r2
 8018c76:	d906      	bls.n	8018c86 <tcp_receive+0x58a>
 8018c78:	4b1b      	ldr	r3, [pc, #108]	; (8018ce8 <tcp_receive+0x5ec>)
 8018c7a:	f240 5295 	movw	r2, #1429	; 0x595
 8018c7e:	491d      	ldr	r1, [pc, #116]	; (8018cf4 <tcp_receive+0x5f8>)
 8018c80:	481b      	ldr	r0, [pc, #108]	; (8018cf0 <tcp_receive+0x5f4>)
 8018c82:	f008 ff97 	bl	8021bb4 <iprintf>
      off = (u16_t)off32;
 8018c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018c8c:	4b15      	ldr	r3, [pc, #84]	; (8018ce4 <tcp_receive+0x5e8>)
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	891b      	ldrh	r3, [r3, #8]
 8018c92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d906      	bls.n	8018ca8 <tcp_receive+0x5ac>
 8018c9a:	4b13      	ldr	r3, [pc, #76]	; (8018ce8 <tcp_receive+0x5ec>)
 8018c9c:	f240 5297 	movw	r2, #1431	; 0x597
 8018ca0:	4915      	ldr	r1, [pc, #84]	; (8018cf8 <tcp_receive+0x5fc>)
 8018ca2:	4813      	ldr	r0, [pc, #76]	; (8018cf0 <tcp_receive+0x5f4>)
 8018ca4:	f008 ff86 	bl	8021bb4 <iprintf>
      inseg.len -= off;
 8018ca8:	4b0e      	ldr	r3, [pc, #56]	; (8018ce4 <tcp_receive+0x5e8>)
 8018caa:	891a      	ldrh	r2, [r3, #8]
 8018cac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018cb0:	1ad3      	subs	r3, r2, r3
 8018cb2:	b29a      	uxth	r2, r3
 8018cb4:	4b0b      	ldr	r3, [pc, #44]	; (8018ce4 <tcp_receive+0x5e8>)
 8018cb6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018cb8:	4b0a      	ldr	r3, [pc, #40]	; (8018ce4 <tcp_receive+0x5e8>)
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	891a      	ldrh	r2, [r3, #8]
 8018cbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018cc2:	1ad3      	subs	r3, r2, r3
 8018cc4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018cc6:	e029      	b.n	8018d1c <tcp_receive+0x620>
 8018cc8:	08027e60 	.word	0x08027e60
 8018ccc:	08027e68 	.word	0x08027e68
 8018cd0:	20014380 	.word	0x20014380
 8018cd4:	2001437c 	.word	0x2001437c
 8018cd8:	2001b18c 	.word	0x2001b18c
 8018cdc:	20014382 	.word	0x20014382
 8018ce0:	20014378 	.word	0x20014378
 8018ce4:	20014354 	.word	0x20014354
 8018ce8:	08027af8 	.word	0x08027af8
 8018cec:	08027e70 	.word	0x08027e70
 8018cf0:	08027b44 	.word	0x08027b44
 8018cf4:	08027e80 	.word	0x08027e80
 8018cf8:	08027e90 	.word	0x08027e90
        off -= p->len;
 8018cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018cfe:	895b      	ldrh	r3, [r3, #10]
 8018d00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018d04:	1ad3      	subs	r3, r2, r3
 8018d06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018d0e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d12:	2200      	movs	r2, #0
 8018d14:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d1e:	895b      	ldrh	r3, [r3, #10]
 8018d20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018d24:	429a      	cmp	r2, r3
 8018d26:	d8e9      	bhi.n	8018cfc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018d28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018d30:	f7fb fdcc 	bl	80148cc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d38:	4a91      	ldr	r2, [pc, #580]	; (8018f80 <tcp_receive+0x884>)
 8018d3a:	6013      	str	r3, [r2, #0]
 8018d3c:	4b91      	ldr	r3, [pc, #580]	; (8018f84 <tcp_receive+0x888>)
 8018d3e:	691b      	ldr	r3, [r3, #16]
 8018d40:	4a8f      	ldr	r2, [pc, #572]	; (8018f80 <tcp_receive+0x884>)
 8018d42:	6812      	ldr	r2, [r2, #0]
 8018d44:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018d46:	e00d      	b.n	8018d64 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018d48:	4b8d      	ldr	r3, [pc, #564]	; (8018f80 <tcp_receive+0x884>)
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d50:	1ad3      	subs	r3, r2, r3
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	da06      	bge.n	8018d64 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	8b5b      	ldrh	r3, [r3, #26]
 8018d5a:	f043 0302 	orr.w	r3, r3, #2
 8018d5e:	b29a      	uxth	r2, r3
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018d64:	4b86      	ldr	r3, [pc, #536]	; (8018f80 <tcp_receive+0x884>)
 8018d66:	681a      	ldr	r2, [r3, #0]
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d6c:	1ad3      	subs	r3, r2, r3
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	f2c0 842a 	blt.w	80195c8 <tcp_receive+0xecc>
 8018d74:	4b82      	ldr	r3, [pc, #520]	; (8018f80 <tcp_receive+0x884>)
 8018d76:	681a      	ldr	r2, [r3, #0]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7c:	6879      	ldr	r1, [r7, #4]
 8018d7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018d80:	440b      	add	r3, r1
 8018d82:	1ad3      	subs	r3, r2, r3
 8018d84:	3301      	adds	r3, #1
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f300 841e 	bgt.w	80195c8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d90:	4b7b      	ldr	r3, [pc, #492]	; (8018f80 <tcp_receive+0x884>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	429a      	cmp	r2, r3
 8018d96:	f040 829a 	bne.w	80192ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018d9a:	4b7a      	ldr	r3, [pc, #488]	; (8018f84 <tcp_receive+0x888>)
 8018d9c:	891c      	ldrh	r4, [r3, #8]
 8018d9e:	4b79      	ldr	r3, [pc, #484]	; (8018f84 <tcp_receive+0x888>)
 8018da0:	691b      	ldr	r3, [r3, #16]
 8018da2:	899b      	ldrh	r3, [r3, #12]
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7f9 fa88 	bl	80122bc <lwip_htons>
 8018dac:	4603      	mov	r3, r0
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	f003 0303 	and.w	r3, r3, #3
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d001      	beq.n	8018dbc <tcp_receive+0x6c0>
 8018db8:	2301      	movs	r3, #1
 8018dba:	e000      	b.n	8018dbe <tcp_receive+0x6c2>
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	4423      	add	r3, r4
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	4b71      	ldr	r3, [pc, #452]	; (8018f88 <tcp_receive+0x88c>)
 8018dc4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018dca:	4b6f      	ldr	r3, [pc, #444]	; (8018f88 <tcp_receive+0x88c>)
 8018dcc:	881b      	ldrh	r3, [r3, #0]
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d275      	bcs.n	8018ebe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018dd2:	4b6c      	ldr	r3, [pc, #432]	; (8018f84 <tcp_receive+0x888>)
 8018dd4:	691b      	ldr	r3, [r3, #16]
 8018dd6:	899b      	ldrh	r3, [r3, #12]
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7f9 fa6e 	bl	80122bc <lwip_htons>
 8018de0:	4603      	mov	r3, r0
 8018de2:	b2db      	uxtb	r3, r3
 8018de4:	f003 0301 	and.w	r3, r3, #1
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d01f      	beq.n	8018e2c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018dec:	4b65      	ldr	r3, [pc, #404]	; (8018f84 <tcp_receive+0x888>)
 8018dee:	691b      	ldr	r3, [r3, #16]
 8018df0:	899b      	ldrh	r3, [r3, #12]
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	b21b      	sxth	r3, r3
 8018df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018dfa:	b21c      	sxth	r4, r3
 8018dfc:	4b61      	ldr	r3, [pc, #388]	; (8018f84 <tcp_receive+0x888>)
 8018dfe:	691b      	ldr	r3, [r3, #16]
 8018e00:	899b      	ldrh	r3, [r3, #12]
 8018e02:	b29b      	uxth	r3, r3
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7f9 fa59 	bl	80122bc <lwip_htons>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	b29b      	uxth	r3, r3
 8018e10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	4618      	mov	r0, r3
 8018e18:	f7f9 fa50 	bl	80122bc <lwip_htons>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	b21b      	sxth	r3, r3
 8018e20:	4323      	orrs	r3, r4
 8018e22:	b21a      	sxth	r2, r3
 8018e24:	4b57      	ldr	r3, [pc, #348]	; (8018f84 <tcp_receive+0x888>)
 8018e26:	691b      	ldr	r3, [r3, #16]
 8018e28:	b292      	uxth	r2, r2
 8018e2a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018e30:	4b54      	ldr	r3, [pc, #336]	; (8018f84 <tcp_receive+0x888>)
 8018e32:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018e34:	4b53      	ldr	r3, [pc, #332]	; (8018f84 <tcp_receive+0x888>)
 8018e36:	691b      	ldr	r3, [r3, #16]
 8018e38:	899b      	ldrh	r3, [r3, #12]
 8018e3a:	b29b      	uxth	r3, r3
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f7f9 fa3d 	bl	80122bc <lwip_htons>
 8018e42:	4603      	mov	r3, r0
 8018e44:	b2db      	uxtb	r3, r3
 8018e46:	f003 0302 	and.w	r3, r3, #2
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d005      	beq.n	8018e5a <tcp_receive+0x75e>
            inseg.len -= 1;
 8018e4e:	4b4d      	ldr	r3, [pc, #308]	; (8018f84 <tcp_receive+0x888>)
 8018e50:	891b      	ldrh	r3, [r3, #8]
 8018e52:	3b01      	subs	r3, #1
 8018e54:	b29a      	uxth	r2, r3
 8018e56:	4b4b      	ldr	r3, [pc, #300]	; (8018f84 <tcp_receive+0x888>)
 8018e58:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018e5a:	4b4a      	ldr	r3, [pc, #296]	; (8018f84 <tcp_receive+0x888>)
 8018e5c:	685b      	ldr	r3, [r3, #4]
 8018e5e:	4a49      	ldr	r2, [pc, #292]	; (8018f84 <tcp_receive+0x888>)
 8018e60:	8912      	ldrh	r2, [r2, #8]
 8018e62:	4611      	mov	r1, r2
 8018e64:	4618      	mov	r0, r3
 8018e66:	f7fb fc31 	bl	80146cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018e6a:	4b46      	ldr	r3, [pc, #280]	; (8018f84 <tcp_receive+0x888>)
 8018e6c:	891c      	ldrh	r4, [r3, #8]
 8018e6e:	4b45      	ldr	r3, [pc, #276]	; (8018f84 <tcp_receive+0x888>)
 8018e70:	691b      	ldr	r3, [r3, #16]
 8018e72:	899b      	ldrh	r3, [r3, #12]
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	4618      	mov	r0, r3
 8018e78:	f7f9 fa20 	bl	80122bc <lwip_htons>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	b2db      	uxtb	r3, r3
 8018e80:	f003 0303 	and.w	r3, r3, #3
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d001      	beq.n	8018e8c <tcp_receive+0x790>
 8018e88:	2301      	movs	r3, #1
 8018e8a:	e000      	b.n	8018e8e <tcp_receive+0x792>
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	4423      	add	r3, r4
 8018e90:	b29a      	uxth	r2, r3
 8018e92:	4b3d      	ldr	r3, [pc, #244]	; (8018f88 <tcp_receive+0x88c>)
 8018e94:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018e96:	4b3c      	ldr	r3, [pc, #240]	; (8018f88 <tcp_receive+0x88c>)
 8018e98:	881b      	ldrh	r3, [r3, #0]
 8018e9a:	461a      	mov	r2, r3
 8018e9c:	4b38      	ldr	r3, [pc, #224]	; (8018f80 <tcp_receive+0x884>)
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	441a      	add	r2, r3
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea6:	6879      	ldr	r1, [r7, #4]
 8018ea8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018eaa:	440b      	add	r3, r1
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d006      	beq.n	8018ebe <tcp_receive+0x7c2>
 8018eb0:	4b36      	ldr	r3, [pc, #216]	; (8018f8c <tcp_receive+0x890>)
 8018eb2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018eb6:	4936      	ldr	r1, [pc, #216]	; (8018f90 <tcp_receive+0x894>)
 8018eb8:	4836      	ldr	r0, [pc, #216]	; (8018f94 <tcp_receive+0x898>)
 8018eba:	f008 fe7b 	bl	8021bb4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	f000 80e7 	beq.w	8019096 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018ec8:	4b2e      	ldr	r3, [pc, #184]	; (8018f84 <tcp_receive+0x888>)
 8018eca:	691b      	ldr	r3, [r3, #16]
 8018ecc:	899b      	ldrh	r3, [r3, #12]
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7f9 f9f3 	bl	80122bc <lwip_htons>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	b2db      	uxtb	r3, r3
 8018eda:	f003 0301 	and.w	r3, r3, #1
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d010      	beq.n	8018f04 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018ee2:	e00a      	b.n	8018efa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ee8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018eee:	681a      	ldr	r2, [r3, #0]
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018ef4:	68f8      	ldr	r0, [r7, #12]
 8018ef6:	f7fd fcc8 	bl	801688a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d1f0      	bne.n	8018ee4 <tcp_receive+0x7e8>
 8018f02:	e0c8      	b.n	8019096 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f08:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018f0a:	e052      	b.n	8018fb2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f0e:	691b      	ldr	r3, [r3, #16]
 8018f10:	899b      	ldrh	r3, [r3, #12]
 8018f12:	b29b      	uxth	r3, r3
 8018f14:	4618      	mov	r0, r3
 8018f16:	f7f9 f9d1 	bl	80122bc <lwip_htons>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	b2db      	uxtb	r3, r3
 8018f1e:	f003 0301 	and.w	r3, r3, #1
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d03d      	beq.n	8018fa2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018f26:	4b17      	ldr	r3, [pc, #92]	; (8018f84 <tcp_receive+0x888>)
 8018f28:	691b      	ldr	r3, [r3, #16]
 8018f2a:	899b      	ldrh	r3, [r3, #12]
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7f9 f9c4 	bl	80122bc <lwip_htons>
 8018f34:	4603      	mov	r3, r0
 8018f36:	b2db      	uxtb	r3, r3
 8018f38:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d130      	bne.n	8018fa2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018f40:	4b10      	ldr	r3, [pc, #64]	; (8018f84 <tcp_receive+0x888>)
 8018f42:	691b      	ldr	r3, [r3, #16]
 8018f44:	899b      	ldrh	r3, [r3, #12]
 8018f46:	b29c      	uxth	r4, r3
 8018f48:	2001      	movs	r0, #1
 8018f4a:	f7f9 f9b7 	bl	80122bc <lwip_htons>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	461a      	mov	r2, r3
 8018f52:	4b0c      	ldr	r3, [pc, #48]	; (8018f84 <tcp_receive+0x888>)
 8018f54:	691b      	ldr	r3, [r3, #16]
 8018f56:	4322      	orrs	r2, r4
 8018f58:	b292      	uxth	r2, r2
 8018f5a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018f5c:	4b09      	ldr	r3, [pc, #36]	; (8018f84 <tcp_receive+0x888>)
 8018f5e:	891c      	ldrh	r4, [r3, #8]
 8018f60:	4b08      	ldr	r3, [pc, #32]	; (8018f84 <tcp_receive+0x888>)
 8018f62:	691b      	ldr	r3, [r3, #16]
 8018f64:	899b      	ldrh	r3, [r3, #12]
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7f9 f9a7 	bl	80122bc <lwip_htons>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	b2db      	uxtb	r3, r3
 8018f72:	f003 0303 	and.w	r3, r3, #3
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d00e      	beq.n	8018f98 <tcp_receive+0x89c>
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	e00d      	b.n	8018f9a <tcp_receive+0x89e>
 8018f7e:	bf00      	nop
 8018f80:	20014378 	.word	0x20014378
 8018f84:	20014354 	.word	0x20014354
 8018f88:	20014382 	.word	0x20014382
 8018f8c:	08027af8 	.word	0x08027af8
 8018f90:	08027ea0 	.word	0x08027ea0
 8018f94:	08027b44 	.word	0x08027b44
 8018f98:	2300      	movs	r3, #0
 8018f9a:	4423      	add	r3, r4
 8018f9c:	b29a      	uxth	r2, r3
 8018f9e:	4b98      	ldr	r3, [pc, #608]	; (8019200 <tcp_receive+0xb04>)
 8018fa0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fa4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018fac:	6938      	ldr	r0, [r7, #16]
 8018fae:	f7fd fc6c 	bl	801688a <tcp_seg_free>
            while (next &&
 8018fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d00e      	beq.n	8018fd6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018fb8:	4b91      	ldr	r3, [pc, #580]	; (8019200 <tcp_receive+0xb04>)
 8018fba:	881b      	ldrh	r3, [r3, #0]
 8018fbc:	461a      	mov	r2, r3
 8018fbe:	4b91      	ldr	r3, [pc, #580]	; (8019204 <tcp_receive+0xb08>)
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	441a      	add	r2, r3
 8018fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fc6:	691b      	ldr	r3, [r3, #16]
 8018fc8:	685b      	ldr	r3, [r3, #4]
 8018fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018fcc:	8909      	ldrh	r1, [r1, #8]
 8018fce:	440b      	add	r3, r1
 8018fd0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	da9a      	bge.n	8018f0c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d059      	beq.n	8019090 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018fdc:	4b88      	ldr	r3, [pc, #544]	; (8019200 <tcp_receive+0xb04>)
 8018fde:	881b      	ldrh	r3, [r3, #0]
 8018fe0:	461a      	mov	r2, r3
 8018fe2:	4b88      	ldr	r3, [pc, #544]	; (8019204 <tcp_receive+0xb08>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	441a      	add	r2, r3
 8018fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fea:	691b      	ldr	r3, [r3, #16]
 8018fec:	685b      	ldr	r3, [r3, #4]
 8018fee:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	dd4d      	ble.n	8019090 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ff6:	691b      	ldr	r3, [r3, #16]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	b29a      	uxth	r2, r3
 8018ffc:	4b81      	ldr	r3, [pc, #516]	; (8019204 <tcp_receive+0xb08>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	b29b      	uxth	r3, r3
 8019002:	1ad3      	subs	r3, r2, r3
 8019004:	b29a      	uxth	r2, r3
 8019006:	4b80      	ldr	r3, [pc, #512]	; (8019208 <tcp_receive+0xb0c>)
 8019008:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801900a:	4b7f      	ldr	r3, [pc, #508]	; (8019208 <tcp_receive+0xb0c>)
 801900c:	691b      	ldr	r3, [r3, #16]
 801900e:	899b      	ldrh	r3, [r3, #12]
 8019010:	b29b      	uxth	r3, r3
 8019012:	4618      	mov	r0, r3
 8019014:	f7f9 f952 	bl	80122bc <lwip_htons>
 8019018:	4603      	mov	r3, r0
 801901a:	b2db      	uxtb	r3, r3
 801901c:	f003 0302 	and.w	r3, r3, #2
 8019020:	2b00      	cmp	r3, #0
 8019022:	d005      	beq.n	8019030 <tcp_receive+0x934>
                inseg.len -= 1;
 8019024:	4b78      	ldr	r3, [pc, #480]	; (8019208 <tcp_receive+0xb0c>)
 8019026:	891b      	ldrh	r3, [r3, #8]
 8019028:	3b01      	subs	r3, #1
 801902a:	b29a      	uxth	r2, r3
 801902c:	4b76      	ldr	r3, [pc, #472]	; (8019208 <tcp_receive+0xb0c>)
 801902e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019030:	4b75      	ldr	r3, [pc, #468]	; (8019208 <tcp_receive+0xb0c>)
 8019032:	685b      	ldr	r3, [r3, #4]
 8019034:	4a74      	ldr	r2, [pc, #464]	; (8019208 <tcp_receive+0xb0c>)
 8019036:	8912      	ldrh	r2, [r2, #8]
 8019038:	4611      	mov	r1, r2
 801903a:	4618      	mov	r0, r3
 801903c:	f7fb fb46 	bl	80146cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019040:	4b71      	ldr	r3, [pc, #452]	; (8019208 <tcp_receive+0xb0c>)
 8019042:	891c      	ldrh	r4, [r3, #8]
 8019044:	4b70      	ldr	r3, [pc, #448]	; (8019208 <tcp_receive+0xb0c>)
 8019046:	691b      	ldr	r3, [r3, #16]
 8019048:	899b      	ldrh	r3, [r3, #12]
 801904a:	b29b      	uxth	r3, r3
 801904c:	4618      	mov	r0, r3
 801904e:	f7f9 f935 	bl	80122bc <lwip_htons>
 8019052:	4603      	mov	r3, r0
 8019054:	b2db      	uxtb	r3, r3
 8019056:	f003 0303 	and.w	r3, r3, #3
 801905a:	2b00      	cmp	r3, #0
 801905c:	d001      	beq.n	8019062 <tcp_receive+0x966>
 801905e:	2301      	movs	r3, #1
 8019060:	e000      	b.n	8019064 <tcp_receive+0x968>
 8019062:	2300      	movs	r3, #0
 8019064:	4423      	add	r3, r4
 8019066:	b29a      	uxth	r2, r3
 8019068:	4b65      	ldr	r3, [pc, #404]	; (8019200 <tcp_receive+0xb04>)
 801906a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801906c:	4b64      	ldr	r3, [pc, #400]	; (8019200 <tcp_receive+0xb04>)
 801906e:	881b      	ldrh	r3, [r3, #0]
 8019070:	461a      	mov	r2, r3
 8019072:	4b64      	ldr	r3, [pc, #400]	; (8019204 <tcp_receive+0xb08>)
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	441a      	add	r2, r3
 8019078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801907a:	691b      	ldr	r3, [r3, #16]
 801907c:	685b      	ldr	r3, [r3, #4]
 801907e:	429a      	cmp	r2, r3
 8019080:	d006      	beq.n	8019090 <tcp_receive+0x994>
 8019082:	4b62      	ldr	r3, [pc, #392]	; (801920c <tcp_receive+0xb10>)
 8019084:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019088:	4961      	ldr	r1, [pc, #388]	; (8019210 <tcp_receive+0xb14>)
 801908a:	4862      	ldr	r0, [pc, #392]	; (8019214 <tcp_receive+0xb18>)
 801908c:	f008 fd92 	bl	8021bb4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019094:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019096:	4b5a      	ldr	r3, [pc, #360]	; (8019200 <tcp_receive+0xb04>)
 8019098:	881b      	ldrh	r3, [r3, #0]
 801909a:	461a      	mov	r2, r3
 801909c:	4b59      	ldr	r3, [pc, #356]	; (8019204 <tcp_receive+0xb08>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	441a      	add	r2, r3
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80190aa:	4b55      	ldr	r3, [pc, #340]	; (8019200 <tcp_receive+0xb04>)
 80190ac:	881b      	ldrh	r3, [r3, #0]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d206      	bcs.n	80190c0 <tcp_receive+0x9c4>
 80190b2:	4b56      	ldr	r3, [pc, #344]	; (801920c <tcp_receive+0xb10>)
 80190b4:	f240 6207 	movw	r2, #1543	; 0x607
 80190b8:	4957      	ldr	r1, [pc, #348]	; (8019218 <tcp_receive+0xb1c>)
 80190ba:	4856      	ldr	r0, [pc, #344]	; (8019214 <tcp_receive+0xb18>)
 80190bc:	f008 fd7a 	bl	8021bb4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80190c4:	4b4e      	ldr	r3, [pc, #312]	; (8019200 <tcp_receive+0xb04>)
 80190c6:	881b      	ldrh	r3, [r3, #0]
 80190c8:	1ad3      	subs	r3, r2, r3
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80190d0:	6878      	ldr	r0, [r7, #4]
 80190d2:	f7fc fd9d 	bl	8015c10 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80190d6:	4b4c      	ldr	r3, [pc, #304]	; (8019208 <tcp_receive+0xb0c>)
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	891b      	ldrh	r3, [r3, #8]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d006      	beq.n	80190ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80190e0:	4b49      	ldr	r3, [pc, #292]	; (8019208 <tcp_receive+0xb0c>)
 80190e2:	685b      	ldr	r3, [r3, #4]
 80190e4:	4a4d      	ldr	r2, [pc, #308]	; (801921c <tcp_receive+0xb20>)
 80190e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80190e8:	4b47      	ldr	r3, [pc, #284]	; (8019208 <tcp_receive+0xb0c>)
 80190ea:	2200      	movs	r2, #0
 80190ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80190ee:	4b46      	ldr	r3, [pc, #280]	; (8019208 <tcp_receive+0xb0c>)
 80190f0:	691b      	ldr	r3, [r3, #16]
 80190f2:	899b      	ldrh	r3, [r3, #12]
 80190f4:	b29b      	uxth	r3, r3
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7f9 f8e0 	bl	80122bc <lwip_htons>
 80190fc:	4603      	mov	r3, r0
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	f003 0301 	and.w	r3, r3, #1
 8019104:	2b00      	cmp	r3, #0
 8019106:	f000 80b8 	beq.w	801927a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801910a:	4b45      	ldr	r3, [pc, #276]	; (8019220 <tcp_receive+0xb24>)
 801910c:	781b      	ldrb	r3, [r3, #0]
 801910e:	f043 0320 	orr.w	r3, r3, #32
 8019112:	b2da      	uxtb	r2, r3
 8019114:	4b42      	ldr	r3, [pc, #264]	; (8019220 <tcp_receive+0xb24>)
 8019116:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019118:	e0af      	b.n	801927a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801911e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019124:	691b      	ldr	r3, [r3, #16]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	4a36      	ldr	r2, [pc, #216]	; (8019204 <tcp_receive+0xb08>)
 801912a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	891b      	ldrh	r3, [r3, #8]
 8019130:	461c      	mov	r4, r3
 8019132:	68bb      	ldr	r3, [r7, #8]
 8019134:	691b      	ldr	r3, [r3, #16]
 8019136:	899b      	ldrh	r3, [r3, #12]
 8019138:	b29b      	uxth	r3, r3
 801913a:	4618      	mov	r0, r3
 801913c:	f7f9 f8be 	bl	80122bc <lwip_htons>
 8019140:	4603      	mov	r3, r0
 8019142:	b2db      	uxtb	r3, r3
 8019144:	f003 0303 	and.w	r3, r3, #3
 8019148:	2b00      	cmp	r3, #0
 801914a:	d001      	beq.n	8019150 <tcp_receive+0xa54>
 801914c:	2301      	movs	r3, #1
 801914e:	e000      	b.n	8019152 <tcp_receive+0xa56>
 8019150:	2300      	movs	r3, #0
 8019152:	191a      	adds	r2, r3, r4
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019158:	441a      	add	r2, r3
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019162:	461c      	mov	r4, r3
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	891b      	ldrh	r3, [r3, #8]
 8019168:	461d      	mov	r5, r3
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	691b      	ldr	r3, [r3, #16]
 801916e:	899b      	ldrh	r3, [r3, #12]
 8019170:	b29b      	uxth	r3, r3
 8019172:	4618      	mov	r0, r3
 8019174:	f7f9 f8a2 	bl	80122bc <lwip_htons>
 8019178:	4603      	mov	r3, r0
 801917a:	b2db      	uxtb	r3, r3
 801917c:	f003 0303 	and.w	r3, r3, #3
 8019180:	2b00      	cmp	r3, #0
 8019182:	d001      	beq.n	8019188 <tcp_receive+0xa8c>
 8019184:	2301      	movs	r3, #1
 8019186:	e000      	b.n	801918a <tcp_receive+0xa8e>
 8019188:	2300      	movs	r3, #0
 801918a:	442b      	add	r3, r5
 801918c:	429c      	cmp	r4, r3
 801918e:	d206      	bcs.n	801919e <tcp_receive+0xaa2>
 8019190:	4b1e      	ldr	r3, [pc, #120]	; (801920c <tcp_receive+0xb10>)
 8019192:	f240 622b 	movw	r2, #1579	; 0x62b
 8019196:	4923      	ldr	r1, [pc, #140]	; (8019224 <tcp_receive+0xb28>)
 8019198:	481e      	ldr	r0, [pc, #120]	; (8019214 <tcp_receive+0xb18>)
 801919a:	f008 fd0b 	bl	8021bb4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801919e:	68bb      	ldr	r3, [r7, #8]
 80191a0:	891b      	ldrh	r3, [r3, #8]
 80191a2:	461c      	mov	r4, r3
 80191a4:	68bb      	ldr	r3, [r7, #8]
 80191a6:	691b      	ldr	r3, [r3, #16]
 80191a8:	899b      	ldrh	r3, [r3, #12]
 80191aa:	b29b      	uxth	r3, r3
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7f9 f885 	bl	80122bc <lwip_htons>
 80191b2:	4603      	mov	r3, r0
 80191b4:	b2db      	uxtb	r3, r3
 80191b6:	f003 0303 	and.w	r3, r3, #3
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d001      	beq.n	80191c2 <tcp_receive+0xac6>
 80191be:	2301      	movs	r3, #1
 80191c0:	e000      	b.n	80191c4 <tcp_receive+0xac8>
 80191c2:	2300      	movs	r3, #0
 80191c4:	1919      	adds	r1, r3, r4
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80191ca:	b28b      	uxth	r3, r1
 80191cc:	1ad3      	subs	r3, r2, r3
 80191ce:	b29a      	uxth	r2, r3
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	f7fc fd1b 	bl	8015c10 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	685b      	ldr	r3, [r3, #4]
 80191de:	891b      	ldrh	r3, [r3, #8]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d028      	beq.n	8019236 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80191e4:	4b0d      	ldr	r3, [pc, #52]	; (801921c <tcp_receive+0xb20>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d01d      	beq.n	8019228 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80191ec:	4b0b      	ldr	r3, [pc, #44]	; (801921c <tcp_receive+0xb20>)
 80191ee:	681a      	ldr	r2, [r3, #0]
 80191f0:	68bb      	ldr	r3, [r7, #8]
 80191f2:	685b      	ldr	r3, [r3, #4]
 80191f4:	4619      	mov	r1, r3
 80191f6:	4610      	mov	r0, r2
 80191f8:	f7fb fcee 	bl	8014bd8 <pbuf_cat>
 80191fc:	e018      	b.n	8019230 <tcp_receive+0xb34>
 80191fe:	bf00      	nop
 8019200:	20014382 	.word	0x20014382
 8019204:	20014378 	.word	0x20014378
 8019208:	20014354 	.word	0x20014354
 801920c:	08027af8 	.word	0x08027af8
 8019210:	08027ed8 	.word	0x08027ed8
 8019214:	08027b44 	.word	0x08027b44
 8019218:	08027f14 	.word	0x08027f14
 801921c:	20014388 	.word	0x20014388
 8019220:	20014385 	.word	0x20014385
 8019224:	08027f34 	.word	0x08027f34
            } else {
              recv_data = cseg->p;
 8019228:	68bb      	ldr	r3, [r7, #8]
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	4a70      	ldr	r2, [pc, #448]	; (80193f0 <tcp_receive+0xcf4>)
 801922e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019230:	68bb      	ldr	r3, [r7, #8]
 8019232:	2200      	movs	r2, #0
 8019234:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019236:	68bb      	ldr	r3, [r7, #8]
 8019238:	691b      	ldr	r3, [r3, #16]
 801923a:	899b      	ldrh	r3, [r3, #12]
 801923c:	b29b      	uxth	r3, r3
 801923e:	4618      	mov	r0, r3
 8019240:	f7f9 f83c 	bl	80122bc <lwip_htons>
 8019244:	4603      	mov	r3, r0
 8019246:	b2db      	uxtb	r3, r3
 8019248:	f003 0301 	and.w	r3, r3, #1
 801924c:	2b00      	cmp	r3, #0
 801924e:	d00d      	beq.n	801926c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019250:	4b68      	ldr	r3, [pc, #416]	; (80193f4 <tcp_receive+0xcf8>)
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	f043 0320 	orr.w	r3, r3, #32
 8019258:	b2da      	uxtb	r2, r3
 801925a:	4b66      	ldr	r3, [pc, #408]	; (80193f4 <tcp_receive+0xcf8>)
 801925c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	7d1b      	ldrb	r3, [r3, #20]
 8019262:	2b04      	cmp	r3, #4
 8019264:	d102      	bne.n	801926c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2207      	movs	r2, #7
 801926a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801926c:	68bb      	ldr	r3, [r7, #8]
 801926e:	681a      	ldr	r2, [r3, #0]
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019274:	68b8      	ldr	r0, [r7, #8]
 8019276:	f7fd fb08 	bl	801688a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801927e:	2b00      	cmp	r3, #0
 8019280:	d008      	beq.n	8019294 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019286:	691b      	ldr	r3, [r3, #16]
 8019288:	685a      	ldr	r2, [r3, #4]
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801928e:	429a      	cmp	r2, r3
 8019290:	f43f af43 	beq.w	801911a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	8b5b      	ldrh	r3, [r3, #26]
 8019298:	f003 0301 	and.w	r3, r3, #1
 801929c:	2b00      	cmp	r3, #0
 801929e:	d00e      	beq.n	80192be <tcp_receive+0xbc2>
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	8b5b      	ldrh	r3, [r3, #26]
 80192a4:	f023 0301 	bic.w	r3, r3, #1
 80192a8:	b29a      	uxth	r2, r3
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	835a      	strh	r2, [r3, #26]
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	8b5b      	ldrh	r3, [r3, #26]
 80192b2:	f043 0302 	orr.w	r3, r3, #2
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80192bc:	e188      	b.n	80195d0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	8b5b      	ldrh	r3, [r3, #26]
 80192c2:	f043 0301 	orr.w	r3, r3, #1
 80192c6:	b29a      	uxth	r2, r3
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80192cc:	e180      	b.n	80195d0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d106      	bne.n	80192e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80192d6:	4848      	ldr	r0, [pc, #288]	; (80193f8 <tcp_receive+0xcfc>)
 80192d8:	f7fd faf0 	bl	80168bc <tcp_seg_copy>
 80192dc:	4602      	mov	r2, r0
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	675a      	str	r2, [r3, #116]	; 0x74
 80192e2:	e16d      	b.n	80195c0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80192e4:	2300      	movs	r3, #0
 80192e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80192ee:	e157      	b.n	80195a0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80192f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192f2:	691b      	ldr	r3, [r3, #16]
 80192f4:	685a      	ldr	r2, [r3, #4]
 80192f6:	4b41      	ldr	r3, [pc, #260]	; (80193fc <tcp_receive+0xd00>)
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	429a      	cmp	r2, r3
 80192fc:	d11d      	bne.n	801933a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80192fe:	4b3e      	ldr	r3, [pc, #248]	; (80193f8 <tcp_receive+0xcfc>)
 8019300:	891a      	ldrh	r2, [r3, #8]
 8019302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019304:	891b      	ldrh	r3, [r3, #8]
 8019306:	429a      	cmp	r2, r3
 8019308:	f240 814f 	bls.w	80195aa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801930c:	483a      	ldr	r0, [pc, #232]	; (80193f8 <tcp_receive+0xcfc>)
 801930e:	f7fd fad5 	bl	80168bc <tcp_seg_copy>
 8019312:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019314:	697b      	ldr	r3, [r7, #20]
 8019316:	2b00      	cmp	r3, #0
 8019318:	f000 8149 	beq.w	80195ae <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801931e:	2b00      	cmp	r3, #0
 8019320:	d003      	beq.n	801932a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019324:	697a      	ldr	r2, [r7, #20]
 8019326:	601a      	str	r2, [r3, #0]
 8019328:	e002      	b.n	8019330 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	697a      	ldr	r2, [r7, #20]
 801932e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019332:	6978      	ldr	r0, [r7, #20]
 8019334:	f7ff f8de 	bl	80184f4 <tcp_oos_insert_segment>
                }
                break;
 8019338:	e139      	b.n	80195ae <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801933c:	2b00      	cmp	r3, #0
 801933e:	d117      	bne.n	8019370 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019340:	4b2e      	ldr	r3, [pc, #184]	; (80193fc <tcp_receive+0xd00>)
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019346:	691b      	ldr	r3, [r3, #16]
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	1ad3      	subs	r3, r2, r3
 801934c:	2b00      	cmp	r3, #0
 801934e:	da57      	bge.n	8019400 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019350:	4829      	ldr	r0, [pc, #164]	; (80193f8 <tcp_receive+0xcfc>)
 8019352:	f7fd fab3 	bl	80168bc <tcp_seg_copy>
 8019356:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019358:	69bb      	ldr	r3, [r7, #24]
 801935a:	2b00      	cmp	r3, #0
 801935c:	f000 8129 	beq.w	80195b2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	69ba      	ldr	r2, [r7, #24]
 8019364:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019368:	69b8      	ldr	r0, [r7, #24]
 801936a:	f7ff f8c3 	bl	80184f4 <tcp_oos_insert_segment>
                  }
                  break;
 801936e:	e120      	b.n	80195b2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019370:	4b22      	ldr	r3, [pc, #136]	; (80193fc <tcp_receive+0xd00>)
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019376:	691b      	ldr	r3, [r3, #16]
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	1ad3      	subs	r3, r2, r3
 801937c:	3b01      	subs	r3, #1
 801937e:	2b00      	cmp	r3, #0
 8019380:	db3e      	blt.n	8019400 <tcp_receive+0xd04>
 8019382:	4b1e      	ldr	r3, [pc, #120]	; (80193fc <tcp_receive+0xd00>)
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019388:	691b      	ldr	r3, [r3, #16]
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	1ad3      	subs	r3, r2, r3
 801938e:	3301      	adds	r3, #1
 8019390:	2b00      	cmp	r3, #0
 8019392:	dc35      	bgt.n	8019400 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019394:	4818      	ldr	r0, [pc, #96]	; (80193f8 <tcp_receive+0xcfc>)
 8019396:	f7fd fa91 	bl	80168bc <tcp_seg_copy>
 801939a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801939c:	69fb      	ldr	r3, [r7, #28]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	f000 8109 	beq.w	80195b6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80193a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193a6:	691b      	ldr	r3, [r3, #16]
 80193a8:	685b      	ldr	r3, [r3, #4]
 80193aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193ac:	8912      	ldrh	r2, [r2, #8]
 80193ae:	441a      	add	r2, r3
 80193b0:	4b12      	ldr	r3, [pc, #72]	; (80193fc <tcp_receive+0xd00>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	1ad3      	subs	r3, r2, r3
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	dd12      	ble.n	80193e0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80193ba:	4b10      	ldr	r3, [pc, #64]	; (80193fc <tcp_receive+0xd00>)
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	b29a      	uxth	r2, r3
 80193c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193c2:	691b      	ldr	r3, [r3, #16]
 80193c4:	685b      	ldr	r3, [r3, #4]
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	1ad3      	subs	r3, r2, r3
 80193ca:	b29a      	uxth	r2, r3
 80193cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80193d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193d2:	685a      	ldr	r2, [r3, #4]
 80193d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193d6:	891b      	ldrh	r3, [r3, #8]
 80193d8:	4619      	mov	r1, r3
 80193da:	4610      	mov	r0, r2
 80193dc:	f7fb f976 	bl	80146cc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80193e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193e2:	69fa      	ldr	r2, [r7, #28]
 80193e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80193e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80193e8:	69f8      	ldr	r0, [r7, #28]
 80193ea:	f7ff f883 	bl	80184f4 <tcp_oos_insert_segment>
                  }
                  break;
 80193ee:	e0e2      	b.n	80195b6 <tcp_receive+0xeba>
 80193f0:	20014388 	.word	0x20014388
 80193f4:	20014385 	.word	0x20014385
 80193f8:	20014354 	.word	0x20014354
 80193fc:	20014378 	.word	0x20014378
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019402:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	2b00      	cmp	r3, #0
 801940a:	f040 80c6 	bne.w	801959a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801940e:	4b80      	ldr	r3, [pc, #512]	; (8019610 <tcp_receive+0xf14>)
 8019410:	681a      	ldr	r2, [r3, #0]
 8019412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019414:	691b      	ldr	r3, [r3, #16]
 8019416:	685b      	ldr	r3, [r3, #4]
 8019418:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801941a:	2b00      	cmp	r3, #0
 801941c:	f340 80bd 	ble.w	801959a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019422:	691b      	ldr	r3, [r3, #16]
 8019424:	899b      	ldrh	r3, [r3, #12]
 8019426:	b29b      	uxth	r3, r3
 8019428:	4618      	mov	r0, r3
 801942a:	f7f8 ff47 	bl	80122bc <lwip_htons>
 801942e:	4603      	mov	r3, r0
 8019430:	b2db      	uxtb	r3, r3
 8019432:	f003 0301 	and.w	r3, r3, #1
 8019436:	2b00      	cmp	r3, #0
 8019438:	f040 80bf 	bne.w	80195ba <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801943c:	4875      	ldr	r0, [pc, #468]	; (8019614 <tcp_receive+0xf18>)
 801943e:	f7fd fa3d 	bl	80168bc <tcp_seg_copy>
 8019442:	4602      	mov	r2, r0
 8019444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019446:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	2b00      	cmp	r3, #0
 801944e:	f000 80b6 	beq.w	80195be <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019454:	691b      	ldr	r3, [r3, #16]
 8019456:	685b      	ldr	r3, [r3, #4]
 8019458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801945a:	8912      	ldrh	r2, [r2, #8]
 801945c:	441a      	add	r2, r3
 801945e:	4b6c      	ldr	r3, [pc, #432]	; (8019610 <tcp_receive+0xf14>)
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	1ad3      	subs	r3, r2, r3
 8019464:	2b00      	cmp	r3, #0
 8019466:	dd12      	ble.n	801948e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019468:	4b69      	ldr	r3, [pc, #420]	; (8019610 <tcp_receive+0xf14>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	b29a      	uxth	r2, r3
 801946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019470:	691b      	ldr	r3, [r3, #16]
 8019472:	685b      	ldr	r3, [r3, #4]
 8019474:	b29b      	uxth	r3, r3
 8019476:	1ad3      	subs	r3, r2, r3
 8019478:	b29a      	uxth	r2, r3
 801947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801947c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019480:	685a      	ldr	r2, [r3, #4]
 8019482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019484:	891b      	ldrh	r3, [r3, #8]
 8019486:	4619      	mov	r1, r3
 8019488:	4610      	mov	r0, r2
 801948a:	f7fb f91f 	bl	80146cc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801948e:	4b62      	ldr	r3, [pc, #392]	; (8019618 <tcp_receive+0xf1c>)
 8019490:	881b      	ldrh	r3, [r3, #0]
 8019492:	461a      	mov	r2, r3
 8019494:	4b5e      	ldr	r3, [pc, #376]	; (8019610 <tcp_receive+0xf14>)
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	441a      	add	r2, r3
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801949e:	6879      	ldr	r1, [r7, #4]
 80194a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80194a2:	440b      	add	r3, r1
 80194a4:	1ad3      	subs	r3, r2, r3
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	f340 8089 	ble.w	80195be <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80194ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	691b      	ldr	r3, [r3, #16]
 80194b2:	899b      	ldrh	r3, [r3, #12]
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	4618      	mov	r0, r3
 80194b8:	f7f8 ff00 	bl	80122bc <lwip_htons>
 80194bc:	4603      	mov	r3, r0
 80194be:	b2db      	uxtb	r3, r3
 80194c0:	f003 0301 	and.w	r3, r3, #1
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d022      	beq.n	801950e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80194c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	691b      	ldr	r3, [r3, #16]
 80194ce:	899b      	ldrh	r3, [r3, #12]
 80194d0:	b29b      	uxth	r3, r3
 80194d2:	b21b      	sxth	r3, r3
 80194d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80194d8:	b21c      	sxth	r4, r3
 80194da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	691b      	ldr	r3, [r3, #16]
 80194e0:	899b      	ldrh	r3, [r3, #12]
 80194e2:	b29b      	uxth	r3, r3
 80194e4:	4618      	mov	r0, r3
 80194e6:	f7f8 fee9 	bl	80122bc <lwip_htons>
 80194ea:	4603      	mov	r3, r0
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80194f4:	b29b      	uxth	r3, r3
 80194f6:	4618      	mov	r0, r3
 80194f8:	f7f8 fee0 	bl	80122bc <lwip_htons>
 80194fc:	4603      	mov	r3, r0
 80194fe:	b21b      	sxth	r3, r3
 8019500:	4323      	orrs	r3, r4
 8019502:	b21a      	sxth	r2, r3
 8019504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	691b      	ldr	r3, [r3, #16]
 801950a:	b292      	uxth	r2, r2
 801950c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019512:	b29a      	uxth	r2, r3
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019518:	4413      	add	r3, r2
 801951a:	b299      	uxth	r1, r3
 801951c:	4b3c      	ldr	r3, [pc, #240]	; (8019610 <tcp_receive+0xf14>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	b29a      	uxth	r2, r3
 8019522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	1a8a      	subs	r2, r1, r2
 8019528:	b292      	uxth	r2, r2
 801952a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	685a      	ldr	r2, [r3, #4]
 8019532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	891b      	ldrh	r3, [r3, #8]
 8019538:	4619      	mov	r1, r3
 801953a:	4610      	mov	r0, r2
 801953c:	f7fb f8c6 	bl	80146cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	891c      	ldrh	r4, [r3, #8]
 8019546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	691b      	ldr	r3, [r3, #16]
 801954c:	899b      	ldrh	r3, [r3, #12]
 801954e:	b29b      	uxth	r3, r3
 8019550:	4618      	mov	r0, r3
 8019552:	f7f8 feb3 	bl	80122bc <lwip_htons>
 8019556:	4603      	mov	r3, r0
 8019558:	b2db      	uxtb	r3, r3
 801955a:	f003 0303 	and.w	r3, r3, #3
 801955e:	2b00      	cmp	r3, #0
 8019560:	d001      	beq.n	8019566 <tcp_receive+0xe6a>
 8019562:	2301      	movs	r3, #1
 8019564:	e000      	b.n	8019568 <tcp_receive+0xe6c>
 8019566:	2300      	movs	r3, #0
 8019568:	4423      	add	r3, r4
 801956a:	b29a      	uxth	r2, r3
 801956c:	4b2a      	ldr	r3, [pc, #168]	; (8019618 <tcp_receive+0xf1c>)
 801956e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019570:	4b29      	ldr	r3, [pc, #164]	; (8019618 <tcp_receive+0xf1c>)
 8019572:	881b      	ldrh	r3, [r3, #0]
 8019574:	461a      	mov	r2, r3
 8019576:	4b26      	ldr	r3, [pc, #152]	; (8019610 <tcp_receive+0xf14>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	441a      	add	r2, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019580:	6879      	ldr	r1, [r7, #4]
 8019582:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019584:	440b      	add	r3, r1
 8019586:	429a      	cmp	r2, r3
 8019588:	d019      	beq.n	80195be <tcp_receive+0xec2>
 801958a:	4b24      	ldr	r3, [pc, #144]	; (801961c <tcp_receive+0xf20>)
 801958c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8019590:	4923      	ldr	r1, [pc, #140]	; (8019620 <tcp_receive+0xf24>)
 8019592:	4824      	ldr	r0, [pc, #144]	; (8019624 <tcp_receive+0xf28>)
 8019594:	f008 fb0e 	bl	8021bb4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019598:	e011      	b.n	80195be <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	63bb      	str	r3, [r7, #56]	; 0x38
 80195a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	f47f aea4 	bne.w	80192f0 <tcp_receive+0xbf4>
 80195a8:	e00a      	b.n	80195c0 <tcp_receive+0xec4>
                break;
 80195aa:	bf00      	nop
 80195ac:	e008      	b.n	80195c0 <tcp_receive+0xec4>
                break;
 80195ae:	bf00      	nop
 80195b0:	e006      	b.n	80195c0 <tcp_receive+0xec4>
                  break;
 80195b2:	bf00      	nop
 80195b4:	e004      	b.n	80195c0 <tcp_receive+0xec4>
                  break;
 80195b6:	bf00      	nop
 80195b8:	e002      	b.n	80195c0 <tcp_receive+0xec4>
                  break;
 80195ba:	bf00      	nop
 80195bc:	e000      	b.n	80195c0 <tcp_receive+0xec4>
                break;
 80195be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	f001 fef7 	bl	801b3b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80195c6:	e003      	b.n	80195d0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f001 fef3 	bl	801b3b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80195ce:	e01a      	b.n	8019606 <tcp_receive+0xf0a>
 80195d0:	e019      	b.n	8019606 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80195d2:	4b0f      	ldr	r3, [pc, #60]	; (8019610 <tcp_receive+0xf14>)
 80195d4:	681a      	ldr	r2, [r3, #0]
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195da:	1ad3      	subs	r3, r2, r3
 80195dc:	2b00      	cmp	r3, #0
 80195de:	db0a      	blt.n	80195f6 <tcp_receive+0xefa>
 80195e0:	4b0b      	ldr	r3, [pc, #44]	; (8019610 <tcp_receive+0xf14>)
 80195e2:	681a      	ldr	r2, [r3, #0]
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195e8:	6879      	ldr	r1, [r7, #4]
 80195ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80195ec:	440b      	add	r3, r1
 80195ee:	1ad3      	subs	r3, r2, r3
 80195f0:	3301      	adds	r3, #1
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	dd07      	ble.n	8019606 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	8b5b      	ldrh	r3, [r3, #26]
 80195fa:	f043 0302 	orr.w	r3, r3, #2
 80195fe:	b29a      	uxth	r2, r3
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019604:	e7ff      	b.n	8019606 <tcp_receive+0xf0a>
 8019606:	bf00      	nop
 8019608:	3750      	adds	r7, #80	; 0x50
 801960a:	46bd      	mov	sp, r7
 801960c:	bdb0      	pop	{r4, r5, r7, pc}
 801960e:	bf00      	nop
 8019610:	20014378 	.word	0x20014378
 8019614:	20014354 	.word	0x20014354
 8019618:	20014382 	.word	0x20014382
 801961c:	08027af8 	.word	0x08027af8
 8019620:	08027ea0 	.word	0x08027ea0
 8019624:	08027b44 	.word	0x08027b44

08019628 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019628:	b480      	push	{r7}
 801962a:	b083      	sub	sp, #12
 801962c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801962e:	4b15      	ldr	r3, [pc, #84]	; (8019684 <tcp_get_next_optbyte+0x5c>)
 8019630:	881b      	ldrh	r3, [r3, #0]
 8019632:	1c5a      	adds	r2, r3, #1
 8019634:	b291      	uxth	r1, r2
 8019636:	4a13      	ldr	r2, [pc, #76]	; (8019684 <tcp_get_next_optbyte+0x5c>)
 8019638:	8011      	strh	r1, [r2, #0]
 801963a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801963c:	4b12      	ldr	r3, [pc, #72]	; (8019688 <tcp_get_next_optbyte+0x60>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d004      	beq.n	801964e <tcp_get_next_optbyte+0x26>
 8019644:	4b11      	ldr	r3, [pc, #68]	; (801968c <tcp_get_next_optbyte+0x64>)
 8019646:	881b      	ldrh	r3, [r3, #0]
 8019648:	88fa      	ldrh	r2, [r7, #6]
 801964a:	429a      	cmp	r2, r3
 801964c:	d208      	bcs.n	8019660 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801964e:	4b10      	ldr	r3, [pc, #64]	; (8019690 <tcp_get_next_optbyte+0x68>)
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	3314      	adds	r3, #20
 8019654:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019656:	88fb      	ldrh	r3, [r7, #6]
 8019658:	683a      	ldr	r2, [r7, #0]
 801965a:	4413      	add	r3, r2
 801965c:	781b      	ldrb	r3, [r3, #0]
 801965e:	e00b      	b.n	8019678 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019660:	88fb      	ldrh	r3, [r7, #6]
 8019662:	b2da      	uxtb	r2, r3
 8019664:	4b09      	ldr	r3, [pc, #36]	; (801968c <tcp_get_next_optbyte+0x64>)
 8019666:	881b      	ldrh	r3, [r3, #0]
 8019668:	b2db      	uxtb	r3, r3
 801966a:	1ad3      	subs	r3, r2, r3
 801966c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801966e:	4b06      	ldr	r3, [pc, #24]	; (8019688 <tcp_get_next_optbyte+0x60>)
 8019670:	681a      	ldr	r2, [r3, #0]
 8019672:	797b      	ldrb	r3, [r7, #5]
 8019674:	4413      	add	r3, r2
 8019676:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019678:	4618      	mov	r0, r3
 801967a:	370c      	adds	r7, #12
 801967c:	46bd      	mov	sp, r7
 801967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019682:	4770      	bx	lr
 8019684:	20014374 	.word	0x20014374
 8019688:	20014370 	.word	0x20014370
 801968c:	2001436e 	.word	0x2001436e
 8019690:	20014368 	.word	0x20014368

08019694 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d106      	bne.n	80196b0 <tcp_parseopt+0x1c>
 80196a2:	4b32      	ldr	r3, [pc, #200]	; (801976c <tcp_parseopt+0xd8>)
 80196a4:	f240 727d 	movw	r2, #1917	; 0x77d
 80196a8:	4931      	ldr	r1, [pc, #196]	; (8019770 <tcp_parseopt+0xdc>)
 80196aa:	4832      	ldr	r0, [pc, #200]	; (8019774 <tcp_parseopt+0xe0>)
 80196ac:	f008 fa82 	bl	8021bb4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80196b0:	4b31      	ldr	r3, [pc, #196]	; (8019778 <tcp_parseopt+0xe4>)
 80196b2:	881b      	ldrh	r3, [r3, #0]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d055      	beq.n	8019764 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80196b8:	4b30      	ldr	r3, [pc, #192]	; (801977c <tcp_parseopt+0xe8>)
 80196ba:	2200      	movs	r2, #0
 80196bc:	801a      	strh	r2, [r3, #0]
 80196be:	e045      	b.n	801974c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80196c0:	f7ff ffb2 	bl	8019628 <tcp_get_next_optbyte>
 80196c4:	4603      	mov	r3, r0
 80196c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80196c8:	7bfb      	ldrb	r3, [r7, #15]
 80196ca:	2b02      	cmp	r3, #2
 80196cc:	d006      	beq.n	80196dc <tcp_parseopt+0x48>
 80196ce:	2b02      	cmp	r3, #2
 80196d0:	dc2b      	bgt.n	801972a <tcp_parseopt+0x96>
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d041      	beq.n	801975a <tcp_parseopt+0xc6>
 80196d6:	2b01      	cmp	r3, #1
 80196d8:	d127      	bne.n	801972a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80196da:	e037      	b.n	801974c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80196dc:	f7ff ffa4 	bl	8019628 <tcp_get_next_optbyte>
 80196e0:	4603      	mov	r3, r0
 80196e2:	2b04      	cmp	r3, #4
 80196e4:	d13b      	bne.n	801975e <tcp_parseopt+0xca>
 80196e6:	4b25      	ldr	r3, [pc, #148]	; (801977c <tcp_parseopt+0xe8>)
 80196e8:	881b      	ldrh	r3, [r3, #0]
 80196ea:	3301      	adds	r3, #1
 80196ec:	4a22      	ldr	r2, [pc, #136]	; (8019778 <tcp_parseopt+0xe4>)
 80196ee:	8812      	ldrh	r2, [r2, #0]
 80196f0:	4293      	cmp	r3, r2
 80196f2:	da34      	bge.n	801975e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80196f4:	f7ff ff98 	bl	8019628 <tcp_get_next_optbyte>
 80196f8:	4603      	mov	r3, r0
 80196fa:	b29b      	uxth	r3, r3
 80196fc:	021b      	lsls	r3, r3, #8
 80196fe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019700:	f7ff ff92 	bl	8019628 <tcp_get_next_optbyte>
 8019704:	4603      	mov	r3, r0
 8019706:	b29a      	uxth	r2, r3
 8019708:	89bb      	ldrh	r3, [r7, #12]
 801970a:	4313      	orrs	r3, r2
 801970c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801970e:	89bb      	ldrh	r3, [r7, #12]
 8019710:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019714:	d804      	bhi.n	8019720 <tcp_parseopt+0x8c>
 8019716:	89bb      	ldrh	r3, [r7, #12]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d001      	beq.n	8019720 <tcp_parseopt+0x8c>
 801971c:	89ba      	ldrh	r2, [r7, #12]
 801971e:	e001      	b.n	8019724 <tcp_parseopt+0x90>
 8019720:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019728:	e010      	b.n	801974c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801972a:	f7ff ff7d 	bl	8019628 <tcp_get_next_optbyte>
 801972e:	4603      	mov	r3, r0
 8019730:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019732:	7afb      	ldrb	r3, [r7, #11]
 8019734:	2b01      	cmp	r3, #1
 8019736:	d914      	bls.n	8019762 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019738:	7afb      	ldrb	r3, [r7, #11]
 801973a:	b29a      	uxth	r2, r3
 801973c:	4b0f      	ldr	r3, [pc, #60]	; (801977c <tcp_parseopt+0xe8>)
 801973e:	881b      	ldrh	r3, [r3, #0]
 8019740:	4413      	add	r3, r2
 8019742:	b29b      	uxth	r3, r3
 8019744:	3b02      	subs	r3, #2
 8019746:	b29a      	uxth	r2, r3
 8019748:	4b0c      	ldr	r3, [pc, #48]	; (801977c <tcp_parseopt+0xe8>)
 801974a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801974c:	4b0b      	ldr	r3, [pc, #44]	; (801977c <tcp_parseopt+0xe8>)
 801974e:	881a      	ldrh	r2, [r3, #0]
 8019750:	4b09      	ldr	r3, [pc, #36]	; (8019778 <tcp_parseopt+0xe4>)
 8019752:	881b      	ldrh	r3, [r3, #0]
 8019754:	429a      	cmp	r2, r3
 8019756:	d3b3      	bcc.n	80196c0 <tcp_parseopt+0x2c>
 8019758:	e004      	b.n	8019764 <tcp_parseopt+0xd0>
          return;
 801975a:	bf00      	nop
 801975c:	e002      	b.n	8019764 <tcp_parseopt+0xd0>
            return;
 801975e:	bf00      	nop
 8019760:	e000      	b.n	8019764 <tcp_parseopt+0xd0>
            return;
 8019762:	bf00      	nop
      }
    }
  }
}
 8019764:	3710      	adds	r7, #16
 8019766:	46bd      	mov	sp, r7
 8019768:	bd80      	pop	{r7, pc}
 801976a:	bf00      	nop
 801976c:	08027af8 	.word	0x08027af8
 8019770:	08027f5c 	.word	0x08027f5c
 8019774:	08027b44 	.word	0x08027b44
 8019778:	2001436c 	.word	0x2001436c
 801977c:	20014374 	.word	0x20014374

08019780 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019780:	b480      	push	{r7}
 8019782:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019784:	4b05      	ldr	r3, [pc, #20]	; (801979c <tcp_trigger_input_pcb_close+0x1c>)
 8019786:	781b      	ldrb	r3, [r3, #0]
 8019788:	f043 0310 	orr.w	r3, r3, #16
 801978c:	b2da      	uxtb	r2, r3
 801978e:	4b03      	ldr	r3, [pc, #12]	; (801979c <tcp_trigger_input_pcb_close+0x1c>)
 8019790:	701a      	strb	r2, [r3, #0]
}
 8019792:	bf00      	nop
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	20014385 	.word	0x20014385

080197a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	60f8      	str	r0, [r7, #12]
 80197a8:	60b9      	str	r1, [r7, #8]
 80197aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d00a      	beq.n	80197c8 <tcp_route+0x28>
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	7a1b      	ldrb	r3, [r3, #8]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d006      	beq.n	80197c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	7a1b      	ldrb	r3, [r3, #8]
 80197be:	4618      	mov	r0, r3
 80197c0:	f7fa fd7c 	bl	80142bc <netif_get_by_index>
 80197c4:	4603      	mov	r3, r0
 80197c6:	e003      	b.n	80197d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80197c8:	6878      	ldr	r0, [r7, #4]
 80197ca:	f005 fe5f 	bl	801f48c <ip4_route>
 80197ce:	4603      	mov	r3, r0
  }
}
 80197d0:	4618      	mov	r0, r3
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80197d8:	b590      	push	{r4, r7, lr}
 80197da:	b087      	sub	sp, #28
 80197dc:	af00      	add	r7, sp, #0
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	603b      	str	r3, [r7, #0]
 80197e4:	4613      	mov	r3, r2
 80197e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d105      	bne.n	80197fa <tcp_create_segment+0x22>
 80197ee:	4b45      	ldr	r3, [pc, #276]	; (8019904 <tcp_create_segment+0x12c>)
 80197f0:	22a3      	movs	r2, #163	; 0xa3
 80197f2:	4945      	ldr	r1, [pc, #276]	; (8019908 <tcp_create_segment+0x130>)
 80197f4:	4845      	ldr	r0, [pc, #276]	; (801990c <tcp_create_segment+0x134>)
 80197f6:	f008 f9dd 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80197fa:	68bb      	ldr	r3, [r7, #8]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d105      	bne.n	801980c <tcp_create_segment+0x34>
 8019800:	4b40      	ldr	r3, [pc, #256]	; (8019904 <tcp_create_segment+0x12c>)
 8019802:	22a4      	movs	r2, #164	; 0xa4
 8019804:	4942      	ldr	r1, [pc, #264]	; (8019910 <tcp_create_segment+0x138>)
 8019806:	4841      	ldr	r0, [pc, #260]	; (801990c <tcp_create_segment+0x134>)
 8019808:	f008 f9d4 	bl	8021bb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801980c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	b2db      	uxtb	r3, r3
 8019814:	f003 0304 	and.w	r3, r3, #4
 8019818:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801981a:	2003      	movs	r0, #3
 801981c:	f7fa f9da 	bl	8013bd4 <memp_malloc>
 8019820:	6138      	str	r0, [r7, #16]
 8019822:	693b      	ldr	r3, [r7, #16]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d104      	bne.n	8019832 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019828:	68b8      	ldr	r0, [r7, #8]
 801982a:	f7fb f907 	bl	8014a3c <pbuf_free>
    return NULL;
 801982e:	2300      	movs	r3, #0
 8019830:	e064      	b.n	80198fc <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8019832:	693b      	ldr	r3, [r7, #16]
 8019834:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019838:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801983a:	693b      	ldr	r3, [r7, #16]
 801983c:	2200      	movs	r2, #0
 801983e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	68ba      	ldr	r2, [r7, #8]
 8019844:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	891a      	ldrh	r2, [r3, #8]
 801984a:	7dfb      	ldrb	r3, [r7, #23]
 801984c:	b29b      	uxth	r3, r3
 801984e:	429a      	cmp	r2, r3
 8019850:	d205      	bcs.n	801985e <tcp_create_segment+0x86>
 8019852:	4b2c      	ldr	r3, [pc, #176]	; (8019904 <tcp_create_segment+0x12c>)
 8019854:	22b0      	movs	r2, #176	; 0xb0
 8019856:	492f      	ldr	r1, [pc, #188]	; (8019914 <tcp_create_segment+0x13c>)
 8019858:	482c      	ldr	r0, [pc, #176]	; (801990c <tcp_create_segment+0x134>)
 801985a:	f008 f9ab 	bl	8021bb4 <iprintf>
  seg->len = p->tot_len - optlen;
 801985e:	68bb      	ldr	r3, [r7, #8]
 8019860:	891a      	ldrh	r2, [r3, #8]
 8019862:	7dfb      	ldrb	r3, [r7, #23]
 8019864:	b29b      	uxth	r3, r3
 8019866:	1ad3      	subs	r3, r2, r3
 8019868:	b29a      	uxth	r2, r3
 801986a:	693b      	ldr	r3, [r7, #16]
 801986c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801986e:	693b      	ldr	r3, [r7, #16]
 8019870:	2200      	movs	r2, #0
 8019872:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019874:	2114      	movs	r1, #20
 8019876:	68b8      	ldr	r0, [r7, #8]
 8019878:	f7fb f818 	bl	80148ac <pbuf_add_header>
 801987c:	4603      	mov	r3, r0
 801987e:	2b00      	cmp	r3, #0
 8019880:	d004      	beq.n	801988c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019882:	6938      	ldr	r0, [r7, #16]
 8019884:	f7fd f801 	bl	801688a <tcp_seg_free>
    return NULL;
 8019888:	2300      	movs	r3, #0
 801988a:	e037      	b.n	80198fc <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801988c:	693b      	ldr	r3, [r7, #16]
 801988e:	685b      	ldr	r3, [r3, #4]
 8019890:	685a      	ldr	r2, [r3, #4]
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	8ada      	ldrh	r2, [r3, #22]
 801989a:	693b      	ldr	r3, [r7, #16]
 801989c:	691c      	ldr	r4, [r3, #16]
 801989e:	4610      	mov	r0, r2
 80198a0:	f7f8 fd0c 	bl	80122bc <lwip_htons>
 80198a4:	4603      	mov	r3, r0
 80198a6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	8b1a      	ldrh	r2, [r3, #24]
 80198ac:	693b      	ldr	r3, [r7, #16]
 80198ae:	691c      	ldr	r4, [r3, #16]
 80198b0:	4610      	mov	r0, r2
 80198b2:	f7f8 fd03 	bl	80122bc <lwip_htons>
 80198b6:	4603      	mov	r3, r0
 80198b8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80198ba:	693b      	ldr	r3, [r7, #16]
 80198bc:	691c      	ldr	r4, [r3, #16]
 80198be:	6838      	ldr	r0, [r7, #0]
 80198c0:	f7f8 fd11 	bl	80122e6 <lwip_htonl>
 80198c4:	4603      	mov	r3, r0
 80198c6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80198c8:	7dfb      	ldrb	r3, [r7, #23]
 80198ca:	089b      	lsrs	r3, r3, #2
 80198cc:	b2db      	uxtb	r3, r3
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	3305      	adds	r3, #5
 80198d2:	b29b      	uxth	r3, r3
 80198d4:	031b      	lsls	r3, r3, #12
 80198d6:	b29a      	uxth	r2, r3
 80198d8:	79fb      	ldrb	r3, [r7, #7]
 80198da:	b29b      	uxth	r3, r3
 80198dc:	4313      	orrs	r3, r2
 80198de:	b29a      	uxth	r2, r3
 80198e0:	693b      	ldr	r3, [r7, #16]
 80198e2:	691c      	ldr	r4, [r3, #16]
 80198e4:	4610      	mov	r0, r2
 80198e6:	f7f8 fce9 	bl	80122bc <lwip_htons>
 80198ea:	4603      	mov	r3, r0
 80198ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80198ee:	693b      	ldr	r3, [r7, #16]
 80198f0:	691b      	ldr	r3, [r3, #16]
 80198f2:	2200      	movs	r2, #0
 80198f4:	749a      	strb	r2, [r3, #18]
 80198f6:	2200      	movs	r2, #0
 80198f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80198fa:	693b      	ldr	r3, [r7, #16]
}
 80198fc:	4618      	mov	r0, r3
 80198fe:	371c      	adds	r7, #28
 8019900:	46bd      	mov	sp, r7
 8019902:	bd90      	pop	{r4, r7, pc}
 8019904:	08027f78 	.word	0x08027f78
 8019908:	08027fac 	.word	0x08027fac
 801990c:	08027fcc 	.word	0x08027fcc
 8019910:	08027ff4 	.word	0x08027ff4
 8019914:	08028018 	.word	0x08028018

08019918 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019918:	b580      	push	{r7, lr}
 801991a:	b086      	sub	sp, #24
 801991c:	af00      	add	r7, sp, #0
 801991e:	607b      	str	r3, [r7, #4]
 8019920:	4603      	mov	r3, r0
 8019922:	73fb      	strb	r3, [r7, #15]
 8019924:	460b      	mov	r3, r1
 8019926:	81bb      	strh	r3, [r7, #12]
 8019928:	4613      	mov	r3, r2
 801992a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801992c:	89bb      	ldrh	r3, [r7, #12]
 801992e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d105      	bne.n	8019942 <tcp_pbuf_prealloc+0x2a>
 8019936:	4b30      	ldr	r3, [pc, #192]	; (80199f8 <tcp_pbuf_prealloc+0xe0>)
 8019938:	22e8      	movs	r2, #232	; 0xe8
 801993a:	4930      	ldr	r1, [pc, #192]	; (80199fc <tcp_pbuf_prealloc+0xe4>)
 801993c:	4830      	ldr	r0, [pc, #192]	; (8019a00 <tcp_pbuf_prealloc+0xe8>)
 801993e:	f008 f939 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019942:	6a3b      	ldr	r3, [r7, #32]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d105      	bne.n	8019954 <tcp_pbuf_prealloc+0x3c>
 8019948:	4b2b      	ldr	r3, [pc, #172]	; (80199f8 <tcp_pbuf_prealloc+0xe0>)
 801994a:	22e9      	movs	r2, #233	; 0xe9
 801994c:	492d      	ldr	r1, [pc, #180]	; (8019a04 <tcp_pbuf_prealloc+0xec>)
 801994e:	482c      	ldr	r0, [pc, #176]	; (8019a00 <tcp_pbuf_prealloc+0xe8>)
 8019950:	f008 f930 	bl	8021bb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019954:	89ba      	ldrh	r2, [r7, #12]
 8019956:	897b      	ldrh	r3, [r7, #10]
 8019958:	429a      	cmp	r2, r3
 801995a:	d221      	bcs.n	80199a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801995c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019960:	f003 0302 	and.w	r3, r3, #2
 8019964:	2b00      	cmp	r3, #0
 8019966:	d111      	bne.n	801998c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019968:	6a3b      	ldr	r3, [r7, #32]
 801996a:	8b5b      	ldrh	r3, [r3, #26]
 801996c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019970:	2b00      	cmp	r3, #0
 8019972:	d115      	bne.n	80199a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019978:	2b00      	cmp	r3, #0
 801997a:	d007      	beq.n	801998c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801997c:	6a3b      	ldr	r3, [r7, #32]
 801997e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8019980:	2b00      	cmp	r3, #0
 8019982:	d103      	bne.n	801998c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019984:	6a3b      	ldr	r3, [r7, #32]
 8019986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8019988:	2b00      	cmp	r3, #0
 801998a:	d009      	beq.n	80199a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801998c:	89bb      	ldrh	r3, [r7, #12]
 801998e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8019992:	f023 0203 	bic.w	r2, r3, #3
 8019996:	897b      	ldrh	r3, [r7, #10]
 8019998:	4293      	cmp	r3, r2
 801999a:	bf28      	it	cs
 801999c:	4613      	movcs	r3, r2
 801999e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80199a0:	8af9      	ldrh	r1, [r7, #22]
 80199a2:	7bfb      	ldrb	r3, [r7, #15]
 80199a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80199a8:	4618      	mov	r0, r3
 80199aa:	f7fa fd31 	bl	8014410 <pbuf_alloc>
 80199ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80199b0:	693b      	ldr	r3, [r7, #16]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d101      	bne.n	80199ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80199b6:	2300      	movs	r3, #0
 80199b8:	e019      	b.n	80199ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d006      	beq.n	80199d0 <tcp_pbuf_prealloc+0xb8>
 80199c2:	4b0d      	ldr	r3, [pc, #52]	; (80199f8 <tcp_pbuf_prealloc+0xe0>)
 80199c4:	f240 120b 	movw	r2, #267	; 0x10b
 80199c8:	490f      	ldr	r1, [pc, #60]	; (8019a08 <tcp_pbuf_prealloc+0xf0>)
 80199ca:	480d      	ldr	r0, [pc, #52]	; (8019a00 <tcp_pbuf_prealloc+0xe8>)
 80199cc:	f008 f8f2 	bl	8021bb4 <iprintf>
  *oversize = p->len - length;
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	895a      	ldrh	r2, [r3, #10]
 80199d4:	89bb      	ldrh	r3, [r7, #12]
 80199d6:	1ad3      	subs	r3, r2, r3
 80199d8:	b29a      	uxth	r2, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80199de:	693b      	ldr	r3, [r7, #16]
 80199e0:	89ba      	ldrh	r2, [r7, #12]
 80199e2:	811a      	strh	r2, [r3, #8]
 80199e4:	693b      	ldr	r3, [r7, #16]
 80199e6:	891a      	ldrh	r2, [r3, #8]
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	815a      	strh	r2, [r3, #10]
  return p;
 80199ec:	693b      	ldr	r3, [r7, #16]
}
 80199ee:	4618      	mov	r0, r3
 80199f0:	3718      	adds	r7, #24
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}
 80199f6:	bf00      	nop
 80199f8:	08027f78 	.word	0x08027f78
 80199fc:	08028030 	.word	0x08028030
 8019a00:	08027fcc 	.word	0x08027fcc
 8019a04:	08028054 	.word	0x08028054
 8019a08:	08028074 	.word	0x08028074

08019a0c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b082      	sub	sp, #8
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
 8019a14:	460b      	mov	r3, r1
 8019a16:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d106      	bne.n	8019a2c <tcp_write_checks+0x20>
 8019a1e:	4b33      	ldr	r3, [pc, #204]	; (8019aec <tcp_write_checks+0xe0>)
 8019a20:	f240 1233 	movw	r2, #307	; 0x133
 8019a24:	4932      	ldr	r1, [pc, #200]	; (8019af0 <tcp_write_checks+0xe4>)
 8019a26:	4833      	ldr	r0, [pc, #204]	; (8019af4 <tcp_write_checks+0xe8>)
 8019a28:	f008 f8c4 	bl	8021bb4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	7d1b      	ldrb	r3, [r3, #20]
 8019a30:	2b04      	cmp	r3, #4
 8019a32:	d00e      	beq.n	8019a52 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019a38:	2b07      	cmp	r3, #7
 8019a3a:	d00a      	beq.n	8019a52 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019a40:	2b02      	cmp	r3, #2
 8019a42:	d006      	beq.n	8019a52 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019a48:	2b03      	cmp	r3, #3
 8019a4a:	d002      	beq.n	8019a52 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019a4c:	f06f 030a 	mvn.w	r3, #10
 8019a50:	e048      	b.n	8019ae4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019a52:	887b      	ldrh	r3, [r7, #2]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d101      	bne.n	8019a5c <tcp_write_checks+0x50>
    return ERR_OK;
 8019a58:	2300      	movs	r3, #0
 8019a5a:	e043      	b.n	8019ae4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019a62:	887a      	ldrh	r2, [r7, #2]
 8019a64:	429a      	cmp	r2, r3
 8019a66:	d909      	bls.n	8019a7c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	8b5b      	ldrh	r3, [r3, #26]
 8019a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a70:	b29a      	uxth	r2, r3
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a7a:	e033      	b.n	8019ae4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019a82:	2b08      	cmp	r3, #8
 8019a84:	d909      	bls.n	8019a9a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	8b5b      	ldrh	r3, [r3, #26]
 8019a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a8e:	b29a      	uxth	r2, r3
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a98:	e024      	b.n	8019ae4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d00f      	beq.n	8019ac4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d11a      	bne.n	8019ae2 <tcp_write_checks+0xd6>
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d116      	bne.n	8019ae2 <tcp_write_checks+0xd6>
 8019ab4:	4b0d      	ldr	r3, [pc, #52]	; (8019aec <tcp_write_checks+0xe0>)
 8019ab6:	f240 1255 	movw	r2, #341	; 0x155
 8019aba:	490f      	ldr	r1, [pc, #60]	; (8019af8 <tcp_write_checks+0xec>)
 8019abc:	480d      	ldr	r0, [pc, #52]	; (8019af4 <tcp_write_checks+0xe8>)
 8019abe:	f008 f879 	bl	8021bb4 <iprintf>
 8019ac2:	e00e      	b.n	8019ae2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d103      	bne.n	8019ad4 <tcp_write_checks+0xc8>
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d006      	beq.n	8019ae2 <tcp_write_checks+0xd6>
 8019ad4:	4b05      	ldr	r3, [pc, #20]	; (8019aec <tcp_write_checks+0xe0>)
 8019ad6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8019ada:	4908      	ldr	r1, [pc, #32]	; (8019afc <tcp_write_checks+0xf0>)
 8019adc:	4805      	ldr	r0, [pc, #20]	; (8019af4 <tcp_write_checks+0xe8>)
 8019ade:	f008 f869 	bl	8021bb4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019ae2:	2300      	movs	r3, #0
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3708      	adds	r7, #8
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}
 8019aec:	08027f78 	.word	0x08027f78
 8019af0:	08028088 	.word	0x08028088
 8019af4:	08027fcc 	.word	0x08027fcc
 8019af8:	080280a8 	.word	0x080280a8
 8019afc:	080280e4 	.word	0x080280e4

08019b00 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019b00:	b590      	push	{r4, r7, lr}
 8019b02:	b09d      	sub	sp, #116	; 0x74
 8019b04:	af04      	add	r7, sp, #16
 8019b06:	60f8      	str	r0, [r7, #12]
 8019b08:	60b9      	str	r1, [r7, #8]
 8019b0a:	4611      	mov	r1, r2
 8019b0c:	461a      	mov	r2, r3
 8019b0e:	460b      	mov	r3, r1
 8019b10:	80fb      	strh	r3, [r7, #6]
 8019b12:	4613      	mov	r3, r2
 8019b14:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019b16:	2300      	movs	r3, #0
 8019b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8019b1e:	2300      	movs	r3, #0
 8019b20:	657b      	str	r3, [r7, #84]	; 0x54
 8019b22:	2300      	movs	r3, #0
 8019b24:	653b      	str	r3, [r7, #80]	; 0x50
 8019b26:	2300      	movs	r3, #0
 8019b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019b30:	2300      	movs	r3, #0
 8019b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019b36:	2300      	movs	r3, #0
 8019b38:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8019b40:	2300      	movs	r3, #0
 8019b42:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019b46:	2300      	movs	r3, #0
 8019b48:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d109      	bne.n	8019b66 <tcp_write+0x66>
 8019b52:	4bad      	ldr	r3, [pc, #692]	; (8019e08 <tcp_write+0x308>)
 8019b54:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019b58:	49ac      	ldr	r1, [pc, #688]	; (8019e0c <tcp_write+0x30c>)
 8019b5a:	48ad      	ldr	r0, [pc, #692]	; (8019e10 <tcp_write+0x310>)
 8019b5c:	f008 f82a 	bl	8021bb4 <iprintf>
 8019b60:	f06f 030f 	mvn.w	r3, #15
 8019b64:	e37d      	b.n	801a262 <tcp_write+0x762>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019b6c:	085b      	lsrs	r3, r3, #1
 8019b6e:	b29a      	uxth	r2, r3
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019b74:	4293      	cmp	r3, r2
 8019b76:	bf28      	it	cs
 8019b78:	4613      	movcs	r3, r2
 8019b7a:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8019b7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d102      	bne.n	8019b88 <tcp_write+0x88>
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019b86:	e000      	b.n	8019b8a <tcp_write+0x8a>
 8019b88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019b8a:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019b8c:	68bb      	ldr	r3, [r7, #8]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d109      	bne.n	8019ba6 <tcp_write+0xa6>
 8019b92:	4b9d      	ldr	r3, [pc, #628]	; (8019e08 <tcp_write+0x308>)
 8019b94:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019b98:	499e      	ldr	r1, [pc, #632]	; (8019e14 <tcp_write+0x314>)
 8019b9a:	489d      	ldr	r0, [pc, #628]	; (8019e10 <tcp_write+0x310>)
 8019b9c:	f008 f80a 	bl	8021bb4 <iprintf>
 8019ba0:	f06f 030f 	mvn.w	r3, #15
 8019ba4:	e35d      	b.n	801a262 <tcp_write+0x762>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019ba6:	88fb      	ldrh	r3, [r7, #6]
 8019ba8:	4619      	mov	r1, r3
 8019baa:	68f8      	ldr	r0, [r7, #12]
 8019bac:	f7ff ff2e 	bl	8019a0c <tcp_write_checks>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8019bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d002      	beq.n	8019bc4 <tcp_write+0xc4>
    return err;
 8019bbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019bc2:	e34e      	b.n	801a262 <tcp_write+0x762>
  }
  queuelen = pcb->snd_queuelen;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019bca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019bce:	2300      	movs	r3, #0
 8019bd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	f000 8127 	beq.w	8019e2c <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019be2:	643b      	str	r3, [r7, #64]	; 0x40
 8019be4:	e002      	b.n	8019bec <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8019be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d1f8      	bne.n	8019be6 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019bf6:	7b1b      	ldrb	r3, [r3, #12]
 8019bf8:	009b      	lsls	r3, r3, #2
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	f003 0304 	and.w	r3, r3, #4
 8019c00:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019c02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c06:	891b      	ldrh	r3, [r3, #8]
 8019c08:	4619      	mov	r1, r3
 8019c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019c0c:	440b      	add	r3, r1
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	da06      	bge.n	8019c20 <tcp_write+0x120>
 8019c12:	4b7d      	ldr	r3, [pc, #500]	; (8019e08 <tcp_write+0x308>)
 8019c14:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019c18:	497f      	ldr	r1, [pc, #508]	; (8019e18 <tcp_write+0x318>)
 8019c1a:	487d      	ldr	r0, [pc, #500]	; (8019e10 <tcp_write+0x310>)
 8019c1c:	f007 ffca 	bl	8021bb4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c22:	891a      	ldrh	r2, [r3, #8]
 8019c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019c26:	4413      	add	r3, r2
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019c2c:	1ad3      	subs	r3, r2, r3
 8019c2e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8019c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c3a:	895b      	ldrh	r3, [r3, #10]
 8019c3c:	429a      	cmp	r2, r3
 8019c3e:	d006      	beq.n	8019c4e <tcp_write+0x14e>
 8019c40:	4b71      	ldr	r3, [pc, #452]	; (8019e08 <tcp_write+0x308>)
 8019c42:	f240 12f3 	movw	r2, #499	; 0x1f3
 8019c46:	4975      	ldr	r1, [pc, #468]	; (8019e1c <tcp_write+0x31c>)
 8019c48:	4871      	ldr	r0, [pc, #452]	; (8019e10 <tcp_write+0x310>)
 8019c4a:	f007 ffb3 	bl	8021bb4 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019c54:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8019c56:	8afb      	ldrh	r3, [r7, #22]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d02e      	beq.n	8019cba <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019c5c:	8afb      	ldrh	r3, [r7, #22]
 8019c5e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d206      	bcs.n	8019c74 <tcp_write+0x174>
 8019c66:	4b68      	ldr	r3, [pc, #416]	; (8019e08 <tcp_write+0x308>)
 8019c68:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8019c6c:	496c      	ldr	r1, [pc, #432]	; (8019e20 <tcp_write+0x320>)
 8019c6e:	4868      	ldr	r0, [pc, #416]	; (8019e10 <tcp_write+0x310>)
 8019c70:	f007 ffa0 	bl	8021bb4 <iprintf>
      seg = last_unsent;
 8019c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c76:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019c78:	8afb      	ldrh	r3, [r7, #22]
 8019c7a:	88fa      	ldrh	r2, [r7, #6]
 8019c7c:	4293      	cmp	r3, r2
 8019c7e:	bf28      	it	cs
 8019c80:	4613      	movcs	r3, r2
 8019c82:	b29b      	uxth	r3, r3
 8019c84:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019c88:	4293      	cmp	r3, r2
 8019c8a:	bf28      	it	cs
 8019c8c:	4613      	movcs	r3, r2
 8019c8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8019c92:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019c96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019c9a:	4413      	add	r3, r2
 8019c9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8019ca0:	8afa      	ldrh	r2, [r7, #22]
 8019ca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019ca6:	1ad3      	subs	r3, r2, r3
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8019cac:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019cb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019cb4:	1ad3      	subs	r3, r2, r3
 8019cb6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019cba:	8afb      	ldrh	r3, [r7, #22]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d00b      	beq.n	8019cd8 <tcp_write+0x1d8>
 8019cc0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019cc4:	88fb      	ldrh	r3, [r7, #6]
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	d006      	beq.n	8019cd8 <tcp_write+0x1d8>
 8019cca:	4b4f      	ldr	r3, [pc, #316]	; (8019e08 <tcp_write+0x308>)
 8019ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019cd0:	4954      	ldr	r1, [pc, #336]	; (8019e24 <tcp_write+0x324>)
 8019cd2:	484f      	ldr	r0, [pc, #316]	; (8019e10 <tcp_write+0x310>)
 8019cd4:	f007 ff6e 	bl	8021bb4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019cd8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019cdc:	88fb      	ldrh	r3, [r7, #6]
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	f080 8172 	bcs.w	8019fc8 <tcp_write+0x4c8>
 8019ce4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	f000 816d 	beq.w	8019fc8 <tcp_write+0x4c8>
 8019cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019cf0:	891b      	ldrh	r3, [r3, #8]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	f000 8168 	beq.w	8019fc8 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019cf8:	88fa      	ldrh	r2, [r7, #6]
 8019cfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019cfe:	1ad2      	subs	r2, r2, r3
 8019d00:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8019d04:	4293      	cmp	r3, r2
 8019d06:	bfa8      	it	ge
 8019d08:	4613      	movge	r3, r2
 8019d0a:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8019d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d0e:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019d10:	797b      	ldrb	r3, [r7, #5]
 8019d12:	f003 0301 	and.w	r3, r3, #1
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d02b      	beq.n	8019d72 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019d1a:	f107 0016 	add.w	r0, r7, #22
 8019d1e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8019d22:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8019d24:	2301      	movs	r3, #1
 8019d26:	9302      	str	r3, [sp, #8]
 8019d28:	797b      	ldrb	r3, [r7, #5]
 8019d2a:	9301      	str	r3, [sp, #4]
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	9300      	str	r3, [sp, #0]
 8019d30:	4603      	mov	r3, r0
 8019d32:	2000      	movs	r0, #0
 8019d34:	f7ff fdf0 	bl	8019918 <tcp_pbuf_prealloc>
 8019d38:	63f8      	str	r0, [r7, #60]	; 0x3c
 8019d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f000 825e 	beq.w	801a1fe <tcp_write+0x6fe>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8019d42:	8afb      	ldrh	r3, [r7, #22]
 8019d44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019d4a:	6858      	ldr	r0, [r3, #4]
 8019d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019d50:	68ba      	ldr	r2, [r7, #8]
 8019d52:	4413      	add	r3, r2
 8019d54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019d56:	4619      	mov	r1, r3
 8019d58:	f007 f9e8 	bl	802112c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019d5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019d5e:	f7fa fefb 	bl	8014b58 <pbuf_clen>
 8019d62:	4603      	mov	r3, r0
 8019d64:	461a      	mov	r2, r3
 8019d66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019d6a:	4413      	add	r3, r2
 8019d6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019d70:	e042      	b.n	8019df8 <tcp_write+0x2f8>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d74:	685b      	ldr	r3, [r3, #4]
 8019d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8019d78:	e002      	b.n	8019d80 <tcp_write+0x280>
 8019d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8019d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d1f8      	bne.n	8019d7a <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d8a:	7b1b      	ldrb	r3, [r3, #12]
 8019d8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d116      	bne.n	8019dc2 <tcp_write+0x2c2>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019d9a:	8952      	ldrh	r2, [r2, #10]
 8019d9c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019d9e:	68ba      	ldr	r2, [r7, #8]
 8019da0:	429a      	cmp	r2, r3
 8019da2:	d10e      	bne.n	8019dc2 <tcp_write+0x2c2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019da4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d006      	beq.n	8019dba <tcp_write+0x2ba>
 8019dac:	4b16      	ldr	r3, [pc, #88]	; (8019e08 <tcp_write+0x308>)
 8019dae:	f240 2231 	movw	r2, #561	; 0x231
 8019db2:	491d      	ldr	r1, [pc, #116]	; (8019e28 <tcp_write+0x328>)
 8019db4:	4816      	ldr	r0, [pc, #88]	; (8019e10 <tcp_write+0x310>)
 8019db6:	f007 fefd 	bl	8021bb4 <iprintf>
          extendlen = seglen;
 8019dba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019dbc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8019dc0:	e01a      	b.n	8019df8 <tcp_write+0x2f8>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019dc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019dc4:	2201      	movs	r2, #1
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	2000      	movs	r0, #0
 8019dca:	f7fa fb21 	bl	8014410 <pbuf_alloc>
 8019dce:	63f8      	str	r0, [r7, #60]	; 0x3c
 8019dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	f000 8215 	beq.w	801a202 <tcp_write+0x702>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019ddc:	68ba      	ldr	r2, [r7, #8]
 8019dde:	441a      	add	r2, r3
 8019de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019de2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019de4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019de6:	f7fa feb7 	bl	8014b58 <pbuf_clen>
 8019dea:	4603      	mov	r3, r0
 8019dec:	461a      	mov	r2, r3
 8019dee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019df2:	4413      	add	r3, r2
 8019df4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019df8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019dfe:	4413      	add	r3, r2
 8019e00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8019e04:	e0e0      	b.n	8019fc8 <tcp_write+0x4c8>
 8019e06:	bf00      	nop
 8019e08:	08027f78 	.word	0x08027f78
 8019e0c:	08028118 	.word	0x08028118
 8019e10:	08027fcc 	.word	0x08027fcc
 8019e14:	08028130 	.word	0x08028130
 8019e18:	08028164 	.word	0x08028164
 8019e1c:	0802817c 	.word	0x0802817c
 8019e20:	080281ac 	.word	0x080281ac
 8019e24:	080281cc 	.word	0x080281cc
 8019e28:	080281ec 	.word	0x080281ec
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	f000 80c8 	beq.w	8019fc8 <tcp_write+0x4c8>
 8019e38:	4ba3      	ldr	r3, [pc, #652]	; (801a0c8 <tcp_write+0x5c8>)
 8019e3a:	f240 224a 	movw	r2, #586	; 0x24a
 8019e3e:	49a3      	ldr	r1, [pc, #652]	; (801a0cc <tcp_write+0x5cc>)
 8019e40:	48a3      	ldr	r0, [pc, #652]	; (801a0d0 <tcp_write+0x5d0>)
 8019e42:	f007 feb7 	bl	8021bb4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019e46:	e0bf      	b.n	8019fc8 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8019e48:	88fa      	ldrh	r2, [r7, #6]
 8019e4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019e4e:	1ad3      	subs	r3, r2, r3
 8019e50:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8019e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019e5a:	1ad3      	subs	r3, r2, r3
 8019e5c:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019e5e:	8bfa      	ldrh	r2, [r7, #30]
 8019e60:	8c3b      	ldrh	r3, [r7, #32]
 8019e62:	4293      	cmp	r3, r2
 8019e64:	bf28      	it	cs
 8019e66:	4613      	movcs	r3, r2
 8019e68:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019e6a:	797b      	ldrb	r3, [r7, #5]
 8019e6c:	f003 0301 	and.w	r3, r3, #1
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d036      	beq.n	8019ee2 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	8bbb      	ldrh	r3, [r7, #28]
 8019e7c:	4413      	add	r3, r2
 8019e7e:	b299      	uxth	r1, r3
 8019e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	bf0c      	ite	eq
 8019e86:	2301      	moveq	r3, #1
 8019e88:	2300      	movne	r3, #0
 8019e8a:	b2db      	uxtb	r3, r3
 8019e8c:	f107 0016 	add.w	r0, r7, #22
 8019e90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8019e92:	9302      	str	r3, [sp, #8]
 8019e94:	797b      	ldrb	r3, [r7, #5]
 8019e96:	9301      	str	r3, [sp, #4]
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	9300      	str	r3, [sp, #0]
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	2036      	movs	r0, #54	; 0x36
 8019ea0:	f7ff fd3a 	bl	8019918 <tcp_pbuf_prealloc>
 8019ea4:	6378      	str	r0, [r7, #52]	; 0x34
 8019ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	f000 81ac 	beq.w	801a206 <tcp_write+0x706>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019eb0:	895b      	ldrh	r3, [r3, #10]
 8019eb2:	8bba      	ldrh	r2, [r7, #28]
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	d906      	bls.n	8019ec6 <tcp_write+0x3c6>
 8019eb8:	4b83      	ldr	r3, [pc, #524]	; (801a0c8 <tcp_write+0x5c8>)
 8019eba:	f240 2266 	movw	r2, #614	; 0x266
 8019ebe:	4985      	ldr	r1, [pc, #532]	; (801a0d4 <tcp_write+0x5d4>)
 8019ec0:	4883      	ldr	r0, [pc, #524]	; (801a0d0 <tcp_write+0x5d0>)
 8019ec2:	f007 fe77 	bl	8021bb4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ec8:	685a      	ldr	r2, [r3, #4]
 8019eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019ece:	18d0      	adds	r0, r2, r3
 8019ed0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019ed4:	68ba      	ldr	r2, [r7, #8]
 8019ed6:	4413      	add	r3, r2
 8019ed8:	8bba      	ldrh	r2, [r7, #28]
 8019eda:	4619      	mov	r1, r3
 8019edc:	f007 f926 	bl	802112c <memcpy>
 8019ee0:	e02f      	b.n	8019f42 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019ee2:	8afb      	ldrh	r3, [r7, #22]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d006      	beq.n	8019ef6 <tcp_write+0x3f6>
 8019ee8:	4b77      	ldr	r3, [pc, #476]	; (801a0c8 <tcp_write+0x5c8>)
 8019eea:	f240 2271 	movw	r2, #625	; 0x271
 8019eee:	497a      	ldr	r1, [pc, #488]	; (801a0d8 <tcp_write+0x5d8>)
 8019ef0:	4877      	ldr	r0, [pc, #476]	; (801a0d0 <tcp_write+0x5d0>)
 8019ef2:	f007 fe5f 	bl	8021bb4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019ef6:	8bbb      	ldrh	r3, [r7, #28]
 8019ef8:	2201      	movs	r2, #1
 8019efa:	4619      	mov	r1, r3
 8019efc:	2036      	movs	r0, #54	; 0x36
 8019efe:	f7fa fa87 	bl	8014410 <pbuf_alloc>
 8019f02:	61b8      	str	r0, [r7, #24]
 8019f04:	69bb      	ldr	r3, [r7, #24]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	f000 817f 	beq.w	801a20a <tcp_write+0x70a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019f0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019f10:	68ba      	ldr	r2, [r7, #8]
 8019f12:	441a      	add	r2, r3
 8019f14:	69bb      	ldr	r3, [r7, #24]
 8019f16:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f1c:	b29b      	uxth	r3, r3
 8019f1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f22:	4619      	mov	r1, r3
 8019f24:	2036      	movs	r0, #54	; 0x36
 8019f26:	f7fa fa73 	bl	8014410 <pbuf_alloc>
 8019f2a:	6378      	str	r0, [r7, #52]	; 0x34
 8019f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d103      	bne.n	8019f3a <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019f32:	69b8      	ldr	r0, [r7, #24]
 8019f34:	f7fa fd82 	bl	8014a3c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019f38:	e16a      	b.n	801a210 <tcp_write+0x710>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019f3a:	69b9      	ldr	r1, [r7, #24]
 8019f3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019f3e:	f7fa fe4b 	bl	8014bd8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019f42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019f44:	f7fa fe08 	bl	8014b58 <pbuf_clen>
 8019f48:	4603      	mov	r3, r0
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019f50:	4413      	add	r3, r2
 8019f52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019f56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019f5a:	2b09      	cmp	r3, #9
 8019f5c:	d903      	bls.n	8019f66 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019f5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019f60:	f7fa fd6c 	bl	8014a3c <pbuf_free>
      goto memerr;
 8019f64:	e154      	b.n	801a210 <tcp_write+0x710>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019f6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8019f6e:	441a      	add	r2, r3
 8019f70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8019f74:	9300      	str	r3, [sp, #0]
 8019f76:	4613      	mov	r3, r2
 8019f78:	2200      	movs	r2, #0
 8019f7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019f7c:	68f8      	ldr	r0, [r7, #12]
 8019f7e:	f7ff fc2b 	bl	80197d8 <tcp_create_segment>
 8019f82:	6578      	str	r0, [r7, #84]	; 0x54
 8019f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	f000 8141 	beq.w	801a20e <tcp_write+0x70e>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8019f8c:	8afa      	ldrh	r2, [r7, #22]
 8019f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f90:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d102      	bne.n	8019f9e <tcp_write+0x49e>
      queue = seg;
 8019f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019f9c:	e00c      	b.n	8019fb8 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d106      	bne.n	8019fb2 <tcp_write+0x4b2>
 8019fa4:	4b48      	ldr	r3, [pc, #288]	; (801a0c8 <tcp_write+0x5c8>)
 8019fa6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019faa:	494c      	ldr	r1, [pc, #304]	; (801a0dc <tcp_write+0x5dc>)
 8019fac:	4848      	ldr	r0, [pc, #288]	; (801a0d0 <tcp_write+0x5d0>)
 8019fae:	f007 fe01 	bl	8021bb4 <iprintf>
      prev_seg->next = seg;
 8019fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fb6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fba:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019fbc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019fc0:	8bbb      	ldrh	r3, [r7, #28]
 8019fc2:	4413      	add	r3, r2
 8019fc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 8019fc8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8019fcc:	88fb      	ldrh	r3, [r7, #6]
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	f4ff af3a 	bcc.w	8019e48 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8019fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d00b      	beq.n	8019ff2 <tcp_write+0x4f2>
 8019fda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d007      	beq.n	8019ff2 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8019fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019fe4:	895a      	ldrh	r2, [r3, #10]
 8019fe6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8019fea:	4413      	add	r3, r2
 8019fec:	b29a      	uxth	r2, r3
 8019fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ff0:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019ff2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d045      	beq.n	801a086 <tcp_write+0x586>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ffc:	685b      	ldr	r3, [r3, #4]
 8019ffe:	633b      	str	r3, [r7, #48]	; 0x30
 801a000:	e021      	b.n	801a046 <tcp_write+0x546>
      p->tot_len += oversize_used;
 801a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a004:	891a      	ldrh	r2, [r3, #8]
 801a006:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a00a:	4413      	add	r3, r2
 801a00c:	b29a      	uxth	r2, r3
 801a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a010:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d112      	bne.n	801a040 <tcp_write+0x540>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a01c:	685b      	ldr	r3, [r3, #4]
 801a01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a020:	8952      	ldrh	r2, [r2, #10]
 801a022:	4413      	add	r3, r2
 801a024:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a028:	68b9      	ldr	r1, [r7, #8]
 801a02a:	4618      	mov	r0, r3
 801a02c:	f007 f87e 	bl	802112c <memcpy>
        p->len += oversize_used;
 801a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a032:	895a      	ldrh	r2, [r3, #10]
 801a034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a038:	4413      	add	r3, r2
 801a03a:	b29a      	uxth	r2, r3
 801a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a03e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	633b      	str	r3, [r7, #48]	; 0x30
 801a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d1da      	bne.n	801a002 <tcp_write+0x502>
      }
    }
    last_unsent->len += oversize_used;
 801a04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a04e:	891a      	ldrh	r2, [r3, #8]
 801a050:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a054:	4413      	add	r3, r2
 801a056:	b29a      	uxth	r2, r3
 801a058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a05a:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a05e:	895b      	ldrh	r3, [r3, #10]
 801a060:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a064:	429a      	cmp	r2, r3
 801a066:	d906      	bls.n	801a076 <tcp_write+0x576>
 801a068:	4b17      	ldr	r3, [pc, #92]	; (801a0c8 <tcp_write+0x5c8>)
 801a06a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801a06e:	491c      	ldr	r1, [pc, #112]	; (801a0e0 <tcp_write+0x5e0>)
 801a070:	4817      	ldr	r0, [pc, #92]	; (801a0d0 <tcp_write+0x5d0>)
 801a072:	f007 fd9f 	bl	8021bb4 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801a076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a078:	895a      	ldrh	r2, [r3, #10]
 801a07a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a07e:	1ad3      	subs	r3, r2, r3
 801a080:	b29a      	uxth	r2, r3
 801a082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a084:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a086:	8afa      	ldrh	r2, [r7, #22]
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a090:	2b00      	cmp	r3, #0
 801a092:	d029      	beq.n	801a0e8 <tcp_write+0x5e8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a096:	2b00      	cmp	r3, #0
 801a098:	d106      	bne.n	801a0a8 <tcp_write+0x5a8>
 801a09a:	4b0b      	ldr	r3, [pc, #44]	; (801a0c8 <tcp_write+0x5c8>)
 801a09c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801a0a0:	4910      	ldr	r1, [pc, #64]	; (801a0e4 <tcp_write+0x5e4>)
 801a0a2:	480b      	ldr	r0, [pc, #44]	; (801a0d0 <tcp_write+0x5d0>)
 801a0a4:	f007 fd86 	bl	8021bb4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0aa:	685b      	ldr	r3, [r3, #4]
 801a0ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	f7fa fd92 	bl	8014bd8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0b6:	891a      	ldrh	r2, [r3, #8]
 801a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0ba:	891b      	ldrh	r3, [r3, #8]
 801a0bc:	4413      	add	r3, r2
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0c2:	811a      	strh	r2, [r3, #8]
 801a0c4:	e04d      	b.n	801a162 <tcp_write+0x662>
 801a0c6:	bf00      	nop
 801a0c8:	08027f78 	.word	0x08027f78
 801a0cc:	08028218 	.word	0x08028218
 801a0d0:	08027fcc 	.word	0x08027fcc
 801a0d4:	08028248 	.word	0x08028248
 801a0d8:	08028288 	.word	0x08028288
 801a0dc:	08028298 	.word	0x08028298
 801a0e0:	080282ac 	.word	0x080282ac
 801a0e4:	080282d8 	.word	0x080282d8
  } else if (extendlen > 0) {
 801a0e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d038      	beq.n	801a162 <tcp_write+0x662>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d003      	beq.n	801a0fe <tcp_write+0x5fe>
 801a0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d106      	bne.n	801a10c <tcp_write+0x60c>
 801a0fe:	4b5b      	ldr	r3, [pc, #364]	; (801a26c <tcp_write+0x76c>)
 801a100:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a104:	495a      	ldr	r1, [pc, #360]	; (801a270 <tcp_write+0x770>)
 801a106:	485b      	ldr	r0, [pc, #364]	; (801a274 <tcp_write+0x774>)
 801a108:	f007 fd54 	bl	8021bb4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a10e:	685b      	ldr	r3, [r3, #4]
 801a110:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a112:	e00a      	b.n	801a12a <tcp_write+0x62a>
      p->tot_len += extendlen;
 801a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a116:	891a      	ldrh	r2, [r3, #8]
 801a118:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a11c:	4413      	add	r3, r2
 801a11e:	b29a      	uxth	r2, r3
 801a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a122:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d1f0      	bne.n	801a114 <tcp_write+0x614>
    }
    p->tot_len += extendlen;
 801a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a134:	891a      	ldrh	r2, [r3, #8]
 801a136:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a13a:	4413      	add	r3, r2
 801a13c:	b29a      	uxth	r2, r3
 801a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a140:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a144:	895a      	ldrh	r2, [r3, #10]
 801a146:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a14a:	4413      	add	r3, r2
 801a14c:	b29a      	uxth	r2, r3
 801a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a150:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a154:	891a      	ldrh	r2, [r3, #8]
 801a156:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801a15a:	4413      	add	r3, r2
 801a15c:	b29a      	uxth	r2, r3
 801a15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a160:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a164:	2b00      	cmp	r3, #0
 801a166:	d103      	bne.n	801a170 <tcp_write+0x670>
    pcb->unsent = queue;
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a16c:	66da      	str	r2, [r3, #108]	; 0x6c
 801a16e:	e002      	b.n	801a176 <tcp_write+0x676>
  } else {
    last_unsent->next = queue;
 801a170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a174:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a17a:	88fb      	ldrh	r3, [r7, #6]
 801a17c:	441a      	add	r2, r3
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a188:	88fb      	ldrh	r3, [r7, #6]
 801a18a:	1ad3      	subs	r3, r2, r3
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801a19a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d00e      	beq.n	801a1c6 <tcp_write+0x6c6>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d10a      	bne.n	801a1c6 <tcp_write+0x6c6>
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d106      	bne.n	801a1c6 <tcp_write+0x6c6>
 801a1b8:	4b2c      	ldr	r3, [pc, #176]	; (801a26c <tcp_write+0x76c>)
 801a1ba:	f240 3212 	movw	r2, #786	; 0x312
 801a1be:	492e      	ldr	r1, [pc, #184]	; (801a278 <tcp_write+0x778>)
 801a1c0:	482c      	ldr	r0, [pc, #176]	; (801a274 <tcp_write+0x774>)
 801a1c2:	f007 fcf7 	bl	8021bb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d016      	beq.n	801a1fa <tcp_write+0x6fa>
 801a1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1ce:	691b      	ldr	r3, [r3, #16]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d012      	beq.n	801a1fa <tcp_write+0x6fa>
 801a1d4:	797b      	ldrb	r3, [r7, #5]
 801a1d6:	f003 0302 	and.w	r3, r3, #2
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d10d      	bne.n	801a1fa <tcp_write+0x6fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a1de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1e0:	691b      	ldr	r3, [r3, #16]
 801a1e2:	899b      	ldrh	r3, [r3, #12]
 801a1e4:	b29c      	uxth	r4, r3
 801a1e6:	2008      	movs	r0, #8
 801a1e8:	f7f8 f868 	bl	80122bc <lwip_htons>
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f2:	691b      	ldr	r3, [r3, #16]
 801a1f4:	4322      	orrs	r2, r4
 801a1f6:	b292      	uxth	r2, r2
 801a1f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	e031      	b.n	801a262 <tcp_write+0x762>
          goto memerr;
 801a1fe:	bf00      	nop
 801a200:	e006      	b.n	801a210 <tcp_write+0x710>
            goto memerr;
 801a202:	bf00      	nop
 801a204:	e004      	b.n	801a210 <tcp_write+0x710>
        goto memerr;
 801a206:	bf00      	nop
 801a208:	e002      	b.n	801a210 <tcp_write+0x710>
        goto memerr;
 801a20a:	bf00      	nop
 801a20c:	e000      	b.n	801a210 <tcp_write+0x710>
      goto memerr;
 801a20e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	8b5b      	ldrh	r3, [r3, #26]
 801a214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a218:	b29a      	uxth	r2, r3
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a220:	2b00      	cmp	r3, #0
 801a222:	d002      	beq.n	801a22a <tcp_write+0x72a>
    pbuf_free(concat_p);
 801a224:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a226:	f7fa fc09 	bl	8014a3c <pbuf_free>
  }
  if (queue != NULL) {
 801a22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d002      	beq.n	801a236 <tcp_write+0x736>
    tcp_segs_free(queue);
 801a230:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a232:	f7fc fb15 	bl	8016860 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d00e      	beq.n	801a25e <tcp_write+0x75e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a244:	2b00      	cmp	r3, #0
 801a246:	d10a      	bne.n	801a25e <tcp_write+0x75e>
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d106      	bne.n	801a25e <tcp_write+0x75e>
 801a250:	4b06      	ldr	r3, [pc, #24]	; (801a26c <tcp_write+0x76c>)
 801a252:	f240 3227 	movw	r2, #807	; 0x327
 801a256:	4908      	ldr	r1, [pc, #32]	; (801a278 <tcp_write+0x778>)
 801a258:	4806      	ldr	r0, [pc, #24]	; (801a274 <tcp_write+0x774>)
 801a25a:	f007 fcab 	bl	8021bb4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a262:	4618      	mov	r0, r3
 801a264:	3764      	adds	r7, #100	; 0x64
 801a266:	46bd      	mov	sp, r7
 801a268:	bd90      	pop	{r4, r7, pc}
 801a26a:	bf00      	nop
 801a26c:	08027f78 	.word	0x08027f78
 801a270:	08028310 	.word	0x08028310
 801a274:	08027fcc 	.word	0x08027fcc
 801a278:	08028348 	.word	0x08028348

0801a27c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a27c:	b590      	push	{r4, r7, lr}
 801a27e:	b08b      	sub	sp, #44	; 0x2c
 801a280:	af02      	add	r7, sp, #8
 801a282:	6078      	str	r0, [r7, #4]
 801a284:	460b      	mov	r3, r1
 801a286:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a288:	2300      	movs	r3, #0
 801a28a:	61bb      	str	r3, [r7, #24]
 801a28c:	2300      	movs	r3, #0
 801a28e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a290:	2300      	movs	r3, #0
 801a292:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d106      	bne.n	801a2a8 <tcp_split_unsent_seg+0x2c>
 801a29a:	4b97      	ldr	r3, [pc, #604]	; (801a4f8 <tcp_split_unsent_seg+0x27c>)
 801a29c:	f240 324b 	movw	r2, #843	; 0x34b
 801a2a0:	4996      	ldr	r1, [pc, #600]	; (801a4fc <tcp_split_unsent_seg+0x280>)
 801a2a2:	4897      	ldr	r0, [pc, #604]	; (801a500 <tcp_split_unsent_seg+0x284>)
 801a2a4:	f007 fc86 	bl	8021bb4 <iprintf>

  useg = pcb->unsent;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a2ae:	697b      	ldr	r3, [r7, #20]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d102      	bne.n	801a2ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a2b8:	e119      	b.n	801a4ee <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801a2ba:	887b      	ldrh	r3, [r7, #2]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d109      	bne.n	801a2d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a2c0:	4b8d      	ldr	r3, [pc, #564]	; (801a4f8 <tcp_split_unsent_seg+0x27c>)
 801a2c2:	f240 3253 	movw	r2, #851	; 0x353
 801a2c6:	498f      	ldr	r1, [pc, #572]	; (801a504 <tcp_split_unsent_seg+0x288>)
 801a2c8:	488d      	ldr	r0, [pc, #564]	; (801a500 <tcp_split_unsent_seg+0x284>)
 801a2ca:	f007 fc73 	bl	8021bb4 <iprintf>
    return ERR_VAL;
 801a2ce:	f06f 0305 	mvn.w	r3, #5
 801a2d2:	e10c      	b.n	801a4ee <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 801a2d4:	697b      	ldr	r3, [r7, #20]
 801a2d6:	891b      	ldrh	r3, [r3, #8]
 801a2d8:	887a      	ldrh	r2, [r7, #2]
 801a2da:	429a      	cmp	r2, r3
 801a2dc:	d301      	bcc.n	801a2e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	e105      	b.n	801a4ee <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a2e6:	887a      	ldrh	r2, [r7, #2]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d906      	bls.n	801a2fa <tcp_split_unsent_seg+0x7e>
 801a2ec:	4b82      	ldr	r3, [pc, #520]	; (801a4f8 <tcp_split_unsent_seg+0x27c>)
 801a2ee:	f240 325b 	movw	r2, #859	; 0x35b
 801a2f2:	4985      	ldr	r1, [pc, #532]	; (801a508 <tcp_split_unsent_seg+0x28c>)
 801a2f4:	4882      	ldr	r0, [pc, #520]	; (801a500 <tcp_split_unsent_seg+0x284>)
 801a2f6:	f007 fc5d 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a2fa:	697b      	ldr	r3, [r7, #20]
 801a2fc:	891b      	ldrh	r3, [r3, #8]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d106      	bne.n	801a310 <tcp_split_unsent_seg+0x94>
 801a302:	4b7d      	ldr	r3, [pc, #500]	; (801a4f8 <tcp_split_unsent_seg+0x27c>)
 801a304:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a308:	4980      	ldr	r1, [pc, #512]	; (801a50c <tcp_split_unsent_seg+0x290>)
 801a30a:	487d      	ldr	r0, [pc, #500]	; (801a500 <tcp_split_unsent_seg+0x284>)
 801a30c:	f007 fc52 	bl	8021bb4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a310:	697b      	ldr	r3, [r7, #20]
 801a312:	7b1b      	ldrb	r3, [r3, #12]
 801a314:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a316:	7bfb      	ldrb	r3, [r7, #15]
 801a318:	009b      	lsls	r3, r3, #2
 801a31a:	b2db      	uxtb	r3, r3
 801a31c:	f003 0304 	and.w	r3, r3, #4
 801a320:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a322:	697b      	ldr	r3, [r7, #20]
 801a324:	891a      	ldrh	r2, [r3, #8]
 801a326:	887b      	ldrh	r3, [r7, #2]
 801a328:	1ad3      	subs	r3, r2, r3
 801a32a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a32c:	7bbb      	ldrb	r3, [r7, #14]
 801a32e:	b29a      	uxth	r2, r3
 801a330:	89bb      	ldrh	r3, [r7, #12]
 801a332:	4413      	add	r3, r2
 801a334:	b29b      	uxth	r3, r3
 801a336:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a33a:	4619      	mov	r1, r3
 801a33c:	2036      	movs	r0, #54	; 0x36
 801a33e:	f7fa f867 	bl	8014410 <pbuf_alloc>
 801a342:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	2b00      	cmp	r3, #0
 801a348:	f000 80ba 	beq.w	801a4c0 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a34c:	697b      	ldr	r3, [r7, #20]
 801a34e:	685b      	ldr	r3, [r3, #4]
 801a350:	891a      	ldrh	r2, [r3, #8]
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	891b      	ldrh	r3, [r3, #8]
 801a356:	1ad3      	subs	r3, r2, r3
 801a358:	b29a      	uxth	r2, r3
 801a35a:	887b      	ldrh	r3, [r7, #2]
 801a35c:	4413      	add	r3, r2
 801a35e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a360:	697b      	ldr	r3, [r7, #20]
 801a362:	6858      	ldr	r0, [r3, #4]
 801a364:	693b      	ldr	r3, [r7, #16]
 801a366:	685a      	ldr	r2, [r3, #4]
 801a368:	7bbb      	ldrb	r3, [r7, #14]
 801a36a:	18d1      	adds	r1, r2, r3
 801a36c:	897b      	ldrh	r3, [r7, #10]
 801a36e:	89ba      	ldrh	r2, [r7, #12]
 801a370:	f7fa fd6a 	bl	8014e48 <pbuf_copy_partial>
 801a374:	4603      	mov	r3, r0
 801a376:	461a      	mov	r2, r3
 801a378:	89bb      	ldrh	r3, [r7, #12]
 801a37a:	4293      	cmp	r3, r2
 801a37c:	f040 80a2 	bne.w	801a4c4 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	691b      	ldr	r3, [r3, #16]
 801a384:	899b      	ldrh	r3, [r3, #12]
 801a386:	b29b      	uxth	r3, r3
 801a388:	4618      	mov	r0, r3
 801a38a:	f7f7 ff97 	bl	80122bc <lwip_htons>
 801a38e:	4603      	mov	r3, r0
 801a390:	b2db      	uxtb	r3, r3
 801a392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a396:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a398:	2300      	movs	r3, #0
 801a39a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801a39c:	7ffb      	ldrb	r3, [r7, #31]
 801a39e:	f003 0308 	and.w	r3, r3, #8
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d007      	beq.n	801a3b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a3a6:	7ffb      	ldrb	r3, [r7, #31]
 801a3a8:	f023 0308 	bic.w	r3, r3, #8
 801a3ac:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801a3ae:	7fbb      	ldrb	r3, [r7, #30]
 801a3b0:	f043 0308 	orr.w	r3, r3, #8
 801a3b4:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801a3b6:	7ffb      	ldrb	r3, [r7, #31]
 801a3b8:	f003 0301 	and.w	r3, r3, #1
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d007      	beq.n	801a3d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a3c0:	7ffb      	ldrb	r3, [r7, #31]
 801a3c2:	f023 0301 	bic.w	r3, r3, #1
 801a3c6:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801a3c8:	7fbb      	ldrb	r3, [r7, #30]
 801a3ca:	f043 0301 	orr.w	r3, r3, #1
 801a3ce:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a3d0:	697b      	ldr	r3, [r7, #20]
 801a3d2:	691b      	ldr	r3, [r3, #16]
 801a3d4:	685b      	ldr	r3, [r3, #4]
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	f7f7 ff85 	bl	80122e6 <lwip_htonl>
 801a3dc:	4602      	mov	r2, r0
 801a3de:	887b      	ldrh	r3, [r7, #2]
 801a3e0:	18d1      	adds	r1, r2, r3
 801a3e2:	7fba      	ldrb	r2, [r7, #30]
 801a3e4:	7bfb      	ldrb	r3, [r7, #15]
 801a3e6:	9300      	str	r3, [sp, #0]
 801a3e8:	460b      	mov	r3, r1
 801a3ea:	6939      	ldr	r1, [r7, #16]
 801a3ec:	6878      	ldr	r0, [r7, #4]
 801a3ee:	f7ff f9f3 	bl	80197d8 <tcp_create_segment>
 801a3f2:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801a3f4:	69bb      	ldr	r3, [r7, #24]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d066      	beq.n	801a4c8 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a3fa:	697b      	ldr	r3, [r7, #20]
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	4618      	mov	r0, r3
 801a400:	f7fa fbaa 	bl	8014b58 <pbuf_clen>
 801a404:	4603      	mov	r3, r0
 801a406:	461a      	mov	r2, r3
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a40e:	1a9b      	subs	r3, r3, r2
 801a410:	b29a      	uxth	r2, r3
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a418:	697b      	ldr	r3, [r7, #20]
 801a41a:	6858      	ldr	r0, [r3, #4]
 801a41c:	697b      	ldr	r3, [r7, #20]
 801a41e:	685b      	ldr	r3, [r3, #4]
 801a420:	891a      	ldrh	r2, [r3, #8]
 801a422:	89bb      	ldrh	r3, [r7, #12]
 801a424:	1ad3      	subs	r3, r2, r3
 801a426:	b29b      	uxth	r3, r3
 801a428:	4619      	mov	r1, r3
 801a42a:	f7fa f94f 	bl	80146cc <pbuf_realloc>
  useg->len -= remainder;
 801a42e:	697b      	ldr	r3, [r7, #20]
 801a430:	891a      	ldrh	r2, [r3, #8]
 801a432:	89bb      	ldrh	r3, [r7, #12]
 801a434:	1ad3      	subs	r3, r2, r3
 801a436:	b29a      	uxth	r2, r3
 801a438:	697b      	ldr	r3, [r7, #20]
 801a43a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a43c:	697b      	ldr	r3, [r7, #20]
 801a43e:	691b      	ldr	r3, [r3, #16]
 801a440:	899b      	ldrh	r3, [r3, #12]
 801a442:	b29c      	uxth	r4, r3
 801a444:	7ffb      	ldrb	r3, [r7, #31]
 801a446:	b29b      	uxth	r3, r3
 801a448:	4618      	mov	r0, r3
 801a44a:	f7f7 ff37 	bl	80122bc <lwip_htons>
 801a44e:	4603      	mov	r3, r0
 801a450:	461a      	mov	r2, r3
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	691b      	ldr	r3, [r3, #16]
 801a456:	4322      	orrs	r2, r4
 801a458:	b292      	uxth	r2, r2
 801a45a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	2200      	movs	r2, #0
 801a460:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a462:	697b      	ldr	r3, [r7, #20]
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	4618      	mov	r0, r3
 801a468:	f7fa fb76 	bl	8014b58 <pbuf_clen>
 801a46c:	4603      	mov	r3, r0
 801a46e:	461a      	mov	r2, r3
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a476:	4413      	add	r3, r2
 801a478:	b29a      	uxth	r2, r3
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a480:	69bb      	ldr	r3, [r7, #24]
 801a482:	685b      	ldr	r3, [r3, #4]
 801a484:	4618      	mov	r0, r3
 801a486:	f7fa fb67 	bl	8014b58 <pbuf_clen>
 801a48a:	4603      	mov	r3, r0
 801a48c:	461a      	mov	r2, r3
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a494:	4413      	add	r3, r2
 801a496:	b29a      	uxth	r2, r3
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a49e:	697b      	ldr	r3, [r7, #20]
 801a4a0:	681a      	ldr	r2, [r3, #0]
 801a4a2:	69bb      	ldr	r3, [r7, #24]
 801a4a4:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a4a6:	697b      	ldr	r3, [r7, #20]
 801a4a8:	69ba      	ldr	r2, [r7, #24]
 801a4aa:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a4ac:	69bb      	ldr	r3, [r7, #24]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d103      	bne.n	801a4bc <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a4bc:	2300      	movs	r3, #0
 801a4be:	e016      	b.n	801a4ee <tcp_split_unsent_seg+0x272>
    goto memerr;
 801a4c0:	bf00      	nop
 801a4c2:	e002      	b.n	801a4ca <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a4c4:	bf00      	nop
 801a4c6:	e000      	b.n	801a4ca <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a4c8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a4ca:	69bb      	ldr	r3, [r7, #24]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d006      	beq.n	801a4de <tcp_split_unsent_seg+0x262>
 801a4d0:	4b09      	ldr	r3, [pc, #36]	; (801a4f8 <tcp_split_unsent_seg+0x27c>)
 801a4d2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a4d6:	490e      	ldr	r1, [pc, #56]	; (801a510 <tcp_split_unsent_seg+0x294>)
 801a4d8:	4809      	ldr	r0, [pc, #36]	; (801a500 <tcp_split_unsent_seg+0x284>)
 801a4da:	f007 fb6b 	bl	8021bb4 <iprintf>
  if (p != NULL) {
 801a4de:	693b      	ldr	r3, [r7, #16]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d002      	beq.n	801a4ea <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801a4e4:	6938      	ldr	r0, [r7, #16]
 801a4e6:	f7fa faa9 	bl	8014a3c <pbuf_free>
  }

  return ERR_MEM;
 801a4ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	3724      	adds	r7, #36	; 0x24
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	bd90      	pop	{r4, r7, pc}
 801a4f6:	bf00      	nop
 801a4f8:	08027f78 	.word	0x08027f78
 801a4fc:	08028368 	.word	0x08028368
 801a500:	08027fcc 	.word	0x08027fcc
 801a504:	0802838c 	.word	0x0802838c
 801a508:	080283b0 	.word	0x080283b0
 801a50c:	080283c0 	.word	0x080283c0
 801a510:	080283d0 	.word	0x080283d0

0801a514 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a514:	b590      	push	{r4, r7, lr}
 801a516:	b085      	sub	sp, #20
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d106      	bne.n	801a530 <tcp_send_fin+0x1c>
 801a522:	4b21      	ldr	r3, [pc, #132]	; (801a5a8 <tcp_send_fin+0x94>)
 801a524:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a528:	4920      	ldr	r1, [pc, #128]	; (801a5ac <tcp_send_fin+0x98>)
 801a52a:	4821      	ldr	r0, [pc, #132]	; (801a5b0 <tcp_send_fin+0x9c>)
 801a52c:	f007 fb42 	bl	8021bb4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a534:	2b00      	cmp	r3, #0
 801a536:	d02e      	beq.n	801a596 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a53c:	60fb      	str	r3, [r7, #12]
 801a53e:	e002      	b.n	801a546 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d1f8      	bne.n	801a540 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	691b      	ldr	r3, [r3, #16]
 801a552:	899b      	ldrh	r3, [r3, #12]
 801a554:	b29b      	uxth	r3, r3
 801a556:	4618      	mov	r0, r3
 801a558:	f7f7 feb0 	bl	80122bc <lwip_htons>
 801a55c:	4603      	mov	r3, r0
 801a55e:	b2db      	uxtb	r3, r3
 801a560:	f003 0307 	and.w	r3, r3, #7
 801a564:	2b00      	cmp	r3, #0
 801a566:	d116      	bne.n	801a596 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	691b      	ldr	r3, [r3, #16]
 801a56c:	899b      	ldrh	r3, [r3, #12]
 801a56e:	b29c      	uxth	r4, r3
 801a570:	2001      	movs	r0, #1
 801a572:	f7f7 fea3 	bl	80122bc <lwip_htons>
 801a576:	4603      	mov	r3, r0
 801a578:	461a      	mov	r2, r3
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	691b      	ldr	r3, [r3, #16]
 801a57e:	4322      	orrs	r2, r4
 801a580:	b292      	uxth	r2, r2
 801a582:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	8b5b      	ldrh	r3, [r3, #26]
 801a588:	f043 0320 	orr.w	r3, r3, #32
 801a58c:	b29a      	uxth	r2, r3
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a592:	2300      	movs	r3, #0
 801a594:	e004      	b.n	801a5a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a596:	2101      	movs	r1, #1
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	f000 f80b 	bl	801a5b4 <tcp_enqueue_flags>
 801a59e:	4603      	mov	r3, r0
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3714      	adds	r7, #20
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd90      	pop	{r4, r7, pc}
 801a5a8:	08027f78 	.word	0x08027f78
 801a5ac:	080283dc 	.word	0x080283dc
 801a5b0:	08027fcc 	.word	0x08027fcc

0801a5b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b088      	sub	sp, #32
 801a5b8:	af02      	add	r7, sp, #8
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	460b      	mov	r3, r1
 801a5be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a5c8:	78fb      	ldrb	r3, [r7, #3]
 801a5ca:	f003 0303 	and.w	r3, r3, #3
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d106      	bne.n	801a5e0 <tcp_enqueue_flags+0x2c>
 801a5d2:	4b67      	ldr	r3, [pc, #412]	; (801a770 <tcp_enqueue_flags+0x1bc>)
 801a5d4:	f240 4211 	movw	r2, #1041	; 0x411
 801a5d8:	4966      	ldr	r1, [pc, #408]	; (801a774 <tcp_enqueue_flags+0x1c0>)
 801a5da:	4867      	ldr	r0, [pc, #412]	; (801a778 <tcp_enqueue_flags+0x1c4>)
 801a5dc:	f007 faea 	bl	8021bb4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d106      	bne.n	801a5f4 <tcp_enqueue_flags+0x40>
 801a5e6:	4b62      	ldr	r3, [pc, #392]	; (801a770 <tcp_enqueue_flags+0x1bc>)
 801a5e8:	f240 4213 	movw	r2, #1043	; 0x413
 801a5ec:	4963      	ldr	r1, [pc, #396]	; (801a77c <tcp_enqueue_flags+0x1c8>)
 801a5ee:	4862      	ldr	r0, [pc, #392]	; (801a778 <tcp_enqueue_flags+0x1c4>)
 801a5f0:	f007 fae0 	bl	8021bb4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a5f4:	78fb      	ldrb	r3, [r7, #3]
 801a5f6:	f003 0302 	and.w	r3, r3, #2
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d001      	beq.n	801a602 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a5fe:	2301      	movs	r3, #1
 801a600:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a602:	7dfb      	ldrb	r3, [r7, #23]
 801a604:	009b      	lsls	r3, r3, #2
 801a606:	b2db      	uxtb	r3, r3
 801a608:	f003 0304 	and.w	r3, r3, #4
 801a60c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a60e:	7dbb      	ldrb	r3, [r7, #22]
 801a610:	b29b      	uxth	r3, r3
 801a612:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a616:	4619      	mov	r1, r3
 801a618:	2036      	movs	r0, #54	; 0x36
 801a61a:	f7f9 fef9 	bl	8014410 <pbuf_alloc>
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d109      	bne.n	801a63a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	8b5b      	ldrh	r3, [r3, #26]
 801a62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a62e:	b29a      	uxth	r2, r3
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a638:	e095      	b.n	801a766 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	895a      	ldrh	r2, [r3, #10]
 801a63e:	7dbb      	ldrb	r3, [r7, #22]
 801a640:	b29b      	uxth	r3, r3
 801a642:	429a      	cmp	r2, r3
 801a644:	d206      	bcs.n	801a654 <tcp_enqueue_flags+0xa0>
 801a646:	4b4a      	ldr	r3, [pc, #296]	; (801a770 <tcp_enqueue_flags+0x1bc>)
 801a648:	f240 4239 	movw	r2, #1081	; 0x439
 801a64c:	494c      	ldr	r1, [pc, #304]	; (801a780 <tcp_enqueue_flags+0x1cc>)
 801a64e:	484a      	ldr	r0, [pc, #296]	; (801a778 <tcp_enqueue_flags+0x1c4>)
 801a650:	f007 fab0 	bl	8021bb4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a658:	78fa      	ldrb	r2, [r7, #3]
 801a65a:	7dfb      	ldrb	r3, [r7, #23]
 801a65c:	9300      	str	r3, [sp, #0]
 801a65e:	460b      	mov	r3, r1
 801a660:	68f9      	ldr	r1, [r7, #12]
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	f7ff f8b8 	bl	80197d8 <tcp_create_segment>
 801a668:	60b8      	str	r0, [r7, #8]
 801a66a:	68bb      	ldr	r3, [r7, #8]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d109      	bne.n	801a684 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	8b5b      	ldrh	r3, [r3, #26]
 801a674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a678:	b29a      	uxth	r2, r3
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a682:	e070      	b.n	801a766 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a684:	68bb      	ldr	r3, [r7, #8]
 801a686:	691b      	ldr	r3, [r3, #16]
 801a688:	f003 0303 	and.w	r3, r3, #3
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d006      	beq.n	801a69e <tcp_enqueue_flags+0xea>
 801a690:	4b37      	ldr	r3, [pc, #220]	; (801a770 <tcp_enqueue_flags+0x1bc>)
 801a692:	f240 4242 	movw	r2, #1090	; 0x442
 801a696:	493b      	ldr	r1, [pc, #236]	; (801a784 <tcp_enqueue_flags+0x1d0>)
 801a698:	4837      	ldr	r0, [pc, #220]	; (801a778 <tcp_enqueue_flags+0x1c4>)
 801a69a:	f007 fa8b 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a69e:	68bb      	ldr	r3, [r7, #8]
 801a6a0:	891b      	ldrh	r3, [r3, #8]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d006      	beq.n	801a6b4 <tcp_enqueue_flags+0x100>
 801a6a6:	4b32      	ldr	r3, [pc, #200]	; (801a770 <tcp_enqueue_flags+0x1bc>)
 801a6a8:	f240 4243 	movw	r2, #1091	; 0x443
 801a6ac:	4936      	ldr	r1, [pc, #216]	; (801a788 <tcp_enqueue_flags+0x1d4>)
 801a6ae:	4832      	ldr	r0, [pc, #200]	; (801a778 <tcp_enqueue_flags+0x1c4>)
 801a6b0:	f007 fa80 	bl	8021bb4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d103      	bne.n	801a6c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	68ba      	ldr	r2, [r7, #8]
 801a6c0:	66da      	str	r2, [r3, #108]	; 0x6c
 801a6c2:	e00d      	b.n	801a6e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6c8:	613b      	str	r3, [r7, #16]
 801a6ca:	e002      	b.n	801a6d2 <tcp_enqueue_flags+0x11e>
 801a6cc:	693b      	ldr	r3, [r7, #16]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	613b      	str	r3, [r7, #16]
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d1f8      	bne.n	801a6cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	68ba      	ldr	r2, [r7, #8]
 801a6de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a6e8:	78fb      	ldrb	r3, [r7, #3]
 801a6ea:	f003 0302 	and.w	r3, r3, #2
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d104      	bne.n	801a6fc <tcp_enqueue_flags+0x148>
 801a6f2:	78fb      	ldrb	r3, [r7, #3]
 801a6f4:	f003 0301 	and.w	r3, r3, #1
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d004      	beq.n	801a706 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a700:	1c5a      	adds	r2, r3, #1
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a706:	78fb      	ldrb	r3, [r7, #3]
 801a708:	f003 0301 	and.w	r3, r3, #1
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d006      	beq.n	801a71e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	8b5b      	ldrh	r3, [r3, #26]
 801a714:	f043 0320 	orr.w	r3, r3, #32
 801a718:	b29a      	uxth	r2, r3
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a71e:	68bb      	ldr	r3, [r7, #8]
 801a720:	685b      	ldr	r3, [r3, #4]
 801a722:	4618      	mov	r0, r3
 801a724:	f7fa fa18 	bl	8014b58 <pbuf_clen>
 801a728:	4603      	mov	r3, r0
 801a72a:	461a      	mov	r2, r3
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a732:	4413      	add	r3, r2
 801a734:	b29a      	uxth	r2, r3
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a742:	2b00      	cmp	r3, #0
 801a744:	d00e      	beq.n	801a764 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d10a      	bne.n	801a764 <tcp_enqueue_flags+0x1b0>
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a752:	2b00      	cmp	r3, #0
 801a754:	d106      	bne.n	801a764 <tcp_enqueue_flags+0x1b0>
 801a756:	4b06      	ldr	r3, [pc, #24]	; (801a770 <tcp_enqueue_flags+0x1bc>)
 801a758:	f240 4265 	movw	r2, #1125	; 0x465
 801a75c:	490b      	ldr	r1, [pc, #44]	; (801a78c <tcp_enqueue_flags+0x1d8>)
 801a75e:	4806      	ldr	r0, [pc, #24]	; (801a778 <tcp_enqueue_flags+0x1c4>)
 801a760:	f007 fa28 	bl	8021bb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a764:	2300      	movs	r3, #0
}
 801a766:	4618      	mov	r0, r3
 801a768:	3718      	adds	r7, #24
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	08027f78 	.word	0x08027f78
 801a774:	080283f8 	.word	0x080283f8
 801a778:	08027fcc 	.word	0x08027fcc
 801a77c:	08028450 	.word	0x08028450
 801a780:	08028470 	.word	0x08028470
 801a784:	080284ac 	.word	0x080284ac
 801a788:	080284c4 	.word	0x080284c4
 801a78c:	080284f0 	.word	0x080284f0

0801a790 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a790:	b5b0      	push	{r4, r5, r7, lr}
 801a792:	b08a      	sub	sp, #40	; 0x28
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d106      	bne.n	801a7ac <tcp_output+0x1c>
 801a79e:	4b9f      	ldr	r3, [pc, #636]	; (801aa1c <tcp_output+0x28c>)
 801a7a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801a7a4:	499e      	ldr	r1, [pc, #632]	; (801aa20 <tcp_output+0x290>)
 801a7a6:	489f      	ldr	r0, [pc, #636]	; (801aa24 <tcp_output+0x294>)
 801a7a8:	f007 fa04 	bl	8021bb4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	7d1b      	ldrb	r3, [r3, #20]
 801a7b0:	2b01      	cmp	r3, #1
 801a7b2:	d106      	bne.n	801a7c2 <tcp_output+0x32>
 801a7b4:	4b99      	ldr	r3, [pc, #612]	; (801aa1c <tcp_output+0x28c>)
 801a7b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801a7ba:	499b      	ldr	r1, [pc, #620]	; (801aa28 <tcp_output+0x298>)
 801a7bc:	4899      	ldr	r0, [pc, #612]	; (801aa24 <tcp_output+0x294>)
 801a7be:	f007 f9f9 	bl	8021bb4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a7c2:	4b9a      	ldr	r3, [pc, #616]	; (801aa2c <tcp_output+0x29c>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	687a      	ldr	r2, [r7, #4]
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d101      	bne.n	801a7d0 <tcp_output+0x40>
    return ERR_OK;
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	e1d0      	b.n	801ab72 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a7dc:	4293      	cmp	r3, r2
 801a7de:	bf28      	it	cs
 801a7e0:	4613      	movcs	r3, r2
 801a7e2:	b29b      	uxth	r3, r3
 801a7e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d10b      	bne.n	801a80a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	8b5b      	ldrh	r3, [r3, #26]
 801a7f6:	f003 0302 	and.w	r3, r3, #2
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	f000 81ac 	beq.w	801ab58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	f000 fdd7 	bl	801b3b4 <tcp_send_empty_ack>
 801a806:	4603      	mov	r3, r0
 801a808:	e1b3      	b.n	801ab72 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a80a:	6879      	ldr	r1, [r7, #4]
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	3304      	adds	r3, #4
 801a810:	461a      	mov	r2, r3
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	f7fe ffc4 	bl	80197a0 <tcp_route>
 801a818:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a81a:	697b      	ldr	r3, [r7, #20]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d102      	bne.n	801a826 <tcp_output+0x96>
    return ERR_RTE;
 801a820:	f06f 0303 	mvn.w	r3, #3
 801a824:	e1a5      	b.n	801ab72 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d003      	beq.n	801a834 <tcp_output+0xa4>
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d111      	bne.n	801a858 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d002      	beq.n	801a840 <tcp_output+0xb0>
 801a83a:	697b      	ldr	r3, [r7, #20]
 801a83c:	3304      	adds	r3, #4
 801a83e:	e000      	b.n	801a842 <tcp_output+0xb2>
 801a840:	2300      	movs	r3, #0
 801a842:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a844:	693b      	ldr	r3, [r7, #16]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d102      	bne.n	801a850 <tcp_output+0xc0>
      return ERR_RTE;
 801a84a:	f06f 0303 	mvn.w	r3, #3
 801a84e:	e190      	b.n	801ab72 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a850:	693b      	ldr	r3, [r7, #16]
 801a852:	681a      	ldr	r2, [r3, #0]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a85a:	691b      	ldr	r3, [r3, #16]
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	4618      	mov	r0, r3
 801a860:	f7f7 fd41 	bl	80122e6 <lwip_htonl>
 801a864:	4602      	mov	r2, r0
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a86a:	1ad3      	subs	r3, r2, r3
 801a86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a86e:	8912      	ldrh	r2, [r2, #8]
 801a870:	4413      	add	r3, r2
 801a872:	69ba      	ldr	r2, [r7, #24]
 801a874:	429a      	cmp	r2, r3
 801a876:	d227      	bcs.n	801a8c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a87e:	461a      	mov	r2, r3
 801a880:	69bb      	ldr	r3, [r7, #24]
 801a882:	4293      	cmp	r3, r2
 801a884:	d114      	bne.n	801a8b0 <tcp_output+0x120>
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d110      	bne.n	801a8b0 <tcp_output+0x120>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a894:	2b00      	cmp	r3, #0
 801a896:	d10b      	bne.n	801a8b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	2200      	movs	r2, #0
 801a89c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	8b5b      	ldrh	r3, [r3, #26]
 801a8b4:	f003 0302 	and.w	r3, r3, #2
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f000 814f 	beq.w	801ab5c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801a8be:	6878      	ldr	r0, [r7, #4]
 801a8c0:	f000 fd78 	bl	801b3b4 <tcp_send_empty_ack>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	e154      	b.n	801ab72 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a8d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a8d6:	6a3b      	ldr	r3, [r7, #32]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	f000 811e 	beq.w	801ab1a <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801a8de:	e002      	b.n	801a8e6 <tcp_output+0x156>
 801a8e0:	6a3b      	ldr	r3, [r7, #32]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	623b      	str	r3, [r7, #32]
 801a8e6:	6a3b      	ldr	r3, [r7, #32]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d1f8      	bne.n	801a8e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a8ee:	e114      	b.n	801ab1a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f2:	691b      	ldr	r3, [r3, #16]
 801a8f4:	899b      	ldrh	r3, [r3, #12]
 801a8f6:	b29b      	uxth	r3, r3
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7f7 fcdf 	bl	80122bc <lwip_htons>
 801a8fe:	4603      	mov	r3, r0
 801a900:	b2db      	uxtb	r3, r3
 801a902:	f003 0304 	and.w	r3, r3, #4
 801a906:	2b00      	cmp	r3, #0
 801a908:	d006      	beq.n	801a918 <tcp_output+0x188>
 801a90a:	4b44      	ldr	r3, [pc, #272]	; (801aa1c <tcp_output+0x28c>)
 801a90c:	f240 5236 	movw	r2, #1334	; 0x536
 801a910:	4947      	ldr	r1, [pc, #284]	; (801aa30 <tcp_output+0x2a0>)
 801a912:	4844      	ldr	r0, [pc, #272]	; (801aa24 <tcp_output+0x294>)
 801a914:	f007 f94e 	bl	8021bb4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d01f      	beq.n	801a960 <tcp_output+0x1d0>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	8b5b      	ldrh	r3, [r3, #26]
 801a924:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d119      	bne.n	801a960 <tcp_output+0x1d0>
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a930:	2b00      	cmp	r3, #0
 801a932:	d00b      	beq.n	801a94c <tcp_output+0x1bc>
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d110      	bne.n	801a960 <tcp_output+0x1d0>
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a942:	891a      	ldrh	r2, [r3, #8]
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a948:	429a      	cmp	r2, r3
 801a94a:	d209      	bcs.n	801a960 <tcp_output+0x1d0>
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a952:	2b00      	cmp	r3, #0
 801a954:	d004      	beq.n	801a960 <tcp_output+0x1d0>
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a95c:	2b08      	cmp	r3, #8
 801a95e:	d901      	bls.n	801a964 <tcp_output+0x1d4>
 801a960:	2301      	movs	r3, #1
 801a962:	e000      	b.n	801a966 <tcp_output+0x1d6>
 801a964:	2300      	movs	r3, #0
 801a966:	2b00      	cmp	r3, #0
 801a968:	d106      	bne.n	801a978 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	8b5b      	ldrh	r3, [r3, #26]
 801a96e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a972:	2b00      	cmp	r3, #0
 801a974:	f000 80e6 	beq.w	801ab44 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	7d1b      	ldrb	r3, [r3, #20]
 801a97c:	2b02      	cmp	r3, #2
 801a97e:	d00d      	beq.n	801a99c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a982:	691b      	ldr	r3, [r3, #16]
 801a984:	899b      	ldrh	r3, [r3, #12]
 801a986:	b29c      	uxth	r4, r3
 801a988:	2010      	movs	r0, #16
 801a98a:	f7f7 fc97 	bl	80122bc <lwip_htons>
 801a98e:	4603      	mov	r3, r0
 801a990:	461a      	mov	r2, r3
 801a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a994:	691b      	ldr	r3, [r3, #16]
 801a996:	4322      	orrs	r2, r4
 801a998:	b292      	uxth	r2, r2
 801a99a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a99c:	697a      	ldr	r2, [r7, #20]
 801a99e:	6879      	ldr	r1, [r7, #4]
 801a9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a9a2:	f000 f90b 	bl	801abbc <tcp_output_segment>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a9aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d009      	beq.n	801a9c6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	8b5b      	ldrh	r3, [r3, #26]
 801a9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9ba:	b29a      	uxth	r2, r3
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	835a      	strh	r2, [r3, #26]
      return err;
 801a9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9c4:	e0d5      	b.n	801ab72 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9ce:	681a      	ldr	r2, [r3, #0]
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	7d1b      	ldrb	r3, [r3, #20]
 801a9d8:	2b02      	cmp	r3, #2
 801a9da:	d006      	beq.n	801a9ea <tcp_output+0x25a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	8b5b      	ldrh	r3, [r3, #26]
 801a9e0:	f023 0303 	bic.w	r3, r3, #3
 801a9e4:	b29a      	uxth	r2, r3
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9ec:	691b      	ldr	r3, [r3, #16]
 801a9ee:	685b      	ldr	r3, [r3, #4]
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7f7 fc78 	bl	80122e6 <lwip_htonl>
 801a9f6:	4604      	mov	r4, r0
 801a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9fa:	891b      	ldrh	r3, [r3, #8]
 801a9fc:	461d      	mov	r5, r3
 801a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa00:	691b      	ldr	r3, [r3, #16]
 801aa02:	899b      	ldrh	r3, [r3, #12]
 801aa04:	b29b      	uxth	r3, r3
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7f7 fc58 	bl	80122bc <lwip_htons>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	f003 0303 	and.w	r3, r3, #3
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d00d      	beq.n	801aa34 <tcp_output+0x2a4>
 801aa18:	2301      	movs	r3, #1
 801aa1a:	e00c      	b.n	801aa36 <tcp_output+0x2a6>
 801aa1c:	08027f78 	.word	0x08027f78
 801aa20:	08028518 	.word	0x08028518
 801aa24:	08027fcc 	.word	0x08027fcc
 801aa28:	08028530 	.word	0x08028530
 801aa2c:	2001b19c 	.word	0x2001b19c
 801aa30:	08028558 	.word	0x08028558
 801aa34:	2300      	movs	r3, #0
 801aa36:	442b      	add	r3, r5
 801aa38:	4423      	add	r3, r4
 801aa3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa40:	68bb      	ldr	r3, [r7, #8]
 801aa42:	1ad3      	subs	r3, r2, r3
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	da02      	bge.n	801aa4e <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	68ba      	ldr	r2, [r7, #8]
 801aa4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa50:	891b      	ldrh	r3, [r3, #8]
 801aa52:	461c      	mov	r4, r3
 801aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa56:	691b      	ldr	r3, [r3, #16]
 801aa58:	899b      	ldrh	r3, [r3, #12]
 801aa5a:	b29b      	uxth	r3, r3
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f7f7 fc2d 	bl	80122bc <lwip_htons>
 801aa62:	4603      	mov	r3, r0
 801aa64:	b2db      	uxtb	r3, r3
 801aa66:	f003 0303 	and.w	r3, r3, #3
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d001      	beq.n	801aa72 <tcp_output+0x2e2>
 801aa6e:	2301      	movs	r3, #1
 801aa70:	e000      	b.n	801aa74 <tcp_output+0x2e4>
 801aa72:	2300      	movs	r3, #0
 801aa74:	4423      	add	r3, r4
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d049      	beq.n	801ab0e <tcp_output+0x37e>
      seg->next = NULL;
 801aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d105      	bne.n	801aa94 <tcp_output+0x304>
        pcb->unacked = seg;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa8c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa90:	623b      	str	r3, [r7, #32]
 801aa92:	e03f      	b.n	801ab14 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa96:	691b      	ldr	r3, [r3, #16]
 801aa98:	685b      	ldr	r3, [r3, #4]
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f7f7 fc23 	bl	80122e6 <lwip_htonl>
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	6a3b      	ldr	r3, [r7, #32]
 801aaa4:	691b      	ldr	r3, [r3, #16]
 801aaa6:	685b      	ldr	r3, [r3, #4]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f7f7 fc1c 	bl	80122e6 <lwip_htonl>
 801aaae:	4603      	mov	r3, r0
 801aab0:	1ae3      	subs	r3, r4, r3
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	da24      	bge.n	801ab00 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	3370      	adds	r3, #112	; 0x70
 801aaba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801aabc:	e002      	b.n	801aac4 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801aabe:	69fb      	ldr	r3, [r7, #28]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801aac4:	69fb      	ldr	r3, [r7, #28]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d011      	beq.n	801aaf0 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801aacc:	69fb      	ldr	r3, [r7, #28]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	691b      	ldr	r3, [r3, #16]
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	4618      	mov	r0, r3
 801aad6:	f7f7 fc06 	bl	80122e6 <lwip_htonl>
 801aada:	4604      	mov	r4, r0
 801aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aade:	691b      	ldr	r3, [r3, #16]
 801aae0:	685b      	ldr	r3, [r3, #4]
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7f7 fbff 	bl	80122e6 <lwip_htonl>
 801aae8:	4603      	mov	r3, r0
 801aaea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	dbe6      	blt.n	801aabe <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 801aaf0:	69fb      	ldr	r3, [r7, #28]
 801aaf2:	681a      	ldr	r2, [r3, #0]
 801aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801aaf8:	69fb      	ldr	r3, [r7, #28]
 801aafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aafc:	601a      	str	r2, [r3, #0]
 801aafe:	e009      	b.n	801ab14 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ab00:	6a3b      	ldr	r3, [r7, #32]
 801ab02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ab06:	6a3b      	ldr	r3, [r7, #32]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	623b      	str	r3, [r7, #32]
 801ab0c:	e002      	b.n	801ab14 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ab0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab10:	f7fb febb 	bl	801688a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab18:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d012      	beq.n	801ab46 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab22:	691b      	ldr	r3, [r3, #16]
 801ab24:	685b      	ldr	r3, [r3, #4]
 801ab26:	4618      	mov	r0, r3
 801ab28:	f7f7 fbdd 	bl	80122e6 <lwip_htonl>
 801ab2c:	4602      	mov	r2, r0
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab32:	1ad3      	subs	r3, r2, r3
 801ab34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab36:	8912      	ldrh	r2, [r2, #8]
 801ab38:	4413      	add	r3, r2
  while (seg != NULL &&
 801ab3a:	69ba      	ldr	r2, [r7, #24]
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	f4bf aed7 	bcs.w	801a8f0 <tcp_output+0x160>
 801ab42:	e000      	b.n	801ab46 <tcp_output+0x3b6>
      break;
 801ab44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d108      	bne.n	801ab60 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	2200      	movs	r2, #0
 801ab52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ab56:	e004      	b.n	801ab62 <tcp_output+0x3d2>
    goto output_done;
 801ab58:	bf00      	nop
 801ab5a:	e002      	b.n	801ab62 <tcp_output+0x3d2>
    goto output_done;
 801ab5c:	bf00      	nop
 801ab5e:	e000      	b.n	801ab62 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ab60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	8b5b      	ldrh	r3, [r3, #26]
 801ab66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ab6a:	b29a      	uxth	r2, r3
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ab70:	2300      	movs	r3, #0
}
 801ab72:	4618      	mov	r0, r3
 801ab74:	3728      	adds	r7, #40	; 0x28
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bdb0      	pop	{r4, r5, r7, pc}
 801ab7a:	bf00      	nop

0801ab7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b082      	sub	sp, #8
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d106      	bne.n	801ab98 <tcp_output_segment_busy+0x1c>
 801ab8a:	4b09      	ldr	r3, [pc, #36]	; (801abb0 <tcp_output_segment_busy+0x34>)
 801ab8c:	f240 529a 	movw	r2, #1434	; 0x59a
 801ab90:	4908      	ldr	r1, [pc, #32]	; (801abb4 <tcp_output_segment_busy+0x38>)
 801ab92:	4809      	ldr	r0, [pc, #36]	; (801abb8 <tcp_output_segment_busy+0x3c>)
 801ab94:	f007 f80e 	bl	8021bb4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	685b      	ldr	r3, [r3, #4]
 801ab9c:	7b9b      	ldrb	r3, [r3, #14]
 801ab9e:	2b01      	cmp	r3, #1
 801aba0:	d001      	beq.n	801aba6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801aba2:	2301      	movs	r3, #1
 801aba4:	e000      	b.n	801aba8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801aba6:	2300      	movs	r3, #0
}
 801aba8:	4618      	mov	r0, r3
 801abaa:	3708      	adds	r7, #8
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}
 801abb0:	08027f78 	.word	0x08027f78
 801abb4:	08028570 	.word	0x08028570
 801abb8:	08027fcc 	.word	0x08027fcc

0801abbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801abbc:	b5b0      	push	{r4, r5, r7, lr}
 801abbe:	b08c      	sub	sp, #48	; 0x30
 801abc0:	af04      	add	r7, sp, #16
 801abc2:	60f8      	str	r0, [r7, #12]
 801abc4:	60b9      	str	r1, [r7, #8]
 801abc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d106      	bne.n	801abdc <tcp_output_segment+0x20>
 801abce:	4b63      	ldr	r3, [pc, #396]	; (801ad5c <tcp_output_segment+0x1a0>)
 801abd0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801abd4:	4962      	ldr	r1, [pc, #392]	; (801ad60 <tcp_output_segment+0x1a4>)
 801abd6:	4863      	ldr	r0, [pc, #396]	; (801ad64 <tcp_output_segment+0x1a8>)
 801abd8:	f006 ffec 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d106      	bne.n	801abf0 <tcp_output_segment+0x34>
 801abe2:	4b5e      	ldr	r3, [pc, #376]	; (801ad5c <tcp_output_segment+0x1a0>)
 801abe4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801abe8:	495f      	ldr	r1, [pc, #380]	; (801ad68 <tcp_output_segment+0x1ac>)
 801abea:	485e      	ldr	r0, [pc, #376]	; (801ad64 <tcp_output_segment+0x1a8>)
 801abec:	f006 ffe2 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d106      	bne.n	801ac04 <tcp_output_segment+0x48>
 801abf6:	4b59      	ldr	r3, [pc, #356]	; (801ad5c <tcp_output_segment+0x1a0>)
 801abf8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801abfc:	495b      	ldr	r1, [pc, #364]	; (801ad6c <tcp_output_segment+0x1b0>)
 801abfe:	4859      	ldr	r0, [pc, #356]	; (801ad64 <tcp_output_segment+0x1a8>)
 801ac00:	f006 ffd8 	bl	8021bb4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ac04:	68f8      	ldr	r0, [r7, #12]
 801ac06:	f7ff ffb9 	bl	801ab7c <tcp_output_segment_busy>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d001      	beq.n	801ac14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ac10:	2300      	movs	r3, #0
 801ac12:	e09f      	b.n	801ad54 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	691c      	ldr	r4, [r3, #16]
 801ac1c:	4610      	mov	r0, r2
 801ac1e:	f7f7 fb62 	bl	80122e6 <lwip_htonl>
 801ac22:	4603      	mov	r3, r0
 801ac24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	691c      	ldr	r4, [r3, #16]
 801ac2e:	4610      	mov	r0, r2
 801ac30:	f7f7 fb44 	bl	80122bc <lwip_htons>
 801ac34:	4603      	mov	r3, r0
 801ac36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac3c:	68ba      	ldr	r2, [r7, #8]
 801ac3e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ac40:	441a      	add	r2, r3
 801ac42:	68bb      	ldr	r3, [r7, #8]
 801ac44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	691b      	ldr	r3, [r3, #16]
 801ac4a:	3314      	adds	r3, #20
 801ac4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	7b1b      	ldrb	r3, [r3, #12]
 801ac52:	f003 0301 	and.w	r3, r3, #1
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d015      	beq.n	801ac86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	3304      	adds	r3, #4
 801ac5e:	461a      	mov	r2, r3
 801ac60:	6879      	ldr	r1, [r7, #4]
 801ac62:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ac66:	f7fc f9d5 	bl	8017014 <tcp_eff_send_mss_netif>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ac6e:	8b7b      	ldrh	r3, [r7, #26]
 801ac70:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ac74:	4618      	mov	r0, r3
 801ac76:	f7f7 fb36 	bl	80122e6 <lwip_htonl>
 801ac7a:	4602      	mov	r2, r0
 801ac7c:	69fb      	ldr	r3, [r7, #28]
 801ac7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ac80:	69fb      	ldr	r3, [r7, #28]
 801ac82:	3304      	adds	r3, #4
 801ac84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ac86:	68bb      	ldr	r3, [r7, #8]
 801ac88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	da02      	bge.n	801ac96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	2200      	movs	r2, #0
 801ac94:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ac96:	68bb      	ldr	r3, [r7, #8]
 801ac98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d10c      	bne.n	801acb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ac9e:	4b34      	ldr	r3, [pc, #208]	; (801ad70 <tcp_output_segment+0x1b4>)
 801aca0:	681a      	ldr	r2, [r3, #0]
 801aca2:	68bb      	ldr	r3, [r7, #8]
 801aca4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	691b      	ldr	r3, [r3, #16]
 801acaa:	685b      	ldr	r3, [r3, #4]
 801acac:	4618      	mov	r0, r3
 801acae:	f7f7 fb1a 	bl	80122e6 <lwip_htonl>
 801acb2:	4602      	mov	r2, r0
 801acb4:	68bb      	ldr	r3, [r7, #8]
 801acb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	691a      	ldr	r2, [r3, #16]
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	685b      	ldr	r3, [r3, #4]
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	1ad3      	subs	r3, r2, r3
 801acc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	685b      	ldr	r3, [r3, #4]
 801acca:	8959      	ldrh	r1, [r3, #10]
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	8b3a      	ldrh	r2, [r7, #24]
 801acd2:	1a8a      	subs	r2, r1, r2
 801acd4:	b292      	uxth	r2, r2
 801acd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	685b      	ldr	r3, [r3, #4]
 801acdc:	8919      	ldrh	r1, [r3, #8]
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	685b      	ldr	r3, [r3, #4]
 801ace2:	8b3a      	ldrh	r2, [r7, #24]
 801ace4:	1a8a      	subs	r2, r1, r2
 801ace6:	b292      	uxth	r2, r2
 801ace8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	685b      	ldr	r3, [r3, #4]
 801acee:	68fa      	ldr	r2, [r7, #12]
 801acf0:	6912      	ldr	r2, [r2, #16]
 801acf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	691b      	ldr	r3, [r3, #16]
 801acf8:	2200      	movs	r2, #0
 801acfa:	741a      	strb	r2, [r3, #16]
 801acfc:	2200      	movs	r2, #0
 801acfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	691b      	ldr	r3, [r3, #16]
 801ad04:	f103 0214 	add.w	r2, r3, #20
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	7b1b      	ldrb	r3, [r3, #12]
 801ad0c:	009b      	lsls	r3, r3, #2
 801ad0e:	f003 0304 	and.w	r3, r3, #4
 801ad12:	4413      	add	r3, r2
 801ad14:	69fa      	ldr	r2, [r7, #28]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d006      	beq.n	801ad28 <tcp_output_segment+0x16c>
 801ad1a:	4b10      	ldr	r3, [pc, #64]	; (801ad5c <tcp_output_segment+0x1a0>)
 801ad1c:	f240 621c 	movw	r2, #1564	; 0x61c
 801ad20:	4914      	ldr	r1, [pc, #80]	; (801ad74 <tcp_output_segment+0x1b8>)
 801ad22:	4810      	ldr	r0, [pc, #64]	; (801ad64 <tcp_output_segment+0x1a8>)
 801ad24:	f006 ff46 	bl	8021bb4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	6858      	ldr	r0, [r3, #4]
 801ad2c:	68b9      	ldr	r1, [r7, #8]
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	1d1c      	adds	r4, r3, #4
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	7add      	ldrb	r5, [r3, #11]
 801ad36:	68bb      	ldr	r3, [r7, #8]
 801ad38:	7a9b      	ldrb	r3, [r3, #10]
 801ad3a:	687a      	ldr	r2, [r7, #4]
 801ad3c:	9202      	str	r2, [sp, #8]
 801ad3e:	2206      	movs	r2, #6
 801ad40:	9201      	str	r2, [sp, #4]
 801ad42:	9300      	str	r3, [sp, #0]
 801ad44:	462b      	mov	r3, r5
 801ad46:	4622      	mov	r2, r4
 801ad48:	f004 fd7c 	bl	801f844 <ip4_output_if>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ad50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ad54:	4618      	mov	r0, r3
 801ad56:	3720      	adds	r7, #32
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bdb0      	pop	{r4, r5, r7, pc}
 801ad5c:	08027f78 	.word	0x08027f78
 801ad60:	08028598 	.word	0x08028598
 801ad64:	08027fcc 	.word	0x08027fcc
 801ad68:	080285b8 	.word	0x080285b8
 801ad6c:	080285d8 	.word	0x080285d8
 801ad70:	2001b18c 	.word	0x2001b18c
 801ad74:	080285fc 	.word	0x080285fc

0801ad78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ad78:	b5b0      	push	{r4, r5, r7, lr}
 801ad7a:	b084      	sub	sp, #16
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d106      	bne.n	801ad94 <tcp_rexmit_rto_prepare+0x1c>
 801ad86:	4b36      	ldr	r3, [pc, #216]	; (801ae60 <tcp_rexmit_rto_prepare+0xe8>)
 801ad88:	f240 6263 	movw	r2, #1635	; 0x663
 801ad8c:	4935      	ldr	r1, [pc, #212]	; (801ae64 <tcp_rexmit_rto_prepare+0xec>)
 801ad8e:	4836      	ldr	r0, [pc, #216]	; (801ae68 <tcp_rexmit_rto_prepare+0xf0>)
 801ad90:	f006 ff10 	bl	8021bb4 <iprintf>

  if (pcb->unacked == NULL) {
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d102      	bne.n	801ada2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ad9c:	f06f 0305 	mvn.w	r3, #5
 801ada0:	e059      	b.n	801ae56 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ada6:	60fb      	str	r3, [r7, #12]
 801ada8:	e00b      	b.n	801adc2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801adaa:	68f8      	ldr	r0, [r7, #12]
 801adac:	f7ff fee6 	bl	801ab7c <tcp_output_segment_busy>
 801adb0:	4603      	mov	r3, r0
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d002      	beq.n	801adbc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801adb6:	f06f 0305 	mvn.w	r3, #5
 801adba:	e04c      	b.n	801ae56 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	60fb      	str	r3, [r7, #12]
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d1ef      	bne.n	801adaa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801adca:	68f8      	ldr	r0, [r7, #12]
 801adcc:	f7ff fed6 	bl	801ab7c <tcp_output_segment_busy>
 801add0:	4603      	mov	r3, r0
 801add2:	2b00      	cmp	r3, #0
 801add4:	d002      	beq.n	801addc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801add6:	f06f 0305 	mvn.w	r3, #5
 801adda:	e03c      	b.n	801ae56 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d104      	bne.n	801adf6 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	895a      	ldrh	r2, [r3, #10]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	2200      	movs	r2, #0
 801ae02:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	8b5b      	ldrh	r3, [r3, #26]
 801ae08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ae0c:	b29a      	uxth	r2, r3
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	691b      	ldr	r3, [r3, #16]
 801ae16:	685b      	ldr	r3, [r3, #4]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f7f7 fa64 	bl	80122e6 <lwip_htonl>
 801ae1e:	4604      	mov	r4, r0
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	891b      	ldrh	r3, [r3, #8]
 801ae24:	461d      	mov	r5, r3
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	691b      	ldr	r3, [r3, #16]
 801ae2a:	899b      	ldrh	r3, [r3, #12]
 801ae2c:	b29b      	uxth	r3, r3
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f7f7 fa44 	bl	80122bc <lwip_htons>
 801ae34:	4603      	mov	r3, r0
 801ae36:	b2db      	uxtb	r3, r3
 801ae38:	f003 0303 	and.w	r3, r3, #3
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d001      	beq.n	801ae44 <tcp_rexmit_rto_prepare+0xcc>
 801ae40:	2301      	movs	r3, #1
 801ae42:	e000      	b.n	801ae46 <tcp_rexmit_rto_prepare+0xce>
 801ae44:	2300      	movs	r3, #0
 801ae46:	442b      	add	r3, r5
 801ae48:	18e2      	adds	r2, r4, r3
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	2200      	movs	r2, #0
 801ae52:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ae54:	2300      	movs	r3, #0
}
 801ae56:	4618      	mov	r0, r3
 801ae58:	3710      	adds	r7, #16
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	bdb0      	pop	{r4, r5, r7, pc}
 801ae5e:	bf00      	nop
 801ae60:	08027f78 	.word	0x08027f78
 801ae64:	08028610 	.word	0x08028610
 801ae68:	08027fcc 	.word	0x08027fcc

0801ae6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b082      	sub	sp, #8
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d106      	bne.n	801ae88 <tcp_rexmit_rto_commit+0x1c>
 801ae7a:	4b0d      	ldr	r3, [pc, #52]	; (801aeb0 <tcp_rexmit_rto_commit+0x44>)
 801ae7c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ae80:	490c      	ldr	r1, [pc, #48]	; (801aeb4 <tcp_rexmit_rto_commit+0x48>)
 801ae82:	480d      	ldr	r0, [pc, #52]	; (801aeb8 <tcp_rexmit_rto_commit+0x4c>)
 801ae84:	f006 fe96 	bl	8021bb4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ae8e:	2bff      	cmp	r3, #255	; 0xff
 801ae90:	d007      	beq.n	801aea2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ae98:	3301      	adds	r3, #1
 801ae9a:	b2da      	uxtb	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	f7ff fc74 	bl	801a790 <tcp_output>
}
 801aea8:	bf00      	nop
 801aeaa:	3708      	adds	r7, #8
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bd80      	pop	{r7, pc}
 801aeb0:	08027f78 	.word	0x08027f78
 801aeb4:	08028634 	.word	0x08028634
 801aeb8:	08027fcc 	.word	0x08027fcc

0801aebc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b082      	sub	sp, #8
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d106      	bne.n	801aed8 <tcp_rexmit_rto+0x1c>
 801aeca:	4b0a      	ldr	r3, [pc, #40]	; (801aef4 <tcp_rexmit_rto+0x38>)
 801aecc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801aed0:	4909      	ldr	r1, [pc, #36]	; (801aef8 <tcp_rexmit_rto+0x3c>)
 801aed2:	480a      	ldr	r0, [pc, #40]	; (801aefc <tcp_rexmit_rto+0x40>)
 801aed4:	f006 fe6e 	bl	8021bb4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f7ff ff4d 	bl	801ad78 <tcp_rexmit_rto_prepare>
 801aede:	4603      	mov	r3, r0
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d102      	bne.n	801aeea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801aee4:	6878      	ldr	r0, [r7, #4]
 801aee6:	f7ff ffc1 	bl	801ae6c <tcp_rexmit_rto_commit>
  }
}
 801aeea:	bf00      	nop
 801aeec:	3708      	adds	r7, #8
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd80      	pop	{r7, pc}
 801aef2:	bf00      	nop
 801aef4:	08027f78 	.word	0x08027f78
 801aef8:	08028658 	.word	0x08028658
 801aefc:	08027fcc 	.word	0x08027fcc

0801af00 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801af00:	b590      	push	{r4, r7, lr}
 801af02:	b085      	sub	sp, #20
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d106      	bne.n	801af1c <tcp_rexmit+0x1c>
 801af0e:	4b2f      	ldr	r3, [pc, #188]	; (801afcc <tcp_rexmit+0xcc>)
 801af10:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801af14:	492e      	ldr	r1, [pc, #184]	; (801afd0 <tcp_rexmit+0xd0>)
 801af16:	482f      	ldr	r0, [pc, #188]	; (801afd4 <tcp_rexmit+0xd4>)
 801af18:	f006 fe4c 	bl	8021bb4 <iprintf>

  if (pcb->unacked == NULL) {
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af20:	2b00      	cmp	r3, #0
 801af22:	d102      	bne.n	801af2a <tcp_rexmit+0x2a>
    return ERR_VAL;
 801af24:	f06f 0305 	mvn.w	r3, #5
 801af28:	e04c      	b.n	801afc4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af2e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801af30:	68b8      	ldr	r0, [r7, #8]
 801af32:	f7ff fe23 	bl	801ab7c <tcp_output_segment_busy>
 801af36:	4603      	mov	r3, r0
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d002      	beq.n	801af42 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801af3c:	f06f 0305 	mvn.w	r3, #5
 801af40:	e040      	b.n	801afc4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801af42:	68bb      	ldr	r3, [r7, #8]
 801af44:	681a      	ldr	r2, [r3, #0]
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	336c      	adds	r3, #108	; 0x6c
 801af4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801af50:	e002      	b.n	801af58 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d011      	beq.n	801af84 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	691b      	ldr	r3, [r3, #16]
 801af66:	685b      	ldr	r3, [r3, #4]
 801af68:	4618      	mov	r0, r3
 801af6a:	f7f7 f9bc 	bl	80122e6 <lwip_htonl>
 801af6e:	4604      	mov	r4, r0
 801af70:	68bb      	ldr	r3, [r7, #8]
 801af72:	691b      	ldr	r3, [r3, #16]
 801af74:	685b      	ldr	r3, [r3, #4]
 801af76:	4618      	mov	r0, r3
 801af78:	f7f7 f9b5 	bl	80122e6 <lwip_htonl>
 801af7c:	4603      	mov	r3, r0
 801af7e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801af80:	2b00      	cmp	r3, #0
 801af82:	dbe6      	blt.n	801af52 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	681a      	ldr	r2, [r3, #0]
 801af88:	68bb      	ldr	r3, [r7, #8]
 801af8a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	68ba      	ldr	r2, [r7, #8]
 801af90:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801af92:	68bb      	ldr	r3, [r7, #8]
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d103      	bne.n	801afa2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	2200      	movs	r2, #0
 801af9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801afa8:	2bff      	cmp	r3, #255	; 0xff
 801afaa:	d007      	beq.n	801afbc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801afb2:	3301      	adds	r3, #1
 801afb4:	b2da      	uxtb	r2, r3
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	2200      	movs	r2, #0
 801afc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801afc2:	2300      	movs	r3, #0
}
 801afc4:	4618      	mov	r0, r3
 801afc6:	3714      	adds	r7, #20
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd90      	pop	{r4, r7, pc}
 801afcc:	08027f78 	.word	0x08027f78
 801afd0:	08028674 	.word	0x08028674
 801afd4:	08027fcc 	.word	0x08027fcc

0801afd8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d106      	bne.n	801aff4 <tcp_rexmit_fast+0x1c>
 801afe6:	4b2a      	ldr	r3, [pc, #168]	; (801b090 <tcp_rexmit_fast+0xb8>)
 801afe8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801afec:	4929      	ldr	r1, [pc, #164]	; (801b094 <tcp_rexmit_fast+0xbc>)
 801afee:	482a      	ldr	r0, [pc, #168]	; (801b098 <tcp_rexmit_fast+0xc0>)
 801aff0:	f006 fde0 	bl	8021bb4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d044      	beq.n	801b086 <tcp_rexmit_fast+0xae>
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	8b5b      	ldrh	r3, [r3, #26]
 801b000:	f003 0304 	and.w	r3, r3, #4
 801b004:	2b00      	cmp	r3, #0
 801b006:	d13e      	bne.n	801b086 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b008:	6878      	ldr	r0, [r7, #4]
 801b00a:	f7ff ff79 	bl	801af00 <tcp_rexmit>
 801b00e:	4603      	mov	r3, r0
 801b010:	2b00      	cmp	r3, #0
 801b012:	d138      	bne.n	801b086 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b020:	4293      	cmp	r3, r2
 801b022:	bf28      	it	cs
 801b024:	4613      	movcs	r3, r2
 801b026:	b29b      	uxth	r3, r3
 801b028:	0fda      	lsrs	r2, r3, #31
 801b02a:	4413      	add	r3, r2
 801b02c:	105b      	asrs	r3, r3, #1
 801b02e:	b29a      	uxth	r2, r3
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b03c:	461a      	mov	r2, r3
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b042:	005b      	lsls	r3, r3, #1
 801b044:	429a      	cmp	r2, r3
 801b046:	d206      	bcs.n	801b056 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b04c:	005b      	lsls	r3, r3, #1
 801b04e:	b29a      	uxth	r2, r3
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b060:	4619      	mov	r1, r3
 801b062:	0049      	lsls	r1, r1, #1
 801b064:	440b      	add	r3, r1
 801b066:	b29b      	uxth	r3, r3
 801b068:	4413      	add	r3, r2
 801b06a:	b29a      	uxth	r2, r3
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	8b5b      	ldrh	r3, [r3, #26]
 801b076:	f043 0304 	orr.w	r3, r3, #4
 801b07a:	b29a      	uxth	r2, r3
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	2200      	movs	r2, #0
 801b084:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b086:	bf00      	nop
 801b088:	3708      	adds	r7, #8
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
 801b08e:	bf00      	nop
 801b090:	08027f78 	.word	0x08027f78
 801b094:	0802868c 	.word	0x0802868c
 801b098:	08027fcc 	.word	0x08027fcc

0801b09c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b086      	sub	sp, #24
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	60f8      	str	r0, [r7, #12]
 801b0a4:	607b      	str	r3, [r7, #4]
 801b0a6:	460b      	mov	r3, r1
 801b0a8:	817b      	strh	r3, [r7, #10]
 801b0aa:	4613      	mov	r3, r2
 801b0ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b0ae:	897a      	ldrh	r2, [r7, #10]
 801b0b0:	893b      	ldrh	r3, [r7, #8]
 801b0b2:	4413      	add	r3, r2
 801b0b4:	b29b      	uxth	r3, r3
 801b0b6:	3314      	adds	r3, #20
 801b0b8:	b29b      	uxth	r3, r3
 801b0ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b0be:	4619      	mov	r1, r3
 801b0c0:	2022      	movs	r0, #34	; 0x22
 801b0c2:	f7f9 f9a5 	bl	8014410 <pbuf_alloc>
 801b0c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b0c8:	697b      	ldr	r3, [r7, #20]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d04d      	beq.n	801b16a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b0ce:	897b      	ldrh	r3, [r7, #10]
 801b0d0:	3313      	adds	r3, #19
 801b0d2:	697a      	ldr	r2, [r7, #20]
 801b0d4:	8952      	ldrh	r2, [r2, #10]
 801b0d6:	4293      	cmp	r3, r2
 801b0d8:	db06      	blt.n	801b0e8 <tcp_output_alloc_header_common+0x4c>
 801b0da:	4b26      	ldr	r3, [pc, #152]	; (801b174 <tcp_output_alloc_header_common+0xd8>)
 801b0dc:	f240 7223 	movw	r2, #1827	; 0x723
 801b0e0:	4925      	ldr	r1, [pc, #148]	; (801b178 <tcp_output_alloc_header_common+0xdc>)
 801b0e2:	4826      	ldr	r0, [pc, #152]	; (801b17c <tcp_output_alloc_header_common+0xe0>)
 801b0e4:	f006 fd66 	bl	8021bb4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	685b      	ldr	r3, [r3, #4]
 801b0ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b0ee:	8c3b      	ldrh	r3, [r7, #32]
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f7f7 f8e3 	bl	80122bc <lwip_htons>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	461a      	mov	r2, r3
 801b0fa:	693b      	ldr	r3, [r7, #16]
 801b0fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b0fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b100:	4618      	mov	r0, r3
 801b102:	f7f7 f8db 	bl	80122bc <lwip_htons>
 801b106:	4603      	mov	r3, r0
 801b108:	461a      	mov	r2, r3
 801b10a:	693b      	ldr	r3, [r7, #16]
 801b10c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b10e:	693b      	ldr	r3, [r7, #16]
 801b110:	687a      	ldr	r2, [r7, #4]
 801b112:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b114:	68f8      	ldr	r0, [r7, #12]
 801b116:	f7f7 f8e6 	bl	80122e6 <lwip_htonl>
 801b11a:	4602      	mov	r2, r0
 801b11c:	693b      	ldr	r3, [r7, #16]
 801b11e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b120:	897b      	ldrh	r3, [r7, #10]
 801b122:	089b      	lsrs	r3, r3, #2
 801b124:	b29b      	uxth	r3, r3
 801b126:	3305      	adds	r3, #5
 801b128:	b29b      	uxth	r3, r3
 801b12a:	031b      	lsls	r3, r3, #12
 801b12c:	b29a      	uxth	r2, r3
 801b12e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b132:	b29b      	uxth	r3, r3
 801b134:	4313      	orrs	r3, r2
 801b136:	b29b      	uxth	r3, r3
 801b138:	4618      	mov	r0, r3
 801b13a:	f7f7 f8bf 	bl	80122bc <lwip_htons>
 801b13e:	4603      	mov	r3, r0
 801b140:	461a      	mov	r2, r3
 801b142:	693b      	ldr	r3, [r7, #16]
 801b144:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b148:	4618      	mov	r0, r3
 801b14a:	f7f7 f8b7 	bl	80122bc <lwip_htons>
 801b14e:	4603      	mov	r3, r0
 801b150:	461a      	mov	r2, r3
 801b152:	693b      	ldr	r3, [r7, #16]
 801b154:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b156:	693b      	ldr	r3, [r7, #16]
 801b158:	2200      	movs	r2, #0
 801b15a:	741a      	strb	r2, [r3, #16]
 801b15c:	2200      	movs	r2, #0
 801b15e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	2200      	movs	r2, #0
 801b164:	749a      	strb	r2, [r3, #18]
 801b166:	2200      	movs	r2, #0
 801b168:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b16a:	697b      	ldr	r3, [r7, #20]
}
 801b16c:	4618      	mov	r0, r3
 801b16e:	3718      	adds	r7, #24
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}
 801b174:	08027f78 	.word	0x08027f78
 801b178:	080286ac 	.word	0x080286ac
 801b17c:	08027fcc 	.word	0x08027fcc

0801b180 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b180:	b5b0      	push	{r4, r5, r7, lr}
 801b182:	b08a      	sub	sp, #40	; 0x28
 801b184:	af04      	add	r7, sp, #16
 801b186:	60f8      	str	r0, [r7, #12]
 801b188:	607b      	str	r3, [r7, #4]
 801b18a:	460b      	mov	r3, r1
 801b18c:	817b      	strh	r3, [r7, #10]
 801b18e:	4613      	mov	r3, r2
 801b190:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d106      	bne.n	801b1a6 <tcp_output_alloc_header+0x26>
 801b198:	4b15      	ldr	r3, [pc, #84]	; (801b1f0 <tcp_output_alloc_header+0x70>)
 801b19a:	f240 7242 	movw	r2, #1858	; 0x742
 801b19e:	4915      	ldr	r1, [pc, #84]	; (801b1f4 <tcp_output_alloc_header+0x74>)
 801b1a0:	4815      	ldr	r0, [pc, #84]	; (801b1f8 <tcp_output_alloc_header+0x78>)
 801b1a2:	f006 fd07 	bl	8021bb4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	8adb      	ldrh	r3, [r3, #22]
 801b1ae:	68fa      	ldr	r2, [r7, #12]
 801b1b0:	8b12      	ldrh	r2, [r2, #24]
 801b1b2:	68f9      	ldr	r1, [r7, #12]
 801b1b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b1b6:	893d      	ldrh	r5, [r7, #8]
 801b1b8:	897c      	ldrh	r4, [r7, #10]
 801b1ba:	9103      	str	r1, [sp, #12]
 801b1bc:	2110      	movs	r1, #16
 801b1be:	9102      	str	r1, [sp, #8]
 801b1c0:	9201      	str	r2, [sp, #4]
 801b1c2:	9300      	str	r3, [sp, #0]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	462a      	mov	r2, r5
 801b1c8:	4621      	mov	r1, r4
 801b1ca:	f7ff ff67 	bl	801b09c <tcp_output_alloc_header_common>
 801b1ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b1d0:	697b      	ldr	r3, [r7, #20]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d006      	beq.n	801b1e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1da:	68fa      	ldr	r2, [r7, #12]
 801b1dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b1de:	441a      	add	r2, r3
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b1e4:	697b      	ldr	r3, [r7, #20]
}
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	3718      	adds	r7, #24
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bdb0      	pop	{r4, r5, r7, pc}
 801b1ee:	bf00      	nop
 801b1f0:	08027f78 	.word	0x08027f78
 801b1f4:	080286dc 	.word	0x080286dc
 801b1f8:	08027fcc 	.word	0x08027fcc

0801b1fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b088      	sub	sp, #32
 801b200:	af00      	add	r7, sp, #0
 801b202:	60f8      	str	r0, [r7, #12]
 801b204:	60b9      	str	r1, [r7, #8]
 801b206:	4611      	mov	r1, r2
 801b208:	461a      	mov	r2, r3
 801b20a:	460b      	mov	r3, r1
 801b20c:	71fb      	strb	r3, [r7, #7]
 801b20e:	4613      	mov	r3, r2
 801b210:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b212:	2300      	movs	r3, #0
 801b214:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b216:	68bb      	ldr	r3, [r7, #8]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d106      	bne.n	801b22a <tcp_output_fill_options+0x2e>
 801b21c:	4b13      	ldr	r3, [pc, #76]	; (801b26c <tcp_output_fill_options+0x70>)
 801b21e:	f240 7256 	movw	r2, #1878	; 0x756
 801b222:	4913      	ldr	r1, [pc, #76]	; (801b270 <tcp_output_fill_options+0x74>)
 801b224:	4813      	ldr	r0, [pc, #76]	; (801b274 <tcp_output_fill_options+0x78>)
 801b226:	f006 fcc5 	bl	8021bb4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	685b      	ldr	r3, [r3, #4]
 801b22e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b230:	69bb      	ldr	r3, [r7, #24]
 801b232:	3314      	adds	r3, #20
 801b234:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b236:	69bb      	ldr	r3, [r7, #24]
 801b238:	f103 0214 	add.w	r2, r3, #20
 801b23c:	8bfb      	ldrh	r3, [r7, #30]
 801b23e:	009b      	lsls	r3, r3, #2
 801b240:	4619      	mov	r1, r3
 801b242:	79fb      	ldrb	r3, [r7, #7]
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	f003 0304 	and.w	r3, r3, #4
 801b24a:	440b      	add	r3, r1
 801b24c:	4413      	add	r3, r2
 801b24e:	697a      	ldr	r2, [r7, #20]
 801b250:	429a      	cmp	r2, r3
 801b252:	d006      	beq.n	801b262 <tcp_output_fill_options+0x66>
 801b254:	4b05      	ldr	r3, [pc, #20]	; (801b26c <tcp_output_fill_options+0x70>)
 801b256:	f240 7275 	movw	r2, #1909	; 0x775
 801b25a:	4907      	ldr	r1, [pc, #28]	; (801b278 <tcp_output_fill_options+0x7c>)
 801b25c:	4805      	ldr	r0, [pc, #20]	; (801b274 <tcp_output_fill_options+0x78>)
 801b25e:	f006 fca9 	bl	8021bb4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b262:	bf00      	nop
 801b264:	3720      	adds	r7, #32
 801b266:	46bd      	mov	sp, r7
 801b268:	bd80      	pop	{r7, pc}
 801b26a:	bf00      	nop
 801b26c:	08027f78 	.word	0x08027f78
 801b270:	08028704 	.word	0x08028704
 801b274:	08027fcc 	.word	0x08027fcc
 801b278:	080285fc 	.word	0x080285fc

0801b27c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b08a      	sub	sp, #40	; 0x28
 801b280:	af04      	add	r7, sp, #16
 801b282:	60f8      	str	r0, [r7, #12]
 801b284:	60b9      	str	r1, [r7, #8]
 801b286:	607a      	str	r2, [r7, #4]
 801b288:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b28a:	68bb      	ldr	r3, [r7, #8]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d106      	bne.n	801b29e <tcp_output_control_segment+0x22>
 801b290:	4b1c      	ldr	r3, [pc, #112]	; (801b304 <tcp_output_control_segment+0x88>)
 801b292:	f240 7287 	movw	r2, #1927	; 0x787
 801b296:	491c      	ldr	r1, [pc, #112]	; (801b308 <tcp_output_control_segment+0x8c>)
 801b298:	481c      	ldr	r0, [pc, #112]	; (801b30c <tcp_output_control_segment+0x90>)
 801b29a:	f006 fc8b 	bl	8021bb4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b29e:	683a      	ldr	r2, [r7, #0]
 801b2a0:	6879      	ldr	r1, [r7, #4]
 801b2a2:	68f8      	ldr	r0, [r7, #12]
 801b2a4:	f7fe fa7c 	bl	80197a0 <tcp_route>
 801b2a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d102      	bne.n	801b2b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b2b0:	23fc      	movs	r3, #252	; 0xfc
 801b2b2:	75fb      	strb	r3, [r7, #23]
 801b2b4:	e01c      	b.n	801b2f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d006      	beq.n	801b2ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	7adb      	ldrb	r3, [r3, #11]
 801b2c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b2c2:	68fb      	ldr	r3, [r7, #12]
 801b2c4:	7a9b      	ldrb	r3, [r3, #10]
 801b2c6:	757b      	strb	r3, [r7, #21]
 801b2c8:	e003      	b.n	801b2d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b2ca:	23ff      	movs	r3, #255	; 0xff
 801b2cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b2d2:	7dba      	ldrb	r2, [r7, #22]
 801b2d4:	693b      	ldr	r3, [r7, #16]
 801b2d6:	9302      	str	r3, [sp, #8]
 801b2d8:	2306      	movs	r3, #6
 801b2da:	9301      	str	r3, [sp, #4]
 801b2dc:	7d7b      	ldrb	r3, [r7, #21]
 801b2de:	9300      	str	r3, [sp, #0]
 801b2e0:	4613      	mov	r3, r2
 801b2e2:	683a      	ldr	r2, [r7, #0]
 801b2e4:	6879      	ldr	r1, [r7, #4]
 801b2e6:	68b8      	ldr	r0, [r7, #8]
 801b2e8:	f004 faac 	bl	801f844 <ip4_output_if>
 801b2ec:	4603      	mov	r3, r0
 801b2ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b2f0:	68b8      	ldr	r0, [r7, #8]
 801b2f2:	f7f9 fba3 	bl	8014a3c <pbuf_free>
  return err;
 801b2f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	3718      	adds	r7, #24
 801b2fe:	46bd      	mov	sp, r7
 801b300:	bd80      	pop	{r7, pc}
 801b302:	bf00      	nop
 801b304:	08027f78 	.word	0x08027f78
 801b308:	0802872c 	.word	0x0802872c
 801b30c:	08027fcc 	.word	0x08027fcc

0801b310 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b310:	b590      	push	{r4, r7, lr}
 801b312:	b08b      	sub	sp, #44	; 0x2c
 801b314:	af04      	add	r7, sp, #16
 801b316:	60f8      	str	r0, [r7, #12]
 801b318:	60b9      	str	r1, [r7, #8]
 801b31a:	607a      	str	r2, [r7, #4]
 801b31c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b31e:	683b      	ldr	r3, [r7, #0]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d106      	bne.n	801b332 <tcp_rst+0x22>
 801b324:	4b1f      	ldr	r3, [pc, #124]	; (801b3a4 <tcp_rst+0x94>)
 801b326:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b32a:	491f      	ldr	r1, [pc, #124]	; (801b3a8 <tcp_rst+0x98>)
 801b32c:	481f      	ldr	r0, [pc, #124]	; (801b3ac <tcp_rst+0x9c>)
 801b32e:	f006 fc41 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b334:	2b00      	cmp	r3, #0
 801b336:	d106      	bne.n	801b346 <tcp_rst+0x36>
 801b338:	4b1a      	ldr	r3, [pc, #104]	; (801b3a4 <tcp_rst+0x94>)
 801b33a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b33e:	491c      	ldr	r1, [pc, #112]	; (801b3b0 <tcp_rst+0xa0>)
 801b340:	481a      	ldr	r0, [pc, #104]	; (801b3ac <tcp_rst+0x9c>)
 801b342:	f006 fc37 	bl	8021bb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b346:	2300      	movs	r3, #0
 801b348:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b34a:	f246 0308 	movw	r3, #24584	; 0x6008
 801b34e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b350:	7dfb      	ldrb	r3, [r7, #23]
 801b352:	b29c      	uxth	r4, r3
 801b354:	68b8      	ldr	r0, [r7, #8]
 801b356:	f7f6 ffc6 	bl	80122e6 <lwip_htonl>
 801b35a:	4602      	mov	r2, r0
 801b35c:	8abb      	ldrh	r3, [r7, #20]
 801b35e:	9303      	str	r3, [sp, #12]
 801b360:	2314      	movs	r3, #20
 801b362:	9302      	str	r3, [sp, #8]
 801b364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b366:	9301      	str	r3, [sp, #4]
 801b368:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b36a:	9300      	str	r3, [sp, #0]
 801b36c:	4613      	mov	r3, r2
 801b36e:	2200      	movs	r2, #0
 801b370:	4621      	mov	r1, r4
 801b372:	6878      	ldr	r0, [r7, #4]
 801b374:	f7ff fe92 	bl	801b09c <tcp_output_alloc_header_common>
 801b378:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b37a:	693b      	ldr	r3, [r7, #16]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d00c      	beq.n	801b39a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b380:	7dfb      	ldrb	r3, [r7, #23]
 801b382:	2200      	movs	r2, #0
 801b384:	6939      	ldr	r1, [r7, #16]
 801b386:	68f8      	ldr	r0, [r7, #12]
 801b388:	f7ff ff38 	bl	801b1fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b38e:	683a      	ldr	r2, [r7, #0]
 801b390:	6939      	ldr	r1, [r7, #16]
 801b392:	68f8      	ldr	r0, [r7, #12]
 801b394:	f7ff ff72 	bl	801b27c <tcp_output_control_segment>
 801b398:	e000      	b.n	801b39c <tcp_rst+0x8c>
    return;
 801b39a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b39c:	371c      	adds	r7, #28
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	bd90      	pop	{r4, r7, pc}
 801b3a2:	bf00      	nop
 801b3a4:	08027f78 	.word	0x08027f78
 801b3a8:	08028758 	.word	0x08028758
 801b3ac:	08027fcc 	.word	0x08027fcc
 801b3b0:	08028774 	.word	0x08028774

0801b3b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b3b4:	b590      	push	{r4, r7, lr}
 801b3b6:	b087      	sub	sp, #28
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b3bc:	2300      	movs	r3, #0
 801b3be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d106      	bne.n	801b3d8 <tcp_send_empty_ack+0x24>
 801b3ca:	4b28      	ldr	r3, [pc, #160]	; (801b46c <tcp_send_empty_ack+0xb8>)
 801b3cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b3d0:	4927      	ldr	r1, [pc, #156]	; (801b470 <tcp_send_empty_ack+0xbc>)
 801b3d2:	4828      	ldr	r0, [pc, #160]	; (801b474 <tcp_send_empty_ack+0xc0>)
 801b3d4:	f006 fbee 	bl	8021bb4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b3d8:	7dfb      	ldrb	r3, [r7, #23]
 801b3da:	009b      	lsls	r3, r3, #2
 801b3dc:	b2db      	uxtb	r3, r3
 801b3de:	f003 0304 	and.w	r3, r3, #4
 801b3e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b3e4:	7d7b      	ldrb	r3, [r7, #21]
 801b3e6:	b29c      	uxth	r4, r3
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f7f6 ff7a 	bl	80122e6 <lwip_htonl>
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	4621      	mov	r1, r4
 801b3f8:	6878      	ldr	r0, [r7, #4]
 801b3fa:	f7ff fec1 	bl	801b180 <tcp_output_alloc_header>
 801b3fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b400:	693b      	ldr	r3, [r7, #16]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d109      	bne.n	801b41a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	8b5b      	ldrh	r3, [r3, #26]
 801b40a:	f043 0303 	orr.w	r3, r3, #3
 801b40e:	b29a      	uxth	r2, r3
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b414:	f06f 0301 	mvn.w	r3, #1
 801b418:	e023      	b.n	801b462 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b41a:	7dbb      	ldrb	r3, [r7, #22]
 801b41c:	7dfa      	ldrb	r2, [r7, #23]
 801b41e:	6939      	ldr	r1, [r7, #16]
 801b420:	6878      	ldr	r0, [r7, #4]
 801b422:	f7ff feeb 	bl	801b1fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b426:	687a      	ldr	r2, [r7, #4]
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	3304      	adds	r3, #4
 801b42c:	6939      	ldr	r1, [r7, #16]
 801b42e:	6878      	ldr	r0, [r7, #4]
 801b430:	f7ff ff24 	bl	801b27c <tcp_output_control_segment>
 801b434:	4603      	mov	r3, r0
 801b436:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d007      	beq.n	801b450 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	8b5b      	ldrh	r3, [r3, #26]
 801b444:	f043 0303 	orr.w	r3, r3, #3
 801b448:	b29a      	uxth	r2, r3
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	835a      	strh	r2, [r3, #26]
 801b44e:	e006      	b.n	801b45e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	8b5b      	ldrh	r3, [r3, #26]
 801b454:	f023 0303 	bic.w	r3, r3, #3
 801b458:	b29a      	uxth	r2, r3
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b462:	4618      	mov	r0, r3
 801b464:	371c      	adds	r7, #28
 801b466:	46bd      	mov	sp, r7
 801b468:	bd90      	pop	{r4, r7, pc}
 801b46a:	bf00      	nop
 801b46c:	08027f78 	.word	0x08027f78
 801b470:	08028790 	.word	0x08028790
 801b474:	08027fcc 	.word	0x08027fcc

0801b478 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b478:	b590      	push	{r4, r7, lr}
 801b47a:	b085      	sub	sp, #20
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b480:	2300      	movs	r3, #0
 801b482:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d106      	bne.n	801b498 <tcp_keepalive+0x20>
 801b48a:	4b18      	ldr	r3, [pc, #96]	; (801b4ec <tcp_keepalive+0x74>)
 801b48c:	f640 0224 	movw	r2, #2084	; 0x824
 801b490:	4917      	ldr	r1, [pc, #92]	; (801b4f0 <tcp_keepalive+0x78>)
 801b492:	4818      	ldr	r0, [pc, #96]	; (801b4f4 <tcp_keepalive+0x7c>)
 801b494:	f006 fb8e 	bl	8021bb4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b498:	7abb      	ldrb	r3, [r7, #10]
 801b49a:	b29c      	uxth	r4, r3
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4a0:	3b01      	subs	r3, #1
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7f6 ff1f 	bl	80122e6 <lwip_htonl>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	4621      	mov	r1, r4
 801b4ae:	6878      	ldr	r0, [r7, #4]
 801b4b0:	f7ff fe66 	bl	801b180 <tcp_output_alloc_header>
 801b4b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d102      	bne.n	801b4c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4c0:	e010      	b.n	801b4e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b4c2:	7abb      	ldrb	r3, [r7, #10]
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	68f9      	ldr	r1, [r7, #12]
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f7ff fe97 	bl	801b1fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b4ce:	687a      	ldr	r2, [r7, #4]
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	3304      	adds	r3, #4
 801b4d4:	68f9      	ldr	r1, [r7, #12]
 801b4d6:	6878      	ldr	r0, [r7, #4]
 801b4d8:	f7ff fed0 	bl	801b27c <tcp_output_control_segment>
 801b4dc:	4603      	mov	r3, r0
 801b4de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b4e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3714      	adds	r7, #20
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bd90      	pop	{r4, r7, pc}
 801b4ec:	08027f78 	.word	0x08027f78
 801b4f0:	080287b0 	.word	0x080287b0
 801b4f4:	08027fcc 	.word	0x08027fcc

0801b4f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b4f8:	b590      	push	{r4, r7, lr}
 801b4fa:	b08b      	sub	sp, #44	; 0x2c
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b500:	2300      	movs	r3, #0
 801b502:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d106      	bne.n	801b518 <tcp_zero_window_probe+0x20>
 801b50a:	4b4d      	ldr	r3, [pc, #308]	; (801b640 <tcp_zero_window_probe+0x148>)
 801b50c:	f640 024f 	movw	r2, #2127	; 0x84f
 801b510:	494c      	ldr	r1, [pc, #304]	; (801b644 <tcp_zero_window_probe+0x14c>)
 801b512:	484d      	ldr	r0, [pc, #308]	; (801b648 <tcp_zero_window_probe+0x150>)
 801b514:	f006 fb4e 	bl	8021bb4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b51c:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 801b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b520:	2b00      	cmp	r3, #0
 801b522:	d101      	bne.n	801b528 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b524:	2300      	movs	r3, #0
 801b526:	e087      	b.n	801b638 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b52e:	2bff      	cmp	r3, #255	; 0xff
 801b530:	d007      	beq.n	801b542 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b538:	3301      	adds	r3, #1
 801b53a:	b2da      	uxtb	r2, r3
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b544:	691b      	ldr	r3, [r3, #16]
 801b546:	899b      	ldrh	r3, [r3, #12]
 801b548:	b29b      	uxth	r3, r3
 801b54a:	4618      	mov	r0, r3
 801b54c:	f7f6 feb6 	bl	80122bc <lwip_htons>
 801b550:	4603      	mov	r3, r0
 801b552:	b2db      	uxtb	r3, r3
 801b554:	f003 0301 	and.w	r3, r3, #1
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d005      	beq.n	801b568 <tcp_zero_window_probe+0x70>
 801b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b55e:	891b      	ldrh	r3, [r3, #8]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d101      	bne.n	801b568 <tcp_zero_window_probe+0x70>
 801b564:	2301      	movs	r3, #1
 801b566:	e000      	b.n	801b56a <tcp_zero_window_probe+0x72>
 801b568:	2300      	movs	r3, #0
 801b56a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b56e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b572:	2b00      	cmp	r3, #0
 801b574:	bf0c      	ite	eq
 801b576:	2301      	moveq	r3, #1
 801b578:	2300      	movne	r3, #0
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b57e:	7cfb      	ldrb	r3, [r7, #19]
 801b580:	b299      	uxth	r1, r3
 801b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b584:	691b      	ldr	r3, [r3, #16]
 801b586:	685b      	ldr	r3, [r3, #4]
 801b588:	8c3a      	ldrh	r2, [r7, #32]
 801b58a:	6878      	ldr	r0, [r7, #4]
 801b58c:	f7ff fdf8 	bl	801b180 <tcp_output_alloc_header>
 801b590:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b592:	69fb      	ldr	r3, [r7, #28]
 801b594:	2b00      	cmp	r3, #0
 801b596:	d102      	bne.n	801b59e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b59c:	e04c      	b.n	801b638 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b59e:	69fb      	ldr	r3, [r7, #28]
 801b5a0:	685b      	ldr	r3, [r3, #4]
 801b5a2:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801b5a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d011      	beq.n	801b5d0 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b5ac:	69bb      	ldr	r3, [r7, #24]
 801b5ae:	899b      	ldrh	r3, [r3, #12]
 801b5b0:	b29b      	uxth	r3, r3
 801b5b2:	b21b      	sxth	r3, r3
 801b5b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b5b8:	b21c      	sxth	r4, r3
 801b5ba:	2011      	movs	r0, #17
 801b5bc:	f7f6 fe7e 	bl	80122bc <lwip_htons>
 801b5c0:	4603      	mov	r3, r0
 801b5c2:	b21b      	sxth	r3, r3
 801b5c4:	4323      	orrs	r3, r4
 801b5c6:	b21b      	sxth	r3, r3
 801b5c8:	b29a      	uxth	r2, r3
 801b5ca:	69bb      	ldr	r3, [r7, #24]
 801b5cc:	819a      	strh	r2, [r3, #12]
 801b5ce:	e010      	b.n	801b5f2 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b5d0:	69fb      	ldr	r3, [r7, #28]
 801b5d2:	685b      	ldr	r3, [r3, #4]
 801b5d4:	3314      	adds	r3, #20
 801b5d6:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5da:	6858      	ldr	r0, [r3, #4]
 801b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5de:	685b      	ldr	r3, [r3, #4]
 801b5e0:	891a      	ldrh	r2, [r3, #8]
 801b5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5e4:	891b      	ldrh	r3, [r3, #8]
 801b5e6:	1ad3      	subs	r3, r2, r3
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	2201      	movs	r2, #1
 801b5ec:	6979      	ldr	r1, [r7, #20]
 801b5ee:	f7f9 fc2b 	bl	8014e48 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5f4:	691b      	ldr	r3, [r3, #16]
 801b5f6:	685b      	ldr	r3, [r3, #4]
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	f7f6 fe74 	bl	80122e6 <lwip_htonl>
 801b5fe:	4603      	mov	r3, r0
 801b600:	3301      	adds	r3, #1
 801b602:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	1ad3      	subs	r3, r2, r3
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	da02      	bge.n	801b616 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	68fa      	ldr	r2, [r7, #12]
 801b614:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b616:	7cfb      	ldrb	r3, [r7, #19]
 801b618:	2200      	movs	r2, #0
 801b61a:	69f9      	ldr	r1, [r7, #28]
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	f7ff fded 	bl	801b1fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b622:	687a      	ldr	r2, [r7, #4]
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	3304      	adds	r3, #4
 801b628:	69f9      	ldr	r1, [r7, #28]
 801b62a:	6878      	ldr	r0, [r7, #4]
 801b62c:	f7ff fe26 	bl	801b27c <tcp_output_control_segment>
 801b630:	4603      	mov	r3, r0
 801b632:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b634:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b638:	4618      	mov	r0, r3
 801b63a:	372c      	adds	r7, #44	; 0x2c
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bd90      	pop	{r4, r7, pc}
 801b640:	08027f78 	.word	0x08027f78
 801b644:	080287cc 	.word	0x080287cc
 801b648:	08027fcc 	.word	0x08027fcc

0801b64c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b64c:	b580      	push	{r7, lr}
 801b64e:	b082      	sub	sp, #8
 801b650:	af00      	add	r7, sp, #0
 801b652:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b654:	f7f9 fe62 	bl	801531c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b658:	4b0a      	ldr	r3, [pc, #40]	; (801b684 <tcpip_tcp_timer+0x38>)
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d103      	bne.n	801b668 <tcpip_tcp_timer+0x1c>
 801b660:	4b09      	ldr	r3, [pc, #36]	; (801b688 <tcpip_tcp_timer+0x3c>)
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d005      	beq.n	801b674 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b668:	2200      	movs	r2, #0
 801b66a:	4908      	ldr	r1, [pc, #32]	; (801b68c <tcpip_tcp_timer+0x40>)
 801b66c:	20fa      	movs	r0, #250	; 0xfa
 801b66e:	f000 f8f3 	bl	801b858 <sys_timeout>
 801b672:	e003      	b.n	801b67c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b674:	4b06      	ldr	r3, [pc, #24]	; (801b690 <tcpip_tcp_timer+0x44>)
 801b676:	2200      	movs	r2, #0
 801b678:	601a      	str	r2, [r3, #0]
  }
}
 801b67a:	bf00      	nop
 801b67c:	bf00      	nop
 801b67e:	3708      	adds	r7, #8
 801b680:	46bd      	mov	sp, r7
 801b682:	bd80      	pop	{r7, pc}
 801b684:	2001b188 	.word	0x2001b188
 801b688:	2001b198 	.word	0x2001b198
 801b68c:	0801b64d 	.word	0x0801b64d
 801b690:	20014394 	.word	0x20014394

0801b694 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b694:	b580      	push	{r7, lr}
 801b696:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b698:	4b0a      	ldr	r3, [pc, #40]	; (801b6c4 <tcp_timer_needed+0x30>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d10f      	bne.n	801b6c0 <tcp_timer_needed+0x2c>
 801b6a0:	4b09      	ldr	r3, [pc, #36]	; (801b6c8 <tcp_timer_needed+0x34>)
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d103      	bne.n	801b6b0 <tcp_timer_needed+0x1c>
 801b6a8:	4b08      	ldr	r3, [pc, #32]	; (801b6cc <tcp_timer_needed+0x38>)
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d007      	beq.n	801b6c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b6b0:	4b04      	ldr	r3, [pc, #16]	; (801b6c4 <tcp_timer_needed+0x30>)
 801b6b2:	2201      	movs	r2, #1
 801b6b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	4905      	ldr	r1, [pc, #20]	; (801b6d0 <tcp_timer_needed+0x3c>)
 801b6ba:	20fa      	movs	r0, #250	; 0xfa
 801b6bc:	f000 f8cc 	bl	801b858 <sys_timeout>
  }
}
 801b6c0:	bf00      	nop
 801b6c2:	bd80      	pop	{r7, pc}
 801b6c4:	20014394 	.word	0x20014394
 801b6c8:	2001b188 	.word	0x2001b188
 801b6cc:	2001b198 	.word	0x2001b198
 801b6d0:	0801b64d 	.word	0x0801b64d

0801b6d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b086      	sub	sp, #24
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b6e0:	200a      	movs	r0, #10
 801b6e2:	f7f8 fa77 	bl	8013bd4 <memp_malloc>
 801b6e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b6e8:	693b      	ldr	r3, [r7, #16]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d109      	bne.n	801b702 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b6ee:	693b      	ldr	r3, [r7, #16]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d151      	bne.n	801b798 <sys_timeout_abs+0xc4>
 801b6f4:	4b2a      	ldr	r3, [pc, #168]	; (801b7a0 <sys_timeout_abs+0xcc>)
 801b6f6:	22be      	movs	r2, #190	; 0xbe
 801b6f8:	492a      	ldr	r1, [pc, #168]	; (801b7a4 <sys_timeout_abs+0xd0>)
 801b6fa:	482b      	ldr	r0, [pc, #172]	; (801b7a8 <sys_timeout_abs+0xd4>)
 801b6fc:	f006 fa5a 	bl	8021bb4 <iprintf>
    return;
 801b700:	e04a      	b.n	801b798 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b702:	693b      	ldr	r3, [r7, #16]
 801b704:	2200      	movs	r2, #0
 801b706:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b708:	693b      	ldr	r3, [r7, #16]
 801b70a:	68ba      	ldr	r2, [r7, #8]
 801b70c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b70e:	693b      	ldr	r3, [r7, #16]
 801b710:	687a      	ldr	r2, [r7, #4]
 801b712:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b714:	693b      	ldr	r3, [r7, #16]
 801b716:	68fa      	ldr	r2, [r7, #12]
 801b718:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b71a:	4b24      	ldr	r3, [pc, #144]	; (801b7ac <sys_timeout_abs+0xd8>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d103      	bne.n	801b72a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b722:	4a22      	ldr	r2, [pc, #136]	; (801b7ac <sys_timeout_abs+0xd8>)
 801b724:	693b      	ldr	r3, [r7, #16]
 801b726:	6013      	str	r3, [r2, #0]
    return;
 801b728:	e037      	b.n	801b79a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b72a:	693b      	ldr	r3, [r7, #16]
 801b72c:	685a      	ldr	r2, [r3, #4]
 801b72e:	4b1f      	ldr	r3, [pc, #124]	; (801b7ac <sys_timeout_abs+0xd8>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	685b      	ldr	r3, [r3, #4]
 801b734:	1ad3      	subs	r3, r2, r3
 801b736:	0fdb      	lsrs	r3, r3, #31
 801b738:	f003 0301 	and.w	r3, r3, #1
 801b73c:	b2db      	uxtb	r3, r3
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d007      	beq.n	801b752 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b742:	4b1a      	ldr	r3, [pc, #104]	; (801b7ac <sys_timeout_abs+0xd8>)
 801b744:	681a      	ldr	r2, [r3, #0]
 801b746:	693b      	ldr	r3, [r7, #16]
 801b748:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b74a:	4a18      	ldr	r2, [pc, #96]	; (801b7ac <sys_timeout_abs+0xd8>)
 801b74c:	693b      	ldr	r3, [r7, #16]
 801b74e:	6013      	str	r3, [r2, #0]
 801b750:	e023      	b.n	801b79a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b752:	4b16      	ldr	r3, [pc, #88]	; (801b7ac <sys_timeout_abs+0xd8>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	617b      	str	r3, [r7, #20]
 801b758:	e01a      	b.n	801b790 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b75a:	697b      	ldr	r3, [r7, #20]
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d00b      	beq.n	801b77a <sys_timeout_abs+0xa6>
 801b762:	693b      	ldr	r3, [r7, #16]
 801b764:	685a      	ldr	r2, [r3, #4]
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	685b      	ldr	r3, [r3, #4]
 801b76c:	1ad3      	subs	r3, r2, r3
 801b76e:	0fdb      	lsrs	r3, r3, #31
 801b770:	f003 0301 	and.w	r3, r3, #1
 801b774:	b2db      	uxtb	r3, r3
 801b776:	2b00      	cmp	r3, #0
 801b778:	d007      	beq.n	801b78a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b77a:	697b      	ldr	r3, [r7, #20]
 801b77c:	681a      	ldr	r2, [r3, #0]
 801b77e:	693b      	ldr	r3, [r7, #16]
 801b780:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	693a      	ldr	r2, [r7, #16]
 801b786:	601a      	str	r2, [r3, #0]
        break;
 801b788:	e007      	b.n	801b79a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b78a:	697b      	ldr	r3, [r7, #20]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	617b      	str	r3, [r7, #20]
 801b790:	697b      	ldr	r3, [r7, #20]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d1e1      	bne.n	801b75a <sys_timeout_abs+0x86>
 801b796:	e000      	b.n	801b79a <sys_timeout_abs+0xc6>
    return;
 801b798:	bf00      	nop
      }
    }
  }
}
 801b79a:	3718      	adds	r7, #24
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	080287f0 	.word	0x080287f0
 801b7a4:	08028824 	.word	0x08028824
 801b7a8:	08028864 	.word	0x08028864
 801b7ac:	2001438c 	.word	0x2001438c

0801b7b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b086      	sub	sp, #24
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b7bc:	697b      	ldr	r3, [r7, #20]
 801b7be:	685b      	ldr	r3, [r3, #4]
 801b7c0:	4798      	blx	r3

  now = sys_now();
 801b7c2:	f7ee fe55 	bl	800a470 <sys_now>
 801b7c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	681a      	ldr	r2, [r3, #0]
 801b7cc:	4b0f      	ldr	r3, [pc, #60]	; (801b80c <lwip_cyclic_timer+0x5c>)
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	4413      	add	r3, r2
 801b7d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b7d4:	68fa      	ldr	r2, [r7, #12]
 801b7d6:	693b      	ldr	r3, [r7, #16]
 801b7d8:	1ad3      	subs	r3, r2, r3
 801b7da:	0fdb      	lsrs	r3, r3, #31
 801b7dc:	f003 0301 	and.w	r3, r3, #1
 801b7e0:	b2db      	uxtb	r3, r3
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d009      	beq.n	801b7fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b7e6:	697b      	ldr	r3, [r7, #20]
 801b7e8:	681a      	ldr	r2, [r3, #0]
 801b7ea:	693b      	ldr	r3, [r7, #16]
 801b7ec:	4413      	add	r3, r2
 801b7ee:	687a      	ldr	r2, [r7, #4]
 801b7f0:	4907      	ldr	r1, [pc, #28]	; (801b810 <lwip_cyclic_timer+0x60>)
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f7ff ff6e 	bl	801b6d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b7f8:	e004      	b.n	801b804 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b7fa:	687a      	ldr	r2, [r7, #4]
 801b7fc:	4904      	ldr	r1, [pc, #16]	; (801b810 <lwip_cyclic_timer+0x60>)
 801b7fe:	68f8      	ldr	r0, [r7, #12]
 801b800:	f7ff ff68 	bl	801b6d4 <sys_timeout_abs>
}
 801b804:	bf00      	nop
 801b806:	3718      	adds	r7, #24
 801b808:	46bd      	mov	sp, r7
 801b80a:	bd80      	pop	{r7, pc}
 801b80c:	20014390 	.word	0x20014390
 801b810:	0801b7b1 	.word	0x0801b7b1

0801b814 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b082      	sub	sp, #8
 801b818:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b81a:	2301      	movs	r3, #1
 801b81c:	607b      	str	r3, [r7, #4]
 801b81e:	e00e      	b.n	801b83e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b820:	4a0b      	ldr	r2, [pc, #44]	; (801b850 <sys_timeouts_init+0x3c>)
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	00db      	lsls	r3, r3, #3
 801b82c:	4a08      	ldr	r2, [pc, #32]	; (801b850 <sys_timeouts_init+0x3c>)
 801b82e:	4413      	add	r3, r2
 801b830:	461a      	mov	r2, r3
 801b832:	4908      	ldr	r1, [pc, #32]	; (801b854 <sys_timeouts_init+0x40>)
 801b834:	f000 f810 	bl	801b858 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	3301      	adds	r3, #1
 801b83c:	607b      	str	r3, [r7, #4]
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	2b05      	cmp	r3, #5
 801b842:	d9ed      	bls.n	801b820 <sys_timeouts_init+0xc>
  }
}
 801b844:	bf00      	nop
 801b846:	bf00      	nop
 801b848:	3708      	adds	r7, #8
 801b84a:	46bd      	mov	sp, r7
 801b84c:	bd80      	pop	{r7, pc}
 801b84e:	bf00      	nop
 801b850:	08029990 	.word	0x08029990
 801b854:	0801b7b1 	.word	0x0801b7b1

0801b858 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b086      	sub	sp, #24
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	60f8      	str	r0, [r7, #12]
 801b860:	60b9      	str	r1, [r7, #8]
 801b862:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b86a:	d306      	bcc.n	801b87a <sys_timeout+0x22>
 801b86c:	4b0a      	ldr	r3, [pc, #40]	; (801b898 <sys_timeout+0x40>)
 801b86e:	f240 1229 	movw	r2, #297	; 0x129
 801b872:	490a      	ldr	r1, [pc, #40]	; (801b89c <sys_timeout+0x44>)
 801b874:	480a      	ldr	r0, [pc, #40]	; (801b8a0 <sys_timeout+0x48>)
 801b876:	f006 f99d 	bl	8021bb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b87a:	f7ee fdf9 	bl	800a470 <sys_now>
 801b87e:	4602      	mov	r2, r0
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	4413      	add	r3, r2
 801b884:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b886:	687a      	ldr	r2, [r7, #4]
 801b888:	68b9      	ldr	r1, [r7, #8]
 801b88a:	6978      	ldr	r0, [r7, #20]
 801b88c:	f7ff ff22 	bl	801b6d4 <sys_timeout_abs>
#endif
}
 801b890:	bf00      	nop
 801b892:	3718      	adds	r7, #24
 801b894:	46bd      	mov	sp, r7
 801b896:	bd80      	pop	{r7, pc}
 801b898:	080287f0 	.word	0x080287f0
 801b89c:	0802888c 	.word	0x0802888c
 801b8a0:	08028864 	.word	0x08028864

0801b8a4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b084      	sub	sp, #16
 801b8a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b8aa:	f7ee fde1 	bl	800a470 <sys_now>
 801b8ae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b8b0:	4b17      	ldr	r3, [pc, #92]	; (801b910 <sys_check_timeouts+0x6c>)
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b8b6:	68bb      	ldr	r3, [r7, #8]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d022      	beq.n	801b902 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	685b      	ldr	r3, [r3, #4]
 801b8c0:	68fa      	ldr	r2, [r7, #12]
 801b8c2:	1ad3      	subs	r3, r2, r3
 801b8c4:	0fdb      	lsrs	r3, r3, #31
 801b8c6:	f003 0301 	and.w	r3, r3, #1
 801b8ca:	b2db      	uxtb	r3, r3
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d11a      	bne.n	801b906 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b8d0:	68bb      	ldr	r3, [r7, #8]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	4a0e      	ldr	r2, [pc, #56]	; (801b910 <sys_check_timeouts+0x6c>)
 801b8d6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b8d8:	68bb      	ldr	r3, [r7, #8]
 801b8da:	689b      	ldr	r3, [r3, #8]
 801b8dc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	68db      	ldr	r3, [r3, #12]
 801b8e2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b8e4:	68bb      	ldr	r3, [r7, #8]
 801b8e6:	685b      	ldr	r3, [r3, #4]
 801b8e8:	4a0a      	ldr	r2, [pc, #40]	; (801b914 <sys_check_timeouts+0x70>)
 801b8ea:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b8ec:	68b9      	ldr	r1, [r7, #8]
 801b8ee:	200a      	movs	r0, #10
 801b8f0:	f7f8 f9c2 	bl	8013c78 <memp_free>
    if (handler != NULL) {
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d0da      	beq.n	801b8b0 <sys_check_timeouts+0xc>
      handler(arg);
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	6838      	ldr	r0, [r7, #0]
 801b8fe:	4798      	blx	r3
  do {
 801b900:	e7d6      	b.n	801b8b0 <sys_check_timeouts+0xc>
      return;
 801b902:	bf00      	nop
 801b904:	e000      	b.n	801b908 <sys_check_timeouts+0x64>
      return;
 801b906:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b908:	3710      	adds	r7, #16
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	2001438c 	.word	0x2001438c
 801b914:	20014390 	.word	0x20014390

0801b918 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b918:	b580      	push	{r7, lr}
 801b91a:	b082      	sub	sp, #8
 801b91c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b91e:	4b16      	ldr	r3, [pc, #88]	; (801b978 <sys_timeouts_sleeptime+0x60>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d102      	bne.n	801b92c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b92a:	e020      	b.n	801b96e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b92c:	f7ee fda0 	bl	800a470 <sys_now>
 801b930:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b932:	4b11      	ldr	r3, [pc, #68]	; (801b978 <sys_timeouts_sleeptime+0x60>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	685a      	ldr	r2, [r3, #4]
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	1ad3      	subs	r3, r2, r3
 801b93c:	0fdb      	lsrs	r3, r3, #31
 801b93e:	f003 0301 	and.w	r3, r3, #1
 801b942:	b2db      	uxtb	r3, r3
 801b944:	2b00      	cmp	r3, #0
 801b946:	d001      	beq.n	801b94c <sys_timeouts_sleeptime+0x34>
    return 0;
 801b948:	2300      	movs	r3, #0
 801b94a:	e010      	b.n	801b96e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b94c:	4b0a      	ldr	r3, [pc, #40]	; (801b978 <sys_timeouts_sleeptime+0x60>)
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	685a      	ldr	r2, [r3, #4]
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	1ad3      	subs	r3, r2, r3
 801b956:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b958:	683b      	ldr	r3, [r7, #0]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	da06      	bge.n	801b96c <sys_timeouts_sleeptime+0x54>
 801b95e:	4b07      	ldr	r3, [pc, #28]	; (801b97c <sys_timeouts_sleeptime+0x64>)
 801b960:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b964:	4906      	ldr	r1, [pc, #24]	; (801b980 <sys_timeouts_sleeptime+0x68>)
 801b966:	4807      	ldr	r0, [pc, #28]	; (801b984 <sys_timeouts_sleeptime+0x6c>)
 801b968:	f006 f924 	bl	8021bb4 <iprintf>
    return ret;
 801b96c:	683b      	ldr	r3, [r7, #0]
  }
}
 801b96e:	4618      	mov	r0, r3
 801b970:	3708      	adds	r7, #8
 801b972:	46bd      	mov	sp, r7
 801b974:	bd80      	pop	{r7, pc}
 801b976:	bf00      	nop
 801b978:	2001438c 	.word	0x2001438c
 801b97c:	080287f0 	.word	0x080287f0
 801b980:	080288c4 	.word	0x080288c4
 801b984:	08028864 	.word	0x08028864

0801b988 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b98c:	f006 f9a0 	bl	8021cd0 <rand>
 801b990:	4603      	mov	r3, r0
 801b992:	b29b      	uxth	r3, r3
 801b994:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b998:	b29b      	uxth	r3, r3
 801b99a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801b99e:	b29a      	uxth	r2, r3
 801b9a0:	4b01      	ldr	r3, [pc, #4]	; (801b9a8 <udp_init+0x20>)
 801b9a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b9a4:	bf00      	nop
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	2000006c 	.word	0x2000006c

0801b9ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b9ac:	b480      	push	{r7}
 801b9ae:	b083      	sub	sp, #12
 801b9b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b9b6:	4b17      	ldr	r3, [pc, #92]	; (801ba14 <udp_new_port+0x68>)
 801b9b8:	881b      	ldrh	r3, [r3, #0]
 801b9ba:	1c5a      	adds	r2, r3, #1
 801b9bc:	b291      	uxth	r1, r2
 801b9be:	4a15      	ldr	r2, [pc, #84]	; (801ba14 <udp_new_port+0x68>)
 801b9c0:	8011      	strh	r1, [r2, #0]
 801b9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9c6:	4293      	cmp	r3, r2
 801b9c8:	d103      	bne.n	801b9d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b9ca:	4b12      	ldr	r3, [pc, #72]	; (801ba14 <udp_new_port+0x68>)
 801b9cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b9d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b9d2:	4b11      	ldr	r3, [pc, #68]	; (801ba18 <udp_new_port+0x6c>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	603b      	str	r3, [r7, #0]
 801b9d8:	e011      	b.n	801b9fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b9da:	683b      	ldr	r3, [r7, #0]
 801b9dc:	8a5a      	ldrh	r2, [r3, #18]
 801b9de:	4b0d      	ldr	r3, [pc, #52]	; (801ba14 <udp_new_port+0x68>)
 801b9e0:	881b      	ldrh	r3, [r3, #0]
 801b9e2:	429a      	cmp	r2, r3
 801b9e4:	d108      	bne.n	801b9f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b9e6:	88fb      	ldrh	r3, [r7, #6]
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	80fb      	strh	r3, [r7, #6]
 801b9ec:	88fb      	ldrh	r3, [r7, #6]
 801b9ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b9f2:	d3e0      	bcc.n	801b9b6 <udp_new_port+0xa>
        return 0;
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	e007      	b.n	801ba08 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b9f8:	683b      	ldr	r3, [r7, #0]
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	603b      	str	r3, [r7, #0]
 801b9fe:	683b      	ldr	r3, [r7, #0]
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d1ea      	bne.n	801b9da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ba04:	4b03      	ldr	r3, [pc, #12]	; (801ba14 <udp_new_port+0x68>)
 801ba06:	881b      	ldrh	r3, [r3, #0]
}
 801ba08:	4618      	mov	r0, r3
 801ba0a:	370c      	adds	r7, #12
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba12:	4770      	bx	lr
 801ba14:	2000006c 	.word	0x2000006c
 801ba18:	2001b1a0 	.word	0x2001b1a0

0801ba1c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	b084      	sub	sp, #16
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	60f8      	str	r0, [r7, #12]
 801ba24:	60b9      	str	r1, [r7, #8]
 801ba26:	4613      	mov	r3, r2
 801ba28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d105      	bne.n	801ba3c <udp_input_local_match+0x20>
 801ba30:	4b27      	ldr	r3, [pc, #156]	; (801bad0 <udp_input_local_match+0xb4>)
 801ba32:	2287      	movs	r2, #135	; 0x87
 801ba34:	4927      	ldr	r1, [pc, #156]	; (801bad4 <udp_input_local_match+0xb8>)
 801ba36:	4828      	ldr	r0, [pc, #160]	; (801bad8 <udp_input_local_match+0xbc>)
 801ba38:	f006 f8bc 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ba3c:	68bb      	ldr	r3, [r7, #8]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d105      	bne.n	801ba4e <udp_input_local_match+0x32>
 801ba42:	4b23      	ldr	r3, [pc, #140]	; (801bad0 <udp_input_local_match+0xb4>)
 801ba44:	2288      	movs	r2, #136	; 0x88
 801ba46:	4925      	ldr	r1, [pc, #148]	; (801badc <udp_input_local_match+0xc0>)
 801ba48:	4823      	ldr	r0, [pc, #140]	; (801bad8 <udp_input_local_match+0xbc>)
 801ba4a:	f006 f8b3 	bl	8021bb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	7a1b      	ldrb	r3, [r3, #8]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d00b      	beq.n	801ba6e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	7a1a      	ldrb	r2, [r3, #8]
 801ba5a:	4b21      	ldr	r3, [pc, #132]	; (801bae0 <udp_input_local_match+0xc4>)
 801ba5c:	685b      	ldr	r3, [r3, #4]
 801ba5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ba62:	3301      	adds	r3, #1
 801ba64:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ba66:	429a      	cmp	r2, r3
 801ba68:	d001      	beq.n	801ba6e <udp_input_local_match+0x52>
    return 0;
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	e02b      	b.n	801bac6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ba6e:	79fb      	ldrb	r3, [r7, #7]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d018      	beq.n	801baa6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d013      	beq.n	801baa2 <udp_input_local_match+0x86>
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d00f      	beq.n	801baa2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ba82:	4b17      	ldr	r3, [pc, #92]	; (801bae0 <udp_input_local_match+0xc4>)
 801ba84:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ba86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ba8a:	d00a      	beq.n	801baa2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	681a      	ldr	r2, [r3, #0]
 801ba90:	4b13      	ldr	r3, [pc, #76]	; (801bae0 <udp_input_local_match+0xc4>)
 801ba92:	695b      	ldr	r3, [r3, #20]
 801ba94:	405a      	eors	r2, r3
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	3308      	adds	r3, #8
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d110      	bne.n	801bac4 <udp_input_local_match+0xa8>
          return 1;
 801baa2:	2301      	movs	r3, #1
 801baa4:	e00f      	b.n	801bac6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d009      	beq.n	801bac0 <udp_input_local_match+0xa4>
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d005      	beq.n	801bac0 <udp_input_local_match+0xa4>
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	681a      	ldr	r2, [r3, #0]
 801bab8:	4b09      	ldr	r3, [pc, #36]	; (801bae0 <udp_input_local_match+0xc4>)
 801baba:	695b      	ldr	r3, [r3, #20]
 801babc:	429a      	cmp	r2, r3
 801babe:	d101      	bne.n	801bac4 <udp_input_local_match+0xa8>
        return 1;
 801bac0:	2301      	movs	r3, #1
 801bac2:	e000      	b.n	801bac6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bac4:	2300      	movs	r3, #0
}
 801bac6:	4618      	mov	r0, r3
 801bac8:	3710      	adds	r7, #16
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd80      	pop	{r7, pc}
 801bace:	bf00      	nop
 801bad0:	080288d8 	.word	0x080288d8
 801bad4:	08028908 	.word	0x08028908
 801bad8:	0802892c 	.word	0x0802892c
 801badc:	08028954 	.word	0x08028954
 801bae0:	20017794 	.word	0x20017794

0801bae4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bae4:	b590      	push	{r4, r7, lr}
 801bae6:	b08d      	sub	sp, #52	; 0x34
 801bae8:	af02      	add	r7, sp, #8
 801baea:	6078      	str	r0, [r7, #4]
 801baec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801baee:	2300      	movs	r3, #0
 801baf0:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d105      	bne.n	801bb04 <udp_input+0x20>
 801baf8:	4b7c      	ldr	r3, [pc, #496]	; (801bcec <udp_input+0x208>)
 801bafa:	22cf      	movs	r2, #207	; 0xcf
 801bafc:	497c      	ldr	r1, [pc, #496]	; (801bcf0 <udp_input+0x20c>)
 801bafe:	487d      	ldr	r0, [pc, #500]	; (801bcf4 <udp_input+0x210>)
 801bb00:	f006 f858 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801bb04:	683b      	ldr	r3, [r7, #0]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d105      	bne.n	801bb16 <udp_input+0x32>
 801bb0a:	4b78      	ldr	r3, [pc, #480]	; (801bcec <udp_input+0x208>)
 801bb0c:	22d0      	movs	r2, #208	; 0xd0
 801bb0e:	497a      	ldr	r1, [pc, #488]	; (801bcf8 <udp_input+0x214>)
 801bb10:	4878      	ldr	r0, [pc, #480]	; (801bcf4 <udp_input+0x210>)
 801bb12:	f006 f84f 	bl	8021bb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	895b      	ldrh	r3, [r3, #10]
 801bb1a:	2b07      	cmp	r3, #7
 801bb1c:	d803      	bhi.n	801bb26 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801bb1e:	6878      	ldr	r0, [r7, #4]
 801bb20:	f7f8 ff8c 	bl	8014a3c <pbuf_free>
    goto end;
 801bb24:	e0de      	b.n	801bce4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	685b      	ldr	r3, [r3, #4]
 801bb2a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801bb2c:	4b73      	ldr	r3, [pc, #460]	; (801bcfc <udp_input+0x218>)
 801bb2e:	695b      	ldr	r3, [r3, #20]
 801bb30:	4a72      	ldr	r2, [pc, #456]	; (801bcfc <udp_input+0x218>)
 801bb32:	6812      	ldr	r2, [r2, #0]
 801bb34:	4611      	mov	r1, r2
 801bb36:	4618      	mov	r0, r3
 801bb38:	f003 ff5c 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801bb3c:	4603      	mov	r3, r0
 801bb3e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801bb40:	697b      	ldr	r3, [r7, #20]
 801bb42:	881b      	ldrh	r3, [r3, #0]
 801bb44:	b29b      	uxth	r3, r3
 801bb46:	4618      	mov	r0, r3
 801bb48:	f7f6 fbb8 	bl	80122bc <lwip_htons>
 801bb4c:	4603      	mov	r3, r0
 801bb4e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801bb50:	697b      	ldr	r3, [r7, #20]
 801bb52:	885b      	ldrh	r3, [r3, #2]
 801bb54:	b29b      	uxth	r3, r3
 801bb56:	4618      	mov	r0, r3
 801bb58:	f7f6 fbb0 	bl	80122bc <lwip_htons>
 801bb5c:	4603      	mov	r3, r0
 801bb5e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801bb60:	2300      	movs	r3, #0
 801bb62:	623b      	str	r3, [r7, #32]
  prev = NULL;
 801bb64:	2300      	movs	r3, #0
 801bb66:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 801bb68:	2300      	movs	r3, #0
 801bb6a:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb6c:	4b64      	ldr	r3, [pc, #400]	; (801bd00 <udp_input+0x21c>)
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	623b      	str	r3, [r7, #32]
 801bb72:	e054      	b.n	801bc1e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801bb74:	6a3b      	ldr	r3, [r7, #32]
 801bb76:	8a5b      	ldrh	r3, [r3, #18]
 801bb78:	89fa      	ldrh	r2, [r7, #14]
 801bb7a:	429a      	cmp	r2, r3
 801bb7c:	d14a      	bne.n	801bc14 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801bb7e:	7cfb      	ldrb	r3, [r7, #19]
 801bb80:	461a      	mov	r2, r3
 801bb82:	6839      	ldr	r1, [r7, #0]
 801bb84:	6a38      	ldr	r0, [r7, #32]
 801bb86:	f7ff ff49 	bl	801ba1c <udp_input_local_match>
 801bb8a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d041      	beq.n	801bc14 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801bb90:	6a3b      	ldr	r3, [r7, #32]
 801bb92:	7c1b      	ldrb	r3, [r3, #16]
 801bb94:	f003 0304 	and.w	r3, r3, #4
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d11d      	bne.n	801bbd8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801bb9c:	69bb      	ldr	r3, [r7, #24]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d102      	bne.n	801bba8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801bba2:	6a3b      	ldr	r3, [r7, #32]
 801bba4:	61bb      	str	r3, [r7, #24]
 801bba6:	e017      	b.n	801bbd8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801bba8:	7cfb      	ldrb	r3, [r7, #19]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d014      	beq.n	801bbd8 <udp_input+0xf4>
 801bbae:	4b53      	ldr	r3, [pc, #332]	; (801bcfc <udp_input+0x218>)
 801bbb0:	695b      	ldr	r3, [r3, #20]
 801bbb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bbb6:	d10f      	bne.n	801bbd8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801bbb8:	69bb      	ldr	r3, [r7, #24]
 801bbba:	681a      	ldr	r2, [r3, #0]
 801bbbc:	683b      	ldr	r3, [r7, #0]
 801bbbe:	3304      	adds	r3, #4
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	d008      	beq.n	801bbd8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801bbc6:	6a3b      	ldr	r3, [r7, #32]
 801bbc8:	681a      	ldr	r2, [r3, #0]
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	3304      	adds	r3, #4
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	d101      	bne.n	801bbd8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801bbd4:	6a3b      	ldr	r3, [r7, #32]
 801bbd6:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801bbd8:	6a3b      	ldr	r3, [r7, #32]
 801bbda:	8a9b      	ldrh	r3, [r3, #20]
 801bbdc:	8a3a      	ldrh	r2, [r7, #16]
 801bbde:	429a      	cmp	r2, r3
 801bbe0:	d118      	bne.n	801bc14 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bbe2:	6a3b      	ldr	r3, [r7, #32]
 801bbe4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d005      	beq.n	801bbf6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801bbea:	6a3b      	ldr	r3, [r7, #32]
 801bbec:	685a      	ldr	r2, [r3, #4]
 801bbee:	4b43      	ldr	r3, [pc, #268]	; (801bcfc <udp_input+0x218>)
 801bbf0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d10e      	bne.n	801bc14 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d014      	beq.n	801bc26 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801bbfc:	6a3b      	ldr	r3, [r7, #32]
 801bbfe:	68da      	ldr	r2, [r3, #12]
 801bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc02:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801bc04:	4b3e      	ldr	r3, [pc, #248]	; (801bd00 <udp_input+0x21c>)
 801bc06:	681a      	ldr	r2, [r3, #0]
 801bc08:	6a3b      	ldr	r3, [r7, #32]
 801bc0a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801bc0c:	4a3c      	ldr	r2, [pc, #240]	; (801bd00 <udp_input+0x21c>)
 801bc0e:	6a3b      	ldr	r3, [r7, #32]
 801bc10:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801bc12:	e008      	b.n	801bc26 <udp_input+0x142>
      }
    }

    prev = pcb;
 801bc14:	6a3b      	ldr	r3, [r7, #32]
 801bc16:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc18:	6a3b      	ldr	r3, [r7, #32]
 801bc1a:	68db      	ldr	r3, [r3, #12]
 801bc1c:	623b      	str	r3, [r7, #32]
 801bc1e:	6a3b      	ldr	r3, [r7, #32]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d1a7      	bne.n	801bb74 <udp_input+0x90>
 801bc24:	e000      	b.n	801bc28 <udp_input+0x144>
        break;
 801bc26:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801bc28:	6a3b      	ldr	r3, [r7, #32]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d101      	bne.n	801bc32 <udp_input+0x14e>
    pcb = uncon_pcb;
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801bc32:	6a3b      	ldr	r3, [r7, #32]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d002      	beq.n	801bc3e <udp_input+0x15a>
    for_us = 1;
 801bc38:	2301      	movs	r3, #1
 801bc3a:	77fb      	strb	r3, [r7, #31]
 801bc3c:	e00a      	b.n	801bc54 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	3304      	adds	r3, #4
 801bc42:	681a      	ldr	r2, [r3, #0]
 801bc44:	4b2d      	ldr	r3, [pc, #180]	; (801bcfc <udp_input+0x218>)
 801bc46:	695b      	ldr	r3, [r3, #20]
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	bf0c      	ite	eq
 801bc4c:	2301      	moveq	r3, #1
 801bc4e:	2300      	movne	r3, #0
 801bc50:	b2db      	uxtb	r3, r3
 801bc52:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bc54:	7ffb      	ldrb	r3, [r7, #31]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d041      	beq.n	801bcde <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801bc5a:	2108      	movs	r1, #8
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f7f8 fe35 	bl	80148cc <pbuf_remove_header>
 801bc62:	4603      	mov	r3, r0
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d00a      	beq.n	801bc7e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bc68:	4b20      	ldr	r3, [pc, #128]	; (801bcec <udp_input+0x208>)
 801bc6a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801bc6e:	4925      	ldr	r1, [pc, #148]	; (801bd04 <udp_input+0x220>)
 801bc70:	4820      	ldr	r0, [pc, #128]	; (801bcf4 <udp_input+0x210>)
 801bc72:	f005 ff9f 	bl	8021bb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bc76:	6878      	ldr	r0, [r7, #4]
 801bc78:	f7f8 fee0 	bl	8014a3c <pbuf_free>
      goto end;
 801bc7c:	e032      	b.n	801bce4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801bc7e:	6a3b      	ldr	r3, [r7, #32]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d012      	beq.n	801bcaa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bc84:	6a3b      	ldr	r3, [r7, #32]
 801bc86:	699b      	ldr	r3, [r3, #24]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d00a      	beq.n	801bca2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bc8c:	6a3b      	ldr	r3, [r7, #32]
 801bc8e:	699c      	ldr	r4, [r3, #24]
 801bc90:	6a3b      	ldr	r3, [r7, #32]
 801bc92:	69d8      	ldr	r0, [r3, #28]
 801bc94:	8a3b      	ldrh	r3, [r7, #16]
 801bc96:	9300      	str	r3, [sp, #0]
 801bc98:	4b1b      	ldr	r3, [pc, #108]	; (801bd08 <udp_input+0x224>)
 801bc9a:	687a      	ldr	r2, [r7, #4]
 801bc9c:	6a39      	ldr	r1, [r7, #32]
 801bc9e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bca0:	e021      	b.n	801bce6 <udp_input+0x202>
        pbuf_free(p);
 801bca2:	6878      	ldr	r0, [r7, #4]
 801bca4:	f7f8 feca 	bl	8014a3c <pbuf_free>
        goto end;
 801bca8:	e01c      	b.n	801bce4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bcaa:	7cfb      	ldrb	r3, [r7, #19]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d112      	bne.n	801bcd6 <udp_input+0x1f2>
 801bcb0:	4b12      	ldr	r3, [pc, #72]	; (801bcfc <udp_input+0x218>)
 801bcb2:	695b      	ldr	r3, [r3, #20]
 801bcb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bcb8:	2be0      	cmp	r3, #224	; 0xe0
 801bcba:	d00c      	beq.n	801bcd6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bcbc:	4b0f      	ldr	r3, [pc, #60]	; (801bcfc <udp_input+0x218>)
 801bcbe:	899b      	ldrh	r3, [r3, #12]
 801bcc0:	3308      	adds	r3, #8
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	b21b      	sxth	r3, r3
 801bcc6:	4619      	mov	r1, r3
 801bcc8:	6878      	ldr	r0, [r7, #4]
 801bcca:	f7f8 fe72 	bl	80149b2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bcce:	2103      	movs	r1, #3
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f003 fb51 	bl	801f378 <icmp_dest_unreach>
      pbuf_free(p);
 801bcd6:	6878      	ldr	r0, [r7, #4]
 801bcd8:	f7f8 feb0 	bl	8014a3c <pbuf_free>
  return;
 801bcdc:	e003      	b.n	801bce6 <udp_input+0x202>
    pbuf_free(p);
 801bcde:	6878      	ldr	r0, [r7, #4]
 801bce0:	f7f8 feac 	bl	8014a3c <pbuf_free>
  return;
 801bce4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801bce6:	372c      	adds	r7, #44	; 0x2c
 801bce8:	46bd      	mov	sp, r7
 801bcea:	bd90      	pop	{r4, r7, pc}
 801bcec:	080288d8 	.word	0x080288d8
 801bcf0:	0802897c 	.word	0x0802897c
 801bcf4:	0802892c 	.word	0x0802892c
 801bcf8:	08028994 	.word	0x08028994
 801bcfc:	20017794 	.word	0x20017794
 801bd00:	2001b1a0 	.word	0x2001b1a0
 801bd04:	080289b0 	.word	0x080289b0
 801bd08:	200177a4 	.word	0x200177a4

0801bd0c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	b082      	sub	sp, #8
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	6078      	str	r0, [r7, #4]
 801bd14:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d109      	bne.n	801bd30 <udp_send+0x24>
 801bd1c:	4b11      	ldr	r3, [pc, #68]	; (801bd64 <udp_send+0x58>)
 801bd1e:	f240 12d5 	movw	r2, #469	; 0x1d5
 801bd22:	4911      	ldr	r1, [pc, #68]	; (801bd68 <udp_send+0x5c>)
 801bd24:	4811      	ldr	r0, [pc, #68]	; (801bd6c <udp_send+0x60>)
 801bd26:	f005 ff45 	bl	8021bb4 <iprintf>
 801bd2a:	f06f 030f 	mvn.w	r3, #15
 801bd2e:	e015      	b.n	801bd5c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d109      	bne.n	801bd4a <udp_send+0x3e>
 801bd36:	4b0b      	ldr	r3, [pc, #44]	; (801bd64 <udp_send+0x58>)
 801bd38:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801bd3c:	490c      	ldr	r1, [pc, #48]	; (801bd70 <udp_send+0x64>)
 801bd3e:	480b      	ldr	r0, [pc, #44]	; (801bd6c <udp_send+0x60>)
 801bd40:	f005 ff38 	bl	8021bb4 <iprintf>
 801bd44:	f06f 030f 	mvn.w	r3, #15
 801bd48:	e008      	b.n	801bd5c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	1d1a      	adds	r2, r3, #4
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	8a9b      	ldrh	r3, [r3, #20]
 801bd52:	6839      	ldr	r1, [r7, #0]
 801bd54:	6878      	ldr	r0, [r7, #4]
 801bd56:	f000 f80d 	bl	801bd74 <udp_sendto>
 801bd5a:	4603      	mov	r3, r0
}
 801bd5c:	4618      	mov	r0, r3
 801bd5e:	3708      	adds	r7, #8
 801bd60:	46bd      	mov	sp, r7
 801bd62:	bd80      	pop	{r7, pc}
 801bd64:	080288d8 	.word	0x080288d8
 801bd68:	080289cc 	.word	0x080289cc
 801bd6c:	0802892c 	.word	0x0802892c
 801bd70:	080289e4 	.word	0x080289e4

0801bd74 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b088      	sub	sp, #32
 801bd78:	af02      	add	r7, sp, #8
 801bd7a:	60f8      	str	r0, [r7, #12]
 801bd7c:	60b9      	str	r1, [r7, #8]
 801bd7e:	607a      	str	r2, [r7, #4]
 801bd80:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d109      	bne.n	801bd9c <udp_sendto+0x28>
 801bd88:	4b23      	ldr	r3, [pc, #140]	; (801be18 <udp_sendto+0xa4>)
 801bd8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bd8e:	4923      	ldr	r1, [pc, #140]	; (801be1c <udp_sendto+0xa8>)
 801bd90:	4823      	ldr	r0, [pc, #140]	; (801be20 <udp_sendto+0xac>)
 801bd92:	f005 ff0f 	bl	8021bb4 <iprintf>
 801bd96:	f06f 030f 	mvn.w	r3, #15
 801bd9a:	e038      	b.n	801be0e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d109      	bne.n	801bdb6 <udp_sendto+0x42>
 801bda2:	4b1d      	ldr	r3, [pc, #116]	; (801be18 <udp_sendto+0xa4>)
 801bda4:	f240 2219 	movw	r2, #537	; 0x219
 801bda8:	491e      	ldr	r1, [pc, #120]	; (801be24 <udp_sendto+0xb0>)
 801bdaa:	481d      	ldr	r0, [pc, #116]	; (801be20 <udp_sendto+0xac>)
 801bdac:	f005 ff02 	bl	8021bb4 <iprintf>
 801bdb0:	f06f 030f 	mvn.w	r3, #15
 801bdb4:	e02b      	b.n	801be0e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d109      	bne.n	801bdd0 <udp_sendto+0x5c>
 801bdbc:	4b16      	ldr	r3, [pc, #88]	; (801be18 <udp_sendto+0xa4>)
 801bdbe:	f240 221a 	movw	r2, #538	; 0x21a
 801bdc2:	4919      	ldr	r1, [pc, #100]	; (801be28 <udp_sendto+0xb4>)
 801bdc4:	4816      	ldr	r0, [pc, #88]	; (801be20 <udp_sendto+0xac>)
 801bdc6:	f005 fef5 	bl	8021bb4 <iprintf>
 801bdca:	f06f 030f 	mvn.w	r3, #15
 801bdce:	e01e      	b.n	801be0e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	7a1b      	ldrb	r3, [r3, #8]
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d006      	beq.n	801bde6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	7a1b      	ldrb	r3, [r3, #8]
 801bddc:	4618      	mov	r0, r3
 801bdde:	f7f8 fa6d 	bl	80142bc <netif_get_by_index>
 801bde2:	6178      	str	r0, [r7, #20]
 801bde4:	e003      	b.n	801bdee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bde6:	6878      	ldr	r0, [r7, #4]
 801bde8:	f003 fb50 	bl	801f48c <ip4_route>
 801bdec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801bdee:	697b      	ldr	r3, [r7, #20]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d102      	bne.n	801bdfa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801bdf4:	f06f 0303 	mvn.w	r3, #3
 801bdf8:	e009      	b.n	801be0e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bdfa:	887a      	ldrh	r2, [r7, #2]
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	9300      	str	r3, [sp, #0]
 801be00:	4613      	mov	r3, r2
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	68b9      	ldr	r1, [r7, #8]
 801be06:	68f8      	ldr	r0, [r7, #12]
 801be08:	f000 f810 	bl	801be2c <udp_sendto_if>
 801be0c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801be0e:	4618      	mov	r0, r3
 801be10:	3718      	adds	r7, #24
 801be12:	46bd      	mov	sp, r7
 801be14:	bd80      	pop	{r7, pc}
 801be16:	bf00      	nop
 801be18:	080288d8 	.word	0x080288d8
 801be1c:	080289fc 	.word	0x080289fc
 801be20:	0802892c 	.word	0x0802892c
 801be24:	08028a14 	.word	0x08028a14
 801be28:	08028a30 	.word	0x08028a30

0801be2c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801be2c:	b580      	push	{r7, lr}
 801be2e:	b088      	sub	sp, #32
 801be30:	af02      	add	r7, sp, #8
 801be32:	60f8      	str	r0, [r7, #12]
 801be34:	60b9      	str	r1, [r7, #8]
 801be36:	607a      	str	r2, [r7, #4]
 801be38:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d109      	bne.n	801be54 <udp_sendto_if+0x28>
 801be40:	4b2e      	ldr	r3, [pc, #184]	; (801befc <udp_sendto_if+0xd0>)
 801be42:	f44f 7220 	mov.w	r2, #640	; 0x280
 801be46:	492e      	ldr	r1, [pc, #184]	; (801bf00 <udp_sendto_if+0xd4>)
 801be48:	482e      	ldr	r0, [pc, #184]	; (801bf04 <udp_sendto_if+0xd8>)
 801be4a:	f005 feb3 	bl	8021bb4 <iprintf>
 801be4e:	f06f 030f 	mvn.w	r3, #15
 801be52:	e04f      	b.n	801bef4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801be54:	68bb      	ldr	r3, [r7, #8]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d109      	bne.n	801be6e <udp_sendto_if+0x42>
 801be5a:	4b28      	ldr	r3, [pc, #160]	; (801befc <udp_sendto_if+0xd0>)
 801be5c:	f240 2281 	movw	r2, #641	; 0x281
 801be60:	4929      	ldr	r1, [pc, #164]	; (801bf08 <udp_sendto_if+0xdc>)
 801be62:	4828      	ldr	r0, [pc, #160]	; (801bf04 <udp_sendto_if+0xd8>)
 801be64:	f005 fea6 	bl	8021bb4 <iprintf>
 801be68:	f06f 030f 	mvn.w	r3, #15
 801be6c:	e042      	b.n	801bef4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d109      	bne.n	801be88 <udp_sendto_if+0x5c>
 801be74:	4b21      	ldr	r3, [pc, #132]	; (801befc <udp_sendto_if+0xd0>)
 801be76:	f240 2282 	movw	r2, #642	; 0x282
 801be7a:	4924      	ldr	r1, [pc, #144]	; (801bf0c <udp_sendto_if+0xe0>)
 801be7c:	4821      	ldr	r0, [pc, #132]	; (801bf04 <udp_sendto_if+0xd8>)
 801be7e:	f005 fe99 	bl	8021bb4 <iprintf>
 801be82:	f06f 030f 	mvn.w	r3, #15
 801be86:	e035      	b.n	801bef4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801be88:	6a3b      	ldr	r3, [r7, #32]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d109      	bne.n	801bea2 <udp_sendto_if+0x76>
 801be8e:	4b1b      	ldr	r3, [pc, #108]	; (801befc <udp_sendto_if+0xd0>)
 801be90:	f240 2283 	movw	r2, #643	; 0x283
 801be94:	491e      	ldr	r1, [pc, #120]	; (801bf10 <udp_sendto_if+0xe4>)
 801be96:	481b      	ldr	r0, [pc, #108]	; (801bf04 <udp_sendto_if+0xd8>)
 801be98:	f005 fe8c 	bl	8021bb4 <iprintf>
 801be9c:	f06f 030f 	mvn.w	r3, #15
 801bea0:	e028      	b.n	801bef4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d009      	beq.n	801bebc <udp_sendto_if+0x90>
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d005      	beq.n	801bebc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801beb8:	2be0      	cmp	r3, #224	; 0xe0
 801beba:	d103      	bne.n	801bec4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bebc:	6a3b      	ldr	r3, [r7, #32]
 801bebe:	3304      	adds	r3, #4
 801bec0:	617b      	str	r3, [r7, #20]
 801bec2:	e00b      	b.n	801bedc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	681a      	ldr	r2, [r3, #0]
 801bec8:	6a3b      	ldr	r3, [r7, #32]
 801beca:	3304      	adds	r3, #4
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	429a      	cmp	r2, r3
 801bed0:	d002      	beq.n	801bed8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bed2:	f06f 0303 	mvn.w	r3, #3
 801bed6:	e00d      	b.n	801bef4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bedc:	887a      	ldrh	r2, [r7, #2]
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	9301      	str	r3, [sp, #4]
 801bee2:	6a3b      	ldr	r3, [r7, #32]
 801bee4:	9300      	str	r3, [sp, #0]
 801bee6:	4613      	mov	r3, r2
 801bee8:	687a      	ldr	r2, [r7, #4]
 801beea:	68b9      	ldr	r1, [r7, #8]
 801beec:	68f8      	ldr	r0, [r7, #12]
 801beee:	f000 f811 	bl	801bf14 <udp_sendto_if_src>
 801bef2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bef4:	4618      	mov	r0, r3
 801bef6:	3718      	adds	r7, #24
 801bef8:	46bd      	mov	sp, r7
 801befa:	bd80      	pop	{r7, pc}
 801befc:	080288d8 	.word	0x080288d8
 801bf00:	08028a4c 	.word	0x08028a4c
 801bf04:	0802892c 	.word	0x0802892c
 801bf08:	08028a68 	.word	0x08028a68
 801bf0c:	08028a84 	.word	0x08028a84
 801bf10:	08028aa4 	.word	0x08028aa4

0801bf14 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b08c      	sub	sp, #48	; 0x30
 801bf18:	af04      	add	r7, sp, #16
 801bf1a:	60f8      	str	r0, [r7, #12]
 801bf1c:	60b9      	str	r1, [r7, #8]
 801bf1e:	607a      	str	r2, [r7, #4]
 801bf20:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d109      	bne.n	801bf3c <udp_sendto_if_src+0x28>
 801bf28:	4b65      	ldr	r3, [pc, #404]	; (801c0c0 <udp_sendto_if_src+0x1ac>)
 801bf2a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801bf2e:	4965      	ldr	r1, [pc, #404]	; (801c0c4 <udp_sendto_if_src+0x1b0>)
 801bf30:	4865      	ldr	r0, [pc, #404]	; (801c0c8 <udp_sendto_if_src+0x1b4>)
 801bf32:	f005 fe3f 	bl	8021bb4 <iprintf>
 801bf36:	f06f 030f 	mvn.w	r3, #15
 801bf3a:	e0bc      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bf3c:	68bb      	ldr	r3, [r7, #8]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d109      	bne.n	801bf56 <udp_sendto_if_src+0x42>
 801bf42:	4b5f      	ldr	r3, [pc, #380]	; (801c0c0 <udp_sendto_if_src+0x1ac>)
 801bf44:	f240 22d2 	movw	r2, #722	; 0x2d2
 801bf48:	4960      	ldr	r1, [pc, #384]	; (801c0cc <udp_sendto_if_src+0x1b8>)
 801bf4a:	485f      	ldr	r0, [pc, #380]	; (801c0c8 <udp_sendto_if_src+0x1b4>)
 801bf4c:	f005 fe32 	bl	8021bb4 <iprintf>
 801bf50:	f06f 030f 	mvn.w	r3, #15
 801bf54:	e0af      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d109      	bne.n	801bf70 <udp_sendto_if_src+0x5c>
 801bf5c:	4b58      	ldr	r3, [pc, #352]	; (801c0c0 <udp_sendto_if_src+0x1ac>)
 801bf5e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801bf62:	495b      	ldr	r1, [pc, #364]	; (801c0d0 <udp_sendto_if_src+0x1bc>)
 801bf64:	4858      	ldr	r0, [pc, #352]	; (801c0c8 <udp_sendto_if_src+0x1b4>)
 801bf66:	f005 fe25 	bl	8021bb4 <iprintf>
 801bf6a:	f06f 030f 	mvn.w	r3, #15
 801bf6e:	e0a2      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d109      	bne.n	801bf8a <udp_sendto_if_src+0x76>
 801bf76:	4b52      	ldr	r3, [pc, #328]	; (801c0c0 <udp_sendto_if_src+0x1ac>)
 801bf78:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bf7c:	4955      	ldr	r1, [pc, #340]	; (801c0d4 <udp_sendto_if_src+0x1c0>)
 801bf7e:	4852      	ldr	r0, [pc, #328]	; (801c0c8 <udp_sendto_if_src+0x1b4>)
 801bf80:	f005 fe18 	bl	8021bb4 <iprintf>
 801bf84:	f06f 030f 	mvn.w	r3, #15
 801bf88:	e095      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d109      	bne.n	801bfa4 <udp_sendto_if_src+0x90>
 801bf90:	4b4b      	ldr	r3, [pc, #300]	; (801c0c0 <udp_sendto_if_src+0x1ac>)
 801bf92:	f240 22d5 	movw	r2, #725	; 0x2d5
 801bf96:	4950      	ldr	r1, [pc, #320]	; (801c0d8 <udp_sendto_if_src+0x1c4>)
 801bf98:	484b      	ldr	r0, [pc, #300]	; (801c0c8 <udp_sendto_if_src+0x1b4>)
 801bf9a:	f005 fe0b 	bl	8021bb4 <iprintf>
 801bf9e:	f06f 030f 	mvn.w	r3, #15
 801bfa2:	e088      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	8a5b      	ldrh	r3, [r3, #18]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d10f      	bne.n	801bfcc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bfac:	68f9      	ldr	r1, [r7, #12]
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	8a5b      	ldrh	r3, [r3, #18]
 801bfb2:	461a      	mov	r2, r3
 801bfb4:	68f8      	ldr	r0, [r7, #12]
 801bfb6:	f000 f893 	bl	801c0e0 <udp_bind>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bfbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d002      	beq.n	801bfcc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bfc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bfca:	e074      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bfcc:	68bb      	ldr	r3, [r7, #8]
 801bfce:	891b      	ldrh	r3, [r3, #8]
 801bfd0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d902      	bls.n	801bfde <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bfd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfdc:	e06b      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bfde:	2108      	movs	r1, #8
 801bfe0:	68b8      	ldr	r0, [r7, #8]
 801bfe2:	f7f8 fc63 	bl	80148ac <pbuf_add_header>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d015      	beq.n	801c018 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bfec:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bff0:	2108      	movs	r1, #8
 801bff2:	2022      	movs	r0, #34	; 0x22
 801bff4:	f7f8 fa0c 	bl	8014410 <pbuf_alloc>
 801bff8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bffa:	69fb      	ldr	r3, [r7, #28]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d102      	bne.n	801c006 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c004:	e057      	b.n	801c0b6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c006:	68bb      	ldr	r3, [r7, #8]
 801c008:	891b      	ldrh	r3, [r3, #8]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d006      	beq.n	801c01c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c00e:	68b9      	ldr	r1, [r7, #8]
 801c010:	69f8      	ldr	r0, [r7, #28]
 801c012:	f7f8 fe37 	bl	8014c84 <pbuf_chain>
 801c016:	e001      	b.n	801c01c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c01c:	69fb      	ldr	r3, [r7, #28]
 801c01e:	895b      	ldrh	r3, [r3, #10]
 801c020:	2b07      	cmp	r3, #7
 801c022:	d806      	bhi.n	801c032 <udp_sendto_if_src+0x11e>
 801c024:	4b26      	ldr	r3, [pc, #152]	; (801c0c0 <udp_sendto_if_src+0x1ac>)
 801c026:	f240 320d 	movw	r2, #781	; 0x30d
 801c02a:	492c      	ldr	r1, [pc, #176]	; (801c0dc <udp_sendto_if_src+0x1c8>)
 801c02c:	4826      	ldr	r0, [pc, #152]	; (801c0c8 <udp_sendto_if_src+0x1b4>)
 801c02e:	f005 fdc1 	bl	8021bb4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c032:	69fb      	ldr	r3, [r7, #28]
 801c034:	685b      	ldr	r3, [r3, #4]
 801c036:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	8a5b      	ldrh	r3, [r3, #18]
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7f6 f93d 	bl	80122bc <lwip_htons>
 801c042:	4603      	mov	r3, r0
 801c044:	461a      	mov	r2, r3
 801c046:	697b      	ldr	r3, [r7, #20]
 801c048:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c04a:	887b      	ldrh	r3, [r7, #2]
 801c04c:	4618      	mov	r0, r3
 801c04e:	f7f6 f935 	bl	80122bc <lwip_htons>
 801c052:	4603      	mov	r3, r0
 801c054:	461a      	mov	r2, r3
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c05a:	697b      	ldr	r3, [r7, #20]
 801c05c:	2200      	movs	r2, #0
 801c05e:	719a      	strb	r2, [r3, #6]
 801c060:	2200      	movs	r2, #0
 801c062:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c064:	69fb      	ldr	r3, [r7, #28]
 801c066:	891b      	ldrh	r3, [r3, #8]
 801c068:	4618      	mov	r0, r3
 801c06a:	f7f6 f927 	bl	80122bc <lwip_htons>
 801c06e:	4603      	mov	r3, r0
 801c070:	461a      	mov	r2, r3
 801c072:	697b      	ldr	r3, [r7, #20]
 801c074:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c076:	2311      	movs	r3, #17
 801c078:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	7adb      	ldrb	r3, [r3, #11]
 801c07e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	7a9b      	ldrb	r3, [r3, #10]
 801c084:	7cb9      	ldrb	r1, [r7, #18]
 801c086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c088:	9202      	str	r2, [sp, #8]
 801c08a:	7cfa      	ldrb	r2, [r7, #19]
 801c08c:	9201      	str	r2, [sp, #4]
 801c08e:	9300      	str	r3, [sp, #0]
 801c090:	460b      	mov	r3, r1
 801c092:	687a      	ldr	r2, [r7, #4]
 801c094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c096:	69f8      	ldr	r0, [r7, #28]
 801c098:	f003 fbfe 	bl	801f898 <ip4_output_if_src>
 801c09c:	4603      	mov	r3, r0
 801c09e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c0a0:	69fa      	ldr	r2, [r7, #28]
 801c0a2:	68bb      	ldr	r3, [r7, #8]
 801c0a4:	429a      	cmp	r2, r3
 801c0a6:	d004      	beq.n	801c0b2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c0a8:	69f8      	ldr	r0, [r7, #28]
 801c0aa:	f7f8 fcc7 	bl	8014a3c <pbuf_free>
    q = NULL;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c0b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	3720      	adds	r7, #32
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	bd80      	pop	{r7, pc}
 801c0be:	bf00      	nop
 801c0c0:	080288d8 	.word	0x080288d8
 801c0c4:	08028ac4 	.word	0x08028ac4
 801c0c8:	0802892c 	.word	0x0802892c
 801c0cc:	08028ae4 	.word	0x08028ae4
 801c0d0:	08028b04 	.word	0x08028b04
 801c0d4:	08028b28 	.word	0x08028b28
 801c0d8:	08028b4c 	.word	0x08028b4c
 801c0dc:	08028b70 	.word	0x08028b70

0801c0e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b086      	sub	sp, #24
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	60f8      	str	r0, [r7, #12]
 801c0e8:	60b9      	str	r1, [r7, #8]
 801c0ea:	4613      	mov	r3, r2
 801c0ec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d101      	bne.n	801c0f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c0f4:	4b39      	ldr	r3, [pc, #228]	; (801c1dc <udp_bind+0xfc>)
 801c0f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d109      	bne.n	801c112 <udp_bind+0x32>
 801c0fe:	4b38      	ldr	r3, [pc, #224]	; (801c1e0 <udp_bind+0x100>)
 801c100:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c104:	4937      	ldr	r1, [pc, #220]	; (801c1e4 <udp_bind+0x104>)
 801c106:	4838      	ldr	r0, [pc, #224]	; (801c1e8 <udp_bind+0x108>)
 801c108:	f005 fd54 	bl	8021bb4 <iprintf>
 801c10c:	f06f 030f 	mvn.w	r3, #15
 801c110:	e060      	b.n	801c1d4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c112:	2300      	movs	r3, #0
 801c114:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c116:	4b35      	ldr	r3, [pc, #212]	; (801c1ec <udp_bind+0x10c>)
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	617b      	str	r3, [r7, #20]
 801c11c:	e009      	b.n	801c132 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c11e:	68fa      	ldr	r2, [r7, #12]
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	429a      	cmp	r2, r3
 801c124:	d102      	bne.n	801c12c <udp_bind+0x4c>
      rebind = 1;
 801c126:	2301      	movs	r3, #1
 801c128:	74fb      	strb	r3, [r7, #19]
      break;
 801c12a:	e005      	b.n	801c138 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	68db      	ldr	r3, [r3, #12]
 801c130:	617b      	str	r3, [r7, #20]
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d1f2      	bne.n	801c11e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c138:	88fb      	ldrh	r3, [r7, #6]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d109      	bne.n	801c152 <udp_bind+0x72>
    port = udp_new_port();
 801c13e:	f7ff fc35 	bl	801b9ac <udp_new_port>
 801c142:	4603      	mov	r3, r0
 801c144:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c146:	88fb      	ldrh	r3, [r7, #6]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d12c      	bne.n	801c1a6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c14c:	f06f 0307 	mvn.w	r3, #7
 801c150:	e040      	b.n	801c1d4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c152:	4b26      	ldr	r3, [pc, #152]	; (801c1ec <udp_bind+0x10c>)
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	617b      	str	r3, [r7, #20]
 801c158:	e022      	b.n	801c1a0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c15a:	68fa      	ldr	r2, [r7, #12]
 801c15c:	697b      	ldr	r3, [r7, #20]
 801c15e:	429a      	cmp	r2, r3
 801c160:	d01b      	beq.n	801c19a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c162:	697b      	ldr	r3, [r7, #20]
 801c164:	8a5b      	ldrh	r3, [r3, #18]
 801c166:	88fa      	ldrh	r2, [r7, #6]
 801c168:	429a      	cmp	r2, r3
 801c16a:	d116      	bne.n	801c19a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	681a      	ldr	r2, [r3, #0]
 801c170:	68bb      	ldr	r3, [r7, #8]
 801c172:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c174:	429a      	cmp	r2, r3
 801c176:	d00d      	beq.n	801c194 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c178:	68bb      	ldr	r3, [r7, #8]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d00a      	beq.n	801c194 <udp_bind+0xb4>
 801c17e:	68bb      	ldr	r3, [r7, #8]
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	2b00      	cmp	r3, #0
 801c184:	d006      	beq.n	801c194 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c186:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d003      	beq.n	801c194 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c18c:	697b      	ldr	r3, [r7, #20]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d102      	bne.n	801c19a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c194:	f06f 0307 	mvn.w	r3, #7
 801c198:	e01c      	b.n	801c1d4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c19a:	697b      	ldr	r3, [r7, #20]
 801c19c:	68db      	ldr	r3, [r3, #12]
 801c19e:	617b      	str	r3, [r7, #20]
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d1d9      	bne.n	801c15a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d002      	beq.n	801c1b2 <udp_bind+0xd2>
 801c1ac:	68bb      	ldr	r3, [r7, #8]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	e000      	b.n	801c1b4 <udp_bind+0xd4>
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	68fa      	ldr	r2, [r7, #12]
 801c1b6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	88fa      	ldrh	r2, [r7, #6]
 801c1bc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c1be:	7cfb      	ldrb	r3, [r7, #19]
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d106      	bne.n	801c1d2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c1c4:	4b09      	ldr	r3, [pc, #36]	; (801c1ec <udp_bind+0x10c>)
 801c1c6:	681a      	ldr	r2, [r3, #0]
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c1cc:	4a07      	ldr	r2, [pc, #28]	; (801c1ec <udp_bind+0x10c>)
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c1d2:	2300      	movs	r3, #0
}
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	3718      	adds	r7, #24
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	bd80      	pop	{r7, pc}
 801c1dc:	080299c0 	.word	0x080299c0
 801c1e0:	080288d8 	.word	0x080288d8
 801c1e4:	08028ba0 	.word	0x08028ba0
 801c1e8:	0802892c 	.word	0x0802892c
 801c1ec:	2001b1a0 	.word	0x2001b1a0

0801c1f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b086      	sub	sp, #24
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	60f8      	str	r0, [r7, #12]
 801c1f8:	60b9      	str	r1, [r7, #8]
 801c1fa:	4613      	mov	r3, r2
 801c1fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d109      	bne.n	801c218 <udp_connect+0x28>
 801c204:	4b2c      	ldr	r3, [pc, #176]	; (801c2b8 <udp_connect+0xc8>)
 801c206:	f240 4235 	movw	r2, #1077	; 0x435
 801c20a:	492c      	ldr	r1, [pc, #176]	; (801c2bc <udp_connect+0xcc>)
 801c20c:	482c      	ldr	r0, [pc, #176]	; (801c2c0 <udp_connect+0xd0>)
 801c20e:	f005 fcd1 	bl	8021bb4 <iprintf>
 801c212:	f06f 030f 	mvn.w	r3, #15
 801c216:	e04b      	b.n	801c2b0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c218:	68bb      	ldr	r3, [r7, #8]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d109      	bne.n	801c232 <udp_connect+0x42>
 801c21e:	4b26      	ldr	r3, [pc, #152]	; (801c2b8 <udp_connect+0xc8>)
 801c220:	f240 4236 	movw	r2, #1078	; 0x436
 801c224:	4927      	ldr	r1, [pc, #156]	; (801c2c4 <udp_connect+0xd4>)
 801c226:	4826      	ldr	r0, [pc, #152]	; (801c2c0 <udp_connect+0xd0>)
 801c228:	f005 fcc4 	bl	8021bb4 <iprintf>
 801c22c:	f06f 030f 	mvn.w	r3, #15
 801c230:	e03e      	b.n	801c2b0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	8a5b      	ldrh	r3, [r3, #18]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d10f      	bne.n	801c25a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c23a:	68f9      	ldr	r1, [r7, #12]
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	8a5b      	ldrh	r3, [r3, #18]
 801c240:	461a      	mov	r2, r3
 801c242:	68f8      	ldr	r0, [r7, #12]
 801c244:	f7ff ff4c 	bl	801c0e0 <udp_bind>
 801c248:	4603      	mov	r3, r0
 801c24a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801c24c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d002      	beq.n	801c25a <udp_connect+0x6a>
      return err;
 801c254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c258:	e02a      	b.n	801c2b0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c25a:	68bb      	ldr	r3, [r7, #8]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d002      	beq.n	801c266 <udp_connect+0x76>
 801c260:	68bb      	ldr	r3, [r7, #8]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	e000      	b.n	801c268 <udp_connect+0x78>
 801c266:	2300      	movs	r3, #0
 801c268:	68fa      	ldr	r2, [r7, #12]
 801c26a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	88fa      	ldrh	r2, [r7, #6]
 801c270:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	7c1b      	ldrb	r3, [r3, #16]
 801c276:	f043 0304 	orr.w	r3, r3, #4
 801c27a:	b2da      	uxtb	r2, r3
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c280:	4b11      	ldr	r3, [pc, #68]	; (801c2c8 <udp_connect+0xd8>)
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	613b      	str	r3, [r7, #16]
 801c286:	e008      	b.n	801c29a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c288:	68fa      	ldr	r2, [r7, #12]
 801c28a:	693b      	ldr	r3, [r7, #16]
 801c28c:	429a      	cmp	r2, r3
 801c28e:	d101      	bne.n	801c294 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c290:	2300      	movs	r3, #0
 801c292:	e00d      	b.n	801c2b0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c294:	693b      	ldr	r3, [r7, #16]
 801c296:	68db      	ldr	r3, [r3, #12]
 801c298:	613b      	str	r3, [r7, #16]
 801c29a:	693b      	ldr	r3, [r7, #16]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d1f3      	bne.n	801c288 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c2a0:	4b09      	ldr	r3, [pc, #36]	; (801c2c8 <udp_connect+0xd8>)
 801c2a2:	681a      	ldr	r2, [r3, #0]
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c2a8:	4a07      	ldr	r2, [pc, #28]	; (801c2c8 <udp_connect+0xd8>)
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c2ae:	2300      	movs	r3, #0
}
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	3718      	adds	r7, #24
 801c2b4:	46bd      	mov	sp, r7
 801c2b6:	bd80      	pop	{r7, pc}
 801c2b8:	080288d8 	.word	0x080288d8
 801c2bc:	08028bb8 	.word	0x08028bb8
 801c2c0:	0802892c 	.word	0x0802892c
 801c2c4:	08028bd4 	.word	0x08028bd4
 801c2c8:	2001b1a0 	.word	0x2001b1a0

0801c2cc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b082      	sub	sp, #8
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d107      	bne.n	801c2ea <udp_disconnect+0x1e>
 801c2da:	4b0d      	ldr	r3, [pc, #52]	; (801c310 <udp_disconnect+0x44>)
 801c2dc:	f240 426a 	movw	r2, #1130	; 0x46a
 801c2e0:	490c      	ldr	r1, [pc, #48]	; (801c314 <udp_disconnect+0x48>)
 801c2e2:	480d      	ldr	r0, [pc, #52]	; (801c318 <udp_disconnect+0x4c>)
 801c2e4:	f005 fc66 	bl	8021bb4 <iprintf>
 801c2e8:	e00f      	b.n	801c30a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	2200      	movs	r2, #0
 801c2ee:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	7c1b      	ldrb	r3, [r3, #16]
 801c300:	f023 0304 	bic.w	r3, r3, #4
 801c304:	b2da      	uxtb	r2, r3
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	741a      	strb	r2, [r3, #16]
}
 801c30a:	3708      	adds	r7, #8
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd80      	pop	{r7, pc}
 801c310:	080288d8 	.word	0x080288d8
 801c314:	08028bf0 	.word	0x08028bf0
 801c318:	0802892c 	.word	0x0802892c

0801c31c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b084      	sub	sp, #16
 801c320:	af00      	add	r7, sp, #0
 801c322:	60f8      	str	r0, [r7, #12]
 801c324:	60b9      	str	r1, [r7, #8]
 801c326:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d107      	bne.n	801c33e <udp_recv+0x22>
 801c32e:	4b08      	ldr	r3, [pc, #32]	; (801c350 <udp_recv+0x34>)
 801c330:	f240 428a 	movw	r2, #1162	; 0x48a
 801c334:	4907      	ldr	r1, [pc, #28]	; (801c354 <udp_recv+0x38>)
 801c336:	4808      	ldr	r0, [pc, #32]	; (801c358 <udp_recv+0x3c>)
 801c338:	f005 fc3c 	bl	8021bb4 <iprintf>
 801c33c:	e005      	b.n	801c34a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	68ba      	ldr	r2, [r7, #8]
 801c342:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	687a      	ldr	r2, [r7, #4]
 801c348:	61da      	str	r2, [r3, #28]
}
 801c34a:	3710      	adds	r7, #16
 801c34c:	46bd      	mov	sp, r7
 801c34e:	bd80      	pop	{r7, pc}
 801c350:	080288d8 	.word	0x080288d8
 801c354:	08028c0c 	.word	0x08028c0c
 801c358:	0802892c 	.word	0x0802892c

0801c35c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b084      	sub	sp, #16
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d107      	bne.n	801c37a <udp_remove+0x1e>
 801c36a:	4b19      	ldr	r3, [pc, #100]	; (801c3d0 <udp_remove+0x74>)
 801c36c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c370:	4918      	ldr	r1, [pc, #96]	; (801c3d4 <udp_remove+0x78>)
 801c372:	4819      	ldr	r0, [pc, #100]	; (801c3d8 <udp_remove+0x7c>)
 801c374:	f005 fc1e 	bl	8021bb4 <iprintf>
 801c378:	e026      	b.n	801c3c8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c37a:	4b18      	ldr	r3, [pc, #96]	; (801c3dc <udp_remove+0x80>)
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	687a      	ldr	r2, [r7, #4]
 801c380:	429a      	cmp	r2, r3
 801c382:	d105      	bne.n	801c390 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c384:	4b15      	ldr	r3, [pc, #84]	; (801c3dc <udp_remove+0x80>)
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	68db      	ldr	r3, [r3, #12]
 801c38a:	4a14      	ldr	r2, [pc, #80]	; (801c3dc <udp_remove+0x80>)
 801c38c:	6013      	str	r3, [r2, #0]
 801c38e:	e017      	b.n	801c3c0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c390:	4b12      	ldr	r3, [pc, #72]	; (801c3dc <udp_remove+0x80>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	60fb      	str	r3, [r7, #12]
 801c396:	e010      	b.n	801c3ba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	68db      	ldr	r3, [r3, #12]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d009      	beq.n	801c3b4 <udp_remove+0x58>
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	68db      	ldr	r3, [r3, #12]
 801c3a4:	687a      	ldr	r2, [r7, #4]
 801c3a6:	429a      	cmp	r2, r3
 801c3a8:	d104      	bne.n	801c3b4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	68da      	ldr	r2, [r3, #12]
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	60da      	str	r2, [r3, #12]
        break;
 801c3b2:	e005      	b.n	801c3c0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	68db      	ldr	r3, [r3, #12]
 801c3b8:	60fb      	str	r3, [r7, #12]
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d1eb      	bne.n	801c398 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c3c0:	6879      	ldr	r1, [r7, #4]
 801c3c2:	2000      	movs	r0, #0
 801c3c4:	f7f7 fc58 	bl	8013c78 <memp_free>
}
 801c3c8:	3710      	adds	r7, #16
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	bd80      	pop	{r7, pc}
 801c3ce:	bf00      	nop
 801c3d0:	080288d8 	.word	0x080288d8
 801c3d4:	08028c24 	.word	0x08028c24
 801c3d8:	0802892c 	.word	0x0802892c
 801c3dc:	2001b1a0 	.word	0x2001b1a0

0801c3e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b082      	sub	sp, #8
 801c3e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c3e6:	2000      	movs	r0, #0
 801c3e8:	f7f7 fbf4 	bl	8013bd4 <memp_malloc>
 801c3ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d007      	beq.n	801c404 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c3f4:	2220      	movs	r2, #32
 801c3f6:	2100      	movs	r1, #0
 801c3f8:	6878      	ldr	r0, [r7, #4]
 801c3fa:	f004 febf 	bl	802117c <memset>
    pcb->ttl = UDP_TTL;
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	22ff      	movs	r2, #255	; 0xff
 801c402:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c404:	687b      	ldr	r3, [r7, #4]
}
 801c406:	4618      	mov	r0, r3
 801c408:	3708      	adds	r7, #8
 801c40a:	46bd      	mov	sp, r7
 801c40c:	bd80      	pop	{r7, pc}

0801c40e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c40e:	b580      	push	{r7, lr}
 801c410:	b084      	sub	sp, #16
 801c412:	af00      	add	r7, sp, #0
 801c414:	4603      	mov	r3, r0
 801c416:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c418:	f7ff ffe2 	bl	801c3e0 <udp_new>
 801c41c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c41e:	68fb      	ldr	r3, [r7, #12]
}
 801c420:	4618      	mov	r0, r3
 801c422:	3710      	adds	r7, #16
 801c424:	46bd      	mov	sp, r7
 801c426:	bd80      	pop	{r7, pc}

0801c428 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c428:	b480      	push	{r7}
 801c42a:	b085      	sub	sp, #20
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	6078      	str	r0, [r7, #4]
 801c430:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d01e      	beq.n	801c476 <udp_netif_ip_addr_changed+0x4e>
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d01a      	beq.n	801c476 <udp_netif_ip_addr_changed+0x4e>
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d017      	beq.n	801c476 <udp_netif_ip_addr_changed+0x4e>
 801c446:	683b      	ldr	r3, [r7, #0]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d013      	beq.n	801c476 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c44e:	4b0d      	ldr	r3, [pc, #52]	; (801c484 <udp_netif_ip_addr_changed+0x5c>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	60fb      	str	r3, [r7, #12]
 801c454:	e00c      	b.n	801c470 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681a      	ldr	r2, [r3, #0]
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	429a      	cmp	r2, r3
 801c460:	d103      	bne.n	801c46a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c462:	683b      	ldr	r3, [r7, #0]
 801c464:	681a      	ldr	r2, [r3, #0]
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	68db      	ldr	r3, [r3, #12]
 801c46e:	60fb      	str	r3, [r7, #12]
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d1ef      	bne.n	801c456 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c476:	bf00      	nop
 801c478:	3714      	adds	r7, #20
 801c47a:	46bd      	mov	sp, r7
 801c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c480:	4770      	bx	lr
 801c482:	bf00      	nop
 801c484:	2001b1a0 	.word	0x2001b1a0

0801c488 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c48c:	4b20      	ldr	r3, [pc, #128]	; (801c510 <dhcp_inc_pcb_refcount+0x88>)
 801c48e:	781b      	ldrb	r3, [r3, #0]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d133      	bne.n	801c4fc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c494:	4b1f      	ldr	r3, [pc, #124]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d005      	beq.n	801c4a8 <dhcp_inc_pcb_refcount+0x20>
 801c49c:	4b1e      	ldr	r3, [pc, #120]	; (801c518 <dhcp_inc_pcb_refcount+0x90>)
 801c49e:	22e5      	movs	r2, #229	; 0xe5
 801c4a0:	491e      	ldr	r1, [pc, #120]	; (801c51c <dhcp_inc_pcb_refcount+0x94>)
 801c4a2:	481f      	ldr	r0, [pc, #124]	; (801c520 <dhcp_inc_pcb_refcount+0x98>)
 801c4a4:	f005 fb86 	bl	8021bb4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c4a8:	f7ff ff9a 	bl	801c3e0 <udp_new>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	4a19      	ldr	r2, [pc, #100]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4b0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801c4b2:	4b18      	ldr	r3, [pc, #96]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d102      	bne.n	801c4c0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c4ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4be:	e024      	b.n	801c50a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c4c0:	4b14      	ldr	r3, [pc, #80]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	7a5a      	ldrb	r2, [r3, #9]
 801c4c6:	4b13      	ldr	r3, [pc, #76]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	f042 0220 	orr.w	r2, r2, #32
 801c4ce:	b2d2      	uxtb	r2, r2
 801c4d0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c4d2:	4b10      	ldr	r3, [pc, #64]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	2244      	movs	r2, #68	; 0x44
 801c4d8:	4912      	ldr	r1, [pc, #72]	; (801c524 <dhcp_inc_pcb_refcount+0x9c>)
 801c4da:	4618      	mov	r0, r3
 801c4dc:	f7ff fe00 	bl	801c0e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c4e0:	4b0c      	ldr	r3, [pc, #48]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	2243      	movs	r2, #67	; 0x43
 801c4e6:	490f      	ldr	r1, [pc, #60]	; (801c524 <dhcp_inc_pcb_refcount+0x9c>)
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f7ff fe81 	bl	801c1f0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c4ee:	4b09      	ldr	r3, [pc, #36]	; (801c514 <dhcp_inc_pcb_refcount+0x8c>)
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	2200      	movs	r2, #0
 801c4f4:	490c      	ldr	r1, [pc, #48]	; (801c528 <dhcp_inc_pcb_refcount+0xa0>)
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ff ff10 	bl	801c31c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c4fc:	4b04      	ldr	r3, [pc, #16]	; (801c510 <dhcp_inc_pcb_refcount+0x88>)
 801c4fe:	781b      	ldrb	r3, [r3, #0]
 801c500:	3301      	adds	r3, #1
 801c502:	b2da      	uxtb	r2, r3
 801c504:	4b02      	ldr	r3, [pc, #8]	; (801c510 <dhcp_inc_pcb_refcount+0x88>)
 801c506:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c508:	2300      	movs	r3, #0
}
 801c50a:	4618      	mov	r0, r3
 801c50c:	bd80      	pop	{r7, pc}
 801c50e:	bf00      	nop
 801c510:	2001439c 	.word	0x2001439c
 801c514:	20014398 	.word	0x20014398
 801c518:	08028c3c 	.word	0x08028c3c
 801c51c:	08028c74 	.word	0x08028c74
 801c520:	08028c9c 	.word	0x08028c9c
 801c524:	080299c0 	.word	0x080299c0
 801c528:	0801de81 	.word	0x0801de81

0801c52c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c52c:	b580      	push	{r7, lr}
 801c52e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c530:	4b0e      	ldr	r3, [pc, #56]	; (801c56c <dhcp_dec_pcb_refcount+0x40>)
 801c532:	781b      	ldrb	r3, [r3, #0]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d105      	bne.n	801c544 <dhcp_dec_pcb_refcount+0x18>
 801c538:	4b0d      	ldr	r3, [pc, #52]	; (801c570 <dhcp_dec_pcb_refcount+0x44>)
 801c53a:	22ff      	movs	r2, #255	; 0xff
 801c53c:	490d      	ldr	r1, [pc, #52]	; (801c574 <dhcp_dec_pcb_refcount+0x48>)
 801c53e:	480e      	ldr	r0, [pc, #56]	; (801c578 <dhcp_dec_pcb_refcount+0x4c>)
 801c540:	f005 fb38 	bl	8021bb4 <iprintf>
  dhcp_pcb_refcount--;
 801c544:	4b09      	ldr	r3, [pc, #36]	; (801c56c <dhcp_dec_pcb_refcount+0x40>)
 801c546:	781b      	ldrb	r3, [r3, #0]
 801c548:	3b01      	subs	r3, #1
 801c54a:	b2da      	uxtb	r2, r3
 801c54c:	4b07      	ldr	r3, [pc, #28]	; (801c56c <dhcp_dec_pcb_refcount+0x40>)
 801c54e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c550:	4b06      	ldr	r3, [pc, #24]	; (801c56c <dhcp_dec_pcb_refcount+0x40>)
 801c552:	781b      	ldrb	r3, [r3, #0]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d107      	bne.n	801c568 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c558:	4b08      	ldr	r3, [pc, #32]	; (801c57c <dhcp_dec_pcb_refcount+0x50>)
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	4618      	mov	r0, r3
 801c55e:	f7ff fefd 	bl	801c35c <udp_remove>
    dhcp_pcb = NULL;
 801c562:	4b06      	ldr	r3, [pc, #24]	; (801c57c <dhcp_dec_pcb_refcount+0x50>)
 801c564:	2200      	movs	r2, #0
 801c566:	601a      	str	r2, [r3, #0]
  }
}
 801c568:	bf00      	nop
 801c56a:	bd80      	pop	{r7, pc}
 801c56c:	2001439c 	.word	0x2001439c
 801c570:	08028c3c 	.word	0x08028c3c
 801c574:	08028cc4 	.word	0x08028cc4
 801c578:	08028c9c 	.word	0x08028c9c
 801c57c:	20014398 	.word	0x20014398

0801c580 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c580:	b580      	push	{r7, lr}
 801c582:	b084      	sub	sp, #16
 801c584:	af00      	add	r7, sp, #0
 801c586:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c58c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c58e:	210c      	movs	r1, #12
 801c590:	68f8      	ldr	r0, [r7, #12]
 801c592:	f001 f875 	bl	801d680 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c596:	4b06      	ldr	r3, [pc, #24]	; (801c5b0 <dhcp_handle_nak+0x30>)
 801c598:	4a05      	ldr	r2, [pc, #20]	; (801c5b0 <dhcp_handle_nak+0x30>)
 801c59a:	4905      	ldr	r1, [pc, #20]	; (801c5b0 <dhcp_handle_nak+0x30>)
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f7f7 fd0d 	bl	8013fbc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c5a2:	6878      	ldr	r0, [r7, #4]
 801c5a4:	f000 fc68 	bl	801ce78 <dhcp_discover>
}
 801c5a8:	bf00      	nop
 801c5aa:	3710      	adds	r7, #16
 801c5ac:	46bd      	mov	sp, r7
 801c5ae:	bd80      	pop	{r7, pc}
 801c5b0:	080299c0 	.word	0x080299c0

0801c5b4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	b084      	sub	sp, #16
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5c0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c5c2:	2108      	movs	r1, #8
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	f001 f85b 	bl	801d680 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	331c      	adds	r3, #28
 801c5ce:	2200      	movs	r2, #0
 801c5d0:	4619      	mov	r1, r3
 801c5d2:	6878      	ldr	r0, [r7, #4]
 801c5d4:	f002 fbc8 	bl	801ed68 <etharp_query>
 801c5d8:	4603      	mov	r3, r0
 801c5da:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	799b      	ldrb	r3, [r3, #6]
 801c5e0:	2bff      	cmp	r3, #255	; 0xff
 801c5e2:	d005      	beq.n	801c5f0 <dhcp_check+0x3c>
    dhcp->tries++;
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	799b      	ldrb	r3, [r3, #6]
 801c5e8:	3301      	adds	r3, #1
 801c5ea:	b2da      	uxtb	r2, r3
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801c5f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c5f4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c5f6:	893b      	ldrh	r3, [r7, #8]
 801c5f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c5fc:	4a06      	ldr	r2, [pc, #24]	; (801c618 <dhcp_check+0x64>)
 801c5fe:	fb82 1203 	smull	r1, r2, r2, r3
 801c602:	1152      	asrs	r2, r2, #5
 801c604:	17db      	asrs	r3, r3, #31
 801c606:	1ad3      	subs	r3, r2, r3
 801c608:	b29a      	uxth	r2, r3
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c60e:	bf00      	nop
 801c610:	3710      	adds	r7, #16
 801c612:	46bd      	mov	sp, r7
 801c614:	bd80      	pop	{r7, pc}
 801c616:	bf00      	nop
 801c618:	10624dd3 	.word	0x10624dd3

0801c61c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b084      	sub	sp, #16
 801c620:	af00      	add	r7, sp, #0
 801c622:	6078      	str	r0, [r7, #4]
 801c624:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c62a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c62c:	4b0c      	ldr	r3, [pc, #48]	; (801c660 <dhcp_handle_offer+0x44>)
 801c62e:	789b      	ldrb	r3, [r3, #2]
 801c630:	2b00      	cmp	r3, #0
 801c632:	d011      	beq.n	801c658 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	2200      	movs	r2, #0
 801c638:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c63a:	4b0a      	ldr	r3, [pc, #40]	; (801c664 <dhcp_handle_offer+0x48>)
 801c63c:	689b      	ldr	r3, [r3, #8]
 801c63e:	4618      	mov	r0, r3
 801c640:	f7f5 fe51 	bl	80122e6 <lwip_htonl>
 801c644:	4602      	mov	r2, r0
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	691a      	ldr	r2, [r3, #16]
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c652:	6878      	ldr	r0, [r7, #4]
 801c654:	f000 f808 	bl	801c668 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801c658:	bf00      	nop
 801c65a:	3710      	adds	r7, #16
 801c65c:	46bd      	mov	sp, r7
 801c65e:	bd80      	pop	{r7, pc}
 801c660:	2001b1a4 	.word	0x2001b1a4
 801c664:	2001b1b0 	.word	0x2001b1b0

0801c668 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c668:	b5b0      	push	{r4, r5, r7, lr}
 801c66a:	b08a      	sub	sp, #40	; 0x28
 801c66c:	af02      	add	r7, sp, #8
 801c66e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d109      	bne.n	801c68a <dhcp_select+0x22>
 801c676:	4b71      	ldr	r3, [pc, #452]	; (801c83c <dhcp_select+0x1d4>)
 801c678:	f240 1277 	movw	r2, #375	; 0x177
 801c67c:	4970      	ldr	r1, [pc, #448]	; (801c840 <dhcp_select+0x1d8>)
 801c67e:	4871      	ldr	r0, [pc, #452]	; (801c844 <dhcp_select+0x1dc>)
 801c680:	f005 fa98 	bl	8021bb4 <iprintf>
 801c684:	f06f 030f 	mvn.w	r3, #15
 801c688:	e0d3      	b.n	801c832 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c68e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c690:	69bb      	ldr	r3, [r7, #24]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d109      	bne.n	801c6aa <dhcp_select+0x42>
 801c696:	4b69      	ldr	r3, [pc, #420]	; (801c83c <dhcp_select+0x1d4>)
 801c698:	f240 1279 	movw	r2, #377	; 0x179
 801c69c:	496a      	ldr	r1, [pc, #424]	; (801c848 <dhcp_select+0x1e0>)
 801c69e:	4869      	ldr	r0, [pc, #420]	; (801c844 <dhcp_select+0x1dc>)
 801c6a0:	f005 fa88 	bl	8021bb4 <iprintf>
 801c6a4:	f06f 0305 	mvn.w	r3, #5
 801c6a8:	e0c3      	b.n	801c832 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c6aa:	2101      	movs	r1, #1
 801c6ac:	69b8      	ldr	r0, [r7, #24]
 801c6ae:	f000 ffe7 	bl	801d680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c6b2:	f107 030c 	add.w	r3, r7, #12
 801c6b6:	2203      	movs	r2, #3
 801c6b8:	69b9      	ldr	r1, [r7, #24]
 801c6ba:	6878      	ldr	r0, [r7, #4]
 801c6bc:	f001 fcaa 	bl	801e014 <dhcp_create_msg>
 801c6c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	f000 8085 	beq.w	801c7d4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c6ca:	697b      	ldr	r3, [r7, #20]
 801c6cc:	685b      	ldr	r3, [r3, #4]
 801c6ce:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c6d0:	89b8      	ldrh	r0, [r7, #12]
 801c6d2:	693b      	ldr	r3, [r7, #16]
 801c6d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c6d8:	2302      	movs	r3, #2
 801c6da:	2239      	movs	r2, #57	; 0x39
 801c6dc:	f000 ffea 	bl	801d6b4 <dhcp_option>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c6e4:	89b8      	ldrh	r0, [r7, #12]
 801c6e6:	693b      	ldr	r3, [r7, #16]
 801c6e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c6f0:	461a      	mov	r2, r3
 801c6f2:	f001 f839 	bl	801d768 <dhcp_option_short>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c6fa:	89b8      	ldrh	r0, [r7, #12]
 801c6fc:	693b      	ldr	r3, [r7, #16]
 801c6fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c702:	2304      	movs	r3, #4
 801c704:	2232      	movs	r2, #50	; 0x32
 801c706:	f000 ffd5 	bl	801d6b4 <dhcp_option>
 801c70a:	4603      	mov	r3, r0
 801c70c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c70e:	89bc      	ldrh	r4, [r7, #12]
 801c710:	693b      	ldr	r3, [r7, #16]
 801c712:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c716:	69bb      	ldr	r3, [r7, #24]
 801c718:	69db      	ldr	r3, [r3, #28]
 801c71a:	4618      	mov	r0, r3
 801c71c:	f7f5 fde3 	bl	80122e6 <lwip_htonl>
 801c720:	4603      	mov	r3, r0
 801c722:	461a      	mov	r2, r3
 801c724:	4629      	mov	r1, r5
 801c726:	4620      	mov	r0, r4
 801c728:	f001 f850 	bl	801d7cc <dhcp_option_long>
 801c72c:	4603      	mov	r3, r0
 801c72e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c730:	89b8      	ldrh	r0, [r7, #12]
 801c732:	693b      	ldr	r3, [r7, #16]
 801c734:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c738:	2304      	movs	r3, #4
 801c73a:	2236      	movs	r2, #54	; 0x36
 801c73c:	f000 ffba 	bl	801d6b4 <dhcp_option>
 801c740:	4603      	mov	r3, r0
 801c742:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c744:	89bc      	ldrh	r4, [r7, #12]
 801c746:	693b      	ldr	r3, [r7, #16]
 801c748:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c74c:	69bb      	ldr	r3, [r7, #24]
 801c74e:	699b      	ldr	r3, [r3, #24]
 801c750:	4618      	mov	r0, r3
 801c752:	f7f5 fdc8 	bl	80122e6 <lwip_htonl>
 801c756:	4603      	mov	r3, r0
 801c758:	461a      	mov	r2, r3
 801c75a:	4629      	mov	r1, r5
 801c75c:	4620      	mov	r0, r4
 801c75e:	f001 f835 	bl	801d7cc <dhcp_option_long>
 801c762:	4603      	mov	r3, r0
 801c764:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c766:	89b8      	ldrh	r0, [r7, #12]
 801c768:	693b      	ldr	r3, [r7, #16]
 801c76a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c76e:	2304      	movs	r3, #4
 801c770:	2237      	movs	r2, #55	; 0x37
 801c772:	f000 ff9f 	bl	801d6b4 <dhcp_option>
 801c776:	4603      	mov	r3, r0
 801c778:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c77a:	2300      	movs	r3, #0
 801c77c:	77fb      	strb	r3, [r7, #31]
 801c77e:	e00e      	b.n	801c79e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c780:	89b8      	ldrh	r0, [r7, #12]
 801c782:	693b      	ldr	r3, [r7, #16]
 801c784:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c788:	7ffb      	ldrb	r3, [r7, #31]
 801c78a:	4a30      	ldr	r2, [pc, #192]	; (801c84c <dhcp_select+0x1e4>)
 801c78c:	5cd3      	ldrb	r3, [r2, r3]
 801c78e:	461a      	mov	r2, r3
 801c790:	f000 ffc4 	bl	801d71c <dhcp_option_byte>
 801c794:	4603      	mov	r3, r0
 801c796:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c798:	7ffb      	ldrb	r3, [r7, #31]
 801c79a:	3301      	adds	r3, #1
 801c79c:	77fb      	strb	r3, [r7, #31]
 801c79e:	7ffb      	ldrb	r3, [r7, #31]
 801c7a0:	2b03      	cmp	r3, #3
 801c7a2:	d9ed      	bls.n	801c780 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c7a4:	89b8      	ldrh	r0, [r7, #12]
 801c7a6:	693b      	ldr	r3, [r7, #16]
 801c7a8:	33f0      	adds	r3, #240	; 0xf0
 801c7aa:	697a      	ldr	r2, [r7, #20]
 801c7ac:	4619      	mov	r1, r3
 801c7ae:	f001 fd07 	bl	801e1c0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c7b2:	4b27      	ldr	r3, [pc, #156]	; (801c850 <dhcp_select+0x1e8>)
 801c7b4:	6818      	ldr	r0, [r3, #0]
 801c7b6:	4b27      	ldr	r3, [pc, #156]	; (801c854 <dhcp_select+0x1ec>)
 801c7b8:	9301      	str	r3, [sp, #4]
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	9300      	str	r3, [sp, #0]
 801c7be:	2343      	movs	r3, #67	; 0x43
 801c7c0:	4a25      	ldr	r2, [pc, #148]	; (801c858 <dhcp_select+0x1f0>)
 801c7c2:	6979      	ldr	r1, [r7, #20]
 801c7c4:	f7ff fba6 	bl	801bf14 <udp_sendto_if_src>
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 801c7cc:	6978      	ldr	r0, [r7, #20]
 801c7ce:	f7f8 f935 	bl	8014a3c <pbuf_free>
 801c7d2:	e001      	b.n	801c7d8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c7d4:	23ff      	movs	r3, #255	; 0xff
 801c7d6:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 801c7d8:	69bb      	ldr	r3, [r7, #24]
 801c7da:	799b      	ldrb	r3, [r3, #6]
 801c7dc:	2bff      	cmp	r3, #255	; 0xff
 801c7de:	d005      	beq.n	801c7ec <dhcp_select+0x184>
    dhcp->tries++;
 801c7e0:	69bb      	ldr	r3, [r7, #24]
 801c7e2:	799b      	ldrb	r3, [r3, #6]
 801c7e4:	3301      	adds	r3, #1
 801c7e6:	b2da      	uxtb	r2, r3
 801c7e8:	69bb      	ldr	r3, [r7, #24]
 801c7ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c7ec:	69bb      	ldr	r3, [r7, #24]
 801c7ee:	799b      	ldrb	r3, [r3, #6]
 801c7f0:	2b05      	cmp	r3, #5
 801c7f2:	d80d      	bhi.n	801c810 <dhcp_select+0x1a8>
 801c7f4:	69bb      	ldr	r3, [r7, #24]
 801c7f6:	799b      	ldrb	r3, [r3, #6]
 801c7f8:	461a      	mov	r2, r3
 801c7fa:	2301      	movs	r3, #1
 801c7fc:	4093      	lsls	r3, r2
 801c7fe:	b29b      	uxth	r3, r3
 801c800:	461a      	mov	r2, r3
 801c802:	0152      	lsls	r2, r2, #5
 801c804:	1ad2      	subs	r2, r2, r3
 801c806:	0092      	lsls	r2, r2, #2
 801c808:	4413      	add	r3, r2
 801c80a:	00db      	lsls	r3, r3, #3
 801c80c:	b29b      	uxth	r3, r3
 801c80e:	e001      	b.n	801c814 <dhcp_select+0x1ac>
 801c810:	f64e 2360 	movw	r3, #60000	; 0xea60
 801c814:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c816:	89fb      	ldrh	r3, [r7, #14]
 801c818:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c81c:	4a0f      	ldr	r2, [pc, #60]	; (801c85c <dhcp_select+0x1f4>)
 801c81e:	fb82 1203 	smull	r1, r2, r2, r3
 801c822:	1152      	asrs	r2, r2, #5
 801c824:	17db      	asrs	r3, r3, #31
 801c826:	1ad3      	subs	r3, r2, r3
 801c828:	b29a      	uxth	r2, r3
 801c82a:	69bb      	ldr	r3, [r7, #24]
 801c82c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c82e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801c832:	4618      	mov	r0, r3
 801c834:	3720      	adds	r7, #32
 801c836:	46bd      	mov	sp, r7
 801c838:	bdb0      	pop	{r4, r5, r7, pc}
 801c83a:	bf00      	nop
 801c83c:	08028c3c 	.word	0x08028c3c
 801c840:	08028ce8 	.word	0x08028ce8
 801c844:	08028c9c 	.word	0x08028c9c
 801c848:	08028d04 	.word	0x08028d04
 801c84c:	20000070 	.word	0x20000070
 801c850:	20014398 	.word	0x20014398
 801c854:	080299c0 	.word	0x080299c0
 801c858:	080299c4 	.word	0x080299c4
 801c85c:	10624dd3 	.word	0x10624dd3

0801c860 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801c866:	4b27      	ldr	r3, [pc, #156]	; (801c904 <dhcp_coarse_tmr+0xa4>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	607b      	str	r3, [r7, #4]
 801c86c:	e042      	b.n	801c8f4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c872:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c874:	683b      	ldr	r3, [r7, #0]
 801c876:	2b00      	cmp	r3, #0
 801c878:	d039      	beq.n	801c8ee <dhcp_coarse_tmr+0x8e>
 801c87a:	683b      	ldr	r3, [r7, #0]
 801c87c:	795b      	ldrb	r3, [r3, #5]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d035      	beq.n	801c8ee <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c882:	683b      	ldr	r3, [r7, #0]
 801c884:	8a9b      	ldrh	r3, [r3, #20]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d012      	beq.n	801c8b0 <dhcp_coarse_tmr+0x50>
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	8a5b      	ldrh	r3, [r3, #18]
 801c88e:	3301      	adds	r3, #1
 801c890:	b29a      	uxth	r2, r3
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	825a      	strh	r2, [r3, #18]
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	8a5a      	ldrh	r2, [r3, #18]
 801c89a:	683b      	ldr	r3, [r7, #0]
 801c89c:	8a9b      	ldrh	r3, [r3, #20]
 801c89e:	429a      	cmp	r2, r3
 801c8a0:	d106      	bne.n	801c8b0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801c8a2:	6878      	ldr	r0, [r7, #4]
 801c8a4:	f000 fe52 	bl	801d54c <dhcp_release_and_stop>
        dhcp_start(netif);
 801c8a8:	6878      	ldr	r0, [r7, #4]
 801c8aa:	f000 f989 	bl	801cbc0 <dhcp_start>
 801c8ae:	e01e      	b.n	801c8ee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c8b0:	683b      	ldr	r3, [r7, #0]
 801c8b2:	8a1b      	ldrh	r3, [r3, #16]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d00b      	beq.n	801c8d0 <dhcp_coarse_tmr+0x70>
 801c8b8:	683b      	ldr	r3, [r7, #0]
 801c8ba:	8a1b      	ldrh	r3, [r3, #16]
 801c8bc:	1e5a      	subs	r2, r3, #1
 801c8be:	b291      	uxth	r1, r2
 801c8c0:	683a      	ldr	r2, [r7, #0]
 801c8c2:	8211      	strh	r1, [r2, #16]
 801c8c4:	2b01      	cmp	r3, #1
 801c8c6:	d103      	bne.n	801c8d0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	f000 f8c6 	bl	801ca5a <dhcp_t2_timeout>
 801c8ce:	e00e      	b.n	801c8ee <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c8d0:	683b      	ldr	r3, [r7, #0]
 801c8d2:	89db      	ldrh	r3, [r3, #14]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d00a      	beq.n	801c8ee <dhcp_coarse_tmr+0x8e>
 801c8d8:	683b      	ldr	r3, [r7, #0]
 801c8da:	89db      	ldrh	r3, [r3, #14]
 801c8dc:	1e5a      	subs	r2, r3, #1
 801c8de:	b291      	uxth	r1, r2
 801c8e0:	683a      	ldr	r2, [r7, #0]
 801c8e2:	81d1      	strh	r1, [r2, #14]
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d102      	bne.n	801c8ee <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801c8e8:	6878      	ldr	r0, [r7, #4]
 801c8ea:	f000 f888 	bl	801c9fe <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	607b      	str	r3, [r7, #4]
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d1b9      	bne.n	801c86e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801c8fa:	bf00      	nop
 801c8fc:	bf00      	nop
 801c8fe:	3708      	adds	r7, #8
 801c900:	46bd      	mov	sp, r7
 801c902:	bd80      	pop	{r7, pc}
 801c904:	2001b178 	.word	0x2001b178

0801c908 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801c908:	b580      	push	{r7, lr}
 801c90a:	b082      	sub	sp, #8
 801c90c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801c90e:	4b16      	ldr	r3, [pc, #88]	; (801c968 <dhcp_fine_tmr+0x60>)
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	607b      	str	r3, [r7, #4]
 801c914:	e020      	b.n	801c958 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c91a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801c91c:	683b      	ldr	r3, [r7, #0]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d017      	beq.n	801c952 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801c922:	683b      	ldr	r3, [r7, #0]
 801c924:	891b      	ldrh	r3, [r3, #8]
 801c926:	2b01      	cmp	r3, #1
 801c928:	d906      	bls.n	801c938 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	891b      	ldrh	r3, [r3, #8]
 801c92e:	3b01      	subs	r3, #1
 801c930:	b29a      	uxth	r2, r3
 801c932:	683b      	ldr	r3, [r7, #0]
 801c934:	811a      	strh	r2, [r3, #8]
 801c936:	e00c      	b.n	801c952 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801c938:	683b      	ldr	r3, [r7, #0]
 801c93a:	891b      	ldrh	r3, [r3, #8]
 801c93c:	2b01      	cmp	r3, #1
 801c93e:	d108      	bne.n	801c952 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801c940:	683b      	ldr	r3, [r7, #0]
 801c942:	891b      	ldrh	r3, [r3, #8]
 801c944:	3b01      	subs	r3, #1
 801c946:	b29a      	uxth	r2, r3
 801c948:	683b      	ldr	r3, [r7, #0]
 801c94a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801c94c:	6878      	ldr	r0, [r7, #4]
 801c94e:	f000 f80d 	bl	801c96c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	607b      	str	r3, [r7, #4]
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d1db      	bne.n	801c916 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801c95e:	bf00      	nop
 801c960:	bf00      	nop
 801c962:	3708      	adds	r7, #8
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}
 801c968:	2001b178 	.word	0x2001b178

0801c96c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b084      	sub	sp, #16
 801c970:	af00      	add	r7, sp, #0
 801c972:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c978:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	795b      	ldrb	r3, [r3, #5]
 801c97e:	2b0c      	cmp	r3, #12
 801c980:	d003      	beq.n	801c98a <dhcp_timeout+0x1e>
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	795b      	ldrb	r3, [r3, #5]
 801c986:	2b06      	cmp	r3, #6
 801c988:	d103      	bne.n	801c992 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801c98a:	6878      	ldr	r0, [r7, #4]
 801c98c:	f000 fa74 	bl	801ce78 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801c990:	e031      	b.n	801c9f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	795b      	ldrb	r3, [r3, #5]
 801c996:	2b01      	cmp	r3, #1
 801c998:	d10e      	bne.n	801c9b8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	799b      	ldrb	r3, [r3, #6]
 801c99e:	2b05      	cmp	r3, #5
 801c9a0:	d803      	bhi.n	801c9aa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801c9a2:	6878      	ldr	r0, [r7, #4]
 801c9a4:	f7ff fe60 	bl	801c668 <dhcp_select>
}
 801c9a8:	e025      	b.n	801c9f6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801c9aa:	6878      	ldr	r0, [r7, #4]
 801c9ac:	f000 fdce 	bl	801d54c <dhcp_release_and_stop>
      dhcp_start(netif);
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f000 f905 	bl	801cbc0 <dhcp_start>
}
 801c9b6:	e01e      	b.n	801c9f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	795b      	ldrb	r3, [r3, #5]
 801c9bc:	2b08      	cmp	r3, #8
 801c9be:	d10b      	bne.n	801c9d8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	799b      	ldrb	r3, [r3, #6]
 801c9c4:	2b01      	cmp	r3, #1
 801c9c6:	d803      	bhi.n	801c9d0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801c9c8:	6878      	ldr	r0, [r7, #4]
 801c9ca:	f7ff fdf3 	bl	801c5b4 <dhcp_check>
}
 801c9ce:	e012      	b.n	801c9f6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f000 faf3 	bl	801cfbc <dhcp_bind>
}
 801c9d6:	e00e      	b.n	801c9f6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	795b      	ldrb	r3, [r3, #5]
 801c9dc:	2b03      	cmp	r3, #3
 801c9de:	d10a      	bne.n	801c9f6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	799b      	ldrb	r3, [r3, #6]
 801c9e4:	2b01      	cmp	r3, #1
 801c9e6:	d803      	bhi.n	801c9f0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801c9e8:	6878      	ldr	r0, [r7, #4]
 801c9ea:	f000 fcf9 	bl	801d3e0 <dhcp_reboot>
}
 801c9ee:	e002      	b.n	801c9f6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801c9f0:	6878      	ldr	r0, [r7, #4]
 801c9f2:	f000 fa41 	bl	801ce78 <dhcp_discover>
}
 801c9f6:	bf00      	nop
 801c9f8:	3710      	adds	r7, #16
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	bd80      	pop	{r7, pc}

0801c9fe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801c9fe:	b580      	push	{r7, lr}
 801ca00:	b084      	sub	sp, #16
 801ca02:	af00      	add	r7, sp, #0
 801ca04:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca0a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	795b      	ldrb	r3, [r3, #5]
 801ca10:	2b01      	cmp	r3, #1
 801ca12:	d007      	beq.n	801ca24 <dhcp_t1_timeout+0x26>
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	795b      	ldrb	r3, [r3, #5]
 801ca18:	2b0a      	cmp	r3, #10
 801ca1a:	d003      	beq.n	801ca24 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca20:	2b05      	cmp	r3, #5
 801ca22:	d116      	bne.n	801ca52 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801ca24:	6878      	ldr	r0, [r7, #4]
 801ca26:	f000 fba3 	bl	801d170 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	899b      	ldrh	r3, [r3, #12]
 801ca2e:	461a      	mov	r2, r3
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	8a5b      	ldrh	r3, [r3, #18]
 801ca34:	1ad3      	subs	r3, r2, r3
 801ca36:	2b01      	cmp	r3, #1
 801ca38:	dd0b      	ble.n	801ca52 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	899b      	ldrh	r3, [r3, #12]
 801ca3e:	461a      	mov	r2, r3
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	8a5b      	ldrh	r3, [r3, #18]
 801ca44:	1ad3      	subs	r3, r2, r3
 801ca46:	0fda      	lsrs	r2, r3, #31
 801ca48:	4413      	add	r3, r2
 801ca4a:	105b      	asrs	r3, r3, #1
 801ca4c:	b29a      	uxth	r2, r3
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801ca52:	bf00      	nop
 801ca54:	3710      	adds	r7, #16
 801ca56:	46bd      	mov	sp, r7
 801ca58:	bd80      	pop	{r7, pc}

0801ca5a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801ca5a:	b580      	push	{r7, lr}
 801ca5c:	b084      	sub	sp, #16
 801ca5e:	af00      	add	r7, sp, #0
 801ca60:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca66:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	795b      	ldrb	r3, [r3, #5]
 801ca6c:	2b01      	cmp	r3, #1
 801ca6e:	d00b      	beq.n	801ca88 <dhcp_t2_timeout+0x2e>
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	795b      	ldrb	r3, [r3, #5]
 801ca74:	2b0a      	cmp	r3, #10
 801ca76:	d007      	beq.n	801ca88 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca7c:	2b05      	cmp	r3, #5
 801ca7e:	d003      	beq.n	801ca88 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	795b      	ldrb	r3, [r3, #5]
 801ca84:	2b04      	cmp	r3, #4
 801ca86:	d116      	bne.n	801cab6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801ca88:	6878      	ldr	r0, [r7, #4]
 801ca8a:	f000 fc0d 	bl	801d2a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ca8e:	68fb      	ldr	r3, [r7, #12]
 801ca90:	8a9b      	ldrh	r3, [r3, #20]
 801ca92:	461a      	mov	r2, r3
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	8a5b      	ldrh	r3, [r3, #18]
 801ca98:	1ad3      	subs	r3, r2, r3
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	dd0b      	ble.n	801cab6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	8a9b      	ldrh	r3, [r3, #20]
 801caa2:	461a      	mov	r2, r3
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	8a5b      	ldrh	r3, [r3, #18]
 801caa8:	1ad3      	subs	r3, r2, r3
 801caaa:	0fda      	lsrs	r2, r3, #31
 801caac:	4413      	add	r3, r2
 801caae:	105b      	asrs	r3, r3, #1
 801cab0:	b29a      	uxth	r2, r3
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801cab6:	bf00      	nop
 801cab8:	3710      	adds	r7, #16
 801caba:	46bd      	mov	sp, r7
 801cabc:	bd80      	pop	{r7, pc}
	...

0801cac0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801cac0:	b580      	push	{r7, lr}
 801cac2:	b086      	sub	sp, #24
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	6078      	str	r0, [r7, #4]
 801cac8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cace:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801cad0:	693b      	ldr	r3, [r7, #16]
 801cad2:	2200      	movs	r2, #0
 801cad4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801cad6:	693b      	ldr	r3, [r7, #16]
 801cad8:	2200      	movs	r2, #0
 801cada:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801cadc:	4b36      	ldr	r3, [pc, #216]	; (801cbb8 <dhcp_handle_ack+0xf8>)
 801cade:	78db      	ldrb	r3, [r3, #3]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d003      	beq.n	801caec <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801cae4:	4b35      	ldr	r3, [pc, #212]	; (801cbbc <dhcp_handle_ack+0xfc>)
 801cae6:	68da      	ldr	r2, [r3, #12]
 801cae8:	693b      	ldr	r3, [r7, #16]
 801caea:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801caec:	4b32      	ldr	r3, [pc, #200]	; (801cbb8 <dhcp_handle_ack+0xf8>)
 801caee:	791b      	ldrb	r3, [r3, #4]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d004      	beq.n	801cafe <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801caf4:	4b31      	ldr	r3, [pc, #196]	; (801cbbc <dhcp_handle_ack+0xfc>)
 801caf6:	691a      	ldr	r2, [r3, #16]
 801caf8:	693b      	ldr	r3, [r7, #16]
 801cafa:	62da      	str	r2, [r3, #44]	; 0x2c
 801cafc:	e004      	b.n	801cb08 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801cafe:	693b      	ldr	r3, [r7, #16]
 801cb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb02:	085a      	lsrs	r2, r3, #1
 801cb04:	693b      	ldr	r3, [r7, #16]
 801cb06:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801cb08:	4b2b      	ldr	r3, [pc, #172]	; (801cbb8 <dhcp_handle_ack+0xf8>)
 801cb0a:	795b      	ldrb	r3, [r3, #5]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d004      	beq.n	801cb1a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801cb10:	4b2a      	ldr	r3, [pc, #168]	; (801cbbc <dhcp_handle_ack+0xfc>)
 801cb12:	695a      	ldr	r2, [r3, #20]
 801cb14:	693b      	ldr	r3, [r7, #16]
 801cb16:	631a      	str	r2, [r3, #48]	; 0x30
 801cb18:	e007      	b.n	801cb2a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801cb1a:	693b      	ldr	r3, [r7, #16]
 801cb1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cb1e:	4613      	mov	r3, r2
 801cb20:	00db      	lsls	r3, r3, #3
 801cb22:	1a9b      	subs	r3, r3, r2
 801cb24:	08da      	lsrs	r2, r3, #3
 801cb26:	693b      	ldr	r3, [r7, #16]
 801cb28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801cb2a:	683b      	ldr	r3, [r7, #0]
 801cb2c:	691a      	ldr	r2, [r3, #16]
 801cb2e:	693b      	ldr	r3, [r7, #16]
 801cb30:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801cb32:	4b21      	ldr	r3, [pc, #132]	; (801cbb8 <dhcp_handle_ack+0xf8>)
 801cb34:	799b      	ldrb	r3, [r3, #6]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d00b      	beq.n	801cb52 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801cb3a:	4b20      	ldr	r3, [pc, #128]	; (801cbbc <dhcp_handle_ack+0xfc>)
 801cb3c:	699b      	ldr	r3, [r3, #24]
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f7f5 fbd1 	bl	80122e6 <lwip_htonl>
 801cb44:	4602      	mov	r2, r0
 801cb46:	693b      	ldr	r3, [r7, #16]
 801cb48:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801cb4a:	693b      	ldr	r3, [r7, #16]
 801cb4c:	2201      	movs	r2, #1
 801cb4e:	71da      	strb	r2, [r3, #7]
 801cb50:	e002      	b.n	801cb58 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801cb52:	693b      	ldr	r3, [r7, #16]
 801cb54:	2200      	movs	r2, #0
 801cb56:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801cb58:	4b17      	ldr	r3, [pc, #92]	; (801cbb8 <dhcp_handle_ack+0xf8>)
 801cb5a:	79db      	ldrb	r3, [r3, #7]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d007      	beq.n	801cb70 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801cb60:	4b16      	ldr	r3, [pc, #88]	; (801cbbc <dhcp_handle_ack+0xfc>)
 801cb62:	69db      	ldr	r3, [r3, #28]
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7f5 fbbe 	bl	80122e6 <lwip_htonl>
 801cb6a:	4602      	mov	r2, r0
 801cb6c:	693b      	ldr	r3, [r7, #16]
 801cb6e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801cb70:	2300      	movs	r3, #0
 801cb72:	75fb      	strb	r3, [r7, #23]
 801cb74:	e013      	b.n	801cb9e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801cb76:	7dfb      	ldrb	r3, [r7, #23]
 801cb78:	3308      	adds	r3, #8
 801cb7a:	4a10      	ldr	r2, [pc, #64]	; (801cbbc <dhcp_handle_ack+0xfc>)
 801cb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7f5 fbb0 	bl	80122e6 <lwip_htonl>
 801cb86:	4603      	mov	r3, r0
 801cb88:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801cb8a:	f107 020c 	add.w	r2, r7, #12
 801cb8e:	7dfb      	ldrb	r3, [r7, #23]
 801cb90:	4611      	mov	r1, r2
 801cb92:	4618      	mov	r0, r3
 801cb94:	f7f5 fc02 	bl	801239c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801cb98:	7dfb      	ldrb	r3, [r7, #23]
 801cb9a:	3301      	adds	r3, #1
 801cb9c:	75fb      	strb	r3, [r7, #23]
 801cb9e:	7dfb      	ldrb	r3, [r7, #23]
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d805      	bhi.n	801cbb0 <dhcp_handle_ack+0xf0>
 801cba4:	7dfb      	ldrb	r3, [r7, #23]
 801cba6:	3308      	adds	r3, #8
 801cba8:	4a03      	ldr	r2, [pc, #12]	; (801cbb8 <dhcp_handle_ack+0xf8>)
 801cbaa:	5cd3      	ldrb	r3, [r2, r3]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d1e2      	bne.n	801cb76 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801cbb0:	bf00      	nop
 801cbb2:	3718      	adds	r7, #24
 801cbb4:	46bd      	mov	sp, r7
 801cbb6:	bd80      	pop	{r7, pc}
 801cbb8:	2001b1a4 	.word	0x2001b1a4
 801cbbc:	2001b1b0 	.word	0x2001b1b0

0801cbc0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b084      	sub	sp, #16
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d109      	bne.n	801cbe2 <dhcp_start+0x22>
 801cbce:	4b37      	ldr	r3, [pc, #220]	; (801ccac <dhcp_start+0xec>)
 801cbd0:	f240 22e7 	movw	r2, #743	; 0x2e7
 801cbd4:	4936      	ldr	r1, [pc, #216]	; (801ccb0 <dhcp_start+0xf0>)
 801cbd6:	4837      	ldr	r0, [pc, #220]	; (801ccb4 <dhcp_start+0xf4>)
 801cbd8:	f004 ffec 	bl	8021bb4 <iprintf>
 801cbdc:	f06f 030f 	mvn.w	r3, #15
 801cbe0:	e060      	b.n	801cca4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cbe8:	f003 0301 	and.w	r3, r3, #1
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d109      	bne.n	801cc04 <dhcp_start+0x44>
 801cbf0:	4b2e      	ldr	r3, [pc, #184]	; (801ccac <dhcp_start+0xec>)
 801cbf2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801cbf6:	4930      	ldr	r1, [pc, #192]	; (801ccb8 <dhcp_start+0xf8>)
 801cbf8:	482e      	ldr	r0, [pc, #184]	; (801ccb4 <dhcp_start+0xf4>)
 801cbfa:	f004 ffdb 	bl	8021bb4 <iprintf>
 801cbfe:	f06f 030f 	mvn.w	r3, #15
 801cc02:	e04f      	b.n	801cca4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc08:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cc0e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801cc12:	d202      	bcs.n	801cc1a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801cc14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc18:	e044      	b.n	801cca4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d10d      	bne.n	801cc3c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cc20:	2034      	movs	r0, #52	; 0x34
 801cc22:	f7f6 fe55 	bl	80138d0 <mem_malloc>
 801cc26:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d102      	bne.n	801cc34 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801cc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc32:	e037      	b.n	801cca4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	68fa      	ldr	r2, [r7, #12]
 801cc38:	625a      	str	r2, [r3, #36]	; 0x24
 801cc3a:	e005      	b.n	801cc48 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	791b      	ldrb	r3, [r3, #4]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d001      	beq.n	801cc48 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cc44:	f7ff fc72 	bl	801c52c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801cc48:	2234      	movs	r2, #52	; 0x34
 801cc4a:	2100      	movs	r1, #0
 801cc4c:	68f8      	ldr	r0, [r7, #12]
 801cc4e:	f004 fa95 	bl	802117c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801cc52:	f7ff fc19 	bl	801c488 <dhcp_inc_pcb_refcount>
 801cc56:	4603      	mov	r3, r0
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d002      	beq.n	801cc62 <dhcp_start+0xa2>
    return ERR_MEM;
 801cc5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc60:	e020      	b.n	801cca4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	2201      	movs	r2, #1
 801cc66:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cc6e:	f003 0304 	and.w	r3, r3, #4
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d105      	bne.n	801cc82 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801cc76:	2102      	movs	r1, #2
 801cc78:	68f8      	ldr	r0, [r7, #12]
 801cc7a:	f000 fd01 	bl	801d680 <dhcp_set_state>
    return ERR_OK;
 801cc7e:	2300      	movs	r3, #0
 801cc80:	e010      	b.n	801cca4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801cc82:	6878      	ldr	r0, [r7, #4]
 801cc84:	f000 f8f8 	bl	801ce78 <dhcp_discover>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801cc8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d005      	beq.n	801cca0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801cc94:	6878      	ldr	r0, [r7, #4]
 801cc96:	f000 fc59 	bl	801d54c <dhcp_release_and_stop>
    return ERR_MEM;
 801cc9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc9e:	e001      	b.n	801cca4 <dhcp_start+0xe4>
  }
  return result;
 801cca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cca4:	4618      	mov	r0, r3
 801cca6:	3710      	adds	r7, #16
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bd80      	pop	{r7, pc}
 801ccac:	08028c3c 	.word	0x08028c3c
 801ccb0:	08028d20 	.word	0x08028d20
 801ccb4:	08028c9c 	.word	0x08028c9c
 801ccb8:	08028d64 	.word	0x08028d64

0801ccbc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801ccbc:	b580      	push	{r7, lr}
 801ccbe:	b084      	sub	sp, #16
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccc8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d025      	beq.n	801cd1c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	795b      	ldrb	r3, [r3, #5]
 801ccd4:	2b0a      	cmp	r3, #10
 801ccd6:	d008      	beq.n	801ccea <dhcp_network_changed+0x2e>
 801ccd8:	2b0a      	cmp	r3, #10
 801ccda:	dc0d      	bgt.n	801ccf8 <dhcp_network_changed+0x3c>
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d01f      	beq.n	801cd20 <dhcp_network_changed+0x64>
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	db09      	blt.n	801ccf8 <dhcp_network_changed+0x3c>
 801cce4:	3b03      	subs	r3, #3
 801cce6:	2b02      	cmp	r3, #2
 801cce8:	d806      	bhi.n	801ccf8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	2200      	movs	r2, #0
 801ccee:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801ccf0:	6878      	ldr	r0, [r7, #4]
 801ccf2:	f000 fb75 	bl	801d3e0 <dhcp_reboot>
      break;
 801ccf6:	e014      	b.n	801cd22 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	795b      	ldrb	r3, [r3, #5]
 801ccfc:	2b0c      	cmp	r3, #12
 801ccfe:	d906      	bls.n	801cd0e <dhcp_network_changed+0x52>
 801cd00:	4b09      	ldr	r3, [pc, #36]	; (801cd28 <dhcp_network_changed+0x6c>)
 801cd02:	f240 326d 	movw	r2, #877	; 0x36d
 801cd06:	4909      	ldr	r1, [pc, #36]	; (801cd2c <dhcp_network_changed+0x70>)
 801cd08:	4809      	ldr	r0, [pc, #36]	; (801cd30 <dhcp_network_changed+0x74>)
 801cd0a:	f004 ff53 	bl	8021bb4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	2200      	movs	r2, #0
 801cd12:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801cd14:	6878      	ldr	r0, [r7, #4]
 801cd16:	f000 f8af 	bl	801ce78 <dhcp_discover>
      break;
 801cd1a:	e002      	b.n	801cd22 <dhcp_network_changed+0x66>
    return;
 801cd1c:	bf00      	nop
 801cd1e:	e000      	b.n	801cd22 <dhcp_network_changed+0x66>
      break;
 801cd20:	bf00      	nop
  }
}
 801cd22:	3710      	adds	r7, #16
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}
 801cd28:	08028c3c 	.word	0x08028c3c
 801cd2c:	08028d88 	.word	0x08028d88
 801cd30:	08028c9c 	.word	0x08028c9c

0801cd34 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	b084      	sub	sp, #16
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
 801cd3c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d107      	bne.n	801cd54 <dhcp_arp_reply+0x20>
 801cd44:	4b0e      	ldr	r3, [pc, #56]	; (801cd80 <dhcp_arp_reply+0x4c>)
 801cd46:	f240 328b 	movw	r2, #907	; 0x38b
 801cd4a:	490e      	ldr	r1, [pc, #56]	; (801cd84 <dhcp_arp_reply+0x50>)
 801cd4c:	480e      	ldr	r0, [pc, #56]	; (801cd88 <dhcp_arp_reply+0x54>)
 801cd4e:	f004 ff31 	bl	8021bb4 <iprintf>
 801cd52:	e012      	b.n	801cd7a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd58:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d00c      	beq.n	801cd7a <dhcp_arp_reply+0x46>
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	795b      	ldrb	r3, [r3, #5]
 801cd64:	2b08      	cmp	r3, #8
 801cd66:	d108      	bne.n	801cd7a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801cd68:	683b      	ldr	r3, [r7, #0]
 801cd6a:	681a      	ldr	r2, [r3, #0]
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	69db      	ldr	r3, [r3, #28]
 801cd70:	429a      	cmp	r2, r3
 801cd72:	d102      	bne.n	801cd7a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801cd74:	6878      	ldr	r0, [r7, #4]
 801cd76:	f000 f809 	bl	801cd8c <dhcp_decline>
    }
  }
}
 801cd7a:	3710      	adds	r7, #16
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd80      	pop	{r7, pc}
 801cd80:	08028c3c 	.word	0x08028c3c
 801cd84:	08028d20 	.word	0x08028d20
 801cd88:	08028c9c 	.word	0x08028c9c

0801cd8c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801cd8c:	b5b0      	push	{r4, r5, r7, lr}
 801cd8e:	b08a      	sub	sp, #40	; 0x28
 801cd90:	af02      	add	r7, sp, #8
 801cd92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd98:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801cd9a:	210c      	movs	r1, #12
 801cd9c:	69b8      	ldr	r0, [r7, #24]
 801cd9e:	f000 fc6f 	bl	801d680 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801cda2:	f107 030c 	add.w	r3, r7, #12
 801cda6:	2204      	movs	r2, #4
 801cda8:	69b9      	ldr	r1, [r7, #24]
 801cdaa:	6878      	ldr	r0, [r7, #4]
 801cdac:	f001 f932 	bl	801e014 <dhcp_create_msg>
 801cdb0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801cdb2:	697b      	ldr	r3, [r7, #20]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d035      	beq.n	801ce24 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cdb8:	697b      	ldr	r3, [r7, #20]
 801cdba:	685b      	ldr	r3, [r3, #4]
 801cdbc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cdbe:	89b8      	ldrh	r0, [r7, #12]
 801cdc0:	693b      	ldr	r3, [r7, #16]
 801cdc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cdc6:	2304      	movs	r3, #4
 801cdc8:	2232      	movs	r2, #50	; 0x32
 801cdca:	f000 fc73 	bl	801d6b4 <dhcp_option>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cdd2:	89bc      	ldrh	r4, [r7, #12]
 801cdd4:	693b      	ldr	r3, [r7, #16]
 801cdd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801cdda:	69bb      	ldr	r3, [r7, #24]
 801cddc:	69db      	ldr	r3, [r3, #28]
 801cdde:	4618      	mov	r0, r3
 801cde0:	f7f5 fa81 	bl	80122e6 <lwip_htonl>
 801cde4:	4603      	mov	r3, r0
 801cde6:	461a      	mov	r2, r3
 801cde8:	4629      	mov	r1, r5
 801cdea:	4620      	mov	r0, r4
 801cdec:	f000 fcee 	bl	801d7cc <dhcp_option_long>
 801cdf0:	4603      	mov	r3, r0
 801cdf2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cdf4:	89b8      	ldrh	r0, [r7, #12]
 801cdf6:	693b      	ldr	r3, [r7, #16]
 801cdf8:	33f0      	adds	r3, #240	; 0xf0
 801cdfa:	697a      	ldr	r2, [r7, #20]
 801cdfc:	4619      	mov	r1, r3
 801cdfe:	f001 f9df 	bl	801e1c0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ce02:	4b19      	ldr	r3, [pc, #100]	; (801ce68 <dhcp_decline+0xdc>)
 801ce04:	6818      	ldr	r0, [r3, #0]
 801ce06:	4b19      	ldr	r3, [pc, #100]	; (801ce6c <dhcp_decline+0xe0>)
 801ce08:	9301      	str	r3, [sp, #4]
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	9300      	str	r3, [sp, #0]
 801ce0e:	2343      	movs	r3, #67	; 0x43
 801ce10:	4a17      	ldr	r2, [pc, #92]	; (801ce70 <dhcp_decline+0xe4>)
 801ce12:	6979      	ldr	r1, [r7, #20]
 801ce14:	f7ff f87e 	bl	801bf14 <udp_sendto_if_src>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ce1c:	6978      	ldr	r0, [r7, #20]
 801ce1e:	f7f7 fe0d 	bl	8014a3c <pbuf_free>
 801ce22:	e001      	b.n	801ce28 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ce24:	23ff      	movs	r3, #255	; 0xff
 801ce26:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ce28:	69bb      	ldr	r3, [r7, #24]
 801ce2a:	799b      	ldrb	r3, [r3, #6]
 801ce2c:	2bff      	cmp	r3, #255	; 0xff
 801ce2e:	d005      	beq.n	801ce3c <dhcp_decline+0xb0>
    dhcp->tries++;
 801ce30:	69bb      	ldr	r3, [r7, #24]
 801ce32:	799b      	ldrb	r3, [r3, #6]
 801ce34:	3301      	adds	r3, #1
 801ce36:	b2da      	uxtb	r2, r3
 801ce38:	69bb      	ldr	r3, [r7, #24]
 801ce3a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801ce3c:	f242 7310 	movw	r3, #10000	; 0x2710
 801ce40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ce42:	89fb      	ldrh	r3, [r7, #14]
 801ce44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ce48:	4a0a      	ldr	r2, [pc, #40]	; (801ce74 <dhcp_decline+0xe8>)
 801ce4a:	fb82 1203 	smull	r1, r2, r2, r3
 801ce4e:	1152      	asrs	r2, r2, #5
 801ce50:	17db      	asrs	r3, r3, #31
 801ce52:	1ad3      	subs	r3, r2, r3
 801ce54:	b29a      	uxth	r2, r3
 801ce56:	69bb      	ldr	r3, [r7, #24]
 801ce58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ce5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce5e:	4618      	mov	r0, r3
 801ce60:	3720      	adds	r7, #32
 801ce62:	46bd      	mov	sp, r7
 801ce64:	bdb0      	pop	{r4, r5, r7, pc}
 801ce66:	bf00      	nop
 801ce68:	20014398 	.word	0x20014398
 801ce6c:	080299c0 	.word	0x080299c0
 801ce70:	080299c4 	.word	0x080299c4
 801ce74:	10624dd3 	.word	0x10624dd3

0801ce78 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b08a      	sub	sp, #40	; 0x28
 801ce7c:	af02      	add	r7, sp, #8
 801ce7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce84:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801ce86:	2300      	movs	r3, #0
 801ce88:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801ce8a:	69bb      	ldr	r3, [r7, #24]
 801ce8c:	2200      	movs	r2, #0
 801ce8e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801ce90:	2106      	movs	r1, #6
 801ce92:	69b8      	ldr	r0, [r7, #24]
 801ce94:	f000 fbf4 	bl	801d680 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801ce98:	f107 0308 	add.w	r3, r7, #8
 801ce9c:	2201      	movs	r2, #1
 801ce9e:	69b9      	ldr	r1, [r7, #24]
 801cea0:	6878      	ldr	r0, [r7, #4]
 801cea2:	f001 f8b7 	bl	801e014 <dhcp_create_msg>
 801cea6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801cea8:	693b      	ldr	r3, [r7, #16]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d04b      	beq.n	801cf46 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ceae:	693b      	ldr	r3, [r7, #16]
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ceb4:	8938      	ldrh	r0, [r7, #8]
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cebc:	2302      	movs	r3, #2
 801cebe:	2239      	movs	r2, #57	; 0x39
 801cec0:	f000 fbf8 	bl	801d6b4 <dhcp_option>
 801cec4:	4603      	mov	r3, r0
 801cec6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cec8:	8938      	ldrh	r0, [r7, #8]
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ced4:	461a      	mov	r2, r3
 801ced6:	f000 fc47 	bl	801d768 <dhcp_option_short>
 801ceda:	4603      	mov	r3, r0
 801cedc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cede:	8938      	ldrh	r0, [r7, #8]
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cee6:	2304      	movs	r3, #4
 801cee8:	2237      	movs	r2, #55	; 0x37
 801ceea:	f000 fbe3 	bl	801d6b4 <dhcp_option>
 801ceee:	4603      	mov	r3, r0
 801cef0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cef2:	2300      	movs	r3, #0
 801cef4:	77fb      	strb	r3, [r7, #31]
 801cef6:	e00e      	b.n	801cf16 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cef8:	8938      	ldrh	r0, [r7, #8]
 801cefa:	68fb      	ldr	r3, [r7, #12]
 801cefc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cf00:	7ffb      	ldrb	r3, [r7, #31]
 801cf02:	4a29      	ldr	r2, [pc, #164]	; (801cfa8 <dhcp_discover+0x130>)
 801cf04:	5cd3      	ldrb	r3, [r2, r3]
 801cf06:	461a      	mov	r2, r3
 801cf08:	f000 fc08 	bl	801d71c <dhcp_option_byte>
 801cf0c:	4603      	mov	r3, r0
 801cf0e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cf10:	7ffb      	ldrb	r3, [r7, #31]
 801cf12:	3301      	adds	r3, #1
 801cf14:	77fb      	strb	r3, [r7, #31]
 801cf16:	7ffb      	ldrb	r3, [r7, #31]
 801cf18:	2b03      	cmp	r3, #3
 801cf1a:	d9ed      	bls.n	801cef8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cf1c:	8938      	ldrh	r0, [r7, #8]
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	33f0      	adds	r3, #240	; 0xf0
 801cf22:	693a      	ldr	r2, [r7, #16]
 801cf24:	4619      	mov	r1, r3
 801cf26:	f001 f94b 	bl	801e1c0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801cf2a:	4b20      	ldr	r3, [pc, #128]	; (801cfac <dhcp_discover+0x134>)
 801cf2c:	6818      	ldr	r0, [r3, #0]
 801cf2e:	4b20      	ldr	r3, [pc, #128]	; (801cfb0 <dhcp_discover+0x138>)
 801cf30:	9301      	str	r3, [sp, #4]
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	9300      	str	r3, [sp, #0]
 801cf36:	2343      	movs	r3, #67	; 0x43
 801cf38:	4a1e      	ldr	r2, [pc, #120]	; (801cfb4 <dhcp_discover+0x13c>)
 801cf3a:	6939      	ldr	r1, [r7, #16]
 801cf3c:	f7fe ffea 	bl	801bf14 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801cf40:	6938      	ldr	r0, [r7, #16]
 801cf42:	f7f7 fd7b 	bl	8014a3c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cf46:	69bb      	ldr	r3, [r7, #24]
 801cf48:	799b      	ldrb	r3, [r3, #6]
 801cf4a:	2bff      	cmp	r3, #255	; 0xff
 801cf4c:	d005      	beq.n	801cf5a <dhcp_discover+0xe2>
    dhcp->tries++;
 801cf4e:	69bb      	ldr	r3, [r7, #24]
 801cf50:	799b      	ldrb	r3, [r3, #6]
 801cf52:	3301      	adds	r3, #1
 801cf54:	b2da      	uxtb	r2, r3
 801cf56:	69bb      	ldr	r3, [r7, #24]
 801cf58:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801cf5a:	69bb      	ldr	r3, [r7, #24]
 801cf5c:	799b      	ldrb	r3, [r3, #6]
 801cf5e:	2b05      	cmp	r3, #5
 801cf60:	d80d      	bhi.n	801cf7e <dhcp_discover+0x106>
 801cf62:	69bb      	ldr	r3, [r7, #24]
 801cf64:	799b      	ldrb	r3, [r3, #6]
 801cf66:	461a      	mov	r2, r3
 801cf68:	2301      	movs	r3, #1
 801cf6a:	4093      	lsls	r3, r2
 801cf6c:	b29b      	uxth	r3, r3
 801cf6e:	461a      	mov	r2, r3
 801cf70:	0152      	lsls	r2, r2, #5
 801cf72:	1ad2      	subs	r2, r2, r3
 801cf74:	0092      	lsls	r2, r2, #2
 801cf76:	4413      	add	r3, r2
 801cf78:	00db      	lsls	r3, r3, #3
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	e001      	b.n	801cf82 <dhcp_discover+0x10a>
 801cf7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801cf82:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf84:	897b      	ldrh	r3, [r7, #10]
 801cf86:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cf8a:	4a0b      	ldr	r2, [pc, #44]	; (801cfb8 <dhcp_discover+0x140>)
 801cf8c:	fb82 1203 	smull	r1, r2, r2, r3
 801cf90:	1152      	asrs	r2, r2, #5
 801cf92:	17db      	asrs	r3, r3, #31
 801cf94:	1ad3      	subs	r3, r2, r3
 801cf96:	b29a      	uxth	r2, r3
 801cf98:	69bb      	ldr	r3, [r7, #24]
 801cf9a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cf9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	3720      	adds	r7, #32
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}
 801cfa8:	20000070 	.word	0x20000070
 801cfac:	20014398 	.word	0x20014398
 801cfb0:	080299c0 	.word	0x080299c0
 801cfb4:	080299c4 	.word	0x080299c4
 801cfb8:	10624dd3 	.word	0x10624dd3

0801cfbc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801cfbc:	b580      	push	{r7, lr}
 801cfbe:	b088      	sub	sp, #32
 801cfc0:	af00      	add	r7, sp, #0
 801cfc2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d107      	bne.n	801cfda <dhcp_bind+0x1e>
 801cfca:	4b64      	ldr	r3, [pc, #400]	; (801d15c <dhcp_bind+0x1a0>)
 801cfcc:	f240 4215 	movw	r2, #1045	; 0x415
 801cfd0:	4963      	ldr	r1, [pc, #396]	; (801d160 <dhcp_bind+0x1a4>)
 801cfd2:	4864      	ldr	r0, [pc, #400]	; (801d164 <dhcp_bind+0x1a8>)
 801cfd4:	f004 fdee 	bl	8021bb4 <iprintf>
 801cfd8:	e0bc      	b.n	801d154 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfde:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801cfe0:	69fb      	ldr	r3, [r7, #28]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d107      	bne.n	801cff6 <dhcp_bind+0x3a>
 801cfe6:	4b5d      	ldr	r3, [pc, #372]	; (801d15c <dhcp_bind+0x1a0>)
 801cfe8:	f240 4217 	movw	r2, #1047	; 0x417
 801cfec:	495e      	ldr	r1, [pc, #376]	; (801d168 <dhcp_bind+0x1ac>)
 801cfee:	485d      	ldr	r0, [pc, #372]	; (801d164 <dhcp_bind+0x1a8>)
 801cff0:	f004 fde0 	bl	8021bb4 <iprintf>
 801cff4:	e0ae      	b.n	801d154 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801cff6:	69fb      	ldr	r3, [r7, #28]
 801cff8:	2200      	movs	r2, #0
 801cffa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801cffc:	69fb      	ldr	r3, [r7, #28]
 801cffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d004:	d019      	beq.n	801d03a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d006:	69fb      	ldr	r3, [r7, #28]
 801d008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d00a:	331e      	adds	r3, #30
 801d00c:	4a57      	ldr	r2, [pc, #348]	; (801d16c <dhcp_bind+0x1b0>)
 801d00e:	fba2 2303 	umull	r2, r3, r2, r3
 801d012:	095b      	lsrs	r3, r3, #5
 801d014:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801d016:	69bb      	ldr	r3, [r7, #24]
 801d018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d01c:	d302      	bcc.n	801d024 <dhcp_bind+0x68>
      timeout = 0xffff;
 801d01e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d022:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801d024:	69bb      	ldr	r3, [r7, #24]
 801d026:	b29a      	uxth	r2, r3
 801d028:	69fb      	ldr	r3, [r7, #28]
 801d02a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	8a9b      	ldrh	r3, [r3, #20]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d102      	bne.n	801d03a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801d034:	69fb      	ldr	r3, [r7, #28]
 801d036:	2201      	movs	r2, #1
 801d038:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d03a:	69fb      	ldr	r3, [r7, #28]
 801d03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d042:	d01d      	beq.n	801d080 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d044:	69fb      	ldr	r3, [r7, #28]
 801d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d048:	331e      	adds	r3, #30
 801d04a:	4a48      	ldr	r2, [pc, #288]	; (801d16c <dhcp_bind+0x1b0>)
 801d04c:	fba2 2303 	umull	r2, r3, r2, r3
 801d050:	095b      	lsrs	r3, r3, #5
 801d052:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801d054:	69bb      	ldr	r3, [r7, #24]
 801d056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d05a:	d302      	bcc.n	801d062 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801d05c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d060:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801d062:	69bb      	ldr	r3, [r7, #24]
 801d064:	b29a      	uxth	r2, r3
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801d06a:	69fb      	ldr	r3, [r7, #28]
 801d06c:	895b      	ldrh	r3, [r3, #10]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d102      	bne.n	801d078 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801d072:	69fb      	ldr	r3, [r7, #28]
 801d074:	2201      	movs	r2, #1
 801d076:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801d078:	69fb      	ldr	r3, [r7, #28]
 801d07a:	895a      	ldrh	r2, [r3, #10]
 801d07c:	69fb      	ldr	r3, [r7, #28]
 801d07e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d080:	69fb      	ldr	r3, [r7, #28]
 801d082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d088:	d01d      	beq.n	801d0c6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d08a:	69fb      	ldr	r3, [r7, #28]
 801d08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d08e:	331e      	adds	r3, #30
 801d090:	4a36      	ldr	r2, [pc, #216]	; (801d16c <dhcp_bind+0x1b0>)
 801d092:	fba2 2303 	umull	r2, r3, r2, r3
 801d096:	095b      	lsrs	r3, r3, #5
 801d098:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801d09a:	69bb      	ldr	r3, [r7, #24]
 801d09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d0a0:	d302      	bcc.n	801d0a8 <dhcp_bind+0xec>
      timeout = 0xffff;
 801d0a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d0a6:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801d0a8:	69bb      	ldr	r3, [r7, #24]
 801d0aa:	b29a      	uxth	r2, r3
 801d0ac:	69fb      	ldr	r3, [r7, #28]
 801d0ae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801d0b0:	69fb      	ldr	r3, [r7, #28]
 801d0b2:	899b      	ldrh	r3, [r3, #12]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d102      	bne.n	801d0be <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801d0b8:	69fb      	ldr	r3, [r7, #28]
 801d0ba:	2201      	movs	r2, #1
 801d0bc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d0be:	69fb      	ldr	r3, [r7, #28]
 801d0c0:	899a      	ldrh	r2, [r3, #12]
 801d0c2:	69fb      	ldr	r3, [r7, #28]
 801d0c4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d0c6:	69fb      	ldr	r3, [r7, #28]
 801d0c8:	895a      	ldrh	r2, [r3, #10]
 801d0ca:	69fb      	ldr	r3, [r7, #28]
 801d0cc:	899b      	ldrh	r3, [r3, #12]
 801d0ce:	429a      	cmp	r2, r3
 801d0d0:	d306      	bcc.n	801d0e0 <dhcp_bind+0x124>
 801d0d2:	69fb      	ldr	r3, [r7, #28]
 801d0d4:	899b      	ldrh	r3, [r3, #12]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d002      	beq.n	801d0e0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801d0da:	69fb      	ldr	r3, [r7, #28]
 801d0dc:	2200      	movs	r2, #0
 801d0de:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801d0e0:	69fb      	ldr	r3, [r7, #28]
 801d0e2:	79db      	ldrb	r3, [r3, #7]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d003      	beq.n	801d0f0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d0e8:	69fb      	ldr	r3, [r7, #28]
 801d0ea:	6a1b      	ldr	r3, [r3, #32]
 801d0ec:	613b      	str	r3, [r7, #16]
 801d0ee:	e014      	b.n	801d11a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d0f0:	69fb      	ldr	r3, [r7, #28]
 801d0f2:	331c      	adds	r3, #28
 801d0f4:	781b      	ldrb	r3, [r3, #0]
 801d0f6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801d0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	db02      	blt.n	801d106 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d100:	23ff      	movs	r3, #255	; 0xff
 801d102:	613b      	str	r3, [r7, #16]
 801d104:	e009      	b.n	801d11a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d106:	7dfb      	ldrb	r3, [r7, #23]
 801d108:	2bbf      	cmp	r3, #191	; 0xbf
 801d10a:	d903      	bls.n	801d114 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d10c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d110:	613b      	str	r3, [r7, #16]
 801d112:	e002      	b.n	801d11a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d118:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d11a:	69fb      	ldr	r3, [r7, #28]
 801d11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d11e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d108      	bne.n	801d138 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d126:	69fb      	ldr	r3, [r7, #28]
 801d128:	69da      	ldr	r2, [r3, #28]
 801d12a:	693b      	ldr	r3, [r7, #16]
 801d12c:	4013      	ands	r3, r2
 801d12e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d136:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d138:	210a      	movs	r1, #10
 801d13a:	69f8      	ldr	r0, [r7, #28]
 801d13c:	f000 faa0 	bl	801d680 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d140:	69fb      	ldr	r3, [r7, #28]
 801d142:	f103 011c 	add.w	r1, r3, #28
 801d146:	f107 030c 	add.w	r3, r7, #12
 801d14a:	f107 0210 	add.w	r2, r7, #16
 801d14e:	6878      	ldr	r0, [r7, #4]
 801d150:	f7f6 ff34 	bl	8013fbc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d154:	3720      	adds	r7, #32
 801d156:	46bd      	mov	sp, r7
 801d158:	bd80      	pop	{r7, pc}
 801d15a:	bf00      	nop
 801d15c:	08028c3c 	.word	0x08028c3c
 801d160:	08028d9c 	.word	0x08028d9c
 801d164:	08028c9c 	.word	0x08028c9c
 801d168:	08028db8 	.word	0x08028db8
 801d16c:	88888889 	.word	0x88888889

0801d170 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	b08a      	sub	sp, #40	; 0x28
 801d174:	af02      	add	r7, sp, #8
 801d176:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d17c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d17e:	2105      	movs	r1, #5
 801d180:	69b8      	ldr	r0, [r7, #24]
 801d182:	f000 fa7d 	bl	801d680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d186:	f107 030c 	add.w	r3, r7, #12
 801d18a:	2203      	movs	r2, #3
 801d18c:	69b9      	ldr	r1, [r7, #24]
 801d18e:	6878      	ldr	r0, [r7, #4]
 801d190:	f000 ff40 	bl	801e014 <dhcp_create_msg>
 801d194:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d196:	697b      	ldr	r3, [r7, #20]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d04e      	beq.n	801d23a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d19c:	697b      	ldr	r3, [r7, #20]
 801d19e:	685b      	ldr	r3, [r3, #4]
 801d1a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d1a2:	89b8      	ldrh	r0, [r7, #12]
 801d1a4:	693b      	ldr	r3, [r7, #16]
 801d1a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d1aa:	2302      	movs	r3, #2
 801d1ac:	2239      	movs	r2, #57	; 0x39
 801d1ae:	f000 fa81 	bl	801d6b4 <dhcp_option>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d1b6:	89b8      	ldrh	r0, [r7, #12]
 801d1b8:	693b      	ldr	r3, [r7, #16]
 801d1ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d1c2:	461a      	mov	r2, r3
 801d1c4:	f000 fad0 	bl	801d768 <dhcp_option_short>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d1cc:	89b8      	ldrh	r0, [r7, #12]
 801d1ce:	693b      	ldr	r3, [r7, #16]
 801d1d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d1d4:	2304      	movs	r3, #4
 801d1d6:	2237      	movs	r2, #55	; 0x37
 801d1d8:	f000 fa6c 	bl	801d6b4 <dhcp_option>
 801d1dc:	4603      	mov	r3, r0
 801d1de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	77bb      	strb	r3, [r7, #30]
 801d1e4:	e00e      	b.n	801d204 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d1e6:	89b8      	ldrh	r0, [r7, #12]
 801d1e8:	693b      	ldr	r3, [r7, #16]
 801d1ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d1ee:	7fbb      	ldrb	r3, [r7, #30]
 801d1f0:	4a2a      	ldr	r2, [pc, #168]	; (801d29c <dhcp_renew+0x12c>)
 801d1f2:	5cd3      	ldrb	r3, [r2, r3]
 801d1f4:	461a      	mov	r2, r3
 801d1f6:	f000 fa91 	bl	801d71c <dhcp_option_byte>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1fe:	7fbb      	ldrb	r3, [r7, #30]
 801d200:	3301      	adds	r3, #1
 801d202:	77bb      	strb	r3, [r7, #30]
 801d204:	7fbb      	ldrb	r3, [r7, #30]
 801d206:	2b03      	cmp	r3, #3
 801d208:	d9ed      	bls.n	801d1e6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d20a:	89b8      	ldrh	r0, [r7, #12]
 801d20c:	693b      	ldr	r3, [r7, #16]
 801d20e:	33f0      	adds	r3, #240	; 0xf0
 801d210:	697a      	ldr	r2, [r7, #20]
 801d212:	4619      	mov	r1, r3
 801d214:	f000 ffd4 	bl	801e1c0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d218:	4b21      	ldr	r3, [pc, #132]	; (801d2a0 <dhcp_renew+0x130>)
 801d21a:	6818      	ldr	r0, [r3, #0]
 801d21c:	69bb      	ldr	r3, [r7, #24]
 801d21e:	f103 0218 	add.w	r2, r3, #24
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	9300      	str	r3, [sp, #0]
 801d226:	2343      	movs	r3, #67	; 0x43
 801d228:	6979      	ldr	r1, [r7, #20]
 801d22a:	f7fe fdff 	bl	801be2c <udp_sendto_if>
 801d22e:	4603      	mov	r3, r0
 801d230:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d232:	6978      	ldr	r0, [r7, #20]
 801d234:	f7f7 fc02 	bl	8014a3c <pbuf_free>
 801d238:	e001      	b.n	801d23e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d23a:	23ff      	movs	r3, #255	; 0xff
 801d23c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d23e:	69bb      	ldr	r3, [r7, #24]
 801d240:	799b      	ldrb	r3, [r3, #6]
 801d242:	2bff      	cmp	r3, #255	; 0xff
 801d244:	d005      	beq.n	801d252 <dhcp_renew+0xe2>
    dhcp->tries++;
 801d246:	69bb      	ldr	r3, [r7, #24]
 801d248:	799b      	ldrb	r3, [r3, #6]
 801d24a:	3301      	adds	r3, #1
 801d24c:	b2da      	uxtb	r2, r3
 801d24e:	69bb      	ldr	r3, [r7, #24]
 801d250:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d252:	69bb      	ldr	r3, [r7, #24]
 801d254:	799b      	ldrb	r3, [r3, #6]
 801d256:	2b09      	cmp	r3, #9
 801d258:	d80a      	bhi.n	801d270 <dhcp_renew+0x100>
 801d25a:	69bb      	ldr	r3, [r7, #24]
 801d25c:	799b      	ldrb	r3, [r3, #6]
 801d25e:	b29b      	uxth	r3, r3
 801d260:	461a      	mov	r2, r3
 801d262:	0152      	lsls	r2, r2, #5
 801d264:	1ad2      	subs	r2, r2, r3
 801d266:	0092      	lsls	r2, r2, #2
 801d268:	4413      	add	r3, r2
 801d26a:	011b      	lsls	r3, r3, #4
 801d26c:	b29b      	uxth	r3, r3
 801d26e:	e001      	b.n	801d274 <dhcp_renew+0x104>
 801d270:	f644 6320 	movw	r3, #20000	; 0x4e20
 801d274:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d276:	89fb      	ldrh	r3, [r7, #14]
 801d278:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d27c:	4a09      	ldr	r2, [pc, #36]	; (801d2a4 <dhcp_renew+0x134>)
 801d27e:	fb82 1203 	smull	r1, r2, r2, r3
 801d282:	1152      	asrs	r2, r2, #5
 801d284:	17db      	asrs	r3, r3, #31
 801d286:	1ad3      	subs	r3, r2, r3
 801d288:	b29a      	uxth	r2, r3
 801d28a:	69bb      	ldr	r3, [r7, #24]
 801d28c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d28e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d292:	4618      	mov	r0, r3
 801d294:	3720      	adds	r7, #32
 801d296:	46bd      	mov	sp, r7
 801d298:	bd80      	pop	{r7, pc}
 801d29a:	bf00      	nop
 801d29c:	20000070 	.word	0x20000070
 801d2a0:	20014398 	.word	0x20014398
 801d2a4:	10624dd3 	.word	0x10624dd3

0801d2a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d2a8:	b580      	push	{r7, lr}
 801d2aa:	b08a      	sub	sp, #40	; 0x28
 801d2ac:	af02      	add	r7, sp, #8
 801d2ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d2b6:	2104      	movs	r1, #4
 801d2b8:	69b8      	ldr	r0, [r7, #24]
 801d2ba:	f000 f9e1 	bl	801d680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d2be:	f107 030c 	add.w	r3, r7, #12
 801d2c2:	2203      	movs	r2, #3
 801d2c4:	69b9      	ldr	r1, [r7, #24]
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f000 fea4 	bl	801e014 <dhcp_create_msg>
 801d2cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d2ce:	697b      	ldr	r3, [r7, #20]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d04c      	beq.n	801d36e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d2d4:	697b      	ldr	r3, [r7, #20]
 801d2d6:	685b      	ldr	r3, [r3, #4]
 801d2d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d2da:	89b8      	ldrh	r0, [r7, #12]
 801d2dc:	693b      	ldr	r3, [r7, #16]
 801d2de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d2e2:	2302      	movs	r3, #2
 801d2e4:	2239      	movs	r2, #57	; 0x39
 801d2e6:	f000 f9e5 	bl	801d6b4 <dhcp_option>
 801d2ea:	4603      	mov	r3, r0
 801d2ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d2ee:	89b8      	ldrh	r0, [r7, #12]
 801d2f0:	693b      	ldr	r3, [r7, #16]
 801d2f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d2fa:	461a      	mov	r2, r3
 801d2fc:	f000 fa34 	bl	801d768 <dhcp_option_short>
 801d300:	4603      	mov	r3, r0
 801d302:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d304:	89b8      	ldrh	r0, [r7, #12]
 801d306:	693b      	ldr	r3, [r7, #16]
 801d308:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d30c:	2304      	movs	r3, #4
 801d30e:	2237      	movs	r2, #55	; 0x37
 801d310:	f000 f9d0 	bl	801d6b4 <dhcp_option>
 801d314:	4603      	mov	r3, r0
 801d316:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d318:	2300      	movs	r3, #0
 801d31a:	77bb      	strb	r3, [r7, #30]
 801d31c:	e00e      	b.n	801d33c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d31e:	89b8      	ldrh	r0, [r7, #12]
 801d320:	693b      	ldr	r3, [r7, #16]
 801d322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d326:	7fbb      	ldrb	r3, [r7, #30]
 801d328:	4a29      	ldr	r2, [pc, #164]	; (801d3d0 <dhcp_rebind+0x128>)
 801d32a:	5cd3      	ldrb	r3, [r2, r3]
 801d32c:	461a      	mov	r2, r3
 801d32e:	f000 f9f5 	bl	801d71c <dhcp_option_byte>
 801d332:	4603      	mov	r3, r0
 801d334:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d336:	7fbb      	ldrb	r3, [r7, #30]
 801d338:	3301      	adds	r3, #1
 801d33a:	77bb      	strb	r3, [r7, #30]
 801d33c:	7fbb      	ldrb	r3, [r7, #30]
 801d33e:	2b03      	cmp	r3, #3
 801d340:	d9ed      	bls.n	801d31e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d342:	89b8      	ldrh	r0, [r7, #12]
 801d344:	693b      	ldr	r3, [r7, #16]
 801d346:	33f0      	adds	r3, #240	; 0xf0
 801d348:	697a      	ldr	r2, [r7, #20]
 801d34a:	4619      	mov	r1, r3
 801d34c:	f000 ff38 	bl	801e1c0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d350:	4b20      	ldr	r3, [pc, #128]	; (801d3d4 <dhcp_rebind+0x12c>)
 801d352:	6818      	ldr	r0, [r3, #0]
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	9300      	str	r3, [sp, #0]
 801d358:	2343      	movs	r3, #67	; 0x43
 801d35a:	4a1f      	ldr	r2, [pc, #124]	; (801d3d8 <dhcp_rebind+0x130>)
 801d35c:	6979      	ldr	r1, [r7, #20]
 801d35e:	f7fe fd65 	bl	801be2c <udp_sendto_if>
 801d362:	4603      	mov	r3, r0
 801d364:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d366:	6978      	ldr	r0, [r7, #20]
 801d368:	f7f7 fb68 	bl	8014a3c <pbuf_free>
 801d36c:	e001      	b.n	801d372 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d36e:	23ff      	movs	r3, #255	; 0xff
 801d370:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d372:	69bb      	ldr	r3, [r7, #24]
 801d374:	799b      	ldrb	r3, [r3, #6]
 801d376:	2bff      	cmp	r3, #255	; 0xff
 801d378:	d005      	beq.n	801d386 <dhcp_rebind+0xde>
    dhcp->tries++;
 801d37a:	69bb      	ldr	r3, [r7, #24]
 801d37c:	799b      	ldrb	r3, [r3, #6]
 801d37e:	3301      	adds	r3, #1
 801d380:	b2da      	uxtb	r2, r3
 801d382:	69bb      	ldr	r3, [r7, #24]
 801d384:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d386:	69bb      	ldr	r3, [r7, #24]
 801d388:	799b      	ldrb	r3, [r3, #6]
 801d38a:	2b09      	cmp	r3, #9
 801d38c:	d80a      	bhi.n	801d3a4 <dhcp_rebind+0xfc>
 801d38e:	69bb      	ldr	r3, [r7, #24]
 801d390:	799b      	ldrb	r3, [r3, #6]
 801d392:	b29b      	uxth	r3, r3
 801d394:	461a      	mov	r2, r3
 801d396:	0152      	lsls	r2, r2, #5
 801d398:	1ad2      	subs	r2, r2, r3
 801d39a:	0092      	lsls	r2, r2, #2
 801d39c:	4413      	add	r3, r2
 801d39e:	00db      	lsls	r3, r3, #3
 801d3a0:	b29b      	uxth	r3, r3
 801d3a2:	e001      	b.n	801d3a8 <dhcp_rebind+0x100>
 801d3a4:	f242 7310 	movw	r3, #10000	; 0x2710
 801d3a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d3aa:	89fb      	ldrh	r3, [r7, #14]
 801d3ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d3b0:	4a0a      	ldr	r2, [pc, #40]	; (801d3dc <dhcp_rebind+0x134>)
 801d3b2:	fb82 1203 	smull	r1, r2, r2, r3
 801d3b6:	1152      	asrs	r2, r2, #5
 801d3b8:	17db      	asrs	r3, r3, #31
 801d3ba:	1ad3      	subs	r3, r2, r3
 801d3bc:	b29a      	uxth	r2, r3
 801d3be:	69bb      	ldr	r3, [r7, #24]
 801d3c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d3c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d3c6:	4618      	mov	r0, r3
 801d3c8:	3720      	adds	r7, #32
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	bd80      	pop	{r7, pc}
 801d3ce:	bf00      	nop
 801d3d0:	20000070 	.word	0x20000070
 801d3d4:	20014398 	.word	0x20014398
 801d3d8:	080299c4 	.word	0x080299c4
 801d3dc:	10624dd3 	.word	0x10624dd3

0801d3e0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d3e0:	b5b0      	push	{r4, r5, r7, lr}
 801d3e2:	b08a      	sub	sp, #40	; 0x28
 801d3e4:	af02      	add	r7, sp, #8
 801d3e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3ec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d3ee:	2103      	movs	r1, #3
 801d3f0:	69b8      	ldr	r0, [r7, #24]
 801d3f2:	f000 f945 	bl	801d680 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d3f6:	f107 030c 	add.w	r3, r7, #12
 801d3fa:	2203      	movs	r2, #3
 801d3fc:	69b9      	ldr	r1, [r7, #24]
 801d3fe:	6878      	ldr	r0, [r7, #4]
 801d400:	f000 fe08 	bl	801e014 <dhcp_create_msg>
 801d404:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d406:	697b      	ldr	r3, [r7, #20]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d066      	beq.n	801d4da <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d40c:	697b      	ldr	r3, [r7, #20]
 801d40e:	685b      	ldr	r3, [r3, #4]
 801d410:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d412:	89b8      	ldrh	r0, [r7, #12]
 801d414:	693b      	ldr	r3, [r7, #16]
 801d416:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d41a:	2302      	movs	r3, #2
 801d41c:	2239      	movs	r2, #57	; 0x39
 801d41e:	f000 f949 	bl	801d6b4 <dhcp_option>
 801d422:	4603      	mov	r3, r0
 801d424:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d426:	89b8      	ldrh	r0, [r7, #12]
 801d428:	693b      	ldr	r3, [r7, #16]
 801d42a:	33f0      	adds	r3, #240	; 0xf0
 801d42c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d430:	4619      	mov	r1, r3
 801d432:	f000 f999 	bl	801d768 <dhcp_option_short>
 801d436:	4603      	mov	r3, r0
 801d438:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d43a:	89b8      	ldrh	r0, [r7, #12]
 801d43c:	693b      	ldr	r3, [r7, #16]
 801d43e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d442:	2304      	movs	r3, #4
 801d444:	2232      	movs	r2, #50	; 0x32
 801d446:	f000 f935 	bl	801d6b4 <dhcp_option>
 801d44a:	4603      	mov	r3, r0
 801d44c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d44e:	89bc      	ldrh	r4, [r7, #12]
 801d450:	693b      	ldr	r3, [r7, #16]
 801d452:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d456:	69bb      	ldr	r3, [r7, #24]
 801d458:	69db      	ldr	r3, [r3, #28]
 801d45a:	4618      	mov	r0, r3
 801d45c:	f7f4 ff43 	bl	80122e6 <lwip_htonl>
 801d460:	4603      	mov	r3, r0
 801d462:	461a      	mov	r2, r3
 801d464:	4629      	mov	r1, r5
 801d466:	4620      	mov	r0, r4
 801d468:	f000 f9b0 	bl	801d7cc <dhcp_option_long>
 801d46c:	4603      	mov	r3, r0
 801d46e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d470:	89b8      	ldrh	r0, [r7, #12]
 801d472:	693b      	ldr	r3, [r7, #16]
 801d474:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d478:	2304      	movs	r3, #4
 801d47a:	2237      	movs	r2, #55	; 0x37
 801d47c:	f000 f91a 	bl	801d6b4 <dhcp_option>
 801d480:	4603      	mov	r3, r0
 801d482:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d484:	2300      	movs	r3, #0
 801d486:	77bb      	strb	r3, [r7, #30]
 801d488:	e00e      	b.n	801d4a8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d48a:	89b8      	ldrh	r0, [r7, #12]
 801d48c:	693b      	ldr	r3, [r7, #16]
 801d48e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d492:	7fbb      	ldrb	r3, [r7, #30]
 801d494:	4a29      	ldr	r2, [pc, #164]	; (801d53c <dhcp_reboot+0x15c>)
 801d496:	5cd3      	ldrb	r3, [r2, r3]
 801d498:	461a      	mov	r2, r3
 801d49a:	f000 f93f 	bl	801d71c <dhcp_option_byte>
 801d49e:	4603      	mov	r3, r0
 801d4a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d4a2:	7fbb      	ldrb	r3, [r7, #30]
 801d4a4:	3301      	adds	r3, #1
 801d4a6:	77bb      	strb	r3, [r7, #30]
 801d4a8:	7fbb      	ldrb	r3, [r7, #30]
 801d4aa:	2b03      	cmp	r3, #3
 801d4ac:	d9ed      	bls.n	801d48a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d4ae:	89b8      	ldrh	r0, [r7, #12]
 801d4b0:	693b      	ldr	r3, [r7, #16]
 801d4b2:	33f0      	adds	r3, #240	; 0xf0
 801d4b4:	697a      	ldr	r2, [r7, #20]
 801d4b6:	4619      	mov	r1, r3
 801d4b8:	f000 fe82 	bl	801e1c0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d4bc:	4b20      	ldr	r3, [pc, #128]	; (801d540 <dhcp_reboot+0x160>)
 801d4be:	6818      	ldr	r0, [r3, #0]
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	9300      	str	r3, [sp, #0]
 801d4c4:	2343      	movs	r3, #67	; 0x43
 801d4c6:	4a1f      	ldr	r2, [pc, #124]	; (801d544 <dhcp_reboot+0x164>)
 801d4c8:	6979      	ldr	r1, [r7, #20]
 801d4ca:	f7fe fcaf 	bl	801be2c <udp_sendto_if>
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d4d2:	6978      	ldr	r0, [r7, #20]
 801d4d4:	f7f7 fab2 	bl	8014a3c <pbuf_free>
 801d4d8:	e001      	b.n	801d4de <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d4da:	23ff      	movs	r3, #255	; 0xff
 801d4dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d4de:	69bb      	ldr	r3, [r7, #24]
 801d4e0:	799b      	ldrb	r3, [r3, #6]
 801d4e2:	2bff      	cmp	r3, #255	; 0xff
 801d4e4:	d005      	beq.n	801d4f2 <dhcp_reboot+0x112>
    dhcp->tries++;
 801d4e6:	69bb      	ldr	r3, [r7, #24]
 801d4e8:	799b      	ldrb	r3, [r3, #6]
 801d4ea:	3301      	adds	r3, #1
 801d4ec:	b2da      	uxtb	r2, r3
 801d4ee:	69bb      	ldr	r3, [r7, #24]
 801d4f0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d4f2:	69bb      	ldr	r3, [r7, #24]
 801d4f4:	799b      	ldrb	r3, [r3, #6]
 801d4f6:	2b09      	cmp	r3, #9
 801d4f8:	d80a      	bhi.n	801d510 <dhcp_reboot+0x130>
 801d4fa:	69bb      	ldr	r3, [r7, #24]
 801d4fc:	799b      	ldrb	r3, [r3, #6]
 801d4fe:	b29b      	uxth	r3, r3
 801d500:	461a      	mov	r2, r3
 801d502:	0152      	lsls	r2, r2, #5
 801d504:	1ad2      	subs	r2, r2, r3
 801d506:	0092      	lsls	r2, r2, #2
 801d508:	4413      	add	r3, r2
 801d50a:	00db      	lsls	r3, r3, #3
 801d50c:	b29b      	uxth	r3, r3
 801d50e:	e001      	b.n	801d514 <dhcp_reboot+0x134>
 801d510:	f242 7310 	movw	r3, #10000	; 0x2710
 801d514:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d516:	89fb      	ldrh	r3, [r7, #14]
 801d518:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d51c:	4a0a      	ldr	r2, [pc, #40]	; (801d548 <dhcp_reboot+0x168>)
 801d51e:	fb82 1203 	smull	r1, r2, r2, r3
 801d522:	1152      	asrs	r2, r2, #5
 801d524:	17db      	asrs	r3, r3, #31
 801d526:	1ad3      	subs	r3, r2, r3
 801d528:	b29a      	uxth	r2, r3
 801d52a:	69bb      	ldr	r3, [r7, #24]
 801d52c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d52e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d532:	4618      	mov	r0, r3
 801d534:	3720      	adds	r7, #32
 801d536:	46bd      	mov	sp, r7
 801d538:	bdb0      	pop	{r4, r5, r7, pc}
 801d53a:	bf00      	nop
 801d53c:	20000070 	.word	0x20000070
 801d540:	20014398 	.word	0x20014398
 801d544:	080299c4 	.word	0x080299c4
 801d548:	10624dd3 	.word	0x10624dd3

0801d54c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801d54c:	b5b0      	push	{r4, r5, r7, lr}
 801d54e:	b08a      	sub	sp, #40	; 0x28
 801d550:	af02      	add	r7, sp, #8
 801d552:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d558:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801d55a:	69fb      	ldr	r3, [r7, #28]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	f000 8084 	beq.w	801d66a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801d562:	69fb      	ldr	r3, [r7, #28]
 801d564:	795b      	ldrb	r3, [r3, #5]
 801d566:	2b00      	cmp	r3, #0
 801d568:	f000 8081 	beq.w	801d66e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d56c:	69fb      	ldr	r3, [r7, #28]
 801d56e:	699b      	ldr	r3, [r3, #24]
 801d570:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d572:	69fb      	ldr	r3, [r7, #28]
 801d574:	2200      	movs	r2, #0
 801d576:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d578:	69fb      	ldr	r3, [r7, #28]
 801d57a:	2200      	movs	r2, #0
 801d57c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d57e:	69fb      	ldr	r3, [r7, #28]
 801d580:	2200      	movs	r2, #0
 801d582:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d584:	69fb      	ldr	r3, [r7, #28]
 801d586:	2200      	movs	r2, #0
 801d588:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d58a:	69fb      	ldr	r3, [r7, #28]
 801d58c:	2200      	movs	r2, #0
 801d58e:	631a      	str	r2, [r3, #48]	; 0x30
 801d590:	69fb      	ldr	r3, [r7, #28]
 801d592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d594:	69fb      	ldr	r3, [r7, #28]
 801d596:	62da      	str	r2, [r3, #44]	; 0x2c
 801d598:	69fb      	ldr	r3, [r7, #28]
 801d59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d59c:	69fb      	ldr	r3, [r7, #28]
 801d59e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d5a0:	69fb      	ldr	r3, [r7, #28]
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	829a      	strh	r2, [r3, #20]
 801d5a6:	69fb      	ldr	r3, [r7, #28]
 801d5a8:	8a9a      	ldrh	r2, [r3, #20]
 801d5aa:	69fb      	ldr	r3, [r7, #28]
 801d5ac:	825a      	strh	r2, [r3, #18]
 801d5ae:	69fb      	ldr	r3, [r7, #28]
 801d5b0:	8a5a      	ldrh	r2, [r3, #18]
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	821a      	strh	r2, [r3, #16]
 801d5b6:	69fb      	ldr	r3, [r7, #28]
 801d5b8:	8a1a      	ldrh	r2, [r3, #16]
 801d5ba:	69fb      	ldr	r3, [r7, #28]
 801d5bc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801d5be:	6878      	ldr	r0, [r7, #4]
 801d5c0:	f000 fe2c 	bl	801e21c <dhcp_supplied_address>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d03b      	beq.n	801d642 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d5ca:	f107 030e 	add.w	r3, r7, #14
 801d5ce:	2207      	movs	r2, #7
 801d5d0:	69f9      	ldr	r1, [r7, #28]
 801d5d2:	6878      	ldr	r0, [r7, #4]
 801d5d4:	f000 fd1e 	bl	801e014 <dhcp_create_msg>
 801d5d8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801d5da:	69bb      	ldr	r3, [r7, #24]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d030      	beq.n	801d642 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d5e0:	69bb      	ldr	r3, [r7, #24]
 801d5e2:	685b      	ldr	r3, [r3, #4]
 801d5e4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d5e6:	89f8      	ldrh	r0, [r7, #14]
 801d5e8:	697b      	ldr	r3, [r7, #20]
 801d5ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d5ee:	2304      	movs	r3, #4
 801d5f0:	2236      	movs	r2, #54	; 0x36
 801d5f2:	f000 f85f 	bl	801d6b4 <dhcp_option>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d5fa:	89fc      	ldrh	r4, [r7, #14]
 801d5fc:	697b      	ldr	r3, [r7, #20]
 801d5fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d602:	693b      	ldr	r3, [r7, #16]
 801d604:	4618      	mov	r0, r3
 801d606:	f7f4 fe6e 	bl	80122e6 <lwip_htonl>
 801d60a:	4603      	mov	r3, r0
 801d60c:	461a      	mov	r2, r3
 801d60e:	4629      	mov	r1, r5
 801d610:	4620      	mov	r0, r4
 801d612:	f000 f8db 	bl	801d7cc <dhcp_option_long>
 801d616:	4603      	mov	r3, r0
 801d618:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d61a:	89f8      	ldrh	r0, [r7, #14]
 801d61c:	697b      	ldr	r3, [r7, #20]
 801d61e:	33f0      	adds	r3, #240	; 0xf0
 801d620:	69ba      	ldr	r2, [r7, #24]
 801d622:	4619      	mov	r1, r3
 801d624:	f000 fdcc 	bl	801e1c0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d628:	4b13      	ldr	r3, [pc, #76]	; (801d678 <dhcp_release_and_stop+0x12c>)
 801d62a:	6818      	ldr	r0, [r3, #0]
 801d62c:	f107 0210 	add.w	r2, r7, #16
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	9300      	str	r3, [sp, #0]
 801d634:	2343      	movs	r3, #67	; 0x43
 801d636:	69b9      	ldr	r1, [r7, #24]
 801d638:	f7fe fbf8 	bl	801be2c <udp_sendto_if>
      pbuf_free(p_out);
 801d63c:	69b8      	ldr	r0, [r7, #24]
 801d63e:	f7f7 f9fd 	bl	8014a3c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d642:	4b0e      	ldr	r3, [pc, #56]	; (801d67c <dhcp_release_and_stop+0x130>)
 801d644:	4a0d      	ldr	r2, [pc, #52]	; (801d67c <dhcp_release_and_stop+0x130>)
 801d646:	490d      	ldr	r1, [pc, #52]	; (801d67c <dhcp_release_and_stop+0x130>)
 801d648:	6878      	ldr	r0, [r7, #4]
 801d64a:	f7f6 fcb7 	bl	8013fbc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d64e:	2100      	movs	r1, #0
 801d650:	69f8      	ldr	r0, [r7, #28]
 801d652:	f000 f815 	bl	801d680 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801d656:	69fb      	ldr	r3, [r7, #28]
 801d658:	791b      	ldrb	r3, [r3, #4]
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d008      	beq.n	801d670 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d65e:	f7fe ff65 	bl	801c52c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d662:	69fb      	ldr	r3, [r7, #28]
 801d664:	2200      	movs	r2, #0
 801d666:	711a      	strb	r2, [r3, #4]
 801d668:	e002      	b.n	801d670 <dhcp_release_and_stop+0x124>
    return;
 801d66a:	bf00      	nop
 801d66c:	e000      	b.n	801d670 <dhcp_release_and_stop+0x124>
    return;
 801d66e:	bf00      	nop
  }
}
 801d670:	3720      	adds	r7, #32
 801d672:	46bd      	mov	sp, r7
 801d674:	bdb0      	pop	{r4, r5, r7, pc}
 801d676:	bf00      	nop
 801d678:	20014398 	.word	0x20014398
 801d67c:	080299c0 	.word	0x080299c0

0801d680 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d680:	b480      	push	{r7}
 801d682:	b083      	sub	sp, #12
 801d684:	af00      	add	r7, sp, #0
 801d686:	6078      	str	r0, [r7, #4]
 801d688:	460b      	mov	r3, r1
 801d68a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	795b      	ldrb	r3, [r3, #5]
 801d690:	78fa      	ldrb	r2, [r7, #3]
 801d692:	429a      	cmp	r2, r3
 801d694:	d008      	beq.n	801d6a8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	78fa      	ldrb	r2, [r7, #3]
 801d69a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	2200      	movs	r2, #0
 801d6a0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	2200      	movs	r2, #0
 801d6a6:	811a      	strh	r2, [r3, #8]
  }
}
 801d6a8:	bf00      	nop
 801d6aa:	370c      	adds	r7, #12
 801d6ac:	46bd      	mov	sp, r7
 801d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b2:	4770      	bx	lr

0801d6b4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801d6b4:	b580      	push	{r7, lr}
 801d6b6:	b082      	sub	sp, #8
 801d6b8:	af00      	add	r7, sp, #0
 801d6ba:	6039      	str	r1, [r7, #0]
 801d6bc:	4611      	mov	r1, r2
 801d6be:	461a      	mov	r2, r3
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	80fb      	strh	r3, [r7, #6]
 801d6c4:	460b      	mov	r3, r1
 801d6c6:	717b      	strb	r3, [r7, #5]
 801d6c8:	4613      	mov	r3, r2
 801d6ca:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d6cc:	88fa      	ldrh	r2, [r7, #6]
 801d6ce:	793b      	ldrb	r3, [r7, #4]
 801d6d0:	4413      	add	r3, r2
 801d6d2:	3302      	adds	r3, #2
 801d6d4:	2b44      	cmp	r3, #68	; 0x44
 801d6d6:	d906      	bls.n	801d6e6 <dhcp_option+0x32>
 801d6d8:	4b0d      	ldr	r3, [pc, #52]	; (801d710 <dhcp_option+0x5c>)
 801d6da:	f240 529a 	movw	r2, #1434	; 0x59a
 801d6de:	490d      	ldr	r1, [pc, #52]	; (801d714 <dhcp_option+0x60>)
 801d6e0:	480d      	ldr	r0, [pc, #52]	; (801d718 <dhcp_option+0x64>)
 801d6e2:	f004 fa67 	bl	8021bb4 <iprintf>
  options[options_out_len++] = option_type;
 801d6e6:	88fb      	ldrh	r3, [r7, #6]
 801d6e8:	1c5a      	adds	r2, r3, #1
 801d6ea:	80fa      	strh	r2, [r7, #6]
 801d6ec:	461a      	mov	r2, r3
 801d6ee:	683b      	ldr	r3, [r7, #0]
 801d6f0:	4413      	add	r3, r2
 801d6f2:	797a      	ldrb	r2, [r7, #5]
 801d6f4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801d6f6:	88fb      	ldrh	r3, [r7, #6]
 801d6f8:	1c5a      	adds	r2, r3, #1
 801d6fa:	80fa      	strh	r2, [r7, #6]
 801d6fc:	461a      	mov	r2, r3
 801d6fe:	683b      	ldr	r3, [r7, #0]
 801d700:	4413      	add	r3, r2
 801d702:	793a      	ldrb	r2, [r7, #4]
 801d704:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d706:	88fb      	ldrh	r3, [r7, #6]
}
 801d708:	4618      	mov	r0, r3
 801d70a:	3708      	adds	r7, #8
 801d70c:	46bd      	mov	sp, r7
 801d70e:	bd80      	pop	{r7, pc}
 801d710:	08028c3c 	.word	0x08028c3c
 801d714:	08028dd0 	.word	0x08028dd0
 801d718:	08028c9c 	.word	0x08028c9c

0801d71c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b082      	sub	sp, #8
 801d720:	af00      	add	r7, sp, #0
 801d722:	4603      	mov	r3, r0
 801d724:	6039      	str	r1, [r7, #0]
 801d726:	80fb      	strh	r3, [r7, #6]
 801d728:	4613      	mov	r3, r2
 801d72a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d72c:	88fb      	ldrh	r3, [r7, #6]
 801d72e:	2b43      	cmp	r3, #67	; 0x43
 801d730:	d906      	bls.n	801d740 <dhcp_option_byte+0x24>
 801d732:	4b0a      	ldr	r3, [pc, #40]	; (801d75c <dhcp_option_byte+0x40>)
 801d734:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d738:	4909      	ldr	r1, [pc, #36]	; (801d760 <dhcp_option_byte+0x44>)
 801d73a:	480a      	ldr	r0, [pc, #40]	; (801d764 <dhcp_option_byte+0x48>)
 801d73c:	f004 fa3a 	bl	8021bb4 <iprintf>
  options[options_out_len++] = value;
 801d740:	88fb      	ldrh	r3, [r7, #6]
 801d742:	1c5a      	adds	r2, r3, #1
 801d744:	80fa      	strh	r2, [r7, #6]
 801d746:	461a      	mov	r2, r3
 801d748:	683b      	ldr	r3, [r7, #0]
 801d74a:	4413      	add	r3, r2
 801d74c:	797a      	ldrb	r2, [r7, #5]
 801d74e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d750:	88fb      	ldrh	r3, [r7, #6]
}
 801d752:	4618      	mov	r0, r3
 801d754:	3708      	adds	r7, #8
 801d756:	46bd      	mov	sp, r7
 801d758:	bd80      	pop	{r7, pc}
 801d75a:	bf00      	nop
 801d75c:	08028c3c 	.word	0x08028c3c
 801d760:	08028e14 	.word	0x08028e14
 801d764:	08028c9c 	.word	0x08028c9c

0801d768 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d768:	b580      	push	{r7, lr}
 801d76a:	b082      	sub	sp, #8
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	4603      	mov	r3, r0
 801d770:	6039      	str	r1, [r7, #0]
 801d772:	80fb      	strh	r3, [r7, #6]
 801d774:	4613      	mov	r3, r2
 801d776:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d778:	88fb      	ldrh	r3, [r7, #6]
 801d77a:	3302      	adds	r3, #2
 801d77c:	2b44      	cmp	r3, #68	; 0x44
 801d77e:	d906      	bls.n	801d78e <dhcp_option_short+0x26>
 801d780:	4b0f      	ldr	r3, [pc, #60]	; (801d7c0 <dhcp_option_short+0x58>)
 801d782:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801d786:	490f      	ldr	r1, [pc, #60]	; (801d7c4 <dhcp_option_short+0x5c>)
 801d788:	480f      	ldr	r0, [pc, #60]	; (801d7c8 <dhcp_option_short+0x60>)
 801d78a:	f004 fa13 	bl	8021bb4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d78e:	88bb      	ldrh	r3, [r7, #4]
 801d790:	0a1b      	lsrs	r3, r3, #8
 801d792:	b29a      	uxth	r2, r3
 801d794:	88fb      	ldrh	r3, [r7, #6]
 801d796:	1c59      	adds	r1, r3, #1
 801d798:	80f9      	strh	r1, [r7, #6]
 801d79a:	4619      	mov	r1, r3
 801d79c:	683b      	ldr	r3, [r7, #0]
 801d79e:	440b      	add	r3, r1
 801d7a0:	b2d2      	uxtb	r2, r2
 801d7a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d7a4:	88fb      	ldrh	r3, [r7, #6]
 801d7a6:	1c5a      	adds	r2, r3, #1
 801d7a8:	80fa      	strh	r2, [r7, #6]
 801d7aa:	461a      	mov	r2, r3
 801d7ac:	683b      	ldr	r3, [r7, #0]
 801d7ae:	4413      	add	r3, r2
 801d7b0:	88ba      	ldrh	r2, [r7, #4]
 801d7b2:	b2d2      	uxtb	r2, r2
 801d7b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d7b6:	88fb      	ldrh	r3, [r7, #6]
}
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	3708      	adds	r7, #8
 801d7bc:	46bd      	mov	sp, r7
 801d7be:	bd80      	pop	{r7, pc}
 801d7c0:	08028c3c 	.word	0x08028c3c
 801d7c4:	08028e4c 	.word	0x08028e4c
 801d7c8:	08028c9c 	.word	0x08028c9c

0801d7cc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	b084      	sub	sp, #16
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	4603      	mov	r3, r0
 801d7d4:	60b9      	str	r1, [r7, #8]
 801d7d6:	607a      	str	r2, [r7, #4]
 801d7d8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d7da:	89fb      	ldrh	r3, [r7, #14]
 801d7dc:	3304      	adds	r3, #4
 801d7de:	2b44      	cmp	r3, #68	; 0x44
 801d7e0:	d906      	bls.n	801d7f0 <dhcp_option_long+0x24>
 801d7e2:	4b19      	ldr	r3, [pc, #100]	; (801d848 <dhcp_option_long+0x7c>)
 801d7e4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801d7e8:	4918      	ldr	r1, [pc, #96]	; (801d84c <dhcp_option_long+0x80>)
 801d7ea:	4819      	ldr	r0, [pc, #100]	; (801d850 <dhcp_option_long+0x84>)
 801d7ec:	f004 f9e2 	bl	8021bb4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	0e1a      	lsrs	r2, r3, #24
 801d7f4:	89fb      	ldrh	r3, [r7, #14]
 801d7f6:	1c59      	adds	r1, r3, #1
 801d7f8:	81f9      	strh	r1, [r7, #14]
 801d7fa:	4619      	mov	r1, r3
 801d7fc:	68bb      	ldr	r3, [r7, #8]
 801d7fe:	440b      	add	r3, r1
 801d800:	b2d2      	uxtb	r2, r2
 801d802:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	0c1a      	lsrs	r2, r3, #16
 801d808:	89fb      	ldrh	r3, [r7, #14]
 801d80a:	1c59      	adds	r1, r3, #1
 801d80c:	81f9      	strh	r1, [r7, #14]
 801d80e:	4619      	mov	r1, r3
 801d810:	68bb      	ldr	r3, [r7, #8]
 801d812:	440b      	add	r3, r1
 801d814:	b2d2      	uxtb	r2, r2
 801d816:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	0a1a      	lsrs	r2, r3, #8
 801d81c:	89fb      	ldrh	r3, [r7, #14]
 801d81e:	1c59      	adds	r1, r3, #1
 801d820:	81f9      	strh	r1, [r7, #14]
 801d822:	4619      	mov	r1, r3
 801d824:	68bb      	ldr	r3, [r7, #8]
 801d826:	440b      	add	r3, r1
 801d828:	b2d2      	uxtb	r2, r2
 801d82a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d82c:	89fb      	ldrh	r3, [r7, #14]
 801d82e:	1c5a      	adds	r2, r3, #1
 801d830:	81fa      	strh	r2, [r7, #14]
 801d832:	461a      	mov	r2, r3
 801d834:	68bb      	ldr	r3, [r7, #8]
 801d836:	4413      	add	r3, r2
 801d838:	687a      	ldr	r2, [r7, #4]
 801d83a:	b2d2      	uxtb	r2, r2
 801d83c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d83e:	89fb      	ldrh	r3, [r7, #14]
}
 801d840:	4618      	mov	r0, r3
 801d842:	3710      	adds	r7, #16
 801d844:	46bd      	mov	sp, r7
 801d846:	bd80      	pop	{r7, pc}
 801d848:	08028c3c 	.word	0x08028c3c
 801d84c:	08028e88 	.word	0x08028e88
 801d850:	08028c9c 	.word	0x08028c9c

0801d854 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801d854:	b580      	push	{r7, lr}
 801d856:	b092      	sub	sp, #72	; 0x48
 801d858:	af00      	add	r7, sp, #0
 801d85a:	6078      	str	r0, [r7, #4]
 801d85c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d85e:	2300      	movs	r3, #0
 801d860:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 801d862:	2300      	movs	r3, #0
 801d864:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d866:	220a      	movs	r2, #10
 801d868:	2100      	movs	r1, #0
 801d86a:	48bd      	ldr	r0, [pc, #756]	; (801db60 <dhcp_parse_reply+0x30c>)
 801d86c:	f003 fc86 	bl	802117c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	895b      	ldrh	r3, [r3, #10]
 801d874:	2b2b      	cmp	r3, #43	; 0x2b
 801d876:	d802      	bhi.n	801d87e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d878:	f06f 0301 	mvn.w	r3, #1
 801d87c:	e2fb      	b.n	801de76 <dhcp_parse_reply+0x622>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	685b      	ldr	r3, [r3, #4]
 801d882:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d884:	23f0      	movs	r3, #240	; 0xf0
 801d886:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	891b      	ldrh	r3, [r3, #8]
 801d88c:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801d892:	e00c      	b.n	801d8ae <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801d894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d896:	895b      	ldrh	r3, [r3, #10]
 801d898:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801d89a:	1ad3      	subs	r3, r2, r3
 801d89c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8a0:	895b      	ldrh	r3, [r3, #10]
 801d8a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d8a4:	1ad3      	subs	r3, r2, r3
 801d8a6:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801d8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801d8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d004      	beq.n	801d8be <dhcp_parse_reply+0x6a>
 801d8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8b6:	895b      	ldrh	r3, [r3, #10]
 801d8b8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801d8ba:	429a      	cmp	r2, r3
 801d8bc:	d2ea      	bcs.n	801d894 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801d8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d102      	bne.n	801d8ca <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801d8c4:	f06f 0301 	mvn.w	r3, #1
 801d8c8:	e2d5      	b.n	801de76 <dhcp_parse_reply+0x622>
  }
  offset = options_idx;
 801d8ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d8cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 801d8d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d8d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 801d8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8d6:	685b      	ldr	r3, [r3, #4]
 801d8d8:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d8da:	e275      	b.n	801ddc8 <dhcp_parse_reply+0x574>
    u8_t op = options[offset];
 801d8dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d8e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d8e2:	4413      	add	r3, r2
 801d8e4:	781b      	ldrb	r3, [r3, #0]
 801d8e6:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 801d8ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d8f2:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 801d8f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d8f8:	3302      	adds	r3, #2
 801d8fa:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 801d8fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d8fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d902:	429a      	cmp	r2, r3
 801d904:	d202      	bcs.n	801d90c <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801d906:	f06f 0301 	mvn.w	r3, #1
 801d90a:	e2b4      	b.n	801de76 <dhcp_parse_reply+0x622>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801d90c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d910:	3301      	adds	r3, #1
 801d912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d914:	8952      	ldrh	r2, [r2, #10]
 801d916:	4293      	cmp	r3, r2
 801d918:	da08      	bge.n	801d92c <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801d91a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d91e:	3301      	adds	r3, #1
 801d920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d922:	4413      	add	r3, r2
 801d924:	781b      	ldrb	r3, [r3, #0]
 801d926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801d92a:	e00b      	b.n	801d944 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801d92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	2b00      	cmp	r3, #0
 801d932:	d004      	beq.n	801d93e <dhcp_parse_reply+0xea>
 801d934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	685b      	ldr	r3, [r3, #4]
 801d93a:	781b      	ldrb	r3, [r3, #0]
 801d93c:	e000      	b.n	801d940 <dhcp_parse_reply+0xec>
 801d93e:	2300      	movs	r3, #0
 801d940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801d944:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801d948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 801d94c:	7efb      	ldrb	r3, [r7, #27]
 801d94e:	2b3b      	cmp	r3, #59	; 0x3b
 801d950:	f200 815a 	bhi.w	801dc08 <dhcp_parse_reply+0x3b4>
 801d954:	a201      	add	r2, pc, #4	; (adr r2, 801d95c <dhcp_parse_reply+0x108>)
 801d956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d95a:	bf00      	nop
 801d95c:	0801da4d 	.word	0x0801da4d
 801d960:	0801da5d 	.word	0x0801da5d
 801d964:	0801dc09 	.word	0x0801dc09
 801d968:	0801da7f 	.word	0x0801da7f
 801d96c:	0801dc09 	.word	0x0801dc09
 801d970:	0801dc09 	.word	0x0801dc09
 801d974:	0801daab 	.word	0x0801daab
 801d978:	0801dc09 	.word	0x0801dc09
 801d97c:	0801dc09 	.word	0x0801dc09
 801d980:	0801dc09 	.word	0x0801dc09
 801d984:	0801dc09 	.word	0x0801dc09
 801d988:	0801dc09 	.word	0x0801dc09
 801d98c:	0801dc09 	.word	0x0801dc09
 801d990:	0801dc09 	.word	0x0801dc09
 801d994:	0801dc09 	.word	0x0801dc09
 801d998:	0801dc09 	.word	0x0801dc09
 801d99c:	0801dc09 	.word	0x0801dc09
 801d9a0:	0801dc09 	.word	0x0801dc09
 801d9a4:	0801dc09 	.word	0x0801dc09
 801d9a8:	0801dc09 	.word	0x0801dc09
 801d9ac:	0801dc09 	.word	0x0801dc09
 801d9b0:	0801dc09 	.word	0x0801dc09
 801d9b4:	0801dc09 	.word	0x0801dc09
 801d9b8:	0801dc09 	.word	0x0801dc09
 801d9bc:	0801dc09 	.word	0x0801dc09
 801d9c0:	0801dc09 	.word	0x0801dc09
 801d9c4:	0801dc09 	.word	0x0801dc09
 801d9c8:	0801dc09 	.word	0x0801dc09
 801d9cc:	0801dc09 	.word	0x0801dc09
 801d9d0:	0801dc09 	.word	0x0801dc09
 801d9d4:	0801dc09 	.word	0x0801dc09
 801d9d8:	0801dc09 	.word	0x0801dc09
 801d9dc:	0801dc09 	.word	0x0801dc09
 801d9e0:	0801dc09 	.word	0x0801dc09
 801d9e4:	0801dc09 	.word	0x0801dc09
 801d9e8:	0801dc09 	.word	0x0801dc09
 801d9ec:	0801dc09 	.word	0x0801dc09
 801d9f0:	0801dc09 	.word	0x0801dc09
 801d9f4:	0801dc09 	.word	0x0801dc09
 801d9f8:	0801dc09 	.word	0x0801dc09
 801d9fc:	0801dc09 	.word	0x0801dc09
 801da00:	0801dc09 	.word	0x0801dc09
 801da04:	0801dc09 	.word	0x0801dc09
 801da08:	0801dc09 	.word	0x0801dc09
 801da0c:	0801dc09 	.word	0x0801dc09
 801da10:	0801dc09 	.word	0x0801dc09
 801da14:	0801dc09 	.word	0x0801dc09
 801da18:	0801dc09 	.word	0x0801dc09
 801da1c:	0801dc09 	.word	0x0801dc09
 801da20:	0801dc09 	.word	0x0801dc09
 801da24:	0801dc09 	.word	0x0801dc09
 801da28:	0801db01 	.word	0x0801db01
 801da2c:	0801db23 	.word	0x0801db23
 801da30:	0801db81 	.word	0x0801db81
 801da34:	0801dba3 	.word	0x0801dba3
 801da38:	0801dc09 	.word	0x0801dc09
 801da3c:	0801dc09 	.word	0x0801dc09
 801da40:	0801dc09 	.word	0x0801dc09
 801da44:	0801dbc5 	.word	0x0801dbc5
 801da48:	0801dbe7 	.word	0x0801dbe7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801da4c:	2300      	movs	r3, #0
 801da4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801da52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801da56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801da5a:	e0d9      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801da60:	2b04      	cmp	r3, #4
 801da62:	d009      	beq.n	801da78 <dhcp_parse_reply+0x224>
 801da64:	4b3f      	ldr	r3, [pc, #252]	; (801db64 <dhcp_parse_reply+0x310>)
 801da66:	f240 622e 	movw	r2, #1582	; 0x62e
 801da6a:	493f      	ldr	r1, [pc, #252]	; (801db68 <dhcp_parse_reply+0x314>)
 801da6c:	483f      	ldr	r0, [pc, #252]	; (801db6c <dhcp_parse_reply+0x318>)
 801da6e:	f004 f8a1 	bl	8021bb4 <iprintf>
 801da72:	f06f 0305 	mvn.w	r3, #5
 801da76:	e1fe      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801da78:	2306      	movs	r3, #6
 801da7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801da7c:	e0c8      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801da7e:	2304      	movs	r3, #4
 801da80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801da84:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801da88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801da8c:	429a      	cmp	r2, r3
 801da8e:	d209      	bcs.n	801daa4 <dhcp_parse_reply+0x250>
 801da90:	4b34      	ldr	r3, [pc, #208]	; (801db64 <dhcp_parse_reply+0x310>)
 801da92:	f240 6233 	movw	r2, #1587	; 0x633
 801da96:	4936      	ldr	r1, [pc, #216]	; (801db70 <dhcp_parse_reply+0x31c>)
 801da98:	4834      	ldr	r0, [pc, #208]	; (801db6c <dhcp_parse_reply+0x318>)
 801da9a:	f004 f88b 	bl	8021bb4 <iprintf>
 801da9e:	f06f 0305 	mvn.w	r3, #5
 801daa2:	e1e8      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801daa4:	2307      	movs	r3, #7
 801daa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801daa8:	e0b2      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801daaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801daae:	f003 0303 	and.w	r3, r3, #3
 801dab2:	b2db      	uxtb	r3, r3
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d009      	beq.n	801dacc <dhcp_parse_reply+0x278>
 801dab8:	4b2a      	ldr	r3, [pc, #168]	; (801db64 <dhcp_parse_reply+0x310>)
 801daba:	f240 6239 	movw	r2, #1593	; 0x639
 801dabe:	492d      	ldr	r1, [pc, #180]	; (801db74 <dhcp_parse_reply+0x320>)
 801dac0:	482a      	ldr	r0, [pc, #168]	; (801db6c <dhcp_parse_reply+0x318>)
 801dac2:	f004 f877 	bl	8021bb4 <iprintf>
 801dac6:	f06f 0305 	mvn.w	r3, #5
 801daca:	e1d4      	b.n	801de76 <dhcp_parse_reply+0x622>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801dacc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dad0:	2b08      	cmp	r3, #8
 801dad2:	bf28      	it	cs
 801dad4:	2308      	movcs	r3, #8
 801dad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801dada:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801dade:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dae2:	429a      	cmp	r2, r3
 801dae4:	d209      	bcs.n	801dafa <dhcp_parse_reply+0x2a6>
 801dae6:	4b1f      	ldr	r3, [pc, #124]	; (801db64 <dhcp_parse_reply+0x310>)
 801dae8:	f240 623c 	movw	r2, #1596	; 0x63c
 801daec:	4920      	ldr	r1, [pc, #128]	; (801db70 <dhcp_parse_reply+0x31c>)
 801daee:	481f      	ldr	r0, [pc, #124]	; (801db6c <dhcp_parse_reply+0x318>)
 801daf0:	f004 f860 	bl	8021bb4 <iprintf>
 801daf4:	f06f 0305 	mvn.w	r3, #5
 801daf8:	e1bd      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801dafa:	2308      	movs	r3, #8
 801dafc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dafe:	e087      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801db00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801db04:	2b04      	cmp	r3, #4
 801db06:	d009      	beq.n	801db1c <dhcp_parse_reply+0x2c8>
 801db08:	4b16      	ldr	r3, [pc, #88]	; (801db64 <dhcp_parse_reply+0x310>)
 801db0a:	f240 6241 	movw	r2, #1601	; 0x641
 801db0e:	4916      	ldr	r1, [pc, #88]	; (801db68 <dhcp_parse_reply+0x314>)
 801db10:	4816      	ldr	r0, [pc, #88]	; (801db6c <dhcp_parse_reply+0x318>)
 801db12:	f004 f84f 	bl	8021bb4 <iprintf>
 801db16:	f06f 0305 	mvn.w	r3, #5
 801db1a:	e1ac      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801db1c:	2303      	movs	r3, #3
 801db1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801db20:	e076      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801db22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801db26:	2b01      	cmp	r3, #1
 801db28:	d009      	beq.n	801db3e <dhcp_parse_reply+0x2ea>
 801db2a:	4b0e      	ldr	r3, [pc, #56]	; (801db64 <dhcp_parse_reply+0x310>)
 801db2c:	f240 624f 	movw	r2, #1615	; 0x64f
 801db30:	4911      	ldr	r1, [pc, #68]	; (801db78 <dhcp_parse_reply+0x324>)
 801db32:	480e      	ldr	r0, [pc, #56]	; (801db6c <dhcp_parse_reply+0x318>)
 801db34:	f004 f83e 	bl	8021bb4 <iprintf>
 801db38:	f06f 0305 	mvn.w	r3, #5
 801db3c:	e19b      	b.n	801de76 <dhcp_parse_reply+0x622>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801db3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801db40:	2bf0      	cmp	r3, #240	; 0xf0
 801db42:	d009      	beq.n	801db58 <dhcp_parse_reply+0x304>
 801db44:	4b07      	ldr	r3, [pc, #28]	; (801db64 <dhcp_parse_reply+0x310>)
 801db46:	f240 6251 	movw	r2, #1617	; 0x651
 801db4a:	490c      	ldr	r1, [pc, #48]	; (801db7c <dhcp_parse_reply+0x328>)
 801db4c:	4807      	ldr	r0, [pc, #28]	; (801db6c <dhcp_parse_reply+0x318>)
 801db4e:	f004 f831 	bl	8021bb4 <iprintf>
 801db52:	f06f 0305 	mvn.w	r3, #5
 801db56:	e18e      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801db58:	2300      	movs	r3, #0
 801db5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801db5c:	e058      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
 801db5e:	bf00      	nop
 801db60:	2001b1a4 	.word	0x2001b1a4
 801db64:	08028c3c 	.word	0x08028c3c
 801db68:	08028ec4 	.word	0x08028ec4
 801db6c:	08028c9c 	.word	0x08028c9c
 801db70:	08028ed0 	.word	0x08028ed0
 801db74:	08028ee4 	.word	0x08028ee4
 801db78:	08028ef4 	.word	0x08028ef4
 801db7c:	08028f00 	.word	0x08028f00
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801db80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801db84:	2b01      	cmp	r3, #1
 801db86:	d009      	beq.n	801db9c <dhcp_parse_reply+0x348>
 801db88:	4bab      	ldr	r3, [pc, #684]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801db8a:	f240 6255 	movw	r2, #1621	; 0x655
 801db8e:	49ab      	ldr	r1, [pc, #684]	; (801de3c <dhcp_parse_reply+0x5e8>)
 801db90:	48ab      	ldr	r0, [pc, #684]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801db92:	f004 f80f 	bl	8021bb4 <iprintf>
 801db96:	f06f 0305 	mvn.w	r3, #5
 801db9a:	e16c      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801db9c:	2301      	movs	r3, #1
 801db9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dba0:	e036      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dba6:	2b04      	cmp	r3, #4
 801dba8:	d009      	beq.n	801dbbe <dhcp_parse_reply+0x36a>
 801dbaa:	4ba3      	ldr	r3, [pc, #652]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dbac:	f240 6259 	movw	r2, #1625	; 0x659
 801dbb0:	49a4      	ldr	r1, [pc, #656]	; (801de44 <dhcp_parse_reply+0x5f0>)
 801dbb2:	48a3      	ldr	r0, [pc, #652]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801dbb4:	f003 fffe 	bl	8021bb4 <iprintf>
 801dbb8:	f06f 0305 	mvn.w	r3, #5
 801dbbc:	e15b      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801dbbe:	2302      	movs	r3, #2
 801dbc0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dbc2:	e025      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dbc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dbc8:	2b04      	cmp	r3, #4
 801dbca:	d009      	beq.n	801dbe0 <dhcp_parse_reply+0x38c>
 801dbcc:	4b9a      	ldr	r3, [pc, #616]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dbce:	f240 625d 	movw	r2, #1629	; 0x65d
 801dbd2:	499c      	ldr	r1, [pc, #624]	; (801de44 <dhcp_parse_reply+0x5f0>)
 801dbd4:	489a      	ldr	r0, [pc, #616]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801dbd6:	f003 ffed 	bl	8021bb4 <iprintf>
 801dbda:	f06f 0305 	mvn.w	r3, #5
 801dbde:	e14a      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T1;
 801dbe0:	2304      	movs	r3, #4
 801dbe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dbe4:	e014      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dbe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dbea:	2b04      	cmp	r3, #4
 801dbec:	d009      	beq.n	801dc02 <dhcp_parse_reply+0x3ae>
 801dbee:	4b92      	ldr	r3, [pc, #584]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dbf0:	f240 6261 	movw	r2, #1633	; 0x661
 801dbf4:	4993      	ldr	r1, [pc, #588]	; (801de44 <dhcp_parse_reply+0x5f0>)
 801dbf6:	4892      	ldr	r0, [pc, #584]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801dbf8:	f003 ffdc 	bl	8021bb4 <iprintf>
 801dbfc:	f06f 0305 	mvn.w	r3, #5
 801dc00:	e139      	b.n	801de76 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T2;
 801dc02:	2305      	movs	r3, #5
 801dc04:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801dc06:	e003      	b.n	801dc10 <dhcp_parse_reply+0x3bc>
      default:
        decode_len = 0;
 801dc08:	2300      	movs	r3, #0
 801dc0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801dc0e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801dc10:	7efb      	ldrb	r3, [r7, #27]
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d105      	bne.n	801dc22 <dhcp_parse_reply+0x3ce>
      offset++;
 801dc16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dc1a:	3301      	adds	r3, #1
 801dc1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801dc20:	e0a4      	b.n	801dd6c <dhcp_parse_reply+0x518>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801dc22:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dc26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dc2a:	4413      	add	r3, r2
 801dc2c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801dc30:	4293      	cmp	r3, r2
 801dc32:	dd02      	ble.n	801dc3a <dhcp_parse_reply+0x3e6>
        /* overflow */
        return ERR_BUF;
 801dc34:	f06f 0301 	mvn.w	r3, #1
 801dc38:	e11d      	b.n	801de76 <dhcp_parse_reply+0x622>
      }
      offset = (u16_t)(offset + len + 2);
 801dc3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801dc3e:	b29a      	uxth	r2, r3
 801dc40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dc44:	4413      	add	r3, r2
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	3302      	adds	r3, #2
 801dc4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 801dc4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	f000 808a 	beq.w	801dd6c <dhcp_parse_reply+0x518>
        u32_t value = 0;
 801dc58:	2300      	movs	r3, #0
 801dc5a:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	db02      	blt.n	801dc68 <dhcp_parse_reply+0x414>
 801dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc64:	2b09      	cmp	r3, #9
 801dc66:	dd06      	ble.n	801dc76 <dhcp_parse_reply+0x422>
 801dc68:	4b73      	ldr	r3, [pc, #460]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dc6a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801dc6e:	4976      	ldr	r1, [pc, #472]	; (801de48 <dhcp_parse_reply+0x5f4>)
 801dc70:	4873      	ldr	r0, [pc, #460]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801dc72:	f003 ff9f 	bl	8021bb4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801dc76:	4a75      	ldr	r2, [pc, #468]	; (801de4c <dhcp_parse_reply+0x5f8>)
 801dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc7a:	4413      	add	r3, r2
 801dc7c:	781b      	ldrb	r3, [r3, #0]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d174      	bne.n	801dd6c <dhcp_parse_reply+0x518>
          copy_len = LWIP_MIN(decode_len, 4);
 801dc82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dc86:	2b04      	cmp	r3, #4
 801dc88:	bf28      	it	cs
 801dc8a:	2304      	movcs	r3, #4
 801dc8c:	b2db      	uxtb	r3, r3
 801dc8e:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801dc90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dc92:	8b3a      	ldrh	r2, [r7, #24]
 801dc94:	f107 010c 	add.w	r1, r7, #12
 801dc98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801dc9a:	f7f7 f8d5 	bl	8014e48 <pbuf_copy_partial>
 801dc9e:	4603      	mov	r3, r0
 801dca0:	461a      	mov	r2, r3
 801dca2:	8b3b      	ldrh	r3, [r7, #24]
 801dca4:	4293      	cmp	r3, r2
 801dca6:	d002      	beq.n	801dcae <dhcp_parse_reply+0x45a>
            return ERR_BUF;
 801dca8:	f06f 0301 	mvn.w	r3, #1
 801dcac:	e0e3      	b.n	801de76 <dhcp_parse_reply+0x622>
          }
          if (decode_len > 4) {
 801dcae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dcb2:	2b04      	cmp	r3, #4
 801dcb4:	d933      	bls.n	801dd1e <dhcp_parse_reply+0x4ca>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801dcb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dcba:	f003 0303 	and.w	r3, r3, #3
 801dcbe:	b2db      	uxtb	r3, r3
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d009      	beq.n	801dcd8 <dhcp_parse_reply+0x484>
 801dcc4:	4b5c      	ldr	r3, [pc, #368]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dcc6:	f240 6281 	movw	r2, #1665	; 0x681
 801dcca:	4961      	ldr	r1, [pc, #388]	; (801de50 <dhcp_parse_reply+0x5fc>)
 801dccc:	485c      	ldr	r0, [pc, #368]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801dcce:	f003 ff71 	bl	8021bb4 <iprintf>
 801dcd2:	f06f 0305 	mvn.w	r3, #5
 801dcd6:	e0ce      	b.n	801de76 <dhcp_parse_reply+0x622>
            dhcp_got_option(dhcp, decode_idx);
 801dcd8:	4a5c      	ldr	r2, [pc, #368]	; (801de4c <dhcp_parse_reply+0x5f8>)
 801dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcdc:	4413      	add	r3, r2
 801dcde:	2201      	movs	r2, #1
 801dce0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	4618      	mov	r0, r3
 801dce6:	f7f4 fafe 	bl	80122e6 <lwip_htonl>
 801dcea:	4602      	mov	r2, r0
 801dcec:	4959      	ldr	r1, [pc, #356]	; (801de54 <dhcp_parse_reply+0x600>)
 801dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801dcf4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dcf8:	3b04      	subs	r3, #4
 801dcfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 801dcfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dd00:	3304      	adds	r3, #4
 801dd02:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801dd04:	8afa      	ldrh	r2, [r7, #22]
 801dd06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dd08:	429a      	cmp	r2, r3
 801dd0a:	d202      	bcs.n	801dd12 <dhcp_parse_reply+0x4be>
              /* overflow */
              return ERR_BUF;
 801dd0c:	f06f 0301 	mvn.w	r3, #1
 801dd10:	e0b1      	b.n	801de76 <dhcp_parse_reply+0x622>
            }
            val_offset = next_val_offset;
 801dd12:	8afb      	ldrh	r3, [r7, #22]
 801dd14:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd18:	3301      	adds	r3, #1
 801dd1a:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 801dd1c:	e79e      	b.n	801dc5c <dhcp_parse_reply+0x408>
          } else if (decode_len == 4) {
 801dd1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dd22:	2b04      	cmp	r3, #4
 801dd24:	d106      	bne.n	801dd34 <dhcp_parse_reply+0x4e0>
            value = lwip_ntohl(value);
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f7f4 fadc 	bl	80122e6 <lwip_htonl>
 801dd2e:	4603      	mov	r3, r0
 801dd30:	60fb      	str	r3, [r7, #12]
 801dd32:	e011      	b.n	801dd58 <dhcp_parse_reply+0x504>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801dd34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801dd38:	2b01      	cmp	r3, #1
 801dd3a:	d009      	beq.n	801dd50 <dhcp_parse_reply+0x4fc>
 801dd3c:	4b3e      	ldr	r3, [pc, #248]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dd3e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801dd42:	4945      	ldr	r1, [pc, #276]	; (801de58 <dhcp_parse_reply+0x604>)
 801dd44:	483e      	ldr	r0, [pc, #248]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801dd46:	f003 ff35 	bl	8021bb4 <iprintf>
 801dd4a:	f06f 0305 	mvn.w	r3, #5
 801dd4e:	e092      	b.n	801de76 <dhcp_parse_reply+0x622>
            value = ((u8_t *)&value)[0];
 801dd50:	f107 030c 	add.w	r3, r7, #12
 801dd54:	781b      	ldrb	r3, [r3, #0]
 801dd56:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 801dd58:	4a3c      	ldr	r2, [pc, #240]	; (801de4c <dhcp_parse_reply+0x5f8>)
 801dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd5c:	4413      	add	r3, r2
 801dd5e:	2201      	movs	r2, #1
 801dd60:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801dd62:	68fa      	ldr	r2, [r7, #12]
 801dd64:	493b      	ldr	r1, [pc, #236]	; (801de54 <dhcp_parse_reply+0x600>)
 801dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801dd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd6e:	895b      	ldrh	r3, [r3, #10]
 801dd70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dd74:	429a      	cmp	r2, r3
 801dd76:	d327      	bcc.n	801ddc8 <dhcp_parse_reply+0x574>
      offset = (u16_t)(offset - q->len);
 801dd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd7a:	895b      	ldrh	r3, [r3, #10]
 801dd7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dd80:	1ad3      	subs	r3, r2, r3
 801dd82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801dd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd88:	895b      	ldrh	r3, [r3, #10]
 801dd8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dd8c:	1ad3      	subs	r3, r2, r3
 801dd8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 801dd90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dd94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd96:	429a      	cmp	r2, r3
 801dd98:	d213      	bcs.n	801ddc2 <dhcp_parse_reply+0x56e>
        q = q->next;
 801dd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801dda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d109      	bne.n	801ddba <dhcp_parse_reply+0x566>
 801dda6:	4b24      	ldr	r3, [pc, #144]	; (801de38 <dhcp_parse_reply+0x5e4>)
 801dda8:	f240 629d 	movw	r2, #1693	; 0x69d
 801ddac:	492b      	ldr	r1, [pc, #172]	; (801de5c <dhcp_parse_reply+0x608>)
 801ddae:	4824      	ldr	r0, [pc, #144]	; (801de40 <dhcp_parse_reply+0x5ec>)
 801ddb0:	f003 ff00 	bl	8021bb4 <iprintf>
 801ddb4:	f06f 0305 	mvn.w	r3, #5
 801ddb8:	e05d      	b.n	801de76 <dhcp_parse_reply+0x622>
        options = (u8_t *)q->payload;
 801ddba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddbc:	685b      	ldr	r3, [r3, #4]
 801ddbe:	643b      	str	r3, [r7, #64]	; 0x40
 801ddc0:	e002      	b.n	801ddc8 <dhcp_parse_reply+0x574>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801ddc2:	f06f 0301 	mvn.w	r3, #1
 801ddc6:	e056      	b.n	801de76 <dhcp_parse_reply+0x622>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d00c      	beq.n	801dde8 <dhcp_parse_reply+0x594>
 801ddce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ddd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ddd4:	429a      	cmp	r2, r3
 801ddd6:	d207      	bcs.n	801dde8 <dhcp_parse_reply+0x594>
 801ddd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ddde:	4413      	add	r3, r2
 801dde0:	781b      	ldrb	r3, [r3, #0]
 801dde2:	2bff      	cmp	r3, #255	; 0xff
 801dde4:	f47f ad7a 	bne.w	801d8dc <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801dde8:	4b18      	ldr	r3, [pc, #96]	; (801de4c <dhcp_parse_reply+0x5f8>)
 801ddea:	781b      	ldrb	r3, [r3, #0]
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d018      	beq.n	801de22 <dhcp_parse_reply+0x5ce>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ddf0:	4b18      	ldr	r3, [pc, #96]	; (801de54 <dhcp_parse_reply+0x600>)
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ddf6:	4b15      	ldr	r3, [pc, #84]	; (801de4c <dhcp_parse_reply+0x5f8>)
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801ddfc:	693b      	ldr	r3, [r7, #16]
 801ddfe:	2b01      	cmp	r3, #1
 801de00:	d102      	bne.n	801de08 <dhcp_parse_reply+0x5b4>
      parse_file_as_options = 1;
 801de02:	2301      	movs	r3, #1
 801de04:	633b      	str	r3, [r7, #48]	; 0x30
 801de06:	e00c      	b.n	801de22 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801de08:	693b      	ldr	r3, [r7, #16]
 801de0a:	2b02      	cmp	r3, #2
 801de0c:	d102      	bne.n	801de14 <dhcp_parse_reply+0x5c0>
      parse_sname_as_options = 1;
 801de0e:	2301      	movs	r3, #1
 801de10:	62fb      	str	r3, [r7, #44]	; 0x2c
 801de12:	e006      	b.n	801de22 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801de14:	693b      	ldr	r3, [r7, #16]
 801de16:	2b03      	cmp	r3, #3
 801de18:	d103      	bne.n	801de22 <dhcp_parse_reply+0x5ce>
      parse_sname_as_options = 1;
 801de1a:	2301      	movs	r3, #1
 801de1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 801de1e:	2301      	movs	r3, #1
 801de20:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de24:	2b00      	cmp	r3, #0
 801de26:	d01b      	beq.n	801de60 <dhcp_parse_reply+0x60c>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801de28:	2300      	movs	r3, #0
 801de2a:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 801de2c:	236c      	movs	r3, #108	; 0x6c
 801de2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801de30:	23ec      	movs	r3, #236	; 0xec
 801de32:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801de34:	e52b      	b.n	801d88e <dhcp_parse_reply+0x3a>
 801de36:	bf00      	nop
 801de38:	08028c3c 	.word	0x08028c3c
 801de3c:	08028ef4 	.word	0x08028ef4
 801de40:	08028c9c 	.word	0x08028c9c
 801de44:	08028ec4 	.word	0x08028ec4
 801de48:	08028f18 	.word	0x08028f18
 801de4c:	2001b1a4 	.word	0x2001b1a4
 801de50:	08028f2c 	.word	0x08028f2c
 801de54:	2001b1b0 	.word	0x2001b1b0
 801de58:	08028f44 	.word	0x08028f44
 801de5c:	08028f58 	.word	0x08028f58
  } else if (parse_sname_as_options) {
 801de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de62:	2b00      	cmp	r3, #0
 801de64:	d006      	beq.n	801de74 <dhcp_parse_reply+0x620>
    parse_sname_as_options = 0;
 801de66:	2300      	movs	r3, #0
 801de68:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 801de6a:	232c      	movs	r3, #44	; 0x2c
 801de6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801de6e:	236c      	movs	r3, #108	; 0x6c
 801de70:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 801de72:	e50c      	b.n	801d88e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801de74:	2300      	movs	r3, #0
}
 801de76:	4618      	mov	r0, r3
 801de78:	3748      	adds	r7, #72	; 0x48
 801de7a:	46bd      	mov	sp, r7
 801de7c:	bd80      	pop	{r7, pc}
 801de7e:	bf00      	nop

0801de80 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b08a      	sub	sp, #40	; 0x28
 801de84:	af00      	add	r7, sp, #0
 801de86:	60f8      	str	r0, [r7, #12]
 801de88:	60b9      	str	r1, [r7, #8]
 801de8a:	607a      	str	r2, [r7, #4]
 801de8c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801de8e:	4b5e      	ldr	r3, [pc, #376]	; (801e008 <dhcp_recv+0x188>)
 801de90:	685b      	ldr	r3, [r3, #4]
 801de92:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801de94:	69fb      	ldr	r3, [r7, #28]
 801de96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de98:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	685b      	ldr	r3, [r3, #4]
 801de9e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801dea0:	69bb      	ldr	r3, [r7, #24]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	f000 809a 	beq.w	801dfdc <dhcp_recv+0x15c>
 801dea8:	69bb      	ldr	r3, [r7, #24]
 801deaa:	791b      	ldrb	r3, [r3, #4]
 801deac:	2b00      	cmp	r3, #0
 801deae:	f000 8095 	beq.w	801dfdc <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	895b      	ldrh	r3, [r3, #10]
 801deb6:	2b2b      	cmp	r3, #43	; 0x2b
 801deb8:	f240 8092 	bls.w	801dfe0 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801debc:	697b      	ldr	r3, [r7, #20]
 801debe:	781b      	ldrb	r3, [r3, #0]
 801dec0:	2b02      	cmp	r3, #2
 801dec2:	f040 808f 	bne.w	801dfe4 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dec6:	2300      	movs	r3, #0
 801dec8:	74fb      	strb	r3, [r7, #19]
 801deca:	e00e      	b.n	801deea <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801decc:	7cfb      	ldrb	r3, [r7, #19]
 801dece:	69fa      	ldr	r2, [r7, #28]
 801ded0:	4413      	add	r3, r2
 801ded2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801ded6:	7cfb      	ldrb	r3, [r7, #19]
 801ded8:	6979      	ldr	r1, [r7, #20]
 801deda:	440b      	add	r3, r1
 801dedc:	7f1b      	ldrb	r3, [r3, #28]
 801dede:	429a      	cmp	r2, r3
 801dee0:	f040 8082 	bne.w	801dfe8 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dee4:	7cfb      	ldrb	r3, [r7, #19]
 801dee6:	3301      	adds	r3, #1
 801dee8:	74fb      	strb	r3, [r7, #19]
 801deea:	69fb      	ldr	r3, [r7, #28]
 801deec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801def0:	7cfa      	ldrb	r2, [r7, #19]
 801def2:	429a      	cmp	r2, r3
 801def4:	d202      	bcs.n	801defc <dhcp_recv+0x7c>
 801def6:	7cfb      	ldrb	r3, [r7, #19]
 801def8:	2b05      	cmp	r3, #5
 801defa:	d9e7      	bls.n	801decc <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801defc:	697b      	ldr	r3, [r7, #20]
 801defe:	685b      	ldr	r3, [r3, #4]
 801df00:	4618      	mov	r0, r3
 801df02:	f7f4 f9f0 	bl	80122e6 <lwip_htonl>
 801df06:	4602      	mov	r2, r0
 801df08:	69bb      	ldr	r3, [r7, #24]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	429a      	cmp	r2, r3
 801df0e:	d16d      	bne.n	801dfec <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801df10:	69b9      	ldr	r1, [r7, #24]
 801df12:	6878      	ldr	r0, [r7, #4]
 801df14:	f7ff fc9e 	bl	801d854 <dhcp_parse_reply>
 801df18:	4603      	mov	r3, r0
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d168      	bne.n	801dff0 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801df1e:	4b3b      	ldr	r3, [pc, #236]	; (801e00c <dhcp_recv+0x18c>)
 801df20:	785b      	ldrb	r3, [r3, #1]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d066      	beq.n	801dff4 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	685b      	ldr	r3, [r3, #4]
 801df2a:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801df2c:	4b38      	ldr	r3, [pc, #224]	; (801e010 <dhcp_recv+0x190>)
 801df2e:	685b      	ldr	r3, [r3, #4]
 801df30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801df34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801df38:	2b05      	cmp	r3, #5
 801df3a:	d12a      	bne.n	801df92 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801df3c:	69bb      	ldr	r3, [r7, #24]
 801df3e:	795b      	ldrb	r3, [r3, #5]
 801df40:	2b01      	cmp	r3, #1
 801df42:	d112      	bne.n	801df6a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 801df44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801df46:	69f8      	ldr	r0, [r7, #28]
 801df48:	f7fe fdba 	bl	801cac0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801df4c:	69fb      	ldr	r3, [r7, #28]
 801df4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df52:	f003 0308 	and.w	r3, r3, #8
 801df56:	2b00      	cmp	r3, #0
 801df58:	d003      	beq.n	801df62 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801df5a:	69f8      	ldr	r0, [r7, #28]
 801df5c:	f7fe fb2a 	bl	801c5b4 <dhcp_check>
 801df60:	e04b      	b.n	801dffa <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801df62:	69f8      	ldr	r0, [r7, #28]
 801df64:	f7ff f82a 	bl	801cfbc <dhcp_bind>
 801df68:	e047      	b.n	801dffa <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801df6a:	69bb      	ldr	r3, [r7, #24]
 801df6c:	795b      	ldrb	r3, [r3, #5]
 801df6e:	2b03      	cmp	r3, #3
 801df70:	d007      	beq.n	801df82 <dhcp_recv+0x102>
 801df72:	69bb      	ldr	r3, [r7, #24]
 801df74:	795b      	ldrb	r3, [r3, #5]
 801df76:	2b04      	cmp	r3, #4
 801df78:	d003      	beq.n	801df82 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801df7a:	69bb      	ldr	r3, [r7, #24]
 801df7c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801df7e:	2b05      	cmp	r3, #5
 801df80:	d13b      	bne.n	801dffa <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 801df82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801df84:	69f8      	ldr	r0, [r7, #28]
 801df86:	f7fe fd9b 	bl	801cac0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801df8a:	69f8      	ldr	r0, [r7, #28]
 801df8c:	f7ff f816 	bl	801cfbc <dhcp_bind>
 801df90:	e033      	b.n	801dffa <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801df92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801df96:	2b06      	cmp	r3, #6
 801df98:	d113      	bne.n	801dfc2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801df9a:	69bb      	ldr	r3, [r7, #24]
 801df9c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801df9e:	2b03      	cmp	r3, #3
 801dfa0:	d00b      	beq.n	801dfba <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801dfa2:	69bb      	ldr	r3, [r7, #24]
 801dfa4:	795b      	ldrb	r3, [r3, #5]
 801dfa6:	2b01      	cmp	r3, #1
 801dfa8:	d007      	beq.n	801dfba <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801dfaa:	69bb      	ldr	r3, [r7, #24]
 801dfac:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801dfae:	2b04      	cmp	r3, #4
 801dfb0:	d003      	beq.n	801dfba <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801dfb2:	69bb      	ldr	r3, [r7, #24]
 801dfb4:	795b      	ldrb	r3, [r3, #5]
 801dfb6:	2b05      	cmp	r3, #5
 801dfb8:	d103      	bne.n	801dfc2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801dfba:	69f8      	ldr	r0, [r7, #28]
 801dfbc:	f7fe fae0 	bl	801c580 <dhcp_handle_nak>
 801dfc0:	e01b      	b.n	801dffa <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801dfc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dfc6:	2b02      	cmp	r3, #2
 801dfc8:	d116      	bne.n	801dff8 <dhcp_recv+0x178>
 801dfca:	69bb      	ldr	r3, [r7, #24]
 801dfcc:	795b      	ldrb	r3, [r3, #5]
 801dfce:	2b06      	cmp	r3, #6
 801dfd0:	d112      	bne.n	801dff8 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801dfd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dfd4:	69f8      	ldr	r0, [r7, #28]
 801dfd6:	f7fe fb21 	bl	801c61c <dhcp_handle_offer>
 801dfda:	e00e      	b.n	801dffa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801dfdc:	bf00      	nop
 801dfde:	e00c      	b.n	801dffa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801dfe0:	bf00      	nop
 801dfe2:	e00a      	b.n	801dffa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801dfe4:	bf00      	nop
 801dfe6:	e008      	b.n	801dffa <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 801dfe8:	bf00      	nop
 801dfea:	e006      	b.n	801dffa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801dfec:	bf00      	nop
 801dfee:	e004      	b.n	801dffa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801dff0:	bf00      	nop
 801dff2:	e002      	b.n	801dffa <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801dff4:	bf00      	nop
 801dff6:	e000      	b.n	801dffa <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 801dff8:	bf00      	nop
  pbuf_free(p);
 801dffa:	6878      	ldr	r0, [r7, #4]
 801dffc:	f7f6 fd1e 	bl	8014a3c <pbuf_free>
}
 801e000:	bf00      	nop
 801e002:	3728      	adds	r7, #40	; 0x28
 801e004:	46bd      	mov	sp, r7
 801e006:	bd80      	pop	{r7, pc}
 801e008:	20017794 	.word	0x20017794
 801e00c:	2001b1a4 	.word	0x2001b1a4
 801e010:	2001b1b0 	.word	0x2001b1b0

0801e014 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801e014:	b580      	push	{r7, lr}
 801e016:	b088      	sub	sp, #32
 801e018:	af00      	add	r7, sp, #0
 801e01a:	60f8      	str	r0, [r7, #12]
 801e01c:	60b9      	str	r1, [r7, #8]
 801e01e:	603b      	str	r3, [r7, #0]
 801e020:	4613      	mov	r3, r2
 801e022:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d108      	bne.n	801e03c <dhcp_create_msg+0x28>
 801e02a:	4b5f      	ldr	r3, [pc, #380]	; (801e1a8 <dhcp_create_msg+0x194>)
 801e02c:	f240 7269 	movw	r2, #1897	; 0x769
 801e030:	495e      	ldr	r1, [pc, #376]	; (801e1ac <dhcp_create_msg+0x198>)
 801e032:	485f      	ldr	r0, [pc, #380]	; (801e1b0 <dhcp_create_msg+0x19c>)
 801e034:	f003 fdbe 	bl	8021bb4 <iprintf>
 801e038:	2300      	movs	r3, #0
 801e03a:	e0b1      	b.n	801e1a0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801e03c:	68bb      	ldr	r3, [r7, #8]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d108      	bne.n	801e054 <dhcp_create_msg+0x40>
 801e042:	4b59      	ldr	r3, [pc, #356]	; (801e1a8 <dhcp_create_msg+0x194>)
 801e044:	f240 726a 	movw	r2, #1898	; 0x76a
 801e048:	495a      	ldr	r1, [pc, #360]	; (801e1b4 <dhcp_create_msg+0x1a0>)
 801e04a:	4859      	ldr	r0, [pc, #356]	; (801e1b0 <dhcp_create_msg+0x19c>)
 801e04c:	f003 fdb2 	bl	8021bb4 <iprintf>
 801e050:	2300      	movs	r3, #0
 801e052:	e0a5      	b.n	801e1a0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801e054:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e058:	f44f 719a 	mov.w	r1, #308	; 0x134
 801e05c:	2036      	movs	r0, #54	; 0x36
 801e05e:	f7f6 f9d7 	bl	8014410 <pbuf_alloc>
 801e062:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801e064:	69bb      	ldr	r3, [r7, #24]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d101      	bne.n	801e06e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801e06a:	2300      	movs	r3, #0
 801e06c:	e098      	b.n	801e1a0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e06e:	69bb      	ldr	r3, [r7, #24]
 801e070:	895b      	ldrh	r3, [r3, #10]
 801e072:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801e076:	d206      	bcs.n	801e086 <dhcp_create_msg+0x72>
 801e078:	4b4b      	ldr	r3, [pc, #300]	; (801e1a8 <dhcp_create_msg+0x194>)
 801e07a:	f240 7271 	movw	r2, #1905	; 0x771
 801e07e:	494e      	ldr	r1, [pc, #312]	; (801e1b8 <dhcp_create_msg+0x1a4>)
 801e080:	484b      	ldr	r0, [pc, #300]	; (801e1b0 <dhcp_create_msg+0x19c>)
 801e082:	f003 fd97 	bl	8021bb4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e086:	79fb      	ldrb	r3, [r7, #7]
 801e088:	2b03      	cmp	r3, #3
 801e08a:	d103      	bne.n	801e094 <dhcp_create_msg+0x80>
 801e08c:	68bb      	ldr	r3, [r7, #8]
 801e08e:	795b      	ldrb	r3, [r3, #5]
 801e090:	2b03      	cmp	r3, #3
 801e092:	d10d      	bne.n	801e0b0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801e094:	68bb      	ldr	r3, [r7, #8]
 801e096:	799b      	ldrb	r3, [r3, #6]
 801e098:	2b00      	cmp	r3, #0
 801e09a:	d105      	bne.n	801e0a8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801e09c:	f003 fe18 	bl	8021cd0 <rand>
 801e0a0:	4603      	mov	r3, r0
 801e0a2:	461a      	mov	r2, r3
 801e0a4:	4b45      	ldr	r3, [pc, #276]	; (801e1bc <dhcp_create_msg+0x1a8>)
 801e0a6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801e0a8:	4b44      	ldr	r3, [pc, #272]	; (801e1bc <dhcp_create_msg+0x1a8>)
 801e0aa:	681a      	ldr	r2, [r3, #0]
 801e0ac:	68bb      	ldr	r3, [r7, #8]
 801e0ae:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801e0b0:	69bb      	ldr	r3, [r7, #24]
 801e0b2:	685b      	ldr	r3, [r3, #4]
 801e0b4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801e0b6:	f44f 729a 	mov.w	r2, #308	; 0x134
 801e0ba:	2100      	movs	r1, #0
 801e0bc:	6978      	ldr	r0, [r7, #20]
 801e0be:	f003 f85d 	bl	802117c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801e0c2:	697b      	ldr	r3, [r7, #20]
 801e0c4:	2201      	movs	r2, #1
 801e0c6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801e0c8:	697b      	ldr	r3, [r7, #20]
 801e0ca:	2201      	movs	r2, #1
 801e0cc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801e0d4:	697b      	ldr	r3, [r7, #20]
 801e0d6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801e0d8:	68bb      	ldr	r3, [r7, #8]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	4618      	mov	r0, r3
 801e0de:	f7f4 f902 	bl	80122e6 <lwip_htonl>
 801e0e2:	4602      	mov	r2, r0
 801e0e4:	697b      	ldr	r3, [r7, #20]
 801e0e6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e0e8:	79fb      	ldrb	r3, [r7, #7]
 801e0ea:	2b08      	cmp	r3, #8
 801e0ec:	d010      	beq.n	801e110 <dhcp_create_msg+0xfc>
 801e0ee:	79fb      	ldrb	r3, [r7, #7]
 801e0f0:	2b04      	cmp	r3, #4
 801e0f2:	d00d      	beq.n	801e110 <dhcp_create_msg+0xfc>
 801e0f4:	79fb      	ldrb	r3, [r7, #7]
 801e0f6:	2b07      	cmp	r3, #7
 801e0f8:	d00a      	beq.n	801e110 <dhcp_create_msg+0xfc>
 801e0fa:	79fb      	ldrb	r3, [r7, #7]
 801e0fc:	2b03      	cmp	r3, #3
 801e0fe:	d10c      	bne.n	801e11a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e100:	68bb      	ldr	r3, [r7, #8]
 801e102:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801e104:	2b05      	cmp	r3, #5
 801e106:	d003      	beq.n	801e110 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e108:	68bb      	ldr	r3, [r7, #8]
 801e10a:	795b      	ldrb	r3, [r3, #5]
 801e10c:	2b04      	cmp	r3, #4
 801e10e:	d104      	bne.n	801e11a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	3304      	adds	r3, #4
 801e114:	681a      	ldr	r2, [r3, #0]
 801e116:	697b      	ldr	r3, [r7, #20]
 801e118:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e11a:	2300      	movs	r3, #0
 801e11c:	83fb      	strh	r3, [r7, #30]
 801e11e:	e00c      	b.n	801e13a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801e120:	8bfa      	ldrh	r2, [r7, #30]
 801e122:	8bfb      	ldrh	r3, [r7, #30]
 801e124:	68f9      	ldr	r1, [r7, #12]
 801e126:	440a      	add	r2, r1
 801e128:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801e12c:	697a      	ldr	r2, [r7, #20]
 801e12e:	4413      	add	r3, r2
 801e130:	460a      	mov	r2, r1
 801e132:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e134:	8bfb      	ldrh	r3, [r7, #30]
 801e136:	3301      	adds	r3, #1
 801e138:	83fb      	strh	r3, [r7, #30]
 801e13a:	8bfb      	ldrh	r3, [r7, #30]
 801e13c:	2b05      	cmp	r3, #5
 801e13e:	d9ef      	bls.n	801e120 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e140:	697b      	ldr	r3, [r7, #20]
 801e142:	2200      	movs	r2, #0
 801e144:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e148:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801e14c:	2200      	movs	r2, #0
 801e14e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801e152:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801e156:	2200      	movs	r2, #0
 801e158:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801e15c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801e160:	2200      	movs	r2, #0
 801e162:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e166:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e16a:	697b      	ldr	r3, [r7, #20]
 801e16c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e170:	2301      	movs	r3, #1
 801e172:	2235      	movs	r2, #53	; 0x35
 801e174:	2000      	movs	r0, #0
 801e176:	f7ff fa9d 	bl	801d6b4 <dhcp_option>
 801e17a:	4603      	mov	r3, r0
 801e17c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801e17e:	697b      	ldr	r3, [r7, #20]
 801e180:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e184:	79fa      	ldrb	r2, [r7, #7]
 801e186:	8a7b      	ldrh	r3, [r7, #18]
 801e188:	4618      	mov	r0, r3
 801e18a:	f7ff fac7 	bl	801d71c <dhcp_option_byte>
 801e18e:	4603      	mov	r3, r0
 801e190:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801e192:	683b      	ldr	r3, [r7, #0]
 801e194:	2b00      	cmp	r3, #0
 801e196:	d002      	beq.n	801e19e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801e198:	683b      	ldr	r3, [r7, #0]
 801e19a:	8a7a      	ldrh	r2, [r7, #18]
 801e19c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801e19e:	69bb      	ldr	r3, [r7, #24]
}
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	3720      	adds	r7, #32
 801e1a4:	46bd      	mov	sp, r7
 801e1a6:	bd80      	pop	{r7, pc}
 801e1a8:	08028c3c 	.word	0x08028c3c
 801e1ac:	08028f6c 	.word	0x08028f6c
 801e1b0:	08028c9c 	.word	0x08028c9c
 801e1b4:	08028f8c 	.word	0x08028f8c
 801e1b8:	08028fac 	.word	0x08028fac
 801e1bc:	200143a0 	.word	0x200143a0

0801e1c0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801e1c0:	b580      	push	{r7, lr}
 801e1c2:	b084      	sub	sp, #16
 801e1c4:	af00      	add	r7, sp, #0
 801e1c6:	4603      	mov	r3, r0
 801e1c8:	60b9      	str	r1, [r7, #8]
 801e1ca:	607a      	str	r2, [r7, #4]
 801e1cc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801e1ce:	89fb      	ldrh	r3, [r7, #14]
 801e1d0:	1c5a      	adds	r2, r3, #1
 801e1d2:	81fa      	strh	r2, [r7, #14]
 801e1d4:	461a      	mov	r2, r3
 801e1d6:	68bb      	ldr	r3, [r7, #8]
 801e1d8:	4413      	add	r3, r2
 801e1da:	22ff      	movs	r2, #255	; 0xff
 801e1dc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e1de:	e007      	b.n	801e1f0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801e1e0:	89fb      	ldrh	r3, [r7, #14]
 801e1e2:	1c5a      	adds	r2, r3, #1
 801e1e4:	81fa      	strh	r2, [r7, #14]
 801e1e6:	461a      	mov	r2, r3
 801e1e8:	68bb      	ldr	r3, [r7, #8]
 801e1ea:	4413      	add	r3, r2
 801e1ec:	2200      	movs	r2, #0
 801e1ee:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e1f0:	89fb      	ldrh	r3, [r7, #14]
 801e1f2:	2b43      	cmp	r3, #67	; 0x43
 801e1f4:	d904      	bls.n	801e200 <dhcp_option_trailer+0x40>
 801e1f6:	89fb      	ldrh	r3, [r7, #14]
 801e1f8:	f003 0303 	and.w	r3, r3, #3
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d002      	beq.n	801e206 <dhcp_option_trailer+0x46>
 801e200:	89fb      	ldrh	r3, [r7, #14]
 801e202:	2b43      	cmp	r3, #67	; 0x43
 801e204:	d9ec      	bls.n	801e1e0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e206:	89fb      	ldrh	r3, [r7, #14]
 801e208:	33f0      	adds	r3, #240	; 0xf0
 801e20a:	b29b      	uxth	r3, r3
 801e20c:	4619      	mov	r1, r3
 801e20e:	6878      	ldr	r0, [r7, #4]
 801e210:	f7f6 fa5c 	bl	80146cc <pbuf_realloc>
}
 801e214:	bf00      	nop
 801e216:	3710      	adds	r7, #16
 801e218:	46bd      	mov	sp, r7
 801e21a:	bd80      	pop	{r7, pc}

0801e21c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e21c:	b480      	push	{r7}
 801e21e:	b085      	sub	sp, #20
 801e220:	af00      	add	r7, sp, #0
 801e222:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	2b00      	cmp	r3, #0
 801e228:	d017      	beq.n	801e25a <dhcp_supplied_address+0x3e>
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d013      	beq.n	801e25a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e236:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	795b      	ldrb	r3, [r3, #5]
 801e23c:	2b0a      	cmp	r3, #10
 801e23e:	d007      	beq.n	801e250 <dhcp_supplied_address+0x34>
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	795b      	ldrb	r3, [r3, #5]
 801e244:	2b05      	cmp	r3, #5
 801e246:	d003      	beq.n	801e250 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e24c:	2b04      	cmp	r3, #4
 801e24e:	d101      	bne.n	801e254 <dhcp_supplied_address+0x38>
 801e250:	2301      	movs	r3, #1
 801e252:	e000      	b.n	801e256 <dhcp_supplied_address+0x3a>
 801e254:	2300      	movs	r3, #0
 801e256:	b2db      	uxtb	r3, r3
 801e258:	e000      	b.n	801e25c <dhcp_supplied_address+0x40>
  }
  return 0;
 801e25a:	2300      	movs	r3, #0
}
 801e25c:	4618      	mov	r0, r3
 801e25e:	3714      	adds	r7, #20
 801e260:	46bd      	mov	sp, r7
 801e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e266:	4770      	bx	lr

0801e268 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e268:	b580      	push	{r7, lr}
 801e26a:	b082      	sub	sp, #8
 801e26c:	af00      	add	r7, sp, #0
 801e26e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e270:	492b      	ldr	r1, [pc, #172]	; (801e320 <etharp_free_entry+0xb8>)
 801e272:	687a      	ldr	r2, [r7, #4]
 801e274:	4613      	mov	r3, r2
 801e276:	005b      	lsls	r3, r3, #1
 801e278:	4413      	add	r3, r2
 801e27a:	00db      	lsls	r3, r3, #3
 801e27c:	440b      	add	r3, r1
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	2b00      	cmp	r3, #0
 801e282:	d013      	beq.n	801e2ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e284:	4926      	ldr	r1, [pc, #152]	; (801e320 <etharp_free_entry+0xb8>)
 801e286:	687a      	ldr	r2, [r7, #4]
 801e288:	4613      	mov	r3, r2
 801e28a:	005b      	lsls	r3, r3, #1
 801e28c:	4413      	add	r3, r2
 801e28e:	00db      	lsls	r3, r3, #3
 801e290:	440b      	add	r3, r1
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	4618      	mov	r0, r3
 801e296:	f7f6 fbd1 	bl	8014a3c <pbuf_free>
    arp_table[i].q = NULL;
 801e29a:	4921      	ldr	r1, [pc, #132]	; (801e320 <etharp_free_entry+0xb8>)
 801e29c:	687a      	ldr	r2, [r7, #4]
 801e29e:	4613      	mov	r3, r2
 801e2a0:	005b      	lsls	r3, r3, #1
 801e2a2:	4413      	add	r3, r2
 801e2a4:	00db      	lsls	r3, r3, #3
 801e2a6:	440b      	add	r3, r1
 801e2a8:	2200      	movs	r2, #0
 801e2aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e2ac:	491c      	ldr	r1, [pc, #112]	; (801e320 <etharp_free_entry+0xb8>)
 801e2ae:	687a      	ldr	r2, [r7, #4]
 801e2b0:	4613      	mov	r3, r2
 801e2b2:	005b      	lsls	r3, r3, #1
 801e2b4:	4413      	add	r3, r2
 801e2b6:	00db      	lsls	r3, r3, #3
 801e2b8:	440b      	add	r3, r1
 801e2ba:	3314      	adds	r3, #20
 801e2bc:	2200      	movs	r2, #0
 801e2be:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801e2c0:	4917      	ldr	r1, [pc, #92]	; (801e320 <etharp_free_entry+0xb8>)
 801e2c2:	687a      	ldr	r2, [r7, #4]
 801e2c4:	4613      	mov	r3, r2
 801e2c6:	005b      	lsls	r3, r3, #1
 801e2c8:	4413      	add	r3, r2
 801e2ca:	00db      	lsls	r3, r3, #3
 801e2cc:	440b      	add	r3, r1
 801e2ce:	3312      	adds	r3, #18
 801e2d0:	2200      	movs	r2, #0
 801e2d2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801e2d4:	4912      	ldr	r1, [pc, #72]	; (801e320 <etharp_free_entry+0xb8>)
 801e2d6:	687a      	ldr	r2, [r7, #4]
 801e2d8:	4613      	mov	r3, r2
 801e2da:	005b      	lsls	r3, r3, #1
 801e2dc:	4413      	add	r3, r2
 801e2de:	00db      	lsls	r3, r3, #3
 801e2e0:	440b      	add	r3, r1
 801e2e2:	3308      	adds	r3, #8
 801e2e4:	2200      	movs	r2, #0
 801e2e6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801e2e8:	490d      	ldr	r1, [pc, #52]	; (801e320 <etharp_free_entry+0xb8>)
 801e2ea:	687a      	ldr	r2, [r7, #4]
 801e2ec:	4613      	mov	r3, r2
 801e2ee:	005b      	lsls	r3, r3, #1
 801e2f0:	4413      	add	r3, r2
 801e2f2:	00db      	lsls	r3, r3, #3
 801e2f4:	440b      	add	r3, r1
 801e2f6:	3304      	adds	r3, #4
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801e2fc:	4908      	ldr	r1, [pc, #32]	; (801e320 <etharp_free_entry+0xb8>)
 801e2fe:	687a      	ldr	r2, [r7, #4]
 801e300:	4613      	mov	r3, r2
 801e302:	005b      	lsls	r3, r3, #1
 801e304:	4413      	add	r3, r2
 801e306:	00db      	lsls	r3, r3, #3
 801e308:	440b      	add	r3, r1
 801e30a:	3308      	adds	r3, #8
 801e30c:	4a05      	ldr	r2, [pc, #20]	; (801e324 <etharp_free_entry+0xbc>)
 801e30e:	3304      	adds	r3, #4
 801e310:	6810      	ldr	r0, [r2, #0]
 801e312:	6018      	str	r0, [r3, #0]
 801e314:	8892      	ldrh	r2, [r2, #4]
 801e316:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801e318:	bf00      	nop
 801e31a:	3708      	adds	r7, #8
 801e31c:	46bd      	mov	sp, r7
 801e31e:	bd80      	pop	{r7, pc}
 801e320:	200143a4 	.word	0x200143a4
 801e324:	080299d0 	.word	0x080299d0

0801e328 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e328:	b580      	push	{r7, lr}
 801e32a:	b082      	sub	sp, #8
 801e32c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e32e:	2300      	movs	r3, #0
 801e330:	607b      	str	r3, [r7, #4]
 801e332:	e096      	b.n	801e462 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e334:	494f      	ldr	r1, [pc, #316]	; (801e474 <etharp_tmr+0x14c>)
 801e336:	687a      	ldr	r2, [r7, #4]
 801e338:	4613      	mov	r3, r2
 801e33a:	005b      	lsls	r3, r3, #1
 801e33c:	4413      	add	r3, r2
 801e33e:	00db      	lsls	r3, r3, #3
 801e340:	440b      	add	r3, r1
 801e342:	3314      	adds	r3, #20
 801e344:	781b      	ldrb	r3, [r3, #0]
 801e346:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e348:	78fb      	ldrb	r3, [r7, #3]
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	f000 8086 	beq.w	801e45c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801e350:	4948      	ldr	r1, [pc, #288]	; (801e474 <etharp_tmr+0x14c>)
 801e352:	687a      	ldr	r2, [r7, #4]
 801e354:	4613      	mov	r3, r2
 801e356:	005b      	lsls	r3, r3, #1
 801e358:	4413      	add	r3, r2
 801e35a:	00db      	lsls	r3, r3, #3
 801e35c:	440b      	add	r3, r1
 801e35e:	3312      	adds	r3, #18
 801e360:	881b      	ldrh	r3, [r3, #0]
 801e362:	3301      	adds	r3, #1
 801e364:	b298      	uxth	r0, r3
 801e366:	4943      	ldr	r1, [pc, #268]	; (801e474 <etharp_tmr+0x14c>)
 801e368:	687a      	ldr	r2, [r7, #4]
 801e36a:	4613      	mov	r3, r2
 801e36c:	005b      	lsls	r3, r3, #1
 801e36e:	4413      	add	r3, r2
 801e370:	00db      	lsls	r3, r3, #3
 801e372:	440b      	add	r3, r1
 801e374:	3312      	adds	r3, #18
 801e376:	4602      	mov	r2, r0
 801e378:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e37a:	493e      	ldr	r1, [pc, #248]	; (801e474 <etharp_tmr+0x14c>)
 801e37c:	687a      	ldr	r2, [r7, #4]
 801e37e:	4613      	mov	r3, r2
 801e380:	005b      	lsls	r3, r3, #1
 801e382:	4413      	add	r3, r2
 801e384:	00db      	lsls	r3, r3, #3
 801e386:	440b      	add	r3, r1
 801e388:	3312      	adds	r3, #18
 801e38a:	881b      	ldrh	r3, [r3, #0]
 801e38c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801e390:	d215      	bcs.n	801e3be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e392:	4938      	ldr	r1, [pc, #224]	; (801e474 <etharp_tmr+0x14c>)
 801e394:	687a      	ldr	r2, [r7, #4]
 801e396:	4613      	mov	r3, r2
 801e398:	005b      	lsls	r3, r3, #1
 801e39a:	4413      	add	r3, r2
 801e39c:	00db      	lsls	r3, r3, #3
 801e39e:	440b      	add	r3, r1
 801e3a0:	3314      	adds	r3, #20
 801e3a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e3a4:	2b01      	cmp	r3, #1
 801e3a6:	d10e      	bne.n	801e3c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e3a8:	4932      	ldr	r1, [pc, #200]	; (801e474 <etharp_tmr+0x14c>)
 801e3aa:	687a      	ldr	r2, [r7, #4]
 801e3ac:	4613      	mov	r3, r2
 801e3ae:	005b      	lsls	r3, r3, #1
 801e3b0:	4413      	add	r3, r2
 801e3b2:	00db      	lsls	r3, r3, #3
 801e3b4:	440b      	add	r3, r1
 801e3b6:	3312      	adds	r3, #18
 801e3b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e3ba:	2b04      	cmp	r3, #4
 801e3bc:	d903      	bls.n	801e3c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	f7ff ff52 	bl	801e268 <etharp_free_entry>
 801e3c4:	e04a      	b.n	801e45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e3c6:	492b      	ldr	r1, [pc, #172]	; (801e474 <etharp_tmr+0x14c>)
 801e3c8:	687a      	ldr	r2, [r7, #4]
 801e3ca:	4613      	mov	r3, r2
 801e3cc:	005b      	lsls	r3, r3, #1
 801e3ce:	4413      	add	r3, r2
 801e3d0:	00db      	lsls	r3, r3, #3
 801e3d2:	440b      	add	r3, r1
 801e3d4:	3314      	adds	r3, #20
 801e3d6:	781b      	ldrb	r3, [r3, #0]
 801e3d8:	2b03      	cmp	r3, #3
 801e3da:	d10a      	bne.n	801e3f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e3dc:	4925      	ldr	r1, [pc, #148]	; (801e474 <etharp_tmr+0x14c>)
 801e3de:	687a      	ldr	r2, [r7, #4]
 801e3e0:	4613      	mov	r3, r2
 801e3e2:	005b      	lsls	r3, r3, #1
 801e3e4:	4413      	add	r3, r2
 801e3e6:	00db      	lsls	r3, r3, #3
 801e3e8:	440b      	add	r3, r1
 801e3ea:	3314      	adds	r3, #20
 801e3ec:	2204      	movs	r2, #4
 801e3ee:	701a      	strb	r2, [r3, #0]
 801e3f0:	e034      	b.n	801e45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e3f2:	4920      	ldr	r1, [pc, #128]	; (801e474 <etharp_tmr+0x14c>)
 801e3f4:	687a      	ldr	r2, [r7, #4]
 801e3f6:	4613      	mov	r3, r2
 801e3f8:	005b      	lsls	r3, r3, #1
 801e3fa:	4413      	add	r3, r2
 801e3fc:	00db      	lsls	r3, r3, #3
 801e3fe:	440b      	add	r3, r1
 801e400:	3314      	adds	r3, #20
 801e402:	781b      	ldrb	r3, [r3, #0]
 801e404:	2b04      	cmp	r3, #4
 801e406:	d10a      	bne.n	801e41e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e408:	491a      	ldr	r1, [pc, #104]	; (801e474 <etharp_tmr+0x14c>)
 801e40a:	687a      	ldr	r2, [r7, #4]
 801e40c:	4613      	mov	r3, r2
 801e40e:	005b      	lsls	r3, r3, #1
 801e410:	4413      	add	r3, r2
 801e412:	00db      	lsls	r3, r3, #3
 801e414:	440b      	add	r3, r1
 801e416:	3314      	adds	r3, #20
 801e418:	2202      	movs	r2, #2
 801e41a:	701a      	strb	r2, [r3, #0]
 801e41c:	e01e      	b.n	801e45c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e41e:	4915      	ldr	r1, [pc, #84]	; (801e474 <etharp_tmr+0x14c>)
 801e420:	687a      	ldr	r2, [r7, #4]
 801e422:	4613      	mov	r3, r2
 801e424:	005b      	lsls	r3, r3, #1
 801e426:	4413      	add	r3, r2
 801e428:	00db      	lsls	r3, r3, #3
 801e42a:	440b      	add	r3, r1
 801e42c:	3314      	adds	r3, #20
 801e42e:	781b      	ldrb	r3, [r3, #0]
 801e430:	2b01      	cmp	r3, #1
 801e432:	d113      	bne.n	801e45c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e434:	490f      	ldr	r1, [pc, #60]	; (801e474 <etharp_tmr+0x14c>)
 801e436:	687a      	ldr	r2, [r7, #4]
 801e438:	4613      	mov	r3, r2
 801e43a:	005b      	lsls	r3, r3, #1
 801e43c:	4413      	add	r3, r2
 801e43e:	00db      	lsls	r3, r3, #3
 801e440:	440b      	add	r3, r1
 801e442:	3308      	adds	r3, #8
 801e444:	6818      	ldr	r0, [r3, #0]
 801e446:	687a      	ldr	r2, [r7, #4]
 801e448:	4613      	mov	r3, r2
 801e44a:	005b      	lsls	r3, r3, #1
 801e44c:	4413      	add	r3, r2
 801e44e:	00db      	lsls	r3, r3, #3
 801e450:	4a08      	ldr	r2, [pc, #32]	; (801e474 <etharp_tmr+0x14c>)
 801e452:	4413      	add	r3, r2
 801e454:	3304      	adds	r3, #4
 801e456:	4619      	mov	r1, r3
 801e458:	f000 fe72 	bl	801f140 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	3301      	adds	r3, #1
 801e460:	607b      	str	r3, [r7, #4]
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	2b09      	cmp	r3, #9
 801e466:	f77f af65 	ble.w	801e334 <etharp_tmr+0xc>
      }
    }
  }
}
 801e46a:	bf00      	nop
 801e46c:	bf00      	nop
 801e46e:	3708      	adds	r7, #8
 801e470:	46bd      	mov	sp, r7
 801e472:	bd80      	pop	{r7, pc}
 801e474:	200143a4 	.word	0x200143a4

0801e478 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e478:	b580      	push	{r7, lr}
 801e47a:	b08a      	sub	sp, #40	; 0x28
 801e47c:	af00      	add	r7, sp, #0
 801e47e:	60f8      	str	r0, [r7, #12]
 801e480:	460b      	mov	r3, r1
 801e482:	607a      	str	r2, [r7, #4]
 801e484:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e486:	230a      	movs	r3, #10
 801e488:	843b      	strh	r3, [r7, #32]
 801e48a:	230a      	movs	r3, #10
 801e48c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801e48e:	230a      	movs	r3, #10
 801e490:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 801e492:	2300      	movs	r3, #0
 801e494:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e496:	230a      	movs	r3, #10
 801e498:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e49a:	2300      	movs	r3, #0
 801e49c:	83bb      	strh	r3, [r7, #28]
 801e49e:	2300      	movs	r3, #0
 801e4a0:	837b      	strh	r3, [r7, #26]
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e4a6:	2300      	movs	r3, #0
 801e4a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e4aa:	e0ae      	b.n	801e60a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801e4ac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e4b0:	49a6      	ldr	r1, [pc, #664]	; (801e74c <etharp_find_entry+0x2d4>)
 801e4b2:	4613      	mov	r3, r2
 801e4b4:	005b      	lsls	r3, r3, #1
 801e4b6:	4413      	add	r3, r2
 801e4b8:	00db      	lsls	r3, r3, #3
 801e4ba:	440b      	add	r3, r1
 801e4bc:	3314      	adds	r3, #20
 801e4be:	781b      	ldrb	r3, [r3, #0]
 801e4c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e4c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e4c6:	2b0a      	cmp	r3, #10
 801e4c8:	d105      	bne.n	801e4d6 <etharp_find_entry+0x5e>
 801e4ca:	7dfb      	ldrb	r3, [r7, #23]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d102      	bne.n	801e4d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801e4d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e4d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 801e4d4:	e095      	b.n	801e602 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e4d6:	7dfb      	ldrb	r3, [r7, #23]
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	f000 8092 	beq.w	801e602 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e4de:	7dfb      	ldrb	r3, [r7, #23]
 801e4e0:	2b01      	cmp	r3, #1
 801e4e2:	d009      	beq.n	801e4f8 <etharp_find_entry+0x80>
 801e4e4:	7dfb      	ldrb	r3, [r7, #23]
 801e4e6:	2b01      	cmp	r3, #1
 801e4e8:	d806      	bhi.n	801e4f8 <etharp_find_entry+0x80>
 801e4ea:	4b99      	ldr	r3, [pc, #612]	; (801e750 <etharp_find_entry+0x2d8>)
 801e4ec:	f240 1223 	movw	r2, #291	; 0x123
 801e4f0:	4998      	ldr	r1, [pc, #608]	; (801e754 <etharp_find_entry+0x2dc>)
 801e4f2:	4899      	ldr	r0, [pc, #612]	; (801e758 <etharp_find_entry+0x2e0>)
 801e4f4:	f003 fb5e 	bl	8021bb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d020      	beq.n	801e540 <etharp_find_entry+0xc8>
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	6819      	ldr	r1, [r3, #0]
 801e502:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e506:	4891      	ldr	r0, [pc, #580]	; (801e74c <etharp_find_entry+0x2d4>)
 801e508:	4613      	mov	r3, r2
 801e50a:	005b      	lsls	r3, r3, #1
 801e50c:	4413      	add	r3, r2
 801e50e:	00db      	lsls	r3, r3, #3
 801e510:	4403      	add	r3, r0
 801e512:	3304      	adds	r3, #4
 801e514:	681b      	ldr	r3, [r3, #0]
 801e516:	4299      	cmp	r1, r3
 801e518:	d112      	bne.n	801e540 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d00c      	beq.n	801e53a <etharp_find_entry+0xc2>
 801e520:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e524:	4989      	ldr	r1, [pc, #548]	; (801e74c <etharp_find_entry+0x2d4>)
 801e526:	4613      	mov	r3, r2
 801e528:	005b      	lsls	r3, r3, #1
 801e52a:	4413      	add	r3, r2
 801e52c:	00db      	lsls	r3, r3, #3
 801e52e:	440b      	add	r3, r1
 801e530:	3308      	adds	r3, #8
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	687a      	ldr	r2, [r7, #4]
 801e536:	429a      	cmp	r2, r3
 801e538:	d102      	bne.n	801e540 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e53a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e53e:	e100      	b.n	801e742 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e540:	7dfb      	ldrb	r3, [r7, #23]
 801e542:	2b01      	cmp	r3, #1
 801e544:	d140      	bne.n	801e5c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e546:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e54a:	4980      	ldr	r1, [pc, #512]	; (801e74c <etharp_find_entry+0x2d4>)
 801e54c:	4613      	mov	r3, r2
 801e54e:	005b      	lsls	r3, r3, #1
 801e550:	4413      	add	r3, r2
 801e552:	00db      	lsls	r3, r3, #3
 801e554:	440b      	add	r3, r1
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d01a      	beq.n	801e592 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e55c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e560:	497a      	ldr	r1, [pc, #488]	; (801e74c <etharp_find_entry+0x2d4>)
 801e562:	4613      	mov	r3, r2
 801e564:	005b      	lsls	r3, r3, #1
 801e566:	4413      	add	r3, r2
 801e568:	00db      	lsls	r3, r3, #3
 801e56a:	440b      	add	r3, r1
 801e56c:	3312      	adds	r3, #18
 801e56e:	881b      	ldrh	r3, [r3, #0]
 801e570:	8bba      	ldrh	r2, [r7, #28]
 801e572:	429a      	cmp	r2, r3
 801e574:	d845      	bhi.n	801e602 <etharp_find_entry+0x18a>
            old_queue = i;
 801e576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e578:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e57a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e57e:	4973      	ldr	r1, [pc, #460]	; (801e74c <etharp_find_entry+0x2d4>)
 801e580:	4613      	mov	r3, r2
 801e582:	005b      	lsls	r3, r3, #1
 801e584:	4413      	add	r3, r2
 801e586:	00db      	lsls	r3, r3, #3
 801e588:	440b      	add	r3, r1
 801e58a:	3312      	adds	r3, #18
 801e58c:	881b      	ldrh	r3, [r3, #0]
 801e58e:	83bb      	strh	r3, [r7, #28]
 801e590:	e037      	b.n	801e602 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e592:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e596:	496d      	ldr	r1, [pc, #436]	; (801e74c <etharp_find_entry+0x2d4>)
 801e598:	4613      	mov	r3, r2
 801e59a:	005b      	lsls	r3, r3, #1
 801e59c:	4413      	add	r3, r2
 801e59e:	00db      	lsls	r3, r3, #3
 801e5a0:	440b      	add	r3, r1
 801e5a2:	3312      	adds	r3, #18
 801e5a4:	881b      	ldrh	r3, [r3, #0]
 801e5a6:	8b7a      	ldrh	r2, [r7, #26]
 801e5a8:	429a      	cmp	r2, r3
 801e5aa:	d82a      	bhi.n	801e602 <etharp_find_entry+0x18a>
            old_pending = i;
 801e5ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e5ae:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801e5b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e5b4:	4965      	ldr	r1, [pc, #404]	; (801e74c <etharp_find_entry+0x2d4>)
 801e5b6:	4613      	mov	r3, r2
 801e5b8:	005b      	lsls	r3, r3, #1
 801e5ba:	4413      	add	r3, r2
 801e5bc:	00db      	lsls	r3, r3, #3
 801e5be:	440b      	add	r3, r1
 801e5c0:	3312      	adds	r3, #18
 801e5c2:	881b      	ldrh	r3, [r3, #0]
 801e5c4:	837b      	strh	r3, [r7, #26]
 801e5c6:	e01c      	b.n	801e602 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e5c8:	7dfb      	ldrb	r3, [r7, #23]
 801e5ca:	2b01      	cmp	r3, #1
 801e5cc:	d919      	bls.n	801e602 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e5ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e5d2:	495e      	ldr	r1, [pc, #376]	; (801e74c <etharp_find_entry+0x2d4>)
 801e5d4:	4613      	mov	r3, r2
 801e5d6:	005b      	lsls	r3, r3, #1
 801e5d8:	4413      	add	r3, r2
 801e5da:	00db      	lsls	r3, r3, #3
 801e5dc:	440b      	add	r3, r1
 801e5de:	3312      	adds	r3, #18
 801e5e0:	881b      	ldrh	r3, [r3, #0]
 801e5e2:	8b3a      	ldrh	r2, [r7, #24]
 801e5e4:	429a      	cmp	r2, r3
 801e5e6:	d80c      	bhi.n	801e602 <etharp_find_entry+0x18a>
            old_stable = i;
 801e5e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e5ea:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 801e5ec:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e5f0:	4956      	ldr	r1, [pc, #344]	; (801e74c <etharp_find_entry+0x2d4>)
 801e5f2:	4613      	mov	r3, r2
 801e5f4:	005b      	lsls	r3, r3, #1
 801e5f6:	4413      	add	r3, r2
 801e5f8:	00db      	lsls	r3, r3, #3
 801e5fa:	440b      	add	r3, r1
 801e5fc:	3312      	adds	r3, #18
 801e5fe:	881b      	ldrh	r3, [r3, #0]
 801e600:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e604:	3301      	adds	r3, #1
 801e606:	b29b      	uxth	r3, r3
 801e608:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e60a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e60e:	2b09      	cmp	r3, #9
 801e610:	f77f af4c 	ble.w	801e4ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e614:	7afb      	ldrb	r3, [r7, #11]
 801e616:	f003 0302 	and.w	r3, r3, #2
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d108      	bne.n	801e630 <etharp_find_entry+0x1b8>
 801e61e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e622:	2b0a      	cmp	r3, #10
 801e624:	d107      	bne.n	801e636 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e626:	7afb      	ldrb	r3, [r7, #11]
 801e628:	f003 0301 	and.w	r3, r3, #1
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d102      	bne.n	801e636 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e634:	e085      	b.n	801e742 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e636:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e63a:	2b09      	cmp	r3, #9
 801e63c:	dc02      	bgt.n	801e644 <etharp_find_entry+0x1cc>
    i = empty;
 801e63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e640:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e642:	e039      	b.n	801e6b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e644:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e648:	2b09      	cmp	r3, #9
 801e64a:	dc14      	bgt.n	801e676 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e64e:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e650:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e654:	493d      	ldr	r1, [pc, #244]	; (801e74c <etharp_find_entry+0x2d4>)
 801e656:	4613      	mov	r3, r2
 801e658:	005b      	lsls	r3, r3, #1
 801e65a:	4413      	add	r3, r2
 801e65c:	00db      	lsls	r3, r3, #3
 801e65e:	440b      	add	r3, r1
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	2b00      	cmp	r3, #0
 801e664:	d018      	beq.n	801e698 <etharp_find_entry+0x220>
 801e666:	4b3a      	ldr	r3, [pc, #232]	; (801e750 <etharp_find_entry+0x2d8>)
 801e668:	f240 126d 	movw	r2, #365	; 0x16d
 801e66c:	493b      	ldr	r1, [pc, #236]	; (801e75c <etharp_find_entry+0x2e4>)
 801e66e:	483a      	ldr	r0, [pc, #232]	; (801e758 <etharp_find_entry+0x2e0>)
 801e670:	f003 faa0 	bl	8021bb4 <iprintf>
 801e674:	e010      	b.n	801e698 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e676:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e67a:	2b09      	cmp	r3, #9
 801e67c:	dc02      	bgt.n	801e684 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e67e:	8c3b      	ldrh	r3, [r7, #32]
 801e680:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e682:	e009      	b.n	801e698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e688:	2b09      	cmp	r3, #9
 801e68a:	dc02      	bgt.n	801e692 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e68c:	8bfb      	ldrh	r3, [r7, #30]
 801e68e:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e690:	e002      	b.n	801e698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e696:	e054      	b.n	801e742 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e698:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e69c:	2b09      	cmp	r3, #9
 801e69e:	dd06      	ble.n	801e6ae <etharp_find_entry+0x236>
 801e6a0:	4b2b      	ldr	r3, [pc, #172]	; (801e750 <etharp_find_entry+0x2d8>)
 801e6a2:	f240 127f 	movw	r2, #383	; 0x17f
 801e6a6:	492e      	ldr	r1, [pc, #184]	; (801e760 <etharp_find_entry+0x2e8>)
 801e6a8:	482b      	ldr	r0, [pc, #172]	; (801e758 <etharp_find_entry+0x2e0>)
 801e6aa:	f003 fa83 	bl	8021bb4 <iprintf>
    etharp_free_entry(i);
 801e6ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e6b2:	4618      	mov	r0, r3
 801e6b4:	f7ff fdd8 	bl	801e268 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e6b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e6bc:	2b09      	cmp	r3, #9
 801e6be:	dd06      	ble.n	801e6ce <etharp_find_entry+0x256>
 801e6c0:	4b23      	ldr	r3, [pc, #140]	; (801e750 <etharp_find_entry+0x2d8>)
 801e6c2:	f240 1283 	movw	r2, #387	; 0x183
 801e6c6:	4926      	ldr	r1, [pc, #152]	; (801e760 <etharp_find_entry+0x2e8>)
 801e6c8:	4823      	ldr	r0, [pc, #140]	; (801e758 <etharp_find_entry+0x2e0>)
 801e6ca:	f003 fa73 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e6ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e6d2:	491e      	ldr	r1, [pc, #120]	; (801e74c <etharp_find_entry+0x2d4>)
 801e6d4:	4613      	mov	r3, r2
 801e6d6:	005b      	lsls	r3, r3, #1
 801e6d8:	4413      	add	r3, r2
 801e6da:	00db      	lsls	r3, r3, #3
 801e6dc:	440b      	add	r3, r1
 801e6de:	3314      	adds	r3, #20
 801e6e0:	781b      	ldrb	r3, [r3, #0]
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d006      	beq.n	801e6f4 <etharp_find_entry+0x27c>
 801e6e6:	4b1a      	ldr	r3, [pc, #104]	; (801e750 <etharp_find_entry+0x2d8>)
 801e6e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801e6ec:	491d      	ldr	r1, [pc, #116]	; (801e764 <etharp_find_entry+0x2ec>)
 801e6ee:	481a      	ldr	r0, [pc, #104]	; (801e758 <etharp_find_entry+0x2e0>)
 801e6f0:	f003 fa60 	bl	8021bb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d00b      	beq.n	801e712 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e6fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	6819      	ldr	r1, [r3, #0]
 801e702:	4812      	ldr	r0, [pc, #72]	; (801e74c <etharp_find_entry+0x2d4>)
 801e704:	4613      	mov	r3, r2
 801e706:	005b      	lsls	r3, r3, #1
 801e708:	4413      	add	r3, r2
 801e70a:	00db      	lsls	r3, r3, #3
 801e70c:	4403      	add	r3, r0
 801e70e:	3304      	adds	r3, #4
 801e710:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e712:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e716:	490d      	ldr	r1, [pc, #52]	; (801e74c <etharp_find_entry+0x2d4>)
 801e718:	4613      	mov	r3, r2
 801e71a:	005b      	lsls	r3, r3, #1
 801e71c:	4413      	add	r3, r2
 801e71e:	00db      	lsls	r3, r3, #3
 801e720:	440b      	add	r3, r1
 801e722:	3312      	adds	r3, #18
 801e724:	2200      	movs	r2, #0
 801e726:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e728:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801e72c:	4907      	ldr	r1, [pc, #28]	; (801e74c <etharp_find_entry+0x2d4>)
 801e72e:	4613      	mov	r3, r2
 801e730:	005b      	lsls	r3, r3, #1
 801e732:	4413      	add	r3, r2
 801e734:	00db      	lsls	r3, r3, #3
 801e736:	440b      	add	r3, r1
 801e738:	3308      	adds	r3, #8
 801e73a:	687a      	ldr	r2, [r7, #4]
 801e73c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e73e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801e742:	4618      	mov	r0, r3
 801e744:	3728      	adds	r7, #40	; 0x28
 801e746:	46bd      	mov	sp, r7
 801e748:	bd80      	pop	{r7, pc}
 801e74a:	bf00      	nop
 801e74c:	200143a4 	.word	0x200143a4
 801e750:	08028fec 	.word	0x08028fec
 801e754:	08029024 	.word	0x08029024
 801e758:	08029064 	.word	0x08029064
 801e75c:	0802908c 	.word	0x0802908c
 801e760:	080290a4 	.word	0x080290a4
 801e764:	080290b8 	.word	0x080290b8

0801e768 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e768:	b580      	push	{r7, lr}
 801e76a:	b088      	sub	sp, #32
 801e76c:	af02      	add	r7, sp, #8
 801e76e:	60f8      	str	r0, [r7, #12]
 801e770:	60b9      	str	r1, [r7, #8]
 801e772:	607a      	str	r2, [r7, #4]
 801e774:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e77c:	2b06      	cmp	r3, #6
 801e77e:	d006      	beq.n	801e78e <etharp_update_arp_entry+0x26>
 801e780:	4b48      	ldr	r3, [pc, #288]	; (801e8a4 <etharp_update_arp_entry+0x13c>)
 801e782:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e786:	4948      	ldr	r1, [pc, #288]	; (801e8a8 <etharp_update_arp_entry+0x140>)
 801e788:	4848      	ldr	r0, [pc, #288]	; (801e8ac <etharp_update_arp_entry+0x144>)
 801e78a:	f003 fa13 	bl	8021bb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e78e:	68bb      	ldr	r3, [r7, #8]
 801e790:	2b00      	cmp	r3, #0
 801e792:	d012      	beq.n	801e7ba <etharp_update_arp_entry+0x52>
 801e794:	68bb      	ldr	r3, [r7, #8]
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d00e      	beq.n	801e7ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e79c:	68bb      	ldr	r3, [r7, #8]
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	68f9      	ldr	r1, [r7, #12]
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	f001 f926 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801e7a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d105      	bne.n	801e7ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e7ae:	68bb      	ldr	r3, [r7, #8]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e7b6:	2be0      	cmp	r3, #224	; 0xe0
 801e7b8:	d102      	bne.n	801e7c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e7ba:	f06f 030f 	mvn.w	r3, #15
 801e7be:	e06c      	b.n	801e89a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e7c0:	78fb      	ldrb	r3, [r7, #3]
 801e7c2:	68fa      	ldr	r2, [r7, #12]
 801e7c4:	4619      	mov	r1, r3
 801e7c6:	68b8      	ldr	r0, [r7, #8]
 801e7c8:	f7ff fe56 	bl	801e478 <etharp_find_entry>
 801e7cc:	4603      	mov	r3, r0
 801e7ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e7d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	da02      	bge.n	801e7de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e7d8:	8afb      	ldrh	r3, [r7, #22]
 801e7da:	b25b      	sxtb	r3, r3
 801e7dc:	e05d      	b.n	801e89a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e7de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e7e2:	4933      	ldr	r1, [pc, #204]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e7e4:	4613      	mov	r3, r2
 801e7e6:	005b      	lsls	r3, r3, #1
 801e7e8:	4413      	add	r3, r2
 801e7ea:	00db      	lsls	r3, r3, #3
 801e7ec:	440b      	add	r3, r1
 801e7ee:	3314      	adds	r3, #20
 801e7f0:	2202      	movs	r2, #2
 801e7f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e7f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e7f8:	492d      	ldr	r1, [pc, #180]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e7fa:	4613      	mov	r3, r2
 801e7fc:	005b      	lsls	r3, r3, #1
 801e7fe:	4413      	add	r3, r2
 801e800:	00db      	lsls	r3, r3, #3
 801e802:	440b      	add	r3, r1
 801e804:	3308      	adds	r3, #8
 801e806:	68fa      	ldr	r2, [r7, #12]
 801e808:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e80a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e80e:	4613      	mov	r3, r2
 801e810:	005b      	lsls	r3, r3, #1
 801e812:	4413      	add	r3, r2
 801e814:	00db      	lsls	r3, r3, #3
 801e816:	3308      	adds	r3, #8
 801e818:	4a25      	ldr	r2, [pc, #148]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e81a:	4413      	add	r3, r2
 801e81c:	3304      	adds	r3, #4
 801e81e:	2206      	movs	r2, #6
 801e820:	6879      	ldr	r1, [r7, #4]
 801e822:	4618      	mov	r0, r3
 801e824:	f002 fc82 	bl	802112c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e828:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e82c:	4920      	ldr	r1, [pc, #128]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e82e:	4613      	mov	r3, r2
 801e830:	005b      	lsls	r3, r3, #1
 801e832:	4413      	add	r3, r2
 801e834:	00db      	lsls	r3, r3, #3
 801e836:	440b      	add	r3, r1
 801e838:	3312      	adds	r3, #18
 801e83a:	2200      	movs	r2, #0
 801e83c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e83e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e842:	491b      	ldr	r1, [pc, #108]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e844:	4613      	mov	r3, r2
 801e846:	005b      	lsls	r3, r3, #1
 801e848:	4413      	add	r3, r2
 801e84a:	00db      	lsls	r3, r3, #3
 801e84c:	440b      	add	r3, r1
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d021      	beq.n	801e898 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e854:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e858:	4915      	ldr	r1, [pc, #84]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e85a:	4613      	mov	r3, r2
 801e85c:	005b      	lsls	r3, r3, #1
 801e85e:	4413      	add	r3, r2
 801e860:	00db      	lsls	r3, r3, #3
 801e862:	440b      	add	r3, r1
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e868:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e86c:	4910      	ldr	r1, [pc, #64]	; (801e8b0 <etharp_update_arp_entry+0x148>)
 801e86e:	4613      	mov	r3, r2
 801e870:	005b      	lsls	r3, r3, #1
 801e872:	4413      	add	r3, r2
 801e874:	00db      	lsls	r3, r3, #3
 801e876:	440b      	add	r3, r1
 801e878:	2200      	movs	r2, #0
 801e87a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801e882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e886:	9300      	str	r3, [sp, #0]
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	6939      	ldr	r1, [r7, #16]
 801e88c:	68f8      	ldr	r0, [r7, #12]
 801e88e:	f002 f8e3 	bl	8020a58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e892:	6938      	ldr	r0, [r7, #16]
 801e894:	f7f6 f8d2 	bl	8014a3c <pbuf_free>
  }
  return ERR_OK;
 801e898:	2300      	movs	r3, #0
}
 801e89a:	4618      	mov	r0, r3
 801e89c:	3718      	adds	r7, #24
 801e89e:	46bd      	mov	sp, r7
 801e8a0:	bd80      	pop	{r7, pc}
 801e8a2:	bf00      	nop
 801e8a4:	08028fec 	.word	0x08028fec
 801e8a8:	080290e4 	.word	0x080290e4
 801e8ac:	08029064 	.word	0x08029064
 801e8b0:	200143a4 	.word	0x200143a4

0801e8b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e8b4:	b580      	push	{r7, lr}
 801e8b6:	b084      	sub	sp, #16
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e8bc:	2300      	movs	r3, #0
 801e8be:	60fb      	str	r3, [r7, #12]
 801e8c0:	e01e      	b.n	801e900 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e8c2:	4913      	ldr	r1, [pc, #76]	; (801e910 <etharp_cleanup_netif+0x5c>)
 801e8c4:	68fa      	ldr	r2, [r7, #12]
 801e8c6:	4613      	mov	r3, r2
 801e8c8:	005b      	lsls	r3, r3, #1
 801e8ca:	4413      	add	r3, r2
 801e8cc:	00db      	lsls	r3, r3, #3
 801e8ce:	440b      	add	r3, r1
 801e8d0:	3314      	adds	r3, #20
 801e8d2:	781b      	ldrb	r3, [r3, #0]
 801e8d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e8d6:	7afb      	ldrb	r3, [r7, #11]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d00e      	beq.n	801e8fa <etharp_cleanup_netif+0x46>
 801e8dc:	490c      	ldr	r1, [pc, #48]	; (801e910 <etharp_cleanup_netif+0x5c>)
 801e8de:	68fa      	ldr	r2, [r7, #12]
 801e8e0:	4613      	mov	r3, r2
 801e8e2:	005b      	lsls	r3, r3, #1
 801e8e4:	4413      	add	r3, r2
 801e8e6:	00db      	lsls	r3, r3, #3
 801e8e8:	440b      	add	r3, r1
 801e8ea:	3308      	adds	r3, #8
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	687a      	ldr	r2, [r7, #4]
 801e8f0:	429a      	cmp	r2, r3
 801e8f2:	d102      	bne.n	801e8fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801e8f4:	68f8      	ldr	r0, [r7, #12]
 801e8f6:	f7ff fcb7 	bl	801e268 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e8fa:	68fb      	ldr	r3, [r7, #12]
 801e8fc:	3301      	adds	r3, #1
 801e8fe:	60fb      	str	r3, [r7, #12]
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	2b09      	cmp	r3, #9
 801e904:	dddd      	ble.n	801e8c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801e906:	bf00      	nop
 801e908:	bf00      	nop
 801e90a:	3710      	adds	r7, #16
 801e90c:	46bd      	mov	sp, r7
 801e90e:	bd80      	pop	{r7, pc}
 801e910:	200143a4 	.word	0x200143a4

0801e914 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e914:	b5b0      	push	{r4, r5, r7, lr}
 801e916:	b08a      	sub	sp, #40	; 0x28
 801e918:	af04      	add	r7, sp, #16
 801e91a:	6078      	str	r0, [r7, #4]
 801e91c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e91e:	683b      	ldr	r3, [r7, #0]
 801e920:	2b00      	cmp	r3, #0
 801e922:	d107      	bne.n	801e934 <etharp_input+0x20>
 801e924:	4b3f      	ldr	r3, [pc, #252]	; (801ea24 <etharp_input+0x110>)
 801e926:	f240 228a 	movw	r2, #650	; 0x28a
 801e92a:	493f      	ldr	r1, [pc, #252]	; (801ea28 <etharp_input+0x114>)
 801e92c:	483f      	ldr	r0, [pc, #252]	; (801ea2c <etharp_input+0x118>)
 801e92e:	f003 f941 	bl	8021bb4 <iprintf>
 801e932:	e074      	b.n	801ea1e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	685b      	ldr	r3, [r3, #4]
 801e938:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e93a:	697b      	ldr	r3, [r7, #20]
 801e93c:	881b      	ldrh	r3, [r3, #0]
 801e93e:	b29b      	uxth	r3, r3
 801e940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e944:	d10c      	bne.n	801e960 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e946:	697b      	ldr	r3, [r7, #20]
 801e948:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e94a:	2b06      	cmp	r3, #6
 801e94c:	d108      	bne.n	801e960 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e94e:	697b      	ldr	r3, [r7, #20]
 801e950:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e952:	2b04      	cmp	r3, #4
 801e954:	d104      	bne.n	801e960 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e956:	697b      	ldr	r3, [r7, #20]
 801e958:	885b      	ldrh	r3, [r3, #2]
 801e95a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e95c:	2b08      	cmp	r3, #8
 801e95e:	d003      	beq.n	801e968 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801e960:	6878      	ldr	r0, [r7, #4]
 801e962:	f7f6 f86b 	bl	8014a3c <pbuf_free>
    return;
 801e966:	e05a      	b.n	801ea1e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e968:	697b      	ldr	r3, [r7, #20]
 801e96a:	330e      	adds	r3, #14
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801e970:	697b      	ldr	r3, [r7, #20]
 801e972:	3318      	adds	r3, #24
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	3304      	adds	r3, #4
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d102      	bne.n	801e988 <etharp_input+0x74>
    for_us = 0;
 801e982:	2300      	movs	r3, #0
 801e984:	74fb      	strb	r3, [r7, #19]
 801e986:	e009      	b.n	801e99c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e988:	68ba      	ldr	r2, [r7, #8]
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	3304      	adds	r3, #4
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	429a      	cmp	r2, r3
 801e992:	bf0c      	ite	eq
 801e994:	2301      	moveq	r3, #1
 801e996:	2300      	movne	r3, #0
 801e998:	b2db      	uxtb	r3, r3
 801e99a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e99c:	697b      	ldr	r3, [r7, #20]
 801e99e:	f103 0208 	add.w	r2, r3, #8
 801e9a2:	7cfb      	ldrb	r3, [r7, #19]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d001      	beq.n	801e9ac <etharp_input+0x98>
 801e9a8:	2301      	movs	r3, #1
 801e9aa:	e000      	b.n	801e9ae <etharp_input+0x9a>
 801e9ac:	2302      	movs	r3, #2
 801e9ae:	f107 010c 	add.w	r1, r7, #12
 801e9b2:	6838      	ldr	r0, [r7, #0]
 801e9b4:	f7ff fed8 	bl	801e768 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e9b8:	697b      	ldr	r3, [r7, #20]
 801e9ba:	88db      	ldrh	r3, [r3, #6]
 801e9bc:	b29b      	uxth	r3, r3
 801e9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e9c2:	d003      	beq.n	801e9cc <etharp_input+0xb8>
 801e9c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e9c8:	d01e      	beq.n	801ea08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801e9ca:	e025      	b.n	801ea18 <etharp_input+0x104>
      if (for_us) {
 801e9cc:	7cfb      	ldrb	r3, [r7, #19]
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d021      	beq.n	801ea16 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e9d2:	683b      	ldr	r3, [r7, #0]
 801e9d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e9d8:	697b      	ldr	r3, [r7, #20]
 801e9da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e9de:	683b      	ldr	r3, [r7, #0]
 801e9e0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801e9e4:	683b      	ldr	r3, [r7, #0]
 801e9e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801e9e8:	697a      	ldr	r2, [r7, #20]
 801e9ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 801e9ec:	2102      	movs	r1, #2
 801e9ee:	9103      	str	r1, [sp, #12]
 801e9f0:	f107 010c 	add.w	r1, r7, #12
 801e9f4:	9102      	str	r1, [sp, #8]
 801e9f6:	9201      	str	r2, [sp, #4]
 801e9f8:	9300      	str	r3, [sp, #0]
 801e9fa:	462b      	mov	r3, r5
 801e9fc:	4622      	mov	r2, r4
 801e9fe:	4601      	mov	r1, r0
 801ea00:	6838      	ldr	r0, [r7, #0]
 801ea02:	f000 faef 	bl	801efe4 <etharp_raw>
      break;
 801ea06:	e006      	b.n	801ea16 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801ea08:	f107 030c 	add.w	r3, r7, #12
 801ea0c:	4619      	mov	r1, r3
 801ea0e:	6838      	ldr	r0, [r7, #0]
 801ea10:	f7fe f990 	bl	801cd34 <dhcp_arp_reply>
      break;
 801ea14:	e000      	b.n	801ea18 <etharp_input+0x104>
      break;
 801ea16:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ea18:	6878      	ldr	r0, [r7, #4]
 801ea1a:	f7f6 f80f 	bl	8014a3c <pbuf_free>
}
 801ea1e:	3718      	adds	r7, #24
 801ea20:	46bd      	mov	sp, r7
 801ea22:	bdb0      	pop	{r4, r5, r7, pc}
 801ea24:	08028fec 	.word	0x08028fec
 801ea28:	0802913c 	.word	0x0802913c
 801ea2c:	08029064 	.word	0x08029064

0801ea30 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ea30:	b580      	push	{r7, lr}
 801ea32:	b086      	sub	sp, #24
 801ea34:	af02      	add	r7, sp, #8
 801ea36:	60f8      	str	r0, [r7, #12]
 801ea38:	60b9      	str	r1, [r7, #8]
 801ea3a:	4613      	mov	r3, r2
 801ea3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ea3e:	79fa      	ldrb	r2, [r7, #7]
 801ea40:	4944      	ldr	r1, [pc, #272]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801ea42:	4613      	mov	r3, r2
 801ea44:	005b      	lsls	r3, r3, #1
 801ea46:	4413      	add	r3, r2
 801ea48:	00db      	lsls	r3, r3, #3
 801ea4a:	440b      	add	r3, r1
 801ea4c:	3314      	adds	r3, #20
 801ea4e:	781b      	ldrb	r3, [r3, #0]
 801ea50:	2b01      	cmp	r3, #1
 801ea52:	d806      	bhi.n	801ea62 <etharp_output_to_arp_index+0x32>
 801ea54:	4b40      	ldr	r3, [pc, #256]	; (801eb58 <etharp_output_to_arp_index+0x128>)
 801ea56:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ea5a:	4940      	ldr	r1, [pc, #256]	; (801eb5c <etharp_output_to_arp_index+0x12c>)
 801ea5c:	4840      	ldr	r0, [pc, #256]	; (801eb60 <etharp_output_to_arp_index+0x130>)
 801ea5e:	f003 f8a9 	bl	8021bb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ea62:	79fa      	ldrb	r2, [r7, #7]
 801ea64:	493b      	ldr	r1, [pc, #236]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801ea66:	4613      	mov	r3, r2
 801ea68:	005b      	lsls	r3, r3, #1
 801ea6a:	4413      	add	r3, r2
 801ea6c:	00db      	lsls	r3, r3, #3
 801ea6e:	440b      	add	r3, r1
 801ea70:	3314      	adds	r3, #20
 801ea72:	781b      	ldrb	r3, [r3, #0]
 801ea74:	2b02      	cmp	r3, #2
 801ea76:	d153      	bne.n	801eb20 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ea78:	79fa      	ldrb	r2, [r7, #7]
 801ea7a:	4936      	ldr	r1, [pc, #216]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801ea7c:	4613      	mov	r3, r2
 801ea7e:	005b      	lsls	r3, r3, #1
 801ea80:	4413      	add	r3, r2
 801ea82:	00db      	lsls	r3, r3, #3
 801ea84:	440b      	add	r3, r1
 801ea86:	3312      	adds	r3, #18
 801ea88:	881b      	ldrh	r3, [r3, #0]
 801ea8a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801ea8e:	d919      	bls.n	801eac4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ea90:	79fa      	ldrb	r2, [r7, #7]
 801ea92:	4613      	mov	r3, r2
 801ea94:	005b      	lsls	r3, r3, #1
 801ea96:	4413      	add	r3, r2
 801ea98:	00db      	lsls	r3, r3, #3
 801ea9a:	4a2e      	ldr	r2, [pc, #184]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801ea9c:	4413      	add	r3, r2
 801ea9e:	3304      	adds	r3, #4
 801eaa0:	4619      	mov	r1, r3
 801eaa2:	68f8      	ldr	r0, [r7, #12]
 801eaa4:	f000 fb4c 	bl	801f140 <etharp_request>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d138      	bne.n	801eb20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801eaae:	79fa      	ldrb	r2, [r7, #7]
 801eab0:	4928      	ldr	r1, [pc, #160]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801eab2:	4613      	mov	r3, r2
 801eab4:	005b      	lsls	r3, r3, #1
 801eab6:	4413      	add	r3, r2
 801eab8:	00db      	lsls	r3, r3, #3
 801eaba:	440b      	add	r3, r1
 801eabc:	3314      	adds	r3, #20
 801eabe:	2203      	movs	r2, #3
 801eac0:	701a      	strb	r2, [r3, #0]
 801eac2:	e02d      	b.n	801eb20 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801eac4:	79fa      	ldrb	r2, [r7, #7]
 801eac6:	4923      	ldr	r1, [pc, #140]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801eac8:	4613      	mov	r3, r2
 801eaca:	005b      	lsls	r3, r3, #1
 801eacc:	4413      	add	r3, r2
 801eace:	00db      	lsls	r3, r3, #3
 801ead0:	440b      	add	r3, r1
 801ead2:	3312      	adds	r3, #18
 801ead4:	881b      	ldrh	r3, [r3, #0]
 801ead6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801eada:	d321      	bcc.n	801eb20 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801eadc:	79fa      	ldrb	r2, [r7, #7]
 801eade:	4613      	mov	r3, r2
 801eae0:	005b      	lsls	r3, r3, #1
 801eae2:	4413      	add	r3, r2
 801eae4:	00db      	lsls	r3, r3, #3
 801eae6:	4a1b      	ldr	r2, [pc, #108]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801eae8:	4413      	add	r3, r2
 801eaea:	1d19      	adds	r1, r3, #4
 801eaec:	79fa      	ldrb	r2, [r7, #7]
 801eaee:	4613      	mov	r3, r2
 801eaf0:	005b      	lsls	r3, r3, #1
 801eaf2:	4413      	add	r3, r2
 801eaf4:	00db      	lsls	r3, r3, #3
 801eaf6:	3308      	adds	r3, #8
 801eaf8:	4a16      	ldr	r2, [pc, #88]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801eafa:	4413      	add	r3, r2
 801eafc:	3304      	adds	r3, #4
 801eafe:	461a      	mov	r2, r3
 801eb00:	68f8      	ldr	r0, [r7, #12]
 801eb02:	f000 fafb 	bl	801f0fc <etharp_request_dst>
 801eb06:	4603      	mov	r3, r0
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d109      	bne.n	801eb20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801eb0c:	79fa      	ldrb	r2, [r7, #7]
 801eb0e:	4911      	ldr	r1, [pc, #68]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801eb10:	4613      	mov	r3, r2
 801eb12:	005b      	lsls	r3, r3, #1
 801eb14:	4413      	add	r3, r2
 801eb16:	00db      	lsls	r3, r3, #3
 801eb18:	440b      	add	r3, r1
 801eb1a:	3314      	adds	r3, #20
 801eb1c:	2203      	movs	r2, #3
 801eb1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801eb26:	79fa      	ldrb	r2, [r7, #7]
 801eb28:	4613      	mov	r3, r2
 801eb2a:	005b      	lsls	r3, r3, #1
 801eb2c:	4413      	add	r3, r2
 801eb2e:	00db      	lsls	r3, r3, #3
 801eb30:	3308      	adds	r3, #8
 801eb32:	4a08      	ldr	r2, [pc, #32]	; (801eb54 <etharp_output_to_arp_index+0x124>)
 801eb34:	4413      	add	r3, r2
 801eb36:	3304      	adds	r3, #4
 801eb38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eb3c:	9200      	str	r2, [sp, #0]
 801eb3e:	460a      	mov	r2, r1
 801eb40:	68b9      	ldr	r1, [r7, #8]
 801eb42:	68f8      	ldr	r0, [r7, #12]
 801eb44:	f001 ff88 	bl	8020a58 <ethernet_output>
 801eb48:	4603      	mov	r3, r0
}
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	3710      	adds	r7, #16
 801eb4e:	46bd      	mov	sp, r7
 801eb50:	bd80      	pop	{r7, pc}
 801eb52:	bf00      	nop
 801eb54:	200143a4 	.word	0x200143a4
 801eb58:	08028fec 	.word	0x08028fec
 801eb5c:	0802915c 	.word	0x0802915c
 801eb60:	08029064 	.word	0x08029064

0801eb64 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801eb64:	b580      	push	{r7, lr}
 801eb66:	b08a      	sub	sp, #40	; 0x28
 801eb68:	af02      	add	r7, sp, #8
 801eb6a:	60f8      	str	r0, [r7, #12]
 801eb6c:	60b9      	str	r1, [r7, #8]
 801eb6e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d106      	bne.n	801eb88 <etharp_output+0x24>
 801eb7a:	4b73      	ldr	r3, [pc, #460]	; (801ed48 <etharp_output+0x1e4>)
 801eb7c:	f240 321e 	movw	r2, #798	; 0x31e
 801eb80:	4972      	ldr	r1, [pc, #456]	; (801ed4c <etharp_output+0x1e8>)
 801eb82:	4873      	ldr	r0, [pc, #460]	; (801ed50 <etharp_output+0x1ec>)
 801eb84:	f003 f816 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801eb88:	68bb      	ldr	r3, [r7, #8]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d106      	bne.n	801eb9c <etharp_output+0x38>
 801eb8e:	4b6e      	ldr	r3, [pc, #440]	; (801ed48 <etharp_output+0x1e4>)
 801eb90:	f240 321f 	movw	r2, #799	; 0x31f
 801eb94:	496f      	ldr	r1, [pc, #444]	; (801ed54 <etharp_output+0x1f0>)
 801eb96:	486e      	ldr	r0, [pc, #440]	; (801ed50 <etharp_output+0x1ec>)
 801eb98:	f003 f80c 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d106      	bne.n	801ebb0 <etharp_output+0x4c>
 801eba2:	4b69      	ldr	r3, [pc, #420]	; (801ed48 <etharp_output+0x1e4>)
 801eba4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801eba8:	496b      	ldr	r1, [pc, #428]	; (801ed58 <etharp_output+0x1f4>)
 801ebaa:	4869      	ldr	r0, [pc, #420]	; (801ed50 <etharp_output+0x1ec>)
 801ebac:	f003 f802 	bl	8021bb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	68f9      	ldr	r1, [r7, #12]
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	f000 ff1c 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801ebbc:	4603      	mov	r3, r0
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d002      	beq.n	801ebc8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ebc2:	4b66      	ldr	r3, [pc, #408]	; (801ed5c <etharp_output+0x1f8>)
 801ebc4:	61fb      	str	r3, [r7, #28]
 801ebc6:	e0af      	b.n	801ed28 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ebd0:	2be0      	cmp	r3, #224	; 0xe0
 801ebd2:	d118      	bne.n	801ec06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ebd4:	2301      	movs	r3, #1
 801ebd6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ebd8:	2300      	movs	r3, #0
 801ebda:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ebdc:	235e      	movs	r3, #94	; 0x5e
 801ebde:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	3301      	adds	r3, #1
 801ebe4:	781b      	ldrb	r3, [r3, #0]
 801ebe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ebea:	b2db      	uxtb	r3, r3
 801ebec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	3302      	adds	r3, #2
 801ebf2:	781b      	ldrb	r3, [r3, #0]
 801ebf4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	3303      	adds	r3, #3
 801ebfa:	781b      	ldrb	r3, [r3, #0]
 801ebfc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ebfe:	f107 0310 	add.w	r3, r7, #16
 801ec02:	61fb      	str	r3, [r7, #28]
 801ec04:	e090      	b.n	801ed28 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	681a      	ldr	r2, [r3, #0]
 801ec0a:	68fb      	ldr	r3, [r7, #12]
 801ec0c:	3304      	adds	r3, #4
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	405a      	eors	r2, r3
 801ec12:	68fb      	ldr	r3, [r7, #12]
 801ec14:	3308      	adds	r3, #8
 801ec16:	681b      	ldr	r3, [r3, #0]
 801ec18:	4013      	ands	r3, r2
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d012      	beq.n	801ec44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ec24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ec28:	4293      	cmp	r3, r2
 801ec2a:	d00b      	beq.n	801ec44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	330c      	adds	r3, #12
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	d003      	beq.n	801ec3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ec36:	68fb      	ldr	r3, [r7, #12]
 801ec38:	330c      	adds	r3, #12
 801ec3a:	61bb      	str	r3, [r7, #24]
 801ec3c:	e002      	b.n	801ec44 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ec3e:	f06f 0303 	mvn.w	r3, #3
 801ec42:	e07d      	b.n	801ed40 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ec44:	4b46      	ldr	r3, [pc, #280]	; (801ed60 <etharp_output+0x1fc>)
 801ec46:	781b      	ldrb	r3, [r3, #0]
 801ec48:	4619      	mov	r1, r3
 801ec4a:	4a46      	ldr	r2, [pc, #280]	; (801ed64 <etharp_output+0x200>)
 801ec4c:	460b      	mov	r3, r1
 801ec4e:	005b      	lsls	r3, r3, #1
 801ec50:	440b      	add	r3, r1
 801ec52:	00db      	lsls	r3, r3, #3
 801ec54:	4413      	add	r3, r2
 801ec56:	3314      	adds	r3, #20
 801ec58:	781b      	ldrb	r3, [r3, #0]
 801ec5a:	2b01      	cmp	r3, #1
 801ec5c:	d925      	bls.n	801ecaa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ec5e:	4b40      	ldr	r3, [pc, #256]	; (801ed60 <etharp_output+0x1fc>)
 801ec60:	781b      	ldrb	r3, [r3, #0]
 801ec62:	4619      	mov	r1, r3
 801ec64:	4a3f      	ldr	r2, [pc, #252]	; (801ed64 <etharp_output+0x200>)
 801ec66:	460b      	mov	r3, r1
 801ec68:	005b      	lsls	r3, r3, #1
 801ec6a:	440b      	add	r3, r1
 801ec6c:	00db      	lsls	r3, r3, #3
 801ec6e:	4413      	add	r3, r2
 801ec70:	3308      	adds	r3, #8
 801ec72:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ec74:	68fa      	ldr	r2, [r7, #12]
 801ec76:	429a      	cmp	r2, r3
 801ec78:	d117      	bne.n	801ecaa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ec7a:	69bb      	ldr	r3, [r7, #24]
 801ec7c:	681a      	ldr	r2, [r3, #0]
 801ec7e:	4b38      	ldr	r3, [pc, #224]	; (801ed60 <etharp_output+0x1fc>)
 801ec80:	781b      	ldrb	r3, [r3, #0]
 801ec82:	4618      	mov	r0, r3
 801ec84:	4937      	ldr	r1, [pc, #220]	; (801ed64 <etharp_output+0x200>)
 801ec86:	4603      	mov	r3, r0
 801ec88:	005b      	lsls	r3, r3, #1
 801ec8a:	4403      	add	r3, r0
 801ec8c:	00db      	lsls	r3, r3, #3
 801ec8e:	440b      	add	r3, r1
 801ec90:	3304      	adds	r3, #4
 801ec92:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ec94:	429a      	cmp	r2, r3
 801ec96:	d108      	bne.n	801ecaa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ec98:	4b31      	ldr	r3, [pc, #196]	; (801ed60 <etharp_output+0x1fc>)
 801ec9a:	781b      	ldrb	r3, [r3, #0]
 801ec9c:	461a      	mov	r2, r3
 801ec9e:	68b9      	ldr	r1, [r7, #8]
 801eca0:	68f8      	ldr	r0, [r7, #12]
 801eca2:	f7ff fec5 	bl	801ea30 <etharp_output_to_arp_index>
 801eca6:	4603      	mov	r3, r0
 801eca8:	e04a      	b.n	801ed40 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ecaa:	2300      	movs	r3, #0
 801ecac:	75fb      	strb	r3, [r7, #23]
 801ecae:	e031      	b.n	801ed14 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ecb0:	7dfa      	ldrb	r2, [r7, #23]
 801ecb2:	492c      	ldr	r1, [pc, #176]	; (801ed64 <etharp_output+0x200>)
 801ecb4:	4613      	mov	r3, r2
 801ecb6:	005b      	lsls	r3, r3, #1
 801ecb8:	4413      	add	r3, r2
 801ecba:	00db      	lsls	r3, r3, #3
 801ecbc:	440b      	add	r3, r1
 801ecbe:	3314      	adds	r3, #20
 801ecc0:	781b      	ldrb	r3, [r3, #0]
 801ecc2:	2b01      	cmp	r3, #1
 801ecc4:	d923      	bls.n	801ed0e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ecc6:	7dfa      	ldrb	r2, [r7, #23]
 801ecc8:	4926      	ldr	r1, [pc, #152]	; (801ed64 <etharp_output+0x200>)
 801ecca:	4613      	mov	r3, r2
 801eccc:	005b      	lsls	r3, r3, #1
 801ecce:	4413      	add	r3, r2
 801ecd0:	00db      	lsls	r3, r3, #3
 801ecd2:	440b      	add	r3, r1
 801ecd4:	3308      	adds	r3, #8
 801ecd6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ecd8:	68fa      	ldr	r2, [r7, #12]
 801ecda:	429a      	cmp	r2, r3
 801ecdc:	d117      	bne.n	801ed0e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ecde:	69bb      	ldr	r3, [r7, #24]
 801ece0:	6819      	ldr	r1, [r3, #0]
 801ece2:	7dfa      	ldrb	r2, [r7, #23]
 801ece4:	481f      	ldr	r0, [pc, #124]	; (801ed64 <etharp_output+0x200>)
 801ece6:	4613      	mov	r3, r2
 801ece8:	005b      	lsls	r3, r3, #1
 801ecea:	4413      	add	r3, r2
 801ecec:	00db      	lsls	r3, r3, #3
 801ecee:	4403      	add	r3, r0
 801ecf0:	3304      	adds	r3, #4
 801ecf2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ecf4:	4299      	cmp	r1, r3
 801ecf6:	d10a      	bne.n	801ed0e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ecf8:	4a19      	ldr	r2, [pc, #100]	; (801ed60 <etharp_output+0x1fc>)
 801ecfa:	7dfb      	ldrb	r3, [r7, #23]
 801ecfc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ecfe:	7dfb      	ldrb	r3, [r7, #23]
 801ed00:	461a      	mov	r2, r3
 801ed02:	68b9      	ldr	r1, [r7, #8]
 801ed04:	68f8      	ldr	r0, [r7, #12]
 801ed06:	f7ff fe93 	bl	801ea30 <etharp_output_to_arp_index>
 801ed0a:	4603      	mov	r3, r0
 801ed0c:	e018      	b.n	801ed40 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ed0e:	7dfb      	ldrb	r3, [r7, #23]
 801ed10:	3301      	adds	r3, #1
 801ed12:	75fb      	strb	r3, [r7, #23]
 801ed14:	7dfb      	ldrb	r3, [r7, #23]
 801ed16:	2b09      	cmp	r3, #9
 801ed18:	d9ca      	bls.n	801ecb0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ed1a:	68ba      	ldr	r2, [r7, #8]
 801ed1c:	69b9      	ldr	r1, [r7, #24]
 801ed1e:	68f8      	ldr	r0, [r7, #12]
 801ed20:	f000 f822 	bl	801ed68 <etharp_query>
 801ed24:	4603      	mov	r3, r0
 801ed26:	e00b      	b.n	801ed40 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ed2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ed32:	9300      	str	r3, [sp, #0]
 801ed34:	69fb      	ldr	r3, [r7, #28]
 801ed36:	68b9      	ldr	r1, [r7, #8]
 801ed38:	68f8      	ldr	r0, [r7, #12]
 801ed3a:	f001 fe8d 	bl	8020a58 <ethernet_output>
 801ed3e:	4603      	mov	r3, r0
}
 801ed40:	4618      	mov	r0, r3
 801ed42:	3720      	adds	r7, #32
 801ed44:	46bd      	mov	sp, r7
 801ed46:	bd80      	pop	{r7, pc}
 801ed48:	08028fec 	.word	0x08028fec
 801ed4c:	0802913c 	.word	0x0802913c
 801ed50:	08029064 	.word	0x08029064
 801ed54:	0802918c 	.word	0x0802918c
 801ed58:	0802912c 	.word	0x0802912c
 801ed5c:	080299c8 	.word	0x080299c8
 801ed60:	20014494 	.word	0x20014494
 801ed64:	200143a4 	.word	0x200143a4

0801ed68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ed68:	b580      	push	{r7, lr}
 801ed6a:	b08c      	sub	sp, #48	; 0x30
 801ed6c:	af02      	add	r7, sp, #8
 801ed6e:	60f8      	str	r0, [r7, #12]
 801ed70:	60b9      	str	r1, [r7, #8]
 801ed72:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	332a      	adds	r3, #42	; 0x2a
 801ed78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ed7a:	23ff      	movs	r3, #255	; 0xff
 801ed7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801ed80:	2300      	movs	r3, #0
 801ed82:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ed84:	68bb      	ldr	r3, [r7, #8]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	68f9      	ldr	r1, [r7, #12]
 801ed8a:	4618      	mov	r0, r3
 801ed8c:	f000 fe32 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801ed90:	4603      	mov	r3, r0
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d10c      	bne.n	801edb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ed96:	68bb      	ldr	r3, [r7, #8]
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ed9e:	2be0      	cmp	r3, #224	; 0xe0
 801eda0:	d006      	beq.n	801edb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801eda2:	68bb      	ldr	r3, [r7, #8]
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d003      	beq.n	801edb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801eda8:	68bb      	ldr	r3, [r7, #8]
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d102      	bne.n	801edb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801edb0:	f06f 030f 	mvn.w	r3, #15
 801edb4:	e101      	b.n	801efba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801edb6:	68fa      	ldr	r2, [r7, #12]
 801edb8:	2101      	movs	r1, #1
 801edba:	68b8      	ldr	r0, [r7, #8]
 801edbc:	f7ff fb5c 	bl	801e478 <etharp_find_entry>
 801edc0:	4603      	mov	r3, r0
 801edc2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801edc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801edc8:	2b00      	cmp	r3, #0
 801edca:	da02      	bge.n	801edd2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801edcc:	8a7b      	ldrh	r3, [r7, #18]
 801edce:	b25b      	sxtb	r3, r3
 801edd0:	e0f3      	b.n	801efba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801edd2:	8a7b      	ldrh	r3, [r7, #18]
 801edd4:	2b7e      	cmp	r3, #126	; 0x7e
 801edd6:	d906      	bls.n	801ede6 <etharp_query+0x7e>
 801edd8:	4b7a      	ldr	r3, [pc, #488]	; (801efc4 <etharp_query+0x25c>)
 801edda:	f240 32c1 	movw	r2, #961	; 0x3c1
 801edde:	497a      	ldr	r1, [pc, #488]	; (801efc8 <etharp_query+0x260>)
 801ede0:	487a      	ldr	r0, [pc, #488]	; (801efcc <etharp_query+0x264>)
 801ede2:	f002 fee7 	bl	8021bb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ede6:	8a7b      	ldrh	r3, [r7, #18]
 801ede8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801edea:	7c7a      	ldrb	r2, [r7, #17]
 801edec:	4978      	ldr	r1, [pc, #480]	; (801efd0 <etharp_query+0x268>)
 801edee:	4613      	mov	r3, r2
 801edf0:	005b      	lsls	r3, r3, #1
 801edf2:	4413      	add	r3, r2
 801edf4:	00db      	lsls	r3, r3, #3
 801edf6:	440b      	add	r3, r1
 801edf8:	3314      	adds	r3, #20
 801edfa:	781b      	ldrb	r3, [r3, #0]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d115      	bne.n	801ee2c <etharp_query+0xc4>
    is_new_entry = 1;
 801ee00:	2301      	movs	r3, #1
 801ee02:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ee04:	7c7a      	ldrb	r2, [r7, #17]
 801ee06:	4972      	ldr	r1, [pc, #456]	; (801efd0 <etharp_query+0x268>)
 801ee08:	4613      	mov	r3, r2
 801ee0a:	005b      	lsls	r3, r3, #1
 801ee0c:	4413      	add	r3, r2
 801ee0e:	00db      	lsls	r3, r3, #3
 801ee10:	440b      	add	r3, r1
 801ee12:	3314      	adds	r3, #20
 801ee14:	2201      	movs	r2, #1
 801ee16:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ee18:	7c7a      	ldrb	r2, [r7, #17]
 801ee1a:	496d      	ldr	r1, [pc, #436]	; (801efd0 <etharp_query+0x268>)
 801ee1c:	4613      	mov	r3, r2
 801ee1e:	005b      	lsls	r3, r3, #1
 801ee20:	4413      	add	r3, r2
 801ee22:	00db      	lsls	r3, r3, #3
 801ee24:	440b      	add	r3, r1
 801ee26:	3308      	adds	r3, #8
 801ee28:	68fa      	ldr	r2, [r7, #12]
 801ee2a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ee2c:	7c7a      	ldrb	r2, [r7, #17]
 801ee2e:	4968      	ldr	r1, [pc, #416]	; (801efd0 <etharp_query+0x268>)
 801ee30:	4613      	mov	r3, r2
 801ee32:	005b      	lsls	r3, r3, #1
 801ee34:	4413      	add	r3, r2
 801ee36:	00db      	lsls	r3, r3, #3
 801ee38:	440b      	add	r3, r1
 801ee3a:	3314      	adds	r3, #20
 801ee3c:	781b      	ldrb	r3, [r3, #0]
 801ee3e:	2b01      	cmp	r3, #1
 801ee40:	d011      	beq.n	801ee66 <etharp_query+0xfe>
 801ee42:	7c7a      	ldrb	r2, [r7, #17]
 801ee44:	4962      	ldr	r1, [pc, #392]	; (801efd0 <etharp_query+0x268>)
 801ee46:	4613      	mov	r3, r2
 801ee48:	005b      	lsls	r3, r3, #1
 801ee4a:	4413      	add	r3, r2
 801ee4c:	00db      	lsls	r3, r3, #3
 801ee4e:	440b      	add	r3, r1
 801ee50:	3314      	adds	r3, #20
 801ee52:	781b      	ldrb	r3, [r3, #0]
 801ee54:	2b01      	cmp	r3, #1
 801ee56:	d806      	bhi.n	801ee66 <etharp_query+0xfe>
 801ee58:	4b5a      	ldr	r3, [pc, #360]	; (801efc4 <etharp_query+0x25c>)
 801ee5a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ee5e:	495d      	ldr	r1, [pc, #372]	; (801efd4 <etharp_query+0x26c>)
 801ee60:	485a      	ldr	r0, [pc, #360]	; (801efcc <etharp_query+0x264>)
 801ee62:	f002 fea7 	bl	8021bb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ee66:	6a3b      	ldr	r3, [r7, #32]
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d102      	bne.n	801ee72 <etharp_query+0x10a>
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d10c      	bne.n	801ee8c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ee72:	68b9      	ldr	r1, [r7, #8]
 801ee74:	68f8      	ldr	r0, [r7, #12]
 801ee76:	f000 f963 	bl	801f140 <etharp_request>
 801ee7a:	4603      	mov	r3, r0
 801ee7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d102      	bne.n	801ee8c <etharp_query+0x124>
      return result;
 801ee86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ee8a:	e096      	b.n	801efba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d106      	bne.n	801eea0 <etharp_query+0x138>
 801ee92:	4b4c      	ldr	r3, [pc, #304]	; (801efc4 <etharp_query+0x25c>)
 801ee94:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ee98:	494f      	ldr	r1, [pc, #316]	; (801efd8 <etharp_query+0x270>)
 801ee9a:	484c      	ldr	r0, [pc, #304]	; (801efcc <etharp_query+0x264>)
 801ee9c:	f002 fe8a 	bl	8021bb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801eea0:	7c7a      	ldrb	r2, [r7, #17]
 801eea2:	494b      	ldr	r1, [pc, #300]	; (801efd0 <etharp_query+0x268>)
 801eea4:	4613      	mov	r3, r2
 801eea6:	005b      	lsls	r3, r3, #1
 801eea8:	4413      	add	r3, r2
 801eeaa:	00db      	lsls	r3, r3, #3
 801eeac:	440b      	add	r3, r1
 801eeae:	3314      	adds	r3, #20
 801eeb0:	781b      	ldrb	r3, [r3, #0]
 801eeb2:	2b01      	cmp	r3, #1
 801eeb4:	d917      	bls.n	801eee6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801eeb6:	4a49      	ldr	r2, [pc, #292]	; (801efdc <etharp_query+0x274>)
 801eeb8:	7c7b      	ldrb	r3, [r7, #17]
 801eeba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801eebc:	7c7a      	ldrb	r2, [r7, #17]
 801eebe:	4613      	mov	r3, r2
 801eec0:	005b      	lsls	r3, r3, #1
 801eec2:	4413      	add	r3, r2
 801eec4:	00db      	lsls	r3, r3, #3
 801eec6:	3308      	adds	r3, #8
 801eec8:	4a41      	ldr	r2, [pc, #260]	; (801efd0 <etharp_query+0x268>)
 801eeca:	4413      	add	r3, r2
 801eecc:	3304      	adds	r3, #4
 801eece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eed2:	9200      	str	r2, [sp, #0]
 801eed4:	697a      	ldr	r2, [r7, #20]
 801eed6:	6879      	ldr	r1, [r7, #4]
 801eed8:	68f8      	ldr	r0, [r7, #12]
 801eeda:	f001 fdbd 	bl	8020a58 <ethernet_output>
 801eede:	4603      	mov	r3, r0
 801eee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801eee4:	e067      	b.n	801efb6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801eee6:	7c7a      	ldrb	r2, [r7, #17]
 801eee8:	4939      	ldr	r1, [pc, #228]	; (801efd0 <etharp_query+0x268>)
 801eeea:	4613      	mov	r3, r2
 801eeec:	005b      	lsls	r3, r3, #1
 801eeee:	4413      	add	r3, r2
 801eef0:	00db      	lsls	r3, r3, #3
 801eef2:	440b      	add	r3, r1
 801eef4:	3314      	adds	r3, #20
 801eef6:	781b      	ldrb	r3, [r3, #0]
 801eef8:	2b01      	cmp	r3, #1
 801eefa:	d15c      	bne.n	801efb6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801eefc:	2300      	movs	r3, #0
 801eefe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ef04:	e01c      	b.n	801ef40 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ef06:	69fb      	ldr	r3, [r7, #28]
 801ef08:	895a      	ldrh	r2, [r3, #10]
 801ef0a:	69fb      	ldr	r3, [r7, #28]
 801ef0c:	891b      	ldrh	r3, [r3, #8]
 801ef0e:	429a      	cmp	r2, r3
 801ef10:	d10a      	bne.n	801ef28 <etharp_query+0x1c0>
 801ef12:	69fb      	ldr	r3, [r7, #28]
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d006      	beq.n	801ef28 <etharp_query+0x1c0>
 801ef1a:	4b2a      	ldr	r3, [pc, #168]	; (801efc4 <etharp_query+0x25c>)
 801ef1c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ef20:	492f      	ldr	r1, [pc, #188]	; (801efe0 <etharp_query+0x278>)
 801ef22:	482a      	ldr	r0, [pc, #168]	; (801efcc <etharp_query+0x264>)
 801ef24:	f002 fe46 	bl	8021bb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ef28:	69fb      	ldr	r3, [r7, #28]
 801ef2a:	7b1b      	ldrb	r3, [r3, #12]
 801ef2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d002      	beq.n	801ef3a <etharp_query+0x1d2>
        copy_needed = 1;
 801ef34:	2301      	movs	r3, #1
 801ef36:	61bb      	str	r3, [r7, #24]
        break;
 801ef38:	e005      	b.n	801ef46 <etharp_query+0x1de>
      }
      p = p->next;
 801ef3a:	69fb      	ldr	r3, [r7, #28]
 801ef3c:	681b      	ldr	r3, [r3, #0]
 801ef3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ef40:	69fb      	ldr	r3, [r7, #28]
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d1df      	bne.n	801ef06 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ef46:	69bb      	ldr	r3, [r7, #24]
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d007      	beq.n	801ef5c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ef4c:	687a      	ldr	r2, [r7, #4]
 801ef4e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ef52:	200e      	movs	r0, #14
 801ef54:	f7f6 f922 	bl	801519c <pbuf_clone>
 801ef58:	61f8      	str	r0, [r7, #28]
 801ef5a:	e004      	b.n	801ef66 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ef60:	69f8      	ldr	r0, [r7, #28]
 801ef62:	f7f5 fe11 	bl	8014b88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ef66:	69fb      	ldr	r3, [r7, #28]
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d021      	beq.n	801efb0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ef6c:	7c7a      	ldrb	r2, [r7, #17]
 801ef6e:	4918      	ldr	r1, [pc, #96]	; (801efd0 <etharp_query+0x268>)
 801ef70:	4613      	mov	r3, r2
 801ef72:	005b      	lsls	r3, r3, #1
 801ef74:	4413      	add	r3, r2
 801ef76:	00db      	lsls	r3, r3, #3
 801ef78:	440b      	add	r3, r1
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d00a      	beq.n	801ef96 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ef80:	7c7a      	ldrb	r2, [r7, #17]
 801ef82:	4913      	ldr	r1, [pc, #76]	; (801efd0 <etharp_query+0x268>)
 801ef84:	4613      	mov	r3, r2
 801ef86:	005b      	lsls	r3, r3, #1
 801ef88:	4413      	add	r3, r2
 801ef8a:	00db      	lsls	r3, r3, #3
 801ef8c:	440b      	add	r3, r1
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	4618      	mov	r0, r3
 801ef92:	f7f5 fd53 	bl	8014a3c <pbuf_free>
      }
      arp_table[i].q = p;
 801ef96:	7c7a      	ldrb	r2, [r7, #17]
 801ef98:	490d      	ldr	r1, [pc, #52]	; (801efd0 <etharp_query+0x268>)
 801ef9a:	4613      	mov	r3, r2
 801ef9c:	005b      	lsls	r3, r3, #1
 801ef9e:	4413      	add	r3, r2
 801efa0:	00db      	lsls	r3, r3, #3
 801efa2:	440b      	add	r3, r1
 801efa4:	69fa      	ldr	r2, [r7, #28]
 801efa6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801efa8:	2300      	movs	r3, #0
 801efaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801efae:	e002      	b.n	801efb6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801efb0:	23ff      	movs	r3, #255	; 0xff
 801efb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801efb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801efba:	4618      	mov	r0, r3
 801efbc:	3728      	adds	r7, #40	; 0x28
 801efbe:	46bd      	mov	sp, r7
 801efc0:	bd80      	pop	{r7, pc}
 801efc2:	bf00      	nop
 801efc4:	08028fec 	.word	0x08028fec
 801efc8:	08029198 	.word	0x08029198
 801efcc:	08029064 	.word	0x08029064
 801efd0:	200143a4 	.word	0x200143a4
 801efd4:	080291a8 	.word	0x080291a8
 801efd8:	0802918c 	.word	0x0802918c
 801efdc:	20014494 	.word	0x20014494
 801efe0:	080291d0 	.word	0x080291d0

0801efe4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801efe4:	b580      	push	{r7, lr}
 801efe6:	b08a      	sub	sp, #40	; 0x28
 801efe8:	af02      	add	r7, sp, #8
 801efea:	60f8      	str	r0, [r7, #12]
 801efec:	60b9      	str	r1, [r7, #8]
 801efee:	607a      	str	r2, [r7, #4]
 801eff0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801eff2:	2300      	movs	r3, #0
 801eff4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801eff6:	68fb      	ldr	r3, [r7, #12]
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d106      	bne.n	801f00a <etharp_raw+0x26>
 801effc:	4b3a      	ldr	r3, [pc, #232]	; (801f0e8 <etharp_raw+0x104>)
 801effe:	f240 4257 	movw	r2, #1111	; 0x457
 801f002:	493a      	ldr	r1, [pc, #232]	; (801f0ec <etharp_raw+0x108>)
 801f004:	483a      	ldr	r0, [pc, #232]	; (801f0f0 <etharp_raw+0x10c>)
 801f006:	f002 fdd5 	bl	8021bb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f00a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f00e:	211c      	movs	r1, #28
 801f010:	200e      	movs	r0, #14
 801f012:	f7f5 f9fd 	bl	8014410 <pbuf_alloc>
 801f016:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f018:	69bb      	ldr	r3, [r7, #24]
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	d102      	bne.n	801f024 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801f01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f022:	e05d      	b.n	801f0e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f024:	69bb      	ldr	r3, [r7, #24]
 801f026:	895b      	ldrh	r3, [r3, #10]
 801f028:	2b1b      	cmp	r3, #27
 801f02a:	d806      	bhi.n	801f03a <etharp_raw+0x56>
 801f02c:	4b2e      	ldr	r3, [pc, #184]	; (801f0e8 <etharp_raw+0x104>)
 801f02e:	f240 4262 	movw	r2, #1122	; 0x462
 801f032:	4930      	ldr	r1, [pc, #192]	; (801f0f4 <etharp_raw+0x110>)
 801f034:	482e      	ldr	r0, [pc, #184]	; (801f0f0 <etharp_raw+0x10c>)
 801f036:	f002 fdbd 	bl	8021bb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f03a:	69bb      	ldr	r3, [r7, #24]
 801f03c:	685b      	ldr	r3, [r3, #4]
 801f03e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f040:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801f042:	4618      	mov	r0, r3
 801f044:	f7f3 f93a 	bl	80122bc <lwip_htons>
 801f048:	4603      	mov	r3, r0
 801f04a:	461a      	mov	r2, r3
 801f04c:	697b      	ldr	r3, [r7, #20]
 801f04e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f056:	2b06      	cmp	r3, #6
 801f058:	d006      	beq.n	801f068 <etharp_raw+0x84>
 801f05a:	4b23      	ldr	r3, [pc, #140]	; (801f0e8 <etharp_raw+0x104>)
 801f05c:	f240 4269 	movw	r2, #1129	; 0x469
 801f060:	4925      	ldr	r1, [pc, #148]	; (801f0f8 <etharp_raw+0x114>)
 801f062:	4823      	ldr	r0, [pc, #140]	; (801f0f0 <etharp_raw+0x10c>)
 801f064:	f002 fda6 	bl	8021bb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f068:	697b      	ldr	r3, [r7, #20]
 801f06a:	3308      	adds	r3, #8
 801f06c:	2206      	movs	r2, #6
 801f06e:	6839      	ldr	r1, [r7, #0]
 801f070:	4618      	mov	r0, r3
 801f072:	f002 f85b 	bl	802112c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f076:	697b      	ldr	r3, [r7, #20]
 801f078:	3312      	adds	r3, #18
 801f07a:	2206      	movs	r2, #6
 801f07c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f07e:	4618      	mov	r0, r3
 801f080:	f002 f854 	bl	802112c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801f084:	697b      	ldr	r3, [r7, #20]
 801f086:	330e      	adds	r3, #14
 801f088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f08a:	6812      	ldr	r2, [r2, #0]
 801f08c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f08e:	697b      	ldr	r3, [r7, #20]
 801f090:	3318      	adds	r3, #24
 801f092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f094:	6812      	ldr	r2, [r2, #0]
 801f096:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f098:	697b      	ldr	r3, [r7, #20]
 801f09a:	2200      	movs	r2, #0
 801f09c:	701a      	strb	r2, [r3, #0]
 801f09e:	2200      	movs	r2, #0
 801f0a0:	f042 0201 	orr.w	r2, r2, #1
 801f0a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f0a6:	697b      	ldr	r3, [r7, #20]
 801f0a8:	2200      	movs	r2, #0
 801f0aa:	f042 0208 	orr.w	r2, r2, #8
 801f0ae:	709a      	strb	r2, [r3, #2]
 801f0b0:	2200      	movs	r2, #0
 801f0b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f0b4:	697b      	ldr	r3, [r7, #20]
 801f0b6:	2206      	movs	r2, #6
 801f0b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f0ba:	697b      	ldr	r3, [r7, #20]
 801f0bc:	2204      	movs	r2, #4
 801f0be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f0c0:	f640 0306 	movw	r3, #2054	; 0x806
 801f0c4:	9300      	str	r3, [sp, #0]
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	68ba      	ldr	r2, [r7, #8]
 801f0ca:	69b9      	ldr	r1, [r7, #24]
 801f0cc:	68f8      	ldr	r0, [r7, #12]
 801f0ce:	f001 fcc3 	bl	8020a58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801f0d2:	69b8      	ldr	r0, [r7, #24]
 801f0d4:	f7f5 fcb2 	bl	8014a3c <pbuf_free>
  p = NULL;
 801f0d8:	2300      	movs	r3, #0
 801f0da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f0dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f0e0:	4618      	mov	r0, r3
 801f0e2:	3720      	adds	r7, #32
 801f0e4:	46bd      	mov	sp, r7
 801f0e6:	bd80      	pop	{r7, pc}
 801f0e8:	08028fec 	.word	0x08028fec
 801f0ec:	0802913c 	.word	0x0802913c
 801f0f0:	08029064 	.word	0x08029064
 801f0f4:	080291ec 	.word	0x080291ec
 801f0f8:	08029220 	.word	0x08029220

0801f0fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801f0fc:	b580      	push	{r7, lr}
 801f0fe:	b088      	sub	sp, #32
 801f100:	af04      	add	r7, sp, #16
 801f102:	60f8      	str	r0, [r7, #12]
 801f104:	60b9      	str	r1, [r7, #8]
 801f106:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f108:	68fb      	ldr	r3, [r7, #12]
 801f10a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801f114:	68fb      	ldr	r3, [r7, #12]
 801f116:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f118:	2201      	movs	r2, #1
 801f11a:	9203      	str	r2, [sp, #12]
 801f11c:	68ba      	ldr	r2, [r7, #8]
 801f11e:	9202      	str	r2, [sp, #8]
 801f120:	4a06      	ldr	r2, [pc, #24]	; (801f13c <etharp_request_dst+0x40>)
 801f122:	9201      	str	r2, [sp, #4]
 801f124:	9300      	str	r3, [sp, #0]
 801f126:	4603      	mov	r3, r0
 801f128:	687a      	ldr	r2, [r7, #4]
 801f12a:	68f8      	ldr	r0, [r7, #12]
 801f12c:	f7ff ff5a 	bl	801efe4 <etharp_raw>
 801f130:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f132:	4618      	mov	r0, r3
 801f134:	3710      	adds	r7, #16
 801f136:	46bd      	mov	sp, r7
 801f138:	bd80      	pop	{r7, pc}
 801f13a:	bf00      	nop
 801f13c:	080299d0 	.word	0x080299d0

0801f140 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f140:	b580      	push	{r7, lr}
 801f142:	b082      	sub	sp, #8
 801f144:	af00      	add	r7, sp, #0
 801f146:	6078      	str	r0, [r7, #4]
 801f148:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f14a:	4a05      	ldr	r2, [pc, #20]	; (801f160 <etharp_request+0x20>)
 801f14c:	6839      	ldr	r1, [r7, #0]
 801f14e:	6878      	ldr	r0, [r7, #4]
 801f150:	f7ff ffd4 	bl	801f0fc <etharp_request_dst>
 801f154:	4603      	mov	r3, r0
}
 801f156:	4618      	mov	r0, r3
 801f158:	3708      	adds	r7, #8
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}
 801f15e:	bf00      	nop
 801f160:	080299c8 	.word	0x080299c8

0801f164 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f164:	b580      	push	{r7, lr}
 801f166:	b08e      	sub	sp, #56	; 0x38
 801f168:	af04      	add	r7, sp, #16
 801f16a:	6078      	str	r0, [r7, #4]
 801f16c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801f16e:	4b7c      	ldr	r3, [pc, #496]	; (801f360 <icmp_input+0x1fc>)
 801f170:	689b      	ldr	r3, [r3, #8]
 801f172:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f176:	781b      	ldrb	r3, [r3, #0]
 801f178:	f003 030f 	and.w	r3, r3, #15
 801f17c:	b2db      	uxtb	r3, r3
 801f17e:	009b      	lsls	r3, r3, #2
 801f180:	b2db      	uxtb	r3, r3
 801f182:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801f184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f186:	2b13      	cmp	r3, #19
 801f188:	f240 80d2 	bls.w	801f330 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	895b      	ldrh	r3, [r3, #10]
 801f190:	2b03      	cmp	r3, #3
 801f192:	f240 80cf 	bls.w	801f334 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	685b      	ldr	r3, [r3, #4]
 801f19a:	781b      	ldrb	r3, [r3, #0]
 801f19c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	685b      	ldr	r3, [r3, #4]
 801f1a4:	785b      	ldrb	r3, [r3, #1]
 801f1a6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f1aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	f000 80b7 	beq.w	801f322 <icmp_input+0x1be>
 801f1b4:	2b08      	cmp	r3, #8
 801f1b6:	f040 80b7 	bne.w	801f328 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801f1ba:	4b6a      	ldr	r3, [pc, #424]	; (801f364 <icmp_input+0x200>)
 801f1bc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f1be:	4b68      	ldr	r3, [pc, #416]	; (801f360 <icmp_input+0x1fc>)
 801f1c0:	695b      	ldr	r3, [r3, #20]
 801f1c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f1c6:	2be0      	cmp	r3, #224	; 0xe0
 801f1c8:	f000 80bb 	beq.w	801f342 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f1cc:	4b64      	ldr	r3, [pc, #400]	; (801f360 <icmp_input+0x1fc>)
 801f1ce:	695b      	ldr	r3, [r3, #20]
 801f1d0:	4a63      	ldr	r2, [pc, #396]	; (801f360 <icmp_input+0x1fc>)
 801f1d2:	6812      	ldr	r2, [r2, #0]
 801f1d4:	4611      	mov	r1, r2
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f000 fc0c 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801f1dc:	4603      	mov	r3, r0
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	f040 80b1 	bne.w	801f346 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	891b      	ldrh	r3, [r3, #8]
 801f1e8:	2b07      	cmp	r3, #7
 801f1ea:	f240 80a5 	bls.w	801f338 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f1ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f1f0:	330e      	adds	r3, #14
 801f1f2:	4619      	mov	r1, r3
 801f1f4:	6878      	ldr	r0, [r7, #4]
 801f1f6:	f7f5 fb59 	bl	80148ac <pbuf_add_header>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d04b      	beq.n	801f298 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	891a      	ldrh	r2, [r3, #8]
 801f204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f206:	4413      	add	r3, r2
 801f208:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	891b      	ldrh	r3, [r3, #8]
 801f20e:	8b7a      	ldrh	r2, [r7, #26]
 801f210:	429a      	cmp	r2, r3
 801f212:	f0c0 809a 	bcc.w	801f34a <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f216:	8b7b      	ldrh	r3, [r7, #26]
 801f218:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f21c:	4619      	mov	r1, r3
 801f21e:	200e      	movs	r0, #14
 801f220:	f7f5 f8f6 	bl	8014410 <pbuf_alloc>
 801f224:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f226:	697b      	ldr	r3, [r7, #20]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	f000 8090 	beq.w	801f34e <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f22e:	697b      	ldr	r3, [r7, #20]
 801f230:	895b      	ldrh	r3, [r3, #10]
 801f232:	461a      	mov	r2, r3
 801f234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f236:	3308      	adds	r3, #8
 801f238:	429a      	cmp	r2, r3
 801f23a:	d203      	bcs.n	801f244 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f23c:	6978      	ldr	r0, [r7, #20]
 801f23e:	f7f5 fbfd 	bl	8014a3c <pbuf_free>
          goto icmperr;
 801f242:	e085      	b.n	801f350 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f244:	697b      	ldr	r3, [r7, #20]
 801f246:	685b      	ldr	r3, [r3, #4]
 801f248:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f24a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f24c:	4618      	mov	r0, r3
 801f24e:	f001 ff6d 	bl	802112c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f254:	4619      	mov	r1, r3
 801f256:	6978      	ldr	r0, [r7, #20]
 801f258:	f7f5 fb38 	bl	80148cc <pbuf_remove_header>
 801f25c:	4603      	mov	r3, r0
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d009      	beq.n	801f276 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f262:	4b41      	ldr	r3, [pc, #260]	; (801f368 <icmp_input+0x204>)
 801f264:	22b6      	movs	r2, #182	; 0xb6
 801f266:	4941      	ldr	r1, [pc, #260]	; (801f36c <icmp_input+0x208>)
 801f268:	4841      	ldr	r0, [pc, #260]	; (801f370 <icmp_input+0x20c>)
 801f26a:	f002 fca3 	bl	8021bb4 <iprintf>
          pbuf_free(r);
 801f26e:	6978      	ldr	r0, [r7, #20]
 801f270:	f7f5 fbe4 	bl	8014a3c <pbuf_free>
          goto icmperr;
 801f274:	e06c      	b.n	801f350 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f276:	6879      	ldr	r1, [r7, #4]
 801f278:	6978      	ldr	r0, [r7, #20]
 801f27a:	f7f5 fd13 	bl	8014ca4 <pbuf_copy>
 801f27e:	4603      	mov	r3, r0
 801f280:	2b00      	cmp	r3, #0
 801f282:	d003      	beq.n	801f28c <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f284:	6978      	ldr	r0, [r7, #20]
 801f286:	f7f5 fbd9 	bl	8014a3c <pbuf_free>
          goto icmperr;
 801f28a:	e061      	b.n	801f350 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 801f28c:	6878      	ldr	r0, [r7, #4]
 801f28e:	f7f5 fbd5 	bl	8014a3c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f292:	697b      	ldr	r3, [r7, #20]
 801f294:	607b      	str	r3, [r7, #4]
 801f296:	e00f      	b.n	801f2b8 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f29a:	330e      	adds	r3, #14
 801f29c:	4619      	mov	r1, r3
 801f29e:	6878      	ldr	r0, [r7, #4]
 801f2a0:	f7f5 fb14 	bl	80148cc <pbuf_remove_header>
 801f2a4:	4603      	mov	r3, r0
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d006      	beq.n	801f2b8 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f2aa:	4b2f      	ldr	r3, [pc, #188]	; (801f368 <icmp_input+0x204>)
 801f2ac:	22c7      	movs	r2, #199	; 0xc7
 801f2ae:	4931      	ldr	r1, [pc, #196]	; (801f374 <icmp_input+0x210>)
 801f2b0:	482f      	ldr	r0, [pc, #188]	; (801f370 <icmp_input+0x20c>)
 801f2b2:	f002 fc7f 	bl	8021bb4 <iprintf>
          goto icmperr;
 801f2b6:	e04b      	b.n	801f350 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	685b      	ldr	r3, [r3, #4]
 801f2bc:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f2be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f2c0:	4619      	mov	r1, r3
 801f2c2:	6878      	ldr	r0, [r7, #4]
 801f2c4:	f7f5 faf2 	bl	80148ac <pbuf_add_header>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d12b      	bne.n	801f326 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	685b      	ldr	r3, [r3, #4]
 801f2d2:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f2d4:	69fb      	ldr	r3, [r7, #28]
 801f2d6:	681a      	ldr	r2, [r3, #0]
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f2dc:	4b20      	ldr	r3, [pc, #128]	; (801f360 <icmp_input+0x1fc>)
 801f2de:	691a      	ldr	r2, [r3, #16]
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f2e4:	693b      	ldr	r3, [r7, #16]
 801f2e6:	2200      	movs	r2, #0
 801f2e8:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f2ea:	693b      	ldr	r3, [r7, #16]
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	709a      	strb	r2, [r3, #2]
 801f2f0:	2200      	movs	r2, #0
 801f2f2:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f2f4:	68fb      	ldr	r3, [r7, #12]
 801f2f6:	22ff      	movs	r2, #255	; 0xff
 801f2f8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f2fa:	68fb      	ldr	r3, [r7, #12]
 801f2fc:	2200      	movs	r2, #0
 801f2fe:	729a      	strb	r2, [r3, #10]
 801f300:	2200      	movs	r2, #0
 801f302:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f304:	683b      	ldr	r3, [r7, #0]
 801f306:	9302      	str	r3, [sp, #8]
 801f308:	2301      	movs	r3, #1
 801f30a:	9301      	str	r3, [sp, #4]
 801f30c:	2300      	movs	r3, #0
 801f30e:	9300      	str	r3, [sp, #0]
 801f310:	23ff      	movs	r3, #255	; 0xff
 801f312:	2200      	movs	r2, #0
 801f314:	69f9      	ldr	r1, [r7, #28]
 801f316:	6878      	ldr	r0, [r7, #4]
 801f318:	f000 fa94 	bl	801f844 <ip4_output_if>
 801f31c:	4603      	mov	r3, r0
 801f31e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f320:	e001      	b.n	801f326 <icmp_input+0x1c2>
      break;
 801f322:	bf00      	nop
 801f324:	e000      	b.n	801f328 <icmp_input+0x1c4>
      break;
 801f326:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f328:	6878      	ldr	r0, [r7, #4]
 801f32a:	f7f5 fb87 	bl	8014a3c <pbuf_free>
  return;
 801f32e:	e013      	b.n	801f358 <icmp_input+0x1f4>
    goto lenerr;
 801f330:	bf00      	nop
 801f332:	e002      	b.n	801f33a <icmp_input+0x1d6>
    goto lenerr;
 801f334:	bf00      	nop
 801f336:	e000      	b.n	801f33a <icmp_input+0x1d6>
        goto lenerr;
 801f338:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f33a:	6878      	ldr	r0, [r7, #4]
 801f33c:	f7f5 fb7e 	bl	8014a3c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f340:	e00a      	b.n	801f358 <icmp_input+0x1f4>
        goto icmperr;
 801f342:	bf00      	nop
 801f344:	e004      	b.n	801f350 <icmp_input+0x1ec>
        goto icmperr;
 801f346:	bf00      	nop
 801f348:	e002      	b.n	801f350 <icmp_input+0x1ec>
          goto icmperr;
 801f34a:	bf00      	nop
 801f34c:	e000      	b.n	801f350 <icmp_input+0x1ec>
          goto icmperr;
 801f34e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f350:	6878      	ldr	r0, [r7, #4]
 801f352:	f7f5 fb73 	bl	8014a3c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f356:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f358:	3728      	adds	r7, #40	; 0x28
 801f35a:	46bd      	mov	sp, r7
 801f35c:	bd80      	pop	{r7, pc}
 801f35e:	bf00      	nop
 801f360:	20017794 	.word	0x20017794
 801f364:	200177a8 	.word	0x200177a8
 801f368:	08029264 	.word	0x08029264
 801f36c:	0802929c 	.word	0x0802929c
 801f370:	080292d4 	.word	0x080292d4
 801f374:	080292fc 	.word	0x080292fc

0801f378 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f378:	b580      	push	{r7, lr}
 801f37a:	b082      	sub	sp, #8
 801f37c:	af00      	add	r7, sp, #0
 801f37e:	6078      	str	r0, [r7, #4]
 801f380:	460b      	mov	r3, r1
 801f382:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801f384:	78fb      	ldrb	r3, [r7, #3]
 801f386:	461a      	mov	r2, r3
 801f388:	2103      	movs	r1, #3
 801f38a:	6878      	ldr	r0, [r7, #4]
 801f38c:	f000 f814 	bl	801f3b8 <icmp_send_response>
}
 801f390:	bf00      	nop
 801f392:	3708      	adds	r7, #8
 801f394:	46bd      	mov	sp, r7
 801f396:	bd80      	pop	{r7, pc}

0801f398 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f398:	b580      	push	{r7, lr}
 801f39a:	b082      	sub	sp, #8
 801f39c:	af00      	add	r7, sp, #0
 801f39e:	6078      	str	r0, [r7, #4]
 801f3a0:	460b      	mov	r3, r1
 801f3a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801f3a4:	78fb      	ldrb	r3, [r7, #3]
 801f3a6:	461a      	mov	r2, r3
 801f3a8:	210b      	movs	r1, #11
 801f3aa:	6878      	ldr	r0, [r7, #4]
 801f3ac:	f000 f804 	bl	801f3b8 <icmp_send_response>
}
 801f3b0:	bf00      	nop
 801f3b2:	3708      	adds	r7, #8
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}

0801f3b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b08c      	sub	sp, #48	; 0x30
 801f3bc:	af04      	add	r7, sp, #16
 801f3be:	6078      	str	r0, [r7, #4]
 801f3c0:	460b      	mov	r3, r1
 801f3c2:	70fb      	strb	r3, [r7, #3]
 801f3c4:	4613      	mov	r3, r2
 801f3c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f3c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f3cc:	2124      	movs	r1, #36	; 0x24
 801f3ce:	2022      	movs	r0, #34	; 0x22
 801f3d0:	f7f5 f81e 	bl	8014410 <pbuf_alloc>
 801f3d4:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801f3d6:	69bb      	ldr	r3, [r7, #24]
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d04c      	beq.n	801f476 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f3dc:	69bb      	ldr	r3, [r7, #24]
 801f3de:	895b      	ldrh	r3, [r3, #10]
 801f3e0:	2b23      	cmp	r3, #35	; 0x23
 801f3e2:	d806      	bhi.n	801f3f2 <icmp_send_response+0x3a>
 801f3e4:	4b26      	ldr	r3, [pc, #152]	; (801f480 <icmp_send_response+0xc8>)
 801f3e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801f3ea:	4926      	ldr	r1, [pc, #152]	; (801f484 <icmp_send_response+0xcc>)
 801f3ec:	4826      	ldr	r0, [pc, #152]	; (801f488 <icmp_send_response+0xd0>)
 801f3ee:	f002 fbe1 	bl	8021bb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	685b      	ldr	r3, [r3, #4]
 801f3f6:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f3f8:	69bb      	ldr	r3, [r7, #24]
 801f3fa:	685b      	ldr	r3, [r3, #4]
 801f3fc:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801f3fe:	693b      	ldr	r3, [r7, #16]
 801f400:	78fa      	ldrb	r2, [r7, #3]
 801f402:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f404:	693b      	ldr	r3, [r7, #16]
 801f406:	78ba      	ldrb	r2, [r7, #2]
 801f408:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f40a:	693b      	ldr	r3, [r7, #16]
 801f40c:	2200      	movs	r2, #0
 801f40e:	711a      	strb	r2, [r3, #4]
 801f410:	2200      	movs	r2, #0
 801f412:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f414:	693b      	ldr	r3, [r7, #16]
 801f416:	2200      	movs	r2, #0
 801f418:	719a      	strb	r2, [r3, #6]
 801f41a:	2200      	movs	r2, #0
 801f41c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f41e:	69bb      	ldr	r3, [r7, #24]
 801f420:	685b      	ldr	r3, [r3, #4]
 801f422:	f103 0008 	add.w	r0, r3, #8
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	685b      	ldr	r3, [r3, #4]
 801f42a:	221c      	movs	r2, #28
 801f42c:	4619      	mov	r1, r3
 801f42e:	f001 fe7d 	bl	802112c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f432:	697b      	ldr	r3, [r7, #20]
 801f434:	68db      	ldr	r3, [r3, #12]
 801f436:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f438:	f107 030c 	add.w	r3, r7, #12
 801f43c:	4618      	mov	r0, r3
 801f43e:	f000 f825 	bl	801f48c <ip4_route>
 801f442:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801f444:	69fb      	ldr	r3, [r7, #28]
 801f446:	2b00      	cmp	r3, #0
 801f448:	d011      	beq.n	801f46e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f44a:	693b      	ldr	r3, [r7, #16]
 801f44c:	2200      	movs	r2, #0
 801f44e:	709a      	strb	r2, [r3, #2]
 801f450:	2200      	movs	r2, #0
 801f452:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f454:	f107 020c 	add.w	r2, r7, #12
 801f458:	69fb      	ldr	r3, [r7, #28]
 801f45a:	9302      	str	r3, [sp, #8]
 801f45c:	2301      	movs	r3, #1
 801f45e:	9301      	str	r3, [sp, #4]
 801f460:	2300      	movs	r3, #0
 801f462:	9300      	str	r3, [sp, #0]
 801f464:	23ff      	movs	r3, #255	; 0xff
 801f466:	2100      	movs	r1, #0
 801f468:	69b8      	ldr	r0, [r7, #24]
 801f46a:	f000 f9eb 	bl	801f844 <ip4_output_if>
  }
  pbuf_free(q);
 801f46e:	69b8      	ldr	r0, [r7, #24]
 801f470:	f7f5 fae4 	bl	8014a3c <pbuf_free>
 801f474:	e000      	b.n	801f478 <icmp_send_response+0xc0>
    return;
 801f476:	bf00      	nop
}
 801f478:	3720      	adds	r7, #32
 801f47a:	46bd      	mov	sp, r7
 801f47c:	bd80      	pop	{r7, pc}
 801f47e:	bf00      	nop
 801f480:	08029264 	.word	0x08029264
 801f484:	08029330 	.word	0x08029330
 801f488:	080292d4 	.word	0x080292d4

0801f48c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f48c:	b480      	push	{r7}
 801f48e:	b085      	sub	sp, #20
 801f490:	af00      	add	r7, sp, #0
 801f492:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801f494:	4b33      	ldr	r3, [pc, #204]	; (801f564 <ip4_route+0xd8>)
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	60fb      	str	r3, [r7, #12]
 801f49a:	e036      	b.n	801f50a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f4a2:	f003 0301 	and.w	r3, r3, #1
 801f4a6:	b2db      	uxtb	r3, r3
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d02b      	beq.n	801f504 <ip4_route+0x78>
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f4b2:	089b      	lsrs	r3, r3, #2
 801f4b4:	f003 0301 	and.w	r3, r3, #1
 801f4b8:	b2db      	uxtb	r3, r3
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d022      	beq.n	801f504 <ip4_route+0x78>
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	3304      	adds	r3, #4
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d01d      	beq.n	801f504 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	681a      	ldr	r2, [r3, #0]
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	3304      	adds	r3, #4
 801f4d0:	681b      	ldr	r3, [r3, #0]
 801f4d2:	405a      	eors	r2, r3
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	3308      	adds	r3, #8
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	4013      	ands	r3, r2
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d101      	bne.n	801f4e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	e038      	b.n	801f556 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f4ea:	f003 0302 	and.w	r3, r3, #2
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	d108      	bne.n	801f504 <ip4_route+0x78>
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	681a      	ldr	r2, [r3, #0]
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	330c      	adds	r3, #12
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	429a      	cmp	r2, r3
 801f4fe:	d101      	bne.n	801f504 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	e028      	b.n	801f556 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f504:	68fb      	ldr	r3, [r7, #12]
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	60fb      	str	r3, [r7, #12]
 801f50a:	68fb      	ldr	r3, [r7, #12]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d1c5      	bne.n	801f49c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f510:	4b15      	ldr	r3, [pc, #84]	; (801f568 <ip4_route+0xdc>)
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	2b00      	cmp	r3, #0
 801f516:	d01a      	beq.n	801f54e <ip4_route+0xc2>
 801f518:	4b13      	ldr	r3, [pc, #76]	; (801f568 <ip4_route+0xdc>)
 801f51a:	681b      	ldr	r3, [r3, #0]
 801f51c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f520:	f003 0301 	and.w	r3, r3, #1
 801f524:	2b00      	cmp	r3, #0
 801f526:	d012      	beq.n	801f54e <ip4_route+0xc2>
 801f528:	4b0f      	ldr	r3, [pc, #60]	; (801f568 <ip4_route+0xdc>)
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f530:	f003 0304 	and.w	r3, r3, #4
 801f534:	2b00      	cmp	r3, #0
 801f536:	d00a      	beq.n	801f54e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f538:	4b0b      	ldr	r3, [pc, #44]	; (801f568 <ip4_route+0xdc>)
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	3304      	adds	r3, #4
 801f53e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f540:	2b00      	cmp	r3, #0
 801f542:	d004      	beq.n	801f54e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	b2db      	uxtb	r3, r3
 801f54a:	2b7f      	cmp	r3, #127	; 0x7f
 801f54c:	d101      	bne.n	801f552 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f54e:	2300      	movs	r3, #0
 801f550:	e001      	b.n	801f556 <ip4_route+0xca>
  }

  return netif_default;
 801f552:	4b05      	ldr	r3, [pc, #20]	; (801f568 <ip4_route+0xdc>)
 801f554:	681b      	ldr	r3, [r3, #0]
}
 801f556:	4618      	mov	r0, r3
 801f558:	3714      	adds	r7, #20
 801f55a:	46bd      	mov	sp, r7
 801f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f560:	4770      	bx	lr
 801f562:	bf00      	nop
 801f564:	2001b178 	.word	0x2001b178
 801f568:	2001b17c 	.word	0x2001b17c

0801f56c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f56c:	b580      	push	{r7, lr}
 801f56e:	b082      	sub	sp, #8
 801f570:	af00      	add	r7, sp, #0
 801f572:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f57a:	f003 0301 	and.w	r3, r3, #1
 801f57e:	b2db      	uxtb	r3, r3
 801f580:	2b00      	cmp	r3, #0
 801f582:	d016      	beq.n	801f5b2 <ip4_input_accept+0x46>
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	3304      	adds	r3, #4
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d011      	beq.n	801f5b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f58e:	4b0b      	ldr	r3, [pc, #44]	; (801f5bc <ip4_input_accept+0x50>)
 801f590:	695a      	ldr	r2, [r3, #20]
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	3304      	adds	r3, #4
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	429a      	cmp	r2, r3
 801f59a:	d008      	beq.n	801f5ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f59c:	4b07      	ldr	r3, [pc, #28]	; (801f5bc <ip4_input_accept+0x50>)
 801f59e:	695b      	ldr	r3, [r3, #20]
 801f5a0:	6879      	ldr	r1, [r7, #4]
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	f000 fa26 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801f5a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d001      	beq.n	801f5b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f5ae:	2301      	movs	r3, #1
 801f5b0:	e000      	b.n	801f5b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f5b2:	2300      	movs	r3, #0
}
 801f5b4:	4618      	mov	r0, r3
 801f5b6:	3708      	adds	r7, #8
 801f5b8:	46bd      	mov	sp, r7
 801f5ba:	bd80      	pop	{r7, pc}
 801f5bc:	20017794 	.word	0x20017794

0801f5c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b088      	sub	sp, #32
 801f5c4:	af00      	add	r7, sp, #0
 801f5c6:	6078      	str	r0, [r7, #4]
 801f5c8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f5ca:	2301      	movs	r3, #1
 801f5cc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	685b      	ldr	r3, [r3, #4]
 801f5d2:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801f5d4:	693b      	ldr	r3, [r7, #16]
 801f5d6:	781b      	ldrb	r3, [r3, #0]
 801f5d8:	091b      	lsrs	r3, r3, #4
 801f5da:	b2db      	uxtb	r3, r3
 801f5dc:	2b04      	cmp	r3, #4
 801f5de:	d004      	beq.n	801f5ea <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f5e0:	6878      	ldr	r0, [r7, #4]
 801f5e2:	f7f5 fa2b 	bl	8014a3c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f5e6:	2300      	movs	r3, #0
 801f5e8:	e123      	b.n	801f832 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f5ea:	693b      	ldr	r3, [r7, #16]
 801f5ec:	781b      	ldrb	r3, [r3, #0]
 801f5ee:	f003 030f 	and.w	r3, r3, #15
 801f5f2:	b2db      	uxtb	r3, r3
 801f5f4:	009b      	lsls	r3, r3, #2
 801f5f6:	b2db      	uxtb	r3, r3
 801f5f8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f5fa:	693b      	ldr	r3, [r7, #16]
 801f5fc:	885b      	ldrh	r3, [r3, #2]
 801f5fe:	b29b      	uxth	r3, r3
 801f600:	4618      	mov	r0, r3
 801f602:	f7f2 fe5b 	bl	80122bc <lwip_htons>
 801f606:	4603      	mov	r3, r0
 801f608:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	891b      	ldrh	r3, [r3, #8]
 801f60e:	89ba      	ldrh	r2, [r7, #12]
 801f610:	429a      	cmp	r2, r3
 801f612:	d204      	bcs.n	801f61e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801f614:	89bb      	ldrh	r3, [r7, #12]
 801f616:	4619      	mov	r1, r3
 801f618:	6878      	ldr	r0, [r7, #4]
 801f61a:	f7f5 f857 	bl	80146cc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	895b      	ldrh	r3, [r3, #10]
 801f622:	89fa      	ldrh	r2, [r7, #14]
 801f624:	429a      	cmp	r2, r3
 801f626:	d807      	bhi.n	801f638 <ip4_input+0x78>
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	891b      	ldrh	r3, [r3, #8]
 801f62c:	89ba      	ldrh	r2, [r7, #12]
 801f62e:	429a      	cmp	r2, r3
 801f630:	d802      	bhi.n	801f638 <ip4_input+0x78>
 801f632:	89fb      	ldrh	r3, [r7, #14]
 801f634:	2b13      	cmp	r3, #19
 801f636:	d804      	bhi.n	801f642 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f638:	6878      	ldr	r0, [r7, #4]
 801f63a:	f7f5 f9ff 	bl	8014a3c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f63e:	2300      	movs	r3, #0
 801f640:	e0f7      	b.n	801f832 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f642:	693b      	ldr	r3, [r7, #16]
 801f644:	691b      	ldr	r3, [r3, #16]
 801f646:	4a7d      	ldr	r2, [pc, #500]	; (801f83c <ip4_input+0x27c>)
 801f648:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f64a:	693b      	ldr	r3, [r7, #16]
 801f64c:	68db      	ldr	r3, [r3, #12]
 801f64e:	4a7b      	ldr	r2, [pc, #492]	; (801f83c <ip4_input+0x27c>)
 801f650:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f652:	4b7a      	ldr	r3, [pc, #488]	; (801f83c <ip4_input+0x27c>)
 801f654:	695b      	ldr	r3, [r3, #20]
 801f656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f65a:	2be0      	cmp	r3, #224	; 0xe0
 801f65c:	d112      	bne.n	801f684 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f664:	f003 0301 	and.w	r3, r3, #1
 801f668:	b2db      	uxtb	r3, r3
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d007      	beq.n	801f67e <ip4_input+0xbe>
 801f66e:	683b      	ldr	r3, [r7, #0]
 801f670:	3304      	adds	r3, #4
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	2b00      	cmp	r3, #0
 801f676:	d002      	beq.n	801f67e <ip4_input+0xbe>
      netif = inp;
 801f678:	683b      	ldr	r3, [r7, #0]
 801f67a:	61fb      	str	r3, [r7, #28]
 801f67c:	e02a      	b.n	801f6d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f67e:	2300      	movs	r3, #0
 801f680:	61fb      	str	r3, [r7, #28]
 801f682:	e027      	b.n	801f6d4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f684:	6838      	ldr	r0, [r7, #0]
 801f686:	f7ff ff71 	bl	801f56c <ip4_input_accept>
 801f68a:	4603      	mov	r3, r0
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d002      	beq.n	801f696 <ip4_input+0xd6>
      netif = inp;
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	61fb      	str	r3, [r7, #28]
 801f694:	e01e      	b.n	801f6d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801f696:	2300      	movs	r3, #0
 801f698:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f69a:	4b68      	ldr	r3, [pc, #416]	; (801f83c <ip4_input+0x27c>)
 801f69c:	695b      	ldr	r3, [r3, #20]
 801f69e:	b2db      	uxtb	r3, r3
 801f6a0:	2b7f      	cmp	r3, #127	; 0x7f
 801f6a2:	d017      	beq.n	801f6d4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f6a4:	4b66      	ldr	r3, [pc, #408]	; (801f840 <ip4_input+0x280>)
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	61fb      	str	r3, [r7, #28]
 801f6aa:	e00e      	b.n	801f6ca <ip4_input+0x10a>
          if (netif == inp) {
 801f6ac:	69fa      	ldr	r2, [r7, #28]
 801f6ae:	683b      	ldr	r3, [r7, #0]
 801f6b0:	429a      	cmp	r2, r3
 801f6b2:	d006      	beq.n	801f6c2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f6b4:	69f8      	ldr	r0, [r7, #28]
 801f6b6:	f7ff ff59 	bl	801f56c <ip4_input_accept>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d108      	bne.n	801f6d2 <ip4_input+0x112>
 801f6c0:	e000      	b.n	801f6c4 <ip4_input+0x104>
            continue;
 801f6c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f6c4:	69fb      	ldr	r3, [r7, #28]
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	61fb      	str	r3, [r7, #28]
 801f6ca:	69fb      	ldr	r3, [r7, #28]
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d1ed      	bne.n	801f6ac <ip4_input+0xec>
 801f6d0:	e000      	b.n	801f6d4 <ip4_input+0x114>
            break;
 801f6d2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f6d4:	69fb      	ldr	r3, [r7, #28]
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	d111      	bne.n	801f6fe <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f6da:	693b      	ldr	r3, [r7, #16]
 801f6dc:	7a5b      	ldrb	r3, [r3, #9]
 801f6de:	2b11      	cmp	r3, #17
 801f6e0:	d10d      	bne.n	801f6fe <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801f6e2:	89fb      	ldrh	r3, [r7, #14]
 801f6e4:	693a      	ldr	r2, [r7, #16]
 801f6e6:	4413      	add	r3, r2
 801f6e8:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f6ea:	69bb      	ldr	r3, [r7, #24]
 801f6ec:	885b      	ldrh	r3, [r3, #2]
 801f6ee:	b29b      	uxth	r3, r3
 801f6f0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f6f4:	d103      	bne.n	801f6fe <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 801f6fa:	2300      	movs	r3, #0
 801f6fc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f6fe:	697b      	ldr	r3, [r7, #20]
 801f700:	2b00      	cmp	r3, #0
 801f702:	d017      	beq.n	801f734 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f704:	4b4d      	ldr	r3, [pc, #308]	; (801f83c <ip4_input+0x27c>)
 801f706:	691b      	ldr	r3, [r3, #16]
 801f708:	2b00      	cmp	r3, #0
 801f70a:	d013      	beq.n	801f734 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f70c:	4b4b      	ldr	r3, [pc, #300]	; (801f83c <ip4_input+0x27c>)
 801f70e:	691b      	ldr	r3, [r3, #16]
 801f710:	6839      	ldr	r1, [r7, #0]
 801f712:	4618      	mov	r0, r3
 801f714:	f000 f96e 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801f718:	4603      	mov	r3, r0
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d105      	bne.n	801f72a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f71e:	4b47      	ldr	r3, [pc, #284]	; (801f83c <ip4_input+0x27c>)
 801f720:	691b      	ldr	r3, [r3, #16]
 801f722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f726:	2be0      	cmp	r3, #224	; 0xe0
 801f728:	d104      	bne.n	801f734 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f72a:	6878      	ldr	r0, [r7, #4]
 801f72c:	f7f5 f986 	bl	8014a3c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f730:	2300      	movs	r3, #0
 801f732:	e07e      	b.n	801f832 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f734:	69fb      	ldr	r3, [r7, #28]
 801f736:	2b00      	cmp	r3, #0
 801f738:	d104      	bne.n	801f744 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f73a:	6878      	ldr	r0, [r7, #4]
 801f73c:	f7f5 f97e 	bl	8014a3c <pbuf_free>
    return ERR_OK;
 801f740:	2300      	movs	r3, #0
 801f742:	e076      	b.n	801f832 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f744:	693b      	ldr	r3, [r7, #16]
 801f746:	88db      	ldrh	r3, [r3, #6]
 801f748:	b29b      	uxth	r3, r3
 801f74a:	461a      	mov	r2, r3
 801f74c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f750:	4013      	ands	r3, r2
 801f752:	2b00      	cmp	r3, #0
 801f754:	d00b      	beq.n	801f76e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f756:	6878      	ldr	r0, [r7, #4]
 801f758:	f000 fdbc 	bl	80202d4 <ip4_reass>
 801f75c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	2b00      	cmp	r3, #0
 801f762:	d101      	bne.n	801f768 <ip4_input+0x1a8>
      return ERR_OK;
 801f764:	2300      	movs	r3, #0
 801f766:	e064      	b.n	801f832 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	685b      	ldr	r3, [r3, #4]
 801f76c:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f76e:	4a33      	ldr	r2, [pc, #204]	; (801f83c <ip4_input+0x27c>)
 801f770:	69fb      	ldr	r3, [r7, #28]
 801f772:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f774:	4a31      	ldr	r2, [pc, #196]	; (801f83c <ip4_input+0x27c>)
 801f776:	683b      	ldr	r3, [r7, #0]
 801f778:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f77a:	4a30      	ldr	r2, [pc, #192]	; (801f83c <ip4_input+0x27c>)
 801f77c:	693b      	ldr	r3, [r7, #16]
 801f77e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f780:	693b      	ldr	r3, [r7, #16]
 801f782:	781b      	ldrb	r3, [r3, #0]
 801f784:	f003 030f 	and.w	r3, r3, #15
 801f788:	b2db      	uxtb	r3, r3
 801f78a:	009b      	lsls	r3, r3, #2
 801f78c:	b2db      	uxtb	r3, r3
 801f78e:	b29a      	uxth	r2, r3
 801f790:	4b2a      	ldr	r3, [pc, #168]	; (801f83c <ip4_input+0x27c>)
 801f792:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f794:	89fb      	ldrh	r3, [r7, #14]
 801f796:	4619      	mov	r1, r3
 801f798:	6878      	ldr	r0, [r7, #4]
 801f79a:	f7f5 f897 	bl	80148cc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f79e:	693b      	ldr	r3, [r7, #16]
 801f7a0:	7a5b      	ldrb	r3, [r3, #9]
 801f7a2:	2b11      	cmp	r3, #17
 801f7a4:	d006      	beq.n	801f7b4 <ip4_input+0x1f4>
 801f7a6:	2b11      	cmp	r3, #17
 801f7a8:	dc13      	bgt.n	801f7d2 <ip4_input+0x212>
 801f7aa:	2b01      	cmp	r3, #1
 801f7ac:	d00c      	beq.n	801f7c8 <ip4_input+0x208>
 801f7ae:	2b06      	cmp	r3, #6
 801f7b0:	d005      	beq.n	801f7be <ip4_input+0x1fe>
 801f7b2:	e00e      	b.n	801f7d2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f7b4:	6839      	ldr	r1, [r7, #0]
 801f7b6:	6878      	ldr	r0, [r7, #4]
 801f7b8:	f7fc f994 	bl	801bae4 <udp_input>
        break;
 801f7bc:	e026      	b.n	801f80c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f7be:	6839      	ldr	r1, [r7, #0]
 801f7c0:	6878      	ldr	r0, [r7, #4]
 801f7c2:	f7f7 fce5 	bl	8017190 <tcp_input>
        break;
 801f7c6:	e021      	b.n	801f80c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f7c8:	6839      	ldr	r1, [r7, #0]
 801f7ca:	6878      	ldr	r0, [r7, #4]
 801f7cc:	f7ff fcca 	bl	801f164 <icmp_input>
        break;
 801f7d0:	e01c      	b.n	801f80c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f7d2:	4b1a      	ldr	r3, [pc, #104]	; (801f83c <ip4_input+0x27c>)
 801f7d4:	695b      	ldr	r3, [r3, #20]
 801f7d6:	69f9      	ldr	r1, [r7, #28]
 801f7d8:	4618      	mov	r0, r3
 801f7da:	f000 f90b 	bl	801f9f4 <ip4_addr_isbroadcast_u32>
 801f7de:	4603      	mov	r3, r0
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d10f      	bne.n	801f804 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f7e4:	4b15      	ldr	r3, [pc, #84]	; (801f83c <ip4_input+0x27c>)
 801f7e6:	695b      	ldr	r3, [r3, #20]
 801f7e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f7ec:	2be0      	cmp	r3, #224	; 0xe0
 801f7ee:	d009      	beq.n	801f804 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f7f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801f7f4:	4619      	mov	r1, r3
 801f7f6:	6878      	ldr	r0, [r7, #4]
 801f7f8:	f7f5 f8db 	bl	80149b2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f7fc:	2102      	movs	r1, #2
 801f7fe:	6878      	ldr	r0, [r7, #4]
 801f800:	f7ff fdba 	bl	801f378 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f804:	6878      	ldr	r0, [r7, #4]
 801f806:	f7f5 f919 	bl	8014a3c <pbuf_free>
        break;
 801f80a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f80c:	4b0b      	ldr	r3, [pc, #44]	; (801f83c <ip4_input+0x27c>)
 801f80e:	2200      	movs	r2, #0
 801f810:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f812:	4b0a      	ldr	r3, [pc, #40]	; (801f83c <ip4_input+0x27c>)
 801f814:	2200      	movs	r2, #0
 801f816:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f818:	4b08      	ldr	r3, [pc, #32]	; (801f83c <ip4_input+0x27c>)
 801f81a:	2200      	movs	r2, #0
 801f81c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f81e:	4b07      	ldr	r3, [pc, #28]	; (801f83c <ip4_input+0x27c>)
 801f820:	2200      	movs	r2, #0
 801f822:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f824:	4b05      	ldr	r3, [pc, #20]	; (801f83c <ip4_input+0x27c>)
 801f826:	2200      	movs	r2, #0
 801f828:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f82a:	4b04      	ldr	r3, [pc, #16]	; (801f83c <ip4_input+0x27c>)
 801f82c:	2200      	movs	r2, #0
 801f82e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f830:	2300      	movs	r3, #0
}
 801f832:	4618      	mov	r0, r3
 801f834:	3720      	adds	r7, #32
 801f836:	46bd      	mov	sp, r7
 801f838:	bd80      	pop	{r7, pc}
 801f83a:	bf00      	nop
 801f83c:	20017794 	.word	0x20017794
 801f840:	2001b178 	.word	0x2001b178

0801f844 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f844:	b580      	push	{r7, lr}
 801f846:	b08a      	sub	sp, #40	; 0x28
 801f848:	af04      	add	r7, sp, #16
 801f84a:	60f8      	str	r0, [r7, #12]
 801f84c:	60b9      	str	r1, [r7, #8]
 801f84e:	607a      	str	r2, [r7, #4]
 801f850:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f852:	68bb      	ldr	r3, [r7, #8]
 801f854:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d009      	beq.n	801f870 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f85c:	68bb      	ldr	r3, [r7, #8]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d003      	beq.n	801f86a <ip4_output_if+0x26>
 801f862:	68bb      	ldr	r3, [r7, #8]
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	2b00      	cmp	r3, #0
 801f868:	d102      	bne.n	801f870 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f86c:	3304      	adds	r3, #4
 801f86e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f870:	78fa      	ldrb	r2, [r7, #3]
 801f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f874:	9302      	str	r3, [sp, #8]
 801f876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f87a:	9301      	str	r3, [sp, #4]
 801f87c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f880:	9300      	str	r3, [sp, #0]
 801f882:	4613      	mov	r3, r2
 801f884:	687a      	ldr	r2, [r7, #4]
 801f886:	6979      	ldr	r1, [r7, #20]
 801f888:	68f8      	ldr	r0, [r7, #12]
 801f88a:	f000 f805 	bl	801f898 <ip4_output_if_src>
 801f88e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f890:	4618      	mov	r0, r3
 801f892:	3718      	adds	r7, #24
 801f894:	46bd      	mov	sp, r7
 801f896:	bd80      	pop	{r7, pc}

0801f898 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f898:	b580      	push	{r7, lr}
 801f89a:	b088      	sub	sp, #32
 801f89c:	af00      	add	r7, sp, #0
 801f89e:	60f8      	str	r0, [r7, #12]
 801f8a0:	60b9      	str	r1, [r7, #8]
 801f8a2:	607a      	str	r2, [r7, #4]
 801f8a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	7b9b      	ldrb	r3, [r3, #14]
 801f8aa:	2b01      	cmp	r3, #1
 801f8ac:	d006      	beq.n	801f8bc <ip4_output_if_src+0x24>
 801f8ae:	4b4b      	ldr	r3, [pc, #300]	; (801f9dc <ip4_output_if_src+0x144>)
 801f8b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f8b4:	494a      	ldr	r1, [pc, #296]	; (801f9e0 <ip4_output_if_src+0x148>)
 801f8b6:	484b      	ldr	r0, [pc, #300]	; (801f9e4 <ip4_output_if_src+0x14c>)
 801f8b8:	f002 f97c 	bl	8021bb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	d060      	beq.n	801f984 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f8c2:	2314      	movs	r3, #20
 801f8c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f8c6:	2114      	movs	r1, #20
 801f8c8:	68f8      	ldr	r0, [r7, #12]
 801f8ca:	f7f4 ffef 	bl	80148ac <pbuf_add_header>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d002      	beq.n	801f8da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f8d4:	f06f 0301 	mvn.w	r3, #1
 801f8d8:	e07c      	b.n	801f9d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	685b      	ldr	r3, [r3, #4]
 801f8de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f8e0:	68fb      	ldr	r3, [r7, #12]
 801f8e2:	895b      	ldrh	r3, [r3, #10]
 801f8e4:	2b13      	cmp	r3, #19
 801f8e6:	d806      	bhi.n	801f8f6 <ip4_output_if_src+0x5e>
 801f8e8:	4b3c      	ldr	r3, [pc, #240]	; (801f9dc <ip4_output_if_src+0x144>)
 801f8ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 801f8ee:	493e      	ldr	r1, [pc, #248]	; (801f9e8 <ip4_output_if_src+0x150>)
 801f8f0:	483c      	ldr	r0, [pc, #240]	; (801f9e4 <ip4_output_if_src+0x14c>)
 801f8f2:	f002 f95f 	bl	8021bb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f8f6:	69fb      	ldr	r3, [r7, #28]
 801f8f8:	78fa      	ldrb	r2, [r7, #3]
 801f8fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f8fc:	69fb      	ldr	r3, [r7, #28]
 801f8fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801f902:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	681a      	ldr	r2, [r3, #0]
 801f908:	69fb      	ldr	r3, [r7, #28]
 801f90a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f90c:	8b7b      	ldrh	r3, [r7, #26]
 801f90e:	089b      	lsrs	r3, r3, #2
 801f910:	b29b      	uxth	r3, r3
 801f912:	b2db      	uxtb	r3, r3
 801f914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f918:	b2da      	uxtb	r2, r3
 801f91a:	69fb      	ldr	r3, [r7, #28]
 801f91c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f91e:	69fb      	ldr	r3, [r7, #28]
 801f920:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801f924:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f926:	68fb      	ldr	r3, [r7, #12]
 801f928:	891b      	ldrh	r3, [r3, #8]
 801f92a:	4618      	mov	r0, r3
 801f92c:	f7f2 fcc6 	bl	80122bc <lwip_htons>
 801f930:	4603      	mov	r3, r0
 801f932:	461a      	mov	r2, r3
 801f934:	69fb      	ldr	r3, [r7, #28]
 801f936:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f938:	69fb      	ldr	r3, [r7, #28]
 801f93a:	2200      	movs	r2, #0
 801f93c:	719a      	strb	r2, [r3, #6]
 801f93e:	2200      	movs	r2, #0
 801f940:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f942:	4b2a      	ldr	r3, [pc, #168]	; (801f9ec <ip4_output_if_src+0x154>)
 801f944:	881b      	ldrh	r3, [r3, #0]
 801f946:	4618      	mov	r0, r3
 801f948:	f7f2 fcb8 	bl	80122bc <lwip_htons>
 801f94c:	4603      	mov	r3, r0
 801f94e:	461a      	mov	r2, r3
 801f950:	69fb      	ldr	r3, [r7, #28]
 801f952:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f954:	4b25      	ldr	r3, [pc, #148]	; (801f9ec <ip4_output_if_src+0x154>)
 801f956:	881b      	ldrh	r3, [r3, #0]
 801f958:	3301      	adds	r3, #1
 801f95a:	b29a      	uxth	r2, r3
 801f95c:	4b23      	ldr	r3, [pc, #140]	; (801f9ec <ip4_output_if_src+0x154>)
 801f95e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f960:	68bb      	ldr	r3, [r7, #8]
 801f962:	2b00      	cmp	r3, #0
 801f964:	d104      	bne.n	801f970 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f966:	4b22      	ldr	r3, [pc, #136]	; (801f9f0 <ip4_output_if_src+0x158>)
 801f968:	681a      	ldr	r2, [r3, #0]
 801f96a:	69fb      	ldr	r3, [r7, #28]
 801f96c:	60da      	str	r2, [r3, #12]
 801f96e:	e003      	b.n	801f978 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f970:	68bb      	ldr	r3, [r7, #8]
 801f972:	681a      	ldr	r2, [r3, #0]
 801f974:	69fb      	ldr	r3, [r7, #28]
 801f976:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f978:	69fb      	ldr	r3, [r7, #28]
 801f97a:	2200      	movs	r2, #0
 801f97c:	729a      	strb	r2, [r3, #10]
 801f97e:	2200      	movs	r2, #0
 801f980:	72da      	strb	r2, [r3, #11]
 801f982:	e00f      	b.n	801f9a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f984:	68fb      	ldr	r3, [r7, #12]
 801f986:	895b      	ldrh	r3, [r3, #10]
 801f988:	2b13      	cmp	r3, #19
 801f98a:	d802      	bhi.n	801f992 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f98c:	f06f 0301 	mvn.w	r3, #1
 801f990:	e020      	b.n	801f9d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	685b      	ldr	r3, [r3, #4]
 801f996:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f998:	69fb      	ldr	r3, [r7, #28]
 801f99a:	691b      	ldr	r3, [r3, #16]
 801f99c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f99e:	f107 0314 	add.w	r3, r7, #20
 801f9a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f9a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d00c      	beq.n	801f9c6 <ip4_output_if_src+0x12e>
 801f9ac:	68fb      	ldr	r3, [r7, #12]
 801f9ae:	891a      	ldrh	r2, [r3, #8]
 801f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f9b4:	429a      	cmp	r2, r3
 801f9b6:	d906      	bls.n	801f9c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801f9b8:	687a      	ldr	r2, [r7, #4]
 801f9ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f9bc:	68f8      	ldr	r0, [r7, #12]
 801f9be:	f000 fe77 	bl	80206b0 <ip4_frag>
 801f9c2:	4603      	mov	r3, r0
 801f9c4:	e006      	b.n	801f9d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f9c8:	695b      	ldr	r3, [r3, #20]
 801f9ca:	687a      	ldr	r2, [r7, #4]
 801f9cc:	68f9      	ldr	r1, [r7, #12]
 801f9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f9d0:	4798      	blx	r3
 801f9d2:	4603      	mov	r3, r0
}
 801f9d4:	4618      	mov	r0, r3
 801f9d6:	3720      	adds	r7, #32
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	bd80      	pop	{r7, pc}
 801f9dc:	0802935c 	.word	0x0802935c
 801f9e0:	08029390 	.word	0x08029390
 801f9e4:	0802939c 	.word	0x0802939c
 801f9e8:	080293c4 	.word	0x080293c4
 801f9ec:	20014496 	.word	0x20014496
 801f9f0:	080299c0 	.word	0x080299c0

0801f9f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f9f4:	b480      	push	{r7}
 801f9f6:	b085      	sub	sp, #20
 801f9f8:	af00      	add	r7, sp, #0
 801f9fa:	6078      	str	r0, [r7, #4]
 801f9fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fa08:	d002      	beq.n	801fa10 <ip4_addr_isbroadcast_u32+0x1c>
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	d101      	bne.n	801fa14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801fa10:	2301      	movs	r3, #1
 801fa12:	e02a      	b.n	801fa6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801fa14:	683b      	ldr	r3, [r7, #0]
 801fa16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fa1a:	f003 0302 	and.w	r3, r3, #2
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d101      	bne.n	801fa26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801fa22:	2300      	movs	r3, #0
 801fa24:	e021      	b.n	801fa6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801fa26:	683b      	ldr	r3, [r7, #0]
 801fa28:	3304      	adds	r3, #4
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	687a      	ldr	r2, [r7, #4]
 801fa2e:	429a      	cmp	r2, r3
 801fa30:	d101      	bne.n	801fa36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801fa32:	2300      	movs	r3, #0
 801fa34:	e019      	b.n	801fa6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801fa36:	68fa      	ldr	r2, [r7, #12]
 801fa38:	683b      	ldr	r3, [r7, #0]
 801fa3a:	3304      	adds	r3, #4
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	405a      	eors	r2, r3
 801fa40:	683b      	ldr	r3, [r7, #0]
 801fa42:	3308      	adds	r3, #8
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	4013      	ands	r3, r2
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d10d      	bne.n	801fa68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fa4c:	683b      	ldr	r3, [r7, #0]
 801fa4e:	3308      	adds	r3, #8
 801fa50:	681b      	ldr	r3, [r3, #0]
 801fa52:	43da      	mvns	r2, r3
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801fa58:	683b      	ldr	r3, [r7, #0]
 801fa5a:	3308      	adds	r3, #8
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fa60:	429a      	cmp	r2, r3
 801fa62:	d101      	bne.n	801fa68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801fa64:	2301      	movs	r3, #1
 801fa66:	e000      	b.n	801fa6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801fa68:	2300      	movs	r3, #0
  }
}
 801fa6a:	4618      	mov	r0, r3
 801fa6c:	3714      	adds	r7, #20
 801fa6e:	46bd      	mov	sp, r7
 801fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa74:	4770      	bx	lr
	...

0801fa78 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801fa78:	b580      	push	{r7, lr}
 801fa7a:	b08a      	sub	sp, #40	; 0x28
 801fa7c:	af00      	add	r7, sp, #0
 801fa7e:	6078      	str	r0, [r7, #4]
 801fa80:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801fa82:	f107 030c 	add.w	r3, r7, #12
 801fa86:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	781b      	ldrb	r3, [r3, #0]
 801fa8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801fa90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fa94:	3301      	adds	r3, #1
 801fa96:	4a89      	ldr	r2, [pc, #548]	; (801fcbc <ip4addr_aton+0x244>)
 801fa98:	4413      	add	r3, r2
 801fa9a:	781b      	ldrb	r3, [r3, #0]
 801fa9c:	f003 0304 	and.w	r3, r3, #4
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d101      	bne.n	801faa8 <ip4addr_aton+0x30>
      return 0;
 801faa4:	2300      	movs	r3, #0
 801faa6:	e105      	b.n	801fcb4 <ip4addr_aton+0x23c>
    }
    val = 0;
 801faa8:	2300      	movs	r3, #0
 801faaa:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801faac:	230a      	movs	r3, #10
 801faae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801fab2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fab6:	2b30      	cmp	r3, #48	; 0x30
 801fab8:	d11c      	bne.n	801faf4 <ip4addr_aton+0x7c>
      c = *++cp;
 801faba:	687b      	ldr	r3, [r7, #4]
 801fabc:	3301      	adds	r3, #1
 801fabe:	607b      	str	r3, [r7, #4]
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	781b      	ldrb	r3, [r3, #0]
 801fac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801fac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801facc:	2b78      	cmp	r3, #120	; 0x78
 801face:	d003      	beq.n	801fad8 <ip4addr_aton+0x60>
 801fad0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fad4:	2b58      	cmp	r3, #88	; 0x58
 801fad6:	d10a      	bne.n	801faee <ip4addr_aton+0x76>
        base = 16;
 801fad8:	2310      	movs	r3, #16
 801fada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	3301      	adds	r3, #1
 801fae2:	607b      	str	r3, [r7, #4]
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	781b      	ldrb	r3, [r3, #0]
 801fae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801faec:	e002      	b.n	801faf4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801faee:	2308      	movs	r3, #8
 801faf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801faf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801faf8:	3301      	adds	r3, #1
 801fafa:	4a70      	ldr	r2, [pc, #448]	; (801fcbc <ip4addr_aton+0x244>)
 801fafc:	4413      	add	r3, r2
 801fafe:	781b      	ldrb	r3, [r3, #0]
 801fb00:	f003 0304 	and.w	r3, r3, #4
 801fb04:	2b00      	cmp	r3, #0
 801fb06:	d011      	beq.n	801fb2c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801fb08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fb0e:	fb02 f203 	mul.w	r2, r2, r3
 801fb12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fb16:	4413      	add	r3, r2
 801fb18:	3b30      	subs	r3, #48	; 0x30
 801fb1a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	3301      	adds	r3, #1
 801fb20:	607b      	str	r3, [r7, #4]
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	781b      	ldrb	r3, [r3, #0]
 801fb26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801fb2a:	e7e3      	b.n	801faf4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801fb2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fb30:	2b10      	cmp	r3, #16
 801fb32:	d127      	bne.n	801fb84 <ip4addr_aton+0x10c>
 801fb34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fb38:	3301      	adds	r3, #1
 801fb3a:	4a60      	ldr	r2, [pc, #384]	; (801fcbc <ip4addr_aton+0x244>)
 801fb3c:	4413      	add	r3, r2
 801fb3e:	781b      	ldrb	r3, [r3, #0]
 801fb40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d01d      	beq.n	801fb84 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb4a:	011b      	lsls	r3, r3, #4
 801fb4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801fb50:	f102 010a 	add.w	r1, r2, #10
 801fb54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801fb58:	3201      	adds	r2, #1
 801fb5a:	4858      	ldr	r0, [pc, #352]	; (801fcbc <ip4addr_aton+0x244>)
 801fb5c:	4402      	add	r2, r0
 801fb5e:	7812      	ldrb	r2, [r2, #0]
 801fb60:	f002 0203 	and.w	r2, r2, #3
 801fb64:	2a02      	cmp	r2, #2
 801fb66:	d101      	bne.n	801fb6c <ip4addr_aton+0xf4>
 801fb68:	2261      	movs	r2, #97	; 0x61
 801fb6a:	e000      	b.n	801fb6e <ip4addr_aton+0xf6>
 801fb6c:	2241      	movs	r2, #65	; 0x41
 801fb6e:	1a8a      	subs	r2, r1, r2
 801fb70:	4313      	orrs	r3, r2
 801fb72:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	3301      	adds	r3, #1
 801fb78:	607b      	str	r3, [r7, #4]
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	781b      	ldrb	r3, [r3, #0]
 801fb7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801fb82:	e7b7      	b.n	801faf4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801fb84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fb88:	2b2e      	cmp	r3, #46	; 0x2e
 801fb8a:	d114      	bne.n	801fbb6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801fb8c:	f107 030c 	add.w	r3, r7, #12
 801fb90:	330c      	adds	r3, #12
 801fb92:	69fa      	ldr	r2, [r7, #28]
 801fb94:	429a      	cmp	r2, r3
 801fb96:	d301      	bcc.n	801fb9c <ip4addr_aton+0x124>
        return 0;
 801fb98:	2300      	movs	r3, #0
 801fb9a:	e08b      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801fb9c:	69fb      	ldr	r3, [r7, #28]
 801fb9e:	1d1a      	adds	r2, r3, #4
 801fba0:	61fa      	str	r2, [r7, #28]
 801fba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fba4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	3301      	adds	r3, #1
 801fbaa:	607b      	str	r3, [r7, #4]
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	781b      	ldrb	r3, [r3, #0]
 801fbb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801fbb4:	e76c      	b.n	801fa90 <ip4addr_aton+0x18>
    } else {
      break;
 801fbb6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801fbb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d00b      	beq.n	801fbd8 <ip4addr_aton+0x160>
 801fbc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801fbc4:	3301      	adds	r3, #1
 801fbc6:	4a3d      	ldr	r2, [pc, #244]	; (801fcbc <ip4addr_aton+0x244>)
 801fbc8:	4413      	add	r3, r2
 801fbca:	781b      	ldrb	r3, [r3, #0]
 801fbcc:	f003 0308 	and.w	r3, r3, #8
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d101      	bne.n	801fbd8 <ip4addr_aton+0x160>
    return 0;
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	e06d      	b.n	801fcb4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801fbd8:	f107 030c 	add.w	r3, r7, #12
 801fbdc:	69fa      	ldr	r2, [r7, #28]
 801fbde:	1ad3      	subs	r3, r2, r3
 801fbe0:	109b      	asrs	r3, r3, #2
 801fbe2:	3301      	adds	r3, #1
 801fbe4:	2b04      	cmp	r3, #4
 801fbe6:	d853      	bhi.n	801fc90 <ip4addr_aton+0x218>
 801fbe8:	a201      	add	r2, pc, #4	; (adr r2, 801fbf0 <ip4addr_aton+0x178>)
 801fbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbee:	bf00      	nop
 801fbf0:	0801fc05 	.word	0x0801fc05
 801fbf4:	0801fc9f 	.word	0x0801fc9f
 801fbf8:	0801fc09 	.word	0x0801fc09
 801fbfc:	0801fc2b 	.word	0x0801fc2b
 801fc00:	0801fc59 	.word	0x0801fc59

    case 0:
      return 0;       /* initial nondigit */
 801fc04:	2300      	movs	r3, #0
 801fc06:	e055      	b.n	801fcb4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801fc0e:	d301      	bcc.n	801fc14 <ip4addr_aton+0x19c>
        return 0;
 801fc10:	2300      	movs	r3, #0
 801fc12:	e04f      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801fc14:	68fb      	ldr	r3, [r7, #12]
 801fc16:	2bff      	cmp	r3, #255	; 0xff
 801fc18:	d901      	bls.n	801fc1e <ip4addr_aton+0x1a6>
        return 0;
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	e04a      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801fc1e:	68fb      	ldr	r3, [r7, #12]
 801fc20:	061b      	lsls	r3, r3, #24
 801fc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc24:	4313      	orrs	r3, r2
 801fc26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fc28:	e03a      	b.n	801fca0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fc30:	d301      	bcc.n	801fc36 <ip4addr_aton+0x1be>
        return 0;
 801fc32:	2300      	movs	r3, #0
 801fc34:	e03e      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801fc36:	68fb      	ldr	r3, [r7, #12]
 801fc38:	2bff      	cmp	r3, #255	; 0xff
 801fc3a:	d802      	bhi.n	801fc42 <ip4addr_aton+0x1ca>
 801fc3c:	693b      	ldr	r3, [r7, #16]
 801fc3e:	2bff      	cmp	r3, #255	; 0xff
 801fc40:	d901      	bls.n	801fc46 <ip4addr_aton+0x1ce>
        return 0;
 801fc42:	2300      	movs	r3, #0
 801fc44:	e036      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	061a      	lsls	r2, r3, #24
 801fc4a:	693b      	ldr	r3, [r7, #16]
 801fc4c:	041b      	lsls	r3, r3, #16
 801fc4e:	4313      	orrs	r3, r2
 801fc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc52:	4313      	orrs	r3, r2
 801fc54:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fc56:	e023      	b.n	801fca0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801fc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc5a:	2bff      	cmp	r3, #255	; 0xff
 801fc5c:	d901      	bls.n	801fc62 <ip4addr_aton+0x1ea>
        return 0;
 801fc5e:	2300      	movs	r3, #0
 801fc60:	e028      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801fc62:	68fb      	ldr	r3, [r7, #12]
 801fc64:	2bff      	cmp	r3, #255	; 0xff
 801fc66:	d805      	bhi.n	801fc74 <ip4addr_aton+0x1fc>
 801fc68:	693b      	ldr	r3, [r7, #16]
 801fc6a:	2bff      	cmp	r3, #255	; 0xff
 801fc6c:	d802      	bhi.n	801fc74 <ip4addr_aton+0x1fc>
 801fc6e:	697b      	ldr	r3, [r7, #20]
 801fc70:	2bff      	cmp	r3, #255	; 0xff
 801fc72:	d901      	bls.n	801fc78 <ip4addr_aton+0x200>
        return 0;
 801fc74:	2300      	movs	r3, #0
 801fc76:	e01d      	b.n	801fcb4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801fc78:	68fb      	ldr	r3, [r7, #12]
 801fc7a:	061a      	lsls	r2, r3, #24
 801fc7c:	693b      	ldr	r3, [r7, #16]
 801fc7e:	041b      	lsls	r3, r3, #16
 801fc80:	431a      	orrs	r2, r3
 801fc82:	697b      	ldr	r3, [r7, #20]
 801fc84:	021b      	lsls	r3, r3, #8
 801fc86:	4313      	orrs	r3, r2
 801fc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc8a:	4313      	orrs	r3, r2
 801fc8c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801fc8e:	e007      	b.n	801fca0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801fc90:	4b0b      	ldr	r3, [pc, #44]	; (801fcc0 <ip4addr_aton+0x248>)
 801fc92:	22f9      	movs	r2, #249	; 0xf9
 801fc94:	490b      	ldr	r1, [pc, #44]	; (801fcc4 <ip4addr_aton+0x24c>)
 801fc96:	480c      	ldr	r0, [pc, #48]	; (801fcc8 <ip4addr_aton+0x250>)
 801fc98:	f001 ff8c 	bl	8021bb4 <iprintf>
      break;
 801fc9c:	e000      	b.n	801fca0 <ip4addr_aton+0x228>
      break;
 801fc9e:	bf00      	nop
  }
  if (addr) {
 801fca0:	683b      	ldr	r3, [r7, #0]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d005      	beq.n	801fcb2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801fca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fca8:	f7f2 fb1d 	bl	80122e6 <lwip_htonl>
 801fcac:	4602      	mov	r2, r0
 801fcae:	683b      	ldr	r3, [r7, #0]
 801fcb0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801fcb2:	2301      	movs	r3, #1
}
 801fcb4:	4618      	mov	r0, r3
 801fcb6:	3728      	adds	r7, #40	; 0x28
 801fcb8:	46bd      	mov	sp, r7
 801fcba:	bd80      	pop	{r7, pc}
 801fcbc:	080299dc 	.word	0x080299dc
 801fcc0:	080293f4 	.word	0x080293f4
 801fcc4:	08029430 	.word	0x08029430
 801fcc8:	0802943c 	.word	0x0802943c

0801fccc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801fccc:	b580      	push	{r7, lr}
 801fcce:	b084      	sub	sp, #16
 801fcd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801fcd6:	4b12      	ldr	r3, [pc, #72]	; (801fd20 <ip_reass_tmr+0x54>)
 801fcd8:	681b      	ldr	r3, [r3, #0]
 801fcda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801fcdc:	e018      	b.n	801fd10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801fcde:	68fb      	ldr	r3, [r7, #12]
 801fce0:	7fdb      	ldrb	r3, [r3, #31]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d00b      	beq.n	801fcfe <ip_reass_tmr+0x32>
      r->timer--;
 801fce6:	68fb      	ldr	r3, [r7, #12]
 801fce8:	7fdb      	ldrb	r3, [r3, #31]
 801fcea:	3b01      	subs	r3, #1
 801fcec:	b2da      	uxtb	r2, r3
 801fcee:	68fb      	ldr	r3, [r7, #12]
 801fcf0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801fcf2:	68fb      	ldr	r3, [r7, #12]
 801fcf4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801fcf6:	68fb      	ldr	r3, [r7, #12]
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	60fb      	str	r3, [r7, #12]
 801fcfc:	e008      	b.n	801fd10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801fd08:	68b9      	ldr	r1, [r7, #8]
 801fd0a:	6878      	ldr	r0, [r7, #4]
 801fd0c:	f000 f80a 	bl	801fd24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801fd10:	68fb      	ldr	r3, [r7, #12]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d1e3      	bne.n	801fcde <ip_reass_tmr+0x12>
    }
  }
}
 801fd16:	bf00      	nop
 801fd18:	bf00      	nop
 801fd1a:	3710      	adds	r7, #16
 801fd1c:	46bd      	mov	sp, r7
 801fd1e:	bd80      	pop	{r7, pc}
 801fd20:	20014498 	.word	0x20014498

0801fd24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fd24:	b580      	push	{r7, lr}
 801fd26:	b088      	sub	sp, #32
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	6078      	str	r0, [r7, #4]
 801fd2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801fd2e:	2300      	movs	r3, #0
 801fd30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801fd32:	683a      	ldr	r2, [r7, #0]
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	429a      	cmp	r2, r3
 801fd38:	d105      	bne.n	801fd46 <ip_reass_free_complete_datagram+0x22>
 801fd3a:	4b45      	ldr	r3, [pc, #276]	; (801fe50 <ip_reass_free_complete_datagram+0x12c>)
 801fd3c:	22ab      	movs	r2, #171	; 0xab
 801fd3e:	4945      	ldr	r1, [pc, #276]	; (801fe54 <ip_reass_free_complete_datagram+0x130>)
 801fd40:	4845      	ldr	r0, [pc, #276]	; (801fe58 <ip_reass_free_complete_datagram+0x134>)
 801fd42:	f001 ff37 	bl	8021bb4 <iprintf>
  if (prev != NULL) {
 801fd46:	683b      	ldr	r3, [r7, #0]
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d00a      	beq.n	801fd62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801fd4c:	683b      	ldr	r3, [r7, #0]
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	687a      	ldr	r2, [r7, #4]
 801fd52:	429a      	cmp	r2, r3
 801fd54:	d005      	beq.n	801fd62 <ip_reass_free_complete_datagram+0x3e>
 801fd56:	4b3e      	ldr	r3, [pc, #248]	; (801fe50 <ip_reass_free_complete_datagram+0x12c>)
 801fd58:	22ad      	movs	r2, #173	; 0xad
 801fd5a:	4940      	ldr	r1, [pc, #256]	; (801fe5c <ip_reass_free_complete_datagram+0x138>)
 801fd5c:	483e      	ldr	r0, [pc, #248]	; (801fe58 <ip_reass_free_complete_datagram+0x134>)
 801fd5e:	f001 ff29 	bl	8021bb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	685b      	ldr	r3, [r3, #4]
 801fd66:	685b      	ldr	r3, [r3, #4]
 801fd68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801fd6a:	697b      	ldr	r3, [r7, #20]
 801fd6c:	889b      	ldrh	r3, [r3, #4]
 801fd6e:	b29b      	uxth	r3, r3
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d12a      	bne.n	801fdca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	685b      	ldr	r3, [r3, #4]
 801fd78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801fd7a:	697b      	ldr	r3, [r7, #20]
 801fd7c:	681a      	ldr	r2, [r3, #0]
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801fd82:	69bb      	ldr	r3, [r7, #24]
 801fd84:	6858      	ldr	r0, [r3, #4]
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	3308      	adds	r3, #8
 801fd8a:	2214      	movs	r2, #20
 801fd8c:	4619      	mov	r1, r3
 801fd8e:	f001 f9cd 	bl	802112c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801fd92:	2101      	movs	r1, #1
 801fd94:	69b8      	ldr	r0, [r7, #24]
 801fd96:	f7ff faff 	bl	801f398 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801fd9a:	69b8      	ldr	r0, [r7, #24]
 801fd9c:	f7f4 fedc 	bl	8014b58 <pbuf_clen>
 801fda0:	4603      	mov	r3, r0
 801fda2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fda4:	8bfa      	ldrh	r2, [r7, #30]
 801fda6:	8a7b      	ldrh	r3, [r7, #18]
 801fda8:	4413      	add	r3, r2
 801fdaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fdae:	db05      	blt.n	801fdbc <ip_reass_free_complete_datagram+0x98>
 801fdb0:	4b27      	ldr	r3, [pc, #156]	; (801fe50 <ip_reass_free_complete_datagram+0x12c>)
 801fdb2:	22bc      	movs	r2, #188	; 0xbc
 801fdb4:	492a      	ldr	r1, [pc, #168]	; (801fe60 <ip_reass_free_complete_datagram+0x13c>)
 801fdb6:	4828      	ldr	r0, [pc, #160]	; (801fe58 <ip_reass_free_complete_datagram+0x134>)
 801fdb8:	f001 fefc 	bl	8021bb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801fdbc:	8bfa      	ldrh	r2, [r7, #30]
 801fdbe:	8a7b      	ldrh	r3, [r7, #18]
 801fdc0:	4413      	add	r3, r2
 801fdc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801fdc4:	69b8      	ldr	r0, [r7, #24]
 801fdc6:	f7f4 fe39 	bl	8014a3c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	685b      	ldr	r3, [r3, #4]
 801fdce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801fdd0:	e01f      	b.n	801fe12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801fdd2:	69bb      	ldr	r3, [r7, #24]
 801fdd4:	685b      	ldr	r3, [r3, #4]
 801fdd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801fdd8:	69bb      	ldr	r3, [r7, #24]
 801fdda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801fddc:	697b      	ldr	r3, [r7, #20]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801fde2:	68f8      	ldr	r0, [r7, #12]
 801fde4:	f7f4 feb8 	bl	8014b58 <pbuf_clen>
 801fde8:	4603      	mov	r3, r0
 801fdea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fdec:	8bfa      	ldrh	r2, [r7, #30]
 801fdee:	8a7b      	ldrh	r3, [r7, #18]
 801fdf0:	4413      	add	r3, r2
 801fdf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fdf6:	db05      	blt.n	801fe04 <ip_reass_free_complete_datagram+0xe0>
 801fdf8:	4b15      	ldr	r3, [pc, #84]	; (801fe50 <ip_reass_free_complete_datagram+0x12c>)
 801fdfa:	22cc      	movs	r2, #204	; 0xcc
 801fdfc:	4918      	ldr	r1, [pc, #96]	; (801fe60 <ip_reass_free_complete_datagram+0x13c>)
 801fdfe:	4816      	ldr	r0, [pc, #88]	; (801fe58 <ip_reass_free_complete_datagram+0x134>)
 801fe00:	f001 fed8 	bl	8021bb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801fe04:	8bfa      	ldrh	r2, [r7, #30]
 801fe06:	8a7b      	ldrh	r3, [r7, #18]
 801fe08:	4413      	add	r3, r2
 801fe0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801fe0c:	68f8      	ldr	r0, [r7, #12]
 801fe0e:	f7f4 fe15 	bl	8014a3c <pbuf_free>
  while (p != NULL) {
 801fe12:	69bb      	ldr	r3, [r7, #24]
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d1dc      	bne.n	801fdd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801fe18:	6839      	ldr	r1, [r7, #0]
 801fe1a:	6878      	ldr	r0, [r7, #4]
 801fe1c:	f000 f8c2 	bl	801ffa4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801fe20:	4b10      	ldr	r3, [pc, #64]	; (801fe64 <ip_reass_free_complete_datagram+0x140>)
 801fe22:	881b      	ldrh	r3, [r3, #0]
 801fe24:	8bfa      	ldrh	r2, [r7, #30]
 801fe26:	429a      	cmp	r2, r3
 801fe28:	d905      	bls.n	801fe36 <ip_reass_free_complete_datagram+0x112>
 801fe2a:	4b09      	ldr	r3, [pc, #36]	; (801fe50 <ip_reass_free_complete_datagram+0x12c>)
 801fe2c:	22d2      	movs	r2, #210	; 0xd2
 801fe2e:	490e      	ldr	r1, [pc, #56]	; (801fe68 <ip_reass_free_complete_datagram+0x144>)
 801fe30:	4809      	ldr	r0, [pc, #36]	; (801fe58 <ip_reass_free_complete_datagram+0x134>)
 801fe32:	f001 febf 	bl	8021bb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801fe36:	4b0b      	ldr	r3, [pc, #44]	; (801fe64 <ip_reass_free_complete_datagram+0x140>)
 801fe38:	881a      	ldrh	r2, [r3, #0]
 801fe3a:	8bfb      	ldrh	r3, [r7, #30]
 801fe3c:	1ad3      	subs	r3, r2, r3
 801fe3e:	b29a      	uxth	r2, r3
 801fe40:	4b08      	ldr	r3, [pc, #32]	; (801fe64 <ip_reass_free_complete_datagram+0x140>)
 801fe42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801fe44:	8bfb      	ldrh	r3, [r7, #30]
}
 801fe46:	4618      	mov	r0, r3
 801fe48:	3720      	adds	r7, #32
 801fe4a:	46bd      	mov	sp, r7
 801fe4c:	bd80      	pop	{r7, pc}
 801fe4e:	bf00      	nop
 801fe50:	08029464 	.word	0x08029464
 801fe54:	080294a0 	.word	0x080294a0
 801fe58:	080294ac 	.word	0x080294ac
 801fe5c:	080294d4 	.word	0x080294d4
 801fe60:	080294e8 	.word	0x080294e8
 801fe64:	2001449c 	.word	0x2001449c
 801fe68:	08029508 	.word	0x08029508

0801fe6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801fe6c:	b580      	push	{r7, lr}
 801fe6e:	b08a      	sub	sp, #40	; 0x28
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	6078      	str	r0, [r7, #4]
 801fe74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801fe76:	2300      	movs	r3, #0
 801fe78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801fe7a:	2300      	movs	r3, #0
 801fe7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801fe7e:	2300      	movs	r3, #0
 801fe80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801fe82:	2300      	movs	r3, #0
 801fe84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801fe86:	2300      	movs	r3, #0
 801fe88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801fe8a:	4b28      	ldr	r3, [pc, #160]	; (801ff2c <ip_reass_remove_oldest_datagram+0xc0>)
 801fe8c:	681b      	ldr	r3, [r3, #0]
 801fe8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fe90:	e030      	b.n	801fef4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe94:	695a      	ldr	r2, [r3, #20]
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	68db      	ldr	r3, [r3, #12]
 801fe9a:	429a      	cmp	r2, r3
 801fe9c:	d10c      	bne.n	801feb8 <ip_reass_remove_oldest_datagram+0x4c>
 801fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fea0:	699a      	ldr	r2, [r3, #24]
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	691b      	ldr	r3, [r3, #16]
 801fea6:	429a      	cmp	r2, r3
 801fea8:	d106      	bne.n	801feb8 <ip_reass_remove_oldest_datagram+0x4c>
 801feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801feac:	899a      	ldrh	r2, [r3, #12]
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	889b      	ldrh	r3, [r3, #4]
 801feb2:	b29b      	uxth	r3, r3
 801feb4:	429a      	cmp	r2, r3
 801feb6:	d014      	beq.n	801fee2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801feb8:	693b      	ldr	r3, [r7, #16]
 801feba:	3301      	adds	r3, #1
 801febc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801febe:	6a3b      	ldr	r3, [r7, #32]
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d104      	bne.n	801fece <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801fec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fec6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fec8:	69fb      	ldr	r3, [r7, #28]
 801feca:	61bb      	str	r3, [r7, #24]
 801fecc:	e009      	b.n	801fee2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fed0:	7fda      	ldrb	r2, [r3, #31]
 801fed2:	6a3b      	ldr	r3, [r7, #32]
 801fed4:	7fdb      	ldrb	r3, [r3, #31]
 801fed6:	429a      	cmp	r2, r3
 801fed8:	d803      	bhi.n	801fee2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fedc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fede:	69fb      	ldr	r3, [r7, #28]
 801fee0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d001      	beq.n	801feee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801feea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801feec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fef0:	681b      	ldr	r3, [r3, #0]
 801fef2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d1cb      	bne.n	801fe92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801fefa:	6a3b      	ldr	r3, [r7, #32]
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d008      	beq.n	801ff12 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ff00:	69b9      	ldr	r1, [r7, #24]
 801ff02:	6a38      	ldr	r0, [r7, #32]
 801ff04:	f7ff ff0e 	bl	801fd24 <ip_reass_free_complete_datagram>
 801ff08:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ff0a:	697a      	ldr	r2, [r7, #20]
 801ff0c:	68fb      	ldr	r3, [r7, #12]
 801ff0e:	4413      	add	r3, r2
 801ff10:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ff12:	697a      	ldr	r2, [r7, #20]
 801ff14:	683b      	ldr	r3, [r7, #0]
 801ff16:	429a      	cmp	r2, r3
 801ff18:	da02      	bge.n	801ff20 <ip_reass_remove_oldest_datagram+0xb4>
 801ff1a:	693b      	ldr	r3, [r7, #16]
 801ff1c:	2b01      	cmp	r3, #1
 801ff1e:	dcac      	bgt.n	801fe7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ff20:	697b      	ldr	r3, [r7, #20]
}
 801ff22:	4618      	mov	r0, r3
 801ff24:	3728      	adds	r7, #40	; 0x28
 801ff26:	46bd      	mov	sp, r7
 801ff28:	bd80      	pop	{r7, pc}
 801ff2a:	bf00      	nop
 801ff2c:	20014498 	.word	0x20014498

0801ff30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ff30:	b580      	push	{r7, lr}
 801ff32:	b084      	sub	sp, #16
 801ff34:	af00      	add	r7, sp, #0
 801ff36:	6078      	str	r0, [r7, #4]
 801ff38:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ff3a:	2004      	movs	r0, #4
 801ff3c:	f7f3 fe4a 	bl	8013bd4 <memp_malloc>
 801ff40:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ff42:	68fb      	ldr	r3, [r7, #12]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d110      	bne.n	801ff6a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ff48:	6839      	ldr	r1, [r7, #0]
 801ff4a:	6878      	ldr	r0, [r7, #4]
 801ff4c:	f7ff ff8e 	bl	801fe6c <ip_reass_remove_oldest_datagram>
 801ff50:	4602      	mov	r2, r0
 801ff52:	683b      	ldr	r3, [r7, #0]
 801ff54:	4293      	cmp	r3, r2
 801ff56:	dc03      	bgt.n	801ff60 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ff58:	2004      	movs	r0, #4
 801ff5a:	f7f3 fe3b 	bl	8013bd4 <memp_malloc>
 801ff5e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d101      	bne.n	801ff6a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ff66:	2300      	movs	r3, #0
 801ff68:	e016      	b.n	801ff98 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ff6a:	2220      	movs	r2, #32
 801ff6c:	2100      	movs	r1, #0
 801ff6e:	68f8      	ldr	r0, [r7, #12]
 801ff70:	f001 f904 	bl	802117c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	220f      	movs	r2, #15
 801ff78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ff7a:	4b09      	ldr	r3, [pc, #36]	; (801ffa0 <ip_reass_enqueue_new_datagram+0x70>)
 801ff7c:	681a      	ldr	r2, [r3, #0]
 801ff7e:	68fb      	ldr	r3, [r7, #12]
 801ff80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ff82:	4a07      	ldr	r2, [pc, #28]	; (801ffa0 <ip_reass_enqueue_new_datagram+0x70>)
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	3308      	adds	r3, #8
 801ff8c:	2214      	movs	r2, #20
 801ff8e:	6879      	ldr	r1, [r7, #4]
 801ff90:	4618      	mov	r0, r3
 801ff92:	f001 f8cb 	bl	802112c <memcpy>
  return ipr;
 801ff96:	68fb      	ldr	r3, [r7, #12]
}
 801ff98:	4618      	mov	r0, r3
 801ff9a:	3710      	adds	r7, #16
 801ff9c:	46bd      	mov	sp, r7
 801ff9e:	bd80      	pop	{r7, pc}
 801ffa0:	20014498 	.word	0x20014498

0801ffa4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ffa4:	b580      	push	{r7, lr}
 801ffa6:	b082      	sub	sp, #8
 801ffa8:	af00      	add	r7, sp, #0
 801ffaa:	6078      	str	r0, [r7, #4]
 801ffac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ffae:	4b10      	ldr	r3, [pc, #64]	; (801fff0 <ip_reass_dequeue_datagram+0x4c>)
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	687a      	ldr	r2, [r7, #4]
 801ffb4:	429a      	cmp	r2, r3
 801ffb6:	d104      	bne.n	801ffc2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	4a0c      	ldr	r2, [pc, #48]	; (801fff0 <ip_reass_dequeue_datagram+0x4c>)
 801ffbe:	6013      	str	r3, [r2, #0]
 801ffc0:	e00d      	b.n	801ffde <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ffc2:	683b      	ldr	r3, [r7, #0]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d106      	bne.n	801ffd6 <ip_reass_dequeue_datagram+0x32>
 801ffc8:	4b0a      	ldr	r3, [pc, #40]	; (801fff4 <ip_reass_dequeue_datagram+0x50>)
 801ffca:	f240 1245 	movw	r2, #325	; 0x145
 801ffce:	490a      	ldr	r1, [pc, #40]	; (801fff8 <ip_reass_dequeue_datagram+0x54>)
 801ffd0:	480a      	ldr	r0, [pc, #40]	; (801fffc <ip_reass_dequeue_datagram+0x58>)
 801ffd2:	f001 fdef 	bl	8021bb4 <iprintf>
    prev->next = ipr->next;
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	681a      	ldr	r2, [r3, #0]
 801ffda:	683b      	ldr	r3, [r7, #0]
 801ffdc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ffde:	6879      	ldr	r1, [r7, #4]
 801ffe0:	2004      	movs	r0, #4
 801ffe2:	f7f3 fe49 	bl	8013c78 <memp_free>
}
 801ffe6:	bf00      	nop
 801ffe8:	3708      	adds	r7, #8
 801ffea:	46bd      	mov	sp, r7
 801ffec:	bd80      	pop	{r7, pc}
 801ffee:	bf00      	nop
 801fff0:	20014498 	.word	0x20014498
 801fff4:	08029464 	.word	0x08029464
 801fff8:	0802952c 	.word	0x0802952c
 801fffc:	080294ac 	.word	0x080294ac

08020000 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020000:	b580      	push	{r7, lr}
 8020002:	b08c      	sub	sp, #48	; 0x30
 8020004:	af00      	add	r7, sp, #0
 8020006:	60f8      	str	r0, [r7, #12]
 8020008:	60b9      	str	r1, [r7, #8]
 802000a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 802000c:	2300      	movs	r3, #0
 802000e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8020010:	2301      	movs	r3, #1
 8020012:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8020014:	68bb      	ldr	r3, [r7, #8]
 8020016:	685b      	ldr	r3, [r3, #4]
 8020018:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802001a:	69fb      	ldr	r3, [r7, #28]
 802001c:	885b      	ldrh	r3, [r3, #2]
 802001e:	b29b      	uxth	r3, r3
 8020020:	4618      	mov	r0, r3
 8020022:	f7f2 f94b 	bl	80122bc <lwip_htons>
 8020026:	4603      	mov	r3, r0
 8020028:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802002a:	69fb      	ldr	r3, [r7, #28]
 802002c:	781b      	ldrb	r3, [r3, #0]
 802002e:	f003 030f 	and.w	r3, r3, #15
 8020032:	b2db      	uxtb	r3, r3
 8020034:	009b      	lsls	r3, r3, #2
 8020036:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8020038:	7e7b      	ldrb	r3, [r7, #25]
 802003a:	b29b      	uxth	r3, r3
 802003c:	8b7a      	ldrh	r2, [r7, #26]
 802003e:	429a      	cmp	r2, r3
 8020040:	d202      	bcs.n	8020048 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020046:	e135      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8020048:	7e7b      	ldrb	r3, [r7, #25]
 802004a:	b29b      	uxth	r3, r3
 802004c:	8b7a      	ldrh	r2, [r7, #26]
 802004e:	1ad3      	subs	r3, r2, r3
 8020050:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8020052:	69fb      	ldr	r3, [r7, #28]
 8020054:	88db      	ldrh	r3, [r3, #6]
 8020056:	b29b      	uxth	r3, r3
 8020058:	4618      	mov	r0, r3
 802005a:	f7f2 f92f 	bl	80122bc <lwip_htons>
 802005e:	4603      	mov	r3, r0
 8020060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020064:	b29b      	uxth	r3, r3
 8020066:	00db      	lsls	r3, r3, #3
 8020068:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802006a:	68bb      	ldr	r3, [r7, #8]
 802006c:	685b      	ldr	r3, [r3, #4]
 802006e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8020070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020072:	2200      	movs	r2, #0
 8020074:	701a      	strb	r2, [r3, #0]
 8020076:	2200      	movs	r2, #0
 8020078:	705a      	strb	r2, [r3, #1]
 802007a:	2200      	movs	r2, #0
 802007c:	709a      	strb	r2, [r3, #2]
 802007e:	2200      	movs	r2, #0
 8020080:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8020082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020084:	8afa      	ldrh	r2, [r7, #22]
 8020086:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8020088:	8afa      	ldrh	r2, [r7, #22]
 802008a:	8b7b      	ldrh	r3, [r7, #26]
 802008c:	4413      	add	r3, r2
 802008e:	b29a      	uxth	r2, r3
 8020090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020092:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8020094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020096:	88db      	ldrh	r3, [r3, #6]
 8020098:	b29b      	uxth	r3, r3
 802009a:	8afa      	ldrh	r2, [r7, #22]
 802009c:	429a      	cmp	r2, r3
 802009e:	d902      	bls.n	80200a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80200a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80200a4:	e106      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	685b      	ldr	r3, [r3, #4]
 80200aa:	627b      	str	r3, [r7, #36]	; 0x24
 80200ac:	e068      	b.n	8020180 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80200ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200b0:	685b      	ldr	r3, [r3, #4]
 80200b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80200b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200b6:	889b      	ldrh	r3, [r3, #4]
 80200b8:	b29a      	uxth	r2, r3
 80200ba:	693b      	ldr	r3, [r7, #16]
 80200bc:	889b      	ldrh	r3, [r3, #4]
 80200be:	b29b      	uxth	r3, r3
 80200c0:	429a      	cmp	r2, r3
 80200c2:	d235      	bcs.n	8020130 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80200c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80200c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80200ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d020      	beq.n	8020112 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80200d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200d2:	889b      	ldrh	r3, [r3, #4]
 80200d4:	b29a      	uxth	r2, r3
 80200d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200d8:	88db      	ldrh	r3, [r3, #6]
 80200da:	b29b      	uxth	r3, r3
 80200dc:	429a      	cmp	r2, r3
 80200de:	d307      	bcc.n	80200f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80200e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200e2:	88db      	ldrh	r3, [r3, #6]
 80200e4:	b29a      	uxth	r2, r3
 80200e6:	693b      	ldr	r3, [r7, #16]
 80200e8:	889b      	ldrh	r3, [r3, #4]
 80200ea:	b29b      	uxth	r3, r3
 80200ec:	429a      	cmp	r2, r3
 80200ee:	d902      	bls.n	80200f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80200f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80200f4:	e0de      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80200f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200f8:	68ba      	ldr	r2, [r7, #8]
 80200fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80200fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200fe:	88db      	ldrh	r3, [r3, #6]
 8020100:	b29a      	uxth	r2, r3
 8020102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020104:	889b      	ldrh	r3, [r3, #4]
 8020106:	b29b      	uxth	r3, r3
 8020108:	429a      	cmp	r2, r3
 802010a:	d03d      	beq.n	8020188 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802010c:	2300      	movs	r3, #0
 802010e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020110:	e03a      	b.n	8020188 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8020112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020114:	88db      	ldrh	r3, [r3, #6]
 8020116:	b29a      	uxth	r2, r3
 8020118:	693b      	ldr	r3, [r7, #16]
 802011a:	889b      	ldrh	r3, [r3, #4]
 802011c:	b29b      	uxth	r3, r3
 802011e:	429a      	cmp	r2, r3
 8020120:	d902      	bls.n	8020128 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020126:	e0c5      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8020128:	68fb      	ldr	r3, [r7, #12]
 802012a:	68ba      	ldr	r2, [r7, #8]
 802012c:	605a      	str	r2, [r3, #4]
      break;
 802012e:	e02b      	b.n	8020188 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8020130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020132:	889b      	ldrh	r3, [r3, #4]
 8020134:	b29a      	uxth	r2, r3
 8020136:	693b      	ldr	r3, [r7, #16]
 8020138:	889b      	ldrh	r3, [r3, #4]
 802013a:	b29b      	uxth	r3, r3
 802013c:	429a      	cmp	r2, r3
 802013e:	d102      	bne.n	8020146 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020144:	e0b6      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020148:	889b      	ldrh	r3, [r3, #4]
 802014a:	b29a      	uxth	r2, r3
 802014c:	693b      	ldr	r3, [r7, #16]
 802014e:	88db      	ldrh	r3, [r3, #6]
 8020150:	b29b      	uxth	r3, r3
 8020152:	429a      	cmp	r2, r3
 8020154:	d202      	bcs.n	802015c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802015a:	e0ab      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 802015c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802015e:	2b00      	cmp	r3, #0
 8020160:	d009      	beq.n	8020176 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8020162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020164:	88db      	ldrh	r3, [r3, #6]
 8020166:	b29a      	uxth	r2, r3
 8020168:	693b      	ldr	r3, [r7, #16]
 802016a:	889b      	ldrh	r3, [r3, #4]
 802016c:	b29b      	uxth	r3, r3
 802016e:	429a      	cmp	r2, r3
 8020170:	d001      	beq.n	8020176 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020172:	2300      	movs	r3, #0
 8020174:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020176:	693b      	ldr	r3, [r7, #16]
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 802017c:	693b      	ldr	r3, [r7, #16]
 802017e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8020180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020182:	2b00      	cmp	r3, #0
 8020184:	d193      	bne.n	80200ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8020186:	e000      	b.n	802018a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8020188:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802018c:	2b00      	cmp	r3, #0
 802018e:	d12d      	bne.n	80201ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8020190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020192:	2b00      	cmp	r3, #0
 8020194:	d01c      	beq.n	80201d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020198:	88db      	ldrh	r3, [r3, #6]
 802019a:	b29a      	uxth	r2, r3
 802019c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802019e:	889b      	ldrh	r3, [r3, #4]
 80201a0:	b29b      	uxth	r3, r3
 80201a2:	429a      	cmp	r2, r3
 80201a4:	d906      	bls.n	80201b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80201a6:	4b45      	ldr	r3, [pc, #276]	; (80202bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80201a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80201ac:	4944      	ldr	r1, [pc, #272]	; (80202c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80201ae:	4845      	ldr	r0, [pc, #276]	; (80202c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80201b0:	f001 fd00 	bl	8021bb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80201b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201b6:	68ba      	ldr	r2, [r7, #8]
 80201b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80201ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201bc:	88db      	ldrh	r3, [r3, #6]
 80201be:	b29a      	uxth	r2, r3
 80201c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201c2:	889b      	ldrh	r3, [r3, #4]
 80201c4:	b29b      	uxth	r3, r3
 80201c6:	429a      	cmp	r2, r3
 80201c8:	d010      	beq.n	80201ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80201ca:	2300      	movs	r3, #0
 80201cc:	623b      	str	r3, [r7, #32]
 80201ce:	e00d      	b.n	80201ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80201d0:	68fb      	ldr	r3, [r7, #12]
 80201d2:	685b      	ldr	r3, [r3, #4]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d006      	beq.n	80201e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80201d8:	4b38      	ldr	r3, [pc, #224]	; (80202bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80201da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80201de:	493a      	ldr	r1, [pc, #232]	; (80202c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80201e0:	4838      	ldr	r0, [pc, #224]	; (80202c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80201e2:	f001 fce7 	bl	8021bb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80201e6:	68fb      	ldr	r3, [r7, #12]
 80201e8:	68ba      	ldr	r2, [r7, #8]
 80201ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d105      	bne.n	80201fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	7f9b      	ldrb	r3, [r3, #30]
 80201f6:	f003 0301 	and.w	r3, r3, #1
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d059      	beq.n	80202b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80201fe:	6a3b      	ldr	r3, [r7, #32]
 8020200:	2b00      	cmp	r3, #0
 8020202:	d04f      	beq.n	80202a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8020204:	68fb      	ldr	r3, [r7, #12]
 8020206:	685b      	ldr	r3, [r3, #4]
 8020208:	2b00      	cmp	r3, #0
 802020a:	d006      	beq.n	802021a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 802020c:	68fb      	ldr	r3, [r7, #12]
 802020e:	685b      	ldr	r3, [r3, #4]
 8020210:	685b      	ldr	r3, [r3, #4]
 8020212:	889b      	ldrh	r3, [r3, #4]
 8020214:	b29b      	uxth	r3, r3
 8020216:	2b00      	cmp	r3, #0
 8020218:	d002      	beq.n	8020220 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802021a:	2300      	movs	r3, #0
 802021c:	623b      	str	r3, [r7, #32]
 802021e:	e041      	b.n	80202a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8020220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020222:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8020224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802022a:	e012      	b.n	8020252 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 802022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802022e:	685b      	ldr	r3, [r3, #4]
 8020230:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8020232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020234:	88db      	ldrh	r3, [r3, #6]
 8020236:	b29a      	uxth	r2, r3
 8020238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802023a:	889b      	ldrh	r3, [r3, #4]
 802023c:	b29b      	uxth	r3, r3
 802023e:	429a      	cmp	r2, r3
 8020240:	d002      	beq.n	8020248 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8020242:	2300      	movs	r3, #0
 8020244:	623b      	str	r3, [r7, #32]
            break;
 8020246:	e007      	b.n	8020258 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8020248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802024a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 802024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8020252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020254:	2b00      	cmp	r3, #0
 8020256:	d1e9      	bne.n	802022c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020258:	6a3b      	ldr	r3, [r7, #32]
 802025a:	2b00      	cmp	r3, #0
 802025c:	d022      	beq.n	80202a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802025e:	68fb      	ldr	r3, [r7, #12]
 8020260:	685b      	ldr	r3, [r3, #4]
 8020262:	2b00      	cmp	r3, #0
 8020264:	d106      	bne.n	8020274 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8020266:	4b15      	ldr	r3, [pc, #84]	; (80202bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020268:	f240 12df 	movw	r2, #479	; 0x1df
 802026c:	4917      	ldr	r1, [pc, #92]	; (80202cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802026e:	4815      	ldr	r0, [pc, #84]	; (80202c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020270:	f001 fca0 	bl	8021bb4 <iprintf>
          LWIP_ASSERT("sanity check",
 8020274:	68fb      	ldr	r3, [r7, #12]
 8020276:	685b      	ldr	r3, [r3, #4]
 8020278:	685b      	ldr	r3, [r3, #4]
 802027a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802027c:	429a      	cmp	r2, r3
 802027e:	d106      	bne.n	802028e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8020280:	4b0e      	ldr	r3, [pc, #56]	; (80202bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020282:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020286:	4911      	ldr	r1, [pc, #68]	; (80202cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020288:	480e      	ldr	r0, [pc, #56]	; (80202c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802028a:	f001 fc93 	bl	8021bb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	2b00      	cmp	r3, #0
 8020294:	d006      	beq.n	80202a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8020296:	4b09      	ldr	r3, [pc, #36]	; (80202bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020298:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 802029c:	490c      	ldr	r1, [pc, #48]	; (80202d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 802029e:	4809      	ldr	r0, [pc, #36]	; (80202c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80202a0:	f001 fc88 	bl	8021bb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80202a4:	6a3b      	ldr	r3, [r7, #32]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	bf14      	ite	ne
 80202aa:	2301      	movne	r3, #1
 80202ac:	2300      	moveq	r3, #0
 80202ae:	b2db      	uxtb	r3, r3
 80202b0:	e000      	b.n	80202b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80202b2:	2300      	movs	r3, #0
}
 80202b4:	4618      	mov	r0, r3
 80202b6:	3730      	adds	r7, #48	; 0x30
 80202b8:	46bd      	mov	sp, r7
 80202ba:	bd80      	pop	{r7, pc}
 80202bc:	08029464 	.word	0x08029464
 80202c0:	08029548 	.word	0x08029548
 80202c4:	080294ac 	.word	0x080294ac
 80202c8:	08029568 	.word	0x08029568
 80202cc:	080295a0 	.word	0x080295a0
 80202d0:	080295b0 	.word	0x080295b0

080202d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80202d4:	b580      	push	{r7, lr}
 80202d6:	b08e      	sub	sp, #56	; 0x38
 80202d8:	af00      	add	r7, sp, #0
 80202da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	685b      	ldr	r3, [r3, #4]
 80202e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80202e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202e4:	781b      	ldrb	r3, [r3, #0]
 80202e6:	f003 030f 	and.w	r3, r3, #15
 80202ea:	b2db      	uxtb	r3, r3
 80202ec:	009b      	lsls	r3, r3, #2
 80202ee:	b2db      	uxtb	r3, r3
 80202f0:	2b14      	cmp	r3, #20
 80202f2:	f040 8167 	bne.w	80205c4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80202f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202f8:	88db      	ldrh	r3, [r3, #6]
 80202fa:	b29b      	uxth	r3, r3
 80202fc:	4618      	mov	r0, r3
 80202fe:	f7f1 ffdd 	bl	80122bc <lwip_htons>
 8020302:	4603      	mov	r3, r0
 8020304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020308:	b29b      	uxth	r3, r3
 802030a:	00db      	lsls	r3, r3, #3
 802030c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802030e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020310:	885b      	ldrh	r3, [r3, #2]
 8020312:	b29b      	uxth	r3, r3
 8020314:	4618      	mov	r0, r3
 8020316:	f7f1 ffd1 	bl	80122bc <lwip_htons>
 802031a:	4603      	mov	r3, r0
 802031c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802031e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020320:	781b      	ldrb	r3, [r3, #0]
 8020322:	f003 030f 	and.w	r3, r3, #15
 8020326:	b2db      	uxtb	r3, r3
 8020328:	009b      	lsls	r3, r3, #2
 802032a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802032e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020332:	b29b      	uxth	r3, r3
 8020334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020336:	429a      	cmp	r2, r3
 8020338:	f0c0 8146 	bcc.w	80205c8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 802033c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020340:	b29b      	uxth	r3, r3
 8020342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020344:	1ad3      	subs	r3, r2, r3
 8020346:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020348:	6878      	ldr	r0, [r7, #4]
 802034a:	f7f4 fc05 	bl	8014b58 <pbuf_clen>
 802034e:	4603      	mov	r3, r0
 8020350:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8020352:	4b9f      	ldr	r3, [pc, #636]	; (80205d0 <ip4_reass+0x2fc>)
 8020354:	881b      	ldrh	r3, [r3, #0]
 8020356:	461a      	mov	r2, r3
 8020358:	8c3b      	ldrh	r3, [r7, #32]
 802035a:	4413      	add	r3, r2
 802035c:	2b0a      	cmp	r3, #10
 802035e:	dd10      	ble.n	8020382 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020360:	8c3b      	ldrh	r3, [r7, #32]
 8020362:	4619      	mov	r1, r3
 8020364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020366:	f7ff fd81 	bl	801fe6c <ip_reass_remove_oldest_datagram>
 802036a:	4603      	mov	r3, r0
 802036c:	2b00      	cmp	r3, #0
 802036e:	f000 812d 	beq.w	80205cc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8020372:	4b97      	ldr	r3, [pc, #604]	; (80205d0 <ip4_reass+0x2fc>)
 8020374:	881b      	ldrh	r3, [r3, #0]
 8020376:	461a      	mov	r2, r3
 8020378:	8c3b      	ldrh	r3, [r7, #32]
 802037a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802037c:	2b0a      	cmp	r3, #10
 802037e:	f300 8125 	bgt.w	80205cc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020382:	4b94      	ldr	r3, [pc, #592]	; (80205d4 <ip4_reass+0x300>)
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	633b      	str	r3, [r7, #48]	; 0x30
 8020388:	e015      	b.n	80203b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802038a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802038c:	695a      	ldr	r2, [r3, #20]
 802038e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020390:	68db      	ldr	r3, [r3, #12]
 8020392:	429a      	cmp	r2, r3
 8020394:	d10c      	bne.n	80203b0 <ip4_reass+0xdc>
 8020396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020398:	699a      	ldr	r2, [r3, #24]
 802039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802039c:	691b      	ldr	r3, [r3, #16]
 802039e:	429a      	cmp	r2, r3
 80203a0:	d106      	bne.n	80203b0 <ip4_reass+0xdc>
 80203a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203a4:	899a      	ldrh	r2, [r3, #12]
 80203a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80203a8:	889b      	ldrh	r3, [r3, #4]
 80203aa:	b29b      	uxth	r3, r3
 80203ac:	429a      	cmp	r2, r3
 80203ae:	d006      	beq.n	80203be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80203b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203b2:	681b      	ldr	r3, [r3, #0]
 80203b4:	633b      	str	r3, [r7, #48]	; 0x30
 80203b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d1e6      	bne.n	802038a <ip4_reass+0xb6>
 80203bc:	e000      	b.n	80203c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80203be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80203c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d109      	bne.n	80203da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80203c6:	8c3b      	ldrh	r3, [r7, #32]
 80203c8:	4619      	mov	r1, r3
 80203ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80203cc:	f7ff fdb0 	bl	801ff30 <ip_reass_enqueue_new_datagram>
 80203d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80203d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d11c      	bne.n	8020412 <ip4_reass+0x13e>
      goto nullreturn;
 80203d8:	e109      	b.n	80205ee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80203da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80203dc:	88db      	ldrh	r3, [r3, #6]
 80203de:	b29b      	uxth	r3, r3
 80203e0:	4618      	mov	r0, r3
 80203e2:	f7f1 ff6b 	bl	80122bc <lwip_htons>
 80203e6:	4603      	mov	r3, r0
 80203e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	d110      	bne.n	8020412 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80203f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203f2:	89db      	ldrh	r3, [r3, #14]
 80203f4:	4618      	mov	r0, r3
 80203f6:	f7f1 ff61 	bl	80122bc <lwip_htons>
 80203fa:	4603      	mov	r3, r0
 80203fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020400:	2b00      	cmp	r3, #0
 8020402:	d006      	beq.n	8020412 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020406:	3308      	adds	r3, #8
 8020408:	2214      	movs	r2, #20
 802040a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802040c:	4618      	mov	r0, r3
 802040e:	f000 fe8d 	bl	802112c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020414:	88db      	ldrh	r3, [r3, #6]
 8020416:	b29b      	uxth	r3, r3
 8020418:	f003 0320 	and.w	r3, r3, #32
 802041c:	2b00      	cmp	r3, #0
 802041e:	bf0c      	ite	eq
 8020420:	2301      	moveq	r3, #1
 8020422:	2300      	movne	r3, #0
 8020424:	b2db      	uxtb	r3, r3
 8020426:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020428:	69fb      	ldr	r3, [r7, #28]
 802042a:	2b00      	cmp	r3, #0
 802042c:	d00e      	beq.n	802044c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802042e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020432:	4413      	add	r3, r2
 8020434:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020436:	8b7a      	ldrh	r2, [r7, #26]
 8020438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802043a:	429a      	cmp	r2, r3
 802043c:	f0c0 80a0 	bcc.w	8020580 <ip4_reass+0x2ac>
 8020440:	8b7b      	ldrh	r3, [r7, #26]
 8020442:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8020446:	4293      	cmp	r3, r2
 8020448:	f200 809a 	bhi.w	8020580 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 802044c:	69fa      	ldr	r2, [r7, #28]
 802044e:	6879      	ldr	r1, [r7, #4]
 8020450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020452:	f7ff fdd5 	bl	8020000 <ip_reass_chain_frag_into_datagram_and_validate>
 8020456:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020458:	697b      	ldr	r3, [r7, #20]
 802045a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802045e:	f000 8091 	beq.w	8020584 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020462:	4b5b      	ldr	r3, [pc, #364]	; (80205d0 <ip4_reass+0x2fc>)
 8020464:	881a      	ldrh	r2, [r3, #0]
 8020466:	8c3b      	ldrh	r3, [r7, #32]
 8020468:	4413      	add	r3, r2
 802046a:	b29a      	uxth	r2, r3
 802046c:	4b58      	ldr	r3, [pc, #352]	; (80205d0 <ip4_reass+0x2fc>)
 802046e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020470:	69fb      	ldr	r3, [r7, #28]
 8020472:	2b00      	cmp	r3, #0
 8020474:	d00d      	beq.n	8020492 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8020476:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802047a:	4413      	add	r3, r2
 802047c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020480:	8a7a      	ldrh	r2, [r7, #18]
 8020482:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020486:	7f9b      	ldrb	r3, [r3, #30]
 8020488:	f043 0301 	orr.w	r3, r3, #1
 802048c:	b2da      	uxtb	r2, r3
 802048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020490:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8020492:	697b      	ldr	r3, [r7, #20]
 8020494:	2b01      	cmp	r3, #1
 8020496:	d171      	bne.n	802057c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8020498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802049a:	8b9b      	ldrh	r3, [r3, #28]
 802049c:	3314      	adds	r3, #20
 802049e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80204a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204a2:	685b      	ldr	r3, [r3, #4]
 80204a4:	685b      	ldr	r3, [r3, #4]
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80204aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204ac:	685b      	ldr	r3, [r3, #4]
 80204ae:	685b      	ldr	r3, [r3, #4]
 80204b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80204b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204b4:	3308      	adds	r3, #8
 80204b6:	2214      	movs	r2, #20
 80204b8:	4619      	mov	r1, r3
 80204ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80204bc:	f000 fe36 	bl	802112c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80204c0:	8a3b      	ldrh	r3, [r7, #16]
 80204c2:	4618      	mov	r0, r3
 80204c4:	f7f1 fefa 	bl	80122bc <lwip_htons>
 80204c8:	4603      	mov	r3, r0
 80204ca:	461a      	mov	r2, r3
 80204cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80204d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204d2:	2200      	movs	r2, #0
 80204d4:	719a      	strb	r2, [r3, #6]
 80204d6:	2200      	movs	r2, #0
 80204d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80204da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204dc:	2200      	movs	r2, #0
 80204de:	729a      	strb	r2, [r3, #10]
 80204e0:	2200      	movs	r2, #0
 80204e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80204e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204e6:	685b      	ldr	r3, [r3, #4]
 80204e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80204ea:	e00d      	b.n	8020508 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80204ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ee:	685b      	ldr	r3, [r3, #4]
 80204f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80204f2:	2114      	movs	r1, #20
 80204f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80204f6:	f7f4 f9e9 	bl	80148cc <pbuf_remove_header>
      pbuf_cat(p, r);
 80204fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80204fc:	6878      	ldr	r0, [r7, #4]
 80204fe:	f7f4 fb6b 	bl	8014bd8 <pbuf_cat>
      r = iprh->next_pbuf;
 8020502:	68fb      	ldr	r3, [r7, #12]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8020508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802050a:	2b00      	cmp	r3, #0
 802050c:	d1ee      	bne.n	80204ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802050e:	4b31      	ldr	r3, [pc, #196]	; (80205d4 <ip4_reass+0x300>)
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020514:	429a      	cmp	r2, r3
 8020516:	d102      	bne.n	802051e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020518:	2300      	movs	r3, #0
 802051a:	637b      	str	r3, [r7, #52]	; 0x34
 802051c:	e010      	b.n	8020540 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802051e:	4b2d      	ldr	r3, [pc, #180]	; (80205d4 <ip4_reass+0x300>)
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	637b      	str	r3, [r7, #52]	; 0x34
 8020524:	e007      	b.n	8020536 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020528:	681b      	ldr	r3, [r3, #0]
 802052a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802052c:	429a      	cmp	r2, r3
 802052e:	d006      	beq.n	802053e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	637b      	str	r3, [r7, #52]	; 0x34
 8020536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020538:	2b00      	cmp	r3, #0
 802053a:	d1f4      	bne.n	8020526 <ip4_reass+0x252>
 802053c:	e000      	b.n	8020540 <ip4_reass+0x26c>
          break;
 802053e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020544:	f7ff fd2e 	bl	801ffa4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020548:	6878      	ldr	r0, [r7, #4]
 802054a:	f7f4 fb05 	bl	8014b58 <pbuf_clen>
 802054e:	4603      	mov	r3, r0
 8020550:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8020552:	4b1f      	ldr	r3, [pc, #124]	; (80205d0 <ip4_reass+0x2fc>)
 8020554:	881b      	ldrh	r3, [r3, #0]
 8020556:	8c3a      	ldrh	r2, [r7, #32]
 8020558:	429a      	cmp	r2, r3
 802055a:	d906      	bls.n	802056a <ip4_reass+0x296>
 802055c:	4b1e      	ldr	r3, [pc, #120]	; (80205d8 <ip4_reass+0x304>)
 802055e:	f240 229b 	movw	r2, #667	; 0x29b
 8020562:	491e      	ldr	r1, [pc, #120]	; (80205dc <ip4_reass+0x308>)
 8020564:	481e      	ldr	r0, [pc, #120]	; (80205e0 <ip4_reass+0x30c>)
 8020566:	f001 fb25 	bl	8021bb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802056a:	4b19      	ldr	r3, [pc, #100]	; (80205d0 <ip4_reass+0x2fc>)
 802056c:	881a      	ldrh	r2, [r3, #0]
 802056e:	8c3b      	ldrh	r3, [r7, #32]
 8020570:	1ad3      	subs	r3, r2, r3
 8020572:	b29a      	uxth	r2, r3
 8020574:	4b16      	ldr	r3, [pc, #88]	; (80205d0 <ip4_reass+0x2fc>)
 8020576:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	e03c      	b.n	80205f6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 802057c:	2300      	movs	r3, #0
 802057e:	e03a      	b.n	80205f6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8020580:	bf00      	nop
 8020582:	e000      	b.n	8020586 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8020584:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8020586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020588:	2b00      	cmp	r3, #0
 802058a:	d106      	bne.n	802059a <ip4_reass+0x2c6>
 802058c:	4b12      	ldr	r3, [pc, #72]	; (80205d8 <ip4_reass+0x304>)
 802058e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8020592:	4914      	ldr	r1, [pc, #80]	; (80205e4 <ip4_reass+0x310>)
 8020594:	4812      	ldr	r0, [pc, #72]	; (80205e0 <ip4_reass+0x30c>)
 8020596:	f001 fb0d 	bl	8021bb4 <iprintf>
  if (ipr->p == NULL) {
 802059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802059c:	685b      	ldr	r3, [r3, #4]
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d124      	bne.n	80205ec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80205a2:	4b0c      	ldr	r3, [pc, #48]	; (80205d4 <ip4_reass+0x300>)
 80205a4:	681b      	ldr	r3, [r3, #0]
 80205a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80205a8:	429a      	cmp	r2, r3
 80205aa:	d006      	beq.n	80205ba <ip4_reass+0x2e6>
 80205ac:	4b0a      	ldr	r3, [pc, #40]	; (80205d8 <ip4_reass+0x304>)
 80205ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80205b2:	490d      	ldr	r1, [pc, #52]	; (80205e8 <ip4_reass+0x314>)
 80205b4:	480a      	ldr	r0, [pc, #40]	; (80205e0 <ip4_reass+0x30c>)
 80205b6:	f001 fafd 	bl	8021bb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80205ba:	2100      	movs	r1, #0
 80205bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80205be:	f7ff fcf1 	bl	801ffa4 <ip_reass_dequeue_datagram>
 80205c2:	e014      	b.n	80205ee <ip4_reass+0x31a>
    goto nullreturn;
 80205c4:	bf00      	nop
 80205c6:	e012      	b.n	80205ee <ip4_reass+0x31a>
    goto nullreturn;
 80205c8:	bf00      	nop
 80205ca:	e010      	b.n	80205ee <ip4_reass+0x31a>
      goto nullreturn;
 80205cc:	bf00      	nop
 80205ce:	e00e      	b.n	80205ee <ip4_reass+0x31a>
 80205d0:	2001449c 	.word	0x2001449c
 80205d4:	20014498 	.word	0x20014498
 80205d8:	08029464 	.word	0x08029464
 80205dc:	080295d4 	.word	0x080295d4
 80205e0:	080294ac 	.word	0x080294ac
 80205e4:	080295f0 	.word	0x080295f0
 80205e8:	080295fc 	.word	0x080295fc
  }

nullreturn:
 80205ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80205ee:	6878      	ldr	r0, [r7, #4]
 80205f0:	f7f4 fa24 	bl	8014a3c <pbuf_free>
  return NULL;
 80205f4:	2300      	movs	r3, #0
}
 80205f6:	4618      	mov	r0, r3
 80205f8:	3738      	adds	r7, #56	; 0x38
 80205fa:	46bd      	mov	sp, r7
 80205fc:	bd80      	pop	{r7, pc}
 80205fe:	bf00      	nop

08020600 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020600:	b580      	push	{r7, lr}
 8020602:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020604:	2005      	movs	r0, #5
 8020606:	f7f3 fae5 	bl	8013bd4 <memp_malloc>
 802060a:	4603      	mov	r3, r0
}
 802060c:	4618      	mov	r0, r3
 802060e:	bd80      	pop	{r7, pc}

08020610 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8020610:	b580      	push	{r7, lr}
 8020612:	b082      	sub	sp, #8
 8020614:	af00      	add	r7, sp, #0
 8020616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	2b00      	cmp	r3, #0
 802061c:	d106      	bne.n	802062c <ip_frag_free_pbuf_custom_ref+0x1c>
 802061e:	4b07      	ldr	r3, [pc, #28]	; (802063c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020620:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020624:	4906      	ldr	r1, [pc, #24]	; (8020640 <ip_frag_free_pbuf_custom_ref+0x30>)
 8020626:	4807      	ldr	r0, [pc, #28]	; (8020644 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020628:	f001 fac4 	bl	8021bb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802062c:	6879      	ldr	r1, [r7, #4]
 802062e:	2005      	movs	r0, #5
 8020630:	f7f3 fb22 	bl	8013c78 <memp_free>
}
 8020634:	bf00      	nop
 8020636:	3708      	adds	r7, #8
 8020638:	46bd      	mov	sp, r7
 802063a:	bd80      	pop	{r7, pc}
 802063c:	08029464 	.word	0x08029464
 8020640:	0802961c 	.word	0x0802961c
 8020644:	080294ac 	.word	0x080294ac

08020648 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020648:	b580      	push	{r7, lr}
 802064a:	b084      	sub	sp, #16
 802064c:	af00      	add	r7, sp, #0
 802064e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020654:	68fb      	ldr	r3, [r7, #12]
 8020656:	2b00      	cmp	r3, #0
 8020658:	d106      	bne.n	8020668 <ipfrag_free_pbuf_custom+0x20>
 802065a:	4b11      	ldr	r3, [pc, #68]	; (80206a0 <ipfrag_free_pbuf_custom+0x58>)
 802065c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8020660:	4910      	ldr	r1, [pc, #64]	; (80206a4 <ipfrag_free_pbuf_custom+0x5c>)
 8020662:	4811      	ldr	r0, [pc, #68]	; (80206a8 <ipfrag_free_pbuf_custom+0x60>)
 8020664:	f001 faa6 	bl	8021bb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020668:	68fa      	ldr	r2, [r7, #12]
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	429a      	cmp	r2, r3
 802066e:	d006      	beq.n	802067e <ipfrag_free_pbuf_custom+0x36>
 8020670:	4b0b      	ldr	r3, [pc, #44]	; (80206a0 <ipfrag_free_pbuf_custom+0x58>)
 8020672:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020676:	490d      	ldr	r1, [pc, #52]	; (80206ac <ipfrag_free_pbuf_custom+0x64>)
 8020678:	480b      	ldr	r0, [pc, #44]	; (80206a8 <ipfrag_free_pbuf_custom+0x60>)
 802067a:	f001 fa9b 	bl	8021bb4 <iprintf>
  if (pcr->original != NULL) {
 802067e:	68fb      	ldr	r3, [r7, #12]
 8020680:	695b      	ldr	r3, [r3, #20]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d004      	beq.n	8020690 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	695b      	ldr	r3, [r3, #20]
 802068a:	4618      	mov	r0, r3
 802068c:	f7f4 f9d6 	bl	8014a3c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8020690:	68f8      	ldr	r0, [r7, #12]
 8020692:	f7ff ffbd 	bl	8020610 <ip_frag_free_pbuf_custom_ref>
}
 8020696:	bf00      	nop
 8020698:	3710      	adds	r7, #16
 802069a:	46bd      	mov	sp, r7
 802069c:	bd80      	pop	{r7, pc}
 802069e:	bf00      	nop
 80206a0:	08029464 	.word	0x08029464
 80206a4:	08029628 	.word	0x08029628
 80206a8:	080294ac 	.word	0x080294ac
 80206ac:	08029634 	.word	0x08029634

080206b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80206b0:	b580      	push	{r7, lr}
 80206b2:	b094      	sub	sp, #80	; 0x50
 80206b4:	af02      	add	r7, sp, #8
 80206b6:	60f8      	str	r0, [r7, #12]
 80206b8:	60b9      	str	r1, [r7, #8]
 80206ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80206bc:	2300      	movs	r3, #0
 80206be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80206c2:	68bb      	ldr	r3, [r7, #8]
 80206c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80206c6:	3b14      	subs	r3, #20
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	da00      	bge.n	80206ce <ip4_frag+0x1e>
 80206cc:	3307      	adds	r3, #7
 80206ce:	10db      	asrs	r3, r3, #3
 80206d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80206d2:	2314      	movs	r3, #20
 80206d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	685b      	ldr	r3, [r3, #4]
 80206da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80206dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80206de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80206e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206e2:	781b      	ldrb	r3, [r3, #0]
 80206e4:	f003 030f 	and.w	r3, r3, #15
 80206e8:	b2db      	uxtb	r3, r3
 80206ea:	009b      	lsls	r3, r3, #2
 80206ec:	b2db      	uxtb	r3, r3
 80206ee:	2b14      	cmp	r3, #20
 80206f0:	d002      	beq.n	80206f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80206f2:	f06f 0305 	mvn.w	r3, #5
 80206f6:	e110      	b.n	802091a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	895b      	ldrh	r3, [r3, #10]
 80206fc:	2b13      	cmp	r3, #19
 80206fe:	d809      	bhi.n	8020714 <ip4_frag+0x64>
 8020700:	4b88      	ldr	r3, [pc, #544]	; (8020924 <ip4_frag+0x274>)
 8020702:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020706:	4988      	ldr	r1, [pc, #544]	; (8020928 <ip4_frag+0x278>)
 8020708:	4888      	ldr	r0, [pc, #544]	; (802092c <ip4_frag+0x27c>)
 802070a:	f001 fa53 	bl	8021bb4 <iprintf>
 802070e:	f06f 0305 	mvn.w	r3, #5
 8020712:	e102      	b.n	802091a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020716:	88db      	ldrh	r3, [r3, #6]
 8020718:	b29b      	uxth	r3, r3
 802071a:	4618      	mov	r0, r3
 802071c:	f7f1 fdce 	bl	80122bc <lwip_htons>
 8020720:	4603      	mov	r3, r0
 8020722:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020724:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802072a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802072e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020734:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020736:	68fb      	ldr	r3, [r7, #12]
 8020738:	891b      	ldrh	r3, [r3, #8]
 802073a:	3b14      	subs	r3, #20
 802073c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8020740:	e0e1      	b.n	8020906 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020742:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020744:	00db      	lsls	r3, r3, #3
 8020746:	b29b      	uxth	r3, r3
 8020748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802074c:	4293      	cmp	r3, r2
 802074e:	bf28      	it	cs
 8020750:	4613      	movcs	r3, r2
 8020752:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020754:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020758:	2114      	movs	r1, #20
 802075a:	200e      	movs	r0, #14
 802075c:	f7f3 fe58 	bl	8014410 <pbuf_alloc>
 8020760:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8020762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020764:	2b00      	cmp	r3, #0
 8020766:	f000 80d5 	beq.w	8020914 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802076c:	895b      	ldrh	r3, [r3, #10]
 802076e:	2b13      	cmp	r3, #19
 8020770:	d806      	bhi.n	8020780 <ip4_frag+0xd0>
 8020772:	4b6c      	ldr	r3, [pc, #432]	; (8020924 <ip4_frag+0x274>)
 8020774:	f44f 7249 	mov.w	r2, #804	; 0x324
 8020778:	496d      	ldr	r1, [pc, #436]	; (8020930 <ip4_frag+0x280>)
 802077a:	486c      	ldr	r0, [pc, #432]	; (802092c <ip4_frag+0x27c>)
 802077c:	f001 fa1a 	bl	8021bb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8020780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020782:	685b      	ldr	r3, [r3, #4]
 8020784:	2214      	movs	r2, #20
 8020786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020788:	4618      	mov	r0, r3
 802078a:	f000 fccf 	bl	802112c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020790:	685b      	ldr	r3, [r3, #4]
 8020792:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8020794:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020796:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802079a:	e064      	b.n	8020866 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 802079c:	68fb      	ldr	r3, [r7, #12]
 802079e:	895a      	ldrh	r2, [r3, #10]
 80207a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80207a2:	1ad3      	subs	r3, r2, r3
 80207a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80207a6:	68fb      	ldr	r3, [r7, #12]
 80207a8:	895b      	ldrh	r3, [r3, #10]
 80207aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80207ac:	429a      	cmp	r2, r3
 80207ae:	d906      	bls.n	80207be <ip4_frag+0x10e>
 80207b0:	4b5c      	ldr	r3, [pc, #368]	; (8020924 <ip4_frag+0x274>)
 80207b2:	f240 322d 	movw	r2, #813	; 0x32d
 80207b6:	495f      	ldr	r1, [pc, #380]	; (8020934 <ip4_frag+0x284>)
 80207b8:	485c      	ldr	r0, [pc, #368]	; (802092c <ip4_frag+0x27c>)
 80207ba:	f001 f9fb 	bl	8021bb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80207be:	8bfa      	ldrh	r2, [r7, #30]
 80207c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80207c4:	4293      	cmp	r3, r2
 80207c6:	bf28      	it	cs
 80207c8:	4613      	movcs	r3, r2
 80207ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80207ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d105      	bne.n	80207e2 <ip4_frag+0x132>
        poff = 0;
 80207d6:	2300      	movs	r3, #0
 80207d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80207da:	68fb      	ldr	r3, [r7, #12]
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	60fb      	str	r3, [r7, #12]
        continue;
 80207e0:	e041      	b.n	8020866 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80207e2:	f7ff ff0d 	bl	8020600 <ip_frag_alloc_pbuf_custom_ref>
 80207e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80207e8:	69bb      	ldr	r3, [r7, #24]
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	d103      	bne.n	80207f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80207ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80207f0:	f7f4 f924 	bl	8014a3c <pbuf_free>
        goto memerr;
 80207f4:	e08f      	b.n	8020916 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80207f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80207fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80207fe:	4413      	add	r3, r2
 8020800:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8020804:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020808:	9201      	str	r2, [sp, #4]
 802080a:	9300      	str	r3, [sp, #0]
 802080c:	4603      	mov	r3, r0
 802080e:	2241      	movs	r2, #65	; 0x41
 8020810:	2000      	movs	r0, #0
 8020812:	f7f3 ff27 	bl	8014664 <pbuf_alloced_custom>
 8020816:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020818:	697b      	ldr	r3, [r7, #20]
 802081a:	2b00      	cmp	r3, #0
 802081c:	d106      	bne.n	802082c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802081e:	69b8      	ldr	r0, [r7, #24]
 8020820:	f7ff fef6 	bl	8020610 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020826:	f7f4 f909 	bl	8014a3c <pbuf_free>
        goto memerr;
 802082a:	e074      	b.n	8020916 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 802082c:	68f8      	ldr	r0, [r7, #12]
 802082e:	f7f4 f9ab 	bl	8014b88 <pbuf_ref>
      pcr->original = p;
 8020832:	69bb      	ldr	r3, [r7, #24]
 8020834:	68fa      	ldr	r2, [r7, #12]
 8020836:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020838:	69bb      	ldr	r3, [r7, #24]
 802083a:	4a3f      	ldr	r2, [pc, #252]	; (8020938 <ip4_frag+0x288>)
 802083c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802083e:	6979      	ldr	r1, [r7, #20]
 8020840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020842:	f7f4 f9c9 	bl	8014bd8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020846:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802084a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802084e:	1ad3      	subs	r3, r2, r3
 8020850:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020854:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020858:	2b00      	cmp	r3, #0
 802085a:	d004      	beq.n	8020866 <ip4_frag+0x1b6>
        poff = 0;
 802085c:	2300      	movs	r3, #0
 802085e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	681b      	ldr	r3, [r3, #0]
 8020864:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020866:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802086a:	2b00      	cmp	r3, #0
 802086c:	d196      	bne.n	802079c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802086e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8020870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020874:	4413      	add	r3, r2
 8020876:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020878:	68bb      	ldr	r3, [r7, #8]
 802087a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802087c:	f1a3 0213 	sub.w	r2, r3, #19
 8020880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020884:	429a      	cmp	r2, r3
 8020886:	bfcc      	ite	gt
 8020888:	2301      	movgt	r3, #1
 802088a:	2300      	movle	r3, #0
 802088c:	b2db      	uxtb	r3, r3
 802088e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8020894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020898:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802089a:	6a3b      	ldr	r3, [r7, #32]
 802089c:	2b00      	cmp	r3, #0
 802089e:	d002      	beq.n	80208a6 <ip4_frag+0x1f6>
 80208a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d003      	beq.n	80208ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80208a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80208a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80208ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80208ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80208b0:	4618      	mov	r0, r3
 80208b2:	f7f1 fd03 	bl	80122bc <lwip_htons>
 80208b6:	4603      	mov	r3, r0
 80208b8:	461a      	mov	r2, r3
 80208ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80208be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80208c0:	3314      	adds	r3, #20
 80208c2:	b29b      	uxth	r3, r3
 80208c4:	4618      	mov	r0, r3
 80208c6:	f7f1 fcf9 	bl	80122bc <lwip_htons>
 80208ca:	4603      	mov	r3, r0
 80208cc:	461a      	mov	r2, r3
 80208ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80208d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208d4:	2200      	movs	r2, #0
 80208d6:	729a      	strb	r2, [r3, #10]
 80208d8:	2200      	movs	r2, #0
 80208da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80208dc:	68bb      	ldr	r3, [r7, #8]
 80208de:	695b      	ldr	r3, [r3, #20]
 80208e0:	687a      	ldr	r2, [r7, #4]
 80208e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80208e4:	68b8      	ldr	r0, [r7, #8]
 80208e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80208e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80208ea:	f7f4 f8a7 	bl	8014a3c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80208ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80208f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80208f4:	1ad3      	subs	r3, r2, r3
 80208f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80208fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80208fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020900:	4413      	add	r3, r2
 8020902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8020906:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802090a:	2b00      	cmp	r3, #0
 802090c:	f47f af19 	bne.w	8020742 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020910:	2300      	movs	r3, #0
 8020912:	e002      	b.n	802091a <ip4_frag+0x26a>
      goto memerr;
 8020914:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802091a:	4618      	mov	r0, r3
 802091c:	3748      	adds	r7, #72	; 0x48
 802091e:	46bd      	mov	sp, r7
 8020920:	bd80      	pop	{r7, pc}
 8020922:	bf00      	nop
 8020924:	08029464 	.word	0x08029464
 8020928:	08029640 	.word	0x08029640
 802092c:	080294ac 	.word	0x080294ac
 8020930:	0802965c 	.word	0x0802965c
 8020934:	0802967c 	.word	0x0802967c
 8020938:	08020649 	.word	0x08020649

0802093c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 802093c:	b580      	push	{r7, lr}
 802093e:	b086      	sub	sp, #24
 8020940:	af00      	add	r7, sp, #0
 8020942:	6078      	str	r0, [r7, #4]
 8020944:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8020946:	230e      	movs	r3, #14
 8020948:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	895b      	ldrh	r3, [r3, #10]
 802094e:	2b0e      	cmp	r3, #14
 8020950:	d96e      	bls.n	8020a30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	7bdb      	ldrb	r3, [r3, #15]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d106      	bne.n	8020968 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802095a:	683b      	ldr	r3, [r7, #0]
 802095c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020960:	3301      	adds	r3, #1
 8020962:	b2da      	uxtb	r2, r3
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	685b      	ldr	r3, [r3, #4]
 802096c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802096e:	693b      	ldr	r3, [r7, #16]
 8020970:	7b1a      	ldrb	r2, [r3, #12]
 8020972:	7b5b      	ldrb	r3, [r3, #13]
 8020974:	021b      	lsls	r3, r3, #8
 8020976:	4313      	orrs	r3, r2
 8020978:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802097a:	693b      	ldr	r3, [r7, #16]
 802097c:	781b      	ldrb	r3, [r3, #0]
 802097e:	f003 0301 	and.w	r3, r3, #1
 8020982:	2b00      	cmp	r3, #0
 8020984:	d023      	beq.n	80209ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020986:	693b      	ldr	r3, [r7, #16]
 8020988:	781b      	ldrb	r3, [r3, #0]
 802098a:	2b01      	cmp	r3, #1
 802098c:	d10f      	bne.n	80209ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802098e:	693b      	ldr	r3, [r7, #16]
 8020990:	785b      	ldrb	r3, [r3, #1]
 8020992:	2b00      	cmp	r3, #0
 8020994:	d11b      	bne.n	80209ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020996:	693b      	ldr	r3, [r7, #16]
 8020998:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802099a:	2b5e      	cmp	r3, #94	; 0x5e
 802099c:	d117      	bne.n	80209ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	7b5b      	ldrb	r3, [r3, #13]
 80209a2:	f043 0310 	orr.w	r3, r3, #16
 80209a6:	b2da      	uxtb	r2, r3
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	735a      	strb	r2, [r3, #13]
 80209ac:	e00f      	b.n	80209ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80209ae:	693b      	ldr	r3, [r7, #16]
 80209b0:	2206      	movs	r2, #6
 80209b2:	4928      	ldr	r1, [pc, #160]	; (8020a54 <ethernet_input+0x118>)
 80209b4:	4618      	mov	r0, r3
 80209b6:	f000 fbab 	bl	8021110 <memcmp>
 80209ba:	4603      	mov	r3, r0
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d106      	bne.n	80209ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	7b5b      	ldrb	r3, [r3, #13]
 80209c4:	f043 0308 	orr.w	r3, r3, #8
 80209c8:	b2da      	uxtb	r2, r3
 80209ca:	687b      	ldr	r3, [r7, #4]
 80209cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80209ce:	89fb      	ldrh	r3, [r7, #14]
 80209d0:	2b08      	cmp	r3, #8
 80209d2:	d003      	beq.n	80209dc <ethernet_input+0xa0>
 80209d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80209d8:	d014      	beq.n	8020a04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80209da:	e032      	b.n	8020a42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80209e2:	f003 0308 	and.w	r3, r3, #8
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	d024      	beq.n	8020a34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80209ea:	8afb      	ldrh	r3, [r7, #22]
 80209ec:	4619      	mov	r1, r3
 80209ee:	6878      	ldr	r0, [r7, #4]
 80209f0:	f7f3 ff6c 	bl	80148cc <pbuf_remove_header>
 80209f4:	4603      	mov	r3, r0
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d11e      	bne.n	8020a38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80209fa:	6839      	ldr	r1, [r7, #0]
 80209fc:	6878      	ldr	r0, [r7, #4]
 80209fe:	f7fe fddf 	bl	801f5c0 <ip4_input>
      break;
 8020a02:	e013      	b.n	8020a2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020a04:	683b      	ldr	r3, [r7, #0]
 8020a06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020a0a:	f003 0308 	and.w	r3, r3, #8
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d014      	beq.n	8020a3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020a12:	8afb      	ldrh	r3, [r7, #22]
 8020a14:	4619      	mov	r1, r3
 8020a16:	6878      	ldr	r0, [r7, #4]
 8020a18:	f7f3 ff58 	bl	80148cc <pbuf_remove_header>
 8020a1c:	4603      	mov	r3, r0
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d10e      	bne.n	8020a40 <ethernet_input+0x104>
        etharp_input(p, netif);
 8020a22:	6839      	ldr	r1, [r7, #0]
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	f7fd ff75 	bl	801e914 <etharp_input>
      break;
 8020a2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020a2c:	2300      	movs	r3, #0
 8020a2e:	e00c      	b.n	8020a4a <ethernet_input+0x10e>
    goto free_and_return;
 8020a30:	bf00      	nop
 8020a32:	e006      	b.n	8020a42 <ethernet_input+0x106>
        goto free_and_return;
 8020a34:	bf00      	nop
 8020a36:	e004      	b.n	8020a42 <ethernet_input+0x106>
        goto free_and_return;
 8020a38:	bf00      	nop
 8020a3a:	e002      	b.n	8020a42 <ethernet_input+0x106>
        goto free_and_return;
 8020a3c:	bf00      	nop
 8020a3e:	e000      	b.n	8020a42 <ethernet_input+0x106>
        goto free_and_return;
 8020a40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8020a42:	6878      	ldr	r0, [r7, #4]
 8020a44:	f7f3 fffa 	bl	8014a3c <pbuf_free>
  return ERR_OK;
 8020a48:	2300      	movs	r3, #0
}
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	3718      	adds	r7, #24
 8020a4e:	46bd      	mov	sp, r7
 8020a50:	bd80      	pop	{r7, pc}
 8020a52:	bf00      	nop
 8020a54:	080299c8 	.word	0x080299c8

08020a58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b086      	sub	sp, #24
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	60f8      	str	r0, [r7, #12]
 8020a60:	60b9      	str	r1, [r7, #8]
 8020a62:	607a      	str	r2, [r7, #4]
 8020a64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020a66:	8c3b      	ldrh	r3, [r7, #32]
 8020a68:	4618      	mov	r0, r3
 8020a6a:	f7f1 fc27 	bl	80122bc <lwip_htons>
 8020a6e:	4603      	mov	r3, r0
 8020a70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8020a72:	210e      	movs	r1, #14
 8020a74:	68b8      	ldr	r0, [r7, #8]
 8020a76:	f7f3 ff19 	bl	80148ac <pbuf_add_header>
 8020a7a:	4603      	mov	r3, r0
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d125      	bne.n	8020acc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020a80:	68bb      	ldr	r3, [r7, #8]
 8020a82:	685b      	ldr	r3, [r3, #4]
 8020a84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8020a86:	693b      	ldr	r3, [r7, #16]
 8020a88:	8afa      	ldrh	r2, [r7, #22]
 8020a8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020a8c:	693b      	ldr	r3, [r7, #16]
 8020a8e:	2206      	movs	r2, #6
 8020a90:	6839      	ldr	r1, [r7, #0]
 8020a92:	4618      	mov	r0, r3
 8020a94:	f000 fb4a 	bl	802112c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020a98:	693b      	ldr	r3, [r7, #16]
 8020a9a:	3306      	adds	r3, #6
 8020a9c:	2206      	movs	r2, #6
 8020a9e:	6879      	ldr	r1, [r7, #4]
 8020aa0:	4618      	mov	r0, r3
 8020aa2:	f000 fb43 	bl	802112c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020aa6:	68fb      	ldr	r3, [r7, #12]
 8020aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020aac:	2b06      	cmp	r3, #6
 8020aae:	d006      	beq.n	8020abe <ethernet_output+0x66>
 8020ab0:	4b0a      	ldr	r3, [pc, #40]	; (8020adc <ethernet_output+0x84>)
 8020ab2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8020ab6:	490a      	ldr	r1, [pc, #40]	; (8020ae0 <ethernet_output+0x88>)
 8020ab8:	480a      	ldr	r0, [pc, #40]	; (8020ae4 <ethernet_output+0x8c>)
 8020aba:	f001 f87b 	bl	8021bb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020abe:	68fb      	ldr	r3, [r7, #12]
 8020ac0:	699b      	ldr	r3, [r3, #24]
 8020ac2:	68b9      	ldr	r1, [r7, #8]
 8020ac4:	68f8      	ldr	r0, [r7, #12]
 8020ac6:	4798      	blx	r3
 8020ac8:	4603      	mov	r3, r0
 8020aca:	e002      	b.n	8020ad2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8020acc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8020ace:	f06f 0301 	mvn.w	r3, #1
}
 8020ad2:	4618      	mov	r0, r3
 8020ad4:	3718      	adds	r7, #24
 8020ad6:	46bd      	mov	sp, r7
 8020ad8:	bd80      	pop	{r7, pc}
 8020ada:	bf00      	nop
 8020adc:	0802968c 	.word	0x0802968c
 8020ae0:	080296c4 	.word	0x080296c4
 8020ae4:	080296f8 	.word	0x080296f8

08020ae8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b084      	sub	sp, #16
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
 8020af0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8020af2:	683b      	ldr	r3, [r7, #0]
 8020af4:	60bb      	str	r3, [r7, #8]
 8020af6:	2304      	movs	r3, #4
 8020af8:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020afa:	f107 0308 	add.w	r3, r7, #8
 8020afe:	2100      	movs	r1, #0
 8020b00:	4618      	mov	r0, r3
 8020b02:	f7e9 ffa4 	bl	800aa4e <osMessageCreate>
 8020b06:	4602      	mov	r2, r0
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	d102      	bne.n	8020b1a <sys_mbox_new+0x32>
    return ERR_MEM;
 8020b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020b18:	e000      	b.n	8020b1c <sys_mbox_new+0x34>

  return ERR_OK;
 8020b1a:	2300      	movs	r3, #0
}
 8020b1c:	4618      	mov	r0, r3
 8020b1e:	3710      	adds	r7, #16
 8020b20:	46bd      	mov	sp, r7
 8020b22:	bd80      	pop	{r7, pc}

08020b24 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8020b24:	b580      	push	{r7, lr}
 8020b26:	b082      	sub	sp, #8
 8020b28:	af00      	add	r7, sp, #0
 8020b2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	4618      	mov	r0, r3
 8020b32:	f7ea f853 	bl	800abdc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	f7ea f864 	bl	800ac08 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8020b40:	bf00      	nop
 8020b42:	3708      	adds	r7, #8
 8020b44:	46bd      	mov	sp, r7
 8020b46:	bd80      	pop	{r7, pc}

08020b48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020b48:	b580      	push	{r7, lr}
 8020b4a:	b084      	sub	sp, #16
 8020b4c:	af00      	add	r7, sp, #0
 8020b4e:	6078      	str	r0, [r7, #4]
 8020b50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	6839      	ldr	r1, [r7, #0]
 8020b58:	2200      	movs	r2, #0
 8020b5a:	4618      	mov	r0, r3
 8020b5c:	f7e9 ff8a 	bl	800aa74 <osMessagePut>
 8020b60:	4603      	mov	r3, r0
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d102      	bne.n	8020b6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8020b66:	2300      	movs	r3, #0
 8020b68:	73fb      	strb	r3, [r7, #15]
 8020b6a:	e001      	b.n	8020b70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020b6c:	23ff      	movs	r3, #255	; 0xff
 8020b6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8020b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020b74:	4618      	mov	r0, r3
 8020b76:	3710      	adds	r7, #16
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	bd80      	pop	{r7, pc}

08020b7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020b7c:	b580      	push	{r7, lr}
 8020b7e:	b08c      	sub	sp, #48	; 0x30
 8020b80:	af00      	add	r7, sp, #0
 8020b82:	61f8      	str	r0, [r7, #28]
 8020b84:	61b9      	str	r1, [r7, #24]
 8020b86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8020b88:	f7e9 fd31 	bl	800a5ee <osKernelSysTick>
 8020b8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8020b8e:	697b      	ldr	r3, [r7, #20]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d017      	beq.n	8020bc4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8020b94:	69fb      	ldr	r3, [r7, #28]
 8020b96:	6819      	ldr	r1, [r3, #0]
 8020b98:	f107 0320 	add.w	r3, r7, #32
 8020b9c:	697a      	ldr	r2, [r7, #20]
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	f7e9 ffa8 	bl	800aaf4 <osMessageGet>

    if(event.status == osEventMessage)
 8020ba4:	6a3b      	ldr	r3, [r7, #32]
 8020ba6:	2b10      	cmp	r3, #16
 8020ba8:	d109      	bne.n	8020bbe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8020baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bac:	461a      	mov	r2, r3
 8020bae:	69bb      	ldr	r3, [r7, #24]
 8020bb0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8020bb2:	f7e9 fd1c 	bl	800a5ee <osKernelSysTick>
 8020bb6:	4602      	mov	r2, r0
 8020bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bba:	1ad3      	subs	r3, r2, r3
 8020bbc:	e019      	b.n	8020bf2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020bc2:	e016      	b.n	8020bf2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8020bc4:	69fb      	ldr	r3, [r7, #28]
 8020bc6:	6819      	ldr	r1, [r3, #0]
 8020bc8:	463b      	mov	r3, r7
 8020bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020bce:	4618      	mov	r0, r3
 8020bd0:	f7e9 ff90 	bl	800aaf4 <osMessageGet>
 8020bd4:	f107 0320 	add.w	r3, r7, #32
 8020bd8:	463a      	mov	r2, r7
 8020bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8020bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8020be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020be2:	461a      	mov	r2, r3
 8020be4:	69bb      	ldr	r3, [r7, #24]
 8020be6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8020be8:	f7e9 fd01 	bl	800a5ee <osKernelSysTick>
 8020bec:	4602      	mov	r2, r0
 8020bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bf0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	3730      	adds	r7, #48	; 0x30
 8020bf6:	46bd      	mov	sp, r7
 8020bf8:	bd80      	pop	{r7, pc}

08020bfa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8020bfa:	b580      	push	{r7, lr}
 8020bfc:	b086      	sub	sp, #24
 8020bfe:	af00      	add	r7, sp, #0
 8020c00:	6078      	str	r0, [r7, #4]
 8020c02:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	6819      	ldr	r1, [r3, #0]
 8020c08:	f107 030c 	add.w	r3, r7, #12
 8020c0c:	2200      	movs	r2, #0
 8020c0e:	4618      	mov	r0, r3
 8020c10:	f7e9 ff70 	bl	800aaf4 <osMessageGet>

  if(event.status == osEventMessage)
 8020c14:	68fb      	ldr	r3, [r7, #12]
 8020c16:	2b10      	cmp	r3, #16
 8020c18:	d105      	bne.n	8020c26 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8020c1a:	693b      	ldr	r3, [r7, #16]
 8020c1c:	461a      	mov	r2, r3
 8020c1e:	683b      	ldr	r3, [r7, #0]
 8020c20:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8020c22:	2300      	movs	r3, #0
 8020c24:	e001      	b.n	8020c2a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8020c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	3718      	adds	r7, #24
 8020c2e:	46bd      	mov	sp, r7
 8020c30:	bd80      	pop	{r7, pc}

08020c32 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8020c32:	b480      	push	{r7}
 8020c34:	b083      	sub	sp, #12
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	681b      	ldr	r3, [r3, #0]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d101      	bne.n	8020c46 <sys_mbox_valid+0x14>
    return 0;
 8020c42:	2300      	movs	r3, #0
 8020c44:	e000      	b.n	8020c48 <sys_mbox_valid+0x16>
  else
    return 1;
 8020c46:	2301      	movs	r3, #1
}
 8020c48:	4618      	mov	r0, r3
 8020c4a:	370c      	adds	r7, #12
 8020c4c:	46bd      	mov	sp, r7
 8020c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c52:	4770      	bx	lr

08020c54 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8020c54:	b480      	push	{r7}
 8020c56:	b083      	sub	sp, #12
 8020c58:	af00      	add	r7, sp, #0
 8020c5a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	2200      	movs	r2, #0
 8020c60:	601a      	str	r2, [r3, #0]
}
 8020c62:	bf00      	nop
 8020c64:	370c      	adds	r7, #12
 8020c66:	46bd      	mov	sp, r7
 8020c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c6c:	4770      	bx	lr

08020c6e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8020c6e:	b580      	push	{r7, lr}
 8020c70:	b084      	sub	sp, #16
 8020c72:	af00      	add	r7, sp, #0
 8020c74:	6078      	str	r0, [r7, #4]
 8020c76:	460b      	mov	r3, r1
 8020c78:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8020c7a:	2300      	movs	r3, #0
 8020c7c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8020c7e:	f107 030c 	add.w	r3, r7, #12
 8020c82:	2101      	movs	r1, #1
 8020c84:	4618      	mov	r0, r3
 8020c86:	f7e9 fe2d 	bl	800a8e4 <osSemaphoreCreate>
 8020c8a:	4602      	mov	r2, r0
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d102      	bne.n	8020c9e <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020c9c:	e009      	b.n	8020cb2 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8020c9e:	78fb      	ldrb	r3, [r7, #3]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d105      	bne.n	8020cb0 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	2100      	movs	r1, #0
 8020caa:	4618      	mov	r0, r3
 8020cac:	f7e9 fe38 	bl	800a920 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8020cb0:	2300      	movs	r3, #0
}
 8020cb2:	4618      	mov	r0, r3
 8020cb4:	3710      	adds	r7, #16
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	bd80      	pop	{r7, pc}

08020cba <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8020cba:	b580      	push	{r7, lr}
 8020cbc:	b084      	sub	sp, #16
 8020cbe:	af00      	add	r7, sp, #0
 8020cc0:	6078      	str	r0, [r7, #4]
 8020cc2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8020cc4:	f7e9 fc93 	bl	800a5ee <osKernelSysTick>
 8020cc8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8020cca:	683b      	ldr	r3, [r7, #0]
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d011      	beq.n	8020cf4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	6839      	ldr	r1, [r7, #0]
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	f7e9 fe22 	bl	800a920 <osSemaphoreWait>
 8020cdc:	4603      	mov	r3, r0
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d105      	bne.n	8020cee <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8020ce2:	f7e9 fc84 	bl	800a5ee <osKernelSysTick>
 8020ce6:	4602      	mov	r2, r0
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	1ad3      	subs	r3, r2, r3
 8020cec:	e012      	b.n	8020d14 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020cf2:	e00f      	b.n	8020d14 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8020cf4:	bf00      	nop
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020cfe:	4618      	mov	r0, r3
 8020d00:	f7e9 fe0e 	bl	800a920 <osSemaphoreWait>
 8020d04:	4603      	mov	r3, r0
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d1f5      	bne.n	8020cf6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8020d0a:	f7e9 fc70 	bl	800a5ee <osKernelSysTick>
 8020d0e:	4602      	mov	r2, r0
 8020d10:	68fb      	ldr	r3, [r7, #12]
 8020d12:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8020d14:	4618      	mov	r0, r3
 8020d16:	3710      	adds	r7, #16
 8020d18:	46bd      	mov	sp, r7
 8020d1a:	bd80      	pop	{r7, pc}

08020d1c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8020d1c:	b580      	push	{r7, lr}
 8020d1e:	b082      	sub	sp, #8
 8020d20:	af00      	add	r7, sp, #0
 8020d22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	4618      	mov	r0, r3
 8020d2a:	f7e9 fe47 	bl	800a9bc <osSemaphoreRelease>
}
 8020d2e:	bf00      	nop
 8020d30:	3708      	adds	r7, #8
 8020d32:	46bd      	mov	sp, r7
 8020d34:	bd80      	pop	{r7, pc}

08020d36 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8020d36:	b580      	push	{r7, lr}
 8020d38:	b082      	sub	sp, #8
 8020d3a:	af00      	add	r7, sp, #0
 8020d3c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	681b      	ldr	r3, [r3, #0]
 8020d42:	4618      	mov	r0, r3
 8020d44:	f7e9 fe70 	bl	800aa28 <osSemaphoreDelete>
}
 8020d48:	bf00      	nop
 8020d4a:	3708      	adds	r7, #8
 8020d4c:	46bd      	mov	sp, r7
 8020d4e:	bd80      	pop	{r7, pc}

08020d50 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8020d50:	b480      	push	{r7}
 8020d52:	b083      	sub	sp, #12
 8020d54:	af00      	add	r7, sp, #0
 8020d56:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	681b      	ldr	r3, [r3, #0]
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d101      	bne.n	8020d64 <sys_sem_valid+0x14>
    return 0;
 8020d60:	2300      	movs	r3, #0
 8020d62:	e000      	b.n	8020d66 <sys_sem_valid+0x16>
  else
    return 1;
 8020d64:	2301      	movs	r3, #1
}
 8020d66:	4618      	mov	r0, r3
 8020d68:	370c      	adds	r7, #12
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d70:	4770      	bx	lr

08020d72 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8020d72:	b480      	push	{r7}
 8020d74:	b083      	sub	sp, #12
 8020d76:	af00      	add	r7, sp, #0
 8020d78:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	2200      	movs	r2, #0
 8020d7e:	601a      	str	r2, [r3, #0]
}
 8020d80:	bf00      	nop
 8020d82:	370c      	adds	r7, #12
 8020d84:	46bd      	mov	sp, r7
 8020d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d8a:	4770      	bx	lr

08020d8c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020d8c:	b580      	push	{r7, lr}
 8020d8e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8020d90:	4803      	ldr	r0, [pc, #12]	; (8020da0 <sys_init+0x14>)
 8020d92:	f7e9 fd17 	bl	800a7c4 <osMutexCreate>
 8020d96:	4603      	mov	r3, r0
 8020d98:	4a02      	ldr	r2, [pc, #8]	; (8020da4 <sys_init+0x18>)
 8020d9a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020d9c:	bf00      	nop
 8020d9e:	bd80      	pop	{r7, pc}
 8020da0:	080299d8 	.word	0x080299d8
 8020da4:	2001b1dc 	.word	0x2001b1dc

08020da8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020da8:	b580      	push	{r7, lr}
 8020daa:	b084      	sub	sp, #16
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8020db0:	2300      	movs	r3, #0
 8020db2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020db4:	f107 030c 	add.w	r3, r7, #12
 8020db8:	4618      	mov	r0, r3
 8020dba:	f7e9 fd03 	bl	800a7c4 <osMutexCreate>
 8020dbe:	4602      	mov	r2, r0
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d102      	bne.n	8020dd2 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020dd0:	e000      	b.n	8020dd4 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020dd2:	2300      	movs	r3, #0
}
 8020dd4:	4618      	mov	r0, r3
 8020dd6:	3710      	adds	r7, #16
 8020dd8:	46bd      	mov	sp, r7
 8020dda:	bd80      	pop	{r7, pc}

08020ddc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8020ddc:	b580      	push	{r7, lr}
 8020dde:	b082      	sub	sp, #8
 8020de0:	af00      	add	r7, sp, #0
 8020de2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	681b      	ldr	r3, [r3, #0]
 8020de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020dec:	4618      	mov	r0, r3
 8020dee:	f7e9 fcf5 	bl	800a7dc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8020df2:	bf00      	nop
 8020df4:	3708      	adds	r7, #8
 8020df6:	46bd      	mov	sp, r7
 8020df8:	bd80      	pop	{r7, pc}

08020dfa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8020dfa:	b580      	push	{r7, lr}
 8020dfc:	b082      	sub	sp, #8
 8020dfe:	af00      	add	r7, sp, #0
 8020e00:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	4618      	mov	r0, r3
 8020e08:	f7e9 fd36 	bl	800a878 <osMutexRelease>
}
 8020e0c:	bf00      	nop
 8020e0e:	3708      	adds	r7, #8
 8020e10:	46bd      	mov	sp, r7
 8020e12:	bd80      	pop	{r7, pc}

08020e14 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020e14:	b580      	push	{r7, lr}
 8020e16:	b08a      	sub	sp, #40	; 0x28
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	60f8      	str	r0, [r7, #12]
 8020e1c:	60b9      	str	r1, [r7, #8]
 8020e1e:	607a      	str	r2, [r7, #4]
 8020e20:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	617b      	str	r3, [r7, #20]
 8020e26:	68bb      	ldr	r3, [r7, #8]
 8020e28:	61bb      	str	r3, [r7, #24]
 8020e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e2c:	b21b      	sxth	r3, r3
 8020e2e:	83bb      	strh	r3, [r7, #28]
 8020e30:	2300      	movs	r3, #0
 8020e32:	623b      	str	r3, [r7, #32]
 8020e34:	683b      	ldr	r3, [r7, #0]
 8020e36:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8020e38:	f107 0314 	add.w	r3, r7, #20
 8020e3c:	6879      	ldr	r1, [r7, #4]
 8020e3e:	4618      	mov	r0, r3
 8020e40:	f7e9 fbe5 	bl	800a60e <osThreadCreate>
 8020e44:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8020e46:	4618      	mov	r0, r3
 8020e48:	3728      	adds	r7, #40	; 0x28
 8020e4a:	46bd      	mov	sp, r7
 8020e4c:	bd80      	pop	{r7, pc}
	...

08020e50 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8020e50:	b580      	push	{r7, lr}
 8020e52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8020e54:	4b04      	ldr	r3, [pc, #16]	; (8020e68 <sys_arch_protect+0x18>)
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020e5c:	4618      	mov	r0, r3
 8020e5e:	f7e9 fcbd 	bl	800a7dc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8020e62:	2301      	movs	r3, #1
}
 8020e64:	4618      	mov	r0, r3
 8020e66:	bd80      	pop	{r7, pc}
 8020e68:	2001b1dc 	.word	0x2001b1dc

08020e6c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020e6c:	b580      	push	{r7, lr}
 8020e6e:	b082      	sub	sp, #8
 8020e70:	af00      	add	r7, sp, #0
 8020e72:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020e74:	4b04      	ldr	r3, [pc, #16]	; (8020e88 <sys_arch_unprotect+0x1c>)
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	4618      	mov	r0, r3
 8020e7a:	f7e9 fcfd 	bl	800a878 <osMutexRelease>
}
 8020e7e:	bf00      	nop
 8020e80:	3708      	adds	r7, #8
 8020e82:	46bd      	mov	sp, r7
 8020e84:	bd80      	pop	{r7, pc}
 8020e86:	bf00      	nop
 8020e88:	2001b1dc 	.word	0x2001b1dc

08020e8c <exit>:
 8020e8c:	b508      	push	{r3, lr}
 8020e8e:	4b07      	ldr	r3, [pc, #28]	; (8020eac <exit+0x20>)
 8020e90:	4604      	mov	r4, r0
 8020e92:	b113      	cbz	r3, 8020e9a <exit+0xe>
 8020e94:	2100      	movs	r1, #0
 8020e96:	f3af 8000 	nop.w
 8020e9a:	4b05      	ldr	r3, [pc, #20]	; (8020eb0 <exit+0x24>)
 8020e9c:	6818      	ldr	r0, [r3, #0]
 8020e9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020ea0:	b103      	cbz	r3, 8020ea4 <exit+0x18>
 8020ea2:	4798      	blx	r3
 8020ea4:	4620      	mov	r0, r4
 8020ea6:	f7e1 fd67 	bl	8002978 <_exit>
 8020eaa:	bf00      	nop
 8020eac:	00000000 	.word	0x00000000
 8020eb0:	08029b40 	.word	0x08029b40

08020eb4 <std>:
 8020eb4:	2300      	movs	r3, #0
 8020eb6:	b510      	push	{r4, lr}
 8020eb8:	4604      	mov	r4, r0
 8020eba:	e9c0 3300 	strd	r3, r3, [r0]
 8020ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020ec2:	6083      	str	r3, [r0, #8]
 8020ec4:	8181      	strh	r1, [r0, #12]
 8020ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8020ec8:	81c2      	strh	r2, [r0, #14]
 8020eca:	6183      	str	r3, [r0, #24]
 8020ecc:	4619      	mov	r1, r3
 8020ece:	2208      	movs	r2, #8
 8020ed0:	305c      	adds	r0, #92	; 0x5c
 8020ed2:	f000 f953 	bl	802117c <memset>
 8020ed6:	4b05      	ldr	r3, [pc, #20]	; (8020eec <std+0x38>)
 8020ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8020eda:	4b05      	ldr	r3, [pc, #20]	; (8020ef0 <std+0x3c>)
 8020edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8020ede:	4b05      	ldr	r3, [pc, #20]	; (8020ef4 <std+0x40>)
 8020ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020ee2:	4b05      	ldr	r3, [pc, #20]	; (8020ef8 <std+0x44>)
 8020ee4:	6224      	str	r4, [r4, #32]
 8020ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8020ee8:	bd10      	pop	{r4, pc}
 8020eea:	bf00      	nop
 8020eec:	08021f45 	.word	0x08021f45
 8020ef0:	08021f6b 	.word	0x08021f6b
 8020ef4:	08021fa3 	.word	0x08021fa3
 8020ef8:	08021fc7 	.word	0x08021fc7

08020efc <_cleanup_r>:
 8020efc:	4901      	ldr	r1, [pc, #4]	; (8020f04 <_cleanup_r+0x8>)
 8020efe:	f000 b8af 	b.w	8021060 <_fwalk_reent>
 8020f02:	bf00      	nop
 8020f04:	08023239 	.word	0x08023239

08020f08 <__sfmoreglue>:
 8020f08:	b570      	push	{r4, r5, r6, lr}
 8020f0a:	1e4a      	subs	r2, r1, #1
 8020f0c:	2568      	movs	r5, #104	; 0x68
 8020f0e:	4355      	muls	r5, r2
 8020f10:	460e      	mov	r6, r1
 8020f12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020f16:	f000 f989 	bl	802122c <_malloc_r>
 8020f1a:	4604      	mov	r4, r0
 8020f1c:	b140      	cbz	r0, 8020f30 <__sfmoreglue+0x28>
 8020f1e:	2100      	movs	r1, #0
 8020f20:	e9c0 1600 	strd	r1, r6, [r0]
 8020f24:	300c      	adds	r0, #12
 8020f26:	60a0      	str	r0, [r4, #8]
 8020f28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020f2c:	f000 f926 	bl	802117c <memset>
 8020f30:	4620      	mov	r0, r4
 8020f32:	bd70      	pop	{r4, r5, r6, pc}

08020f34 <__sfp_lock_acquire>:
 8020f34:	4801      	ldr	r0, [pc, #4]	; (8020f3c <__sfp_lock_acquire+0x8>)
 8020f36:	f000 b8d8 	b.w	80210ea <__retarget_lock_acquire_recursive>
 8020f3a:	bf00      	nop
 8020f3c:	2001b1e8 	.word	0x2001b1e8

08020f40 <__sfp_lock_release>:
 8020f40:	4801      	ldr	r0, [pc, #4]	; (8020f48 <__sfp_lock_release+0x8>)
 8020f42:	f000 b8d3 	b.w	80210ec <__retarget_lock_release_recursive>
 8020f46:	bf00      	nop
 8020f48:	2001b1e8 	.word	0x2001b1e8

08020f4c <__sinit_lock_acquire>:
 8020f4c:	4801      	ldr	r0, [pc, #4]	; (8020f54 <__sinit_lock_acquire+0x8>)
 8020f4e:	f000 b8cc 	b.w	80210ea <__retarget_lock_acquire_recursive>
 8020f52:	bf00      	nop
 8020f54:	2001b1e3 	.word	0x2001b1e3

08020f58 <__sinit_lock_release>:
 8020f58:	4801      	ldr	r0, [pc, #4]	; (8020f60 <__sinit_lock_release+0x8>)
 8020f5a:	f000 b8c7 	b.w	80210ec <__retarget_lock_release_recursive>
 8020f5e:	bf00      	nop
 8020f60:	2001b1e3 	.word	0x2001b1e3

08020f64 <__sinit>:
 8020f64:	b510      	push	{r4, lr}
 8020f66:	4604      	mov	r4, r0
 8020f68:	f7ff fff0 	bl	8020f4c <__sinit_lock_acquire>
 8020f6c:	69a3      	ldr	r3, [r4, #24]
 8020f6e:	b11b      	cbz	r3, 8020f78 <__sinit+0x14>
 8020f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f74:	f7ff bff0 	b.w	8020f58 <__sinit_lock_release>
 8020f78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020f7c:	6523      	str	r3, [r4, #80]	; 0x50
 8020f7e:	4b13      	ldr	r3, [pc, #76]	; (8020fcc <__sinit+0x68>)
 8020f80:	4a13      	ldr	r2, [pc, #76]	; (8020fd0 <__sinit+0x6c>)
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	62a2      	str	r2, [r4, #40]	; 0x28
 8020f86:	42a3      	cmp	r3, r4
 8020f88:	bf04      	itt	eq
 8020f8a:	2301      	moveq	r3, #1
 8020f8c:	61a3      	streq	r3, [r4, #24]
 8020f8e:	4620      	mov	r0, r4
 8020f90:	f000 f820 	bl	8020fd4 <__sfp>
 8020f94:	6060      	str	r0, [r4, #4]
 8020f96:	4620      	mov	r0, r4
 8020f98:	f000 f81c 	bl	8020fd4 <__sfp>
 8020f9c:	60a0      	str	r0, [r4, #8]
 8020f9e:	4620      	mov	r0, r4
 8020fa0:	f000 f818 	bl	8020fd4 <__sfp>
 8020fa4:	2200      	movs	r2, #0
 8020fa6:	60e0      	str	r0, [r4, #12]
 8020fa8:	2104      	movs	r1, #4
 8020faa:	6860      	ldr	r0, [r4, #4]
 8020fac:	f7ff ff82 	bl	8020eb4 <std>
 8020fb0:	68a0      	ldr	r0, [r4, #8]
 8020fb2:	2201      	movs	r2, #1
 8020fb4:	2109      	movs	r1, #9
 8020fb6:	f7ff ff7d 	bl	8020eb4 <std>
 8020fba:	68e0      	ldr	r0, [r4, #12]
 8020fbc:	2202      	movs	r2, #2
 8020fbe:	2112      	movs	r1, #18
 8020fc0:	f7ff ff78 	bl	8020eb4 <std>
 8020fc4:	2301      	movs	r3, #1
 8020fc6:	61a3      	str	r3, [r4, #24]
 8020fc8:	e7d2      	b.n	8020f70 <__sinit+0xc>
 8020fca:	bf00      	nop
 8020fcc:	08029b40 	.word	0x08029b40
 8020fd0:	08020efd 	.word	0x08020efd

08020fd4 <__sfp>:
 8020fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fd6:	4607      	mov	r7, r0
 8020fd8:	f7ff ffac 	bl	8020f34 <__sfp_lock_acquire>
 8020fdc:	4b1e      	ldr	r3, [pc, #120]	; (8021058 <__sfp+0x84>)
 8020fde:	681e      	ldr	r6, [r3, #0]
 8020fe0:	69b3      	ldr	r3, [r6, #24]
 8020fe2:	b913      	cbnz	r3, 8020fea <__sfp+0x16>
 8020fe4:	4630      	mov	r0, r6
 8020fe6:	f7ff ffbd 	bl	8020f64 <__sinit>
 8020fea:	3648      	adds	r6, #72	; 0x48
 8020fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020ff0:	3b01      	subs	r3, #1
 8020ff2:	d503      	bpl.n	8020ffc <__sfp+0x28>
 8020ff4:	6833      	ldr	r3, [r6, #0]
 8020ff6:	b30b      	cbz	r3, 802103c <__sfp+0x68>
 8020ff8:	6836      	ldr	r6, [r6, #0]
 8020ffa:	e7f7      	b.n	8020fec <__sfp+0x18>
 8020ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021000:	b9d5      	cbnz	r5, 8021038 <__sfp+0x64>
 8021002:	4b16      	ldr	r3, [pc, #88]	; (802105c <__sfp+0x88>)
 8021004:	60e3      	str	r3, [r4, #12]
 8021006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802100a:	6665      	str	r5, [r4, #100]	; 0x64
 802100c:	f000 f86c 	bl	80210e8 <__retarget_lock_init_recursive>
 8021010:	f7ff ff96 	bl	8020f40 <__sfp_lock_release>
 8021014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802101c:	6025      	str	r5, [r4, #0]
 802101e:	61a5      	str	r5, [r4, #24]
 8021020:	2208      	movs	r2, #8
 8021022:	4629      	mov	r1, r5
 8021024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021028:	f000 f8a8 	bl	802117c <memset>
 802102c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021034:	4620      	mov	r0, r4
 8021036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021038:	3468      	adds	r4, #104	; 0x68
 802103a:	e7d9      	b.n	8020ff0 <__sfp+0x1c>
 802103c:	2104      	movs	r1, #4
 802103e:	4638      	mov	r0, r7
 8021040:	f7ff ff62 	bl	8020f08 <__sfmoreglue>
 8021044:	4604      	mov	r4, r0
 8021046:	6030      	str	r0, [r6, #0]
 8021048:	2800      	cmp	r0, #0
 802104a:	d1d5      	bne.n	8020ff8 <__sfp+0x24>
 802104c:	f7ff ff78 	bl	8020f40 <__sfp_lock_release>
 8021050:	230c      	movs	r3, #12
 8021052:	603b      	str	r3, [r7, #0]
 8021054:	e7ee      	b.n	8021034 <__sfp+0x60>
 8021056:	bf00      	nop
 8021058:	08029b40 	.word	0x08029b40
 802105c:	ffff0001 	.word	0xffff0001

08021060 <_fwalk_reent>:
 8021060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021064:	4606      	mov	r6, r0
 8021066:	4688      	mov	r8, r1
 8021068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802106c:	2700      	movs	r7, #0
 802106e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021072:	f1b9 0901 	subs.w	r9, r9, #1
 8021076:	d505      	bpl.n	8021084 <_fwalk_reent+0x24>
 8021078:	6824      	ldr	r4, [r4, #0]
 802107a:	2c00      	cmp	r4, #0
 802107c:	d1f7      	bne.n	802106e <_fwalk_reent+0xe>
 802107e:	4638      	mov	r0, r7
 8021080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021084:	89ab      	ldrh	r3, [r5, #12]
 8021086:	2b01      	cmp	r3, #1
 8021088:	d907      	bls.n	802109a <_fwalk_reent+0x3a>
 802108a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802108e:	3301      	adds	r3, #1
 8021090:	d003      	beq.n	802109a <_fwalk_reent+0x3a>
 8021092:	4629      	mov	r1, r5
 8021094:	4630      	mov	r0, r6
 8021096:	47c0      	blx	r8
 8021098:	4307      	orrs	r7, r0
 802109a:	3568      	adds	r5, #104	; 0x68
 802109c:	e7e9      	b.n	8021072 <_fwalk_reent+0x12>
	...

080210a0 <__libc_init_array>:
 80210a0:	b570      	push	{r4, r5, r6, lr}
 80210a2:	4d0d      	ldr	r5, [pc, #52]	; (80210d8 <__libc_init_array+0x38>)
 80210a4:	4c0d      	ldr	r4, [pc, #52]	; (80210dc <__libc_init_array+0x3c>)
 80210a6:	1b64      	subs	r4, r4, r5
 80210a8:	10a4      	asrs	r4, r4, #2
 80210aa:	2600      	movs	r6, #0
 80210ac:	42a6      	cmp	r6, r4
 80210ae:	d109      	bne.n	80210c4 <__libc_init_array+0x24>
 80210b0:	4d0b      	ldr	r5, [pc, #44]	; (80210e0 <__libc_init_array+0x40>)
 80210b2:	4c0c      	ldr	r4, [pc, #48]	; (80210e4 <__libc_init_array+0x44>)
 80210b4:	f003 fcb4 	bl	8024a20 <_init>
 80210b8:	1b64      	subs	r4, r4, r5
 80210ba:	10a4      	asrs	r4, r4, #2
 80210bc:	2600      	movs	r6, #0
 80210be:	42a6      	cmp	r6, r4
 80210c0:	d105      	bne.n	80210ce <__libc_init_array+0x2e>
 80210c2:	bd70      	pop	{r4, r5, r6, pc}
 80210c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80210c8:	4798      	blx	r3
 80210ca:	3601      	adds	r6, #1
 80210cc:	e7ee      	b.n	80210ac <__libc_init_array+0xc>
 80210ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80210d2:	4798      	blx	r3
 80210d4:	3601      	adds	r6, #1
 80210d6:	e7f2      	b.n	80210be <__libc_init_array+0x1e>
 80210d8:	08029ea4 	.word	0x08029ea4
 80210dc:	08029ea4 	.word	0x08029ea4
 80210e0:	08029ea4 	.word	0x08029ea4
 80210e4:	08029ea8 	.word	0x08029ea8

080210e8 <__retarget_lock_init_recursive>:
 80210e8:	4770      	bx	lr

080210ea <__retarget_lock_acquire_recursive>:
 80210ea:	4770      	bx	lr

080210ec <__retarget_lock_release_recursive>:
 80210ec:	4770      	bx	lr
	...

080210f0 <malloc>:
 80210f0:	4b02      	ldr	r3, [pc, #8]	; (80210fc <malloc+0xc>)
 80210f2:	4601      	mov	r1, r0
 80210f4:	6818      	ldr	r0, [r3, #0]
 80210f6:	f000 b899 	b.w	802122c <_malloc_r>
 80210fa:	bf00      	nop
 80210fc:	20000074 	.word	0x20000074

08021100 <free>:
 8021100:	4b02      	ldr	r3, [pc, #8]	; (802110c <free+0xc>)
 8021102:	4601      	mov	r1, r0
 8021104:	6818      	ldr	r0, [r3, #0]
 8021106:	f000 b841 	b.w	802118c <_free_r>
 802110a:	bf00      	nop
 802110c:	20000074 	.word	0x20000074

08021110 <memcmp>:
 8021110:	b530      	push	{r4, r5, lr}
 8021112:	3901      	subs	r1, #1
 8021114:	2400      	movs	r4, #0
 8021116:	42a2      	cmp	r2, r4
 8021118:	d101      	bne.n	802111e <memcmp+0xe>
 802111a:	2000      	movs	r0, #0
 802111c:	e005      	b.n	802112a <memcmp+0x1a>
 802111e:	5d03      	ldrb	r3, [r0, r4]
 8021120:	3401      	adds	r4, #1
 8021122:	5d0d      	ldrb	r5, [r1, r4]
 8021124:	42ab      	cmp	r3, r5
 8021126:	d0f6      	beq.n	8021116 <memcmp+0x6>
 8021128:	1b58      	subs	r0, r3, r5
 802112a:	bd30      	pop	{r4, r5, pc}

0802112c <memcpy>:
 802112c:	440a      	add	r2, r1
 802112e:	4291      	cmp	r1, r2
 8021130:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021134:	d100      	bne.n	8021138 <memcpy+0xc>
 8021136:	4770      	bx	lr
 8021138:	b510      	push	{r4, lr}
 802113a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802113e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021142:	4291      	cmp	r1, r2
 8021144:	d1f9      	bne.n	802113a <memcpy+0xe>
 8021146:	bd10      	pop	{r4, pc}

08021148 <memmove>:
 8021148:	4288      	cmp	r0, r1
 802114a:	b510      	push	{r4, lr}
 802114c:	eb01 0402 	add.w	r4, r1, r2
 8021150:	d902      	bls.n	8021158 <memmove+0x10>
 8021152:	4284      	cmp	r4, r0
 8021154:	4623      	mov	r3, r4
 8021156:	d807      	bhi.n	8021168 <memmove+0x20>
 8021158:	1e43      	subs	r3, r0, #1
 802115a:	42a1      	cmp	r1, r4
 802115c:	d008      	beq.n	8021170 <memmove+0x28>
 802115e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021166:	e7f8      	b.n	802115a <memmove+0x12>
 8021168:	4402      	add	r2, r0
 802116a:	4601      	mov	r1, r0
 802116c:	428a      	cmp	r2, r1
 802116e:	d100      	bne.n	8021172 <memmove+0x2a>
 8021170:	bd10      	pop	{r4, pc}
 8021172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802117a:	e7f7      	b.n	802116c <memmove+0x24>

0802117c <memset>:
 802117c:	4402      	add	r2, r0
 802117e:	4603      	mov	r3, r0
 8021180:	4293      	cmp	r3, r2
 8021182:	d100      	bne.n	8021186 <memset+0xa>
 8021184:	4770      	bx	lr
 8021186:	f803 1b01 	strb.w	r1, [r3], #1
 802118a:	e7f9      	b.n	8021180 <memset+0x4>

0802118c <_free_r>:
 802118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802118e:	2900      	cmp	r1, #0
 8021190:	d048      	beq.n	8021224 <_free_r+0x98>
 8021192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021196:	9001      	str	r0, [sp, #4]
 8021198:	2b00      	cmp	r3, #0
 802119a:	f1a1 0404 	sub.w	r4, r1, #4
 802119e:	bfb8      	it	lt
 80211a0:	18e4      	addlt	r4, r4, r3
 80211a2:	f002 f911 	bl	80233c8 <__malloc_lock>
 80211a6:	4a20      	ldr	r2, [pc, #128]	; (8021228 <_free_r+0x9c>)
 80211a8:	9801      	ldr	r0, [sp, #4]
 80211aa:	6813      	ldr	r3, [r2, #0]
 80211ac:	4615      	mov	r5, r2
 80211ae:	b933      	cbnz	r3, 80211be <_free_r+0x32>
 80211b0:	6063      	str	r3, [r4, #4]
 80211b2:	6014      	str	r4, [r2, #0]
 80211b4:	b003      	add	sp, #12
 80211b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80211ba:	f002 b90b 	b.w	80233d4 <__malloc_unlock>
 80211be:	42a3      	cmp	r3, r4
 80211c0:	d90b      	bls.n	80211da <_free_r+0x4e>
 80211c2:	6821      	ldr	r1, [r4, #0]
 80211c4:	1862      	adds	r2, r4, r1
 80211c6:	4293      	cmp	r3, r2
 80211c8:	bf04      	itt	eq
 80211ca:	681a      	ldreq	r2, [r3, #0]
 80211cc:	685b      	ldreq	r3, [r3, #4]
 80211ce:	6063      	str	r3, [r4, #4]
 80211d0:	bf04      	itt	eq
 80211d2:	1852      	addeq	r2, r2, r1
 80211d4:	6022      	streq	r2, [r4, #0]
 80211d6:	602c      	str	r4, [r5, #0]
 80211d8:	e7ec      	b.n	80211b4 <_free_r+0x28>
 80211da:	461a      	mov	r2, r3
 80211dc:	685b      	ldr	r3, [r3, #4]
 80211de:	b10b      	cbz	r3, 80211e4 <_free_r+0x58>
 80211e0:	42a3      	cmp	r3, r4
 80211e2:	d9fa      	bls.n	80211da <_free_r+0x4e>
 80211e4:	6811      	ldr	r1, [r2, #0]
 80211e6:	1855      	adds	r5, r2, r1
 80211e8:	42a5      	cmp	r5, r4
 80211ea:	d10b      	bne.n	8021204 <_free_r+0x78>
 80211ec:	6824      	ldr	r4, [r4, #0]
 80211ee:	4421      	add	r1, r4
 80211f0:	1854      	adds	r4, r2, r1
 80211f2:	42a3      	cmp	r3, r4
 80211f4:	6011      	str	r1, [r2, #0]
 80211f6:	d1dd      	bne.n	80211b4 <_free_r+0x28>
 80211f8:	681c      	ldr	r4, [r3, #0]
 80211fa:	685b      	ldr	r3, [r3, #4]
 80211fc:	6053      	str	r3, [r2, #4]
 80211fe:	4421      	add	r1, r4
 8021200:	6011      	str	r1, [r2, #0]
 8021202:	e7d7      	b.n	80211b4 <_free_r+0x28>
 8021204:	d902      	bls.n	802120c <_free_r+0x80>
 8021206:	230c      	movs	r3, #12
 8021208:	6003      	str	r3, [r0, #0]
 802120a:	e7d3      	b.n	80211b4 <_free_r+0x28>
 802120c:	6825      	ldr	r5, [r4, #0]
 802120e:	1961      	adds	r1, r4, r5
 8021210:	428b      	cmp	r3, r1
 8021212:	bf04      	itt	eq
 8021214:	6819      	ldreq	r1, [r3, #0]
 8021216:	685b      	ldreq	r3, [r3, #4]
 8021218:	6063      	str	r3, [r4, #4]
 802121a:	bf04      	itt	eq
 802121c:	1949      	addeq	r1, r1, r5
 802121e:	6021      	streq	r1, [r4, #0]
 8021220:	6054      	str	r4, [r2, #4]
 8021222:	e7c7      	b.n	80211b4 <_free_r+0x28>
 8021224:	b003      	add	sp, #12
 8021226:	bd30      	pop	{r4, r5, pc}
 8021228:	200144a0 	.word	0x200144a0

0802122c <_malloc_r>:
 802122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802122e:	1ccd      	adds	r5, r1, #3
 8021230:	f025 0503 	bic.w	r5, r5, #3
 8021234:	3508      	adds	r5, #8
 8021236:	2d0c      	cmp	r5, #12
 8021238:	bf38      	it	cc
 802123a:	250c      	movcc	r5, #12
 802123c:	2d00      	cmp	r5, #0
 802123e:	4606      	mov	r6, r0
 8021240:	db01      	blt.n	8021246 <_malloc_r+0x1a>
 8021242:	42a9      	cmp	r1, r5
 8021244:	d903      	bls.n	802124e <_malloc_r+0x22>
 8021246:	230c      	movs	r3, #12
 8021248:	6033      	str	r3, [r6, #0]
 802124a:	2000      	movs	r0, #0
 802124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802124e:	f002 f8bb 	bl	80233c8 <__malloc_lock>
 8021252:	4921      	ldr	r1, [pc, #132]	; (80212d8 <_malloc_r+0xac>)
 8021254:	680a      	ldr	r2, [r1, #0]
 8021256:	4614      	mov	r4, r2
 8021258:	b99c      	cbnz	r4, 8021282 <_malloc_r+0x56>
 802125a:	4f20      	ldr	r7, [pc, #128]	; (80212dc <_malloc_r+0xb0>)
 802125c:	683b      	ldr	r3, [r7, #0]
 802125e:	b923      	cbnz	r3, 802126a <_malloc_r+0x3e>
 8021260:	4621      	mov	r1, r4
 8021262:	4630      	mov	r0, r6
 8021264:	f000 fdde 	bl	8021e24 <_sbrk_r>
 8021268:	6038      	str	r0, [r7, #0]
 802126a:	4629      	mov	r1, r5
 802126c:	4630      	mov	r0, r6
 802126e:	f000 fdd9 	bl	8021e24 <_sbrk_r>
 8021272:	1c43      	adds	r3, r0, #1
 8021274:	d123      	bne.n	80212be <_malloc_r+0x92>
 8021276:	230c      	movs	r3, #12
 8021278:	6033      	str	r3, [r6, #0]
 802127a:	4630      	mov	r0, r6
 802127c:	f002 f8aa 	bl	80233d4 <__malloc_unlock>
 8021280:	e7e3      	b.n	802124a <_malloc_r+0x1e>
 8021282:	6823      	ldr	r3, [r4, #0]
 8021284:	1b5b      	subs	r3, r3, r5
 8021286:	d417      	bmi.n	80212b8 <_malloc_r+0x8c>
 8021288:	2b0b      	cmp	r3, #11
 802128a:	d903      	bls.n	8021294 <_malloc_r+0x68>
 802128c:	6023      	str	r3, [r4, #0]
 802128e:	441c      	add	r4, r3
 8021290:	6025      	str	r5, [r4, #0]
 8021292:	e004      	b.n	802129e <_malloc_r+0x72>
 8021294:	6863      	ldr	r3, [r4, #4]
 8021296:	42a2      	cmp	r2, r4
 8021298:	bf0c      	ite	eq
 802129a:	600b      	streq	r3, [r1, #0]
 802129c:	6053      	strne	r3, [r2, #4]
 802129e:	4630      	mov	r0, r6
 80212a0:	f002 f898 	bl	80233d4 <__malloc_unlock>
 80212a4:	f104 000b 	add.w	r0, r4, #11
 80212a8:	1d23      	adds	r3, r4, #4
 80212aa:	f020 0007 	bic.w	r0, r0, #7
 80212ae:	1ac2      	subs	r2, r0, r3
 80212b0:	d0cc      	beq.n	802124c <_malloc_r+0x20>
 80212b2:	1a1b      	subs	r3, r3, r0
 80212b4:	50a3      	str	r3, [r4, r2]
 80212b6:	e7c9      	b.n	802124c <_malloc_r+0x20>
 80212b8:	4622      	mov	r2, r4
 80212ba:	6864      	ldr	r4, [r4, #4]
 80212bc:	e7cc      	b.n	8021258 <_malloc_r+0x2c>
 80212be:	1cc4      	adds	r4, r0, #3
 80212c0:	f024 0403 	bic.w	r4, r4, #3
 80212c4:	42a0      	cmp	r0, r4
 80212c6:	d0e3      	beq.n	8021290 <_malloc_r+0x64>
 80212c8:	1a21      	subs	r1, r4, r0
 80212ca:	4630      	mov	r0, r6
 80212cc:	f000 fdaa 	bl	8021e24 <_sbrk_r>
 80212d0:	3001      	adds	r0, #1
 80212d2:	d1dd      	bne.n	8021290 <_malloc_r+0x64>
 80212d4:	e7cf      	b.n	8021276 <_malloc_r+0x4a>
 80212d6:	bf00      	nop
 80212d8:	200144a0 	.word	0x200144a0
 80212dc:	200144a4 	.word	0x200144a4

080212e0 <__cvt>:
 80212e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80212e4:	ec55 4b10 	vmov	r4, r5, d0
 80212e8:	2d00      	cmp	r5, #0
 80212ea:	460e      	mov	r6, r1
 80212ec:	4619      	mov	r1, r3
 80212ee:	462b      	mov	r3, r5
 80212f0:	bfbb      	ittet	lt
 80212f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80212f6:	461d      	movlt	r5, r3
 80212f8:	2300      	movge	r3, #0
 80212fa:	232d      	movlt	r3, #45	; 0x2d
 80212fc:	700b      	strb	r3, [r1, #0]
 80212fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021300:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8021304:	4691      	mov	r9, r2
 8021306:	f023 0820 	bic.w	r8, r3, #32
 802130a:	bfbc      	itt	lt
 802130c:	4622      	movlt	r2, r4
 802130e:	4614      	movlt	r4, r2
 8021310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8021314:	d005      	beq.n	8021322 <__cvt+0x42>
 8021316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802131a:	d100      	bne.n	802131e <__cvt+0x3e>
 802131c:	3601      	adds	r6, #1
 802131e:	2102      	movs	r1, #2
 8021320:	e000      	b.n	8021324 <__cvt+0x44>
 8021322:	2103      	movs	r1, #3
 8021324:	ab03      	add	r3, sp, #12
 8021326:	9301      	str	r3, [sp, #4]
 8021328:	ab02      	add	r3, sp, #8
 802132a:	9300      	str	r3, [sp, #0]
 802132c:	ec45 4b10 	vmov	d0, r4, r5
 8021330:	4653      	mov	r3, sl
 8021332:	4632      	mov	r2, r6
 8021334:	f001 f908 	bl	8022548 <_dtoa_r>
 8021338:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802133c:	4607      	mov	r7, r0
 802133e:	d102      	bne.n	8021346 <__cvt+0x66>
 8021340:	f019 0f01 	tst.w	r9, #1
 8021344:	d022      	beq.n	802138c <__cvt+0xac>
 8021346:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802134a:	eb07 0906 	add.w	r9, r7, r6
 802134e:	d110      	bne.n	8021372 <__cvt+0x92>
 8021350:	783b      	ldrb	r3, [r7, #0]
 8021352:	2b30      	cmp	r3, #48	; 0x30
 8021354:	d10a      	bne.n	802136c <__cvt+0x8c>
 8021356:	2200      	movs	r2, #0
 8021358:	2300      	movs	r3, #0
 802135a:	4620      	mov	r0, r4
 802135c:	4629      	mov	r1, r5
 802135e:	f7df fbc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8021362:	b918      	cbnz	r0, 802136c <__cvt+0x8c>
 8021364:	f1c6 0601 	rsb	r6, r6, #1
 8021368:	f8ca 6000 	str.w	r6, [sl]
 802136c:	f8da 3000 	ldr.w	r3, [sl]
 8021370:	4499      	add	r9, r3
 8021372:	2200      	movs	r2, #0
 8021374:	2300      	movs	r3, #0
 8021376:	4620      	mov	r0, r4
 8021378:	4629      	mov	r1, r5
 802137a:	f7df fbb5 	bl	8000ae8 <__aeabi_dcmpeq>
 802137e:	b108      	cbz	r0, 8021384 <__cvt+0xa4>
 8021380:	f8cd 900c 	str.w	r9, [sp, #12]
 8021384:	2230      	movs	r2, #48	; 0x30
 8021386:	9b03      	ldr	r3, [sp, #12]
 8021388:	454b      	cmp	r3, r9
 802138a:	d307      	bcc.n	802139c <__cvt+0xbc>
 802138c:	9b03      	ldr	r3, [sp, #12]
 802138e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021390:	1bdb      	subs	r3, r3, r7
 8021392:	4638      	mov	r0, r7
 8021394:	6013      	str	r3, [r2, #0]
 8021396:	b004      	add	sp, #16
 8021398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802139c:	1c59      	adds	r1, r3, #1
 802139e:	9103      	str	r1, [sp, #12]
 80213a0:	701a      	strb	r2, [r3, #0]
 80213a2:	e7f0      	b.n	8021386 <__cvt+0xa6>

080213a4 <__exponent>:
 80213a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80213a6:	4603      	mov	r3, r0
 80213a8:	2900      	cmp	r1, #0
 80213aa:	bfb8      	it	lt
 80213ac:	4249      	neglt	r1, r1
 80213ae:	f803 2b02 	strb.w	r2, [r3], #2
 80213b2:	bfb4      	ite	lt
 80213b4:	222d      	movlt	r2, #45	; 0x2d
 80213b6:	222b      	movge	r2, #43	; 0x2b
 80213b8:	2909      	cmp	r1, #9
 80213ba:	7042      	strb	r2, [r0, #1]
 80213bc:	dd2a      	ble.n	8021414 <__exponent+0x70>
 80213be:	f10d 0407 	add.w	r4, sp, #7
 80213c2:	46a4      	mov	ip, r4
 80213c4:	270a      	movs	r7, #10
 80213c6:	46a6      	mov	lr, r4
 80213c8:	460a      	mov	r2, r1
 80213ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80213ce:	fb07 1516 	mls	r5, r7, r6, r1
 80213d2:	3530      	adds	r5, #48	; 0x30
 80213d4:	2a63      	cmp	r2, #99	; 0x63
 80213d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80213da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80213de:	4631      	mov	r1, r6
 80213e0:	dcf1      	bgt.n	80213c6 <__exponent+0x22>
 80213e2:	3130      	adds	r1, #48	; 0x30
 80213e4:	f1ae 0502 	sub.w	r5, lr, #2
 80213e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80213ec:	1c44      	adds	r4, r0, #1
 80213ee:	4629      	mov	r1, r5
 80213f0:	4561      	cmp	r1, ip
 80213f2:	d30a      	bcc.n	802140a <__exponent+0x66>
 80213f4:	f10d 0209 	add.w	r2, sp, #9
 80213f8:	eba2 020e 	sub.w	r2, r2, lr
 80213fc:	4565      	cmp	r5, ip
 80213fe:	bf88      	it	hi
 8021400:	2200      	movhi	r2, #0
 8021402:	4413      	add	r3, r2
 8021404:	1a18      	subs	r0, r3, r0
 8021406:	b003      	add	sp, #12
 8021408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802140a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802140e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8021412:	e7ed      	b.n	80213f0 <__exponent+0x4c>
 8021414:	2330      	movs	r3, #48	; 0x30
 8021416:	3130      	adds	r1, #48	; 0x30
 8021418:	7083      	strb	r3, [r0, #2]
 802141a:	70c1      	strb	r1, [r0, #3]
 802141c:	1d03      	adds	r3, r0, #4
 802141e:	e7f1      	b.n	8021404 <__exponent+0x60>

08021420 <_printf_float>:
 8021420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021424:	ed2d 8b02 	vpush	{d8}
 8021428:	b08d      	sub	sp, #52	; 0x34
 802142a:	460c      	mov	r4, r1
 802142c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8021430:	4616      	mov	r6, r2
 8021432:	461f      	mov	r7, r3
 8021434:	4605      	mov	r5, r0
 8021436:	f001 ff4d 	bl	80232d4 <_localeconv_r>
 802143a:	f8d0 a000 	ldr.w	sl, [r0]
 802143e:	4650      	mov	r0, sl
 8021440:	f7de fed0 	bl	80001e4 <strlen>
 8021444:	2300      	movs	r3, #0
 8021446:	930a      	str	r3, [sp, #40]	; 0x28
 8021448:	6823      	ldr	r3, [r4, #0]
 802144a:	9305      	str	r3, [sp, #20]
 802144c:	f8d8 3000 	ldr.w	r3, [r8]
 8021450:	f894 b018 	ldrb.w	fp, [r4, #24]
 8021454:	3307      	adds	r3, #7
 8021456:	f023 0307 	bic.w	r3, r3, #7
 802145a:	f103 0208 	add.w	r2, r3, #8
 802145e:	f8c8 2000 	str.w	r2, [r8]
 8021462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021466:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802146a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802146e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021472:	9307      	str	r3, [sp, #28]
 8021474:	f8cd 8018 	str.w	r8, [sp, #24]
 8021478:	ee08 0a10 	vmov	s16, r0
 802147c:	4b9f      	ldr	r3, [pc, #636]	; (80216fc <_printf_float+0x2dc>)
 802147e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021486:	f7df fb61 	bl	8000b4c <__aeabi_dcmpun>
 802148a:	bb88      	cbnz	r0, 80214f0 <_printf_float+0xd0>
 802148c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021490:	4b9a      	ldr	r3, [pc, #616]	; (80216fc <_printf_float+0x2dc>)
 8021492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021496:	f7df fb3b 	bl	8000b10 <__aeabi_dcmple>
 802149a:	bb48      	cbnz	r0, 80214f0 <_printf_float+0xd0>
 802149c:	2200      	movs	r2, #0
 802149e:	2300      	movs	r3, #0
 80214a0:	4640      	mov	r0, r8
 80214a2:	4649      	mov	r1, r9
 80214a4:	f7df fb2a 	bl	8000afc <__aeabi_dcmplt>
 80214a8:	b110      	cbz	r0, 80214b0 <_printf_float+0x90>
 80214aa:	232d      	movs	r3, #45	; 0x2d
 80214ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80214b0:	4b93      	ldr	r3, [pc, #588]	; (8021700 <_printf_float+0x2e0>)
 80214b2:	4894      	ldr	r0, [pc, #592]	; (8021704 <_printf_float+0x2e4>)
 80214b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80214b8:	bf94      	ite	ls
 80214ba:	4698      	movls	r8, r3
 80214bc:	4680      	movhi	r8, r0
 80214be:	2303      	movs	r3, #3
 80214c0:	6123      	str	r3, [r4, #16]
 80214c2:	9b05      	ldr	r3, [sp, #20]
 80214c4:	f023 0204 	bic.w	r2, r3, #4
 80214c8:	6022      	str	r2, [r4, #0]
 80214ca:	f04f 0900 	mov.w	r9, #0
 80214ce:	9700      	str	r7, [sp, #0]
 80214d0:	4633      	mov	r3, r6
 80214d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80214d4:	4621      	mov	r1, r4
 80214d6:	4628      	mov	r0, r5
 80214d8:	f000 f9d8 	bl	802188c <_printf_common>
 80214dc:	3001      	adds	r0, #1
 80214de:	f040 8090 	bne.w	8021602 <_printf_float+0x1e2>
 80214e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80214e6:	b00d      	add	sp, #52	; 0x34
 80214e8:	ecbd 8b02 	vpop	{d8}
 80214ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214f0:	4642      	mov	r2, r8
 80214f2:	464b      	mov	r3, r9
 80214f4:	4640      	mov	r0, r8
 80214f6:	4649      	mov	r1, r9
 80214f8:	f7df fb28 	bl	8000b4c <__aeabi_dcmpun>
 80214fc:	b140      	cbz	r0, 8021510 <_printf_float+0xf0>
 80214fe:	464b      	mov	r3, r9
 8021500:	2b00      	cmp	r3, #0
 8021502:	bfbc      	itt	lt
 8021504:	232d      	movlt	r3, #45	; 0x2d
 8021506:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802150a:	487f      	ldr	r0, [pc, #508]	; (8021708 <_printf_float+0x2e8>)
 802150c:	4b7f      	ldr	r3, [pc, #508]	; (802170c <_printf_float+0x2ec>)
 802150e:	e7d1      	b.n	80214b4 <_printf_float+0x94>
 8021510:	6863      	ldr	r3, [r4, #4]
 8021512:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8021516:	9206      	str	r2, [sp, #24]
 8021518:	1c5a      	adds	r2, r3, #1
 802151a:	d13f      	bne.n	802159c <_printf_float+0x17c>
 802151c:	2306      	movs	r3, #6
 802151e:	6063      	str	r3, [r4, #4]
 8021520:	9b05      	ldr	r3, [sp, #20]
 8021522:	6861      	ldr	r1, [r4, #4]
 8021524:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8021528:	2300      	movs	r3, #0
 802152a:	9303      	str	r3, [sp, #12]
 802152c:	ab0a      	add	r3, sp, #40	; 0x28
 802152e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8021532:	ab09      	add	r3, sp, #36	; 0x24
 8021534:	ec49 8b10 	vmov	d0, r8, r9
 8021538:	9300      	str	r3, [sp, #0]
 802153a:	6022      	str	r2, [r4, #0]
 802153c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8021540:	4628      	mov	r0, r5
 8021542:	f7ff fecd 	bl	80212e0 <__cvt>
 8021546:	9b06      	ldr	r3, [sp, #24]
 8021548:	9909      	ldr	r1, [sp, #36]	; 0x24
 802154a:	2b47      	cmp	r3, #71	; 0x47
 802154c:	4680      	mov	r8, r0
 802154e:	d108      	bne.n	8021562 <_printf_float+0x142>
 8021550:	1cc8      	adds	r0, r1, #3
 8021552:	db02      	blt.n	802155a <_printf_float+0x13a>
 8021554:	6863      	ldr	r3, [r4, #4]
 8021556:	4299      	cmp	r1, r3
 8021558:	dd41      	ble.n	80215de <_printf_float+0x1be>
 802155a:	f1ab 0b02 	sub.w	fp, fp, #2
 802155e:	fa5f fb8b 	uxtb.w	fp, fp
 8021562:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8021566:	d820      	bhi.n	80215aa <_printf_float+0x18a>
 8021568:	3901      	subs	r1, #1
 802156a:	465a      	mov	r2, fp
 802156c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8021570:	9109      	str	r1, [sp, #36]	; 0x24
 8021572:	f7ff ff17 	bl	80213a4 <__exponent>
 8021576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021578:	1813      	adds	r3, r2, r0
 802157a:	2a01      	cmp	r2, #1
 802157c:	4681      	mov	r9, r0
 802157e:	6123      	str	r3, [r4, #16]
 8021580:	dc02      	bgt.n	8021588 <_printf_float+0x168>
 8021582:	6822      	ldr	r2, [r4, #0]
 8021584:	07d2      	lsls	r2, r2, #31
 8021586:	d501      	bpl.n	802158c <_printf_float+0x16c>
 8021588:	3301      	adds	r3, #1
 802158a:	6123      	str	r3, [r4, #16]
 802158c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8021590:	2b00      	cmp	r3, #0
 8021592:	d09c      	beq.n	80214ce <_printf_float+0xae>
 8021594:	232d      	movs	r3, #45	; 0x2d
 8021596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802159a:	e798      	b.n	80214ce <_printf_float+0xae>
 802159c:	9a06      	ldr	r2, [sp, #24]
 802159e:	2a47      	cmp	r2, #71	; 0x47
 80215a0:	d1be      	bne.n	8021520 <_printf_float+0x100>
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	d1bc      	bne.n	8021520 <_printf_float+0x100>
 80215a6:	2301      	movs	r3, #1
 80215a8:	e7b9      	b.n	802151e <_printf_float+0xfe>
 80215aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80215ae:	d118      	bne.n	80215e2 <_printf_float+0x1c2>
 80215b0:	2900      	cmp	r1, #0
 80215b2:	6863      	ldr	r3, [r4, #4]
 80215b4:	dd0b      	ble.n	80215ce <_printf_float+0x1ae>
 80215b6:	6121      	str	r1, [r4, #16]
 80215b8:	b913      	cbnz	r3, 80215c0 <_printf_float+0x1a0>
 80215ba:	6822      	ldr	r2, [r4, #0]
 80215bc:	07d0      	lsls	r0, r2, #31
 80215be:	d502      	bpl.n	80215c6 <_printf_float+0x1a6>
 80215c0:	3301      	adds	r3, #1
 80215c2:	440b      	add	r3, r1
 80215c4:	6123      	str	r3, [r4, #16]
 80215c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80215c8:	f04f 0900 	mov.w	r9, #0
 80215cc:	e7de      	b.n	802158c <_printf_float+0x16c>
 80215ce:	b913      	cbnz	r3, 80215d6 <_printf_float+0x1b6>
 80215d0:	6822      	ldr	r2, [r4, #0]
 80215d2:	07d2      	lsls	r2, r2, #31
 80215d4:	d501      	bpl.n	80215da <_printf_float+0x1ba>
 80215d6:	3302      	adds	r3, #2
 80215d8:	e7f4      	b.n	80215c4 <_printf_float+0x1a4>
 80215da:	2301      	movs	r3, #1
 80215dc:	e7f2      	b.n	80215c4 <_printf_float+0x1a4>
 80215de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80215e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215e4:	4299      	cmp	r1, r3
 80215e6:	db05      	blt.n	80215f4 <_printf_float+0x1d4>
 80215e8:	6823      	ldr	r3, [r4, #0]
 80215ea:	6121      	str	r1, [r4, #16]
 80215ec:	07d8      	lsls	r0, r3, #31
 80215ee:	d5ea      	bpl.n	80215c6 <_printf_float+0x1a6>
 80215f0:	1c4b      	adds	r3, r1, #1
 80215f2:	e7e7      	b.n	80215c4 <_printf_float+0x1a4>
 80215f4:	2900      	cmp	r1, #0
 80215f6:	bfd4      	ite	le
 80215f8:	f1c1 0202 	rsble	r2, r1, #2
 80215fc:	2201      	movgt	r2, #1
 80215fe:	4413      	add	r3, r2
 8021600:	e7e0      	b.n	80215c4 <_printf_float+0x1a4>
 8021602:	6823      	ldr	r3, [r4, #0]
 8021604:	055a      	lsls	r2, r3, #21
 8021606:	d407      	bmi.n	8021618 <_printf_float+0x1f8>
 8021608:	6923      	ldr	r3, [r4, #16]
 802160a:	4642      	mov	r2, r8
 802160c:	4631      	mov	r1, r6
 802160e:	4628      	mov	r0, r5
 8021610:	47b8      	blx	r7
 8021612:	3001      	adds	r0, #1
 8021614:	d12c      	bne.n	8021670 <_printf_float+0x250>
 8021616:	e764      	b.n	80214e2 <_printf_float+0xc2>
 8021618:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802161c:	f240 80e0 	bls.w	80217e0 <_printf_float+0x3c0>
 8021620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021624:	2200      	movs	r2, #0
 8021626:	2300      	movs	r3, #0
 8021628:	f7df fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 802162c:	2800      	cmp	r0, #0
 802162e:	d034      	beq.n	802169a <_printf_float+0x27a>
 8021630:	4a37      	ldr	r2, [pc, #220]	; (8021710 <_printf_float+0x2f0>)
 8021632:	2301      	movs	r3, #1
 8021634:	4631      	mov	r1, r6
 8021636:	4628      	mov	r0, r5
 8021638:	47b8      	blx	r7
 802163a:	3001      	adds	r0, #1
 802163c:	f43f af51 	beq.w	80214e2 <_printf_float+0xc2>
 8021640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021644:	429a      	cmp	r2, r3
 8021646:	db02      	blt.n	802164e <_printf_float+0x22e>
 8021648:	6823      	ldr	r3, [r4, #0]
 802164a:	07d8      	lsls	r0, r3, #31
 802164c:	d510      	bpl.n	8021670 <_printf_float+0x250>
 802164e:	ee18 3a10 	vmov	r3, s16
 8021652:	4652      	mov	r2, sl
 8021654:	4631      	mov	r1, r6
 8021656:	4628      	mov	r0, r5
 8021658:	47b8      	blx	r7
 802165a:	3001      	adds	r0, #1
 802165c:	f43f af41 	beq.w	80214e2 <_printf_float+0xc2>
 8021660:	f04f 0800 	mov.w	r8, #0
 8021664:	f104 091a 	add.w	r9, r4, #26
 8021668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802166a:	3b01      	subs	r3, #1
 802166c:	4543      	cmp	r3, r8
 802166e:	dc09      	bgt.n	8021684 <_printf_float+0x264>
 8021670:	6823      	ldr	r3, [r4, #0]
 8021672:	079b      	lsls	r3, r3, #30
 8021674:	f100 8105 	bmi.w	8021882 <_printf_float+0x462>
 8021678:	68e0      	ldr	r0, [r4, #12]
 802167a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802167c:	4298      	cmp	r0, r3
 802167e:	bfb8      	it	lt
 8021680:	4618      	movlt	r0, r3
 8021682:	e730      	b.n	80214e6 <_printf_float+0xc6>
 8021684:	2301      	movs	r3, #1
 8021686:	464a      	mov	r2, r9
 8021688:	4631      	mov	r1, r6
 802168a:	4628      	mov	r0, r5
 802168c:	47b8      	blx	r7
 802168e:	3001      	adds	r0, #1
 8021690:	f43f af27 	beq.w	80214e2 <_printf_float+0xc2>
 8021694:	f108 0801 	add.w	r8, r8, #1
 8021698:	e7e6      	b.n	8021668 <_printf_float+0x248>
 802169a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802169c:	2b00      	cmp	r3, #0
 802169e:	dc39      	bgt.n	8021714 <_printf_float+0x2f4>
 80216a0:	4a1b      	ldr	r2, [pc, #108]	; (8021710 <_printf_float+0x2f0>)
 80216a2:	2301      	movs	r3, #1
 80216a4:	4631      	mov	r1, r6
 80216a6:	4628      	mov	r0, r5
 80216a8:	47b8      	blx	r7
 80216aa:	3001      	adds	r0, #1
 80216ac:	f43f af19 	beq.w	80214e2 <_printf_float+0xc2>
 80216b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80216b4:	4313      	orrs	r3, r2
 80216b6:	d102      	bne.n	80216be <_printf_float+0x29e>
 80216b8:	6823      	ldr	r3, [r4, #0]
 80216ba:	07d9      	lsls	r1, r3, #31
 80216bc:	d5d8      	bpl.n	8021670 <_printf_float+0x250>
 80216be:	ee18 3a10 	vmov	r3, s16
 80216c2:	4652      	mov	r2, sl
 80216c4:	4631      	mov	r1, r6
 80216c6:	4628      	mov	r0, r5
 80216c8:	47b8      	blx	r7
 80216ca:	3001      	adds	r0, #1
 80216cc:	f43f af09 	beq.w	80214e2 <_printf_float+0xc2>
 80216d0:	f04f 0900 	mov.w	r9, #0
 80216d4:	f104 0a1a 	add.w	sl, r4, #26
 80216d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216da:	425b      	negs	r3, r3
 80216dc:	454b      	cmp	r3, r9
 80216de:	dc01      	bgt.n	80216e4 <_printf_float+0x2c4>
 80216e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216e2:	e792      	b.n	802160a <_printf_float+0x1ea>
 80216e4:	2301      	movs	r3, #1
 80216e6:	4652      	mov	r2, sl
 80216e8:	4631      	mov	r1, r6
 80216ea:	4628      	mov	r0, r5
 80216ec:	47b8      	blx	r7
 80216ee:	3001      	adds	r0, #1
 80216f0:	f43f aef7 	beq.w	80214e2 <_printf_float+0xc2>
 80216f4:	f109 0901 	add.w	r9, r9, #1
 80216f8:	e7ee      	b.n	80216d8 <_printf_float+0x2b8>
 80216fa:	bf00      	nop
 80216fc:	7fefffff 	.word	0x7fefffff
 8021700:	08029b44 	.word	0x08029b44
 8021704:	08029b48 	.word	0x08029b48
 8021708:	08029b50 	.word	0x08029b50
 802170c:	08029b4c 	.word	0x08029b4c
 8021710:	08029e79 	.word	0x08029e79
 8021714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021716:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021718:	429a      	cmp	r2, r3
 802171a:	bfa8      	it	ge
 802171c:	461a      	movge	r2, r3
 802171e:	2a00      	cmp	r2, #0
 8021720:	4691      	mov	r9, r2
 8021722:	dc37      	bgt.n	8021794 <_printf_float+0x374>
 8021724:	f04f 0b00 	mov.w	fp, #0
 8021728:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802172c:	f104 021a 	add.w	r2, r4, #26
 8021730:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021732:	9305      	str	r3, [sp, #20]
 8021734:	eba3 0309 	sub.w	r3, r3, r9
 8021738:	455b      	cmp	r3, fp
 802173a:	dc33      	bgt.n	80217a4 <_printf_float+0x384>
 802173c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021740:	429a      	cmp	r2, r3
 8021742:	db3b      	blt.n	80217bc <_printf_float+0x39c>
 8021744:	6823      	ldr	r3, [r4, #0]
 8021746:	07da      	lsls	r2, r3, #31
 8021748:	d438      	bmi.n	80217bc <_printf_float+0x39c>
 802174a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802174c:	9b05      	ldr	r3, [sp, #20]
 802174e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021750:	1ad3      	subs	r3, r2, r3
 8021752:	eba2 0901 	sub.w	r9, r2, r1
 8021756:	4599      	cmp	r9, r3
 8021758:	bfa8      	it	ge
 802175a:	4699      	movge	r9, r3
 802175c:	f1b9 0f00 	cmp.w	r9, #0
 8021760:	dc35      	bgt.n	80217ce <_printf_float+0x3ae>
 8021762:	f04f 0800 	mov.w	r8, #0
 8021766:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802176a:	f104 0a1a 	add.w	sl, r4, #26
 802176e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021772:	1a9b      	subs	r3, r3, r2
 8021774:	eba3 0309 	sub.w	r3, r3, r9
 8021778:	4543      	cmp	r3, r8
 802177a:	f77f af79 	ble.w	8021670 <_printf_float+0x250>
 802177e:	2301      	movs	r3, #1
 8021780:	4652      	mov	r2, sl
 8021782:	4631      	mov	r1, r6
 8021784:	4628      	mov	r0, r5
 8021786:	47b8      	blx	r7
 8021788:	3001      	adds	r0, #1
 802178a:	f43f aeaa 	beq.w	80214e2 <_printf_float+0xc2>
 802178e:	f108 0801 	add.w	r8, r8, #1
 8021792:	e7ec      	b.n	802176e <_printf_float+0x34e>
 8021794:	4613      	mov	r3, r2
 8021796:	4631      	mov	r1, r6
 8021798:	4642      	mov	r2, r8
 802179a:	4628      	mov	r0, r5
 802179c:	47b8      	blx	r7
 802179e:	3001      	adds	r0, #1
 80217a0:	d1c0      	bne.n	8021724 <_printf_float+0x304>
 80217a2:	e69e      	b.n	80214e2 <_printf_float+0xc2>
 80217a4:	2301      	movs	r3, #1
 80217a6:	4631      	mov	r1, r6
 80217a8:	4628      	mov	r0, r5
 80217aa:	9205      	str	r2, [sp, #20]
 80217ac:	47b8      	blx	r7
 80217ae:	3001      	adds	r0, #1
 80217b0:	f43f ae97 	beq.w	80214e2 <_printf_float+0xc2>
 80217b4:	9a05      	ldr	r2, [sp, #20]
 80217b6:	f10b 0b01 	add.w	fp, fp, #1
 80217ba:	e7b9      	b.n	8021730 <_printf_float+0x310>
 80217bc:	ee18 3a10 	vmov	r3, s16
 80217c0:	4652      	mov	r2, sl
 80217c2:	4631      	mov	r1, r6
 80217c4:	4628      	mov	r0, r5
 80217c6:	47b8      	blx	r7
 80217c8:	3001      	adds	r0, #1
 80217ca:	d1be      	bne.n	802174a <_printf_float+0x32a>
 80217cc:	e689      	b.n	80214e2 <_printf_float+0xc2>
 80217ce:	9a05      	ldr	r2, [sp, #20]
 80217d0:	464b      	mov	r3, r9
 80217d2:	4442      	add	r2, r8
 80217d4:	4631      	mov	r1, r6
 80217d6:	4628      	mov	r0, r5
 80217d8:	47b8      	blx	r7
 80217da:	3001      	adds	r0, #1
 80217dc:	d1c1      	bne.n	8021762 <_printf_float+0x342>
 80217de:	e680      	b.n	80214e2 <_printf_float+0xc2>
 80217e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80217e2:	2a01      	cmp	r2, #1
 80217e4:	dc01      	bgt.n	80217ea <_printf_float+0x3ca>
 80217e6:	07db      	lsls	r3, r3, #31
 80217e8:	d538      	bpl.n	802185c <_printf_float+0x43c>
 80217ea:	2301      	movs	r3, #1
 80217ec:	4642      	mov	r2, r8
 80217ee:	4631      	mov	r1, r6
 80217f0:	4628      	mov	r0, r5
 80217f2:	47b8      	blx	r7
 80217f4:	3001      	adds	r0, #1
 80217f6:	f43f ae74 	beq.w	80214e2 <_printf_float+0xc2>
 80217fa:	ee18 3a10 	vmov	r3, s16
 80217fe:	4652      	mov	r2, sl
 8021800:	4631      	mov	r1, r6
 8021802:	4628      	mov	r0, r5
 8021804:	47b8      	blx	r7
 8021806:	3001      	adds	r0, #1
 8021808:	f43f ae6b 	beq.w	80214e2 <_printf_float+0xc2>
 802180c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021810:	2200      	movs	r2, #0
 8021812:	2300      	movs	r3, #0
 8021814:	f7df f968 	bl	8000ae8 <__aeabi_dcmpeq>
 8021818:	b9d8      	cbnz	r0, 8021852 <_printf_float+0x432>
 802181a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802181c:	f108 0201 	add.w	r2, r8, #1
 8021820:	3b01      	subs	r3, #1
 8021822:	4631      	mov	r1, r6
 8021824:	4628      	mov	r0, r5
 8021826:	47b8      	blx	r7
 8021828:	3001      	adds	r0, #1
 802182a:	d10e      	bne.n	802184a <_printf_float+0x42a>
 802182c:	e659      	b.n	80214e2 <_printf_float+0xc2>
 802182e:	2301      	movs	r3, #1
 8021830:	4652      	mov	r2, sl
 8021832:	4631      	mov	r1, r6
 8021834:	4628      	mov	r0, r5
 8021836:	47b8      	blx	r7
 8021838:	3001      	adds	r0, #1
 802183a:	f43f ae52 	beq.w	80214e2 <_printf_float+0xc2>
 802183e:	f108 0801 	add.w	r8, r8, #1
 8021842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021844:	3b01      	subs	r3, #1
 8021846:	4543      	cmp	r3, r8
 8021848:	dcf1      	bgt.n	802182e <_printf_float+0x40e>
 802184a:	464b      	mov	r3, r9
 802184c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8021850:	e6dc      	b.n	802160c <_printf_float+0x1ec>
 8021852:	f04f 0800 	mov.w	r8, #0
 8021856:	f104 0a1a 	add.w	sl, r4, #26
 802185a:	e7f2      	b.n	8021842 <_printf_float+0x422>
 802185c:	2301      	movs	r3, #1
 802185e:	4642      	mov	r2, r8
 8021860:	e7df      	b.n	8021822 <_printf_float+0x402>
 8021862:	2301      	movs	r3, #1
 8021864:	464a      	mov	r2, r9
 8021866:	4631      	mov	r1, r6
 8021868:	4628      	mov	r0, r5
 802186a:	47b8      	blx	r7
 802186c:	3001      	adds	r0, #1
 802186e:	f43f ae38 	beq.w	80214e2 <_printf_float+0xc2>
 8021872:	f108 0801 	add.w	r8, r8, #1
 8021876:	68e3      	ldr	r3, [r4, #12]
 8021878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802187a:	1a5b      	subs	r3, r3, r1
 802187c:	4543      	cmp	r3, r8
 802187e:	dcf0      	bgt.n	8021862 <_printf_float+0x442>
 8021880:	e6fa      	b.n	8021678 <_printf_float+0x258>
 8021882:	f04f 0800 	mov.w	r8, #0
 8021886:	f104 0919 	add.w	r9, r4, #25
 802188a:	e7f4      	b.n	8021876 <_printf_float+0x456>

0802188c <_printf_common>:
 802188c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021890:	4616      	mov	r6, r2
 8021892:	4699      	mov	r9, r3
 8021894:	688a      	ldr	r2, [r1, #8]
 8021896:	690b      	ldr	r3, [r1, #16]
 8021898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802189c:	4293      	cmp	r3, r2
 802189e:	bfb8      	it	lt
 80218a0:	4613      	movlt	r3, r2
 80218a2:	6033      	str	r3, [r6, #0]
 80218a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80218a8:	4607      	mov	r7, r0
 80218aa:	460c      	mov	r4, r1
 80218ac:	b10a      	cbz	r2, 80218b2 <_printf_common+0x26>
 80218ae:	3301      	adds	r3, #1
 80218b0:	6033      	str	r3, [r6, #0]
 80218b2:	6823      	ldr	r3, [r4, #0]
 80218b4:	0699      	lsls	r1, r3, #26
 80218b6:	bf42      	ittt	mi
 80218b8:	6833      	ldrmi	r3, [r6, #0]
 80218ba:	3302      	addmi	r3, #2
 80218bc:	6033      	strmi	r3, [r6, #0]
 80218be:	6825      	ldr	r5, [r4, #0]
 80218c0:	f015 0506 	ands.w	r5, r5, #6
 80218c4:	d106      	bne.n	80218d4 <_printf_common+0x48>
 80218c6:	f104 0a19 	add.w	sl, r4, #25
 80218ca:	68e3      	ldr	r3, [r4, #12]
 80218cc:	6832      	ldr	r2, [r6, #0]
 80218ce:	1a9b      	subs	r3, r3, r2
 80218d0:	42ab      	cmp	r3, r5
 80218d2:	dc26      	bgt.n	8021922 <_printf_common+0x96>
 80218d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80218d8:	1e13      	subs	r3, r2, #0
 80218da:	6822      	ldr	r2, [r4, #0]
 80218dc:	bf18      	it	ne
 80218de:	2301      	movne	r3, #1
 80218e0:	0692      	lsls	r2, r2, #26
 80218e2:	d42b      	bmi.n	802193c <_printf_common+0xb0>
 80218e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80218e8:	4649      	mov	r1, r9
 80218ea:	4638      	mov	r0, r7
 80218ec:	47c0      	blx	r8
 80218ee:	3001      	adds	r0, #1
 80218f0:	d01e      	beq.n	8021930 <_printf_common+0xa4>
 80218f2:	6823      	ldr	r3, [r4, #0]
 80218f4:	68e5      	ldr	r5, [r4, #12]
 80218f6:	6832      	ldr	r2, [r6, #0]
 80218f8:	f003 0306 	and.w	r3, r3, #6
 80218fc:	2b04      	cmp	r3, #4
 80218fe:	bf08      	it	eq
 8021900:	1aad      	subeq	r5, r5, r2
 8021902:	68a3      	ldr	r3, [r4, #8]
 8021904:	6922      	ldr	r2, [r4, #16]
 8021906:	bf0c      	ite	eq
 8021908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802190c:	2500      	movne	r5, #0
 802190e:	4293      	cmp	r3, r2
 8021910:	bfc4      	itt	gt
 8021912:	1a9b      	subgt	r3, r3, r2
 8021914:	18ed      	addgt	r5, r5, r3
 8021916:	2600      	movs	r6, #0
 8021918:	341a      	adds	r4, #26
 802191a:	42b5      	cmp	r5, r6
 802191c:	d11a      	bne.n	8021954 <_printf_common+0xc8>
 802191e:	2000      	movs	r0, #0
 8021920:	e008      	b.n	8021934 <_printf_common+0xa8>
 8021922:	2301      	movs	r3, #1
 8021924:	4652      	mov	r2, sl
 8021926:	4649      	mov	r1, r9
 8021928:	4638      	mov	r0, r7
 802192a:	47c0      	blx	r8
 802192c:	3001      	adds	r0, #1
 802192e:	d103      	bne.n	8021938 <_printf_common+0xac>
 8021930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021938:	3501      	adds	r5, #1
 802193a:	e7c6      	b.n	80218ca <_printf_common+0x3e>
 802193c:	18e1      	adds	r1, r4, r3
 802193e:	1c5a      	adds	r2, r3, #1
 8021940:	2030      	movs	r0, #48	; 0x30
 8021942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021946:	4422      	add	r2, r4
 8021948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802194c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021950:	3302      	adds	r3, #2
 8021952:	e7c7      	b.n	80218e4 <_printf_common+0x58>
 8021954:	2301      	movs	r3, #1
 8021956:	4622      	mov	r2, r4
 8021958:	4649      	mov	r1, r9
 802195a:	4638      	mov	r0, r7
 802195c:	47c0      	blx	r8
 802195e:	3001      	adds	r0, #1
 8021960:	d0e6      	beq.n	8021930 <_printf_common+0xa4>
 8021962:	3601      	adds	r6, #1
 8021964:	e7d9      	b.n	802191a <_printf_common+0x8e>
	...

08021968 <_printf_i>:
 8021968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802196c:	460c      	mov	r4, r1
 802196e:	4691      	mov	r9, r2
 8021970:	7e27      	ldrb	r7, [r4, #24]
 8021972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021974:	2f78      	cmp	r7, #120	; 0x78
 8021976:	4680      	mov	r8, r0
 8021978:	469a      	mov	sl, r3
 802197a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802197e:	d807      	bhi.n	8021990 <_printf_i+0x28>
 8021980:	2f62      	cmp	r7, #98	; 0x62
 8021982:	d80a      	bhi.n	802199a <_printf_i+0x32>
 8021984:	2f00      	cmp	r7, #0
 8021986:	f000 80d8 	beq.w	8021b3a <_printf_i+0x1d2>
 802198a:	2f58      	cmp	r7, #88	; 0x58
 802198c:	f000 80a3 	beq.w	8021ad6 <_printf_i+0x16e>
 8021990:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021998:	e03a      	b.n	8021a10 <_printf_i+0xa8>
 802199a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802199e:	2b15      	cmp	r3, #21
 80219a0:	d8f6      	bhi.n	8021990 <_printf_i+0x28>
 80219a2:	a001      	add	r0, pc, #4	; (adr r0, 80219a8 <_printf_i+0x40>)
 80219a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80219a8:	08021a01 	.word	0x08021a01
 80219ac:	08021a15 	.word	0x08021a15
 80219b0:	08021991 	.word	0x08021991
 80219b4:	08021991 	.word	0x08021991
 80219b8:	08021991 	.word	0x08021991
 80219bc:	08021991 	.word	0x08021991
 80219c0:	08021a15 	.word	0x08021a15
 80219c4:	08021991 	.word	0x08021991
 80219c8:	08021991 	.word	0x08021991
 80219cc:	08021991 	.word	0x08021991
 80219d0:	08021991 	.word	0x08021991
 80219d4:	08021b21 	.word	0x08021b21
 80219d8:	08021a45 	.word	0x08021a45
 80219dc:	08021b03 	.word	0x08021b03
 80219e0:	08021991 	.word	0x08021991
 80219e4:	08021991 	.word	0x08021991
 80219e8:	08021b43 	.word	0x08021b43
 80219ec:	08021991 	.word	0x08021991
 80219f0:	08021a45 	.word	0x08021a45
 80219f4:	08021991 	.word	0x08021991
 80219f8:	08021991 	.word	0x08021991
 80219fc:	08021b0b 	.word	0x08021b0b
 8021a00:	680b      	ldr	r3, [r1, #0]
 8021a02:	1d1a      	adds	r2, r3, #4
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	600a      	str	r2, [r1, #0]
 8021a08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021a10:	2301      	movs	r3, #1
 8021a12:	e0a3      	b.n	8021b5c <_printf_i+0x1f4>
 8021a14:	6825      	ldr	r5, [r4, #0]
 8021a16:	6808      	ldr	r0, [r1, #0]
 8021a18:	062e      	lsls	r6, r5, #24
 8021a1a:	f100 0304 	add.w	r3, r0, #4
 8021a1e:	d50a      	bpl.n	8021a36 <_printf_i+0xce>
 8021a20:	6805      	ldr	r5, [r0, #0]
 8021a22:	600b      	str	r3, [r1, #0]
 8021a24:	2d00      	cmp	r5, #0
 8021a26:	da03      	bge.n	8021a30 <_printf_i+0xc8>
 8021a28:	232d      	movs	r3, #45	; 0x2d
 8021a2a:	426d      	negs	r5, r5
 8021a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021a30:	485e      	ldr	r0, [pc, #376]	; (8021bac <_printf_i+0x244>)
 8021a32:	230a      	movs	r3, #10
 8021a34:	e019      	b.n	8021a6a <_printf_i+0x102>
 8021a36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021a3a:	6805      	ldr	r5, [r0, #0]
 8021a3c:	600b      	str	r3, [r1, #0]
 8021a3e:	bf18      	it	ne
 8021a40:	b22d      	sxthne	r5, r5
 8021a42:	e7ef      	b.n	8021a24 <_printf_i+0xbc>
 8021a44:	680b      	ldr	r3, [r1, #0]
 8021a46:	6825      	ldr	r5, [r4, #0]
 8021a48:	1d18      	adds	r0, r3, #4
 8021a4a:	6008      	str	r0, [r1, #0]
 8021a4c:	0628      	lsls	r0, r5, #24
 8021a4e:	d501      	bpl.n	8021a54 <_printf_i+0xec>
 8021a50:	681d      	ldr	r5, [r3, #0]
 8021a52:	e002      	b.n	8021a5a <_printf_i+0xf2>
 8021a54:	0669      	lsls	r1, r5, #25
 8021a56:	d5fb      	bpl.n	8021a50 <_printf_i+0xe8>
 8021a58:	881d      	ldrh	r5, [r3, #0]
 8021a5a:	4854      	ldr	r0, [pc, #336]	; (8021bac <_printf_i+0x244>)
 8021a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8021a5e:	bf0c      	ite	eq
 8021a60:	2308      	moveq	r3, #8
 8021a62:	230a      	movne	r3, #10
 8021a64:	2100      	movs	r1, #0
 8021a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021a6a:	6866      	ldr	r6, [r4, #4]
 8021a6c:	60a6      	str	r6, [r4, #8]
 8021a6e:	2e00      	cmp	r6, #0
 8021a70:	bfa2      	ittt	ge
 8021a72:	6821      	ldrge	r1, [r4, #0]
 8021a74:	f021 0104 	bicge.w	r1, r1, #4
 8021a78:	6021      	strge	r1, [r4, #0]
 8021a7a:	b90d      	cbnz	r5, 8021a80 <_printf_i+0x118>
 8021a7c:	2e00      	cmp	r6, #0
 8021a7e:	d04d      	beq.n	8021b1c <_printf_i+0x1b4>
 8021a80:	4616      	mov	r6, r2
 8021a82:	fbb5 f1f3 	udiv	r1, r5, r3
 8021a86:	fb03 5711 	mls	r7, r3, r1, r5
 8021a8a:	5dc7      	ldrb	r7, [r0, r7]
 8021a8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021a90:	462f      	mov	r7, r5
 8021a92:	42bb      	cmp	r3, r7
 8021a94:	460d      	mov	r5, r1
 8021a96:	d9f4      	bls.n	8021a82 <_printf_i+0x11a>
 8021a98:	2b08      	cmp	r3, #8
 8021a9a:	d10b      	bne.n	8021ab4 <_printf_i+0x14c>
 8021a9c:	6823      	ldr	r3, [r4, #0]
 8021a9e:	07df      	lsls	r7, r3, #31
 8021aa0:	d508      	bpl.n	8021ab4 <_printf_i+0x14c>
 8021aa2:	6923      	ldr	r3, [r4, #16]
 8021aa4:	6861      	ldr	r1, [r4, #4]
 8021aa6:	4299      	cmp	r1, r3
 8021aa8:	bfde      	ittt	le
 8021aaa:	2330      	movle	r3, #48	; 0x30
 8021aac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021ab0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8021ab4:	1b92      	subs	r2, r2, r6
 8021ab6:	6122      	str	r2, [r4, #16]
 8021ab8:	f8cd a000 	str.w	sl, [sp]
 8021abc:	464b      	mov	r3, r9
 8021abe:	aa03      	add	r2, sp, #12
 8021ac0:	4621      	mov	r1, r4
 8021ac2:	4640      	mov	r0, r8
 8021ac4:	f7ff fee2 	bl	802188c <_printf_common>
 8021ac8:	3001      	adds	r0, #1
 8021aca:	d14c      	bne.n	8021b66 <_printf_i+0x1fe>
 8021acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021ad0:	b004      	add	sp, #16
 8021ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ad6:	4835      	ldr	r0, [pc, #212]	; (8021bac <_printf_i+0x244>)
 8021ad8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021adc:	6823      	ldr	r3, [r4, #0]
 8021ade:	680e      	ldr	r6, [r1, #0]
 8021ae0:	061f      	lsls	r7, r3, #24
 8021ae2:	f856 5b04 	ldr.w	r5, [r6], #4
 8021ae6:	600e      	str	r6, [r1, #0]
 8021ae8:	d514      	bpl.n	8021b14 <_printf_i+0x1ac>
 8021aea:	07d9      	lsls	r1, r3, #31
 8021aec:	bf44      	itt	mi
 8021aee:	f043 0320 	orrmi.w	r3, r3, #32
 8021af2:	6023      	strmi	r3, [r4, #0]
 8021af4:	b91d      	cbnz	r5, 8021afe <_printf_i+0x196>
 8021af6:	6823      	ldr	r3, [r4, #0]
 8021af8:	f023 0320 	bic.w	r3, r3, #32
 8021afc:	6023      	str	r3, [r4, #0]
 8021afe:	2310      	movs	r3, #16
 8021b00:	e7b0      	b.n	8021a64 <_printf_i+0xfc>
 8021b02:	6823      	ldr	r3, [r4, #0]
 8021b04:	f043 0320 	orr.w	r3, r3, #32
 8021b08:	6023      	str	r3, [r4, #0]
 8021b0a:	2378      	movs	r3, #120	; 0x78
 8021b0c:	4828      	ldr	r0, [pc, #160]	; (8021bb0 <_printf_i+0x248>)
 8021b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021b12:	e7e3      	b.n	8021adc <_printf_i+0x174>
 8021b14:	065e      	lsls	r6, r3, #25
 8021b16:	bf48      	it	mi
 8021b18:	b2ad      	uxthmi	r5, r5
 8021b1a:	e7e6      	b.n	8021aea <_printf_i+0x182>
 8021b1c:	4616      	mov	r6, r2
 8021b1e:	e7bb      	b.n	8021a98 <_printf_i+0x130>
 8021b20:	680b      	ldr	r3, [r1, #0]
 8021b22:	6826      	ldr	r6, [r4, #0]
 8021b24:	6960      	ldr	r0, [r4, #20]
 8021b26:	1d1d      	adds	r5, r3, #4
 8021b28:	600d      	str	r5, [r1, #0]
 8021b2a:	0635      	lsls	r5, r6, #24
 8021b2c:	681b      	ldr	r3, [r3, #0]
 8021b2e:	d501      	bpl.n	8021b34 <_printf_i+0x1cc>
 8021b30:	6018      	str	r0, [r3, #0]
 8021b32:	e002      	b.n	8021b3a <_printf_i+0x1d2>
 8021b34:	0671      	lsls	r1, r6, #25
 8021b36:	d5fb      	bpl.n	8021b30 <_printf_i+0x1c8>
 8021b38:	8018      	strh	r0, [r3, #0]
 8021b3a:	2300      	movs	r3, #0
 8021b3c:	6123      	str	r3, [r4, #16]
 8021b3e:	4616      	mov	r6, r2
 8021b40:	e7ba      	b.n	8021ab8 <_printf_i+0x150>
 8021b42:	680b      	ldr	r3, [r1, #0]
 8021b44:	1d1a      	adds	r2, r3, #4
 8021b46:	600a      	str	r2, [r1, #0]
 8021b48:	681e      	ldr	r6, [r3, #0]
 8021b4a:	6862      	ldr	r2, [r4, #4]
 8021b4c:	2100      	movs	r1, #0
 8021b4e:	4630      	mov	r0, r6
 8021b50:	f7de fb56 	bl	8000200 <memchr>
 8021b54:	b108      	cbz	r0, 8021b5a <_printf_i+0x1f2>
 8021b56:	1b80      	subs	r0, r0, r6
 8021b58:	6060      	str	r0, [r4, #4]
 8021b5a:	6863      	ldr	r3, [r4, #4]
 8021b5c:	6123      	str	r3, [r4, #16]
 8021b5e:	2300      	movs	r3, #0
 8021b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021b64:	e7a8      	b.n	8021ab8 <_printf_i+0x150>
 8021b66:	6923      	ldr	r3, [r4, #16]
 8021b68:	4632      	mov	r2, r6
 8021b6a:	4649      	mov	r1, r9
 8021b6c:	4640      	mov	r0, r8
 8021b6e:	47d0      	blx	sl
 8021b70:	3001      	adds	r0, #1
 8021b72:	d0ab      	beq.n	8021acc <_printf_i+0x164>
 8021b74:	6823      	ldr	r3, [r4, #0]
 8021b76:	079b      	lsls	r3, r3, #30
 8021b78:	d413      	bmi.n	8021ba2 <_printf_i+0x23a>
 8021b7a:	68e0      	ldr	r0, [r4, #12]
 8021b7c:	9b03      	ldr	r3, [sp, #12]
 8021b7e:	4298      	cmp	r0, r3
 8021b80:	bfb8      	it	lt
 8021b82:	4618      	movlt	r0, r3
 8021b84:	e7a4      	b.n	8021ad0 <_printf_i+0x168>
 8021b86:	2301      	movs	r3, #1
 8021b88:	4632      	mov	r2, r6
 8021b8a:	4649      	mov	r1, r9
 8021b8c:	4640      	mov	r0, r8
 8021b8e:	47d0      	blx	sl
 8021b90:	3001      	adds	r0, #1
 8021b92:	d09b      	beq.n	8021acc <_printf_i+0x164>
 8021b94:	3501      	adds	r5, #1
 8021b96:	68e3      	ldr	r3, [r4, #12]
 8021b98:	9903      	ldr	r1, [sp, #12]
 8021b9a:	1a5b      	subs	r3, r3, r1
 8021b9c:	42ab      	cmp	r3, r5
 8021b9e:	dcf2      	bgt.n	8021b86 <_printf_i+0x21e>
 8021ba0:	e7eb      	b.n	8021b7a <_printf_i+0x212>
 8021ba2:	2500      	movs	r5, #0
 8021ba4:	f104 0619 	add.w	r6, r4, #25
 8021ba8:	e7f5      	b.n	8021b96 <_printf_i+0x22e>
 8021baa:	bf00      	nop
 8021bac:	08029b54 	.word	0x08029b54
 8021bb0:	08029b65 	.word	0x08029b65

08021bb4 <iprintf>:
 8021bb4:	b40f      	push	{r0, r1, r2, r3}
 8021bb6:	4b0a      	ldr	r3, [pc, #40]	; (8021be0 <iprintf+0x2c>)
 8021bb8:	b513      	push	{r0, r1, r4, lr}
 8021bba:	681c      	ldr	r4, [r3, #0]
 8021bbc:	b124      	cbz	r4, 8021bc8 <iprintf+0x14>
 8021bbe:	69a3      	ldr	r3, [r4, #24]
 8021bc0:	b913      	cbnz	r3, 8021bc8 <iprintf+0x14>
 8021bc2:	4620      	mov	r0, r4
 8021bc4:	f7ff f9ce 	bl	8020f64 <__sinit>
 8021bc8:	ab05      	add	r3, sp, #20
 8021bca:	9a04      	ldr	r2, [sp, #16]
 8021bcc:	68a1      	ldr	r1, [r4, #8]
 8021bce:	9301      	str	r3, [sp, #4]
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	f002 fae9 	bl	80241a8 <_vfiprintf_r>
 8021bd6:	b002      	add	sp, #8
 8021bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bdc:	b004      	add	sp, #16
 8021bde:	4770      	bx	lr
 8021be0:	20000074 	.word	0x20000074

08021be4 <_puts_r>:
 8021be4:	b570      	push	{r4, r5, r6, lr}
 8021be6:	460e      	mov	r6, r1
 8021be8:	4605      	mov	r5, r0
 8021bea:	b118      	cbz	r0, 8021bf4 <_puts_r+0x10>
 8021bec:	6983      	ldr	r3, [r0, #24]
 8021bee:	b90b      	cbnz	r3, 8021bf4 <_puts_r+0x10>
 8021bf0:	f7ff f9b8 	bl	8020f64 <__sinit>
 8021bf4:	69ab      	ldr	r3, [r5, #24]
 8021bf6:	68ac      	ldr	r4, [r5, #8]
 8021bf8:	b913      	cbnz	r3, 8021c00 <_puts_r+0x1c>
 8021bfa:	4628      	mov	r0, r5
 8021bfc:	f7ff f9b2 	bl	8020f64 <__sinit>
 8021c00:	4b2c      	ldr	r3, [pc, #176]	; (8021cb4 <_puts_r+0xd0>)
 8021c02:	429c      	cmp	r4, r3
 8021c04:	d120      	bne.n	8021c48 <_puts_r+0x64>
 8021c06:	686c      	ldr	r4, [r5, #4]
 8021c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021c0a:	07db      	lsls	r3, r3, #31
 8021c0c:	d405      	bmi.n	8021c1a <_puts_r+0x36>
 8021c0e:	89a3      	ldrh	r3, [r4, #12]
 8021c10:	0598      	lsls	r0, r3, #22
 8021c12:	d402      	bmi.n	8021c1a <_puts_r+0x36>
 8021c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c16:	f7ff fa68 	bl	80210ea <__retarget_lock_acquire_recursive>
 8021c1a:	89a3      	ldrh	r3, [r4, #12]
 8021c1c:	0719      	lsls	r1, r3, #28
 8021c1e:	d51d      	bpl.n	8021c5c <_puts_r+0x78>
 8021c20:	6923      	ldr	r3, [r4, #16]
 8021c22:	b1db      	cbz	r3, 8021c5c <_puts_r+0x78>
 8021c24:	3e01      	subs	r6, #1
 8021c26:	68a3      	ldr	r3, [r4, #8]
 8021c28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021c2c:	3b01      	subs	r3, #1
 8021c2e:	60a3      	str	r3, [r4, #8]
 8021c30:	bb39      	cbnz	r1, 8021c82 <_puts_r+0x9e>
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	da38      	bge.n	8021ca8 <_puts_r+0xc4>
 8021c36:	4622      	mov	r2, r4
 8021c38:	210a      	movs	r1, #10
 8021c3a:	4628      	mov	r0, r5
 8021c3c:	f000 faf8 	bl	8022230 <__swbuf_r>
 8021c40:	3001      	adds	r0, #1
 8021c42:	d011      	beq.n	8021c68 <_puts_r+0x84>
 8021c44:	250a      	movs	r5, #10
 8021c46:	e011      	b.n	8021c6c <_puts_r+0x88>
 8021c48:	4b1b      	ldr	r3, [pc, #108]	; (8021cb8 <_puts_r+0xd4>)
 8021c4a:	429c      	cmp	r4, r3
 8021c4c:	d101      	bne.n	8021c52 <_puts_r+0x6e>
 8021c4e:	68ac      	ldr	r4, [r5, #8]
 8021c50:	e7da      	b.n	8021c08 <_puts_r+0x24>
 8021c52:	4b1a      	ldr	r3, [pc, #104]	; (8021cbc <_puts_r+0xd8>)
 8021c54:	429c      	cmp	r4, r3
 8021c56:	bf08      	it	eq
 8021c58:	68ec      	ldreq	r4, [r5, #12]
 8021c5a:	e7d5      	b.n	8021c08 <_puts_r+0x24>
 8021c5c:	4621      	mov	r1, r4
 8021c5e:	4628      	mov	r0, r5
 8021c60:	f000 fb4a 	bl	80222f8 <__swsetup_r>
 8021c64:	2800      	cmp	r0, #0
 8021c66:	d0dd      	beq.n	8021c24 <_puts_r+0x40>
 8021c68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8021c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021c6e:	07da      	lsls	r2, r3, #31
 8021c70:	d405      	bmi.n	8021c7e <_puts_r+0x9a>
 8021c72:	89a3      	ldrh	r3, [r4, #12]
 8021c74:	059b      	lsls	r3, r3, #22
 8021c76:	d402      	bmi.n	8021c7e <_puts_r+0x9a>
 8021c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021c7a:	f7ff fa37 	bl	80210ec <__retarget_lock_release_recursive>
 8021c7e:	4628      	mov	r0, r5
 8021c80:	bd70      	pop	{r4, r5, r6, pc}
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	da04      	bge.n	8021c90 <_puts_r+0xac>
 8021c86:	69a2      	ldr	r2, [r4, #24]
 8021c88:	429a      	cmp	r2, r3
 8021c8a:	dc06      	bgt.n	8021c9a <_puts_r+0xb6>
 8021c8c:	290a      	cmp	r1, #10
 8021c8e:	d004      	beq.n	8021c9a <_puts_r+0xb6>
 8021c90:	6823      	ldr	r3, [r4, #0]
 8021c92:	1c5a      	adds	r2, r3, #1
 8021c94:	6022      	str	r2, [r4, #0]
 8021c96:	7019      	strb	r1, [r3, #0]
 8021c98:	e7c5      	b.n	8021c26 <_puts_r+0x42>
 8021c9a:	4622      	mov	r2, r4
 8021c9c:	4628      	mov	r0, r5
 8021c9e:	f000 fac7 	bl	8022230 <__swbuf_r>
 8021ca2:	3001      	adds	r0, #1
 8021ca4:	d1bf      	bne.n	8021c26 <_puts_r+0x42>
 8021ca6:	e7df      	b.n	8021c68 <_puts_r+0x84>
 8021ca8:	6823      	ldr	r3, [r4, #0]
 8021caa:	250a      	movs	r5, #10
 8021cac:	1c5a      	adds	r2, r3, #1
 8021cae:	6022      	str	r2, [r4, #0]
 8021cb0:	701d      	strb	r5, [r3, #0]
 8021cb2:	e7db      	b.n	8021c6c <_puts_r+0x88>
 8021cb4:	08029b00 	.word	0x08029b00
 8021cb8:	08029b20 	.word	0x08029b20
 8021cbc:	08029ae0 	.word	0x08029ae0

08021cc0 <puts>:
 8021cc0:	4b02      	ldr	r3, [pc, #8]	; (8021ccc <puts+0xc>)
 8021cc2:	4601      	mov	r1, r0
 8021cc4:	6818      	ldr	r0, [r3, #0]
 8021cc6:	f7ff bf8d 	b.w	8021be4 <_puts_r>
 8021cca:	bf00      	nop
 8021ccc:	20000074 	.word	0x20000074

08021cd0 <rand>:
 8021cd0:	4b17      	ldr	r3, [pc, #92]	; (8021d30 <rand+0x60>)
 8021cd2:	b510      	push	{r4, lr}
 8021cd4:	681c      	ldr	r4, [r3, #0]
 8021cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021cd8:	b9b3      	cbnz	r3, 8021d08 <rand+0x38>
 8021cda:	2018      	movs	r0, #24
 8021cdc:	f7ff fa08 	bl	80210f0 <malloc>
 8021ce0:	63a0      	str	r0, [r4, #56]	; 0x38
 8021ce2:	b928      	cbnz	r0, 8021cf0 <rand+0x20>
 8021ce4:	4602      	mov	r2, r0
 8021ce6:	4b13      	ldr	r3, [pc, #76]	; (8021d34 <rand+0x64>)
 8021ce8:	4813      	ldr	r0, [pc, #76]	; (8021d38 <rand+0x68>)
 8021cea:	214e      	movs	r1, #78	; 0x4e
 8021cec:	f000 fb72 	bl	80223d4 <__assert_func>
 8021cf0:	4a12      	ldr	r2, [pc, #72]	; (8021d3c <rand+0x6c>)
 8021cf2:	4b13      	ldr	r3, [pc, #76]	; (8021d40 <rand+0x70>)
 8021cf4:	e9c0 2300 	strd	r2, r3, [r0]
 8021cf8:	4b12      	ldr	r3, [pc, #72]	; (8021d44 <rand+0x74>)
 8021cfa:	6083      	str	r3, [r0, #8]
 8021cfc:	230b      	movs	r3, #11
 8021cfe:	8183      	strh	r3, [r0, #12]
 8021d00:	2201      	movs	r2, #1
 8021d02:	2300      	movs	r3, #0
 8021d04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021d08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021d0a:	480f      	ldr	r0, [pc, #60]	; (8021d48 <rand+0x78>)
 8021d0c:	690a      	ldr	r2, [r1, #16]
 8021d0e:	694b      	ldr	r3, [r1, #20]
 8021d10:	4c0e      	ldr	r4, [pc, #56]	; (8021d4c <rand+0x7c>)
 8021d12:	4350      	muls	r0, r2
 8021d14:	fb04 0003 	mla	r0, r4, r3, r0
 8021d18:	fba2 3404 	umull	r3, r4, r2, r4
 8021d1c:	1c5a      	adds	r2, r3, #1
 8021d1e:	4404      	add	r4, r0
 8021d20:	f144 0000 	adc.w	r0, r4, #0
 8021d24:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021d28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021d2c:	bd10      	pop	{r4, pc}
 8021d2e:	bf00      	nop
 8021d30:	20000074 	.word	0x20000074
 8021d34:	08029b76 	.word	0x08029b76
 8021d38:	08029b8d 	.word	0x08029b8d
 8021d3c:	abcd330e 	.word	0xabcd330e
 8021d40:	e66d1234 	.word	0xe66d1234
 8021d44:	0005deec 	.word	0x0005deec
 8021d48:	5851f42d 	.word	0x5851f42d
 8021d4c:	4c957f2d 	.word	0x4c957f2d

08021d50 <cleanup_glue>:
 8021d50:	b538      	push	{r3, r4, r5, lr}
 8021d52:	460c      	mov	r4, r1
 8021d54:	6809      	ldr	r1, [r1, #0]
 8021d56:	4605      	mov	r5, r0
 8021d58:	b109      	cbz	r1, 8021d5e <cleanup_glue+0xe>
 8021d5a:	f7ff fff9 	bl	8021d50 <cleanup_glue>
 8021d5e:	4621      	mov	r1, r4
 8021d60:	4628      	mov	r0, r5
 8021d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021d66:	f7ff ba11 	b.w	802118c <_free_r>
	...

08021d6c <_reclaim_reent>:
 8021d6c:	4b2c      	ldr	r3, [pc, #176]	; (8021e20 <_reclaim_reent+0xb4>)
 8021d6e:	681b      	ldr	r3, [r3, #0]
 8021d70:	4283      	cmp	r3, r0
 8021d72:	b570      	push	{r4, r5, r6, lr}
 8021d74:	4604      	mov	r4, r0
 8021d76:	d051      	beq.n	8021e1c <_reclaim_reent+0xb0>
 8021d78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8021d7a:	b143      	cbz	r3, 8021d8e <_reclaim_reent+0x22>
 8021d7c:	68db      	ldr	r3, [r3, #12]
 8021d7e:	2b00      	cmp	r3, #0
 8021d80:	d14a      	bne.n	8021e18 <_reclaim_reent+0xac>
 8021d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021d84:	6819      	ldr	r1, [r3, #0]
 8021d86:	b111      	cbz	r1, 8021d8e <_reclaim_reent+0x22>
 8021d88:	4620      	mov	r0, r4
 8021d8a:	f7ff f9ff 	bl	802118c <_free_r>
 8021d8e:	6961      	ldr	r1, [r4, #20]
 8021d90:	b111      	cbz	r1, 8021d98 <_reclaim_reent+0x2c>
 8021d92:	4620      	mov	r0, r4
 8021d94:	f7ff f9fa 	bl	802118c <_free_r>
 8021d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021d9a:	b111      	cbz	r1, 8021da2 <_reclaim_reent+0x36>
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	f7ff f9f5 	bl	802118c <_free_r>
 8021da2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021da4:	b111      	cbz	r1, 8021dac <_reclaim_reent+0x40>
 8021da6:	4620      	mov	r0, r4
 8021da8:	f7ff f9f0 	bl	802118c <_free_r>
 8021dac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021dae:	b111      	cbz	r1, 8021db6 <_reclaim_reent+0x4a>
 8021db0:	4620      	mov	r0, r4
 8021db2:	f7ff f9eb 	bl	802118c <_free_r>
 8021db6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021db8:	b111      	cbz	r1, 8021dc0 <_reclaim_reent+0x54>
 8021dba:	4620      	mov	r0, r4
 8021dbc:	f7ff f9e6 	bl	802118c <_free_r>
 8021dc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021dc2:	b111      	cbz	r1, 8021dca <_reclaim_reent+0x5e>
 8021dc4:	4620      	mov	r0, r4
 8021dc6:	f7ff f9e1 	bl	802118c <_free_r>
 8021dca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8021dcc:	b111      	cbz	r1, 8021dd4 <_reclaim_reent+0x68>
 8021dce:	4620      	mov	r0, r4
 8021dd0:	f7ff f9dc 	bl	802118c <_free_r>
 8021dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021dd6:	b111      	cbz	r1, 8021dde <_reclaim_reent+0x72>
 8021dd8:	4620      	mov	r0, r4
 8021dda:	f7ff f9d7 	bl	802118c <_free_r>
 8021dde:	69a3      	ldr	r3, [r4, #24]
 8021de0:	b1e3      	cbz	r3, 8021e1c <_reclaim_reent+0xb0>
 8021de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021de4:	4620      	mov	r0, r4
 8021de6:	4798      	blx	r3
 8021de8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021dea:	b1b9      	cbz	r1, 8021e1c <_reclaim_reent+0xb0>
 8021dec:	4620      	mov	r0, r4
 8021dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021df2:	f7ff bfad 	b.w	8021d50 <cleanup_glue>
 8021df6:	5949      	ldr	r1, [r1, r5]
 8021df8:	b941      	cbnz	r1, 8021e0c <_reclaim_reent+0xa0>
 8021dfa:	3504      	adds	r5, #4
 8021dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021dfe:	2d80      	cmp	r5, #128	; 0x80
 8021e00:	68d9      	ldr	r1, [r3, #12]
 8021e02:	d1f8      	bne.n	8021df6 <_reclaim_reent+0x8a>
 8021e04:	4620      	mov	r0, r4
 8021e06:	f7ff f9c1 	bl	802118c <_free_r>
 8021e0a:	e7ba      	b.n	8021d82 <_reclaim_reent+0x16>
 8021e0c:	680e      	ldr	r6, [r1, #0]
 8021e0e:	4620      	mov	r0, r4
 8021e10:	f7ff f9bc 	bl	802118c <_free_r>
 8021e14:	4631      	mov	r1, r6
 8021e16:	e7ef      	b.n	8021df8 <_reclaim_reent+0x8c>
 8021e18:	2500      	movs	r5, #0
 8021e1a:	e7ef      	b.n	8021dfc <_reclaim_reent+0x90>
 8021e1c:	bd70      	pop	{r4, r5, r6, pc}
 8021e1e:	bf00      	nop
 8021e20:	20000074 	.word	0x20000074

08021e24 <_sbrk_r>:
 8021e24:	b538      	push	{r3, r4, r5, lr}
 8021e26:	4d06      	ldr	r5, [pc, #24]	; (8021e40 <_sbrk_r+0x1c>)
 8021e28:	2300      	movs	r3, #0
 8021e2a:	4604      	mov	r4, r0
 8021e2c:	4608      	mov	r0, r1
 8021e2e:	602b      	str	r3, [r5, #0]
 8021e30:	f7e0 fe1a 	bl	8002a68 <_sbrk>
 8021e34:	1c43      	adds	r3, r0, #1
 8021e36:	d102      	bne.n	8021e3e <_sbrk_r+0x1a>
 8021e38:	682b      	ldr	r3, [r5, #0]
 8021e3a:	b103      	cbz	r3, 8021e3e <_sbrk_r+0x1a>
 8021e3c:	6023      	str	r3, [r4, #0]
 8021e3e:	bd38      	pop	{r3, r4, r5, pc}
 8021e40:	2001b1d8 	.word	0x2001b1d8

08021e44 <sniprintf>:
 8021e44:	b40c      	push	{r2, r3}
 8021e46:	b530      	push	{r4, r5, lr}
 8021e48:	4b17      	ldr	r3, [pc, #92]	; (8021ea8 <sniprintf+0x64>)
 8021e4a:	1e0c      	subs	r4, r1, #0
 8021e4c:	681d      	ldr	r5, [r3, #0]
 8021e4e:	b09d      	sub	sp, #116	; 0x74
 8021e50:	da08      	bge.n	8021e64 <sniprintf+0x20>
 8021e52:	238b      	movs	r3, #139	; 0x8b
 8021e54:	602b      	str	r3, [r5, #0]
 8021e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e5a:	b01d      	add	sp, #116	; 0x74
 8021e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e60:	b002      	add	sp, #8
 8021e62:	4770      	bx	lr
 8021e64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021e68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021e6c:	bf14      	ite	ne
 8021e6e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8021e72:	4623      	moveq	r3, r4
 8021e74:	9304      	str	r3, [sp, #16]
 8021e76:	9307      	str	r3, [sp, #28]
 8021e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021e7c:	9002      	str	r0, [sp, #8]
 8021e7e:	9006      	str	r0, [sp, #24]
 8021e80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021e84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021e86:	ab21      	add	r3, sp, #132	; 0x84
 8021e88:	a902      	add	r1, sp, #8
 8021e8a:	4628      	mov	r0, r5
 8021e8c:	9301      	str	r3, [sp, #4]
 8021e8e:	f001 fe8f 	bl	8023bb0 <_svfiprintf_r>
 8021e92:	1c43      	adds	r3, r0, #1
 8021e94:	bfbc      	itt	lt
 8021e96:	238b      	movlt	r3, #139	; 0x8b
 8021e98:	602b      	strlt	r3, [r5, #0]
 8021e9a:	2c00      	cmp	r4, #0
 8021e9c:	d0dd      	beq.n	8021e5a <sniprintf+0x16>
 8021e9e:	9b02      	ldr	r3, [sp, #8]
 8021ea0:	2200      	movs	r2, #0
 8021ea2:	701a      	strb	r2, [r3, #0]
 8021ea4:	e7d9      	b.n	8021e5a <sniprintf+0x16>
 8021ea6:	bf00      	nop
 8021ea8:	20000074 	.word	0x20000074

08021eac <siprintf>:
 8021eac:	b40e      	push	{r1, r2, r3}
 8021eae:	b500      	push	{lr}
 8021eb0:	b09c      	sub	sp, #112	; 0x70
 8021eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8021eb4:	9002      	str	r0, [sp, #8]
 8021eb6:	9006      	str	r0, [sp, #24]
 8021eb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ebc:	4809      	ldr	r0, [pc, #36]	; (8021ee4 <siprintf+0x38>)
 8021ebe:	9107      	str	r1, [sp, #28]
 8021ec0:	9104      	str	r1, [sp, #16]
 8021ec2:	4909      	ldr	r1, [pc, #36]	; (8021ee8 <siprintf+0x3c>)
 8021ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8021ec8:	9105      	str	r1, [sp, #20]
 8021eca:	6800      	ldr	r0, [r0, #0]
 8021ecc:	9301      	str	r3, [sp, #4]
 8021ece:	a902      	add	r1, sp, #8
 8021ed0:	f001 fe6e 	bl	8023bb0 <_svfiprintf_r>
 8021ed4:	9b02      	ldr	r3, [sp, #8]
 8021ed6:	2200      	movs	r2, #0
 8021ed8:	701a      	strb	r2, [r3, #0]
 8021eda:	b01c      	add	sp, #112	; 0x70
 8021edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8021ee0:	b003      	add	sp, #12
 8021ee2:	4770      	bx	lr
 8021ee4:	20000074 	.word	0x20000074
 8021ee8:	ffff0208 	.word	0xffff0208

08021eec <siscanf>:
 8021eec:	b40e      	push	{r1, r2, r3}
 8021eee:	b510      	push	{r4, lr}
 8021ef0:	b09f      	sub	sp, #124	; 0x7c
 8021ef2:	ac21      	add	r4, sp, #132	; 0x84
 8021ef4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021ef8:	f854 2b04 	ldr.w	r2, [r4], #4
 8021efc:	9201      	str	r2, [sp, #4]
 8021efe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021f02:	9004      	str	r0, [sp, #16]
 8021f04:	9008      	str	r0, [sp, #32]
 8021f06:	f7de f96d 	bl	80001e4 <strlen>
 8021f0a:	4b0c      	ldr	r3, [pc, #48]	; (8021f3c <siscanf+0x50>)
 8021f0c:	9005      	str	r0, [sp, #20]
 8021f0e:	9009      	str	r0, [sp, #36]	; 0x24
 8021f10:	930d      	str	r3, [sp, #52]	; 0x34
 8021f12:	480b      	ldr	r0, [pc, #44]	; (8021f40 <siscanf+0x54>)
 8021f14:	9a01      	ldr	r2, [sp, #4]
 8021f16:	6800      	ldr	r0, [r0, #0]
 8021f18:	9403      	str	r4, [sp, #12]
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8021f1e:	9316      	str	r3, [sp, #88]	; 0x58
 8021f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021f24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021f28:	a904      	add	r1, sp, #16
 8021f2a:	4623      	mov	r3, r4
 8021f2c:	f001 ff9a 	bl	8023e64 <__ssvfiscanf_r>
 8021f30:	b01f      	add	sp, #124	; 0x7c
 8021f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f36:	b003      	add	sp, #12
 8021f38:	4770      	bx	lr
 8021f3a:	bf00      	nop
 8021f3c:	08021f67 	.word	0x08021f67
 8021f40:	20000074 	.word	0x20000074

08021f44 <__sread>:
 8021f44:	b510      	push	{r4, lr}
 8021f46:	460c      	mov	r4, r1
 8021f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f4c:	f002 fba8 	bl	80246a0 <_read_r>
 8021f50:	2800      	cmp	r0, #0
 8021f52:	bfab      	itete	ge
 8021f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021f56:	89a3      	ldrhlt	r3, [r4, #12]
 8021f58:	181b      	addge	r3, r3, r0
 8021f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021f5e:	bfac      	ite	ge
 8021f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8021f62:	81a3      	strhlt	r3, [r4, #12]
 8021f64:	bd10      	pop	{r4, pc}

08021f66 <__seofread>:
 8021f66:	2000      	movs	r0, #0
 8021f68:	4770      	bx	lr

08021f6a <__swrite>:
 8021f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f6e:	461f      	mov	r7, r3
 8021f70:	898b      	ldrh	r3, [r1, #12]
 8021f72:	05db      	lsls	r3, r3, #23
 8021f74:	4605      	mov	r5, r0
 8021f76:	460c      	mov	r4, r1
 8021f78:	4616      	mov	r6, r2
 8021f7a:	d505      	bpl.n	8021f88 <__swrite+0x1e>
 8021f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f80:	2302      	movs	r3, #2
 8021f82:	2200      	movs	r2, #0
 8021f84:	f001 f9aa 	bl	80232dc <_lseek_r>
 8021f88:	89a3      	ldrh	r3, [r4, #12]
 8021f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021f92:	81a3      	strh	r3, [r4, #12]
 8021f94:	4632      	mov	r2, r6
 8021f96:	463b      	mov	r3, r7
 8021f98:	4628      	mov	r0, r5
 8021f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f9e:	f000 b999 	b.w	80222d4 <_write_r>

08021fa2 <__sseek>:
 8021fa2:	b510      	push	{r4, lr}
 8021fa4:	460c      	mov	r4, r1
 8021fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021faa:	f001 f997 	bl	80232dc <_lseek_r>
 8021fae:	1c43      	adds	r3, r0, #1
 8021fb0:	89a3      	ldrh	r3, [r4, #12]
 8021fb2:	bf15      	itete	ne
 8021fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8021fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021fbe:	81a3      	strheq	r3, [r4, #12]
 8021fc0:	bf18      	it	ne
 8021fc2:	81a3      	strhne	r3, [r4, #12]
 8021fc4:	bd10      	pop	{r4, pc}

08021fc6 <__sclose>:
 8021fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fca:	f000 ba21 	b.w	8022410 <_close_r>

08021fce <strncat>:
 8021fce:	b530      	push	{r4, r5, lr}
 8021fd0:	4604      	mov	r4, r0
 8021fd2:	7825      	ldrb	r5, [r4, #0]
 8021fd4:	4623      	mov	r3, r4
 8021fd6:	3401      	adds	r4, #1
 8021fd8:	2d00      	cmp	r5, #0
 8021fda:	d1fa      	bne.n	8021fd2 <strncat+0x4>
 8021fdc:	3a01      	subs	r2, #1
 8021fde:	d304      	bcc.n	8021fea <strncat+0x1c>
 8021fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021fe4:	f803 4b01 	strb.w	r4, [r3], #1
 8021fe8:	b904      	cbnz	r4, 8021fec <strncat+0x1e>
 8021fea:	bd30      	pop	{r4, r5, pc}
 8021fec:	2a00      	cmp	r2, #0
 8021fee:	d1f5      	bne.n	8021fdc <strncat+0xe>
 8021ff0:	701a      	strb	r2, [r3, #0]
 8021ff2:	e7f3      	b.n	8021fdc <strncat+0xe>

08021ff4 <strncmp>:
 8021ff4:	b510      	push	{r4, lr}
 8021ff6:	b16a      	cbz	r2, 8022014 <strncmp+0x20>
 8021ff8:	3901      	subs	r1, #1
 8021ffa:	1884      	adds	r4, r0, r2
 8021ffc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022000:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022004:	4293      	cmp	r3, r2
 8022006:	d103      	bne.n	8022010 <strncmp+0x1c>
 8022008:	42a0      	cmp	r0, r4
 802200a:	d001      	beq.n	8022010 <strncmp+0x1c>
 802200c:	2b00      	cmp	r3, #0
 802200e:	d1f5      	bne.n	8021ffc <strncmp+0x8>
 8022010:	1a98      	subs	r0, r3, r2
 8022012:	bd10      	pop	{r4, pc}
 8022014:	4610      	mov	r0, r2
 8022016:	e7fc      	b.n	8022012 <strncmp+0x1e>

08022018 <strncpy>:
 8022018:	b510      	push	{r4, lr}
 802201a:	3901      	subs	r1, #1
 802201c:	4603      	mov	r3, r0
 802201e:	b132      	cbz	r2, 802202e <strncpy+0x16>
 8022020:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022024:	f803 4b01 	strb.w	r4, [r3], #1
 8022028:	3a01      	subs	r2, #1
 802202a:	2c00      	cmp	r4, #0
 802202c:	d1f7      	bne.n	802201e <strncpy+0x6>
 802202e:	441a      	add	r2, r3
 8022030:	2100      	movs	r1, #0
 8022032:	4293      	cmp	r3, r2
 8022034:	d100      	bne.n	8022038 <strncpy+0x20>
 8022036:	bd10      	pop	{r4, pc}
 8022038:	f803 1b01 	strb.w	r1, [r3], #1
 802203c:	e7f9      	b.n	8022032 <strncpy+0x1a>

0802203e <strstr>:
 802203e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022040:	780c      	ldrb	r4, [r1, #0]
 8022042:	b164      	cbz	r4, 802205e <strstr+0x20>
 8022044:	4603      	mov	r3, r0
 8022046:	781a      	ldrb	r2, [r3, #0]
 8022048:	4618      	mov	r0, r3
 802204a:	1c5e      	adds	r6, r3, #1
 802204c:	b90a      	cbnz	r2, 8022052 <strstr+0x14>
 802204e:	4610      	mov	r0, r2
 8022050:	e005      	b.n	802205e <strstr+0x20>
 8022052:	4294      	cmp	r4, r2
 8022054:	d108      	bne.n	8022068 <strstr+0x2a>
 8022056:	460d      	mov	r5, r1
 8022058:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802205c:	b902      	cbnz	r2, 8022060 <strstr+0x22>
 802205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022060:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8022064:	4297      	cmp	r7, r2
 8022066:	d0f7      	beq.n	8022058 <strstr+0x1a>
 8022068:	4633      	mov	r3, r6
 802206a:	e7ec      	b.n	8022046 <strstr+0x8>

0802206c <strtok>:
 802206c:	4b16      	ldr	r3, [pc, #88]	; (80220c8 <strtok+0x5c>)
 802206e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022070:	681e      	ldr	r6, [r3, #0]
 8022072:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8022074:	4605      	mov	r5, r0
 8022076:	b9fc      	cbnz	r4, 80220b8 <strtok+0x4c>
 8022078:	2050      	movs	r0, #80	; 0x50
 802207a:	9101      	str	r1, [sp, #4]
 802207c:	f7ff f838 	bl	80210f0 <malloc>
 8022080:	9901      	ldr	r1, [sp, #4]
 8022082:	65b0      	str	r0, [r6, #88]	; 0x58
 8022084:	4602      	mov	r2, r0
 8022086:	b920      	cbnz	r0, 8022092 <strtok+0x26>
 8022088:	4b10      	ldr	r3, [pc, #64]	; (80220cc <strtok+0x60>)
 802208a:	4811      	ldr	r0, [pc, #68]	; (80220d0 <strtok+0x64>)
 802208c:	2157      	movs	r1, #87	; 0x57
 802208e:	f000 f9a1 	bl	80223d4 <__assert_func>
 8022092:	e9c0 4400 	strd	r4, r4, [r0]
 8022096:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802209a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802209e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80220a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80220a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80220aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80220ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80220b2:	6184      	str	r4, [r0, #24]
 80220b4:	7704      	strb	r4, [r0, #28]
 80220b6:	6244      	str	r4, [r0, #36]	; 0x24
 80220b8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80220ba:	2301      	movs	r3, #1
 80220bc:	4628      	mov	r0, r5
 80220be:	b002      	add	sp, #8
 80220c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220c4:	f000 b806 	b.w	80220d4 <__strtok_r>
 80220c8:	20000074 	.word	0x20000074
 80220cc:	08029b76 	.word	0x08029b76
 80220d0:	08029bec 	.word	0x08029bec

080220d4 <__strtok_r>:
 80220d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220d6:	b908      	cbnz	r0, 80220dc <__strtok_r+0x8>
 80220d8:	6810      	ldr	r0, [r2, #0]
 80220da:	b188      	cbz	r0, 8022100 <__strtok_r+0x2c>
 80220dc:	4604      	mov	r4, r0
 80220de:	4620      	mov	r0, r4
 80220e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80220e4:	460f      	mov	r7, r1
 80220e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80220ea:	b91e      	cbnz	r6, 80220f4 <__strtok_r+0x20>
 80220ec:	b965      	cbnz	r5, 8022108 <__strtok_r+0x34>
 80220ee:	6015      	str	r5, [r2, #0]
 80220f0:	4628      	mov	r0, r5
 80220f2:	e005      	b.n	8022100 <__strtok_r+0x2c>
 80220f4:	42b5      	cmp	r5, r6
 80220f6:	d1f6      	bne.n	80220e6 <__strtok_r+0x12>
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d1f0      	bne.n	80220de <__strtok_r+0xa>
 80220fc:	6014      	str	r4, [r2, #0]
 80220fe:	7003      	strb	r3, [r0, #0]
 8022100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022102:	461c      	mov	r4, r3
 8022104:	e00c      	b.n	8022120 <__strtok_r+0x4c>
 8022106:	b915      	cbnz	r5, 802210e <__strtok_r+0x3a>
 8022108:	f814 3b01 	ldrb.w	r3, [r4], #1
 802210c:	460e      	mov	r6, r1
 802210e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8022112:	42ab      	cmp	r3, r5
 8022114:	d1f7      	bne.n	8022106 <__strtok_r+0x32>
 8022116:	2b00      	cmp	r3, #0
 8022118:	d0f3      	beq.n	8022102 <__strtok_r+0x2e>
 802211a:	2300      	movs	r3, #0
 802211c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8022120:	6014      	str	r4, [r2, #0]
 8022122:	e7ed      	b.n	8022100 <__strtok_r+0x2c>

08022124 <_strtol_l.isra.0>:
 8022124:	2b01      	cmp	r3, #1
 8022126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802212a:	d001      	beq.n	8022130 <_strtol_l.isra.0+0xc>
 802212c:	2b24      	cmp	r3, #36	; 0x24
 802212e:	d906      	bls.n	802213e <_strtol_l.isra.0+0x1a>
 8022130:	f000 fff6 	bl	8023120 <__errno>
 8022134:	2316      	movs	r3, #22
 8022136:	6003      	str	r3, [r0, #0]
 8022138:	2000      	movs	r0, #0
 802213a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802213e:	4f3a      	ldr	r7, [pc, #232]	; (8022228 <_strtol_l.isra.0+0x104>)
 8022140:	468e      	mov	lr, r1
 8022142:	4676      	mov	r6, lr
 8022144:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022148:	5de5      	ldrb	r5, [r4, r7]
 802214a:	f015 0508 	ands.w	r5, r5, #8
 802214e:	d1f8      	bne.n	8022142 <_strtol_l.isra.0+0x1e>
 8022150:	2c2d      	cmp	r4, #45	; 0x2d
 8022152:	d134      	bne.n	80221be <_strtol_l.isra.0+0x9a>
 8022154:	f89e 4000 	ldrb.w	r4, [lr]
 8022158:	f04f 0801 	mov.w	r8, #1
 802215c:	f106 0e02 	add.w	lr, r6, #2
 8022160:	2b00      	cmp	r3, #0
 8022162:	d05c      	beq.n	802221e <_strtol_l.isra.0+0xfa>
 8022164:	2b10      	cmp	r3, #16
 8022166:	d10c      	bne.n	8022182 <_strtol_l.isra.0+0x5e>
 8022168:	2c30      	cmp	r4, #48	; 0x30
 802216a:	d10a      	bne.n	8022182 <_strtol_l.isra.0+0x5e>
 802216c:	f89e 4000 	ldrb.w	r4, [lr]
 8022170:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022174:	2c58      	cmp	r4, #88	; 0x58
 8022176:	d14d      	bne.n	8022214 <_strtol_l.isra.0+0xf0>
 8022178:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802217c:	2310      	movs	r3, #16
 802217e:	f10e 0e02 	add.w	lr, lr, #2
 8022182:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8022186:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 802218a:	2600      	movs	r6, #0
 802218c:	fbbc f9f3 	udiv	r9, ip, r3
 8022190:	4635      	mov	r5, r6
 8022192:	fb03 ca19 	mls	sl, r3, r9, ip
 8022196:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802219a:	2f09      	cmp	r7, #9
 802219c:	d818      	bhi.n	80221d0 <_strtol_l.isra.0+0xac>
 802219e:	463c      	mov	r4, r7
 80221a0:	42a3      	cmp	r3, r4
 80221a2:	dd24      	ble.n	80221ee <_strtol_l.isra.0+0xca>
 80221a4:	2e00      	cmp	r6, #0
 80221a6:	db1f      	blt.n	80221e8 <_strtol_l.isra.0+0xc4>
 80221a8:	45a9      	cmp	r9, r5
 80221aa:	d31d      	bcc.n	80221e8 <_strtol_l.isra.0+0xc4>
 80221ac:	d101      	bne.n	80221b2 <_strtol_l.isra.0+0x8e>
 80221ae:	45a2      	cmp	sl, r4
 80221b0:	db1a      	blt.n	80221e8 <_strtol_l.isra.0+0xc4>
 80221b2:	fb05 4503 	mla	r5, r5, r3, r4
 80221b6:	2601      	movs	r6, #1
 80221b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80221bc:	e7eb      	b.n	8022196 <_strtol_l.isra.0+0x72>
 80221be:	2c2b      	cmp	r4, #43	; 0x2b
 80221c0:	bf08      	it	eq
 80221c2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80221c6:	46a8      	mov	r8, r5
 80221c8:	bf08      	it	eq
 80221ca:	f106 0e02 	addeq.w	lr, r6, #2
 80221ce:	e7c7      	b.n	8022160 <_strtol_l.isra.0+0x3c>
 80221d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80221d4:	2f19      	cmp	r7, #25
 80221d6:	d801      	bhi.n	80221dc <_strtol_l.isra.0+0xb8>
 80221d8:	3c37      	subs	r4, #55	; 0x37
 80221da:	e7e1      	b.n	80221a0 <_strtol_l.isra.0+0x7c>
 80221dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80221e0:	2f19      	cmp	r7, #25
 80221e2:	d804      	bhi.n	80221ee <_strtol_l.isra.0+0xca>
 80221e4:	3c57      	subs	r4, #87	; 0x57
 80221e6:	e7db      	b.n	80221a0 <_strtol_l.isra.0+0x7c>
 80221e8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80221ec:	e7e4      	b.n	80221b8 <_strtol_l.isra.0+0x94>
 80221ee:	2e00      	cmp	r6, #0
 80221f0:	da05      	bge.n	80221fe <_strtol_l.isra.0+0xda>
 80221f2:	2322      	movs	r3, #34	; 0x22
 80221f4:	6003      	str	r3, [r0, #0]
 80221f6:	4665      	mov	r5, ip
 80221f8:	b942      	cbnz	r2, 802220c <_strtol_l.isra.0+0xe8>
 80221fa:	4628      	mov	r0, r5
 80221fc:	e79d      	b.n	802213a <_strtol_l.isra.0+0x16>
 80221fe:	f1b8 0f00 	cmp.w	r8, #0
 8022202:	d000      	beq.n	8022206 <_strtol_l.isra.0+0xe2>
 8022204:	426d      	negs	r5, r5
 8022206:	2a00      	cmp	r2, #0
 8022208:	d0f7      	beq.n	80221fa <_strtol_l.isra.0+0xd6>
 802220a:	b10e      	cbz	r6, 8022210 <_strtol_l.isra.0+0xec>
 802220c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8022210:	6011      	str	r1, [r2, #0]
 8022212:	e7f2      	b.n	80221fa <_strtol_l.isra.0+0xd6>
 8022214:	2430      	movs	r4, #48	; 0x30
 8022216:	2b00      	cmp	r3, #0
 8022218:	d1b3      	bne.n	8022182 <_strtol_l.isra.0+0x5e>
 802221a:	2308      	movs	r3, #8
 802221c:	e7b1      	b.n	8022182 <_strtol_l.isra.0+0x5e>
 802221e:	2c30      	cmp	r4, #48	; 0x30
 8022220:	d0a4      	beq.n	802216c <_strtol_l.isra.0+0x48>
 8022222:	230a      	movs	r3, #10
 8022224:	e7ad      	b.n	8022182 <_strtol_l.isra.0+0x5e>
 8022226:	bf00      	nop
 8022228:	080299dd 	.word	0x080299dd

0802222c <_strtol_r>:
 802222c:	f7ff bf7a 	b.w	8022124 <_strtol_l.isra.0>

08022230 <__swbuf_r>:
 8022230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022232:	460e      	mov	r6, r1
 8022234:	4614      	mov	r4, r2
 8022236:	4605      	mov	r5, r0
 8022238:	b118      	cbz	r0, 8022242 <__swbuf_r+0x12>
 802223a:	6983      	ldr	r3, [r0, #24]
 802223c:	b90b      	cbnz	r3, 8022242 <__swbuf_r+0x12>
 802223e:	f7fe fe91 	bl	8020f64 <__sinit>
 8022242:	4b21      	ldr	r3, [pc, #132]	; (80222c8 <__swbuf_r+0x98>)
 8022244:	429c      	cmp	r4, r3
 8022246:	d12b      	bne.n	80222a0 <__swbuf_r+0x70>
 8022248:	686c      	ldr	r4, [r5, #4]
 802224a:	69a3      	ldr	r3, [r4, #24]
 802224c:	60a3      	str	r3, [r4, #8]
 802224e:	89a3      	ldrh	r3, [r4, #12]
 8022250:	071a      	lsls	r2, r3, #28
 8022252:	d52f      	bpl.n	80222b4 <__swbuf_r+0x84>
 8022254:	6923      	ldr	r3, [r4, #16]
 8022256:	b36b      	cbz	r3, 80222b4 <__swbuf_r+0x84>
 8022258:	6923      	ldr	r3, [r4, #16]
 802225a:	6820      	ldr	r0, [r4, #0]
 802225c:	1ac0      	subs	r0, r0, r3
 802225e:	6963      	ldr	r3, [r4, #20]
 8022260:	b2f6      	uxtb	r6, r6
 8022262:	4283      	cmp	r3, r0
 8022264:	4637      	mov	r7, r6
 8022266:	dc04      	bgt.n	8022272 <__swbuf_r+0x42>
 8022268:	4621      	mov	r1, r4
 802226a:	4628      	mov	r0, r5
 802226c:	f000 ffe4 	bl	8023238 <_fflush_r>
 8022270:	bb30      	cbnz	r0, 80222c0 <__swbuf_r+0x90>
 8022272:	68a3      	ldr	r3, [r4, #8]
 8022274:	3b01      	subs	r3, #1
 8022276:	60a3      	str	r3, [r4, #8]
 8022278:	6823      	ldr	r3, [r4, #0]
 802227a:	1c5a      	adds	r2, r3, #1
 802227c:	6022      	str	r2, [r4, #0]
 802227e:	701e      	strb	r6, [r3, #0]
 8022280:	6963      	ldr	r3, [r4, #20]
 8022282:	3001      	adds	r0, #1
 8022284:	4283      	cmp	r3, r0
 8022286:	d004      	beq.n	8022292 <__swbuf_r+0x62>
 8022288:	89a3      	ldrh	r3, [r4, #12]
 802228a:	07db      	lsls	r3, r3, #31
 802228c:	d506      	bpl.n	802229c <__swbuf_r+0x6c>
 802228e:	2e0a      	cmp	r6, #10
 8022290:	d104      	bne.n	802229c <__swbuf_r+0x6c>
 8022292:	4621      	mov	r1, r4
 8022294:	4628      	mov	r0, r5
 8022296:	f000 ffcf 	bl	8023238 <_fflush_r>
 802229a:	b988      	cbnz	r0, 80222c0 <__swbuf_r+0x90>
 802229c:	4638      	mov	r0, r7
 802229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222a0:	4b0a      	ldr	r3, [pc, #40]	; (80222cc <__swbuf_r+0x9c>)
 80222a2:	429c      	cmp	r4, r3
 80222a4:	d101      	bne.n	80222aa <__swbuf_r+0x7a>
 80222a6:	68ac      	ldr	r4, [r5, #8]
 80222a8:	e7cf      	b.n	802224a <__swbuf_r+0x1a>
 80222aa:	4b09      	ldr	r3, [pc, #36]	; (80222d0 <__swbuf_r+0xa0>)
 80222ac:	429c      	cmp	r4, r3
 80222ae:	bf08      	it	eq
 80222b0:	68ec      	ldreq	r4, [r5, #12]
 80222b2:	e7ca      	b.n	802224a <__swbuf_r+0x1a>
 80222b4:	4621      	mov	r1, r4
 80222b6:	4628      	mov	r0, r5
 80222b8:	f000 f81e 	bl	80222f8 <__swsetup_r>
 80222bc:	2800      	cmp	r0, #0
 80222be:	d0cb      	beq.n	8022258 <__swbuf_r+0x28>
 80222c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80222c4:	e7ea      	b.n	802229c <__swbuf_r+0x6c>
 80222c6:	bf00      	nop
 80222c8:	08029b00 	.word	0x08029b00
 80222cc:	08029b20 	.word	0x08029b20
 80222d0:	08029ae0 	.word	0x08029ae0

080222d4 <_write_r>:
 80222d4:	b538      	push	{r3, r4, r5, lr}
 80222d6:	4d07      	ldr	r5, [pc, #28]	; (80222f4 <_write_r+0x20>)
 80222d8:	4604      	mov	r4, r0
 80222da:	4608      	mov	r0, r1
 80222dc:	4611      	mov	r1, r2
 80222de:	2200      	movs	r2, #0
 80222e0:	602a      	str	r2, [r5, #0]
 80222e2:	461a      	mov	r2, r3
 80222e4:	f7e0 fb6f 	bl	80029c6 <_write>
 80222e8:	1c43      	adds	r3, r0, #1
 80222ea:	d102      	bne.n	80222f2 <_write_r+0x1e>
 80222ec:	682b      	ldr	r3, [r5, #0]
 80222ee:	b103      	cbz	r3, 80222f2 <_write_r+0x1e>
 80222f0:	6023      	str	r3, [r4, #0]
 80222f2:	bd38      	pop	{r3, r4, r5, pc}
 80222f4:	2001b1d8 	.word	0x2001b1d8

080222f8 <__swsetup_r>:
 80222f8:	4b32      	ldr	r3, [pc, #200]	; (80223c4 <__swsetup_r+0xcc>)
 80222fa:	b570      	push	{r4, r5, r6, lr}
 80222fc:	681d      	ldr	r5, [r3, #0]
 80222fe:	4606      	mov	r6, r0
 8022300:	460c      	mov	r4, r1
 8022302:	b125      	cbz	r5, 802230e <__swsetup_r+0x16>
 8022304:	69ab      	ldr	r3, [r5, #24]
 8022306:	b913      	cbnz	r3, 802230e <__swsetup_r+0x16>
 8022308:	4628      	mov	r0, r5
 802230a:	f7fe fe2b 	bl	8020f64 <__sinit>
 802230e:	4b2e      	ldr	r3, [pc, #184]	; (80223c8 <__swsetup_r+0xd0>)
 8022310:	429c      	cmp	r4, r3
 8022312:	d10f      	bne.n	8022334 <__swsetup_r+0x3c>
 8022314:	686c      	ldr	r4, [r5, #4]
 8022316:	89a3      	ldrh	r3, [r4, #12]
 8022318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802231c:	0719      	lsls	r1, r3, #28
 802231e:	d42c      	bmi.n	802237a <__swsetup_r+0x82>
 8022320:	06dd      	lsls	r5, r3, #27
 8022322:	d411      	bmi.n	8022348 <__swsetup_r+0x50>
 8022324:	2309      	movs	r3, #9
 8022326:	6033      	str	r3, [r6, #0]
 8022328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802232c:	81a3      	strh	r3, [r4, #12]
 802232e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022332:	e03e      	b.n	80223b2 <__swsetup_r+0xba>
 8022334:	4b25      	ldr	r3, [pc, #148]	; (80223cc <__swsetup_r+0xd4>)
 8022336:	429c      	cmp	r4, r3
 8022338:	d101      	bne.n	802233e <__swsetup_r+0x46>
 802233a:	68ac      	ldr	r4, [r5, #8]
 802233c:	e7eb      	b.n	8022316 <__swsetup_r+0x1e>
 802233e:	4b24      	ldr	r3, [pc, #144]	; (80223d0 <__swsetup_r+0xd8>)
 8022340:	429c      	cmp	r4, r3
 8022342:	bf08      	it	eq
 8022344:	68ec      	ldreq	r4, [r5, #12]
 8022346:	e7e6      	b.n	8022316 <__swsetup_r+0x1e>
 8022348:	0758      	lsls	r0, r3, #29
 802234a:	d512      	bpl.n	8022372 <__swsetup_r+0x7a>
 802234c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802234e:	b141      	cbz	r1, 8022362 <__swsetup_r+0x6a>
 8022350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022354:	4299      	cmp	r1, r3
 8022356:	d002      	beq.n	802235e <__swsetup_r+0x66>
 8022358:	4630      	mov	r0, r6
 802235a:	f7fe ff17 	bl	802118c <_free_r>
 802235e:	2300      	movs	r3, #0
 8022360:	6363      	str	r3, [r4, #52]	; 0x34
 8022362:	89a3      	ldrh	r3, [r4, #12]
 8022364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022368:	81a3      	strh	r3, [r4, #12]
 802236a:	2300      	movs	r3, #0
 802236c:	6063      	str	r3, [r4, #4]
 802236e:	6923      	ldr	r3, [r4, #16]
 8022370:	6023      	str	r3, [r4, #0]
 8022372:	89a3      	ldrh	r3, [r4, #12]
 8022374:	f043 0308 	orr.w	r3, r3, #8
 8022378:	81a3      	strh	r3, [r4, #12]
 802237a:	6923      	ldr	r3, [r4, #16]
 802237c:	b94b      	cbnz	r3, 8022392 <__swsetup_r+0x9a>
 802237e:	89a3      	ldrh	r3, [r4, #12]
 8022380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022388:	d003      	beq.n	8022392 <__swsetup_r+0x9a>
 802238a:	4621      	mov	r1, r4
 802238c:	4630      	mov	r0, r6
 802238e:	f000 ffdb 	bl	8023348 <__smakebuf_r>
 8022392:	89a0      	ldrh	r0, [r4, #12]
 8022394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022398:	f010 0301 	ands.w	r3, r0, #1
 802239c:	d00a      	beq.n	80223b4 <__swsetup_r+0xbc>
 802239e:	2300      	movs	r3, #0
 80223a0:	60a3      	str	r3, [r4, #8]
 80223a2:	6963      	ldr	r3, [r4, #20]
 80223a4:	425b      	negs	r3, r3
 80223a6:	61a3      	str	r3, [r4, #24]
 80223a8:	6923      	ldr	r3, [r4, #16]
 80223aa:	b943      	cbnz	r3, 80223be <__swsetup_r+0xc6>
 80223ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80223b0:	d1ba      	bne.n	8022328 <__swsetup_r+0x30>
 80223b2:	bd70      	pop	{r4, r5, r6, pc}
 80223b4:	0781      	lsls	r1, r0, #30
 80223b6:	bf58      	it	pl
 80223b8:	6963      	ldrpl	r3, [r4, #20]
 80223ba:	60a3      	str	r3, [r4, #8]
 80223bc:	e7f4      	b.n	80223a8 <__swsetup_r+0xb0>
 80223be:	2000      	movs	r0, #0
 80223c0:	e7f7      	b.n	80223b2 <__swsetup_r+0xba>
 80223c2:	bf00      	nop
 80223c4:	20000074 	.word	0x20000074
 80223c8:	08029b00 	.word	0x08029b00
 80223cc:	08029b20 	.word	0x08029b20
 80223d0:	08029ae0 	.word	0x08029ae0

080223d4 <__assert_func>:
 80223d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80223d6:	4614      	mov	r4, r2
 80223d8:	461a      	mov	r2, r3
 80223da:	4b09      	ldr	r3, [pc, #36]	; (8022400 <__assert_func+0x2c>)
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	4605      	mov	r5, r0
 80223e0:	68d8      	ldr	r0, [r3, #12]
 80223e2:	b14c      	cbz	r4, 80223f8 <__assert_func+0x24>
 80223e4:	4b07      	ldr	r3, [pc, #28]	; (8022404 <__assert_func+0x30>)
 80223e6:	9100      	str	r1, [sp, #0]
 80223e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80223ec:	4906      	ldr	r1, [pc, #24]	; (8022408 <__assert_func+0x34>)
 80223ee:	462b      	mov	r3, r5
 80223f0:	f000 ff5e 	bl	80232b0 <fiprintf>
 80223f4:	f002 fa58 	bl	80248a8 <abort>
 80223f8:	4b04      	ldr	r3, [pc, #16]	; (802240c <__assert_func+0x38>)
 80223fa:	461c      	mov	r4, r3
 80223fc:	e7f3      	b.n	80223e6 <__assert_func+0x12>
 80223fe:	bf00      	nop
 8022400:	20000074 	.word	0x20000074
 8022404:	08029c4d 	.word	0x08029c4d
 8022408:	08029c5a 	.word	0x08029c5a
 802240c:	08029c88 	.word	0x08029c88

08022410 <_close_r>:
 8022410:	b538      	push	{r3, r4, r5, lr}
 8022412:	4d06      	ldr	r5, [pc, #24]	; (802242c <_close_r+0x1c>)
 8022414:	2300      	movs	r3, #0
 8022416:	4604      	mov	r4, r0
 8022418:	4608      	mov	r0, r1
 802241a:	602b      	str	r3, [r5, #0]
 802241c:	f7e0 faef 	bl	80029fe <_close>
 8022420:	1c43      	adds	r3, r0, #1
 8022422:	d102      	bne.n	802242a <_close_r+0x1a>
 8022424:	682b      	ldr	r3, [r5, #0]
 8022426:	b103      	cbz	r3, 802242a <_close_r+0x1a>
 8022428:	6023      	str	r3, [r4, #0]
 802242a:	bd38      	pop	{r3, r4, r5, pc}
 802242c:	2001b1d8 	.word	0x2001b1d8

08022430 <quorem>:
 8022430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022434:	6903      	ldr	r3, [r0, #16]
 8022436:	690c      	ldr	r4, [r1, #16]
 8022438:	42a3      	cmp	r3, r4
 802243a:	4607      	mov	r7, r0
 802243c:	f2c0 8081 	blt.w	8022542 <quorem+0x112>
 8022440:	3c01      	subs	r4, #1
 8022442:	f101 0814 	add.w	r8, r1, #20
 8022446:	f100 0514 	add.w	r5, r0, #20
 802244a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802244e:	9301      	str	r3, [sp, #4]
 8022450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022458:	3301      	adds	r3, #1
 802245a:	429a      	cmp	r2, r3
 802245c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022464:	fbb2 f6f3 	udiv	r6, r2, r3
 8022468:	d331      	bcc.n	80224ce <quorem+0x9e>
 802246a:	f04f 0e00 	mov.w	lr, #0
 802246e:	4640      	mov	r0, r8
 8022470:	46ac      	mov	ip, r5
 8022472:	46f2      	mov	sl, lr
 8022474:	f850 2b04 	ldr.w	r2, [r0], #4
 8022478:	b293      	uxth	r3, r2
 802247a:	fb06 e303 	mla	r3, r6, r3, lr
 802247e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8022482:	b29b      	uxth	r3, r3
 8022484:	ebaa 0303 	sub.w	r3, sl, r3
 8022488:	0c12      	lsrs	r2, r2, #16
 802248a:	f8dc a000 	ldr.w	sl, [ip]
 802248e:	fb06 e202 	mla	r2, r6, r2, lr
 8022492:	fa13 f38a 	uxtah	r3, r3, sl
 8022496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802249a:	fa1f fa82 	uxth.w	sl, r2
 802249e:	f8dc 2000 	ldr.w	r2, [ip]
 80224a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80224a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80224aa:	b29b      	uxth	r3, r3
 80224ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80224b0:	4581      	cmp	r9, r0
 80224b2:	f84c 3b04 	str.w	r3, [ip], #4
 80224b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80224ba:	d2db      	bcs.n	8022474 <quorem+0x44>
 80224bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80224c0:	b92b      	cbnz	r3, 80224ce <quorem+0x9e>
 80224c2:	9b01      	ldr	r3, [sp, #4]
 80224c4:	3b04      	subs	r3, #4
 80224c6:	429d      	cmp	r5, r3
 80224c8:	461a      	mov	r2, r3
 80224ca:	d32e      	bcc.n	802252a <quorem+0xfa>
 80224cc:	613c      	str	r4, [r7, #16]
 80224ce:	4638      	mov	r0, r7
 80224d0:	f001 fa04 	bl	80238dc <__mcmp>
 80224d4:	2800      	cmp	r0, #0
 80224d6:	db24      	blt.n	8022522 <quorem+0xf2>
 80224d8:	3601      	adds	r6, #1
 80224da:	4628      	mov	r0, r5
 80224dc:	f04f 0c00 	mov.w	ip, #0
 80224e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80224e4:	f8d0 e000 	ldr.w	lr, [r0]
 80224e8:	b293      	uxth	r3, r2
 80224ea:	ebac 0303 	sub.w	r3, ip, r3
 80224ee:	0c12      	lsrs	r2, r2, #16
 80224f0:	fa13 f38e 	uxtah	r3, r3, lr
 80224f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80224f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80224fc:	b29b      	uxth	r3, r3
 80224fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022502:	45c1      	cmp	r9, r8
 8022504:	f840 3b04 	str.w	r3, [r0], #4
 8022508:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802250c:	d2e8      	bcs.n	80224e0 <quorem+0xb0>
 802250e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022516:	b922      	cbnz	r2, 8022522 <quorem+0xf2>
 8022518:	3b04      	subs	r3, #4
 802251a:	429d      	cmp	r5, r3
 802251c:	461a      	mov	r2, r3
 802251e:	d30a      	bcc.n	8022536 <quorem+0x106>
 8022520:	613c      	str	r4, [r7, #16]
 8022522:	4630      	mov	r0, r6
 8022524:	b003      	add	sp, #12
 8022526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802252a:	6812      	ldr	r2, [r2, #0]
 802252c:	3b04      	subs	r3, #4
 802252e:	2a00      	cmp	r2, #0
 8022530:	d1cc      	bne.n	80224cc <quorem+0x9c>
 8022532:	3c01      	subs	r4, #1
 8022534:	e7c7      	b.n	80224c6 <quorem+0x96>
 8022536:	6812      	ldr	r2, [r2, #0]
 8022538:	3b04      	subs	r3, #4
 802253a:	2a00      	cmp	r2, #0
 802253c:	d1f0      	bne.n	8022520 <quorem+0xf0>
 802253e:	3c01      	subs	r4, #1
 8022540:	e7eb      	b.n	802251a <quorem+0xea>
 8022542:	2000      	movs	r0, #0
 8022544:	e7ee      	b.n	8022524 <quorem+0xf4>
	...

08022548 <_dtoa_r>:
 8022548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802254c:	ed2d 8b02 	vpush	{d8}
 8022550:	ec57 6b10 	vmov	r6, r7, d0
 8022554:	b095      	sub	sp, #84	; 0x54
 8022556:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022558:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802255c:	9105      	str	r1, [sp, #20]
 802255e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8022562:	4604      	mov	r4, r0
 8022564:	9209      	str	r2, [sp, #36]	; 0x24
 8022566:	930f      	str	r3, [sp, #60]	; 0x3c
 8022568:	b975      	cbnz	r5, 8022588 <_dtoa_r+0x40>
 802256a:	2010      	movs	r0, #16
 802256c:	f7fe fdc0 	bl	80210f0 <malloc>
 8022570:	4602      	mov	r2, r0
 8022572:	6260      	str	r0, [r4, #36]	; 0x24
 8022574:	b920      	cbnz	r0, 8022580 <_dtoa_r+0x38>
 8022576:	4bb2      	ldr	r3, [pc, #712]	; (8022840 <_dtoa_r+0x2f8>)
 8022578:	21ea      	movs	r1, #234	; 0xea
 802257a:	48b2      	ldr	r0, [pc, #712]	; (8022844 <_dtoa_r+0x2fc>)
 802257c:	f7ff ff2a 	bl	80223d4 <__assert_func>
 8022580:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8022584:	6005      	str	r5, [r0, #0]
 8022586:	60c5      	str	r5, [r0, #12]
 8022588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802258a:	6819      	ldr	r1, [r3, #0]
 802258c:	b151      	cbz	r1, 80225a4 <_dtoa_r+0x5c>
 802258e:	685a      	ldr	r2, [r3, #4]
 8022590:	604a      	str	r2, [r1, #4]
 8022592:	2301      	movs	r3, #1
 8022594:	4093      	lsls	r3, r2
 8022596:	608b      	str	r3, [r1, #8]
 8022598:	4620      	mov	r0, r4
 802259a:	f000 ff61 	bl	8023460 <_Bfree>
 802259e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80225a0:	2200      	movs	r2, #0
 80225a2:	601a      	str	r2, [r3, #0]
 80225a4:	1e3b      	subs	r3, r7, #0
 80225a6:	bfb9      	ittee	lt
 80225a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80225ac:	9303      	strlt	r3, [sp, #12]
 80225ae:	2300      	movge	r3, #0
 80225b0:	f8c8 3000 	strge.w	r3, [r8]
 80225b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80225b8:	4ba3      	ldr	r3, [pc, #652]	; (8022848 <_dtoa_r+0x300>)
 80225ba:	bfbc      	itt	lt
 80225bc:	2201      	movlt	r2, #1
 80225be:	f8c8 2000 	strlt.w	r2, [r8]
 80225c2:	ea33 0309 	bics.w	r3, r3, r9
 80225c6:	d11b      	bne.n	8022600 <_dtoa_r+0xb8>
 80225c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80225ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80225ce:	6013      	str	r3, [r2, #0]
 80225d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80225d4:	4333      	orrs	r3, r6
 80225d6:	f000 857a 	beq.w	80230ce <_dtoa_r+0xb86>
 80225da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80225dc:	b963      	cbnz	r3, 80225f8 <_dtoa_r+0xb0>
 80225de:	4b9b      	ldr	r3, [pc, #620]	; (802284c <_dtoa_r+0x304>)
 80225e0:	e024      	b.n	802262c <_dtoa_r+0xe4>
 80225e2:	4b9b      	ldr	r3, [pc, #620]	; (8022850 <_dtoa_r+0x308>)
 80225e4:	9300      	str	r3, [sp, #0]
 80225e6:	3308      	adds	r3, #8
 80225e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80225ea:	6013      	str	r3, [r2, #0]
 80225ec:	9800      	ldr	r0, [sp, #0]
 80225ee:	b015      	add	sp, #84	; 0x54
 80225f0:	ecbd 8b02 	vpop	{d8}
 80225f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225f8:	4b94      	ldr	r3, [pc, #592]	; (802284c <_dtoa_r+0x304>)
 80225fa:	9300      	str	r3, [sp, #0]
 80225fc:	3303      	adds	r3, #3
 80225fe:	e7f3      	b.n	80225e8 <_dtoa_r+0xa0>
 8022600:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022604:	2200      	movs	r2, #0
 8022606:	ec51 0b17 	vmov	r0, r1, d7
 802260a:	2300      	movs	r3, #0
 802260c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8022610:	f7de fa6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8022614:	4680      	mov	r8, r0
 8022616:	b158      	cbz	r0, 8022630 <_dtoa_r+0xe8>
 8022618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802261a:	2301      	movs	r3, #1
 802261c:	6013      	str	r3, [r2, #0]
 802261e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022620:	2b00      	cmp	r3, #0
 8022622:	f000 8551 	beq.w	80230c8 <_dtoa_r+0xb80>
 8022626:	488b      	ldr	r0, [pc, #556]	; (8022854 <_dtoa_r+0x30c>)
 8022628:	6018      	str	r0, [r3, #0]
 802262a:	1e43      	subs	r3, r0, #1
 802262c:	9300      	str	r3, [sp, #0]
 802262e:	e7dd      	b.n	80225ec <_dtoa_r+0xa4>
 8022630:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8022634:	aa12      	add	r2, sp, #72	; 0x48
 8022636:	a913      	add	r1, sp, #76	; 0x4c
 8022638:	4620      	mov	r0, r4
 802263a:	f001 f9f3 	bl	8023a24 <__d2b>
 802263e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022642:	4683      	mov	fp, r0
 8022644:	2d00      	cmp	r5, #0
 8022646:	d07c      	beq.n	8022742 <_dtoa_r+0x1fa>
 8022648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802264a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802264e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022652:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8022656:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802265a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802265e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8022662:	4b7d      	ldr	r3, [pc, #500]	; (8022858 <_dtoa_r+0x310>)
 8022664:	2200      	movs	r2, #0
 8022666:	4630      	mov	r0, r6
 8022668:	4639      	mov	r1, r7
 802266a:	f7dd fe1d 	bl	80002a8 <__aeabi_dsub>
 802266e:	a36e      	add	r3, pc, #440	; (adr r3, 8022828 <_dtoa_r+0x2e0>)
 8022670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022674:	f7dd ffd0 	bl	8000618 <__aeabi_dmul>
 8022678:	a36d      	add	r3, pc, #436	; (adr r3, 8022830 <_dtoa_r+0x2e8>)
 802267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802267e:	f7dd fe15 	bl	80002ac <__adddf3>
 8022682:	4606      	mov	r6, r0
 8022684:	4628      	mov	r0, r5
 8022686:	460f      	mov	r7, r1
 8022688:	f7dd ff5c 	bl	8000544 <__aeabi_i2d>
 802268c:	a36a      	add	r3, pc, #424	; (adr r3, 8022838 <_dtoa_r+0x2f0>)
 802268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022692:	f7dd ffc1 	bl	8000618 <__aeabi_dmul>
 8022696:	4602      	mov	r2, r0
 8022698:	460b      	mov	r3, r1
 802269a:	4630      	mov	r0, r6
 802269c:	4639      	mov	r1, r7
 802269e:	f7dd fe05 	bl	80002ac <__adddf3>
 80226a2:	4606      	mov	r6, r0
 80226a4:	460f      	mov	r7, r1
 80226a6:	f7de fa67 	bl	8000b78 <__aeabi_d2iz>
 80226aa:	2200      	movs	r2, #0
 80226ac:	4682      	mov	sl, r0
 80226ae:	2300      	movs	r3, #0
 80226b0:	4630      	mov	r0, r6
 80226b2:	4639      	mov	r1, r7
 80226b4:	f7de fa22 	bl	8000afc <__aeabi_dcmplt>
 80226b8:	b148      	cbz	r0, 80226ce <_dtoa_r+0x186>
 80226ba:	4650      	mov	r0, sl
 80226bc:	f7dd ff42 	bl	8000544 <__aeabi_i2d>
 80226c0:	4632      	mov	r2, r6
 80226c2:	463b      	mov	r3, r7
 80226c4:	f7de fa10 	bl	8000ae8 <__aeabi_dcmpeq>
 80226c8:	b908      	cbnz	r0, 80226ce <_dtoa_r+0x186>
 80226ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80226ce:	f1ba 0f16 	cmp.w	sl, #22
 80226d2:	d854      	bhi.n	802277e <_dtoa_r+0x236>
 80226d4:	4b61      	ldr	r3, [pc, #388]	; (802285c <_dtoa_r+0x314>)
 80226d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80226da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80226e2:	f7de fa0b 	bl	8000afc <__aeabi_dcmplt>
 80226e6:	2800      	cmp	r0, #0
 80226e8:	d04b      	beq.n	8022782 <_dtoa_r+0x23a>
 80226ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80226ee:	2300      	movs	r3, #0
 80226f0:	930e      	str	r3, [sp, #56]	; 0x38
 80226f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80226f4:	1b5d      	subs	r5, r3, r5
 80226f6:	1e6b      	subs	r3, r5, #1
 80226f8:	9304      	str	r3, [sp, #16]
 80226fa:	bf43      	ittte	mi
 80226fc:	2300      	movmi	r3, #0
 80226fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8022702:	9304      	strmi	r3, [sp, #16]
 8022704:	f04f 0800 	movpl.w	r8, #0
 8022708:	f1ba 0f00 	cmp.w	sl, #0
 802270c:	db3b      	blt.n	8022786 <_dtoa_r+0x23e>
 802270e:	9b04      	ldr	r3, [sp, #16]
 8022710:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8022714:	4453      	add	r3, sl
 8022716:	9304      	str	r3, [sp, #16]
 8022718:	2300      	movs	r3, #0
 802271a:	9306      	str	r3, [sp, #24]
 802271c:	9b05      	ldr	r3, [sp, #20]
 802271e:	2b09      	cmp	r3, #9
 8022720:	d869      	bhi.n	80227f6 <_dtoa_r+0x2ae>
 8022722:	2b05      	cmp	r3, #5
 8022724:	bfc4      	itt	gt
 8022726:	3b04      	subgt	r3, #4
 8022728:	9305      	strgt	r3, [sp, #20]
 802272a:	9b05      	ldr	r3, [sp, #20]
 802272c:	f1a3 0302 	sub.w	r3, r3, #2
 8022730:	bfcc      	ite	gt
 8022732:	2500      	movgt	r5, #0
 8022734:	2501      	movle	r5, #1
 8022736:	2b03      	cmp	r3, #3
 8022738:	d869      	bhi.n	802280e <_dtoa_r+0x2c6>
 802273a:	e8df f003 	tbb	[pc, r3]
 802273e:	4e2c      	.short	0x4e2c
 8022740:	5a4c      	.short	0x5a4c
 8022742:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8022746:	441d      	add	r5, r3
 8022748:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802274c:	2b20      	cmp	r3, #32
 802274e:	bfc1      	itttt	gt
 8022750:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8022754:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8022758:	fa09 f303 	lslgt.w	r3, r9, r3
 802275c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8022760:	bfda      	itte	le
 8022762:	f1c3 0320 	rsble	r3, r3, #32
 8022766:	fa06 f003 	lslle.w	r0, r6, r3
 802276a:	4318      	orrgt	r0, r3
 802276c:	f7dd feda 	bl	8000524 <__aeabi_ui2d>
 8022770:	2301      	movs	r3, #1
 8022772:	4606      	mov	r6, r0
 8022774:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8022778:	3d01      	subs	r5, #1
 802277a:	9310      	str	r3, [sp, #64]	; 0x40
 802277c:	e771      	b.n	8022662 <_dtoa_r+0x11a>
 802277e:	2301      	movs	r3, #1
 8022780:	e7b6      	b.n	80226f0 <_dtoa_r+0x1a8>
 8022782:	900e      	str	r0, [sp, #56]	; 0x38
 8022784:	e7b5      	b.n	80226f2 <_dtoa_r+0x1aa>
 8022786:	f1ca 0300 	rsb	r3, sl, #0
 802278a:	9306      	str	r3, [sp, #24]
 802278c:	2300      	movs	r3, #0
 802278e:	eba8 080a 	sub.w	r8, r8, sl
 8022792:	930d      	str	r3, [sp, #52]	; 0x34
 8022794:	e7c2      	b.n	802271c <_dtoa_r+0x1d4>
 8022796:	2300      	movs	r3, #0
 8022798:	9308      	str	r3, [sp, #32]
 802279a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802279c:	2b00      	cmp	r3, #0
 802279e:	dc39      	bgt.n	8022814 <_dtoa_r+0x2cc>
 80227a0:	f04f 0901 	mov.w	r9, #1
 80227a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80227a8:	464b      	mov	r3, r9
 80227aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80227ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80227b0:	2200      	movs	r2, #0
 80227b2:	6042      	str	r2, [r0, #4]
 80227b4:	2204      	movs	r2, #4
 80227b6:	f102 0614 	add.w	r6, r2, #20
 80227ba:	429e      	cmp	r6, r3
 80227bc:	6841      	ldr	r1, [r0, #4]
 80227be:	d92f      	bls.n	8022820 <_dtoa_r+0x2d8>
 80227c0:	4620      	mov	r0, r4
 80227c2:	f000 fe0d 	bl	80233e0 <_Balloc>
 80227c6:	9000      	str	r0, [sp, #0]
 80227c8:	2800      	cmp	r0, #0
 80227ca:	d14b      	bne.n	8022864 <_dtoa_r+0x31c>
 80227cc:	4b24      	ldr	r3, [pc, #144]	; (8022860 <_dtoa_r+0x318>)
 80227ce:	4602      	mov	r2, r0
 80227d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80227d4:	e6d1      	b.n	802257a <_dtoa_r+0x32>
 80227d6:	2301      	movs	r3, #1
 80227d8:	e7de      	b.n	8022798 <_dtoa_r+0x250>
 80227da:	2300      	movs	r3, #0
 80227dc:	9308      	str	r3, [sp, #32]
 80227de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227e0:	eb0a 0903 	add.w	r9, sl, r3
 80227e4:	f109 0301 	add.w	r3, r9, #1
 80227e8:	2b01      	cmp	r3, #1
 80227ea:	9301      	str	r3, [sp, #4]
 80227ec:	bfb8      	it	lt
 80227ee:	2301      	movlt	r3, #1
 80227f0:	e7dd      	b.n	80227ae <_dtoa_r+0x266>
 80227f2:	2301      	movs	r3, #1
 80227f4:	e7f2      	b.n	80227dc <_dtoa_r+0x294>
 80227f6:	2501      	movs	r5, #1
 80227f8:	2300      	movs	r3, #0
 80227fa:	9305      	str	r3, [sp, #20]
 80227fc:	9508      	str	r5, [sp, #32]
 80227fe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8022802:	2200      	movs	r2, #0
 8022804:	f8cd 9004 	str.w	r9, [sp, #4]
 8022808:	2312      	movs	r3, #18
 802280a:	9209      	str	r2, [sp, #36]	; 0x24
 802280c:	e7cf      	b.n	80227ae <_dtoa_r+0x266>
 802280e:	2301      	movs	r3, #1
 8022810:	9308      	str	r3, [sp, #32]
 8022812:	e7f4      	b.n	80227fe <_dtoa_r+0x2b6>
 8022814:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022818:	f8cd 9004 	str.w	r9, [sp, #4]
 802281c:	464b      	mov	r3, r9
 802281e:	e7c6      	b.n	80227ae <_dtoa_r+0x266>
 8022820:	3101      	adds	r1, #1
 8022822:	6041      	str	r1, [r0, #4]
 8022824:	0052      	lsls	r2, r2, #1
 8022826:	e7c6      	b.n	80227b6 <_dtoa_r+0x26e>
 8022828:	636f4361 	.word	0x636f4361
 802282c:	3fd287a7 	.word	0x3fd287a7
 8022830:	8b60c8b3 	.word	0x8b60c8b3
 8022834:	3fc68a28 	.word	0x3fc68a28
 8022838:	509f79fb 	.word	0x509f79fb
 802283c:	3fd34413 	.word	0x3fd34413
 8022840:	08029b76 	.word	0x08029b76
 8022844:	08029c96 	.word	0x08029c96
 8022848:	7ff00000 	.word	0x7ff00000
 802284c:	08029c92 	.word	0x08029c92
 8022850:	08029c89 	.word	0x08029c89
 8022854:	08029e7a 	.word	0x08029e7a
 8022858:	3ff80000 	.word	0x3ff80000
 802285c:	08029d90 	.word	0x08029d90
 8022860:	08029cf5 	.word	0x08029cf5
 8022864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022866:	9a00      	ldr	r2, [sp, #0]
 8022868:	601a      	str	r2, [r3, #0]
 802286a:	9b01      	ldr	r3, [sp, #4]
 802286c:	2b0e      	cmp	r3, #14
 802286e:	f200 80ad 	bhi.w	80229cc <_dtoa_r+0x484>
 8022872:	2d00      	cmp	r5, #0
 8022874:	f000 80aa 	beq.w	80229cc <_dtoa_r+0x484>
 8022878:	f1ba 0f00 	cmp.w	sl, #0
 802287c:	dd36      	ble.n	80228ec <_dtoa_r+0x3a4>
 802287e:	4ac3      	ldr	r2, [pc, #780]	; (8022b8c <_dtoa_r+0x644>)
 8022880:	f00a 030f 	and.w	r3, sl, #15
 8022884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022888:	ed93 7b00 	vldr	d7, [r3]
 802288c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8022890:	ea4f 172a 	mov.w	r7, sl, asr #4
 8022894:	eeb0 8a47 	vmov.f32	s16, s14
 8022898:	eef0 8a67 	vmov.f32	s17, s15
 802289c:	d016      	beq.n	80228cc <_dtoa_r+0x384>
 802289e:	4bbc      	ldr	r3, [pc, #752]	; (8022b90 <_dtoa_r+0x648>)
 80228a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80228a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80228a8:	f7dd ffe0 	bl	800086c <__aeabi_ddiv>
 80228ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80228b0:	f007 070f 	and.w	r7, r7, #15
 80228b4:	2503      	movs	r5, #3
 80228b6:	4eb6      	ldr	r6, [pc, #728]	; (8022b90 <_dtoa_r+0x648>)
 80228b8:	b957      	cbnz	r7, 80228d0 <_dtoa_r+0x388>
 80228ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80228be:	ec53 2b18 	vmov	r2, r3, d8
 80228c2:	f7dd ffd3 	bl	800086c <__aeabi_ddiv>
 80228c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80228ca:	e029      	b.n	8022920 <_dtoa_r+0x3d8>
 80228cc:	2502      	movs	r5, #2
 80228ce:	e7f2      	b.n	80228b6 <_dtoa_r+0x36e>
 80228d0:	07f9      	lsls	r1, r7, #31
 80228d2:	d508      	bpl.n	80228e6 <_dtoa_r+0x39e>
 80228d4:	ec51 0b18 	vmov	r0, r1, d8
 80228d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80228dc:	f7dd fe9c 	bl	8000618 <__aeabi_dmul>
 80228e0:	ec41 0b18 	vmov	d8, r0, r1
 80228e4:	3501      	adds	r5, #1
 80228e6:	107f      	asrs	r7, r7, #1
 80228e8:	3608      	adds	r6, #8
 80228ea:	e7e5      	b.n	80228b8 <_dtoa_r+0x370>
 80228ec:	f000 80a6 	beq.w	8022a3c <_dtoa_r+0x4f4>
 80228f0:	f1ca 0600 	rsb	r6, sl, #0
 80228f4:	4ba5      	ldr	r3, [pc, #660]	; (8022b8c <_dtoa_r+0x644>)
 80228f6:	4fa6      	ldr	r7, [pc, #664]	; (8022b90 <_dtoa_r+0x648>)
 80228f8:	f006 020f 	and.w	r2, r6, #15
 80228fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022904:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8022908:	f7dd fe86 	bl	8000618 <__aeabi_dmul>
 802290c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022910:	1136      	asrs	r6, r6, #4
 8022912:	2300      	movs	r3, #0
 8022914:	2502      	movs	r5, #2
 8022916:	2e00      	cmp	r6, #0
 8022918:	f040 8085 	bne.w	8022a26 <_dtoa_r+0x4de>
 802291c:	2b00      	cmp	r3, #0
 802291e:	d1d2      	bne.n	80228c6 <_dtoa_r+0x37e>
 8022920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022922:	2b00      	cmp	r3, #0
 8022924:	f000 808c 	beq.w	8022a40 <_dtoa_r+0x4f8>
 8022928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802292c:	4b99      	ldr	r3, [pc, #612]	; (8022b94 <_dtoa_r+0x64c>)
 802292e:	2200      	movs	r2, #0
 8022930:	4630      	mov	r0, r6
 8022932:	4639      	mov	r1, r7
 8022934:	f7de f8e2 	bl	8000afc <__aeabi_dcmplt>
 8022938:	2800      	cmp	r0, #0
 802293a:	f000 8081 	beq.w	8022a40 <_dtoa_r+0x4f8>
 802293e:	9b01      	ldr	r3, [sp, #4]
 8022940:	2b00      	cmp	r3, #0
 8022942:	d07d      	beq.n	8022a40 <_dtoa_r+0x4f8>
 8022944:	f1b9 0f00 	cmp.w	r9, #0
 8022948:	dd3c      	ble.n	80229c4 <_dtoa_r+0x47c>
 802294a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802294e:	9307      	str	r3, [sp, #28]
 8022950:	2200      	movs	r2, #0
 8022952:	4b91      	ldr	r3, [pc, #580]	; (8022b98 <_dtoa_r+0x650>)
 8022954:	4630      	mov	r0, r6
 8022956:	4639      	mov	r1, r7
 8022958:	f7dd fe5e 	bl	8000618 <__aeabi_dmul>
 802295c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022960:	3501      	adds	r5, #1
 8022962:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8022966:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802296a:	4628      	mov	r0, r5
 802296c:	f7dd fdea 	bl	8000544 <__aeabi_i2d>
 8022970:	4632      	mov	r2, r6
 8022972:	463b      	mov	r3, r7
 8022974:	f7dd fe50 	bl	8000618 <__aeabi_dmul>
 8022978:	4b88      	ldr	r3, [pc, #544]	; (8022b9c <_dtoa_r+0x654>)
 802297a:	2200      	movs	r2, #0
 802297c:	f7dd fc96 	bl	80002ac <__adddf3>
 8022980:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8022984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022988:	9303      	str	r3, [sp, #12]
 802298a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802298c:	2b00      	cmp	r3, #0
 802298e:	d15c      	bne.n	8022a4a <_dtoa_r+0x502>
 8022990:	4b83      	ldr	r3, [pc, #524]	; (8022ba0 <_dtoa_r+0x658>)
 8022992:	2200      	movs	r2, #0
 8022994:	4630      	mov	r0, r6
 8022996:	4639      	mov	r1, r7
 8022998:	f7dd fc86 	bl	80002a8 <__aeabi_dsub>
 802299c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80229a0:	4606      	mov	r6, r0
 80229a2:	460f      	mov	r7, r1
 80229a4:	f7de f8c8 	bl	8000b38 <__aeabi_dcmpgt>
 80229a8:	2800      	cmp	r0, #0
 80229aa:	f040 8296 	bne.w	8022eda <_dtoa_r+0x992>
 80229ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80229b2:	4630      	mov	r0, r6
 80229b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80229b8:	4639      	mov	r1, r7
 80229ba:	f7de f89f 	bl	8000afc <__aeabi_dcmplt>
 80229be:	2800      	cmp	r0, #0
 80229c0:	f040 8288 	bne.w	8022ed4 <_dtoa_r+0x98c>
 80229c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80229c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80229cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	f2c0 8158 	blt.w	8022c84 <_dtoa_r+0x73c>
 80229d4:	f1ba 0f0e 	cmp.w	sl, #14
 80229d8:	f300 8154 	bgt.w	8022c84 <_dtoa_r+0x73c>
 80229dc:	4b6b      	ldr	r3, [pc, #428]	; (8022b8c <_dtoa_r+0x644>)
 80229de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80229e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80229e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	f280 80e3 	bge.w	8022bb4 <_dtoa_r+0x66c>
 80229ee:	9b01      	ldr	r3, [sp, #4]
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	f300 80df 	bgt.w	8022bb4 <_dtoa_r+0x66c>
 80229f6:	f040 826d 	bne.w	8022ed4 <_dtoa_r+0x98c>
 80229fa:	4b69      	ldr	r3, [pc, #420]	; (8022ba0 <_dtoa_r+0x658>)
 80229fc:	2200      	movs	r2, #0
 80229fe:	4640      	mov	r0, r8
 8022a00:	4649      	mov	r1, r9
 8022a02:	f7dd fe09 	bl	8000618 <__aeabi_dmul>
 8022a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022a0a:	f7de f88b 	bl	8000b24 <__aeabi_dcmpge>
 8022a0e:	9e01      	ldr	r6, [sp, #4]
 8022a10:	4637      	mov	r7, r6
 8022a12:	2800      	cmp	r0, #0
 8022a14:	f040 8243 	bne.w	8022e9e <_dtoa_r+0x956>
 8022a18:	9d00      	ldr	r5, [sp, #0]
 8022a1a:	2331      	movs	r3, #49	; 0x31
 8022a1c:	f805 3b01 	strb.w	r3, [r5], #1
 8022a20:	f10a 0a01 	add.w	sl, sl, #1
 8022a24:	e23f      	b.n	8022ea6 <_dtoa_r+0x95e>
 8022a26:	07f2      	lsls	r2, r6, #31
 8022a28:	d505      	bpl.n	8022a36 <_dtoa_r+0x4ee>
 8022a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022a2e:	f7dd fdf3 	bl	8000618 <__aeabi_dmul>
 8022a32:	3501      	adds	r5, #1
 8022a34:	2301      	movs	r3, #1
 8022a36:	1076      	asrs	r6, r6, #1
 8022a38:	3708      	adds	r7, #8
 8022a3a:	e76c      	b.n	8022916 <_dtoa_r+0x3ce>
 8022a3c:	2502      	movs	r5, #2
 8022a3e:	e76f      	b.n	8022920 <_dtoa_r+0x3d8>
 8022a40:	9b01      	ldr	r3, [sp, #4]
 8022a42:	f8cd a01c 	str.w	sl, [sp, #28]
 8022a46:	930c      	str	r3, [sp, #48]	; 0x30
 8022a48:	e78d      	b.n	8022966 <_dtoa_r+0x41e>
 8022a4a:	9900      	ldr	r1, [sp, #0]
 8022a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a50:	4b4e      	ldr	r3, [pc, #312]	; (8022b8c <_dtoa_r+0x644>)
 8022a52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022a56:	4401      	add	r1, r0
 8022a58:	9102      	str	r1, [sp, #8]
 8022a5a:	9908      	ldr	r1, [sp, #32]
 8022a5c:	eeb0 8a47 	vmov.f32	s16, s14
 8022a60:	eef0 8a67 	vmov.f32	s17, s15
 8022a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022a68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8022a6c:	2900      	cmp	r1, #0
 8022a6e:	d045      	beq.n	8022afc <_dtoa_r+0x5b4>
 8022a70:	494c      	ldr	r1, [pc, #304]	; (8022ba4 <_dtoa_r+0x65c>)
 8022a72:	2000      	movs	r0, #0
 8022a74:	f7dd fefa 	bl	800086c <__aeabi_ddiv>
 8022a78:	ec53 2b18 	vmov	r2, r3, d8
 8022a7c:	f7dd fc14 	bl	80002a8 <__aeabi_dsub>
 8022a80:	9d00      	ldr	r5, [sp, #0]
 8022a82:	ec41 0b18 	vmov	d8, r0, r1
 8022a86:	4639      	mov	r1, r7
 8022a88:	4630      	mov	r0, r6
 8022a8a:	f7de f875 	bl	8000b78 <__aeabi_d2iz>
 8022a8e:	900c      	str	r0, [sp, #48]	; 0x30
 8022a90:	f7dd fd58 	bl	8000544 <__aeabi_i2d>
 8022a94:	4602      	mov	r2, r0
 8022a96:	460b      	mov	r3, r1
 8022a98:	4630      	mov	r0, r6
 8022a9a:	4639      	mov	r1, r7
 8022a9c:	f7dd fc04 	bl	80002a8 <__aeabi_dsub>
 8022aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022aa2:	3330      	adds	r3, #48	; 0x30
 8022aa4:	f805 3b01 	strb.w	r3, [r5], #1
 8022aa8:	ec53 2b18 	vmov	r2, r3, d8
 8022aac:	4606      	mov	r6, r0
 8022aae:	460f      	mov	r7, r1
 8022ab0:	f7de f824 	bl	8000afc <__aeabi_dcmplt>
 8022ab4:	2800      	cmp	r0, #0
 8022ab6:	d165      	bne.n	8022b84 <_dtoa_r+0x63c>
 8022ab8:	4632      	mov	r2, r6
 8022aba:	463b      	mov	r3, r7
 8022abc:	4935      	ldr	r1, [pc, #212]	; (8022b94 <_dtoa_r+0x64c>)
 8022abe:	2000      	movs	r0, #0
 8022ac0:	f7dd fbf2 	bl	80002a8 <__aeabi_dsub>
 8022ac4:	ec53 2b18 	vmov	r2, r3, d8
 8022ac8:	f7de f818 	bl	8000afc <__aeabi_dcmplt>
 8022acc:	2800      	cmp	r0, #0
 8022ace:	f040 80b9 	bne.w	8022c44 <_dtoa_r+0x6fc>
 8022ad2:	9b02      	ldr	r3, [sp, #8]
 8022ad4:	429d      	cmp	r5, r3
 8022ad6:	f43f af75 	beq.w	80229c4 <_dtoa_r+0x47c>
 8022ada:	4b2f      	ldr	r3, [pc, #188]	; (8022b98 <_dtoa_r+0x650>)
 8022adc:	ec51 0b18 	vmov	r0, r1, d8
 8022ae0:	2200      	movs	r2, #0
 8022ae2:	f7dd fd99 	bl	8000618 <__aeabi_dmul>
 8022ae6:	4b2c      	ldr	r3, [pc, #176]	; (8022b98 <_dtoa_r+0x650>)
 8022ae8:	ec41 0b18 	vmov	d8, r0, r1
 8022aec:	2200      	movs	r2, #0
 8022aee:	4630      	mov	r0, r6
 8022af0:	4639      	mov	r1, r7
 8022af2:	f7dd fd91 	bl	8000618 <__aeabi_dmul>
 8022af6:	4606      	mov	r6, r0
 8022af8:	460f      	mov	r7, r1
 8022afa:	e7c4      	b.n	8022a86 <_dtoa_r+0x53e>
 8022afc:	ec51 0b17 	vmov	r0, r1, d7
 8022b00:	f7dd fd8a 	bl	8000618 <__aeabi_dmul>
 8022b04:	9b02      	ldr	r3, [sp, #8]
 8022b06:	9d00      	ldr	r5, [sp, #0]
 8022b08:	930c      	str	r3, [sp, #48]	; 0x30
 8022b0a:	ec41 0b18 	vmov	d8, r0, r1
 8022b0e:	4639      	mov	r1, r7
 8022b10:	4630      	mov	r0, r6
 8022b12:	f7de f831 	bl	8000b78 <__aeabi_d2iz>
 8022b16:	9011      	str	r0, [sp, #68]	; 0x44
 8022b18:	f7dd fd14 	bl	8000544 <__aeabi_i2d>
 8022b1c:	4602      	mov	r2, r0
 8022b1e:	460b      	mov	r3, r1
 8022b20:	4630      	mov	r0, r6
 8022b22:	4639      	mov	r1, r7
 8022b24:	f7dd fbc0 	bl	80002a8 <__aeabi_dsub>
 8022b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b2a:	3330      	adds	r3, #48	; 0x30
 8022b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8022b30:	9b02      	ldr	r3, [sp, #8]
 8022b32:	429d      	cmp	r5, r3
 8022b34:	4606      	mov	r6, r0
 8022b36:	460f      	mov	r7, r1
 8022b38:	f04f 0200 	mov.w	r2, #0
 8022b3c:	d134      	bne.n	8022ba8 <_dtoa_r+0x660>
 8022b3e:	4b19      	ldr	r3, [pc, #100]	; (8022ba4 <_dtoa_r+0x65c>)
 8022b40:	ec51 0b18 	vmov	r0, r1, d8
 8022b44:	f7dd fbb2 	bl	80002ac <__adddf3>
 8022b48:	4602      	mov	r2, r0
 8022b4a:	460b      	mov	r3, r1
 8022b4c:	4630      	mov	r0, r6
 8022b4e:	4639      	mov	r1, r7
 8022b50:	f7dd fff2 	bl	8000b38 <__aeabi_dcmpgt>
 8022b54:	2800      	cmp	r0, #0
 8022b56:	d175      	bne.n	8022c44 <_dtoa_r+0x6fc>
 8022b58:	ec53 2b18 	vmov	r2, r3, d8
 8022b5c:	4911      	ldr	r1, [pc, #68]	; (8022ba4 <_dtoa_r+0x65c>)
 8022b5e:	2000      	movs	r0, #0
 8022b60:	f7dd fba2 	bl	80002a8 <__aeabi_dsub>
 8022b64:	4602      	mov	r2, r0
 8022b66:	460b      	mov	r3, r1
 8022b68:	4630      	mov	r0, r6
 8022b6a:	4639      	mov	r1, r7
 8022b6c:	f7dd ffc6 	bl	8000afc <__aeabi_dcmplt>
 8022b70:	2800      	cmp	r0, #0
 8022b72:	f43f af27 	beq.w	80229c4 <_dtoa_r+0x47c>
 8022b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022b78:	1e6b      	subs	r3, r5, #1
 8022b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8022b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022b80:	2b30      	cmp	r3, #48	; 0x30
 8022b82:	d0f8      	beq.n	8022b76 <_dtoa_r+0x62e>
 8022b84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022b88:	e04a      	b.n	8022c20 <_dtoa_r+0x6d8>
 8022b8a:	bf00      	nop
 8022b8c:	08029d90 	.word	0x08029d90
 8022b90:	08029d68 	.word	0x08029d68
 8022b94:	3ff00000 	.word	0x3ff00000
 8022b98:	40240000 	.word	0x40240000
 8022b9c:	401c0000 	.word	0x401c0000
 8022ba0:	40140000 	.word	0x40140000
 8022ba4:	3fe00000 	.word	0x3fe00000
 8022ba8:	4baf      	ldr	r3, [pc, #700]	; (8022e68 <_dtoa_r+0x920>)
 8022baa:	f7dd fd35 	bl	8000618 <__aeabi_dmul>
 8022bae:	4606      	mov	r6, r0
 8022bb0:	460f      	mov	r7, r1
 8022bb2:	e7ac      	b.n	8022b0e <_dtoa_r+0x5c6>
 8022bb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022bb8:	9d00      	ldr	r5, [sp, #0]
 8022bba:	4642      	mov	r2, r8
 8022bbc:	464b      	mov	r3, r9
 8022bbe:	4630      	mov	r0, r6
 8022bc0:	4639      	mov	r1, r7
 8022bc2:	f7dd fe53 	bl	800086c <__aeabi_ddiv>
 8022bc6:	f7dd ffd7 	bl	8000b78 <__aeabi_d2iz>
 8022bca:	9002      	str	r0, [sp, #8]
 8022bcc:	f7dd fcba 	bl	8000544 <__aeabi_i2d>
 8022bd0:	4642      	mov	r2, r8
 8022bd2:	464b      	mov	r3, r9
 8022bd4:	f7dd fd20 	bl	8000618 <__aeabi_dmul>
 8022bd8:	4602      	mov	r2, r0
 8022bda:	460b      	mov	r3, r1
 8022bdc:	4630      	mov	r0, r6
 8022bde:	4639      	mov	r1, r7
 8022be0:	f7dd fb62 	bl	80002a8 <__aeabi_dsub>
 8022be4:	9e02      	ldr	r6, [sp, #8]
 8022be6:	9f01      	ldr	r7, [sp, #4]
 8022be8:	3630      	adds	r6, #48	; 0x30
 8022bea:	f805 6b01 	strb.w	r6, [r5], #1
 8022bee:	9e00      	ldr	r6, [sp, #0]
 8022bf0:	1bae      	subs	r6, r5, r6
 8022bf2:	42b7      	cmp	r7, r6
 8022bf4:	4602      	mov	r2, r0
 8022bf6:	460b      	mov	r3, r1
 8022bf8:	d137      	bne.n	8022c6a <_dtoa_r+0x722>
 8022bfa:	f7dd fb57 	bl	80002ac <__adddf3>
 8022bfe:	4642      	mov	r2, r8
 8022c00:	464b      	mov	r3, r9
 8022c02:	4606      	mov	r6, r0
 8022c04:	460f      	mov	r7, r1
 8022c06:	f7dd ff97 	bl	8000b38 <__aeabi_dcmpgt>
 8022c0a:	b9c8      	cbnz	r0, 8022c40 <_dtoa_r+0x6f8>
 8022c0c:	4642      	mov	r2, r8
 8022c0e:	464b      	mov	r3, r9
 8022c10:	4630      	mov	r0, r6
 8022c12:	4639      	mov	r1, r7
 8022c14:	f7dd ff68 	bl	8000ae8 <__aeabi_dcmpeq>
 8022c18:	b110      	cbz	r0, 8022c20 <_dtoa_r+0x6d8>
 8022c1a:	9b02      	ldr	r3, [sp, #8]
 8022c1c:	07d9      	lsls	r1, r3, #31
 8022c1e:	d40f      	bmi.n	8022c40 <_dtoa_r+0x6f8>
 8022c20:	4620      	mov	r0, r4
 8022c22:	4659      	mov	r1, fp
 8022c24:	f000 fc1c 	bl	8023460 <_Bfree>
 8022c28:	2300      	movs	r3, #0
 8022c2a:	702b      	strb	r3, [r5, #0]
 8022c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c2e:	f10a 0001 	add.w	r0, sl, #1
 8022c32:	6018      	str	r0, [r3, #0]
 8022c34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	f43f acd8 	beq.w	80225ec <_dtoa_r+0xa4>
 8022c3c:	601d      	str	r5, [r3, #0]
 8022c3e:	e4d5      	b.n	80225ec <_dtoa_r+0xa4>
 8022c40:	f8cd a01c 	str.w	sl, [sp, #28]
 8022c44:	462b      	mov	r3, r5
 8022c46:	461d      	mov	r5, r3
 8022c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022c4c:	2a39      	cmp	r2, #57	; 0x39
 8022c4e:	d108      	bne.n	8022c62 <_dtoa_r+0x71a>
 8022c50:	9a00      	ldr	r2, [sp, #0]
 8022c52:	429a      	cmp	r2, r3
 8022c54:	d1f7      	bne.n	8022c46 <_dtoa_r+0x6fe>
 8022c56:	9a07      	ldr	r2, [sp, #28]
 8022c58:	9900      	ldr	r1, [sp, #0]
 8022c5a:	3201      	adds	r2, #1
 8022c5c:	9207      	str	r2, [sp, #28]
 8022c5e:	2230      	movs	r2, #48	; 0x30
 8022c60:	700a      	strb	r2, [r1, #0]
 8022c62:	781a      	ldrb	r2, [r3, #0]
 8022c64:	3201      	adds	r2, #1
 8022c66:	701a      	strb	r2, [r3, #0]
 8022c68:	e78c      	b.n	8022b84 <_dtoa_r+0x63c>
 8022c6a:	4b7f      	ldr	r3, [pc, #508]	; (8022e68 <_dtoa_r+0x920>)
 8022c6c:	2200      	movs	r2, #0
 8022c6e:	f7dd fcd3 	bl	8000618 <__aeabi_dmul>
 8022c72:	2200      	movs	r2, #0
 8022c74:	2300      	movs	r3, #0
 8022c76:	4606      	mov	r6, r0
 8022c78:	460f      	mov	r7, r1
 8022c7a:	f7dd ff35 	bl	8000ae8 <__aeabi_dcmpeq>
 8022c7e:	2800      	cmp	r0, #0
 8022c80:	d09b      	beq.n	8022bba <_dtoa_r+0x672>
 8022c82:	e7cd      	b.n	8022c20 <_dtoa_r+0x6d8>
 8022c84:	9a08      	ldr	r2, [sp, #32]
 8022c86:	2a00      	cmp	r2, #0
 8022c88:	f000 80c4 	beq.w	8022e14 <_dtoa_r+0x8cc>
 8022c8c:	9a05      	ldr	r2, [sp, #20]
 8022c8e:	2a01      	cmp	r2, #1
 8022c90:	f300 80a8 	bgt.w	8022de4 <_dtoa_r+0x89c>
 8022c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022c96:	2a00      	cmp	r2, #0
 8022c98:	f000 80a0 	beq.w	8022ddc <_dtoa_r+0x894>
 8022c9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022ca0:	9e06      	ldr	r6, [sp, #24]
 8022ca2:	4645      	mov	r5, r8
 8022ca4:	9a04      	ldr	r2, [sp, #16]
 8022ca6:	2101      	movs	r1, #1
 8022ca8:	441a      	add	r2, r3
 8022caa:	4620      	mov	r0, r4
 8022cac:	4498      	add	r8, r3
 8022cae:	9204      	str	r2, [sp, #16]
 8022cb0:	f000 fc92 	bl	80235d8 <__i2b>
 8022cb4:	4607      	mov	r7, r0
 8022cb6:	2d00      	cmp	r5, #0
 8022cb8:	dd0b      	ble.n	8022cd2 <_dtoa_r+0x78a>
 8022cba:	9b04      	ldr	r3, [sp, #16]
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	dd08      	ble.n	8022cd2 <_dtoa_r+0x78a>
 8022cc0:	42ab      	cmp	r3, r5
 8022cc2:	9a04      	ldr	r2, [sp, #16]
 8022cc4:	bfa8      	it	ge
 8022cc6:	462b      	movge	r3, r5
 8022cc8:	eba8 0803 	sub.w	r8, r8, r3
 8022ccc:	1aed      	subs	r5, r5, r3
 8022cce:	1ad3      	subs	r3, r2, r3
 8022cd0:	9304      	str	r3, [sp, #16]
 8022cd2:	9b06      	ldr	r3, [sp, #24]
 8022cd4:	b1fb      	cbz	r3, 8022d16 <_dtoa_r+0x7ce>
 8022cd6:	9b08      	ldr	r3, [sp, #32]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	f000 809f 	beq.w	8022e1c <_dtoa_r+0x8d4>
 8022cde:	2e00      	cmp	r6, #0
 8022ce0:	dd11      	ble.n	8022d06 <_dtoa_r+0x7be>
 8022ce2:	4639      	mov	r1, r7
 8022ce4:	4632      	mov	r2, r6
 8022ce6:	4620      	mov	r0, r4
 8022ce8:	f000 fd32 	bl	8023750 <__pow5mult>
 8022cec:	465a      	mov	r2, fp
 8022cee:	4601      	mov	r1, r0
 8022cf0:	4607      	mov	r7, r0
 8022cf2:	4620      	mov	r0, r4
 8022cf4:	f000 fc86 	bl	8023604 <__multiply>
 8022cf8:	4659      	mov	r1, fp
 8022cfa:	9007      	str	r0, [sp, #28]
 8022cfc:	4620      	mov	r0, r4
 8022cfe:	f000 fbaf 	bl	8023460 <_Bfree>
 8022d02:	9b07      	ldr	r3, [sp, #28]
 8022d04:	469b      	mov	fp, r3
 8022d06:	9b06      	ldr	r3, [sp, #24]
 8022d08:	1b9a      	subs	r2, r3, r6
 8022d0a:	d004      	beq.n	8022d16 <_dtoa_r+0x7ce>
 8022d0c:	4659      	mov	r1, fp
 8022d0e:	4620      	mov	r0, r4
 8022d10:	f000 fd1e 	bl	8023750 <__pow5mult>
 8022d14:	4683      	mov	fp, r0
 8022d16:	2101      	movs	r1, #1
 8022d18:	4620      	mov	r0, r4
 8022d1a:	f000 fc5d 	bl	80235d8 <__i2b>
 8022d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	4606      	mov	r6, r0
 8022d24:	dd7c      	ble.n	8022e20 <_dtoa_r+0x8d8>
 8022d26:	461a      	mov	r2, r3
 8022d28:	4601      	mov	r1, r0
 8022d2a:	4620      	mov	r0, r4
 8022d2c:	f000 fd10 	bl	8023750 <__pow5mult>
 8022d30:	9b05      	ldr	r3, [sp, #20]
 8022d32:	2b01      	cmp	r3, #1
 8022d34:	4606      	mov	r6, r0
 8022d36:	dd76      	ble.n	8022e26 <_dtoa_r+0x8de>
 8022d38:	2300      	movs	r3, #0
 8022d3a:	9306      	str	r3, [sp, #24]
 8022d3c:	6933      	ldr	r3, [r6, #16]
 8022d3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022d42:	6918      	ldr	r0, [r3, #16]
 8022d44:	f000 fbf8 	bl	8023538 <__hi0bits>
 8022d48:	f1c0 0020 	rsb	r0, r0, #32
 8022d4c:	9b04      	ldr	r3, [sp, #16]
 8022d4e:	4418      	add	r0, r3
 8022d50:	f010 001f 	ands.w	r0, r0, #31
 8022d54:	f000 8086 	beq.w	8022e64 <_dtoa_r+0x91c>
 8022d58:	f1c0 0320 	rsb	r3, r0, #32
 8022d5c:	2b04      	cmp	r3, #4
 8022d5e:	dd7f      	ble.n	8022e60 <_dtoa_r+0x918>
 8022d60:	f1c0 001c 	rsb	r0, r0, #28
 8022d64:	9b04      	ldr	r3, [sp, #16]
 8022d66:	4403      	add	r3, r0
 8022d68:	4480      	add	r8, r0
 8022d6a:	4405      	add	r5, r0
 8022d6c:	9304      	str	r3, [sp, #16]
 8022d6e:	f1b8 0f00 	cmp.w	r8, #0
 8022d72:	dd05      	ble.n	8022d80 <_dtoa_r+0x838>
 8022d74:	4659      	mov	r1, fp
 8022d76:	4642      	mov	r2, r8
 8022d78:	4620      	mov	r0, r4
 8022d7a:	f000 fd43 	bl	8023804 <__lshift>
 8022d7e:	4683      	mov	fp, r0
 8022d80:	9b04      	ldr	r3, [sp, #16]
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	dd05      	ble.n	8022d92 <_dtoa_r+0x84a>
 8022d86:	4631      	mov	r1, r6
 8022d88:	461a      	mov	r2, r3
 8022d8a:	4620      	mov	r0, r4
 8022d8c:	f000 fd3a 	bl	8023804 <__lshift>
 8022d90:	4606      	mov	r6, r0
 8022d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d069      	beq.n	8022e6c <_dtoa_r+0x924>
 8022d98:	4631      	mov	r1, r6
 8022d9a:	4658      	mov	r0, fp
 8022d9c:	f000 fd9e 	bl	80238dc <__mcmp>
 8022da0:	2800      	cmp	r0, #0
 8022da2:	da63      	bge.n	8022e6c <_dtoa_r+0x924>
 8022da4:	2300      	movs	r3, #0
 8022da6:	4659      	mov	r1, fp
 8022da8:	220a      	movs	r2, #10
 8022daa:	4620      	mov	r0, r4
 8022dac:	f000 fb7a 	bl	80234a4 <__multadd>
 8022db0:	9b08      	ldr	r3, [sp, #32]
 8022db2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8022db6:	4683      	mov	fp, r0
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	f000 818f 	beq.w	80230dc <_dtoa_r+0xb94>
 8022dbe:	4639      	mov	r1, r7
 8022dc0:	2300      	movs	r3, #0
 8022dc2:	220a      	movs	r2, #10
 8022dc4:	4620      	mov	r0, r4
 8022dc6:	f000 fb6d 	bl	80234a4 <__multadd>
 8022dca:	f1b9 0f00 	cmp.w	r9, #0
 8022dce:	4607      	mov	r7, r0
 8022dd0:	f300 808e 	bgt.w	8022ef0 <_dtoa_r+0x9a8>
 8022dd4:	9b05      	ldr	r3, [sp, #20]
 8022dd6:	2b02      	cmp	r3, #2
 8022dd8:	dc50      	bgt.n	8022e7c <_dtoa_r+0x934>
 8022dda:	e089      	b.n	8022ef0 <_dtoa_r+0x9a8>
 8022ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8022de2:	e75d      	b.n	8022ca0 <_dtoa_r+0x758>
 8022de4:	9b01      	ldr	r3, [sp, #4]
 8022de6:	1e5e      	subs	r6, r3, #1
 8022de8:	9b06      	ldr	r3, [sp, #24]
 8022dea:	42b3      	cmp	r3, r6
 8022dec:	bfbf      	itttt	lt
 8022dee:	9b06      	ldrlt	r3, [sp, #24]
 8022df0:	9606      	strlt	r6, [sp, #24]
 8022df2:	1af2      	sublt	r2, r6, r3
 8022df4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8022df6:	bfb6      	itet	lt
 8022df8:	189b      	addlt	r3, r3, r2
 8022dfa:	1b9e      	subge	r6, r3, r6
 8022dfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8022dfe:	9b01      	ldr	r3, [sp, #4]
 8022e00:	bfb8      	it	lt
 8022e02:	2600      	movlt	r6, #0
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	bfb5      	itete	lt
 8022e08:	eba8 0503 	sublt.w	r5, r8, r3
 8022e0c:	9b01      	ldrge	r3, [sp, #4]
 8022e0e:	2300      	movlt	r3, #0
 8022e10:	4645      	movge	r5, r8
 8022e12:	e747      	b.n	8022ca4 <_dtoa_r+0x75c>
 8022e14:	9e06      	ldr	r6, [sp, #24]
 8022e16:	9f08      	ldr	r7, [sp, #32]
 8022e18:	4645      	mov	r5, r8
 8022e1a:	e74c      	b.n	8022cb6 <_dtoa_r+0x76e>
 8022e1c:	9a06      	ldr	r2, [sp, #24]
 8022e1e:	e775      	b.n	8022d0c <_dtoa_r+0x7c4>
 8022e20:	9b05      	ldr	r3, [sp, #20]
 8022e22:	2b01      	cmp	r3, #1
 8022e24:	dc18      	bgt.n	8022e58 <_dtoa_r+0x910>
 8022e26:	9b02      	ldr	r3, [sp, #8]
 8022e28:	b9b3      	cbnz	r3, 8022e58 <_dtoa_r+0x910>
 8022e2a:	9b03      	ldr	r3, [sp, #12]
 8022e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022e30:	b9a3      	cbnz	r3, 8022e5c <_dtoa_r+0x914>
 8022e32:	9b03      	ldr	r3, [sp, #12]
 8022e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022e38:	0d1b      	lsrs	r3, r3, #20
 8022e3a:	051b      	lsls	r3, r3, #20
 8022e3c:	b12b      	cbz	r3, 8022e4a <_dtoa_r+0x902>
 8022e3e:	9b04      	ldr	r3, [sp, #16]
 8022e40:	3301      	adds	r3, #1
 8022e42:	9304      	str	r3, [sp, #16]
 8022e44:	f108 0801 	add.w	r8, r8, #1
 8022e48:	2301      	movs	r3, #1
 8022e4a:	9306      	str	r3, [sp, #24]
 8022e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	f47f af74 	bne.w	8022d3c <_dtoa_r+0x7f4>
 8022e54:	2001      	movs	r0, #1
 8022e56:	e779      	b.n	8022d4c <_dtoa_r+0x804>
 8022e58:	2300      	movs	r3, #0
 8022e5a:	e7f6      	b.n	8022e4a <_dtoa_r+0x902>
 8022e5c:	9b02      	ldr	r3, [sp, #8]
 8022e5e:	e7f4      	b.n	8022e4a <_dtoa_r+0x902>
 8022e60:	d085      	beq.n	8022d6e <_dtoa_r+0x826>
 8022e62:	4618      	mov	r0, r3
 8022e64:	301c      	adds	r0, #28
 8022e66:	e77d      	b.n	8022d64 <_dtoa_r+0x81c>
 8022e68:	40240000 	.word	0x40240000
 8022e6c:	9b01      	ldr	r3, [sp, #4]
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	dc38      	bgt.n	8022ee4 <_dtoa_r+0x99c>
 8022e72:	9b05      	ldr	r3, [sp, #20]
 8022e74:	2b02      	cmp	r3, #2
 8022e76:	dd35      	ble.n	8022ee4 <_dtoa_r+0x99c>
 8022e78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8022e7c:	f1b9 0f00 	cmp.w	r9, #0
 8022e80:	d10d      	bne.n	8022e9e <_dtoa_r+0x956>
 8022e82:	4631      	mov	r1, r6
 8022e84:	464b      	mov	r3, r9
 8022e86:	2205      	movs	r2, #5
 8022e88:	4620      	mov	r0, r4
 8022e8a:	f000 fb0b 	bl	80234a4 <__multadd>
 8022e8e:	4601      	mov	r1, r0
 8022e90:	4606      	mov	r6, r0
 8022e92:	4658      	mov	r0, fp
 8022e94:	f000 fd22 	bl	80238dc <__mcmp>
 8022e98:	2800      	cmp	r0, #0
 8022e9a:	f73f adbd 	bgt.w	8022a18 <_dtoa_r+0x4d0>
 8022e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ea0:	9d00      	ldr	r5, [sp, #0]
 8022ea2:	ea6f 0a03 	mvn.w	sl, r3
 8022ea6:	f04f 0800 	mov.w	r8, #0
 8022eaa:	4631      	mov	r1, r6
 8022eac:	4620      	mov	r0, r4
 8022eae:	f000 fad7 	bl	8023460 <_Bfree>
 8022eb2:	2f00      	cmp	r7, #0
 8022eb4:	f43f aeb4 	beq.w	8022c20 <_dtoa_r+0x6d8>
 8022eb8:	f1b8 0f00 	cmp.w	r8, #0
 8022ebc:	d005      	beq.n	8022eca <_dtoa_r+0x982>
 8022ebe:	45b8      	cmp	r8, r7
 8022ec0:	d003      	beq.n	8022eca <_dtoa_r+0x982>
 8022ec2:	4641      	mov	r1, r8
 8022ec4:	4620      	mov	r0, r4
 8022ec6:	f000 facb 	bl	8023460 <_Bfree>
 8022eca:	4639      	mov	r1, r7
 8022ecc:	4620      	mov	r0, r4
 8022ece:	f000 fac7 	bl	8023460 <_Bfree>
 8022ed2:	e6a5      	b.n	8022c20 <_dtoa_r+0x6d8>
 8022ed4:	2600      	movs	r6, #0
 8022ed6:	4637      	mov	r7, r6
 8022ed8:	e7e1      	b.n	8022e9e <_dtoa_r+0x956>
 8022eda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022edc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022ee0:	4637      	mov	r7, r6
 8022ee2:	e599      	b.n	8022a18 <_dtoa_r+0x4d0>
 8022ee4:	9b08      	ldr	r3, [sp, #32]
 8022ee6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	f000 80fd 	beq.w	80230ea <_dtoa_r+0xba2>
 8022ef0:	2d00      	cmp	r5, #0
 8022ef2:	dd05      	ble.n	8022f00 <_dtoa_r+0x9b8>
 8022ef4:	4639      	mov	r1, r7
 8022ef6:	462a      	mov	r2, r5
 8022ef8:	4620      	mov	r0, r4
 8022efa:	f000 fc83 	bl	8023804 <__lshift>
 8022efe:	4607      	mov	r7, r0
 8022f00:	9b06      	ldr	r3, [sp, #24]
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	d05c      	beq.n	8022fc0 <_dtoa_r+0xa78>
 8022f06:	6879      	ldr	r1, [r7, #4]
 8022f08:	4620      	mov	r0, r4
 8022f0a:	f000 fa69 	bl	80233e0 <_Balloc>
 8022f0e:	4605      	mov	r5, r0
 8022f10:	b928      	cbnz	r0, 8022f1e <_dtoa_r+0x9d6>
 8022f12:	4b80      	ldr	r3, [pc, #512]	; (8023114 <_dtoa_r+0xbcc>)
 8022f14:	4602      	mov	r2, r0
 8022f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8022f1a:	f7ff bb2e 	b.w	802257a <_dtoa_r+0x32>
 8022f1e:	693a      	ldr	r2, [r7, #16]
 8022f20:	3202      	adds	r2, #2
 8022f22:	0092      	lsls	r2, r2, #2
 8022f24:	f107 010c 	add.w	r1, r7, #12
 8022f28:	300c      	adds	r0, #12
 8022f2a:	f7fe f8ff 	bl	802112c <memcpy>
 8022f2e:	2201      	movs	r2, #1
 8022f30:	4629      	mov	r1, r5
 8022f32:	4620      	mov	r0, r4
 8022f34:	f000 fc66 	bl	8023804 <__lshift>
 8022f38:	9b00      	ldr	r3, [sp, #0]
 8022f3a:	3301      	adds	r3, #1
 8022f3c:	9301      	str	r3, [sp, #4]
 8022f3e:	9b00      	ldr	r3, [sp, #0]
 8022f40:	444b      	add	r3, r9
 8022f42:	9307      	str	r3, [sp, #28]
 8022f44:	9b02      	ldr	r3, [sp, #8]
 8022f46:	f003 0301 	and.w	r3, r3, #1
 8022f4a:	46b8      	mov	r8, r7
 8022f4c:	9306      	str	r3, [sp, #24]
 8022f4e:	4607      	mov	r7, r0
 8022f50:	9b01      	ldr	r3, [sp, #4]
 8022f52:	4631      	mov	r1, r6
 8022f54:	3b01      	subs	r3, #1
 8022f56:	4658      	mov	r0, fp
 8022f58:	9302      	str	r3, [sp, #8]
 8022f5a:	f7ff fa69 	bl	8022430 <quorem>
 8022f5e:	4603      	mov	r3, r0
 8022f60:	3330      	adds	r3, #48	; 0x30
 8022f62:	9004      	str	r0, [sp, #16]
 8022f64:	4641      	mov	r1, r8
 8022f66:	4658      	mov	r0, fp
 8022f68:	9308      	str	r3, [sp, #32]
 8022f6a:	f000 fcb7 	bl	80238dc <__mcmp>
 8022f6e:	463a      	mov	r2, r7
 8022f70:	4681      	mov	r9, r0
 8022f72:	4631      	mov	r1, r6
 8022f74:	4620      	mov	r0, r4
 8022f76:	f000 fccd 	bl	8023914 <__mdiff>
 8022f7a:	68c2      	ldr	r2, [r0, #12]
 8022f7c:	9b08      	ldr	r3, [sp, #32]
 8022f7e:	4605      	mov	r5, r0
 8022f80:	bb02      	cbnz	r2, 8022fc4 <_dtoa_r+0xa7c>
 8022f82:	4601      	mov	r1, r0
 8022f84:	4658      	mov	r0, fp
 8022f86:	f000 fca9 	bl	80238dc <__mcmp>
 8022f8a:	9b08      	ldr	r3, [sp, #32]
 8022f8c:	4602      	mov	r2, r0
 8022f8e:	4629      	mov	r1, r5
 8022f90:	4620      	mov	r0, r4
 8022f92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8022f96:	f000 fa63 	bl	8023460 <_Bfree>
 8022f9a:	9b05      	ldr	r3, [sp, #20]
 8022f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f9e:	9d01      	ldr	r5, [sp, #4]
 8022fa0:	ea43 0102 	orr.w	r1, r3, r2
 8022fa4:	9b06      	ldr	r3, [sp, #24]
 8022fa6:	430b      	orrs	r3, r1
 8022fa8:	9b08      	ldr	r3, [sp, #32]
 8022faa:	d10d      	bne.n	8022fc8 <_dtoa_r+0xa80>
 8022fac:	2b39      	cmp	r3, #57	; 0x39
 8022fae:	d029      	beq.n	8023004 <_dtoa_r+0xabc>
 8022fb0:	f1b9 0f00 	cmp.w	r9, #0
 8022fb4:	dd01      	ble.n	8022fba <_dtoa_r+0xa72>
 8022fb6:	9b04      	ldr	r3, [sp, #16]
 8022fb8:	3331      	adds	r3, #49	; 0x31
 8022fba:	9a02      	ldr	r2, [sp, #8]
 8022fbc:	7013      	strb	r3, [r2, #0]
 8022fbe:	e774      	b.n	8022eaa <_dtoa_r+0x962>
 8022fc0:	4638      	mov	r0, r7
 8022fc2:	e7b9      	b.n	8022f38 <_dtoa_r+0x9f0>
 8022fc4:	2201      	movs	r2, #1
 8022fc6:	e7e2      	b.n	8022f8e <_dtoa_r+0xa46>
 8022fc8:	f1b9 0f00 	cmp.w	r9, #0
 8022fcc:	db06      	blt.n	8022fdc <_dtoa_r+0xa94>
 8022fce:	9905      	ldr	r1, [sp, #20]
 8022fd0:	ea41 0909 	orr.w	r9, r1, r9
 8022fd4:	9906      	ldr	r1, [sp, #24]
 8022fd6:	ea59 0101 	orrs.w	r1, r9, r1
 8022fda:	d120      	bne.n	802301e <_dtoa_r+0xad6>
 8022fdc:	2a00      	cmp	r2, #0
 8022fde:	ddec      	ble.n	8022fba <_dtoa_r+0xa72>
 8022fe0:	4659      	mov	r1, fp
 8022fe2:	2201      	movs	r2, #1
 8022fe4:	4620      	mov	r0, r4
 8022fe6:	9301      	str	r3, [sp, #4]
 8022fe8:	f000 fc0c 	bl	8023804 <__lshift>
 8022fec:	4631      	mov	r1, r6
 8022fee:	4683      	mov	fp, r0
 8022ff0:	f000 fc74 	bl	80238dc <__mcmp>
 8022ff4:	2800      	cmp	r0, #0
 8022ff6:	9b01      	ldr	r3, [sp, #4]
 8022ff8:	dc02      	bgt.n	8023000 <_dtoa_r+0xab8>
 8022ffa:	d1de      	bne.n	8022fba <_dtoa_r+0xa72>
 8022ffc:	07da      	lsls	r2, r3, #31
 8022ffe:	d5dc      	bpl.n	8022fba <_dtoa_r+0xa72>
 8023000:	2b39      	cmp	r3, #57	; 0x39
 8023002:	d1d8      	bne.n	8022fb6 <_dtoa_r+0xa6e>
 8023004:	9a02      	ldr	r2, [sp, #8]
 8023006:	2339      	movs	r3, #57	; 0x39
 8023008:	7013      	strb	r3, [r2, #0]
 802300a:	462b      	mov	r3, r5
 802300c:	461d      	mov	r5, r3
 802300e:	3b01      	subs	r3, #1
 8023010:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8023014:	2a39      	cmp	r2, #57	; 0x39
 8023016:	d050      	beq.n	80230ba <_dtoa_r+0xb72>
 8023018:	3201      	adds	r2, #1
 802301a:	701a      	strb	r2, [r3, #0]
 802301c:	e745      	b.n	8022eaa <_dtoa_r+0x962>
 802301e:	2a00      	cmp	r2, #0
 8023020:	dd03      	ble.n	802302a <_dtoa_r+0xae2>
 8023022:	2b39      	cmp	r3, #57	; 0x39
 8023024:	d0ee      	beq.n	8023004 <_dtoa_r+0xabc>
 8023026:	3301      	adds	r3, #1
 8023028:	e7c7      	b.n	8022fba <_dtoa_r+0xa72>
 802302a:	9a01      	ldr	r2, [sp, #4]
 802302c:	9907      	ldr	r1, [sp, #28]
 802302e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023032:	428a      	cmp	r2, r1
 8023034:	d02a      	beq.n	802308c <_dtoa_r+0xb44>
 8023036:	4659      	mov	r1, fp
 8023038:	2300      	movs	r3, #0
 802303a:	220a      	movs	r2, #10
 802303c:	4620      	mov	r0, r4
 802303e:	f000 fa31 	bl	80234a4 <__multadd>
 8023042:	45b8      	cmp	r8, r7
 8023044:	4683      	mov	fp, r0
 8023046:	f04f 0300 	mov.w	r3, #0
 802304a:	f04f 020a 	mov.w	r2, #10
 802304e:	4641      	mov	r1, r8
 8023050:	4620      	mov	r0, r4
 8023052:	d107      	bne.n	8023064 <_dtoa_r+0xb1c>
 8023054:	f000 fa26 	bl	80234a4 <__multadd>
 8023058:	4680      	mov	r8, r0
 802305a:	4607      	mov	r7, r0
 802305c:	9b01      	ldr	r3, [sp, #4]
 802305e:	3301      	adds	r3, #1
 8023060:	9301      	str	r3, [sp, #4]
 8023062:	e775      	b.n	8022f50 <_dtoa_r+0xa08>
 8023064:	f000 fa1e 	bl	80234a4 <__multadd>
 8023068:	4639      	mov	r1, r7
 802306a:	4680      	mov	r8, r0
 802306c:	2300      	movs	r3, #0
 802306e:	220a      	movs	r2, #10
 8023070:	4620      	mov	r0, r4
 8023072:	f000 fa17 	bl	80234a4 <__multadd>
 8023076:	4607      	mov	r7, r0
 8023078:	e7f0      	b.n	802305c <_dtoa_r+0xb14>
 802307a:	f1b9 0f00 	cmp.w	r9, #0
 802307e:	9a00      	ldr	r2, [sp, #0]
 8023080:	bfcc      	ite	gt
 8023082:	464d      	movgt	r5, r9
 8023084:	2501      	movle	r5, #1
 8023086:	4415      	add	r5, r2
 8023088:	f04f 0800 	mov.w	r8, #0
 802308c:	4659      	mov	r1, fp
 802308e:	2201      	movs	r2, #1
 8023090:	4620      	mov	r0, r4
 8023092:	9301      	str	r3, [sp, #4]
 8023094:	f000 fbb6 	bl	8023804 <__lshift>
 8023098:	4631      	mov	r1, r6
 802309a:	4683      	mov	fp, r0
 802309c:	f000 fc1e 	bl	80238dc <__mcmp>
 80230a0:	2800      	cmp	r0, #0
 80230a2:	dcb2      	bgt.n	802300a <_dtoa_r+0xac2>
 80230a4:	d102      	bne.n	80230ac <_dtoa_r+0xb64>
 80230a6:	9b01      	ldr	r3, [sp, #4]
 80230a8:	07db      	lsls	r3, r3, #31
 80230aa:	d4ae      	bmi.n	802300a <_dtoa_r+0xac2>
 80230ac:	462b      	mov	r3, r5
 80230ae:	461d      	mov	r5, r3
 80230b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80230b4:	2a30      	cmp	r2, #48	; 0x30
 80230b6:	d0fa      	beq.n	80230ae <_dtoa_r+0xb66>
 80230b8:	e6f7      	b.n	8022eaa <_dtoa_r+0x962>
 80230ba:	9a00      	ldr	r2, [sp, #0]
 80230bc:	429a      	cmp	r2, r3
 80230be:	d1a5      	bne.n	802300c <_dtoa_r+0xac4>
 80230c0:	f10a 0a01 	add.w	sl, sl, #1
 80230c4:	2331      	movs	r3, #49	; 0x31
 80230c6:	e779      	b.n	8022fbc <_dtoa_r+0xa74>
 80230c8:	4b13      	ldr	r3, [pc, #76]	; (8023118 <_dtoa_r+0xbd0>)
 80230ca:	f7ff baaf 	b.w	802262c <_dtoa_r+0xe4>
 80230ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	f47f aa86 	bne.w	80225e2 <_dtoa_r+0x9a>
 80230d6:	4b11      	ldr	r3, [pc, #68]	; (802311c <_dtoa_r+0xbd4>)
 80230d8:	f7ff baa8 	b.w	802262c <_dtoa_r+0xe4>
 80230dc:	f1b9 0f00 	cmp.w	r9, #0
 80230e0:	dc03      	bgt.n	80230ea <_dtoa_r+0xba2>
 80230e2:	9b05      	ldr	r3, [sp, #20]
 80230e4:	2b02      	cmp	r3, #2
 80230e6:	f73f aec9 	bgt.w	8022e7c <_dtoa_r+0x934>
 80230ea:	9d00      	ldr	r5, [sp, #0]
 80230ec:	4631      	mov	r1, r6
 80230ee:	4658      	mov	r0, fp
 80230f0:	f7ff f99e 	bl	8022430 <quorem>
 80230f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80230f8:	f805 3b01 	strb.w	r3, [r5], #1
 80230fc:	9a00      	ldr	r2, [sp, #0]
 80230fe:	1aaa      	subs	r2, r5, r2
 8023100:	4591      	cmp	r9, r2
 8023102:	ddba      	ble.n	802307a <_dtoa_r+0xb32>
 8023104:	4659      	mov	r1, fp
 8023106:	2300      	movs	r3, #0
 8023108:	220a      	movs	r2, #10
 802310a:	4620      	mov	r0, r4
 802310c:	f000 f9ca 	bl	80234a4 <__multadd>
 8023110:	4683      	mov	fp, r0
 8023112:	e7eb      	b.n	80230ec <_dtoa_r+0xba4>
 8023114:	08029cf5 	.word	0x08029cf5
 8023118:	08029e79 	.word	0x08029e79
 802311c:	08029c89 	.word	0x08029c89

08023120 <__errno>:
 8023120:	4b01      	ldr	r3, [pc, #4]	; (8023128 <__errno+0x8>)
 8023122:	6818      	ldr	r0, [r3, #0]
 8023124:	4770      	bx	lr
 8023126:	bf00      	nop
 8023128:	20000074 	.word	0x20000074

0802312c <__sflush_r>:
 802312c:	898a      	ldrh	r2, [r1, #12]
 802312e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023132:	4605      	mov	r5, r0
 8023134:	0710      	lsls	r0, r2, #28
 8023136:	460c      	mov	r4, r1
 8023138:	d458      	bmi.n	80231ec <__sflush_r+0xc0>
 802313a:	684b      	ldr	r3, [r1, #4]
 802313c:	2b00      	cmp	r3, #0
 802313e:	dc05      	bgt.n	802314c <__sflush_r+0x20>
 8023140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023142:	2b00      	cmp	r3, #0
 8023144:	dc02      	bgt.n	802314c <__sflush_r+0x20>
 8023146:	2000      	movs	r0, #0
 8023148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802314c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802314e:	2e00      	cmp	r6, #0
 8023150:	d0f9      	beq.n	8023146 <__sflush_r+0x1a>
 8023152:	2300      	movs	r3, #0
 8023154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023158:	682f      	ldr	r7, [r5, #0]
 802315a:	602b      	str	r3, [r5, #0]
 802315c:	d032      	beq.n	80231c4 <__sflush_r+0x98>
 802315e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023160:	89a3      	ldrh	r3, [r4, #12]
 8023162:	075a      	lsls	r2, r3, #29
 8023164:	d505      	bpl.n	8023172 <__sflush_r+0x46>
 8023166:	6863      	ldr	r3, [r4, #4]
 8023168:	1ac0      	subs	r0, r0, r3
 802316a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802316c:	b10b      	cbz	r3, 8023172 <__sflush_r+0x46>
 802316e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023170:	1ac0      	subs	r0, r0, r3
 8023172:	2300      	movs	r3, #0
 8023174:	4602      	mov	r2, r0
 8023176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023178:	6a21      	ldr	r1, [r4, #32]
 802317a:	4628      	mov	r0, r5
 802317c:	47b0      	blx	r6
 802317e:	1c43      	adds	r3, r0, #1
 8023180:	89a3      	ldrh	r3, [r4, #12]
 8023182:	d106      	bne.n	8023192 <__sflush_r+0x66>
 8023184:	6829      	ldr	r1, [r5, #0]
 8023186:	291d      	cmp	r1, #29
 8023188:	d82c      	bhi.n	80231e4 <__sflush_r+0xb8>
 802318a:	4a2a      	ldr	r2, [pc, #168]	; (8023234 <__sflush_r+0x108>)
 802318c:	40ca      	lsrs	r2, r1
 802318e:	07d6      	lsls	r6, r2, #31
 8023190:	d528      	bpl.n	80231e4 <__sflush_r+0xb8>
 8023192:	2200      	movs	r2, #0
 8023194:	6062      	str	r2, [r4, #4]
 8023196:	04d9      	lsls	r1, r3, #19
 8023198:	6922      	ldr	r2, [r4, #16]
 802319a:	6022      	str	r2, [r4, #0]
 802319c:	d504      	bpl.n	80231a8 <__sflush_r+0x7c>
 802319e:	1c42      	adds	r2, r0, #1
 80231a0:	d101      	bne.n	80231a6 <__sflush_r+0x7a>
 80231a2:	682b      	ldr	r3, [r5, #0]
 80231a4:	b903      	cbnz	r3, 80231a8 <__sflush_r+0x7c>
 80231a6:	6560      	str	r0, [r4, #84]	; 0x54
 80231a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80231aa:	602f      	str	r7, [r5, #0]
 80231ac:	2900      	cmp	r1, #0
 80231ae:	d0ca      	beq.n	8023146 <__sflush_r+0x1a>
 80231b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80231b4:	4299      	cmp	r1, r3
 80231b6:	d002      	beq.n	80231be <__sflush_r+0x92>
 80231b8:	4628      	mov	r0, r5
 80231ba:	f7fd ffe7 	bl	802118c <_free_r>
 80231be:	2000      	movs	r0, #0
 80231c0:	6360      	str	r0, [r4, #52]	; 0x34
 80231c2:	e7c1      	b.n	8023148 <__sflush_r+0x1c>
 80231c4:	6a21      	ldr	r1, [r4, #32]
 80231c6:	2301      	movs	r3, #1
 80231c8:	4628      	mov	r0, r5
 80231ca:	47b0      	blx	r6
 80231cc:	1c41      	adds	r1, r0, #1
 80231ce:	d1c7      	bne.n	8023160 <__sflush_r+0x34>
 80231d0:	682b      	ldr	r3, [r5, #0]
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	d0c4      	beq.n	8023160 <__sflush_r+0x34>
 80231d6:	2b1d      	cmp	r3, #29
 80231d8:	d001      	beq.n	80231de <__sflush_r+0xb2>
 80231da:	2b16      	cmp	r3, #22
 80231dc:	d101      	bne.n	80231e2 <__sflush_r+0xb6>
 80231de:	602f      	str	r7, [r5, #0]
 80231e0:	e7b1      	b.n	8023146 <__sflush_r+0x1a>
 80231e2:	89a3      	ldrh	r3, [r4, #12]
 80231e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80231e8:	81a3      	strh	r3, [r4, #12]
 80231ea:	e7ad      	b.n	8023148 <__sflush_r+0x1c>
 80231ec:	690f      	ldr	r7, [r1, #16]
 80231ee:	2f00      	cmp	r7, #0
 80231f0:	d0a9      	beq.n	8023146 <__sflush_r+0x1a>
 80231f2:	0793      	lsls	r3, r2, #30
 80231f4:	680e      	ldr	r6, [r1, #0]
 80231f6:	bf08      	it	eq
 80231f8:	694b      	ldreq	r3, [r1, #20]
 80231fa:	600f      	str	r7, [r1, #0]
 80231fc:	bf18      	it	ne
 80231fe:	2300      	movne	r3, #0
 8023200:	eba6 0807 	sub.w	r8, r6, r7
 8023204:	608b      	str	r3, [r1, #8]
 8023206:	f1b8 0f00 	cmp.w	r8, #0
 802320a:	dd9c      	ble.n	8023146 <__sflush_r+0x1a>
 802320c:	6a21      	ldr	r1, [r4, #32]
 802320e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023210:	4643      	mov	r3, r8
 8023212:	463a      	mov	r2, r7
 8023214:	4628      	mov	r0, r5
 8023216:	47b0      	blx	r6
 8023218:	2800      	cmp	r0, #0
 802321a:	dc06      	bgt.n	802322a <__sflush_r+0xfe>
 802321c:	89a3      	ldrh	r3, [r4, #12]
 802321e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023222:	81a3      	strh	r3, [r4, #12]
 8023224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023228:	e78e      	b.n	8023148 <__sflush_r+0x1c>
 802322a:	4407      	add	r7, r0
 802322c:	eba8 0800 	sub.w	r8, r8, r0
 8023230:	e7e9      	b.n	8023206 <__sflush_r+0xda>
 8023232:	bf00      	nop
 8023234:	20400001 	.word	0x20400001

08023238 <_fflush_r>:
 8023238:	b538      	push	{r3, r4, r5, lr}
 802323a:	690b      	ldr	r3, [r1, #16]
 802323c:	4605      	mov	r5, r0
 802323e:	460c      	mov	r4, r1
 8023240:	b913      	cbnz	r3, 8023248 <_fflush_r+0x10>
 8023242:	2500      	movs	r5, #0
 8023244:	4628      	mov	r0, r5
 8023246:	bd38      	pop	{r3, r4, r5, pc}
 8023248:	b118      	cbz	r0, 8023252 <_fflush_r+0x1a>
 802324a:	6983      	ldr	r3, [r0, #24]
 802324c:	b90b      	cbnz	r3, 8023252 <_fflush_r+0x1a>
 802324e:	f7fd fe89 	bl	8020f64 <__sinit>
 8023252:	4b14      	ldr	r3, [pc, #80]	; (80232a4 <_fflush_r+0x6c>)
 8023254:	429c      	cmp	r4, r3
 8023256:	d11b      	bne.n	8023290 <_fflush_r+0x58>
 8023258:	686c      	ldr	r4, [r5, #4]
 802325a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802325e:	2b00      	cmp	r3, #0
 8023260:	d0ef      	beq.n	8023242 <_fflush_r+0xa>
 8023262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023264:	07d0      	lsls	r0, r2, #31
 8023266:	d404      	bmi.n	8023272 <_fflush_r+0x3a>
 8023268:	0599      	lsls	r1, r3, #22
 802326a:	d402      	bmi.n	8023272 <_fflush_r+0x3a>
 802326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802326e:	f7fd ff3c 	bl	80210ea <__retarget_lock_acquire_recursive>
 8023272:	4628      	mov	r0, r5
 8023274:	4621      	mov	r1, r4
 8023276:	f7ff ff59 	bl	802312c <__sflush_r>
 802327a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802327c:	07da      	lsls	r2, r3, #31
 802327e:	4605      	mov	r5, r0
 8023280:	d4e0      	bmi.n	8023244 <_fflush_r+0xc>
 8023282:	89a3      	ldrh	r3, [r4, #12]
 8023284:	059b      	lsls	r3, r3, #22
 8023286:	d4dd      	bmi.n	8023244 <_fflush_r+0xc>
 8023288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802328a:	f7fd ff2f 	bl	80210ec <__retarget_lock_release_recursive>
 802328e:	e7d9      	b.n	8023244 <_fflush_r+0xc>
 8023290:	4b05      	ldr	r3, [pc, #20]	; (80232a8 <_fflush_r+0x70>)
 8023292:	429c      	cmp	r4, r3
 8023294:	d101      	bne.n	802329a <_fflush_r+0x62>
 8023296:	68ac      	ldr	r4, [r5, #8]
 8023298:	e7df      	b.n	802325a <_fflush_r+0x22>
 802329a:	4b04      	ldr	r3, [pc, #16]	; (80232ac <_fflush_r+0x74>)
 802329c:	429c      	cmp	r4, r3
 802329e:	bf08      	it	eq
 80232a0:	68ec      	ldreq	r4, [r5, #12]
 80232a2:	e7da      	b.n	802325a <_fflush_r+0x22>
 80232a4:	08029b00 	.word	0x08029b00
 80232a8:	08029b20 	.word	0x08029b20
 80232ac:	08029ae0 	.word	0x08029ae0

080232b0 <fiprintf>:
 80232b0:	b40e      	push	{r1, r2, r3}
 80232b2:	b503      	push	{r0, r1, lr}
 80232b4:	4601      	mov	r1, r0
 80232b6:	ab03      	add	r3, sp, #12
 80232b8:	4805      	ldr	r0, [pc, #20]	; (80232d0 <fiprintf+0x20>)
 80232ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80232be:	6800      	ldr	r0, [r0, #0]
 80232c0:	9301      	str	r3, [sp, #4]
 80232c2:	f000 ff71 	bl	80241a8 <_vfiprintf_r>
 80232c6:	b002      	add	sp, #8
 80232c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80232cc:	b003      	add	sp, #12
 80232ce:	4770      	bx	lr
 80232d0:	20000074 	.word	0x20000074

080232d4 <_localeconv_r>:
 80232d4:	4800      	ldr	r0, [pc, #0]	; (80232d8 <_localeconv_r+0x4>)
 80232d6:	4770      	bx	lr
 80232d8:	200001c8 	.word	0x200001c8

080232dc <_lseek_r>:
 80232dc:	b538      	push	{r3, r4, r5, lr}
 80232de:	4d07      	ldr	r5, [pc, #28]	; (80232fc <_lseek_r+0x20>)
 80232e0:	4604      	mov	r4, r0
 80232e2:	4608      	mov	r0, r1
 80232e4:	4611      	mov	r1, r2
 80232e6:	2200      	movs	r2, #0
 80232e8:	602a      	str	r2, [r5, #0]
 80232ea:	461a      	mov	r2, r3
 80232ec:	f7df fbae 	bl	8002a4c <_lseek>
 80232f0:	1c43      	adds	r3, r0, #1
 80232f2:	d102      	bne.n	80232fa <_lseek_r+0x1e>
 80232f4:	682b      	ldr	r3, [r5, #0]
 80232f6:	b103      	cbz	r3, 80232fa <_lseek_r+0x1e>
 80232f8:	6023      	str	r3, [r4, #0]
 80232fa:	bd38      	pop	{r3, r4, r5, pc}
 80232fc:	2001b1d8 	.word	0x2001b1d8

08023300 <__swhatbuf_r>:
 8023300:	b570      	push	{r4, r5, r6, lr}
 8023302:	460e      	mov	r6, r1
 8023304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023308:	2900      	cmp	r1, #0
 802330a:	b096      	sub	sp, #88	; 0x58
 802330c:	4614      	mov	r4, r2
 802330e:	461d      	mov	r5, r3
 8023310:	da07      	bge.n	8023322 <__swhatbuf_r+0x22>
 8023312:	2300      	movs	r3, #0
 8023314:	602b      	str	r3, [r5, #0]
 8023316:	89b3      	ldrh	r3, [r6, #12]
 8023318:	061a      	lsls	r2, r3, #24
 802331a:	d410      	bmi.n	802333e <__swhatbuf_r+0x3e>
 802331c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023320:	e00e      	b.n	8023340 <__swhatbuf_r+0x40>
 8023322:	466a      	mov	r2, sp
 8023324:	f001 fac8 	bl	80248b8 <_fstat_r>
 8023328:	2800      	cmp	r0, #0
 802332a:	dbf2      	blt.n	8023312 <__swhatbuf_r+0x12>
 802332c:	9a01      	ldr	r2, [sp, #4]
 802332e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023336:	425a      	negs	r2, r3
 8023338:	415a      	adcs	r2, r3
 802333a:	602a      	str	r2, [r5, #0]
 802333c:	e7ee      	b.n	802331c <__swhatbuf_r+0x1c>
 802333e:	2340      	movs	r3, #64	; 0x40
 8023340:	2000      	movs	r0, #0
 8023342:	6023      	str	r3, [r4, #0]
 8023344:	b016      	add	sp, #88	; 0x58
 8023346:	bd70      	pop	{r4, r5, r6, pc}

08023348 <__smakebuf_r>:
 8023348:	898b      	ldrh	r3, [r1, #12]
 802334a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802334c:	079d      	lsls	r5, r3, #30
 802334e:	4606      	mov	r6, r0
 8023350:	460c      	mov	r4, r1
 8023352:	d507      	bpl.n	8023364 <__smakebuf_r+0x1c>
 8023354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023358:	6023      	str	r3, [r4, #0]
 802335a:	6123      	str	r3, [r4, #16]
 802335c:	2301      	movs	r3, #1
 802335e:	6163      	str	r3, [r4, #20]
 8023360:	b002      	add	sp, #8
 8023362:	bd70      	pop	{r4, r5, r6, pc}
 8023364:	ab01      	add	r3, sp, #4
 8023366:	466a      	mov	r2, sp
 8023368:	f7ff ffca 	bl	8023300 <__swhatbuf_r>
 802336c:	9900      	ldr	r1, [sp, #0]
 802336e:	4605      	mov	r5, r0
 8023370:	4630      	mov	r0, r6
 8023372:	f7fd ff5b 	bl	802122c <_malloc_r>
 8023376:	b948      	cbnz	r0, 802338c <__smakebuf_r+0x44>
 8023378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802337c:	059a      	lsls	r2, r3, #22
 802337e:	d4ef      	bmi.n	8023360 <__smakebuf_r+0x18>
 8023380:	f023 0303 	bic.w	r3, r3, #3
 8023384:	f043 0302 	orr.w	r3, r3, #2
 8023388:	81a3      	strh	r3, [r4, #12]
 802338a:	e7e3      	b.n	8023354 <__smakebuf_r+0xc>
 802338c:	4b0d      	ldr	r3, [pc, #52]	; (80233c4 <__smakebuf_r+0x7c>)
 802338e:	62b3      	str	r3, [r6, #40]	; 0x28
 8023390:	89a3      	ldrh	r3, [r4, #12]
 8023392:	6020      	str	r0, [r4, #0]
 8023394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023398:	81a3      	strh	r3, [r4, #12]
 802339a:	9b00      	ldr	r3, [sp, #0]
 802339c:	6163      	str	r3, [r4, #20]
 802339e:	9b01      	ldr	r3, [sp, #4]
 80233a0:	6120      	str	r0, [r4, #16]
 80233a2:	b15b      	cbz	r3, 80233bc <__smakebuf_r+0x74>
 80233a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80233a8:	4630      	mov	r0, r6
 80233aa:	f001 fa97 	bl	80248dc <_isatty_r>
 80233ae:	b128      	cbz	r0, 80233bc <__smakebuf_r+0x74>
 80233b0:	89a3      	ldrh	r3, [r4, #12]
 80233b2:	f023 0303 	bic.w	r3, r3, #3
 80233b6:	f043 0301 	orr.w	r3, r3, #1
 80233ba:	81a3      	strh	r3, [r4, #12]
 80233bc:	89a0      	ldrh	r0, [r4, #12]
 80233be:	4305      	orrs	r5, r0
 80233c0:	81a5      	strh	r5, [r4, #12]
 80233c2:	e7cd      	b.n	8023360 <__smakebuf_r+0x18>
 80233c4:	08020efd 	.word	0x08020efd

080233c8 <__malloc_lock>:
 80233c8:	4801      	ldr	r0, [pc, #4]	; (80233d0 <__malloc_lock+0x8>)
 80233ca:	f7fd be8e 	b.w	80210ea <__retarget_lock_acquire_recursive>
 80233ce:	bf00      	nop
 80233d0:	2001b1e4 	.word	0x2001b1e4

080233d4 <__malloc_unlock>:
 80233d4:	4801      	ldr	r0, [pc, #4]	; (80233dc <__malloc_unlock+0x8>)
 80233d6:	f7fd be89 	b.w	80210ec <__retarget_lock_release_recursive>
 80233da:	bf00      	nop
 80233dc:	2001b1e4 	.word	0x2001b1e4

080233e0 <_Balloc>:
 80233e0:	b570      	push	{r4, r5, r6, lr}
 80233e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80233e4:	4604      	mov	r4, r0
 80233e6:	460d      	mov	r5, r1
 80233e8:	b976      	cbnz	r6, 8023408 <_Balloc+0x28>
 80233ea:	2010      	movs	r0, #16
 80233ec:	f7fd fe80 	bl	80210f0 <malloc>
 80233f0:	4602      	mov	r2, r0
 80233f2:	6260      	str	r0, [r4, #36]	; 0x24
 80233f4:	b920      	cbnz	r0, 8023400 <_Balloc+0x20>
 80233f6:	4b18      	ldr	r3, [pc, #96]	; (8023458 <_Balloc+0x78>)
 80233f8:	4818      	ldr	r0, [pc, #96]	; (802345c <_Balloc+0x7c>)
 80233fa:	2166      	movs	r1, #102	; 0x66
 80233fc:	f7fe ffea 	bl	80223d4 <__assert_func>
 8023400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023404:	6006      	str	r6, [r0, #0]
 8023406:	60c6      	str	r6, [r0, #12]
 8023408:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802340a:	68f3      	ldr	r3, [r6, #12]
 802340c:	b183      	cbz	r3, 8023430 <_Balloc+0x50>
 802340e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023410:	68db      	ldr	r3, [r3, #12]
 8023412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023416:	b9b8      	cbnz	r0, 8023448 <_Balloc+0x68>
 8023418:	2101      	movs	r1, #1
 802341a:	fa01 f605 	lsl.w	r6, r1, r5
 802341e:	1d72      	adds	r2, r6, #5
 8023420:	0092      	lsls	r2, r2, #2
 8023422:	4620      	mov	r0, r4
 8023424:	f000 fb5a 	bl	8023adc <_calloc_r>
 8023428:	b160      	cbz	r0, 8023444 <_Balloc+0x64>
 802342a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802342e:	e00e      	b.n	802344e <_Balloc+0x6e>
 8023430:	2221      	movs	r2, #33	; 0x21
 8023432:	2104      	movs	r1, #4
 8023434:	4620      	mov	r0, r4
 8023436:	f000 fb51 	bl	8023adc <_calloc_r>
 802343a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802343c:	60f0      	str	r0, [r6, #12]
 802343e:	68db      	ldr	r3, [r3, #12]
 8023440:	2b00      	cmp	r3, #0
 8023442:	d1e4      	bne.n	802340e <_Balloc+0x2e>
 8023444:	2000      	movs	r0, #0
 8023446:	bd70      	pop	{r4, r5, r6, pc}
 8023448:	6802      	ldr	r2, [r0, #0]
 802344a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802344e:	2300      	movs	r3, #0
 8023450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023454:	e7f7      	b.n	8023446 <_Balloc+0x66>
 8023456:	bf00      	nop
 8023458:	08029b76 	.word	0x08029b76
 802345c:	08029d06 	.word	0x08029d06

08023460 <_Bfree>:
 8023460:	b570      	push	{r4, r5, r6, lr}
 8023462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023464:	4605      	mov	r5, r0
 8023466:	460c      	mov	r4, r1
 8023468:	b976      	cbnz	r6, 8023488 <_Bfree+0x28>
 802346a:	2010      	movs	r0, #16
 802346c:	f7fd fe40 	bl	80210f0 <malloc>
 8023470:	4602      	mov	r2, r0
 8023472:	6268      	str	r0, [r5, #36]	; 0x24
 8023474:	b920      	cbnz	r0, 8023480 <_Bfree+0x20>
 8023476:	4b09      	ldr	r3, [pc, #36]	; (802349c <_Bfree+0x3c>)
 8023478:	4809      	ldr	r0, [pc, #36]	; (80234a0 <_Bfree+0x40>)
 802347a:	218a      	movs	r1, #138	; 0x8a
 802347c:	f7fe ffaa 	bl	80223d4 <__assert_func>
 8023480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023484:	6006      	str	r6, [r0, #0]
 8023486:	60c6      	str	r6, [r0, #12]
 8023488:	b13c      	cbz	r4, 802349a <_Bfree+0x3a>
 802348a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802348c:	6862      	ldr	r2, [r4, #4]
 802348e:	68db      	ldr	r3, [r3, #12]
 8023490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023494:	6021      	str	r1, [r4, #0]
 8023496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802349a:	bd70      	pop	{r4, r5, r6, pc}
 802349c:	08029b76 	.word	0x08029b76
 80234a0:	08029d06 	.word	0x08029d06

080234a4 <__multadd>:
 80234a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234a8:	690e      	ldr	r6, [r1, #16]
 80234aa:	4607      	mov	r7, r0
 80234ac:	4698      	mov	r8, r3
 80234ae:	460c      	mov	r4, r1
 80234b0:	f101 0014 	add.w	r0, r1, #20
 80234b4:	2300      	movs	r3, #0
 80234b6:	6805      	ldr	r5, [r0, #0]
 80234b8:	b2a9      	uxth	r1, r5
 80234ba:	fb02 8101 	mla	r1, r2, r1, r8
 80234be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80234c2:	0c2d      	lsrs	r5, r5, #16
 80234c4:	fb02 c505 	mla	r5, r2, r5, ip
 80234c8:	b289      	uxth	r1, r1
 80234ca:	3301      	adds	r3, #1
 80234cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80234d0:	429e      	cmp	r6, r3
 80234d2:	f840 1b04 	str.w	r1, [r0], #4
 80234d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80234da:	dcec      	bgt.n	80234b6 <__multadd+0x12>
 80234dc:	f1b8 0f00 	cmp.w	r8, #0
 80234e0:	d022      	beq.n	8023528 <__multadd+0x84>
 80234e2:	68a3      	ldr	r3, [r4, #8]
 80234e4:	42b3      	cmp	r3, r6
 80234e6:	dc19      	bgt.n	802351c <__multadd+0x78>
 80234e8:	6861      	ldr	r1, [r4, #4]
 80234ea:	4638      	mov	r0, r7
 80234ec:	3101      	adds	r1, #1
 80234ee:	f7ff ff77 	bl	80233e0 <_Balloc>
 80234f2:	4605      	mov	r5, r0
 80234f4:	b928      	cbnz	r0, 8023502 <__multadd+0x5e>
 80234f6:	4602      	mov	r2, r0
 80234f8:	4b0d      	ldr	r3, [pc, #52]	; (8023530 <__multadd+0x8c>)
 80234fa:	480e      	ldr	r0, [pc, #56]	; (8023534 <__multadd+0x90>)
 80234fc:	21b5      	movs	r1, #181	; 0xb5
 80234fe:	f7fe ff69 	bl	80223d4 <__assert_func>
 8023502:	6922      	ldr	r2, [r4, #16]
 8023504:	3202      	adds	r2, #2
 8023506:	f104 010c 	add.w	r1, r4, #12
 802350a:	0092      	lsls	r2, r2, #2
 802350c:	300c      	adds	r0, #12
 802350e:	f7fd fe0d 	bl	802112c <memcpy>
 8023512:	4621      	mov	r1, r4
 8023514:	4638      	mov	r0, r7
 8023516:	f7ff ffa3 	bl	8023460 <_Bfree>
 802351a:	462c      	mov	r4, r5
 802351c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8023520:	3601      	adds	r6, #1
 8023522:	f8c3 8014 	str.w	r8, [r3, #20]
 8023526:	6126      	str	r6, [r4, #16]
 8023528:	4620      	mov	r0, r4
 802352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802352e:	bf00      	nop
 8023530:	08029cf5 	.word	0x08029cf5
 8023534:	08029d06 	.word	0x08029d06

08023538 <__hi0bits>:
 8023538:	0c03      	lsrs	r3, r0, #16
 802353a:	041b      	lsls	r3, r3, #16
 802353c:	b9d3      	cbnz	r3, 8023574 <__hi0bits+0x3c>
 802353e:	0400      	lsls	r0, r0, #16
 8023540:	2310      	movs	r3, #16
 8023542:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023546:	bf04      	itt	eq
 8023548:	0200      	lsleq	r0, r0, #8
 802354a:	3308      	addeq	r3, #8
 802354c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023550:	bf04      	itt	eq
 8023552:	0100      	lsleq	r0, r0, #4
 8023554:	3304      	addeq	r3, #4
 8023556:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802355a:	bf04      	itt	eq
 802355c:	0080      	lsleq	r0, r0, #2
 802355e:	3302      	addeq	r3, #2
 8023560:	2800      	cmp	r0, #0
 8023562:	db05      	blt.n	8023570 <__hi0bits+0x38>
 8023564:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023568:	f103 0301 	add.w	r3, r3, #1
 802356c:	bf08      	it	eq
 802356e:	2320      	moveq	r3, #32
 8023570:	4618      	mov	r0, r3
 8023572:	4770      	bx	lr
 8023574:	2300      	movs	r3, #0
 8023576:	e7e4      	b.n	8023542 <__hi0bits+0xa>

08023578 <__lo0bits>:
 8023578:	6803      	ldr	r3, [r0, #0]
 802357a:	f013 0207 	ands.w	r2, r3, #7
 802357e:	4601      	mov	r1, r0
 8023580:	d00b      	beq.n	802359a <__lo0bits+0x22>
 8023582:	07da      	lsls	r2, r3, #31
 8023584:	d424      	bmi.n	80235d0 <__lo0bits+0x58>
 8023586:	0798      	lsls	r0, r3, #30
 8023588:	bf49      	itett	mi
 802358a:	085b      	lsrmi	r3, r3, #1
 802358c:	089b      	lsrpl	r3, r3, #2
 802358e:	2001      	movmi	r0, #1
 8023590:	600b      	strmi	r3, [r1, #0]
 8023592:	bf5c      	itt	pl
 8023594:	600b      	strpl	r3, [r1, #0]
 8023596:	2002      	movpl	r0, #2
 8023598:	4770      	bx	lr
 802359a:	b298      	uxth	r0, r3
 802359c:	b9b0      	cbnz	r0, 80235cc <__lo0bits+0x54>
 802359e:	0c1b      	lsrs	r3, r3, #16
 80235a0:	2010      	movs	r0, #16
 80235a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80235a6:	bf04      	itt	eq
 80235a8:	0a1b      	lsreq	r3, r3, #8
 80235aa:	3008      	addeq	r0, #8
 80235ac:	071a      	lsls	r2, r3, #28
 80235ae:	bf04      	itt	eq
 80235b0:	091b      	lsreq	r3, r3, #4
 80235b2:	3004      	addeq	r0, #4
 80235b4:	079a      	lsls	r2, r3, #30
 80235b6:	bf04      	itt	eq
 80235b8:	089b      	lsreq	r3, r3, #2
 80235ba:	3002      	addeq	r0, #2
 80235bc:	07da      	lsls	r2, r3, #31
 80235be:	d403      	bmi.n	80235c8 <__lo0bits+0x50>
 80235c0:	085b      	lsrs	r3, r3, #1
 80235c2:	f100 0001 	add.w	r0, r0, #1
 80235c6:	d005      	beq.n	80235d4 <__lo0bits+0x5c>
 80235c8:	600b      	str	r3, [r1, #0]
 80235ca:	4770      	bx	lr
 80235cc:	4610      	mov	r0, r2
 80235ce:	e7e8      	b.n	80235a2 <__lo0bits+0x2a>
 80235d0:	2000      	movs	r0, #0
 80235d2:	4770      	bx	lr
 80235d4:	2020      	movs	r0, #32
 80235d6:	4770      	bx	lr

080235d8 <__i2b>:
 80235d8:	b510      	push	{r4, lr}
 80235da:	460c      	mov	r4, r1
 80235dc:	2101      	movs	r1, #1
 80235de:	f7ff feff 	bl	80233e0 <_Balloc>
 80235e2:	4602      	mov	r2, r0
 80235e4:	b928      	cbnz	r0, 80235f2 <__i2b+0x1a>
 80235e6:	4b05      	ldr	r3, [pc, #20]	; (80235fc <__i2b+0x24>)
 80235e8:	4805      	ldr	r0, [pc, #20]	; (8023600 <__i2b+0x28>)
 80235ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80235ee:	f7fe fef1 	bl	80223d4 <__assert_func>
 80235f2:	2301      	movs	r3, #1
 80235f4:	6144      	str	r4, [r0, #20]
 80235f6:	6103      	str	r3, [r0, #16]
 80235f8:	bd10      	pop	{r4, pc}
 80235fa:	bf00      	nop
 80235fc:	08029cf5 	.word	0x08029cf5
 8023600:	08029d06 	.word	0x08029d06

08023604 <__multiply>:
 8023604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023608:	4614      	mov	r4, r2
 802360a:	690a      	ldr	r2, [r1, #16]
 802360c:	6923      	ldr	r3, [r4, #16]
 802360e:	429a      	cmp	r2, r3
 8023610:	bfb8      	it	lt
 8023612:	460b      	movlt	r3, r1
 8023614:	460d      	mov	r5, r1
 8023616:	bfbc      	itt	lt
 8023618:	4625      	movlt	r5, r4
 802361a:	461c      	movlt	r4, r3
 802361c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8023620:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023624:	68ab      	ldr	r3, [r5, #8]
 8023626:	6869      	ldr	r1, [r5, #4]
 8023628:	eb0a 0709 	add.w	r7, sl, r9
 802362c:	42bb      	cmp	r3, r7
 802362e:	b085      	sub	sp, #20
 8023630:	bfb8      	it	lt
 8023632:	3101      	addlt	r1, #1
 8023634:	f7ff fed4 	bl	80233e0 <_Balloc>
 8023638:	b930      	cbnz	r0, 8023648 <__multiply+0x44>
 802363a:	4602      	mov	r2, r0
 802363c:	4b42      	ldr	r3, [pc, #264]	; (8023748 <__multiply+0x144>)
 802363e:	4843      	ldr	r0, [pc, #268]	; (802374c <__multiply+0x148>)
 8023640:	f240 115d 	movw	r1, #349	; 0x15d
 8023644:	f7fe fec6 	bl	80223d4 <__assert_func>
 8023648:	f100 0614 	add.w	r6, r0, #20
 802364c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8023650:	4633      	mov	r3, r6
 8023652:	2200      	movs	r2, #0
 8023654:	4543      	cmp	r3, r8
 8023656:	d31e      	bcc.n	8023696 <__multiply+0x92>
 8023658:	f105 0c14 	add.w	ip, r5, #20
 802365c:	f104 0314 	add.w	r3, r4, #20
 8023660:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8023664:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8023668:	9202      	str	r2, [sp, #8]
 802366a:	ebac 0205 	sub.w	r2, ip, r5
 802366e:	3a15      	subs	r2, #21
 8023670:	f022 0203 	bic.w	r2, r2, #3
 8023674:	3204      	adds	r2, #4
 8023676:	f105 0115 	add.w	r1, r5, #21
 802367a:	458c      	cmp	ip, r1
 802367c:	bf38      	it	cc
 802367e:	2204      	movcc	r2, #4
 8023680:	9201      	str	r2, [sp, #4]
 8023682:	9a02      	ldr	r2, [sp, #8]
 8023684:	9303      	str	r3, [sp, #12]
 8023686:	429a      	cmp	r2, r3
 8023688:	d808      	bhi.n	802369c <__multiply+0x98>
 802368a:	2f00      	cmp	r7, #0
 802368c:	dc55      	bgt.n	802373a <__multiply+0x136>
 802368e:	6107      	str	r7, [r0, #16]
 8023690:	b005      	add	sp, #20
 8023692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023696:	f843 2b04 	str.w	r2, [r3], #4
 802369a:	e7db      	b.n	8023654 <__multiply+0x50>
 802369c:	f8b3 a000 	ldrh.w	sl, [r3]
 80236a0:	f1ba 0f00 	cmp.w	sl, #0
 80236a4:	d020      	beq.n	80236e8 <__multiply+0xe4>
 80236a6:	f105 0e14 	add.w	lr, r5, #20
 80236aa:	46b1      	mov	r9, r6
 80236ac:	2200      	movs	r2, #0
 80236ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 80236b2:	f8d9 b000 	ldr.w	fp, [r9]
 80236b6:	b2a1      	uxth	r1, r4
 80236b8:	fa1f fb8b 	uxth.w	fp, fp
 80236bc:	fb0a b101 	mla	r1, sl, r1, fp
 80236c0:	4411      	add	r1, r2
 80236c2:	f8d9 2000 	ldr.w	r2, [r9]
 80236c6:	0c24      	lsrs	r4, r4, #16
 80236c8:	0c12      	lsrs	r2, r2, #16
 80236ca:	fb0a 2404 	mla	r4, sl, r4, r2
 80236ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80236d2:	b289      	uxth	r1, r1
 80236d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80236d8:	45f4      	cmp	ip, lr
 80236da:	f849 1b04 	str.w	r1, [r9], #4
 80236de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80236e2:	d8e4      	bhi.n	80236ae <__multiply+0xaa>
 80236e4:	9901      	ldr	r1, [sp, #4]
 80236e6:	5072      	str	r2, [r6, r1]
 80236e8:	9a03      	ldr	r2, [sp, #12]
 80236ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80236ee:	3304      	adds	r3, #4
 80236f0:	f1b9 0f00 	cmp.w	r9, #0
 80236f4:	d01f      	beq.n	8023736 <__multiply+0x132>
 80236f6:	6834      	ldr	r4, [r6, #0]
 80236f8:	f105 0114 	add.w	r1, r5, #20
 80236fc:	46b6      	mov	lr, r6
 80236fe:	f04f 0a00 	mov.w	sl, #0
 8023702:	880a      	ldrh	r2, [r1, #0]
 8023704:	f8be b002 	ldrh.w	fp, [lr, #2]
 8023708:	fb09 b202 	mla	r2, r9, r2, fp
 802370c:	4492      	add	sl, r2
 802370e:	b2a4      	uxth	r4, r4
 8023710:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023714:	f84e 4b04 	str.w	r4, [lr], #4
 8023718:	f851 4b04 	ldr.w	r4, [r1], #4
 802371c:	f8be 2000 	ldrh.w	r2, [lr]
 8023720:	0c24      	lsrs	r4, r4, #16
 8023722:	fb09 2404 	mla	r4, r9, r4, r2
 8023726:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802372a:	458c      	cmp	ip, r1
 802372c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023730:	d8e7      	bhi.n	8023702 <__multiply+0xfe>
 8023732:	9a01      	ldr	r2, [sp, #4]
 8023734:	50b4      	str	r4, [r6, r2]
 8023736:	3604      	adds	r6, #4
 8023738:	e7a3      	b.n	8023682 <__multiply+0x7e>
 802373a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802373e:	2b00      	cmp	r3, #0
 8023740:	d1a5      	bne.n	802368e <__multiply+0x8a>
 8023742:	3f01      	subs	r7, #1
 8023744:	e7a1      	b.n	802368a <__multiply+0x86>
 8023746:	bf00      	nop
 8023748:	08029cf5 	.word	0x08029cf5
 802374c:	08029d06 	.word	0x08029d06

08023750 <__pow5mult>:
 8023750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023754:	4615      	mov	r5, r2
 8023756:	f012 0203 	ands.w	r2, r2, #3
 802375a:	4606      	mov	r6, r0
 802375c:	460f      	mov	r7, r1
 802375e:	d007      	beq.n	8023770 <__pow5mult+0x20>
 8023760:	4c25      	ldr	r4, [pc, #148]	; (80237f8 <__pow5mult+0xa8>)
 8023762:	3a01      	subs	r2, #1
 8023764:	2300      	movs	r3, #0
 8023766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802376a:	f7ff fe9b 	bl	80234a4 <__multadd>
 802376e:	4607      	mov	r7, r0
 8023770:	10ad      	asrs	r5, r5, #2
 8023772:	d03d      	beq.n	80237f0 <__pow5mult+0xa0>
 8023774:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023776:	b97c      	cbnz	r4, 8023798 <__pow5mult+0x48>
 8023778:	2010      	movs	r0, #16
 802377a:	f7fd fcb9 	bl	80210f0 <malloc>
 802377e:	4602      	mov	r2, r0
 8023780:	6270      	str	r0, [r6, #36]	; 0x24
 8023782:	b928      	cbnz	r0, 8023790 <__pow5mult+0x40>
 8023784:	4b1d      	ldr	r3, [pc, #116]	; (80237fc <__pow5mult+0xac>)
 8023786:	481e      	ldr	r0, [pc, #120]	; (8023800 <__pow5mult+0xb0>)
 8023788:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802378c:	f7fe fe22 	bl	80223d4 <__assert_func>
 8023790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023794:	6004      	str	r4, [r0, #0]
 8023796:	60c4      	str	r4, [r0, #12]
 8023798:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802379c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80237a0:	b94c      	cbnz	r4, 80237b6 <__pow5mult+0x66>
 80237a2:	f240 2171 	movw	r1, #625	; 0x271
 80237a6:	4630      	mov	r0, r6
 80237a8:	f7ff ff16 	bl	80235d8 <__i2b>
 80237ac:	2300      	movs	r3, #0
 80237ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80237b2:	4604      	mov	r4, r0
 80237b4:	6003      	str	r3, [r0, #0]
 80237b6:	f04f 0900 	mov.w	r9, #0
 80237ba:	07eb      	lsls	r3, r5, #31
 80237bc:	d50a      	bpl.n	80237d4 <__pow5mult+0x84>
 80237be:	4639      	mov	r1, r7
 80237c0:	4622      	mov	r2, r4
 80237c2:	4630      	mov	r0, r6
 80237c4:	f7ff ff1e 	bl	8023604 <__multiply>
 80237c8:	4639      	mov	r1, r7
 80237ca:	4680      	mov	r8, r0
 80237cc:	4630      	mov	r0, r6
 80237ce:	f7ff fe47 	bl	8023460 <_Bfree>
 80237d2:	4647      	mov	r7, r8
 80237d4:	106d      	asrs	r5, r5, #1
 80237d6:	d00b      	beq.n	80237f0 <__pow5mult+0xa0>
 80237d8:	6820      	ldr	r0, [r4, #0]
 80237da:	b938      	cbnz	r0, 80237ec <__pow5mult+0x9c>
 80237dc:	4622      	mov	r2, r4
 80237de:	4621      	mov	r1, r4
 80237e0:	4630      	mov	r0, r6
 80237e2:	f7ff ff0f 	bl	8023604 <__multiply>
 80237e6:	6020      	str	r0, [r4, #0]
 80237e8:	f8c0 9000 	str.w	r9, [r0]
 80237ec:	4604      	mov	r4, r0
 80237ee:	e7e4      	b.n	80237ba <__pow5mult+0x6a>
 80237f0:	4638      	mov	r0, r7
 80237f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80237f6:	bf00      	nop
 80237f8:	08029e58 	.word	0x08029e58
 80237fc:	08029b76 	.word	0x08029b76
 8023800:	08029d06 	.word	0x08029d06

08023804 <__lshift>:
 8023804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023808:	460c      	mov	r4, r1
 802380a:	6849      	ldr	r1, [r1, #4]
 802380c:	6923      	ldr	r3, [r4, #16]
 802380e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023812:	68a3      	ldr	r3, [r4, #8]
 8023814:	4607      	mov	r7, r0
 8023816:	4691      	mov	r9, r2
 8023818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802381c:	f108 0601 	add.w	r6, r8, #1
 8023820:	42b3      	cmp	r3, r6
 8023822:	db0b      	blt.n	802383c <__lshift+0x38>
 8023824:	4638      	mov	r0, r7
 8023826:	f7ff fddb 	bl	80233e0 <_Balloc>
 802382a:	4605      	mov	r5, r0
 802382c:	b948      	cbnz	r0, 8023842 <__lshift+0x3e>
 802382e:	4602      	mov	r2, r0
 8023830:	4b28      	ldr	r3, [pc, #160]	; (80238d4 <__lshift+0xd0>)
 8023832:	4829      	ldr	r0, [pc, #164]	; (80238d8 <__lshift+0xd4>)
 8023834:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023838:	f7fe fdcc 	bl	80223d4 <__assert_func>
 802383c:	3101      	adds	r1, #1
 802383e:	005b      	lsls	r3, r3, #1
 8023840:	e7ee      	b.n	8023820 <__lshift+0x1c>
 8023842:	2300      	movs	r3, #0
 8023844:	f100 0114 	add.w	r1, r0, #20
 8023848:	f100 0210 	add.w	r2, r0, #16
 802384c:	4618      	mov	r0, r3
 802384e:	4553      	cmp	r3, sl
 8023850:	db33      	blt.n	80238ba <__lshift+0xb6>
 8023852:	6920      	ldr	r0, [r4, #16]
 8023854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023858:	f104 0314 	add.w	r3, r4, #20
 802385c:	f019 091f 	ands.w	r9, r9, #31
 8023860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023868:	d02b      	beq.n	80238c2 <__lshift+0xbe>
 802386a:	f1c9 0e20 	rsb	lr, r9, #32
 802386e:	468a      	mov	sl, r1
 8023870:	2200      	movs	r2, #0
 8023872:	6818      	ldr	r0, [r3, #0]
 8023874:	fa00 f009 	lsl.w	r0, r0, r9
 8023878:	4302      	orrs	r2, r0
 802387a:	f84a 2b04 	str.w	r2, [sl], #4
 802387e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023882:	459c      	cmp	ip, r3
 8023884:	fa22 f20e 	lsr.w	r2, r2, lr
 8023888:	d8f3      	bhi.n	8023872 <__lshift+0x6e>
 802388a:	ebac 0304 	sub.w	r3, ip, r4
 802388e:	3b15      	subs	r3, #21
 8023890:	f023 0303 	bic.w	r3, r3, #3
 8023894:	3304      	adds	r3, #4
 8023896:	f104 0015 	add.w	r0, r4, #21
 802389a:	4584      	cmp	ip, r0
 802389c:	bf38      	it	cc
 802389e:	2304      	movcc	r3, #4
 80238a0:	50ca      	str	r2, [r1, r3]
 80238a2:	b10a      	cbz	r2, 80238a8 <__lshift+0xa4>
 80238a4:	f108 0602 	add.w	r6, r8, #2
 80238a8:	3e01      	subs	r6, #1
 80238aa:	4638      	mov	r0, r7
 80238ac:	612e      	str	r6, [r5, #16]
 80238ae:	4621      	mov	r1, r4
 80238b0:	f7ff fdd6 	bl	8023460 <_Bfree>
 80238b4:	4628      	mov	r0, r5
 80238b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80238ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80238be:	3301      	adds	r3, #1
 80238c0:	e7c5      	b.n	802384e <__lshift+0x4a>
 80238c2:	3904      	subs	r1, #4
 80238c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80238c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80238cc:	459c      	cmp	ip, r3
 80238ce:	d8f9      	bhi.n	80238c4 <__lshift+0xc0>
 80238d0:	e7ea      	b.n	80238a8 <__lshift+0xa4>
 80238d2:	bf00      	nop
 80238d4:	08029cf5 	.word	0x08029cf5
 80238d8:	08029d06 	.word	0x08029d06

080238dc <__mcmp>:
 80238dc:	b530      	push	{r4, r5, lr}
 80238de:	6902      	ldr	r2, [r0, #16]
 80238e0:	690c      	ldr	r4, [r1, #16]
 80238e2:	1b12      	subs	r2, r2, r4
 80238e4:	d10e      	bne.n	8023904 <__mcmp+0x28>
 80238e6:	f100 0314 	add.w	r3, r0, #20
 80238ea:	3114      	adds	r1, #20
 80238ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80238f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80238f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80238f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80238fc:	42a5      	cmp	r5, r4
 80238fe:	d003      	beq.n	8023908 <__mcmp+0x2c>
 8023900:	d305      	bcc.n	802390e <__mcmp+0x32>
 8023902:	2201      	movs	r2, #1
 8023904:	4610      	mov	r0, r2
 8023906:	bd30      	pop	{r4, r5, pc}
 8023908:	4283      	cmp	r3, r0
 802390a:	d3f3      	bcc.n	80238f4 <__mcmp+0x18>
 802390c:	e7fa      	b.n	8023904 <__mcmp+0x28>
 802390e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023912:	e7f7      	b.n	8023904 <__mcmp+0x28>

08023914 <__mdiff>:
 8023914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023918:	460c      	mov	r4, r1
 802391a:	4606      	mov	r6, r0
 802391c:	4611      	mov	r1, r2
 802391e:	4620      	mov	r0, r4
 8023920:	4617      	mov	r7, r2
 8023922:	f7ff ffdb 	bl	80238dc <__mcmp>
 8023926:	1e05      	subs	r5, r0, #0
 8023928:	d110      	bne.n	802394c <__mdiff+0x38>
 802392a:	4629      	mov	r1, r5
 802392c:	4630      	mov	r0, r6
 802392e:	f7ff fd57 	bl	80233e0 <_Balloc>
 8023932:	b930      	cbnz	r0, 8023942 <__mdiff+0x2e>
 8023934:	4b39      	ldr	r3, [pc, #228]	; (8023a1c <__mdiff+0x108>)
 8023936:	4602      	mov	r2, r0
 8023938:	f240 2132 	movw	r1, #562	; 0x232
 802393c:	4838      	ldr	r0, [pc, #224]	; (8023a20 <__mdiff+0x10c>)
 802393e:	f7fe fd49 	bl	80223d4 <__assert_func>
 8023942:	2301      	movs	r3, #1
 8023944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802394c:	bfa4      	itt	ge
 802394e:	463b      	movge	r3, r7
 8023950:	4627      	movge	r7, r4
 8023952:	4630      	mov	r0, r6
 8023954:	6879      	ldr	r1, [r7, #4]
 8023956:	bfa6      	itte	ge
 8023958:	461c      	movge	r4, r3
 802395a:	2500      	movge	r5, #0
 802395c:	2501      	movlt	r5, #1
 802395e:	f7ff fd3f 	bl	80233e0 <_Balloc>
 8023962:	b920      	cbnz	r0, 802396e <__mdiff+0x5a>
 8023964:	4b2d      	ldr	r3, [pc, #180]	; (8023a1c <__mdiff+0x108>)
 8023966:	4602      	mov	r2, r0
 8023968:	f44f 7110 	mov.w	r1, #576	; 0x240
 802396c:	e7e6      	b.n	802393c <__mdiff+0x28>
 802396e:	693e      	ldr	r6, [r7, #16]
 8023970:	60c5      	str	r5, [r0, #12]
 8023972:	6925      	ldr	r5, [r4, #16]
 8023974:	f107 0114 	add.w	r1, r7, #20
 8023978:	f104 0914 	add.w	r9, r4, #20
 802397c:	f100 0e14 	add.w	lr, r0, #20
 8023980:	f107 0210 	add.w	r2, r7, #16
 8023984:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8023988:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802398c:	46f2      	mov	sl, lr
 802398e:	2700      	movs	r7, #0
 8023990:	f859 3b04 	ldr.w	r3, [r9], #4
 8023994:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023998:	fa1f f883 	uxth.w	r8, r3
 802399c:	fa17 f78b 	uxtah	r7, r7, fp
 80239a0:	0c1b      	lsrs	r3, r3, #16
 80239a2:	eba7 0808 	sub.w	r8, r7, r8
 80239a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80239aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80239ae:	fa1f f888 	uxth.w	r8, r8
 80239b2:	141f      	asrs	r7, r3, #16
 80239b4:	454d      	cmp	r5, r9
 80239b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80239ba:	f84a 3b04 	str.w	r3, [sl], #4
 80239be:	d8e7      	bhi.n	8023990 <__mdiff+0x7c>
 80239c0:	1b2b      	subs	r3, r5, r4
 80239c2:	3b15      	subs	r3, #21
 80239c4:	f023 0303 	bic.w	r3, r3, #3
 80239c8:	3304      	adds	r3, #4
 80239ca:	3415      	adds	r4, #21
 80239cc:	42a5      	cmp	r5, r4
 80239ce:	bf38      	it	cc
 80239d0:	2304      	movcc	r3, #4
 80239d2:	4419      	add	r1, r3
 80239d4:	4473      	add	r3, lr
 80239d6:	469e      	mov	lr, r3
 80239d8:	460d      	mov	r5, r1
 80239da:	4565      	cmp	r5, ip
 80239dc:	d30e      	bcc.n	80239fc <__mdiff+0xe8>
 80239de:	f10c 0203 	add.w	r2, ip, #3
 80239e2:	1a52      	subs	r2, r2, r1
 80239e4:	f022 0203 	bic.w	r2, r2, #3
 80239e8:	3903      	subs	r1, #3
 80239ea:	458c      	cmp	ip, r1
 80239ec:	bf38      	it	cc
 80239ee:	2200      	movcc	r2, #0
 80239f0:	441a      	add	r2, r3
 80239f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80239f6:	b17b      	cbz	r3, 8023a18 <__mdiff+0x104>
 80239f8:	6106      	str	r6, [r0, #16]
 80239fa:	e7a5      	b.n	8023948 <__mdiff+0x34>
 80239fc:	f855 8b04 	ldr.w	r8, [r5], #4
 8023a00:	fa17 f488 	uxtah	r4, r7, r8
 8023a04:	1422      	asrs	r2, r4, #16
 8023a06:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8023a0a:	b2a4      	uxth	r4, r4
 8023a0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8023a10:	f84e 4b04 	str.w	r4, [lr], #4
 8023a14:	1417      	asrs	r7, r2, #16
 8023a16:	e7e0      	b.n	80239da <__mdiff+0xc6>
 8023a18:	3e01      	subs	r6, #1
 8023a1a:	e7ea      	b.n	80239f2 <__mdiff+0xde>
 8023a1c:	08029cf5 	.word	0x08029cf5
 8023a20:	08029d06 	.word	0x08029d06

08023a24 <__d2b>:
 8023a24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023a28:	4689      	mov	r9, r1
 8023a2a:	2101      	movs	r1, #1
 8023a2c:	ec57 6b10 	vmov	r6, r7, d0
 8023a30:	4690      	mov	r8, r2
 8023a32:	f7ff fcd5 	bl	80233e0 <_Balloc>
 8023a36:	4604      	mov	r4, r0
 8023a38:	b930      	cbnz	r0, 8023a48 <__d2b+0x24>
 8023a3a:	4602      	mov	r2, r0
 8023a3c:	4b25      	ldr	r3, [pc, #148]	; (8023ad4 <__d2b+0xb0>)
 8023a3e:	4826      	ldr	r0, [pc, #152]	; (8023ad8 <__d2b+0xb4>)
 8023a40:	f240 310a 	movw	r1, #778	; 0x30a
 8023a44:	f7fe fcc6 	bl	80223d4 <__assert_func>
 8023a48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8023a4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023a50:	bb35      	cbnz	r5, 8023aa0 <__d2b+0x7c>
 8023a52:	2e00      	cmp	r6, #0
 8023a54:	9301      	str	r3, [sp, #4]
 8023a56:	d028      	beq.n	8023aaa <__d2b+0x86>
 8023a58:	4668      	mov	r0, sp
 8023a5a:	9600      	str	r6, [sp, #0]
 8023a5c:	f7ff fd8c 	bl	8023578 <__lo0bits>
 8023a60:	9900      	ldr	r1, [sp, #0]
 8023a62:	b300      	cbz	r0, 8023aa6 <__d2b+0x82>
 8023a64:	9a01      	ldr	r2, [sp, #4]
 8023a66:	f1c0 0320 	rsb	r3, r0, #32
 8023a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8023a6e:	430b      	orrs	r3, r1
 8023a70:	40c2      	lsrs	r2, r0
 8023a72:	6163      	str	r3, [r4, #20]
 8023a74:	9201      	str	r2, [sp, #4]
 8023a76:	9b01      	ldr	r3, [sp, #4]
 8023a78:	61a3      	str	r3, [r4, #24]
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	bf14      	ite	ne
 8023a7e:	2202      	movne	r2, #2
 8023a80:	2201      	moveq	r2, #1
 8023a82:	6122      	str	r2, [r4, #16]
 8023a84:	b1d5      	cbz	r5, 8023abc <__d2b+0x98>
 8023a86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023a8a:	4405      	add	r5, r0
 8023a8c:	f8c9 5000 	str.w	r5, [r9]
 8023a90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023a94:	f8c8 0000 	str.w	r0, [r8]
 8023a98:	4620      	mov	r0, r4
 8023a9a:	b003      	add	sp, #12
 8023a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023aa4:	e7d5      	b.n	8023a52 <__d2b+0x2e>
 8023aa6:	6161      	str	r1, [r4, #20]
 8023aa8:	e7e5      	b.n	8023a76 <__d2b+0x52>
 8023aaa:	a801      	add	r0, sp, #4
 8023aac:	f7ff fd64 	bl	8023578 <__lo0bits>
 8023ab0:	9b01      	ldr	r3, [sp, #4]
 8023ab2:	6163      	str	r3, [r4, #20]
 8023ab4:	2201      	movs	r2, #1
 8023ab6:	6122      	str	r2, [r4, #16]
 8023ab8:	3020      	adds	r0, #32
 8023aba:	e7e3      	b.n	8023a84 <__d2b+0x60>
 8023abc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023ac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023ac4:	f8c9 0000 	str.w	r0, [r9]
 8023ac8:	6918      	ldr	r0, [r3, #16]
 8023aca:	f7ff fd35 	bl	8023538 <__hi0bits>
 8023ace:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023ad2:	e7df      	b.n	8023a94 <__d2b+0x70>
 8023ad4:	08029cf5 	.word	0x08029cf5
 8023ad8:	08029d06 	.word	0x08029d06

08023adc <_calloc_r>:
 8023adc:	b513      	push	{r0, r1, r4, lr}
 8023ade:	434a      	muls	r2, r1
 8023ae0:	4611      	mov	r1, r2
 8023ae2:	9201      	str	r2, [sp, #4]
 8023ae4:	f7fd fba2 	bl	802122c <_malloc_r>
 8023ae8:	4604      	mov	r4, r0
 8023aea:	b118      	cbz	r0, 8023af4 <_calloc_r+0x18>
 8023aec:	9a01      	ldr	r2, [sp, #4]
 8023aee:	2100      	movs	r1, #0
 8023af0:	f7fd fb44 	bl	802117c <memset>
 8023af4:	4620      	mov	r0, r4
 8023af6:	b002      	add	sp, #8
 8023af8:	bd10      	pop	{r4, pc}

08023afa <__ssputs_r>:
 8023afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023afe:	688e      	ldr	r6, [r1, #8]
 8023b00:	429e      	cmp	r6, r3
 8023b02:	4682      	mov	sl, r0
 8023b04:	460c      	mov	r4, r1
 8023b06:	4690      	mov	r8, r2
 8023b08:	461f      	mov	r7, r3
 8023b0a:	d838      	bhi.n	8023b7e <__ssputs_r+0x84>
 8023b0c:	898a      	ldrh	r2, [r1, #12]
 8023b0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023b12:	d032      	beq.n	8023b7a <__ssputs_r+0x80>
 8023b14:	6825      	ldr	r5, [r4, #0]
 8023b16:	6909      	ldr	r1, [r1, #16]
 8023b18:	eba5 0901 	sub.w	r9, r5, r1
 8023b1c:	6965      	ldr	r5, [r4, #20]
 8023b1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023b26:	3301      	adds	r3, #1
 8023b28:	444b      	add	r3, r9
 8023b2a:	106d      	asrs	r5, r5, #1
 8023b2c:	429d      	cmp	r5, r3
 8023b2e:	bf38      	it	cc
 8023b30:	461d      	movcc	r5, r3
 8023b32:	0553      	lsls	r3, r2, #21
 8023b34:	d531      	bpl.n	8023b9a <__ssputs_r+0xa0>
 8023b36:	4629      	mov	r1, r5
 8023b38:	f7fd fb78 	bl	802122c <_malloc_r>
 8023b3c:	4606      	mov	r6, r0
 8023b3e:	b950      	cbnz	r0, 8023b56 <__ssputs_r+0x5c>
 8023b40:	230c      	movs	r3, #12
 8023b42:	f8ca 3000 	str.w	r3, [sl]
 8023b46:	89a3      	ldrh	r3, [r4, #12]
 8023b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b4c:	81a3      	strh	r3, [r4, #12]
 8023b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b56:	6921      	ldr	r1, [r4, #16]
 8023b58:	464a      	mov	r2, r9
 8023b5a:	f7fd fae7 	bl	802112c <memcpy>
 8023b5e:	89a3      	ldrh	r3, [r4, #12]
 8023b60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023b68:	81a3      	strh	r3, [r4, #12]
 8023b6a:	6126      	str	r6, [r4, #16]
 8023b6c:	6165      	str	r5, [r4, #20]
 8023b6e:	444e      	add	r6, r9
 8023b70:	eba5 0509 	sub.w	r5, r5, r9
 8023b74:	6026      	str	r6, [r4, #0]
 8023b76:	60a5      	str	r5, [r4, #8]
 8023b78:	463e      	mov	r6, r7
 8023b7a:	42be      	cmp	r6, r7
 8023b7c:	d900      	bls.n	8023b80 <__ssputs_r+0x86>
 8023b7e:	463e      	mov	r6, r7
 8023b80:	4632      	mov	r2, r6
 8023b82:	6820      	ldr	r0, [r4, #0]
 8023b84:	4641      	mov	r1, r8
 8023b86:	f7fd fadf 	bl	8021148 <memmove>
 8023b8a:	68a3      	ldr	r3, [r4, #8]
 8023b8c:	6822      	ldr	r2, [r4, #0]
 8023b8e:	1b9b      	subs	r3, r3, r6
 8023b90:	4432      	add	r2, r6
 8023b92:	60a3      	str	r3, [r4, #8]
 8023b94:	6022      	str	r2, [r4, #0]
 8023b96:	2000      	movs	r0, #0
 8023b98:	e7db      	b.n	8023b52 <__ssputs_r+0x58>
 8023b9a:	462a      	mov	r2, r5
 8023b9c:	f000 fec0 	bl	8024920 <_realloc_r>
 8023ba0:	4606      	mov	r6, r0
 8023ba2:	2800      	cmp	r0, #0
 8023ba4:	d1e1      	bne.n	8023b6a <__ssputs_r+0x70>
 8023ba6:	6921      	ldr	r1, [r4, #16]
 8023ba8:	4650      	mov	r0, sl
 8023baa:	f7fd faef 	bl	802118c <_free_r>
 8023bae:	e7c7      	b.n	8023b40 <__ssputs_r+0x46>

08023bb0 <_svfiprintf_r>:
 8023bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bb4:	4698      	mov	r8, r3
 8023bb6:	898b      	ldrh	r3, [r1, #12]
 8023bb8:	061b      	lsls	r3, r3, #24
 8023bba:	b09d      	sub	sp, #116	; 0x74
 8023bbc:	4607      	mov	r7, r0
 8023bbe:	460d      	mov	r5, r1
 8023bc0:	4614      	mov	r4, r2
 8023bc2:	d50e      	bpl.n	8023be2 <_svfiprintf_r+0x32>
 8023bc4:	690b      	ldr	r3, [r1, #16]
 8023bc6:	b963      	cbnz	r3, 8023be2 <_svfiprintf_r+0x32>
 8023bc8:	2140      	movs	r1, #64	; 0x40
 8023bca:	f7fd fb2f 	bl	802122c <_malloc_r>
 8023bce:	6028      	str	r0, [r5, #0]
 8023bd0:	6128      	str	r0, [r5, #16]
 8023bd2:	b920      	cbnz	r0, 8023bde <_svfiprintf_r+0x2e>
 8023bd4:	230c      	movs	r3, #12
 8023bd6:	603b      	str	r3, [r7, #0]
 8023bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023bdc:	e0d1      	b.n	8023d82 <_svfiprintf_r+0x1d2>
 8023bde:	2340      	movs	r3, #64	; 0x40
 8023be0:	616b      	str	r3, [r5, #20]
 8023be2:	2300      	movs	r3, #0
 8023be4:	9309      	str	r3, [sp, #36]	; 0x24
 8023be6:	2320      	movs	r3, #32
 8023be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8023bf0:	2330      	movs	r3, #48	; 0x30
 8023bf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023d9c <_svfiprintf_r+0x1ec>
 8023bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023bfa:	f04f 0901 	mov.w	r9, #1
 8023bfe:	4623      	mov	r3, r4
 8023c00:	469a      	mov	sl, r3
 8023c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023c06:	b10a      	cbz	r2, 8023c0c <_svfiprintf_r+0x5c>
 8023c08:	2a25      	cmp	r2, #37	; 0x25
 8023c0a:	d1f9      	bne.n	8023c00 <_svfiprintf_r+0x50>
 8023c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8023c10:	d00b      	beq.n	8023c2a <_svfiprintf_r+0x7a>
 8023c12:	465b      	mov	r3, fp
 8023c14:	4622      	mov	r2, r4
 8023c16:	4629      	mov	r1, r5
 8023c18:	4638      	mov	r0, r7
 8023c1a:	f7ff ff6e 	bl	8023afa <__ssputs_r>
 8023c1e:	3001      	adds	r0, #1
 8023c20:	f000 80aa 	beq.w	8023d78 <_svfiprintf_r+0x1c8>
 8023c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c26:	445a      	add	r2, fp
 8023c28:	9209      	str	r2, [sp, #36]	; 0x24
 8023c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	f000 80a2 	beq.w	8023d78 <_svfiprintf_r+0x1c8>
 8023c34:	2300      	movs	r3, #0
 8023c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023c3e:	f10a 0a01 	add.w	sl, sl, #1
 8023c42:	9304      	str	r3, [sp, #16]
 8023c44:	9307      	str	r3, [sp, #28]
 8023c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8023c4c:	4654      	mov	r4, sl
 8023c4e:	2205      	movs	r2, #5
 8023c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c54:	4851      	ldr	r0, [pc, #324]	; (8023d9c <_svfiprintf_r+0x1ec>)
 8023c56:	f7dc fad3 	bl	8000200 <memchr>
 8023c5a:	9a04      	ldr	r2, [sp, #16]
 8023c5c:	b9d8      	cbnz	r0, 8023c96 <_svfiprintf_r+0xe6>
 8023c5e:	06d0      	lsls	r0, r2, #27
 8023c60:	bf44      	itt	mi
 8023c62:	2320      	movmi	r3, #32
 8023c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023c68:	0711      	lsls	r1, r2, #28
 8023c6a:	bf44      	itt	mi
 8023c6c:	232b      	movmi	r3, #43	; 0x2b
 8023c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023c72:	f89a 3000 	ldrb.w	r3, [sl]
 8023c76:	2b2a      	cmp	r3, #42	; 0x2a
 8023c78:	d015      	beq.n	8023ca6 <_svfiprintf_r+0xf6>
 8023c7a:	9a07      	ldr	r2, [sp, #28]
 8023c7c:	4654      	mov	r4, sl
 8023c7e:	2000      	movs	r0, #0
 8023c80:	f04f 0c0a 	mov.w	ip, #10
 8023c84:	4621      	mov	r1, r4
 8023c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023c8a:	3b30      	subs	r3, #48	; 0x30
 8023c8c:	2b09      	cmp	r3, #9
 8023c8e:	d94e      	bls.n	8023d2e <_svfiprintf_r+0x17e>
 8023c90:	b1b0      	cbz	r0, 8023cc0 <_svfiprintf_r+0x110>
 8023c92:	9207      	str	r2, [sp, #28]
 8023c94:	e014      	b.n	8023cc0 <_svfiprintf_r+0x110>
 8023c96:	eba0 0308 	sub.w	r3, r0, r8
 8023c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8023c9e:	4313      	orrs	r3, r2
 8023ca0:	9304      	str	r3, [sp, #16]
 8023ca2:	46a2      	mov	sl, r4
 8023ca4:	e7d2      	b.n	8023c4c <_svfiprintf_r+0x9c>
 8023ca6:	9b03      	ldr	r3, [sp, #12]
 8023ca8:	1d19      	adds	r1, r3, #4
 8023caa:	681b      	ldr	r3, [r3, #0]
 8023cac:	9103      	str	r1, [sp, #12]
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	bfbb      	ittet	lt
 8023cb2:	425b      	neglt	r3, r3
 8023cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8023cb8:	9307      	strge	r3, [sp, #28]
 8023cba:	9307      	strlt	r3, [sp, #28]
 8023cbc:	bfb8      	it	lt
 8023cbe:	9204      	strlt	r2, [sp, #16]
 8023cc0:	7823      	ldrb	r3, [r4, #0]
 8023cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8023cc4:	d10c      	bne.n	8023ce0 <_svfiprintf_r+0x130>
 8023cc6:	7863      	ldrb	r3, [r4, #1]
 8023cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8023cca:	d135      	bne.n	8023d38 <_svfiprintf_r+0x188>
 8023ccc:	9b03      	ldr	r3, [sp, #12]
 8023cce:	1d1a      	adds	r2, r3, #4
 8023cd0:	681b      	ldr	r3, [r3, #0]
 8023cd2:	9203      	str	r2, [sp, #12]
 8023cd4:	2b00      	cmp	r3, #0
 8023cd6:	bfb8      	it	lt
 8023cd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023cdc:	3402      	adds	r4, #2
 8023cde:	9305      	str	r3, [sp, #20]
 8023ce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023dac <_svfiprintf_r+0x1fc>
 8023ce4:	7821      	ldrb	r1, [r4, #0]
 8023ce6:	2203      	movs	r2, #3
 8023ce8:	4650      	mov	r0, sl
 8023cea:	f7dc fa89 	bl	8000200 <memchr>
 8023cee:	b140      	cbz	r0, 8023d02 <_svfiprintf_r+0x152>
 8023cf0:	2340      	movs	r3, #64	; 0x40
 8023cf2:	eba0 000a 	sub.w	r0, r0, sl
 8023cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8023cfa:	9b04      	ldr	r3, [sp, #16]
 8023cfc:	4303      	orrs	r3, r0
 8023cfe:	3401      	adds	r4, #1
 8023d00:	9304      	str	r3, [sp, #16]
 8023d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d06:	4826      	ldr	r0, [pc, #152]	; (8023da0 <_svfiprintf_r+0x1f0>)
 8023d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023d0c:	2206      	movs	r2, #6
 8023d0e:	f7dc fa77 	bl	8000200 <memchr>
 8023d12:	2800      	cmp	r0, #0
 8023d14:	d038      	beq.n	8023d88 <_svfiprintf_r+0x1d8>
 8023d16:	4b23      	ldr	r3, [pc, #140]	; (8023da4 <_svfiprintf_r+0x1f4>)
 8023d18:	bb1b      	cbnz	r3, 8023d62 <_svfiprintf_r+0x1b2>
 8023d1a:	9b03      	ldr	r3, [sp, #12]
 8023d1c:	3307      	adds	r3, #7
 8023d1e:	f023 0307 	bic.w	r3, r3, #7
 8023d22:	3308      	adds	r3, #8
 8023d24:	9303      	str	r3, [sp, #12]
 8023d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d28:	4433      	add	r3, r6
 8023d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8023d2c:	e767      	b.n	8023bfe <_svfiprintf_r+0x4e>
 8023d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023d32:	460c      	mov	r4, r1
 8023d34:	2001      	movs	r0, #1
 8023d36:	e7a5      	b.n	8023c84 <_svfiprintf_r+0xd4>
 8023d38:	2300      	movs	r3, #0
 8023d3a:	3401      	adds	r4, #1
 8023d3c:	9305      	str	r3, [sp, #20]
 8023d3e:	4619      	mov	r1, r3
 8023d40:	f04f 0c0a 	mov.w	ip, #10
 8023d44:	4620      	mov	r0, r4
 8023d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023d4a:	3a30      	subs	r2, #48	; 0x30
 8023d4c:	2a09      	cmp	r2, #9
 8023d4e:	d903      	bls.n	8023d58 <_svfiprintf_r+0x1a8>
 8023d50:	2b00      	cmp	r3, #0
 8023d52:	d0c5      	beq.n	8023ce0 <_svfiprintf_r+0x130>
 8023d54:	9105      	str	r1, [sp, #20]
 8023d56:	e7c3      	b.n	8023ce0 <_svfiprintf_r+0x130>
 8023d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8023d5c:	4604      	mov	r4, r0
 8023d5e:	2301      	movs	r3, #1
 8023d60:	e7f0      	b.n	8023d44 <_svfiprintf_r+0x194>
 8023d62:	ab03      	add	r3, sp, #12
 8023d64:	9300      	str	r3, [sp, #0]
 8023d66:	462a      	mov	r2, r5
 8023d68:	4b0f      	ldr	r3, [pc, #60]	; (8023da8 <_svfiprintf_r+0x1f8>)
 8023d6a:	a904      	add	r1, sp, #16
 8023d6c:	4638      	mov	r0, r7
 8023d6e:	f7fd fb57 	bl	8021420 <_printf_float>
 8023d72:	1c42      	adds	r2, r0, #1
 8023d74:	4606      	mov	r6, r0
 8023d76:	d1d6      	bne.n	8023d26 <_svfiprintf_r+0x176>
 8023d78:	89ab      	ldrh	r3, [r5, #12]
 8023d7a:	065b      	lsls	r3, r3, #25
 8023d7c:	f53f af2c 	bmi.w	8023bd8 <_svfiprintf_r+0x28>
 8023d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023d82:	b01d      	add	sp, #116	; 0x74
 8023d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d88:	ab03      	add	r3, sp, #12
 8023d8a:	9300      	str	r3, [sp, #0]
 8023d8c:	462a      	mov	r2, r5
 8023d8e:	4b06      	ldr	r3, [pc, #24]	; (8023da8 <_svfiprintf_r+0x1f8>)
 8023d90:	a904      	add	r1, sp, #16
 8023d92:	4638      	mov	r0, r7
 8023d94:	f7fd fde8 	bl	8021968 <_printf_i>
 8023d98:	e7eb      	b.n	8023d72 <_svfiprintf_r+0x1c2>
 8023d9a:	bf00      	nop
 8023d9c:	08029e64 	.word	0x08029e64
 8023da0:	08029e6e 	.word	0x08029e6e
 8023da4:	08021421 	.word	0x08021421
 8023da8:	08023afb 	.word	0x08023afb
 8023dac:	08029e6a 	.word	0x08029e6a

08023db0 <_sungetc_r>:
 8023db0:	b538      	push	{r3, r4, r5, lr}
 8023db2:	1c4b      	adds	r3, r1, #1
 8023db4:	4614      	mov	r4, r2
 8023db6:	d103      	bne.n	8023dc0 <_sungetc_r+0x10>
 8023db8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8023dbc:	4628      	mov	r0, r5
 8023dbe:	bd38      	pop	{r3, r4, r5, pc}
 8023dc0:	8993      	ldrh	r3, [r2, #12]
 8023dc2:	f023 0320 	bic.w	r3, r3, #32
 8023dc6:	8193      	strh	r3, [r2, #12]
 8023dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023dca:	6852      	ldr	r2, [r2, #4]
 8023dcc:	b2cd      	uxtb	r5, r1
 8023dce:	b18b      	cbz	r3, 8023df4 <_sungetc_r+0x44>
 8023dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023dd2:	4293      	cmp	r3, r2
 8023dd4:	dd08      	ble.n	8023de8 <_sungetc_r+0x38>
 8023dd6:	6823      	ldr	r3, [r4, #0]
 8023dd8:	1e5a      	subs	r2, r3, #1
 8023dda:	6022      	str	r2, [r4, #0]
 8023ddc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023de0:	6863      	ldr	r3, [r4, #4]
 8023de2:	3301      	adds	r3, #1
 8023de4:	6063      	str	r3, [r4, #4]
 8023de6:	e7e9      	b.n	8023dbc <_sungetc_r+0xc>
 8023de8:	4621      	mov	r1, r4
 8023dea:	f000 fd23 	bl	8024834 <__submore>
 8023dee:	2800      	cmp	r0, #0
 8023df0:	d0f1      	beq.n	8023dd6 <_sungetc_r+0x26>
 8023df2:	e7e1      	b.n	8023db8 <_sungetc_r+0x8>
 8023df4:	6921      	ldr	r1, [r4, #16]
 8023df6:	6823      	ldr	r3, [r4, #0]
 8023df8:	b151      	cbz	r1, 8023e10 <_sungetc_r+0x60>
 8023dfa:	4299      	cmp	r1, r3
 8023dfc:	d208      	bcs.n	8023e10 <_sungetc_r+0x60>
 8023dfe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023e02:	42a9      	cmp	r1, r5
 8023e04:	d104      	bne.n	8023e10 <_sungetc_r+0x60>
 8023e06:	3b01      	subs	r3, #1
 8023e08:	3201      	adds	r2, #1
 8023e0a:	6023      	str	r3, [r4, #0]
 8023e0c:	6062      	str	r2, [r4, #4]
 8023e0e:	e7d5      	b.n	8023dbc <_sungetc_r+0xc>
 8023e10:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023e18:	6363      	str	r3, [r4, #52]	; 0x34
 8023e1a:	2303      	movs	r3, #3
 8023e1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8023e1e:	4623      	mov	r3, r4
 8023e20:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023e24:	6023      	str	r3, [r4, #0]
 8023e26:	2301      	movs	r3, #1
 8023e28:	e7dc      	b.n	8023de4 <_sungetc_r+0x34>

08023e2a <__ssrefill_r>:
 8023e2a:	b510      	push	{r4, lr}
 8023e2c:	460c      	mov	r4, r1
 8023e2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023e30:	b169      	cbz	r1, 8023e4e <__ssrefill_r+0x24>
 8023e32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023e36:	4299      	cmp	r1, r3
 8023e38:	d001      	beq.n	8023e3e <__ssrefill_r+0x14>
 8023e3a:	f7fd f9a7 	bl	802118c <_free_r>
 8023e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023e40:	6063      	str	r3, [r4, #4]
 8023e42:	2000      	movs	r0, #0
 8023e44:	6360      	str	r0, [r4, #52]	; 0x34
 8023e46:	b113      	cbz	r3, 8023e4e <__ssrefill_r+0x24>
 8023e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023e4a:	6023      	str	r3, [r4, #0]
 8023e4c:	bd10      	pop	{r4, pc}
 8023e4e:	6923      	ldr	r3, [r4, #16]
 8023e50:	6023      	str	r3, [r4, #0]
 8023e52:	2300      	movs	r3, #0
 8023e54:	6063      	str	r3, [r4, #4]
 8023e56:	89a3      	ldrh	r3, [r4, #12]
 8023e58:	f043 0320 	orr.w	r3, r3, #32
 8023e5c:	81a3      	strh	r3, [r4, #12]
 8023e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023e62:	e7f3      	b.n	8023e4c <__ssrefill_r+0x22>

08023e64 <__ssvfiscanf_r>:
 8023e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e68:	460c      	mov	r4, r1
 8023e6a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023e6e:	2100      	movs	r1, #0
 8023e70:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8023e74:	49b2      	ldr	r1, [pc, #712]	; (8024140 <__ssvfiscanf_r+0x2dc>)
 8023e76:	91a0      	str	r1, [sp, #640]	; 0x280
 8023e78:	f10d 0804 	add.w	r8, sp, #4
 8023e7c:	49b1      	ldr	r1, [pc, #708]	; (8024144 <__ssvfiscanf_r+0x2e0>)
 8023e7e:	4fb2      	ldr	r7, [pc, #712]	; (8024148 <__ssvfiscanf_r+0x2e4>)
 8023e80:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802414c <__ssvfiscanf_r+0x2e8>
 8023e84:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023e88:	4606      	mov	r6, r0
 8023e8a:	91a1      	str	r1, [sp, #644]	; 0x284
 8023e8c:	9300      	str	r3, [sp, #0]
 8023e8e:	f892 a000 	ldrb.w	sl, [r2]
 8023e92:	f1ba 0f00 	cmp.w	sl, #0
 8023e96:	f000 8151 	beq.w	802413c <__ssvfiscanf_r+0x2d8>
 8023e9a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8023e9e:	f013 0308 	ands.w	r3, r3, #8
 8023ea2:	f102 0501 	add.w	r5, r2, #1
 8023ea6:	d019      	beq.n	8023edc <__ssvfiscanf_r+0x78>
 8023ea8:	6863      	ldr	r3, [r4, #4]
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	dd0f      	ble.n	8023ece <__ssvfiscanf_r+0x6a>
 8023eae:	6823      	ldr	r3, [r4, #0]
 8023eb0:	781a      	ldrb	r2, [r3, #0]
 8023eb2:	5cba      	ldrb	r2, [r7, r2]
 8023eb4:	0712      	lsls	r2, r2, #28
 8023eb6:	d401      	bmi.n	8023ebc <__ssvfiscanf_r+0x58>
 8023eb8:	462a      	mov	r2, r5
 8023eba:	e7e8      	b.n	8023e8e <__ssvfiscanf_r+0x2a>
 8023ebc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023ebe:	3201      	adds	r2, #1
 8023ec0:	9245      	str	r2, [sp, #276]	; 0x114
 8023ec2:	6862      	ldr	r2, [r4, #4]
 8023ec4:	3301      	adds	r3, #1
 8023ec6:	3a01      	subs	r2, #1
 8023ec8:	6062      	str	r2, [r4, #4]
 8023eca:	6023      	str	r3, [r4, #0]
 8023ecc:	e7ec      	b.n	8023ea8 <__ssvfiscanf_r+0x44>
 8023ece:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023ed0:	4621      	mov	r1, r4
 8023ed2:	4630      	mov	r0, r6
 8023ed4:	4798      	blx	r3
 8023ed6:	2800      	cmp	r0, #0
 8023ed8:	d0e9      	beq.n	8023eae <__ssvfiscanf_r+0x4a>
 8023eda:	e7ed      	b.n	8023eb8 <__ssvfiscanf_r+0x54>
 8023edc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8023ee0:	f040 8083 	bne.w	8023fea <__ssvfiscanf_r+0x186>
 8023ee4:	9341      	str	r3, [sp, #260]	; 0x104
 8023ee6:	9343      	str	r3, [sp, #268]	; 0x10c
 8023ee8:	7853      	ldrb	r3, [r2, #1]
 8023eea:	2b2a      	cmp	r3, #42	; 0x2a
 8023eec:	bf02      	ittt	eq
 8023eee:	2310      	moveq	r3, #16
 8023ef0:	1c95      	addeq	r5, r2, #2
 8023ef2:	9341      	streq	r3, [sp, #260]	; 0x104
 8023ef4:	220a      	movs	r2, #10
 8023ef6:	46ab      	mov	fp, r5
 8023ef8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8023efc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8023f00:	2b09      	cmp	r3, #9
 8023f02:	d91d      	bls.n	8023f40 <__ssvfiscanf_r+0xdc>
 8023f04:	4891      	ldr	r0, [pc, #580]	; (802414c <__ssvfiscanf_r+0x2e8>)
 8023f06:	2203      	movs	r2, #3
 8023f08:	f7dc f97a 	bl	8000200 <memchr>
 8023f0c:	b140      	cbz	r0, 8023f20 <__ssvfiscanf_r+0xbc>
 8023f0e:	2301      	movs	r3, #1
 8023f10:	eba0 0009 	sub.w	r0, r0, r9
 8023f14:	fa03 f000 	lsl.w	r0, r3, r0
 8023f18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023f1a:	4318      	orrs	r0, r3
 8023f1c:	9041      	str	r0, [sp, #260]	; 0x104
 8023f1e:	465d      	mov	r5, fp
 8023f20:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023f24:	2b78      	cmp	r3, #120	; 0x78
 8023f26:	d806      	bhi.n	8023f36 <__ssvfiscanf_r+0xd2>
 8023f28:	2b57      	cmp	r3, #87	; 0x57
 8023f2a:	d810      	bhi.n	8023f4e <__ssvfiscanf_r+0xea>
 8023f2c:	2b25      	cmp	r3, #37	; 0x25
 8023f2e:	d05c      	beq.n	8023fea <__ssvfiscanf_r+0x186>
 8023f30:	d856      	bhi.n	8023fe0 <__ssvfiscanf_r+0x17c>
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	d074      	beq.n	8024020 <__ssvfiscanf_r+0x1bc>
 8023f36:	2303      	movs	r3, #3
 8023f38:	9347      	str	r3, [sp, #284]	; 0x11c
 8023f3a:	230a      	movs	r3, #10
 8023f3c:	9342      	str	r3, [sp, #264]	; 0x108
 8023f3e:	e081      	b.n	8024044 <__ssvfiscanf_r+0x1e0>
 8023f40:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023f42:	fb02 1303 	mla	r3, r2, r3, r1
 8023f46:	3b30      	subs	r3, #48	; 0x30
 8023f48:	9343      	str	r3, [sp, #268]	; 0x10c
 8023f4a:	465d      	mov	r5, fp
 8023f4c:	e7d3      	b.n	8023ef6 <__ssvfiscanf_r+0x92>
 8023f4e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8023f52:	2a20      	cmp	r2, #32
 8023f54:	d8ef      	bhi.n	8023f36 <__ssvfiscanf_r+0xd2>
 8023f56:	a101      	add	r1, pc, #4	; (adr r1, 8023f5c <__ssvfiscanf_r+0xf8>)
 8023f58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023f5c:	0802402f 	.word	0x0802402f
 8023f60:	08023f37 	.word	0x08023f37
 8023f64:	08023f37 	.word	0x08023f37
 8023f68:	0802408d 	.word	0x0802408d
 8023f6c:	08023f37 	.word	0x08023f37
 8023f70:	08023f37 	.word	0x08023f37
 8023f74:	08023f37 	.word	0x08023f37
 8023f78:	08023f37 	.word	0x08023f37
 8023f7c:	08023f37 	.word	0x08023f37
 8023f80:	08023f37 	.word	0x08023f37
 8023f84:	08023f37 	.word	0x08023f37
 8023f88:	080240a3 	.word	0x080240a3
 8023f8c:	08024079 	.word	0x08024079
 8023f90:	08023fe7 	.word	0x08023fe7
 8023f94:	08023fe7 	.word	0x08023fe7
 8023f98:	08023fe7 	.word	0x08023fe7
 8023f9c:	08023f37 	.word	0x08023f37
 8023fa0:	0802407d 	.word	0x0802407d
 8023fa4:	08023f37 	.word	0x08023f37
 8023fa8:	08023f37 	.word	0x08023f37
 8023fac:	08023f37 	.word	0x08023f37
 8023fb0:	08023f37 	.word	0x08023f37
 8023fb4:	080240b3 	.word	0x080240b3
 8023fb8:	08024085 	.word	0x08024085
 8023fbc:	08024027 	.word	0x08024027
 8023fc0:	08023f37 	.word	0x08023f37
 8023fc4:	08023f37 	.word	0x08023f37
 8023fc8:	080240af 	.word	0x080240af
 8023fcc:	08023f37 	.word	0x08023f37
 8023fd0:	08024079 	.word	0x08024079
 8023fd4:	08023f37 	.word	0x08023f37
 8023fd8:	08023f37 	.word	0x08023f37
 8023fdc:	0802402f 	.word	0x0802402f
 8023fe0:	3b45      	subs	r3, #69	; 0x45
 8023fe2:	2b02      	cmp	r3, #2
 8023fe4:	d8a7      	bhi.n	8023f36 <__ssvfiscanf_r+0xd2>
 8023fe6:	2305      	movs	r3, #5
 8023fe8:	e02b      	b.n	8024042 <__ssvfiscanf_r+0x1de>
 8023fea:	6863      	ldr	r3, [r4, #4]
 8023fec:	2b00      	cmp	r3, #0
 8023fee:	dd0d      	ble.n	802400c <__ssvfiscanf_r+0x1a8>
 8023ff0:	6823      	ldr	r3, [r4, #0]
 8023ff2:	781a      	ldrb	r2, [r3, #0]
 8023ff4:	4552      	cmp	r2, sl
 8023ff6:	f040 80a1 	bne.w	802413c <__ssvfiscanf_r+0x2d8>
 8023ffa:	3301      	adds	r3, #1
 8023ffc:	6862      	ldr	r2, [r4, #4]
 8023ffe:	6023      	str	r3, [r4, #0]
 8024000:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024002:	3a01      	subs	r2, #1
 8024004:	3301      	adds	r3, #1
 8024006:	6062      	str	r2, [r4, #4]
 8024008:	9345      	str	r3, [sp, #276]	; 0x114
 802400a:	e755      	b.n	8023eb8 <__ssvfiscanf_r+0x54>
 802400c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802400e:	4621      	mov	r1, r4
 8024010:	4630      	mov	r0, r6
 8024012:	4798      	blx	r3
 8024014:	2800      	cmp	r0, #0
 8024016:	d0eb      	beq.n	8023ff0 <__ssvfiscanf_r+0x18c>
 8024018:	9844      	ldr	r0, [sp, #272]	; 0x110
 802401a:	2800      	cmp	r0, #0
 802401c:	f040 8084 	bne.w	8024128 <__ssvfiscanf_r+0x2c4>
 8024020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024024:	e086      	b.n	8024134 <__ssvfiscanf_r+0x2d0>
 8024026:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024028:	f042 0220 	orr.w	r2, r2, #32
 802402c:	9241      	str	r2, [sp, #260]	; 0x104
 802402e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024034:	9241      	str	r2, [sp, #260]	; 0x104
 8024036:	2210      	movs	r2, #16
 8024038:	2b6f      	cmp	r3, #111	; 0x6f
 802403a:	9242      	str	r2, [sp, #264]	; 0x108
 802403c:	bf34      	ite	cc
 802403e:	2303      	movcc	r3, #3
 8024040:	2304      	movcs	r3, #4
 8024042:	9347      	str	r3, [sp, #284]	; 0x11c
 8024044:	6863      	ldr	r3, [r4, #4]
 8024046:	2b00      	cmp	r3, #0
 8024048:	dd41      	ble.n	80240ce <__ssvfiscanf_r+0x26a>
 802404a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802404c:	0659      	lsls	r1, r3, #25
 802404e:	d404      	bmi.n	802405a <__ssvfiscanf_r+0x1f6>
 8024050:	6823      	ldr	r3, [r4, #0]
 8024052:	781a      	ldrb	r2, [r3, #0]
 8024054:	5cba      	ldrb	r2, [r7, r2]
 8024056:	0712      	lsls	r2, r2, #28
 8024058:	d440      	bmi.n	80240dc <__ssvfiscanf_r+0x278>
 802405a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802405c:	2b02      	cmp	r3, #2
 802405e:	dc4f      	bgt.n	8024100 <__ssvfiscanf_r+0x29c>
 8024060:	466b      	mov	r3, sp
 8024062:	4622      	mov	r2, r4
 8024064:	a941      	add	r1, sp, #260	; 0x104
 8024066:	4630      	mov	r0, r6
 8024068:	f000 f9ce 	bl	8024408 <_scanf_chars>
 802406c:	2801      	cmp	r0, #1
 802406e:	d065      	beq.n	802413c <__ssvfiscanf_r+0x2d8>
 8024070:	2802      	cmp	r0, #2
 8024072:	f47f af21 	bne.w	8023eb8 <__ssvfiscanf_r+0x54>
 8024076:	e7cf      	b.n	8024018 <__ssvfiscanf_r+0x1b4>
 8024078:	220a      	movs	r2, #10
 802407a:	e7dd      	b.n	8024038 <__ssvfiscanf_r+0x1d4>
 802407c:	2300      	movs	r3, #0
 802407e:	9342      	str	r3, [sp, #264]	; 0x108
 8024080:	2303      	movs	r3, #3
 8024082:	e7de      	b.n	8024042 <__ssvfiscanf_r+0x1de>
 8024084:	2308      	movs	r3, #8
 8024086:	9342      	str	r3, [sp, #264]	; 0x108
 8024088:	2304      	movs	r3, #4
 802408a:	e7da      	b.n	8024042 <__ssvfiscanf_r+0x1de>
 802408c:	4629      	mov	r1, r5
 802408e:	4640      	mov	r0, r8
 8024090:	f000 fb18 	bl	80246c4 <__sccl>
 8024094:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802409a:	9341      	str	r3, [sp, #260]	; 0x104
 802409c:	4605      	mov	r5, r0
 802409e:	2301      	movs	r3, #1
 80240a0:	e7cf      	b.n	8024042 <__ssvfiscanf_r+0x1de>
 80240a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80240a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80240a8:	9341      	str	r3, [sp, #260]	; 0x104
 80240aa:	2300      	movs	r3, #0
 80240ac:	e7c9      	b.n	8024042 <__ssvfiscanf_r+0x1de>
 80240ae:	2302      	movs	r3, #2
 80240b0:	e7c7      	b.n	8024042 <__ssvfiscanf_r+0x1de>
 80240b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80240b4:	06c3      	lsls	r3, r0, #27
 80240b6:	f53f aeff 	bmi.w	8023eb8 <__ssvfiscanf_r+0x54>
 80240ba:	9b00      	ldr	r3, [sp, #0]
 80240bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80240be:	1d19      	adds	r1, r3, #4
 80240c0:	9100      	str	r1, [sp, #0]
 80240c2:	681b      	ldr	r3, [r3, #0]
 80240c4:	07c0      	lsls	r0, r0, #31
 80240c6:	bf4c      	ite	mi
 80240c8:	801a      	strhmi	r2, [r3, #0]
 80240ca:	601a      	strpl	r2, [r3, #0]
 80240cc:	e6f4      	b.n	8023eb8 <__ssvfiscanf_r+0x54>
 80240ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80240d0:	4621      	mov	r1, r4
 80240d2:	4630      	mov	r0, r6
 80240d4:	4798      	blx	r3
 80240d6:	2800      	cmp	r0, #0
 80240d8:	d0b7      	beq.n	802404a <__ssvfiscanf_r+0x1e6>
 80240da:	e79d      	b.n	8024018 <__ssvfiscanf_r+0x1b4>
 80240dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80240de:	3201      	adds	r2, #1
 80240e0:	9245      	str	r2, [sp, #276]	; 0x114
 80240e2:	6862      	ldr	r2, [r4, #4]
 80240e4:	3a01      	subs	r2, #1
 80240e6:	2a00      	cmp	r2, #0
 80240e8:	6062      	str	r2, [r4, #4]
 80240ea:	dd02      	ble.n	80240f2 <__ssvfiscanf_r+0x28e>
 80240ec:	3301      	adds	r3, #1
 80240ee:	6023      	str	r3, [r4, #0]
 80240f0:	e7ae      	b.n	8024050 <__ssvfiscanf_r+0x1ec>
 80240f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80240f4:	4621      	mov	r1, r4
 80240f6:	4630      	mov	r0, r6
 80240f8:	4798      	blx	r3
 80240fa:	2800      	cmp	r0, #0
 80240fc:	d0a8      	beq.n	8024050 <__ssvfiscanf_r+0x1ec>
 80240fe:	e78b      	b.n	8024018 <__ssvfiscanf_r+0x1b4>
 8024100:	2b04      	cmp	r3, #4
 8024102:	dc06      	bgt.n	8024112 <__ssvfiscanf_r+0x2ae>
 8024104:	466b      	mov	r3, sp
 8024106:	4622      	mov	r2, r4
 8024108:	a941      	add	r1, sp, #260	; 0x104
 802410a:	4630      	mov	r0, r6
 802410c:	f000 f9d4 	bl	80244b8 <_scanf_i>
 8024110:	e7ac      	b.n	802406c <__ssvfiscanf_r+0x208>
 8024112:	4b0f      	ldr	r3, [pc, #60]	; (8024150 <__ssvfiscanf_r+0x2ec>)
 8024114:	2b00      	cmp	r3, #0
 8024116:	f43f aecf 	beq.w	8023eb8 <__ssvfiscanf_r+0x54>
 802411a:	466b      	mov	r3, sp
 802411c:	4622      	mov	r2, r4
 802411e:	a941      	add	r1, sp, #260	; 0x104
 8024120:	4630      	mov	r0, r6
 8024122:	f3af 8000 	nop.w
 8024126:	e7a1      	b.n	802406c <__ssvfiscanf_r+0x208>
 8024128:	89a3      	ldrh	r3, [r4, #12]
 802412a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802412e:	bf18      	it	ne
 8024130:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8024134:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8024138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802413c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802413e:	e7f9      	b.n	8024134 <__ssvfiscanf_r+0x2d0>
 8024140:	08023db1 	.word	0x08023db1
 8024144:	08023e2b 	.word	0x08023e2b
 8024148:	080299dd 	.word	0x080299dd
 802414c:	08029e6a 	.word	0x08029e6a
 8024150:	00000000 	.word	0x00000000

08024154 <__sfputc_r>:
 8024154:	6893      	ldr	r3, [r2, #8]
 8024156:	3b01      	subs	r3, #1
 8024158:	2b00      	cmp	r3, #0
 802415a:	b410      	push	{r4}
 802415c:	6093      	str	r3, [r2, #8]
 802415e:	da08      	bge.n	8024172 <__sfputc_r+0x1e>
 8024160:	6994      	ldr	r4, [r2, #24]
 8024162:	42a3      	cmp	r3, r4
 8024164:	db01      	blt.n	802416a <__sfputc_r+0x16>
 8024166:	290a      	cmp	r1, #10
 8024168:	d103      	bne.n	8024172 <__sfputc_r+0x1e>
 802416a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802416e:	f7fe b85f 	b.w	8022230 <__swbuf_r>
 8024172:	6813      	ldr	r3, [r2, #0]
 8024174:	1c58      	adds	r0, r3, #1
 8024176:	6010      	str	r0, [r2, #0]
 8024178:	7019      	strb	r1, [r3, #0]
 802417a:	4608      	mov	r0, r1
 802417c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024180:	4770      	bx	lr

08024182 <__sfputs_r>:
 8024182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024184:	4606      	mov	r6, r0
 8024186:	460f      	mov	r7, r1
 8024188:	4614      	mov	r4, r2
 802418a:	18d5      	adds	r5, r2, r3
 802418c:	42ac      	cmp	r4, r5
 802418e:	d101      	bne.n	8024194 <__sfputs_r+0x12>
 8024190:	2000      	movs	r0, #0
 8024192:	e007      	b.n	80241a4 <__sfputs_r+0x22>
 8024194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024198:	463a      	mov	r2, r7
 802419a:	4630      	mov	r0, r6
 802419c:	f7ff ffda 	bl	8024154 <__sfputc_r>
 80241a0:	1c43      	adds	r3, r0, #1
 80241a2:	d1f3      	bne.n	802418c <__sfputs_r+0xa>
 80241a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080241a8 <_vfiprintf_r>:
 80241a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ac:	460d      	mov	r5, r1
 80241ae:	b09d      	sub	sp, #116	; 0x74
 80241b0:	4614      	mov	r4, r2
 80241b2:	4698      	mov	r8, r3
 80241b4:	4606      	mov	r6, r0
 80241b6:	b118      	cbz	r0, 80241c0 <_vfiprintf_r+0x18>
 80241b8:	6983      	ldr	r3, [r0, #24]
 80241ba:	b90b      	cbnz	r3, 80241c0 <_vfiprintf_r+0x18>
 80241bc:	f7fc fed2 	bl	8020f64 <__sinit>
 80241c0:	4b89      	ldr	r3, [pc, #548]	; (80243e8 <_vfiprintf_r+0x240>)
 80241c2:	429d      	cmp	r5, r3
 80241c4:	d11b      	bne.n	80241fe <_vfiprintf_r+0x56>
 80241c6:	6875      	ldr	r5, [r6, #4]
 80241c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80241ca:	07d9      	lsls	r1, r3, #31
 80241cc:	d405      	bmi.n	80241da <_vfiprintf_r+0x32>
 80241ce:	89ab      	ldrh	r3, [r5, #12]
 80241d0:	059a      	lsls	r2, r3, #22
 80241d2:	d402      	bmi.n	80241da <_vfiprintf_r+0x32>
 80241d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80241d6:	f7fc ff88 	bl	80210ea <__retarget_lock_acquire_recursive>
 80241da:	89ab      	ldrh	r3, [r5, #12]
 80241dc:	071b      	lsls	r3, r3, #28
 80241de:	d501      	bpl.n	80241e4 <_vfiprintf_r+0x3c>
 80241e0:	692b      	ldr	r3, [r5, #16]
 80241e2:	b9eb      	cbnz	r3, 8024220 <_vfiprintf_r+0x78>
 80241e4:	4629      	mov	r1, r5
 80241e6:	4630      	mov	r0, r6
 80241e8:	f7fe f886 	bl	80222f8 <__swsetup_r>
 80241ec:	b1c0      	cbz	r0, 8024220 <_vfiprintf_r+0x78>
 80241ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80241f0:	07dc      	lsls	r4, r3, #31
 80241f2:	d50e      	bpl.n	8024212 <_vfiprintf_r+0x6a>
 80241f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80241f8:	b01d      	add	sp, #116	; 0x74
 80241fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241fe:	4b7b      	ldr	r3, [pc, #492]	; (80243ec <_vfiprintf_r+0x244>)
 8024200:	429d      	cmp	r5, r3
 8024202:	d101      	bne.n	8024208 <_vfiprintf_r+0x60>
 8024204:	68b5      	ldr	r5, [r6, #8]
 8024206:	e7df      	b.n	80241c8 <_vfiprintf_r+0x20>
 8024208:	4b79      	ldr	r3, [pc, #484]	; (80243f0 <_vfiprintf_r+0x248>)
 802420a:	429d      	cmp	r5, r3
 802420c:	bf08      	it	eq
 802420e:	68f5      	ldreq	r5, [r6, #12]
 8024210:	e7da      	b.n	80241c8 <_vfiprintf_r+0x20>
 8024212:	89ab      	ldrh	r3, [r5, #12]
 8024214:	0598      	lsls	r0, r3, #22
 8024216:	d4ed      	bmi.n	80241f4 <_vfiprintf_r+0x4c>
 8024218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802421a:	f7fc ff67 	bl	80210ec <__retarget_lock_release_recursive>
 802421e:	e7e9      	b.n	80241f4 <_vfiprintf_r+0x4c>
 8024220:	2300      	movs	r3, #0
 8024222:	9309      	str	r3, [sp, #36]	; 0x24
 8024224:	2320      	movs	r3, #32
 8024226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802422a:	f8cd 800c 	str.w	r8, [sp, #12]
 802422e:	2330      	movs	r3, #48	; 0x30
 8024230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80243f4 <_vfiprintf_r+0x24c>
 8024234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024238:	f04f 0901 	mov.w	r9, #1
 802423c:	4623      	mov	r3, r4
 802423e:	469a      	mov	sl, r3
 8024240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024244:	b10a      	cbz	r2, 802424a <_vfiprintf_r+0xa2>
 8024246:	2a25      	cmp	r2, #37	; 0x25
 8024248:	d1f9      	bne.n	802423e <_vfiprintf_r+0x96>
 802424a:	ebba 0b04 	subs.w	fp, sl, r4
 802424e:	d00b      	beq.n	8024268 <_vfiprintf_r+0xc0>
 8024250:	465b      	mov	r3, fp
 8024252:	4622      	mov	r2, r4
 8024254:	4629      	mov	r1, r5
 8024256:	4630      	mov	r0, r6
 8024258:	f7ff ff93 	bl	8024182 <__sfputs_r>
 802425c:	3001      	adds	r0, #1
 802425e:	f000 80aa 	beq.w	80243b6 <_vfiprintf_r+0x20e>
 8024262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024264:	445a      	add	r2, fp
 8024266:	9209      	str	r2, [sp, #36]	; 0x24
 8024268:	f89a 3000 	ldrb.w	r3, [sl]
 802426c:	2b00      	cmp	r3, #0
 802426e:	f000 80a2 	beq.w	80243b6 <_vfiprintf_r+0x20e>
 8024272:	2300      	movs	r3, #0
 8024274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802427c:	f10a 0a01 	add.w	sl, sl, #1
 8024280:	9304      	str	r3, [sp, #16]
 8024282:	9307      	str	r3, [sp, #28]
 8024284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024288:	931a      	str	r3, [sp, #104]	; 0x68
 802428a:	4654      	mov	r4, sl
 802428c:	2205      	movs	r2, #5
 802428e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024292:	4858      	ldr	r0, [pc, #352]	; (80243f4 <_vfiprintf_r+0x24c>)
 8024294:	f7db ffb4 	bl	8000200 <memchr>
 8024298:	9a04      	ldr	r2, [sp, #16]
 802429a:	b9d8      	cbnz	r0, 80242d4 <_vfiprintf_r+0x12c>
 802429c:	06d1      	lsls	r1, r2, #27
 802429e:	bf44      	itt	mi
 80242a0:	2320      	movmi	r3, #32
 80242a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80242a6:	0713      	lsls	r3, r2, #28
 80242a8:	bf44      	itt	mi
 80242aa:	232b      	movmi	r3, #43	; 0x2b
 80242ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80242b0:	f89a 3000 	ldrb.w	r3, [sl]
 80242b4:	2b2a      	cmp	r3, #42	; 0x2a
 80242b6:	d015      	beq.n	80242e4 <_vfiprintf_r+0x13c>
 80242b8:	9a07      	ldr	r2, [sp, #28]
 80242ba:	4654      	mov	r4, sl
 80242bc:	2000      	movs	r0, #0
 80242be:	f04f 0c0a 	mov.w	ip, #10
 80242c2:	4621      	mov	r1, r4
 80242c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80242c8:	3b30      	subs	r3, #48	; 0x30
 80242ca:	2b09      	cmp	r3, #9
 80242cc:	d94e      	bls.n	802436c <_vfiprintf_r+0x1c4>
 80242ce:	b1b0      	cbz	r0, 80242fe <_vfiprintf_r+0x156>
 80242d0:	9207      	str	r2, [sp, #28]
 80242d2:	e014      	b.n	80242fe <_vfiprintf_r+0x156>
 80242d4:	eba0 0308 	sub.w	r3, r0, r8
 80242d8:	fa09 f303 	lsl.w	r3, r9, r3
 80242dc:	4313      	orrs	r3, r2
 80242de:	9304      	str	r3, [sp, #16]
 80242e0:	46a2      	mov	sl, r4
 80242e2:	e7d2      	b.n	802428a <_vfiprintf_r+0xe2>
 80242e4:	9b03      	ldr	r3, [sp, #12]
 80242e6:	1d19      	adds	r1, r3, #4
 80242e8:	681b      	ldr	r3, [r3, #0]
 80242ea:	9103      	str	r1, [sp, #12]
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	bfbb      	ittet	lt
 80242f0:	425b      	neglt	r3, r3
 80242f2:	f042 0202 	orrlt.w	r2, r2, #2
 80242f6:	9307      	strge	r3, [sp, #28]
 80242f8:	9307      	strlt	r3, [sp, #28]
 80242fa:	bfb8      	it	lt
 80242fc:	9204      	strlt	r2, [sp, #16]
 80242fe:	7823      	ldrb	r3, [r4, #0]
 8024300:	2b2e      	cmp	r3, #46	; 0x2e
 8024302:	d10c      	bne.n	802431e <_vfiprintf_r+0x176>
 8024304:	7863      	ldrb	r3, [r4, #1]
 8024306:	2b2a      	cmp	r3, #42	; 0x2a
 8024308:	d135      	bne.n	8024376 <_vfiprintf_r+0x1ce>
 802430a:	9b03      	ldr	r3, [sp, #12]
 802430c:	1d1a      	adds	r2, r3, #4
 802430e:	681b      	ldr	r3, [r3, #0]
 8024310:	9203      	str	r2, [sp, #12]
 8024312:	2b00      	cmp	r3, #0
 8024314:	bfb8      	it	lt
 8024316:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802431a:	3402      	adds	r4, #2
 802431c:	9305      	str	r3, [sp, #20]
 802431e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024404 <_vfiprintf_r+0x25c>
 8024322:	7821      	ldrb	r1, [r4, #0]
 8024324:	2203      	movs	r2, #3
 8024326:	4650      	mov	r0, sl
 8024328:	f7db ff6a 	bl	8000200 <memchr>
 802432c:	b140      	cbz	r0, 8024340 <_vfiprintf_r+0x198>
 802432e:	2340      	movs	r3, #64	; 0x40
 8024330:	eba0 000a 	sub.w	r0, r0, sl
 8024334:	fa03 f000 	lsl.w	r0, r3, r0
 8024338:	9b04      	ldr	r3, [sp, #16]
 802433a:	4303      	orrs	r3, r0
 802433c:	3401      	adds	r4, #1
 802433e:	9304      	str	r3, [sp, #16]
 8024340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024344:	482c      	ldr	r0, [pc, #176]	; (80243f8 <_vfiprintf_r+0x250>)
 8024346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802434a:	2206      	movs	r2, #6
 802434c:	f7db ff58 	bl	8000200 <memchr>
 8024350:	2800      	cmp	r0, #0
 8024352:	d03f      	beq.n	80243d4 <_vfiprintf_r+0x22c>
 8024354:	4b29      	ldr	r3, [pc, #164]	; (80243fc <_vfiprintf_r+0x254>)
 8024356:	bb1b      	cbnz	r3, 80243a0 <_vfiprintf_r+0x1f8>
 8024358:	9b03      	ldr	r3, [sp, #12]
 802435a:	3307      	adds	r3, #7
 802435c:	f023 0307 	bic.w	r3, r3, #7
 8024360:	3308      	adds	r3, #8
 8024362:	9303      	str	r3, [sp, #12]
 8024364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024366:	443b      	add	r3, r7
 8024368:	9309      	str	r3, [sp, #36]	; 0x24
 802436a:	e767      	b.n	802423c <_vfiprintf_r+0x94>
 802436c:	fb0c 3202 	mla	r2, ip, r2, r3
 8024370:	460c      	mov	r4, r1
 8024372:	2001      	movs	r0, #1
 8024374:	e7a5      	b.n	80242c2 <_vfiprintf_r+0x11a>
 8024376:	2300      	movs	r3, #0
 8024378:	3401      	adds	r4, #1
 802437a:	9305      	str	r3, [sp, #20]
 802437c:	4619      	mov	r1, r3
 802437e:	f04f 0c0a 	mov.w	ip, #10
 8024382:	4620      	mov	r0, r4
 8024384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024388:	3a30      	subs	r2, #48	; 0x30
 802438a:	2a09      	cmp	r2, #9
 802438c:	d903      	bls.n	8024396 <_vfiprintf_r+0x1ee>
 802438e:	2b00      	cmp	r3, #0
 8024390:	d0c5      	beq.n	802431e <_vfiprintf_r+0x176>
 8024392:	9105      	str	r1, [sp, #20]
 8024394:	e7c3      	b.n	802431e <_vfiprintf_r+0x176>
 8024396:	fb0c 2101 	mla	r1, ip, r1, r2
 802439a:	4604      	mov	r4, r0
 802439c:	2301      	movs	r3, #1
 802439e:	e7f0      	b.n	8024382 <_vfiprintf_r+0x1da>
 80243a0:	ab03      	add	r3, sp, #12
 80243a2:	9300      	str	r3, [sp, #0]
 80243a4:	462a      	mov	r2, r5
 80243a6:	4b16      	ldr	r3, [pc, #88]	; (8024400 <_vfiprintf_r+0x258>)
 80243a8:	a904      	add	r1, sp, #16
 80243aa:	4630      	mov	r0, r6
 80243ac:	f7fd f838 	bl	8021420 <_printf_float>
 80243b0:	4607      	mov	r7, r0
 80243b2:	1c78      	adds	r0, r7, #1
 80243b4:	d1d6      	bne.n	8024364 <_vfiprintf_r+0x1bc>
 80243b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80243b8:	07d9      	lsls	r1, r3, #31
 80243ba:	d405      	bmi.n	80243c8 <_vfiprintf_r+0x220>
 80243bc:	89ab      	ldrh	r3, [r5, #12]
 80243be:	059a      	lsls	r2, r3, #22
 80243c0:	d402      	bmi.n	80243c8 <_vfiprintf_r+0x220>
 80243c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80243c4:	f7fc fe92 	bl	80210ec <__retarget_lock_release_recursive>
 80243c8:	89ab      	ldrh	r3, [r5, #12]
 80243ca:	065b      	lsls	r3, r3, #25
 80243cc:	f53f af12 	bmi.w	80241f4 <_vfiprintf_r+0x4c>
 80243d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80243d2:	e711      	b.n	80241f8 <_vfiprintf_r+0x50>
 80243d4:	ab03      	add	r3, sp, #12
 80243d6:	9300      	str	r3, [sp, #0]
 80243d8:	462a      	mov	r2, r5
 80243da:	4b09      	ldr	r3, [pc, #36]	; (8024400 <_vfiprintf_r+0x258>)
 80243dc:	a904      	add	r1, sp, #16
 80243de:	4630      	mov	r0, r6
 80243e0:	f7fd fac2 	bl	8021968 <_printf_i>
 80243e4:	e7e4      	b.n	80243b0 <_vfiprintf_r+0x208>
 80243e6:	bf00      	nop
 80243e8:	08029b00 	.word	0x08029b00
 80243ec:	08029b20 	.word	0x08029b20
 80243f0:	08029ae0 	.word	0x08029ae0
 80243f4:	08029e64 	.word	0x08029e64
 80243f8:	08029e6e 	.word	0x08029e6e
 80243fc:	08021421 	.word	0x08021421
 8024400:	08024183 	.word	0x08024183
 8024404:	08029e6a 	.word	0x08029e6a

08024408 <_scanf_chars>:
 8024408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802440c:	4615      	mov	r5, r2
 802440e:	688a      	ldr	r2, [r1, #8]
 8024410:	4680      	mov	r8, r0
 8024412:	460c      	mov	r4, r1
 8024414:	b932      	cbnz	r2, 8024424 <_scanf_chars+0x1c>
 8024416:	698a      	ldr	r2, [r1, #24]
 8024418:	2a00      	cmp	r2, #0
 802441a:	bf0c      	ite	eq
 802441c:	2201      	moveq	r2, #1
 802441e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8024422:	608a      	str	r2, [r1, #8]
 8024424:	6822      	ldr	r2, [r4, #0]
 8024426:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80244b4 <_scanf_chars+0xac>
 802442a:	06d1      	lsls	r1, r2, #27
 802442c:	bf5f      	itttt	pl
 802442e:	681a      	ldrpl	r2, [r3, #0]
 8024430:	1d11      	addpl	r1, r2, #4
 8024432:	6019      	strpl	r1, [r3, #0]
 8024434:	6816      	ldrpl	r6, [r2, #0]
 8024436:	2700      	movs	r7, #0
 8024438:	69a0      	ldr	r0, [r4, #24]
 802443a:	b188      	cbz	r0, 8024460 <_scanf_chars+0x58>
 802443c:	2801      	cmp	r0, #1
 802443e:	d107      	bne.n	8024450 <_scanf_chars+0x48>
 8024440:	682b      	ldr	r3, [r5, #0]
 8024442:	781a      	ldrb	r2, [r3, #0]
 8024444:	6963      	ldr	r3, [r4, #20]
 8024446:	5c9b      	ldrb	r3, [r3, r2]
 8024448:	b953      	cbnz	r3, 8024460 <_scanf_chars+0x58>
 802444a:	bb27      	cbnz	r7, 8024496 <_scanf_chars+0x8e>
 802444c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024450:	2802      	cmp	r0, #2
 8024452:	d120      	bne.n	8024496 <_scanf_chars+0x8e>
 8024454:	682b      	ldr	r3, [r5, #0]
 8024456:	781b      	ldrb	r3, [r3, #0]
 8024458:	f813 3009 	ldrb.w	r3, [r3, r9]
 802445c:	071b      	lsls	r3, r3, #28
 802445e:	d41a      	bmi.n	8024496 <_scanf_chars+0x8e>
 8024460:	6823      	ldr	r3, [r4, #0]
 8024462:	06da      	lsls	r2, r3, #27
 8024464:	bf5e      	ittt	pl
 8024466:	682b      	ldrpl	r3, [r5, #0]
 8024468:	781b      	ldrbpl	r3, [r3, #0]
 802446a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802446e:	682a      	ldr	r2, [r5, #0]
 8024470:	686b      	ldr	r3, [r5, #4]
 8024472:	3201      	adds	r2, #1
 8024474:	602a      	str	r2, [r5, #0]
 8024476:	68a2      	ldr	r2, [r4, #8]
 8024478:	3b01      	subs	r3, #1
 802447a:	3a01      	subs	r2, #1
 802447c:	606b      	str	r3, [r5, #4]
 802447e:	3701      	adds	r7, #1
 8024480:	60a2      	str	r2, [r4, #8]
 8024482:	b142      	cbz	r2, 8024496 <_scanf_chars+0x8e>
 8024484:	2b00      	cmp	r3, #0
 8024486:	dcd7      	bgt.n	8024438 <_scanf_chars+0x30>
 8024488:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802448c:	4629      	mov	r1, r5
 802448e:	4640      	mov	r0, r8
 8024490:	4798      	blx	r3
 8024492:	2800      	cmp	r0, #0
 8024494:	d0d0      	beq.n	8024438 <_scanf_chars+0x30>
 8024496:	6823      	ldr	r3, [r4, #0]
 8024498:	f013 0310 	ands.w	r3, r3, #16
 802449c:	d105      	bne.n	80244aa <_scanf_chars+0xa2>
 802449e:	68e2      	ldr	r2, [r4, #12]
 80244a0:	3201      	adds	r2, #1
 80244a2:	60e2      	str	r2, [r4, #12]
 80244a4:	69a2      	ldr	r2, [r4, #24]
 80244a6:	b102      	cbz	r2, 80244aa <_scanf_chars+0xa2>
 80244a8:	7033      	strb	r3, [r6, #0]
 80244aa:	6923      	ldr	r3, [r4, #16]
 80244ac:	441f      	add	r7, r3
 80244ae:	6127      	str	r7, [r4, #16]
 80244b0:	2000      	movs	r0, #0
 80244b2:	e7cb      	b.n	802444c <_scanf_chars+0x44>
 80244b4:	080299dd 	.word	0x080299dd

080244b8 <_scanf_i>:
 80244b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244bc:	4698      	mov	r8, r3
 80244be:	4b74      	ldr	r3, [pc, #464]	; (8024690 <_scanf_i+0x1d8>)
 80244c0:	460c      	mov	r4, r1
 80244c2:	4682      	mov	sl, r0
 80244c4:	4616      	mov	r6, r2
 80244c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80244ca:	b087      	sub	sp, #28
 80244cc:	ab03      	add	r3, sp, #12
 80244ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80244d2:	4b70      	ldr	r3, [pc, #448]	; (8024694 <_scanf_i+0x1dc>)
 80244d4:	69a1      	ldr	r1, [r4, #24]
 80244d6:	4a70      	ldr	r2, [pc, #448]	; (8024698 <_scanf_i+0x1e0>)
 80244d8:	2903      	cmp	r1, #3
 80244da:	bf18      	it	ne
 80244dc:	461a      	movne	r2, r3
 80244de:	68a3      	ldr	r3, [r4, #8]
 80244e0:	9201      	str	r2, [sp, #4]
 80244e2:	1e5a      	subs	r2, r3, #1
 80244e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80244e8:	bf88      	it	hi
 80244ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80244ee:	4627      	mov	r7, r4
 80244f0:	bf82      	ittt	hi
 80244f2:	eb03 0905 	addhi.w	r9, r3, r5
 80244f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80244fa:	60a3      	strhi	r3, [r4, #8]
 80244fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8024500:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8024504:	bf98      	it	ls
 8024506:	f04f 0900 	movls.w	r9, #0
 802450a:	6023      	str	r3, [r4, #0]
 802450c:	463d      	mov	r5, r7
 802450e:	f04f 0b00 	mov.w	fp, #0
 8024512:	6831      	ldr	r1, [r6, #0]
 8024514:	ab03      	add	r3, sp, #12
 8024516:	7809      	ldrb	r1, [r1, #0]
 8024518:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802451c:	2202      	movs	r2, #2
 802451e:	f7db fe6f 	bl	8000200 <memchr>
 8024522:	b328      	cbz	r0, 8024570 <_scanf_i+0xb8>
 8024524:	f1bb 0f01 	cmp.w	fp, #1
 8024528:	d159      	bne.n	80245de <_scanf_i+0x126>
 802452a:	6862      	ldr	r2, [r4, #4]
 802452c:	b92a      	cbnz	r2, 802453a <_scanf_i+0x82>
 802452e:	6822      	ldr	r2, [r4, #0]
 8024530:	2308      	movs	r3, #8
 8024532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024536:	6063      	str	r3, [r4, #4]
 8024538:	6022      	str	r2, [r4, #0]
 802453a:	6822      	ldr	r2, [r4, #0]
 802453c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8024540:	6022      	str	r2, [r4, #0]
 8024542:	68a2      	ldr	r2, [r4, #8]
 8024544:	1e51      	subs	r1, r2, #1
 8024546:	60a1      	str	r1, [r4, #8]
 8024548:	b192      	cbz	r2, 8024570 <_scanf_i+0xb8>
 802454a:	6832      	ldr	r2, [r6, #0]
 802454c:	1c51      	adds	r1, r2, #1
 802454e:	6031      	str	r1, [r6, #0]
 8024550:	7812      	ldrb	r2, [r2, #0]
 8024552:	f805 2b01 	strb.w	r2, [r5], #1
 8024556:	6872      	ldr	r2, [r6, #4]
 8024558:	3a01      	subs	r2, #1
 802455a:	2a00      	cmp	r2, #0
 802455c:	6072      	str	r2, [r6, #4]
 802455e:	dc07      	bgt.n	8024570 <_scanf_i+0xb8>
 8024560:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8024564:	4631      	mov	r1, r6
 8024566:	4650      	mov	r0, sl
 8024568:	4790      	blx	r2
 802456a:	2800      	cmp	r0, #0
 802456c:	f040 8085 	bne.w	802467a <_scanf_i+0x1c2>
 8024570:	f10b 0b01 	add.w	fp, fp, #1
 8024574:	f1bb 0f03 	cmp.w	fp, #3
 8024578:	d1cb      	bne.n	8024512 <_scanf_i+0x5a>
 802457a:	6863      	ldr	r3, [r4, #4]
 802457c:	b90b      	cbnz	r3, 8024582 <_scanf_i+0xca>
 802457e:	230a      	movs	r3, #10
 8024580:	6063      	str	r3, [r4, #4]
 8024582:	6863      	ldr	r3, [r4, #4]
 8024584:	4945      	ldr	r1, [pc, #276]	; (802469c <_scanf_i+0x1e4>)
 8024586:	6960      	ldr	r0, [r4, #20]
 8024588:	1ac9      	subs	r1, r1, r3
 802458a:	f000 f89b 	bl	80246c4 <__sccl>
 802458e:	f04f 0b00 	mov.w	fp, #0
 8024592:	68a3      	ldr	r3, [r4, #8]
 8024594:	6822      	ldr	r2, [r4, #0]
 8024596:	2b00      	cmp	r3, #0
 8024598:	d03d      	beq.n	8024616 <_scanf_i+0x15e>
 802459a:	6831      	ldr	r1, [r6, #0]
 802459c:	6960      	ldr	r0, [r4, #20]
 802459e:	f891 c000 	ldrb.w	ip, [r1]
 80245a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80245a6:	2800      	cmp	r0, #0
 80245a8:	d035      	beq.n	8024616 <_scanf_i+0x15e>
 80245aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80245ae:	d124      	bne.n	80245fa <_scanf_i+0x142>
 80245b0:	0510      	lsls	r0, r2, #20
 80245b2:	d522      	bpl.n	80245fa <_scanf_i+0x142>
 80245b4:	f10b 0b01 	add.w	fp, fp, #1
 80245b8:	f1b9 0f00 	cmp.w	r9, #0
 80245bc:	d003      	beq.n	80245c6 <_scanf_i+0x10e>
 80245be:	3301      	adds	r3, #1
 80245c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80245c4:	60a3      	str	r3, [r4, #8]
 80245c6:	6873      	ldr	r3, [r6, #4]
 80245c8:	3b01      	subs	r3, #1
 80245ca:	2b00      	cmp	r3, #0
 80245cc:	6073      	str	r3, [r6, #4]
 80245ce:	dd1b      	ble.n	8024608 <_scanf_i+0x150>
 80245d0:	6833      	ldr	r3, [r6, #0]
 80245d2:	3301      	adds	r3, #1
 80245d4:	6033      	str	r3, [r6, #0]
 80245d6:	68a3      	ldr	r3, [r4, #8]
 80245d8:	3b01      	subs	r3, #1
 80245da:	60a3      	str	r3, [r4, #8]
 80245dc:	e7d9      	b.n	8024592 <_scanf_i+0xda>
 80245de:	f1bb 0f02 	cmp.w	fp, #2
 80245e2:	d1ae      	bne.n	8024542 <_scanf_i+0x8a>
 80245e4:	6822      	ldr	r2, [r4, #0]
 80245e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80245ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80245ee:	d1bf      	bne.n	8024570 <_scanf_i+0xb8>
 80245f0:	2310      	movs	r3, #16
 80245f2:	6063      	str	r3, [r4, #4]
 80245f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80245f8:	e7a2      	b.n	8024540 <_scanf_i+0x88>
 80245fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80245fe:	6022      	str	r2, [r4, #0]
 8024600:	780b      	ldrb	r3, [r1, #0]
 8024602:	f805 3b01 	strb.w	r3, [r5], #1
 8024606:	e7de      	b.n	80245c6 <_scanf_i+0x10e>
 8024608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802460c:	4631      	mov	r1, r6
 802460e:	4650      	mov	r0, sl
 8024610:	4798      	blx	r3
 8024612:	2800      	cmp	r0, #0
 8024614:	d0df      	beq.n	80245d6 <_scanf_i+0x11e>
 8024616:	6823      	ldr	r3, [r4, #0]
 8024618:	05d9      	lsls	r1, r3, #23
 802461a:	d50d      	bpl.n	8024638 <_scanf_i+0x180>
 802461c:	42bd      	cmp	r5, r7
 802461e:	d909      	bls.n	8024634 <_scanf_i+0x17c>
 8024620:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024624:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8024628:	4632      	mov	r2, r6
 802462a:	4650      	mov	r0, sl
 802462c:	4798      	blx	r3
 802462e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8024632:	464d      	mov	r5, r9
 8024634:	42bd      	cmp	r5, r7
 8024636:	d028      	beq.n	802468a <_scanf_i+0x1d2>
 8024638:	6822      	ldr	r2, [r4, #0]
 802463a:	f012 0210 	ands.w	r2, r2, #16
 802463e:	d113      	bne.n	8024668 <_scanf_i+0x1b0>
 8024640:	702a      	strb	r2, [r5, #0]
 8024642:	6863      	ldr	r3, [r4, #4]
 8024644:	9e01      	ldr	r6, [sp, #4]
 8024646:	4639      	mov	r1, r7
 8024648:	4650      	mov	r0, sl
 802464a:	47b0      	blx	r6
 802464c:	f8d8 3000 	ldr.w	r3, [r8]
 8024650:	6821      	ldr	r1, [r4, #0]
 8024652:	1d1a      	adds	r2, r3, #4
 8024654:	f8c8 2000 	str.w	r2, [r8]
 8024658:	f011 0f20 	tst.w	r1, #32
 802465c:	681b      	ldr	r3, [r3, #0]
 802465e:	d00f      	beq.n	8024680 <_scanf_i+0x1c8>
 8024660:	6018      	str	r0, [r3, #0]
 8024662:	68e3      	ldr	r3, [r4, #12]
 8024664:	3301      	adds	r3, #1
 8024666:	60e3      	str	r3, [r4, #12]
 8024668:	1bed      	subs	r5, r5, r7
 802466a:	44ab      	add	fp, r5
 802466c:	6925      	ldr	r5, [r4, #16]
 802466e:	445d      	add	r5, fp
 8024670:	6125      	str	r5, [r4, #16]
 8024672:	2000      	movs	r0, #0
 8024674:	b007      	add	sp, #28
 8024676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802467a:	f04f 0b00 	mov.w	fp, #0
 802467e:	e7ca      	b.n	8024616 <_scanf_i+0x15e>
 8024680:	07ca      	lsls	r2, r1, #31
 8024682:	bf4c      	ite	mi
 8024684:	8018      	strhmi	r0, [r3, #0]
 8024686:	6018      	strpl	r0, [r3, #0]
 8024688:	e7eb      	b.n	8024662 <_scanf_i+0x1aa>
 802468a:	2001      	movs	r0, #1
 802468c:	e7f2      	b.n	8024674 <_scanf_i+0x1bc>
 802468e:	bf00      	nop
 8024690:	08029720 	.word	0x08029720
 8024694:	08024831 	.word	0x08024831
 8024698:	0802222d 	.word	0x0802222d
 802469c:	08029e8e 	.word	0x08029e8e

080246a0 <_read_r>:
 80246a0:	b538      	push	{r3, r4, r5, lr}
 80246a2:	4d07      	ldr	r5, [pc, #28]	; (80246c0 <_read_r+0x20>)
 80246a4:	4604      	mov	r4, r0
 80246a6:	4608      	mov	r0, r1
 80246a8:	4611      	mov	r1, r2
 80246aa:	2200      	movs	r2, #0
 80246ac:	602a      	str	r2, [r5, #0]
 80246ae:	461a      	mov	r2, r3
 80246b0:	f7de f96c 	bl	800298c <_read>
 80246b4:	1c43      	adds	r3, r0, #1
 80246b6:	d102      	bne.n	80246be <_read_r+0x1e>
 80246b8:	682b      	ldr	r3, [r5, #0]
 80246ba:	b103      	cbz	r3, 80246be <_read_r+0x1e>
 80246bc:	6023      	str	r3, [r4, #0]
 80246be:	bd38      	pop	{r3, r4, r5, pc}
 80246c0:	2001b1d8 	.word	0x2001b1d8

080246c4 <__sccl>:
 80246c4:	b570      	push	{r4, r5, r6, lr}
 80246c6:	780b      	ldrb	r3, [r1, #0]
 80246c8:	4604      	mov	r4, r0
 80246ca:	2b5e      	cmp	r3, #94	; 0x5e
 80246cc:	bf0b      	itete	eq
 80246ce:	784b      	ldrbeq	r3, [r1, #1]
 80246d0:	1c48      	addne	r0, r1, #1
 80246d2:	1c88      	addeq	r0, r1, #2
 80246d4:	2200      	movne	r2, #0
 80246d6:	bf08      	it	eq
 80246d8:	2201      	moveq	r2, #1
 80246da:	1e61      	subs	r1, r4, #1
 80246dc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80246e0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80246e4:	42a9      	cmp	r1, r5
 80246e6:	d1fb      	bne.n	80246e0 <__sccl+0x1c>
 80246e8:	b90b      	cbnz	r3, 80246ee <__sccl+0x2a>
 80246ea:	3801      	subs	r0, #1
 80246ec:	bd70      	pop	{r4, r5, r6, pc}
 80246ee:	f082 0101 	eor.w	r1, r2, #1
 80246f2:	54e1      	strb	r1, [r4, r3]
 80246f4:	1c42      	adds	r2, r0, #1
 80246f6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80246fa:	2d2d      	cmp	r5, #45	; 0x2d
 80246fc:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8024700:	4610      	mov	r0, r2
 8024702:	d006      	beq.n	8024712 <__sccl+0x4e>
 8024704:	2d5d      	cmp	r5, #93	; 0x5d
 8024706:	d0f1      	beq.n	80246ec <__sccl+0x28>
 8024708:	b90d      	cbnz	r5, 802470e <__sccl+0x4a>
 802470a:	4630      	mov	r0, r6
 802470c:	e7ee      	b.n	80246ec <__sccl+0x28>
 802470e:	462b      	mov	r3, r5
 8024710:	e7ef      	b.n	80246f2 <__sccl+0x2e>
 8024712:	7816      	ldrb	r6, [r2, #0]
 8024714:	2e5d      	cmp	r6, #93	; 0x5d
 8024716:	d0fa      	beq.n	802470e <__sccl+0x4a>
 8024718:	42b3      	cmp	r3, r6
 802471a:	dcf8      	bgt.n	802470e <__sccl+0x4a>
 802471c:	4618      	mov	r0, r3
 802471e:	3001      	adds	r0, #1
 8024720:	4286      	cmp	r6, r0
 8024722:	5421      	strb	r1, [r4, r0]
 8024724:	dcfb      	bgt.n	802471e <__sccl+0x5a>
 8024726:	43d8      	mvns	r0, r3
 8024728:	4430      	add	r0, r6
 802472a:	1c5d      	adds	r5, r3, #1
 802472c:	42b3      	cmp	r3, r6
 802472e:	bfa8      	it	ge
 8024730:	2000      	movge	r0, #0
 8024732:	182b      	adds	r3, r5, r0
 8024734:	3202      	adds	r2, #2
 8024736:	e7de      	b.n	80246f6 <__sccl+0x32>

08024738 <_strtoul_l.isra.0>:
 8024738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802473c:	4e3b      	ldr	r6, [pc, #236]	; (802482c <_strtoul_l.isra.0+0xf4>)
 802473e:	4686      	mov	lr, r0
 8024740:	468c      	mov	ip, r1
 8024742:	4660      	mov	r0, ip
 8024744:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8024748:	5da5      	ldrb	r5, [r4, r6]
 802474a:	f015 0508 	ands.w	r5, r5, #8
 802474e:	d1f8      	bne.n	8024742 <_strtoul_l.isra.0+0xa>
 8024750:	2c2d      	cmp	r4, #45	; 0x2d
 8024752:	d134      	bne.n	80247be <_strtoul_l.isra.0+0x86>
 8024754:	f89c 4000 	ldrb.w	r4, [ip]
 8024758:	f04f 0801 	mov.w	r8, #1
 802475c:	f100 0c02 	add.w	ip, r0, #2
 8024760:	2b00      	cmp	r3, #0
 8024762:	d05e      	beq.n	8024822 <_strtoul_l.isra.0+0xea>
 8024764:	2b10      	cmp	r3, #16
 8024766:	d10c      	bne.n	8024782 <_strtoul_l.isra.0+0x4a>
 8024768:	2c30      	cmp	r4, #48	; 0x30
 802476a:	d10a      	bne.n	8024782 <_strtoul_l.isra.0+0x4a>
 802476c:	f89c 0000 	ldrb.w	r0, [ip]
 8024770:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8024774:	2858      	cmp	r0, #88	; 0x58
 8024776:	d14f      	bne.n	8024818 <_strtoul_l.isra.0+0xe0>
 8024778:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802477c:	2310      	movs	r3, #16
 802477e:	f10c 0c02 	add.w	ip, ip, #2
 8024782:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8024786:	2500      	movs	r5, #0
 8024788:	fbb7 f7f3 	udiv	r7, r7, r3
 802478c:	fb03 f907 	mul.w	r9, r3, r7
 8024790:	ea6f 0909 	mvn.w	r9, r9
 8024794:	4628      	mov	r0, r5
 8024796:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802479a:	2e09      	cmp	r6, #9
 802479c:	d818      	bhi.n	80247d0 <_strtoul_l.isra.0+0x98>
 802479e:	4634      	mov	r4, r6
 80247a0:	42a3      	cmp	r3, r4
 80247a2:	dd24      	ble.n	80247ee <_strtoul_l.isra.0+0xb6>
 80247a4:	2d00      	cmp	r5, #0
 80247a6:	db1f      	blt.n	80247e8 <_strtoul_l.isra.0+0xb0>
 80247a8:	4287      	cmp	r7, r0
 80247aa:	d31d      	bcc.n	80247e8 <_strtoul_l.isra.0+0xb0>
 80247ac:	d101      	bne.n	80247b2 <_strtoul_l.isra.0+0x7a>
 80247ae:	45a1      	cmp	r9, r4
 80247b0:	db1a      	blt.n	80247e8 <_strtoul_l.isra.0+0xb0>
 80247b2:	fb00 4003 	mla	r0, r0, r3, r4
 80247b6:	2501      	movs	r5, #1
 80247b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80247bc:	e7eb      	b.n	8024796 <_strtoul_l.isra.0+0x5e>
 80247be:	2c2b      	cmp	r4, #43	; 0x2b
 80247c0:	bf08      	it	eq
 80247c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80247c6:	46a8      	mov	r8, r5
 80247c8:	bf08      	it	eq
 80247ca:	f100 0c02 	addeq.w	ip, r0, #2
 80247ce:	e7c7      	b.n	8024760 <_strtoul_l.isra.0+0x28>
 80247d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80247d4:	2e19      	cmp	r6, #25
 80247d6:	d801      	bhi.n	80247dc <_strtoul_l.isra.0+0xa4>
 80247d8:	3c37      	subs	r4, #55	; 0x37
 80247da:	e7e1      	b.n	80247a0 <_strtoul_l.isra.0+0x68>
 80247dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80247e0:	2e19      	cmp	r6, #25
 80247e2:	d804      	bhi.n	80247ee <_strtoul_l.isra.0+0xb6>
 80247e4:	3c57      	subs	r4, #87	; 0x57
 80247e6:	e7db      	b.n	80247a0 <_strtoul_l.isra.0+0x68>
 80247e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80247ec:	e7e4      	b.n	80247b8 <_strtoul_l.isra.0+0x80>
 80247ee:	2d00      	cmp	r5, #0
 80247f0:	da07      	bge.n	8024802 <_strtoul_l.isra.0+0xca>
 80247f2:	2322      	movs	r3, #34	; 0x22
 80247f4:	f8ce 3000 	str.w	r3, [lr]
 80247f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80247fc:	b942      	cbnz	r2, 8024810 <_strtoul_l.isra.0+0xd8>
 80247fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024802:	f1b8 0f00 	cmp.w	r8, #0
 8024806:	d000      	beq.n	802480a <_strtoul_l.isra.0+0xd2>
 8024808:	4240      	negs	r0, r0
 802480a:	2a00      	cmp	r2, #0
 802480c:	d0f7      	beq.n	80247fe <_strtoul_l.isra.0+0xc6>
 802480e:	b10d      	cbz	r5, 8024814 <_strtoul_l.isra.0+0xdc>
 8024810:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8024814:	6011      	str	r1, [r2, #0]
 8024816:	e7f2      	b.n	80247fe <_strtoul_l.isra.0+0xc6>
 8024818:	2430      	movs	r4, #48	; 0x30
 802481a:	2b00      	cmp	r3, #0
 802481c:	d1b1      	bne.n	8024782 <_strtoul_l.isra.0+0x4a>
 802481e:	2308      	movs	r3, #8
 8024820:	e7af      	b.n	8024782 <_strtoul_l.isra.0+0x4a>
 8024822:	2c30      	cmp	r4, #48	; 0x30
 8024824:	d0a2      	beq.n	802476c <_strtoul_l.isra.0+0x34>
 8024826:	230a      	movs	r3, #10
 8024828:	e7ab      	b.n	8024782 <_strtoul_l.isra.0+0x4a>
 802482a:	bf00      	nop
 802482c:	080299dd 	.word	0x080299dd

08024830 <_strtoul_r>:
 8024830:	f7ff bf82 	b.w	8024738 <_strtoul_l.isra.0>

08024834 <__submore>:
 8024834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024838:	460c      	mov	r4, r1
 802483a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802483c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024840:	4299      	cmp	r1, r3
 8024842:	d11d      	bne.n	8024880 <__submore+0x4c>
 8024844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024848:	f7fc fcf0 	bl	802122c <_malloc_r>
 802484c:	b918      	cbnz	r0, 8024856 <__submore+0x22>
 802484e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802485a:	63a3      	str	r3, [r4, #56]	; 0x38
 802485c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8024860:	6360      	str	r0, [r4, #52]	; 0x34
 8024862:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024866:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802486a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802486e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8024872:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8024876:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802487a:	6020      	str	r0, [r4, #0]
 802487c:	2000      	movs	r0, #0
 802487e:	e7e8      	b.n	8024852 <__submore+0x1e>
 8024880:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8024882:	0077      	lsls	r7, r6, #1
 8024884:	463a      	mov	r2, r7
 8024886:	f000 f84b 	bl	8024920 <_realloc_r>
 802488a:	4605      	mov	r5, r0
 802488c:	2800      	cmp	r0, #0
 802488e:	d0de      	beq.n	802484e <__submore+0x1a>
 8024890:	eb00 0806 	add.w	r8, r0, r6
 8024894:	4601      	mov	r1, r0
 8024896:	4632      	mov	r2, r6
 8024898:	4640      	mov	r0, r8
 802489a:	f7fc fc47 	bl	802112c <memcpy>
 802489e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80248a2:	f8c4 8000 	str.w	r8, [r4]
 80248a6:	e7e9      	b.n	802487c <__submore+0x48>

080248a8 <abort>:
 80248a8:	b508      	push	{r3, lr}
 80248aa:	2006      	movs	r0, #6
 80248ac:	f000 f886 	bl	80249bc <raise>
 80248b0:	2001      	movs	r0, #1
 80248b2:	f7de f861 	bl	8002978 <_exit>
	...

080248b8 <_fstat_r>:
 80248b8:	b538      	push	{r3, r4, r5, lr}
 80248ba:	4d07      	ldr	r5, [pc, #28]	; (80248d8 <_fstat_r+0x20>)
 80248bc:	2300      	movs	r3, #0
 80248be:	4604      	mov	r4, r0
 80248c0:	4608      	mov	r0, r1
 80248c2:	4611      	mov	r1, r2
 80248c4:	602b      	str	r3, [r5, #0]
 80248c6:	f7de f8a6 	bl	8002a16 <_fstat>
 80248ca:	1c43      	adds	r3, r0, #1
 80248cc:	d102      	bne.n	80248d4 <_fstat_r+0x1c>
 80248ce:	682b      	ldr	r3, [r5, #0]
 80248d0:	b103      	cbz	r3, 80248d4 <_fstat_r+0x1c>
 80248d2:	6023      	str	r3, [r4, #0]
 80248d4:	bd38      	pop	{r3, r4, r5, pc}
 80248d6:	bf00      	nop
 80248d8:	2001b1d8 	.word	0x2001b1d8

080248dc <_isatty_r>:
 80248dc:	b538      	push	{r3, r4, r5, lr}
 80248de:	4d06      	ldr	r5, [pc, #24]	; (80248f8 <_isatty_r+0x1c>)
 80248e0:	2300      	movs	r3, #0
 80248e2:	4604      	mov	r4, r0
 80248e4:	4608      	mov	r0, r1
 80248e6:	602b      	str	r3, [r5, #0]
 80248e8:	f7de f8a5 	bl	8002a36 <_isatty>
 80248ec:	1c43      	adds	r3, r0, #1
 80248ee:	d102      	bne.n	80248f6 <_isatty_r+0x1a>
 80248f0:	682b      	ldr	r3, [r5, #0]
 80248f2:	b103      	cbz	r3, 80248f6 <_isatty_r+0x1a>
 80248f4:	6023      	str	r3, [r4, #0]
 80248f6:	bd38      	pop	{r3, r4, r5, pc}
 80248f8:	2001b1d8 	.word	0x2001b1d8

080248fc <__ascii_mbtowc>:
 80248fc:	b082      	sub	sp, #8
 80248fe:	b901      	cbnz	r1, 8024902 <__ascii_mbtowc+0x6>
 8024900:	a901      	add	r1, sp, #4
 8024902:	b142      	cbz	r2, 8024916 <__ascii_mbtowc+0x1a>
 8024904:	b14b      	cbz	r3, 802491a <__ascii_mbtowc+0x1e>
 8024906:	7813      	ldrb	r3, [r2, #0]
 8024908:	600b      	str	r3, [r1, #0]
 802490a:	7812      	ldrb	r2, [r2, #0]
 802490c:	1e10      	subs	r0, r2, #0
 802490e:	bf18      	it	ne
 8024910:	2001      	movne	r0, #1
 8024912:	b002      	add	sp, #8
 8024914:	4770      	bx	lr
 8024916:	4610      	mov	r0, r2
 8024918:	e7fb      	b.n	8024912 <__ascii_mbtowc+0x16>
 802491a:	f06f 0001 	mvn.w	r0, #1
 802491e:	e7f8      	b.n	8024912 <__ascii_mbtowc+0x16>

08024920 <_realloc_r>:
 8024920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024922:	4607      	mov	r7, r0
 8024924:	4614      	mov	r4, r2
 8024926:	460e      	mov	r6, r1
 8024928:	b921      	cbnz	r1, 8024934 <_realloc_r+0x14>
 802492a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802492e:	4611      	mov	r1, r2
 8024930:	f7fc bc7c 	b.w	802122c <_malloc_r>
 8024934:	b922      	cbnz	r2, 8024940 <_realloc_r+0x20>
 8024936:	f7fc fc29 	bl	802118c <_free_r>
 802493a:	4625      	mov	r5, r4
 802493c:	4628      	mov	r0, r5
 802493e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024940:	f000 f865 	bl	8024a0e <_malloc_usable_size_r>
 8024944:	42a0      	cmp	r0, r4
 8024946:	d20f      	bcs.n	8024968 <_realloc_r+0x48>
 8024948:	4621      	mov	r1, r4
 802494a:	4638      	mov	r0, r7
 802494c:	f7fc fc6e 	bl	802122c <_malloc_r>
 8024950:	4605      	mov	r5, r0
 8024952:	2800      	cmp	r0, #0
 8024954:	d0f2      	beq.n	802493c <_realloc_r+0x1c>
 8024956:	4631      	mov	r1, r6
 8024958:	4622      	mov	r2, r4
 802495a:	f7fc fbe7 	bl	802112c <memcpy>
 802495e:	4631      	mov	r1, r6
 8024960:	4638      	mov	r0, r7
 8024962:	f7fc fc13 	bl	802118c <_free_r>
 8024966:	e7e9      	b.n	802493c <_realloc_r+0x1c>
 8024968:	4635      	mov	r5, r6
 802496a:	e7e7      	b.n	802493c <_realloc_r+0x1c>

0802496c <_raise_r>:
 802496c:	291f      	cmp	r1, #31
 802496e:	b538      	push	{r3, r4, r5, lr}
 8024970:	4604      	mov	r4, r0
 8024972:	460d      	mov	r5, r1
 8024974:	d904      	bls.n	8024980 <_raise_r+0x14>
 8024976:	2316      	movs	r3, #22
 8024978:	6003      	str	r3, [r0, #0]
 802497a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802497e:	bd38      	pop	{r3, r4, r5, pc}
 8024980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024982:	b112      	cbz	r2, 802498a <_raise_r+0x1e>
 8024984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024988:	b94b      	cbnz	r3, 802499e <_raise_r+0x32>
 802498a:	4620      	mov	r0, r4
 802498c:	f000 f830 	bl	80249f0 <_getpid_r>
 8024990:	462a      	mov	r2, r5
 8024992:	4601      	mov	r1, r0
 8024994:	4620      	mov	r0, r4
 8024996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802499a:	f000 b817 	b.w	80249cc <_kill_r>
 802499e:	2b01      	cmp	r3, #1
 80249a0:	d00a      	beq.n	80249b8 <_raise_r+0x4c>
 80249a2:	1c59      	adds	r1, r3, #1
 80249a4:	d103      	bne.n	80249ae <_raise_r+0x42>
 80249a6:	2316      	movs	r3, #22
 80249a8:	6003      	str	r3, [r0, #0]
 80249aa:	2001      	movs	r0, #1
 80249ac:	e7e7      	b.n	802497e <_raise_r+0x12>
 80249ae:	2400      	movs	r4, #0
 80249b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80249b4:	4628      	mov	r0, r5
 80249b6:	4798      	blx	r3
 80249b8:	2000      	movs	r0, #0
 80249ba:	e7e0      	b.n	802497e <_raise_r+0x12>

080249bc <raise>:
 80249bc:	4b02      	ldr	r3, [pc, #8]	; (80249c8 <raise+0xc>)
 80249be:	4601      	mov	r1, r0
 80249c0:	6818      	ldr	r0, [r3, #0]
 80249c2:	f7ff bfd3 	b.w	802496c <_raise_r>
 80249c6:	bf00      	nop
 80249c8:	20000074 	.word	0x20000074

080249cc <_kill_r>:
 80249cc:	b538      	push	{r3, r4, r5, lr}
 80249ce:	4d07      	ldr	r5, [pc, #28]	; (80249ec <_kill_r+0x20>)
 80249d0:	2300      	movs	r3, #0
 80249d2:	4604      	mov	r4, r0
 80249d4:	4608      	mov	r0, r1
 80249d6:	4611      	mov	r1, r2
 80249d8:	602b      	str	r3, [r5, #0]
 80249da:	f7dd ffbb 	bl	8002954 <_kill>
 80249de:	1c43      	adds	r3, r0, #1
 80249e0:	d102      	bne.n	80249e8 <_kill_r+0x1c>
 80249e2:	682b      	ldr	r3, [r5, #0]
 80249e4:	b103      	cbz	r3, 80249e8 <_kill_r+0x1c>
 80249e6:	6023      	str	r3, [r4, #0]
 80249e8:	bd38      	pop	{r3, r4, r5, pc}
 80249ea:	bf00      	nop
 80249ec:	2001b1d8 	.word	0x2001b1d8

080249f0 <_getpid_r>:
 80249f0:	f7dd bfa8 	b.w	8002944 <_getpid>

080249f4 <__ascii_wctomb>:
 80249f4:	b149      	cbz	r1, 8024a0a <__ascii_wctomb+0x16>
 80249f6:	2aff      	cmp	r2, #255	; 0xff
 80249f8:	bf85      	ittet	hi
 80249fa:	238a      	movhi	r3, #138	; 0x8a
 80249fc:	6003      	strhi	r3, [r0, #0]
 80249fe:	700a      	strbls	r2, [r1, #0]
 8024a00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8024a04:	bf98      	it	ls
 8024a06:	2001      	movls	r0, #1
 8024a08:	4770      	bx	lr
 8024a0a:	4608      	mov	r0, r1
 8024a0c:	4770      	bx	lr

08024a0e <_malloc_usable_size_r>:
 8024a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024a12:	1f18      	subs	r0, r3, #4
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	bfbc      	itt	lt
 8024a18:	580b      	ldrlt	r3, [r1, r0]
 8024a1a:	18c0      	addlt	r0, r0, r3
 8024a1c:	4770      	bx	lr
	...

08024a20 <_init>:
 8024a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a22:	bf00      	nop
 8024a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024a26:	bc08      	pop	{r3}
 8024a28:	469e      	mov	lr, r3
 8024a2a:	4770      	bx	lr

08024a2c <_fini>:
 8024a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a2e:	bf00      	nop
 8024a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024a32:	bc08      	pop	{r3}
 8024a34:	469e      	mov	lr, r3
 8024a36:	4770      	bx	lr
